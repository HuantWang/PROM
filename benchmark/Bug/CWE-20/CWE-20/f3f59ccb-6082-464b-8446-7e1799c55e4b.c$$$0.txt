-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
56,57
59,60
60,61
61,62
61,63
62,63
67,68
68,69
68,70
69,70
73,74
73,75
75,76
75,77
75,78
75,79
75,80
75,81
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
85,86
85,87
85,88
86,87
86,88
87,88
89,90
89,91
90,91
92,93
94,95
94,96
94,97
94,98
94,99
95,96
96,97
96,98
97,98
99,100
99,101
100,101
100,102
102,103
104,105
104,106
105,106
107,108
107,109
108,109
110,111
111,112
111,113
114,115
114,116
115,116
115,117
116,117
118,119
120,121
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
128,131
129,130
131,132
133,134
135,136
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
147,148
148,149
149,150
149,151
150,151
155,156
156,157
156,158
157,158
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,57,58,63,64,65,66,70,71,72,74,77,81,83,84,88,91,93,98,101,103,106,109,112,113,117,119,124,126,130,132,134,138,140,144,146,151,152,153,154,158,159,160
-----computeFrom-----
13,14
13,15
34,35
34,36
48,49
48,50
86,87
86,88
96,97
96,98
107,108
107,109
115,116
115,117
-----guardedBy-----
39,55
45,57
93,134
88,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(26,37,0)
(69,60,0)
(48,47,0)
(53,74,0)
(56,72,0)
(20,29,0)
(33,34,0)
(17,61,0)
(62,44,0)
(68,3,0)
(75,4,0)
(47,74,0)
(4,75,0)
(50,14,0)
(29,72,0)
(15,75,0)
(4,76,0)
(0,44,0)
(5,31,0)
(70,44,0)
(18,62,0)
(43,49,0)
(73,74,0)
(11,80,0)
(34,59,0)
(77,73,0)
(64,77,0)
(54,13,0)
(7,72,0)
(77,4,0)
(74,73,0)
(2,34,0)
(77,14,0)
(45,34,0)
(75,3,0)
(30,13,0)
(37,11,0)
(10,4,0)
(41,0,0)
(79,23,0)
(9,44,0)
(36,75,0)
(30,47,0)
(39,75,0)
(59,34,0)
(6,10,0)
(63,7,0)
(67,77,0)
(12,7,0)
(8,4,0)
(58,49,0)
(71,72,0)
(49,13,0)
(28,61,0)
(74,53,0)
(49,47,0)
(74,47,0)
(23,66,0)
(3,62,0)
(24,47,0)
(65,44,0)
(73,77,0)
(57,62,0)
(22,30,0)
(19,72,0)
(77,67,0)
(10,14,0)
(40,3,0)
(10,31,0)
(16,24,0)
(31,10,0)
(32,24,0)
(35,44,0)
(52,69,0)
(38,61,0)
(46,67,0)
(27,47,0)
(78,48,0)
(47,13,0)
(55,14,0)
(34,3,0)
(14,61,0)
(42,72,0)
(25,59,0)
(48,13,0)
(11,37,0)
(37,26,1)
(39,36,1)
(10,4,1)
(30,22,1)
(43,58,1)
(16,32,1)
(51,19,1)
(4,75,1)
(74,53,1)
(65,69,1)
(34,3,1)
(24,16,1)
(67,46,1)
(77,14,1)
(42,23,1)
(77,4,1)
(23,79,1)
(27,10,1)
(36,15,1)
(34,33,1)
(33,2,1)
(15,8,1)
(21,14,1)
(49,43,1)
(35,0,1)
(10,31,1)
(10,14,1)
(51,42,1)
(19,29,1)
(25,34,1)
(41,21,1)
(48,47,1)
(1,35,1)
(79,10,1)
(59,25,1)
(64,27,1)
(32,47,1)
(73,77,1)
(58,11,1)
(6,1,1)
(77,67,1)
(48,78,1)
(5,6,1)
(14,55,1)
(75,3,1)
(49,47,1)
(74,73,1)
(1,65,1)
(45,3,1)
(26,24,1)
(24,47,1)
(58,24,1)
(47,74,1)
(22,49,1)
(8,59,1)
(68,40,1)
(52,59,1)
(0,41,1)
(2,45,1)
(78,30,1)
(29,20,1)
(69,52,1)
(55,50,1)
(46,64,1)
(59,34,1)
(20,1,1)
(3,68,1)
(31,5,1)
(42,48,1)
(30,47,1)
(65,4,1)
(11,37,1)
(40,21,1)
(75,39,1)
(24,47,2)
(73,77,2)
(15,59,2)
(30,10,2)
(26,24,2)
(46,10,2)
(48,10,2)
(34,3,2)
(23,10,2)
(29,1,2)
(48,47,2)
(67,10,2)
(47,10,2)
(19,1,2)
(65,21,2)
(10,14,2)
(27,10,2)
(5,1,2)
(39,59,2)
(77,14,2)
(77,4,2)
(59,21,2)
(79,10,2)
(78,10,2)
(73,10,2)
(32,10,2)
(49,10,2)
(6,1,2)
(36,59,2)
(20,1,2)
(4,59,2)
(4,75,2)
(75,3,2)
(40,21,2)
(33,21,2)
(31,1,2)
(43,10,2)
(69,59,2)
(10,31,2)
(64,10,2)
(77,10,2)
(58,10,2)
(74,10,2)
(24,10,2)
(11,24,2)
(11,37,2)
(47,74,2)
(74,53,2)
(74,73,2)
(22,10,2)
(10,4,2)
(3,21,2)
(34,21,2)
(45,21,2)
(59,34,2)
(75,59,2)
(49,47,2)
(16,10,2)
(35,21,2)
(41,21,2)
(8,59,2)
(37,24,2)
(25,21,2)
(52,59,2)
(10,1,2)
(30,47,2)
(68,21,2)
(2,21,2)
(77,67,2)
(0,21,2)
(42,1,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,7)
(2,CHAR_ARRAY_SIZE)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,data = strtoul(inputBuffer, NULL, 0)
(5,HELLO_STRING)
(6,data)
(7,)
(8,data)
(9,default:)
(10,data > strlen(HELLO_STRING)
(11,exit(-1)
(12,if (data > strlen(HELLO_STRING)
(13,)
(14,data = 0)
(15,inputBuffer)
(16,NULL)
(17,switch(6)
(18,inputBuffer)
(19,break;)
(20,"Benign, fixed string")
(21,6)
(22,myString)
(23,printLine("Input is less than the length of the source string")
(24,myString == NULL)
(25,NULL)
(26,1)
(27,myString)
(28,switch(7)
(29,printLine("Benign, fixed string")
(30,printLine(myString)
(31,strlen(HELLO_STRING)
(32,myString)
(33,stdin)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,break;)
(36,NULL)
(37,-1)
(38,data)
(39,0)
(40,inputBuffer)
(41,"Benign, fixed string")
(42,break;)
(43,HELLO_STRING)
(44,)
(45,inputBuffer)
(46,char)
(47,myString = (char *)
(48,free(myString)
(49,strcpy(myString, HELLO_STRING)
(50,data)
(51,RET)
(52,"fgets()
(53,char *)
(54,if (myString == NULL)
(55,0)
(56,case 7:)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,myString)
(59,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(60,)
(61,)
(62,)
(63,myString)
(64,data)
(65,break;)
(66,)
(67,sizeof(char)
(68,"")
(69,printLine("fgets()
(70,case 6:)
(71,default:)
(72,)
(73,malloc(data*sizeof(char)
(74,(char *)
(75,strtoul(inputBuffer, NULL, 0)
(76,)
(77,data*sizeof(char)
(78,myString)
(79,"Input is less than the length of the source string")
(80,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^