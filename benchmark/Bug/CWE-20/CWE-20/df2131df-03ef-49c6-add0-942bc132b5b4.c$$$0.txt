-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int64_t));
        printLongLongLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
71,73
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
96,97
96,98
96,99
98,99
100,101
101,102
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
111,113
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,65,67,70,72,76,77,81,83,88,90,95,97,99,102,106,108,110,112,116,117,121,124,125,129,131
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
59,60
59,61
71,72
71,73
79,80
79,81
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int64_t));
memcpy(data, source, 100*sizeof(int64_t))
memcpy
memcpy
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(16,56,0)
(18,16,0)
(22,14,0)
(12,0,0)
(35,25,0)
(43,17,0)
(8,14,0)
(7,56,0)
(3,39,0)
(50,38,0)
(11,9,0)
(14,49,0)
(40,41,0)
(33,37,0)
(48,57,0)
(29,56,0)
(45,16,0)
(49,54,0)
(49,16,0)
(52,60,0)
(0,46,0)
(0,12,0)
(41,40,0)
(51,35,0)
(20,39,0)
(23,50,0)
(60,36,0)
(27,11,0)
(6,18,0)
(41,55,0)
(5,40,0)
(47,37,0)
(13,47,0)
(56,16,0)
(60,16,0)
(15,22,0)
(19,49,0)
(32,12,0)
(31,0,0)
(49,14,0)
(49,0,0)
(21,54,0)
(56,29,0)
(30,11,0)
(12,9,0)
(56,7,0)
(9,11,0)
(12,32,0)
(29,38,0)
(11,30,0)
(4,18,0)
(24,49,0)
(60,0,0)
(17,37,0)
(36,60,0)
(14,22,0)
(9,12,0)
(34,60,0)
(25,35,0)
(42,47,0)
(38,29,0)
(25,58,0)
(38,50,0)
(16,57,0)
(36,17,0)
(54,17,0)
(45,0,0)
(2,16,0)
(45,17,0)
(49,17,0)
(53,37,0)
(26,46,0)
(10,45,0)
(39,0,0)
(59,38,0)
(44,30,0)
(1,45,1)
(49,54,1)
(56,29,1)
(10,36,1)
(16,56,1)
(44,27,1)
(59,2,1)
(40,5,1)
(24,54,1)
(23,59,1)
(51,39,1)
(34,49,1)
(56,7,1)
(49,16,1)
(47,13,1)
(21,41,1)
(39,0,1)
(45,10,1)
(30,44,1)
(60,52,1)
(3,0,1)
(25,35,1)
(38,50,1)
(6,16,1)
(22,15,1)
(54,21,1)
(0,12,1)
(35,51,1)
(39,20,1)
(27,31,1)
(12,32,1)
(49,0,1)
(49,14,1)
(60,0,1)
(31,28,1)
(12,9,1)
(20,3,1)
(14,22,1)
(28,47,1)
(36,60,1)
(60,16,1)
(29,38,1)
(45,16,1)
(21,18,1)
(50,23,1)
(2,28,1)
(5,18,1)
(52,34,1)
(11,30,1)
(18,16,1)
(45,0,1)
(19,24,1)
(18,4,1)
(21,39,1)
(8,19,1)
(13,42,1)
(15,8,1)
(4,6,1)
(41,40,1)
(9,11,1)
(21,25,1)
(49,54,2)
(25,35,2)
(23,28,2)
(30,28,2)
(56,28,2)
(29,38,2)
(49,16,2)
(16,28,2)
(5,18,2)
(49,0,2)
(11,30,2)
(35,39,2)
(51,39,2)
(36,60,2)
(27,28,2)
(38,50,2)
(18,28,2)
(44,28,2)
(40,18,2)
(39,28,2)
(49,14,2)
(3,28,2)
(29,28,2)
(0,28,2)
(12,32,2)
(41,40,2)
(12,9,2)
(25,39,2)
(41,18,2)
(59,28,2)
(60,16,2)
(18,16,2)
(20,28,2)
(38,28,2)
(0,12,2)
(31,28,2)
(16,56,2)
(14,22,2)
(45,0,2)
(4,28,2)
(39,0,2)
(56,7,2)
(9,28,2)
(56,29,2)
(45,16,2)
(6,28,2)
(2,28,2)
(50,28,2)
(11,28,2)
(9,11,2)
(12,28,2)
(60,0,2)
-----------------------------------
(0,data = (int64_t *)
(1,RET)
(2,data)
(3,data)
(4,NULL)
(5,1)
(6,data)
(7,int64_t *)
(8,100)
(9,malloc(100*sizeof(int64_t)
(10,data)
(11,100*sizeof(int64_t)
(12,(int64_t *)
(13,NULL)
(14,100*sizeof(int64_t)
(15,int64_t)
(16,data = (int64_t *)
(17,)
(18,data == NULL)
(19,source)
(20,NULL)
(21,source)
(22,sizeof(int64_t)
(23,int64_t)
(24,data)
(25,exit(-1)
(26,if (data == NULL)
(27,100)
(28,globalReturnsTrueOrFalse()
(29,malloc(50*sizeof(int64_t)
(30,sizeof(int64_t)
(31,data)
(32,int64_t *)
(33,if(globalReturnsTrueOrFalse()
(34,data)
(35,-1)
(36,printLongLongLine(data[0])
(37,)
(38,50*sizeof(int64_t)
(39,data == NULL)
(40,-1)
(41,exit(-1)
(42,data)
(43,source)
(44,int64_t)
(45,free(data)
(46,)
(47,data = NULL)
(48,if (data == NULL)
(49,memcpy(data, source, 100*sizeof(int64_t)
(50,sizeof(int64_t)
(51,1)
(52,0)
(53,data)
(54,source[100] = {0})
(55,)
(56,(int64_t *)
(57,)
(58,)
(59,50)
(60,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^