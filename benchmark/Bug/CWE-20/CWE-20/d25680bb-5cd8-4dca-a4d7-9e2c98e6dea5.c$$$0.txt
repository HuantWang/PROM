-----label-----
1
-----code-----
void CWE127_Buffer_Underread__malloc_wchar_t_loop_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (dataBuffer == NULL) {exit(-1);}
            wmemset(dataBuffer, L'A', 100-1);
            dataBuffer[100-1] = L'\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    else
    {
        {
            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (dataBuffer == NULL) {exit(-1);}
            wmemset(dataBuffer, L'A', 100-1);
            dataBuffer[100-1] = L'\0';
            /* FIX: Set data pointer to the allocated memory buffer */
            data = dataBuffer;
        }
    }
    {
        size_t i;
        wchar_t dest[100];
        wmemset(dest, L'C', 100-1); /* fill with 'C's */
        dest[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */
        for (i = 0; i < 100; i++)
        {
            dest[i] = data[i];
        }
        /* Ensure null termination */
        dest[100-1] = L'\0';
        printWLine(dest);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
86,87
86,88
86,89
86,90
86,91
87,88
88,89
88,90
90,91
90,92
90,93
93,94
94,95
94,96
95,96
95,97
97,98
99,100
99,101
100,101
102,103
102,104
104,105
105,106
105,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
128,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
140,141
141,142
141,143
142,143
144,145
146,147
146,148
146,149
146,150
146,151
146,152
146,153
147,148
148,149
148,150
149,150
151,152
153,154
154,155
154,156
156,157
156,158
158,159
160,161
161,162
161,163
161,164
161,165
162,163
164,165
167,168
167,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
175,177
179,180
179,181
179,182
179,183
180,181
181,182
181,183
182,183
185,186
185,187
186,187
189,190
190,191
192,193
193,194
194,195
194,196
195,196
195,197
196,197
198,199
200,201
200,202
201,202
203,204
205,206
206,207
206,208
207,208
207,209
208,209
210,211
210,212
214,215
215,216
215,217
216,217
218,219
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,89,91,92,96,98,101,103,106,107,111,113,118,120,124,126,127,129,130,135,137,138,139,143,145,150,152,155,157,159,163,165,166,168,169,174,176,177,178,183,184,187,188,191,197,199,202,204,209,211,212,213,217,219
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
102,103
102,104
109,110
109,111
128,129
128,130
132,133
132,134
136,137
136,138
141,142
141,143
167,168
167,169
171,172
171,173
175,176
175,177
181,182
181,183
185,186
185,187
194,195
194,196
206,207
206,208
210,211
210,212
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE127_Buffer_Underread__malloc_wchar_t_loop_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }    {        size_t i;        wchar_t dest[100];        wmemset(dest, L'C', 100-1); /* fill with 'C's */        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        for (i = 0; i < 100; i++)        {            dest[i] = data[i];        }        /* Ensure null termination */        dest[100-1] = L'\0';        printWLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE127_Buffer_Underread__malloc_wchar_t_loop_12_bad()
CWE127_Buffer_Underread__malloc_wchar_t_loop_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }    {        size_t i;        wchar_t dest[100];        wmemset(dest, L'C', 100-1); /* fill with 'C's */        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        for (i = 0; i < 100; i++)        {            dest[i] = data[i];        }        /* Ensure null termination */        dest[100-1] = L'\0';        printWLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
{        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }
{            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        size_t i;        wchar_t dest[100];        wmemset(dest, L'C', 100-1); /* fill with 'C's */        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        for (i = 0; i < 100; i++)        {            dest[i] = data[i];        }        /* Ensure null termination */        dest[100-1] = L'\0';        printWLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
size_t i;
size_t i;
size_t
size_t
i
i
wchar_t dest[100];
wchar_t dest[100];
wchar_t
dest[100]
dest
[100]
100
wmemset(dest, L'C', 100-1);
wmemset(dest, L'C', 100-1)
wmemset
wmemset
dest
dest
L'C'
100-1
100
1
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
for (i = 0; i < 100; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(12,14,0)
(51,36,0)
(49,10,0)
(35,32,0)
(21,69,0)
(33,19,0)
(72,14,0)
(59,74,0)
(41,29,0)
(57,72,0)
(25,41,0)
(50,29,0)
(32,21,0)
(18,64,0)
(67,19,0)
(28,21,0)
(21,28,0)
(10,78,0)
(66,71,0)
(21,32,0)
(6,74,0)
(74,58,0)
(31,26,0)
(2,64,0)
(60,30,0)
(27,60,0)
(15,64,0)
(55,65,0)
(45,60,0)
(70,79,0)
(10,28,0)
(36,9,0)
(31,41,0)
(39,60,0)
(16,4,0)
(72,3,0)
(24,18,0)
(53,40,0)
(41,82,0)
(71,66,0)
(14,72,0)
(63,52,0)
(22,79,0)
(82,60,0)
(81,4,0)
(3,72,0)
(69,21,0)
(78,10,0)
(75,64,0)
(83,33,0)
(13,74,0)
(56,40,0)
(76,44,0)
(38,82,0)
(57,74,0)
(71,7,0)
(4,52,0)
(41,19,0)
(11,61,0)
(17,33,0)
(37,12,0)
(61,29,0)
(82,32,0)
(19,74,0)
(64,52,0)
(48,57,0)
(72,57,0)
(19,33,0)
(14,12,0)
(65,57,0)
(44,29,0)
(8,78,0)
(40,32,0)
(23,64,0)
(28,10,0)
(79,29,0)
(54,41,0)
(42,64,0)
(12,20,0)
(44,31,0)
(47,29,0)
(34,65,0)
(73,52,0)
(20,12,0)
(41,31,0)
(5,82,0)
(62,44,0)
(0,20,0)
(77,66,0)
(33,57,0)
(9,1,0)
(9,36,0)
(32,60,0)
(20,0,1)
(75,82,1)
(8,49,1)
(21,69,1)
(61,11,1)
(16,81,1)
(75,19,1)
(27,40,1)
(23,79,1)
(77,65,1)
(4,16,1)
(34,55,1)
(40,56,1)
(36,51,1)
(41,19,1)
(66,77,1)
(5,38,1)
(79,22,1)
(83,17,1)
(80,4,1)
(44,29,1)
(31,41,1)
(38,27,1)
(71,66,1)
(51,40,1)
(33,83,1)
(82,5,1)
(72,14,1)
(61,29,1)
(76,62,1)
(82,32,1)
(24,23,1)
(14,12,1)
(41,25,1)
(21,28,1)
(10,78,1)
(19,33,1)
(55,57,1)
(11,31,1)
(32,21,1)
(12,20,1)
(65,34,1)
(56,53,1)
(67,13,1)
(25,54,1)
(68,18,1)
(9,36,1)
(49,35,1)
(22,70,1)
(62,79,1)
(0,37,1)
(29,47,1)
(47,50,1)
(17,67,1)
(78,8,1)
(57,72,1)
(65,57,1)
(79,29,1)
(18,24,1)
(33,57,1)
(70,61,1)
(44,76,1)
(41,29,1)
(48,80,1)
(41,82,1)
(40,32,1)
(35,80,1)
(70,29,1)
(50,75,1)
(28,10,1)
(13,65,1)
(13,71,1)
(54,44,1)
(72,3,1)
(27,9,1)
(53,32,1)
(37,48,1)
(55,80,2)
(72,3,2)
(28,80,2)
(82,32,2)
(0,80,2)
(37,80,2)
(53,80,2)
(79,29,2)
(79,79,2)
(31,41,2)
(32,80,2)
(21,69,2)
(41,79,2)
(65,80,2)
(10,80,2)
(19,80,2)
(10,78,2)
(38,80,2)
(65,57,2)
(40,80,2)
(77,65,2)
(35,80,2)
(57,80,2)
(33,80,2)
(72,14,2)
(31,79,2)
(12,80,2)
(61,29,2)
(41,29,2)
(78,80,2)
(41,19,2)
(83,80,2)
(62,79,2)
(44,29,2)
(14,80,2)
(57,72,2)
(13,80,2)
(34,80,2)
(27,80,2)
(25,79,2)
(44,79,2)
(21,28,2)
(8,80,2)
(71,65,2)
(51,40,2)
(66,65,2)
(9,40,2)
(20,80,2)
(32,21,2)
(41,82,2)
(82,80,2)
(19,33,2)
(56,80,2)
(11,79,2)
(9,36,2)
(72,80,2)
(22,79,2)
(17,80,2)
(49,80,2)
(14,12,2)
(54,79,2)
(40,32,2)
(36,40,2)
(28,10,2)
(48,80,2)
(70,79,2)
(61,79,2)
(21,80,2)
(5,80,2)
(12,20,2)
(76,79,2)
(33,57,2)
(67,80,2)
(71,66,2)
-----------------------------------
(0,wchar_t)
(1,)
(2,i)
(3,wchar_t *)
(4,data = NULL)
(5,dataBuffer)
(6,if (dataBuffer == NULL)
(7,)
(8,wchar_t)
(9,exit(-1)
(10,100*sizeof(wchar_t)
(11,i)
(12,100*sizeof(wchar_t)
(13,\'\\\\0\')
(14,malloc(100*sizeof(wchar_t)
(15,dest)
(16,NULL)
(17,dataBuffer)
(18,printWLine(dest)
(19,data = dataBuffer - 8)
(20,sizeof(wchar_t)
(21,(wchar_t *)
(22,100)
(23,'\\\\0')
(24,dest)
(25,i)
(26,)
(27,\'\\\\0\')
(28,malloc(100*sizeof(wchar_t)
(29,i = 0)
(30,)
(31,dest[i] = data[i])
(32,* dataBuffer = (wchar_t *)
(33,dataBuffer - 8)
(34,NULL)
(35,dataBuffer)
(36,-1)
(37,100)
(38,data)
(39,if (dataBuffer == NULL)
(40,dataBuffer == NULL)
(41,data[i])
(42,for (i = 0; i < 100; i++)
(43,'\\\\0')
(44,dest[i])
(45,dataBuffer)
(46,'\\\\0')
(47,0)
(48,dataBuffer)
(49,100)
(50,i)
(51,1)
(52,)
(53,dataBuffer)
(54,data)
(55,dataBuffer)
(56,NULL)
(57,* dataBuffer = (wchar_t *)
(58,)
(59,dataBuffer)
(60,)
(61,i++)
(62,dest)
(63,data)
(64,)
(65,dataBuffer == NULL)
(66,-1)
(67,data)
(68,RET)
(69,wchar_t *)
(70,i)
(71,exit(-1)
(72,(wchar_t *)
(73,if(globalReturnsTrueOrFalse()
(74,)
(75,'\\\\0')
(76,i)
(77,1)
(78,sizeof(wchar_t)
(79,i < 100)
(80,globalReturnsTrueOrFalse()
(81,data)
(82,data = dataBuffer)
(83,8)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^