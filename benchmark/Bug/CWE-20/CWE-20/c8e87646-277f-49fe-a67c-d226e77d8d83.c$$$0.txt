-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_bad()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType myUnion;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Append input from an environment variable to data */
        size_t dataLen = wcslen(data);
        wchar_t * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            wcsncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wexecvp - searches for the location of the command among
             * the directories specified by the PATH environment variable */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            EXECVP(COMMAND_INT, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
67,70
67,71
68,69
70,71
70,72
71,72
73,74
75,76
77,78
77,79
78,79
78,80
80,81
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
91,93
92,93
93,94
93,95
95,96
95,97
95,98
98,99
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
107,108
107,109
107,110
107,111
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
119,120
121,122
122,123
122,124
122,125
123,124
125,126
127,128
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,49,51,52,56,58,62,64,69,72,74,76,79,81,82,87,88,90,94,96,97,101,102,106,108,109,110,114,116,118,120,124,126,128
-----computeFrom-----
29,30
29,31
60,61
60,62
70,71
70,72
77,78
77,79
78,79
78,80
84,85
84,86
-----guardedBy-----
62,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_bad(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_bad()
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_bad
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType
CWE78_OS_Command_Injection__wchar_t_environment_w32_execvp_34_unionType
myUnion
myUnion
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
wcsncat(data+dataLen, environment, 100-dataLen-1);
wcsncat(data+dataLen, environment, 100-dataLen-1)
wcsncat
wcsncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(2,6,0)
(50,23,0)
(30,6,0)
(22,10,0)
(32,2,0)
(16,18,0)
(31,40,0)
(38,35,0)
(47,2,0)
(53,18,0)
(41,43,0)
(52,51,0)
(3,52,0)
(12,19,0)
(15,51,0)
(10,40,0)
(26,23,0)
(27,35,0)
(54,19,0)
(25,19,0)
(23,30,0)
(4,6,0)
(45,51,0)
(34,7,0)
(28,46,0)
(7,46,0)
(44,31,0)
(42,41,0)
(49,6,0)
(18,30,0)
(13,1,0)
(48,1,0)
(14,48,0)
(43,6,0)
(30,2,0)
(18,7,0)
(51,15,0)
(20,13,0)
(11,31,0)
(37,15,0)
(40,43,0)
(7,19,0)
(29,6,0)
(1,19,0)
(52,24,0)
(18,52,0)
(9,1,0)
(1,13,0)
(39,30,0)
(23,6,0)
(52,18,0)
(41,35,0)
(19,6,0)
(46,30,0)
(5,30,0)
(35,41,0)
(51,52,0)
(21,48,0)
(31,10,0)
(52,1,0)
(46,7,0)
(55,43,0)
(0,50,0)
(36,50,0)
(33,15,0)
(15,7,0)
(8,40,0)
(0,52,1)
(23,26,1)
(48,1,1)
(18,53,1)
(47,32,1)
(17,31,1)
(2,47,1)
(23,30,1)
(13,20,1)
(37,33,1)
(30,2,1)
(50,36,1)
(52,18,1)
(5,2,1)
(15,7,1)
(52,1,1)
(34,30,1)
(15,37,1)
(31,10,1)
(30,39,1)
(45,3,1)
(3,18,1)
(18,30,1)
(22,41,1)
(26,50,1)
(42,23,1)
(41,35,1)
(52,51,1)
(44,10,1)
(1,13,1)
(46,30,1)
(39,5,1)
(20,9,1)
(33,45,1)
(46,28,1)
(11,44,1)
(53,16,1)
(38,42,1)
(35,27,1)
(51,15,1)
(28,34,1)
(10,22,1)
(14,21,1)
(21,1,1)
(36,0,1)
(31,11,1)
(18,7,1)
(48,14,1)
(27,38,1)
(0,48,1)
(7,46,1)
(9,7,1)
(16,48,1)
(31,10,2)
(52,18,2)
(15,48,2)
(16,48,2)
(51,15,2)
(48,1,2)
(53,48,2)
(52,51,2)
(15,7,2)
(1,13,2)
(52,48,2)
(30,2,2)
(18,7,2)
(18,30,2)
(7,46,2)
(37,48,2)
(3,48,2)
(45,48,2)
(18,48,2)
(23,30,2)
(51,48,2)
(52,1,2)
(46,30,2)
(41,35,2)
(33,48,2)
-----------------------------------
(0,myUnion)
(1,* environment = GETENV(ENV_VARIABLE)
(2,dataBuffer[100] = COMMAND_ARG2)
(3,environment)
(4,myUnion)
(5,data)
(6,)
(7,dataLen = wcslen(data)
(8,args)
(9,environment)
(10,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(11,args)
(12,dataLen)
(13,GETENV(ENV_VARIABLE)
(14,NULL)
(15,dataLen-1)
(16,data)
(17,RET)
(18,data+dataLen)
(19,)
(20,ENV_VARIABLE)
(21,environment)
(22,args)
(23,myUnion.unionFirst = data)
(24,)
(25,if (environment != NULL)
(26,data)
(27,unionSecond)
(28,data)
(29,data)
(30,data = dataBuffer)
(31,EXECVP(COMMAND_INT, args)
(32,dataBuffer)
(33,dataLen)
(34,dataLen)
(35,myUnion.unionSecond)
(36,unionFirst)
(37,1)
(38,myUnion)
(39,dataBuffer)
(40,)
(41,* data = myUnion.unionSecond)
(42,data)
(43,)
(44,COMMAND_INT)
(45,100)
(46,wcslen(data)
(47,COMMAND_ARG2)
(48,environment != NULL)
(49,dataBuffer)
(50,myUnion.unionFirst)
(51,100-dataLen-1)
(52,wcsncat(data+dataLen, environment, 100-dataLen-1)
(53,dataLen)
(54,environment)
(55,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^