-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_struct_10_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
62,63
62,64
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,59,61,64,69,71
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_struct_10_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_struct_10_bad()
CWE415_Double_Free__malloc_free_struct_10_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
globalTrue
globalTrue
{        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(26,7,0)
(23,28,0)
(5,20,0)
(8,30,0)
(32,7,0)
(20,8,0)
(18,26,0)
(8,3,0)
(6,9,0)
(25,23,0)
(29,20,0)
(16,10,0)
(30,10,0)
(2,10,0)
(29,1,0)
(3,8,0)
(17,20,0)
(21,7,0)
(31,29,0)
(23,20,0)
(9,15,0)
(15,9,0)
(19,7,0)
(11,5,0)
(14,26,0)
(15,13,0)
(10,30,0)
(24,16,0)
(29,26,0)
(10,16,0)
(30,8,0)
(12,5,0)
(0,28,0)
(20,28,0)
(8,20,0)
(24,2,1)
(29,26,1)
(27,29,1)
(23,20,1)
(4,26,1)
(17,4,1)
(8,30,1)
(27,22,1)
(14,18,1)
(16,24,1)
(5,20,1)
(9,6,1)
(6,5,1)
(15,9,1)
(25,5,1)
(10,16,1)
(20,8,1)
(26,14,1)
(25,15,1)
(23,25,1)
(12,11,1)
(22,4,1)
(29,20,1)
(30,10,1)
(8,3,1)
(2,17,1)
(5,12,1)
(31,22,1)
(11,20,1)
(22,23,1)
(29,31,1)
(30,10,2)
(2,4,2)
(6,5,2)
(23,20,2)
(5,20,2)
(29,20,2)
(15,9,2)
(29,22,2)
(31,22,2)
(30,4,2)
(11,4,2)
(29,26,2)
(16,4,2)
(25,4,2)
(9,5,2)
(20,8,2)
(24,4,2)
(10,16,2)
(23,4,2)
(8,3,2)
(8,30,2)
(8,4,2)
(17,4,2)
(15,5,2)
(5,4,2)
(12,4,2)
(20,4,2)
(10,4,2)
-----------------------------------
(0,if (data == NULL)
(1,)
(2,100)
(3,twoIntsStruct *)
(4,globalTrue)
(5,data == NULL)
(6,1)
(7,)
(8,(twoIntsStruct *)
(9,-1)
(10,100*sizeof(twoIntsStruct)
(11,data)
(12,NULL)
(13,)
(14,NULL)
(15,exit(-1)
(16,sizeof(twoIntsStruct)
(17,data)
(18,data)
(19,if(globalTrue)
(20,data = (twoIntsStruct *)
(21,data)
(22,globalTrue)
(23,free(data)
(24,twoIntsStruct)
(25,data)
(26,data = NULL)
(27,RET)
(28,)
(29,free(data)
(30,malloc(100*sizeof(twoIntsStruct)
(31,data)
(32,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^