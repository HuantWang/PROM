-----label-----
1
-----code-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource(char * data)
{
    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
15,18
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,51,52,53,56
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource(char * data){    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
char
* CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource(char * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource
char * data
char
* data
*
data
{    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(11,10,0)
(17,4,0)
(3,30,0)
(9,31,0)
(11,9,0)
(23,9,0)
(9,5,0)
(6,13,0)
(8,5,0)
(27,11,0)
(21,8,0)
(4,3,0)
(0,1,0)
(12,3,0)
(24,13,0)
(31,28,0)
(30,31,0)
(22,10,0)
(2,23,0)
(31,30,0)
(16,8,0)
(23,5,0)
(30,3,0)
(28,31,0)
(1,7,0)
(20,7,0)
(14,23,0)
(11,5,0)
(13,24,0)
(9,7,0)
(18,9,0)
(8,1,0)
(31,9,0)
(3,4,0)
(8,9,0)
(26,11,0)
(24,29,0)
(8,5,1)
(23,5,1)
(21,24,1)
(30,3,1)
(27,11,1)
(8,9,1)
(13,6,1)
(0,8,1)
(11,26,1)
(11,5,1)
(4,17,1)
(6,23,1)
(23,9,1)
(11,9,1)
(23,14,1)
(26,1,1)
(9,31,1)
(31,28,1)
(2,9,1)
(26,15,1)
(18,15,1)
(31,30,1)
(24,13,1)
(9,5,1)
(1,0,1)
(3,4,1)
(21,23,1)
(8,16,1)
(14,2,1)
(16,21,1)
(17,12,1)
(12,18,1)
(13,23,2)
(8,15,2)
(30,15,2)
(3,4,2)
(17,15,2)
(12,15,2)
(0,15,2)
(21,15,2)
(2,15,2)
(31,30,2)
(11,5,2)
(16,15,2)
(24,13,2)
(3,15,2)
(9,31,2)
(18,15,2)
(11,9,2)
(31,15,2)
(9,15,2)
(30,3,2)
(9,5,2)
(23,9,2)
(27,11,2)
(6,23,2)
(24,23,2)
(31,28,2)
(14,15,2)
(8,9,2)
(4,15,2)
(23,15,2)
(23,5,2)
(8,5,2)
(1,15,2)
-----------------------------------
(0,\'\\\\0\')
(1,data[0] = \'\\\\0\')
(2,data)
(3,50*sizeof(char)
(4,sizeof(char)
(5,char * data)
(6,1)
(7,)
(8,data[0])
(9,data = (char *)
(10,)
(11,return data;)
(12,50)
(13,-1)
(14,NULL)
(15,CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)
(16,0)
(17,char)
(18,data)
(19,data[0] = '\\\\0')
(20,if (data == NULL)
(21,data)
(22,if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal)
(23,data == NULL)
(24,exit(-1)
(25,'\\\\0')
(26,data)
(27,RET)
(28,char *)
(29,)
(30,malloc(50*sizeof(char)
(31,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^