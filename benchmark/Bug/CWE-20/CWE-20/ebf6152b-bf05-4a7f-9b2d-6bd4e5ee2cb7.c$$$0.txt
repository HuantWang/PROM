-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
24,26
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
43,44
44,45
44,46
44,47
44,48
45,46
47,48
47,49
48,49
51,52
53,54
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
67,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
-----nextToken-----
2,4,8,14,16,21,22,25,27,29,33,36,38,41,42,46,49,50,52,56,62,63,71,72,75,76,77,78,82,85,87,90,91,95,98,100,103,104
-----computeFrom-----
18,19
18,20
58,59
58,60
64,65
64,66
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad(){    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad
{    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memmove
memmove
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(4,32,0)
(17,19,0)
(25,3,0)
(46,18,0)
(8,45,0)
(44,29,0)
(22,3,0)
(50,4,0)
(0,9,0)
(30,46,0)
(45,22,0)
(23,22,0)
(19,17,0)
(9,15,0)
(41,15,0)
(48,7,0)
(47,3,0)
(18,46,0)
(4,50,0)
(3,35,0)
(5,15,0)
(1,26,0)
(13,19,0)
(26,50,0)
(43,4,0)
(7,48,0)
(6,48,0)
(42,54,0)
(7,3,0)
(36,48,0)
(26,29,0)
(22,31,0)
(29,26,0)
(27,18,0)
(29,12,0)
(32,4,0)
(17,30,0)
(11,36,0)
(15,5,0)
(14,25,0)
(30,17,0)
(21,31,0)
(39,2,0)
(31,22,0)
(48,36,0)
(22,45,0)
(2,50,0)
(37,18,0)
(15,9,0)
(12,29,0)
(24,13,0)
(10,13,0)
(16,17,0)
(52,45,0)
(36,50,0)
(48,6,0)
(19,25,0)
(49,26,0)
(19,13,0)
(12,3,0)
(30,51,0)
(5,3,0)
(15,41,0)
(51,30,0)
(29,44,0)
(50,3,0)
(38,36,0)
(46,30,0)
(53,51,0)
(33,9,0)
(20,2,0)
(45,8,1)
(51,53,1)
(31,21,1)
(48,36,1)
(15,9,1)
(29,44,1)
(10,24,1)
(26,1,1)
(43,2,1)
(40,28,1)
(1,49,1)
(48,6,1)
(4,43,1)
(36,50,1)
(5,15,1)
(23,45,1)
(38,50,1)
(30,46,1)
(49,5,1)
(17,16,1)
(18,37,1)
(39,20,1)
(14,19,1)
(15,41,1)
(24,22,1)
(30,51,1)
(25,14,1)
(2,39,1)
(21,23,1)
(40,12,1)
(12,29,1)
(4,32,1)
(22,45,1)
(17,30,1)
(16,30,1)
(11,38,1)
(22,31,1)
(9,33,1)
(7,48,1)
(53,46,1)
(26,50,1)
(19,13,1)
(27,13,1)
(13,10,1)
(46,18,1)
(52,7,1)
(50,4,1)
(33,0,1)
(20,28,1)
(29,26,1)
(37,27,1)
(36,11,1)
(8,52,1)
(0,25,1)
(19,17,1)
(16,28,2)
(24,28,2)
(33,28,2)
(4,28,2)
(15,41,2)
(19,17,2)
(14,28,2)
(43,28,2)
(23,28,2)
(18,28,2)
(51,28,2)
(26,28,2)
(37,28,2)
(30,46,2)
(17,28,2)
(48,28,2)
(1,28,2)
(15,9,2)
(4,32,2)
(22,28,2)
(5,28,2)
(48,6,2)
(36,50,2)
(29,26,2)
(46,28,2)
(8,28,2)
(48,36,2)
(15,28,2)
(13,28,2)
(20,28,2)
(5,15,2)
(25,28,2)
(7,28,2)
(26,50,2)
(49,28,2)
(27,28,2)
(31,28,2)
(29,28,2)
(50,28,2)
(2,28,2)
(19,13,2)
(7,48,2)
(50,4,2)
(22,31,2)
(36,28,2)
(53,28,2)
(29,44,2)
(21,28,2)
(39,28,2)
(52,28,2)
(12,28,2)
(10,28,2)
(22,45,2)
(30,51,2)
(46,18,2)
(45,28,2)
(0,28,2)
(11,28,2)
(12,29,2)
(9,28,2)
(17,30,2)
(19,28,2)
(38,28,2)
(30,28,2)
-----------------------------------
(0,structCharVoid)
(1,voidSecond)
(2,structCharVoid.voidSecond)
(3,)
(4,(void *)
(5,printLine((char *)
(6,char *)
(7,printLine((char *)
(8,charFirst)
(9,structCharVoid.charFirst)
(10,charFirst)
(11,voidSecond)
(12,printLine((char *)
(13,structCharVoid.charFirst)
(14,\'\\\\0\')
(15,(char *)
(16,1)
(17,(sizeof(structCharVoid.charFirst)
(18,structCharVoid.charFirst)
(19,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(20,structCharVoid)
(21,structCharVoid)
(22,memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(23,SRC_STR)
(24,structCharVoid)
(25,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(26,structCharVoid.voidSecond)
(27,structCharVoid)
(28,STATIC_CONST_TRUE)
(29,(char *)
(30,sizeof(structCharVoid.charFirst)
(31,sizeof(structCharVoid)
(32,void *)
(33,charFirst)
(34,'\\\\0')
(35,)
(36,structCharVoid.voidSecond)
(37,charFirst)
(38,structCharVoid)
(39,voidSecond)
(40,RET)
(41,char *)
(42,if(STATIC_CONST_TRUE)
(43,SRC_STR)
(44,char *)
(45,structCharVoid.charFirst)
(46,sizeof(structCharVoid.charFirst)
(47,structCharVoid)
(48,(char *)
(49,structCharVoid)
(50,structCharVoid.voidSecond = (void *)
(51,sizeof(char)
(52,structCharVoid)
(53,char)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^