-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
37,38
37,39
38,39
38,40
40,41
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
62,64
63,64
63,65
63,66
63,67
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
75,76
76,77
76,78
78,79
80,81
82,83
84,85
84,86
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,39,41,42,47,50,52,53,57,59,65,68,70,73,74,77,79,81,83,88,89,94,96,97,101,103,106
-----computeFrom-----
37,38
37,39
38,39
38,40
45,46
45,47
55,56
55,57
62,63
62,64
66,67
66,68
76,77
76,78
91,92
91,93
-----guardedBy-----
41,96
59,83
57,103
68,94
79,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
badStatic
badStatic
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(51,15,0)
(34,37,0)
(20,18,0)
(6,19,0)
(14,30,0)
(8,20,0)
(42,15,0)
(33,15,0)
(10,51,0)
(50,51,0)
(48,36,0)
(37,34,0)
(23,51,0)
(34,6,0)
(44,53,0)
(11,46,0)
(26,6,0)
(5,34,0)
(34,18,0)
(4,10,0)
(11,51,0)
(24,52,0)
(21,30,0)
(18,20,0)
(51,23,0)
(40,19,0)
(12,17,0)
(23,46,0)
(53,46,0)
(29,11,0)
(20,51,0)
(31,6,0)
(13,53,0)
(53,25,0)
(32,36,0)
(1,48,0)
(11,34,0)
(41,23,0)
(35,37,0)
(15,47,0)
(45,19,0)
(36,48,0)
(18,9,0)
(27,26,0)
(19,6,0)
(22,15,0)
(34,11,0)
(49,16,0)
(28,20,0)
(39,26,0)
(2,25,0)
(18,34,0)
(38,10,0)
(0,21,0)
(9,18,0)
(16,6,0)
(43,11,0)
(48,51,0)
(6,17,0)
(16,52,0)
(10,46,0)
(3,14,0)
(54,48,0)
(10,21,0)
(10,51,1)
(3,37,1)
(26,6,1)
(34,11,1)
(41,50,1)
(11,51,1)
(39,27,1)
(23,41,1)
(18,9,1)
(13,36,1)
(16,6,1)
(49,21,1)
(50,7,1)
(29,43,1)
(21,0,1)
(13,26,1)
(8,11,1)
(13,16,1)
(20,51,1)
(10,46,1)
(10,38,1)
(0,10,1)
(36,48,1)
(36,32,1)
(53,46,1)
(34,5,1)
(16,49,1)
(34,18,1)
(53,13,1)
(14,3,1)
(37,35,1)
(23,46,1)
(20,28,1)
(26,39,1)
(1,54,1)
(40,45,1)
(49,37,1)
(34,6,1)
(51,23,1)
(43,26,1)
(54,51,1)
(44,53,1)
(35,34,1)
(6,19,1)
(4,14,1)
(37,34,1)
(11,29,1)
(45,31,1)
(32,48,1)
(27,6,1)
(28,8,1)
(19,40,1)
(18,20,1)
(5,18,1)
(11,46,1)
(31,36,1)
(48,1,1)
(48,51,1)
(13,7,1)
(38,4,1)
(14,37,2)
(18,26,2)
(16,6,2)
(44,53,2)
(34,6,2)
(18,20,2)
(6,36,2)
(43,26,2)
(51,7,2)
(54,7,2)
(29,26,2)
(26,6,2)
(32,7,2)
(37,26,2)
(48,51,2)
(34,11,2)
(39,36,2)
(16,26,2)
(38,37,2)
(10,37,2)
(10,46,2)
(37,34,2)
(34,26,2)
(19,36,2)
(11,26,2)
(51,23,2)
(18,9,2)
(3,37,2)
(50,7,2)
(27,36,2)
(11,51,2)
(28,26,2)
(23,46,2)
(0,37,2)
(53,46,2)
(35,26,2)
(8,26,2)
(31,36,2)
(4,37,2)
(49,26,2)
(20,26,2)
(1,7,2)
(11,46,2)
(10,51,2)
(5,26,2)
(34,18,2)
(21,37,2)
(36,48,2)
(23,7,2)
(45,36,2)
(48,7,2)
(36,7,2)
(40,36,2)
(6,19,2)
(26,36,2)
(20,51,2)
(41,7,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,dataLen)
(2,if(badStatic)
(3,"fgets()
(4,data)
(5,pFile)
(6,pFile = fopen(FILENAME, "r")
(7,badStatic)
(8,100)
(9,int)
(10,data[dataLen])
(11,data+dataLen)
(12,if (pFile != NULL)
(13,data)
(14,printLine("fgets()
(15,)
(16,fclose(pFile)
(17,)
(18,(int)
(19,fopen(FILENAME, "r")
(20,100-dataLen)
(21,data[dataLen] = \\\'\\\\0\\\')
(22,pFile)
(23,strlen(data)
(24,if (fgets(data+dataLen, (int)
(25,)
(26,pFile != NULL)
(27,pFile)
(28,dataLen)
(29,dataLen)
(30,)
(31,pFile)
(32,1)
(33,dataLen)
(34,fgets(data+dataLen, (int)
(35,NULL)
(36,100-dataLen > 1)
(37,fgets(data+dataLen, (int)
(38,dataLen)
(39,NULL)
(40,"r")
(41,data)
(42,if (100-dataLen > 1)
(43,data)
(44,RET)
(45,FILENAME)
(46,char * data)
(47,)
(48,100-dataLen)
(49,pFile)
(50,dataLen)
(51,dataLen = strlen(data)
(52,)
(53,return data;)
(54,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^