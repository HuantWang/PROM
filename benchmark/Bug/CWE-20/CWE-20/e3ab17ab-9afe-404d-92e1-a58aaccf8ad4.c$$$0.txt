-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strncpy(data, source, 100-1);
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
61,68
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,97,98,103,105,106,107,111,113,117,119
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
96,97
96,98
100,101
100,102
104,105
104,106
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(65,56,0)
(54,28,0)
(4,44,0)
(2,28,0)
(43,33,0)
(36,24,0)
(63,42,0)
(20,11,0)
(40,24,0)
(23,12,0)
(31,5,0)
(4,10,0)
(5,31,0)
(31,56,0)
(7,15,0)
(47,41,0)
(5,21,0)
(50,54,0)
(2,26,0)
(30,7,0)
(57,12,0)
(14,15,0)
(39,10,0)
(0,1,0)
(36,31,0)
(55,38,0)
(34,41,0)
(62,7,0)
(5,3,0)
(15,56,0)
(35,38,0)
(33,12,0)
(52,31,0)
(36,12,0)
(16,28,0)
(37,28,0)
(29,55,0)
(17,50,0)
(58,42,0)
(54,12,0)
(22,54,0)
(3,41,0)
(55,11,0)
(61,37,0)
(32,54,0)
(51,34,0)
(48,26,0)
(42,36,0)
(54,31,0)
(24,28,0)
(3,5,0)
(45,38,0)
(36,42,0)
(46,2,0)
(21,5,0)
(33,31,0)
(7,31,0)
(38,55,0)
(41,3,0)
(13,31,0)
(12,1,0)
(33,28,0)
(26,2,0)
(37,31,0)
(10,4,0)
(8,52,0)
(18,50,0)
(28,1,0)
(37,12,0)
(11,28,0)
(54,50,0)
(6,26,0)
(41,34,0)
(53,36,0)
(59,1,0)
(60,2,0)
(19,52,0)
(42,58,1)
(34,51,1)
(37,12,1)
(14,7,1)
(24,40,1)
(58,63,1)
(8,31,1)
(5,21,1)
(10,39,1)
(26,48,1)
(52,31,1)
(40,36,1)
(25,12,1)
(43,24,1)
(37,61,1)
(60,25,1)
(53,54,1)
(2,26,1)
(36,31,1)
(51,47,1)
(50,17,1)
(30,4,1)
(38,35,1)
(23,57,1)
(11,20,1)
(31,5,1)
(33,43,1)
(32,11,1)
(47,13,1)
(62,30,1)
(3,41,1)
(36,42,1)
(48,6,1)
(45,29,1)
(54,50,1)
(29,2,1)
(4,10,1)
(19,8,1)
(15,14,1)
(36,12,1)
(18,22,1)
(54,31,1)
(37,31,1)
(7,62,1)
(46,60,1)
(13,25,1)
(52,19,1)
(33,31,1)
(17,18,1)
(41,34,1)
(22,32,1)
(7,31,1)
(5,3,1)
(54,12,1)
(61,33,1)
(35,45,1)
(39,52,1)
(20,55,1)
(30,52,1)
(63,53,1)
(12,23,1)
(55,38,1)
(6,46,1)
(60,15,1)
(27,37,1)
(33,12,1)
(5,3,2)
(36,31,2)
(3,41,2)
(4,10,2)
(5,21,2)
(33,31,2)
(30,25,2)
(37,31,2)
(31,25,2)
(8,25,2)
(41,34,2)
(14,25,2)
(33,12,2)
(52,25,2)
(2,26,2)
(7,25,2)
(55,38,2)
(54,31,2)
(52,31,2)
(54,50,2)
(54,12,2)
(47,25,2)
(10,52,2)
(15,25,2)
(31,5,2)
(4,52,2)
(13,25,2)
(37,12,2)
(36,12,2)
(36,42,2)
(7,31,2)
(3,25,2)
(34,25,2)
(39,52,2)
(51,25,2)
(62,25,2)
(19,25,2)
(5,25,2)
(41,25,2)
-----------------------------------
(0,if(staticReturnsTrue()
(1,)
(2,memset(source, 'C', 100-1)
(3,malloc(50*sizeof(char)
(4,exit(-1)
(5,(char *)
(6,100)
(7,data[0])
(8,data)
(9,memset(source, \'C\', 100-1)
(10,-1)
(11,source[100-1] = '\\\\0')
(12,data = NULL)
(13,data)
(14,\'\\\\0\')
(15,data[0] = '\\\\0')
(16,source)
(17,1)
(18,100)
(19,NULL)
(20,'\\\\0')
(21,char *)
(22,source)
(23,NULL)
(24,data[100-1] = '\\\\0')
(25,staticReturnsTrue()
(26,100-1)
(27,RET)
(28,)
(29,source)
(30,data)
(31,data = (char *)
(32,data)
(33,printLine(data)
(34,sizeof(char)
(35,1)
(36,data[100-1])
(37,free(data)
(38,100-1)
(39,1)
(40,'\\\\0')
(41,50*sizeof(char)
(42,100-1)
(43,data)
(44,)
(45,100)
(46,'C')
(47,50)
(48,1)
(49,'\\\\0')
(50,100-1)
(51,char)
(52,data == NULL)
(53,data)
(54,strncpy(data, source, 100-1)
(55,source[100-1])
(56,)
(57,data)
(58,1)
(59,data)
(60,source)
(61,data)
(62,0)
(63,100)
(64,data[0] = \'\\\\0\')
(65,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^