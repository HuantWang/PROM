-----label-----
1
-----code-----
void CWE416_Use_After_Free__return_freed_ptr_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            /* Call the bad helper function */
            char * reversedString = helperBad("BadSink");
            printLine(reversedString);
            /* free(reversedString);
             * This call to free() was removed because we want the tool to detect the use after free,
             * but we don't want that function to be free(). Essentially we want to avoid a double free
             */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
-----nextToken-----
2,4,9,14,16,17,21,22,26,28
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__return_freed_ptr_08_bad(){    if(staticReturnsTrue())    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
void
CWE416_Use_After_Free__return_freed_ptr_08_bad()
CWE416_Use_After_Free__return_freed_ptr_08_bad
{    if(staticReturnsTrue())    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
if(staticReturnsTrue())    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
{            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }
char * reversedString = helperBad("BadSink");
char * reversedString = helperBad("BadSink");
char
* reversedString = helperBad("BadSink")
*
reversedString
= helperBad("BadSink")
helperBad("BadSink")
helperBad
helperBad
"BadSink"
printLine(reversedString);
printLine(reversedString)
printLine
printLine
reversedString
reversedString
-----joern-----
(1,2,0)
(4,5,0)
(1,6,0)
(5,2,0)
(3,2,0)
(12,1,0)
(6,10,0)
(2,6,0)
(0,6,0)
(9,11,0)
(2,5,0)
(1,2,1)
(4,3,1)
(5,4,1)
(1,12,1)
(3,7,1)
(8,1,1)
(2,5,1)
(8,7,1)
(12,2,1)
(4,7,2)
(3,7,2)
(12,7,2)
(2,5,2)
(2,7,2)
(5,7,2)
(1,2,2)
(1,7,2)
-----------------------------------
(0,reversedString)
(1,printLine(reversedString)
(2,* reversedString = helperBad("BadSink")
(3,reversedString)
(4,"BadSink")
(5,helperBad("BadSink")
(6,)
(7,staticReturnsTrue()
(8,RET)
(9,if(staticReturnsTrue()
(10,)
(11,)
(12,reversedString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^