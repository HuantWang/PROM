-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad()
{
    wchar_t * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (wchar_t *)malloc(10*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
56,57
56,58
59,60
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
71,72
72,73
72,74
73,74
73,75
74,75
76,77
79,80
80,81
80,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,57,58,61,65,67,69,75,77,78,81,82,86,88,92,94
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
56,57
56,58
70,71
70,72
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad(){    wchar_t * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad
{    wchar_t * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memmove
memmove
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,38,0)
(10,35,0)
(24,28,0)
(18,7,0)
(27,5,0)
(37,23,0)
(17,20,0)
(20,23,0)
(38,35,0)
(21,41,0)
(4,24,0)
(39,21,0)
(2,24,0)
(29,23,0)
(36,23,0)
(2,36,0)
(5,35,0)
(23,7,0)
(10,23,0)
(33,14,0)
(8,2,0)
(2,8,0)
(12,14,0)
(33,22,0)
(30,20,0)
(19,28,0)
(5,11,0)
(14,33,0)
(28,20,0)
(34,36,0)
(11,5,0)
(5,27,0)
(32,8,0)
(15,7,0)
(36,20,0)
(9,13,0)
(31,36,0)
(13,7,0)
(36,35,0)
(6,10,0)
(40,13,0)
(41,27,0)
(41,21,0)
(35,7,0)
(36,2,0)
(28,24,0)
(24,2,0)
(35,5,0)
(27,41,0)
(37,35,0)
(16,35,0)
(26,38,0)
(25,41,0)
(1,37,0)
(24,4,1)
(38,35,1)
(21,39,1)
(36,20,1)
(19,34,1)
(31,20,1)
(30,38,1)
(3,37,1)
(37,1,1)
(13,40,1)
(37,35,1)
(40,9,1)
(17,30,1)
(20,17,1)
(2,24,1)
(33,14,1)
(16,13,1)
(1,10,1)
(34,31,1)
(8,32,1)
(30,33,1)
(10,35,1)
(26,0,1)
(41,21,1)
(2,8,1)
(39,25,1)
(5,11,1)
(27,41,1)
(28,20,1)
(32,24,1)
(14,12,1)
(36,35,1)
(0,35,1)
(12,38,1)
(5,27,1)
(36,2,1)
(10,6,1)
(35,5,1)
(24,28,1)
(38,26,1)
(25,16,1)
(28,19,1)
(6,36,1)
(4,28,1)
(38,35,2)
(5,27,2)
(33,38,2)
(36,2,2)
(37,35,2)
(35,5,2)
(36,20,2)
(14,38,2)
(2,8,2)
(2,24,2)
(12,38,2)
(5,11,2)
(10,35,2)
(41,21,2)
(33,14,2)
(28,20,2)
(27,41,2)
(36,35,2)
(24,28,2)
-----------------------------------
(0,data)
(1,data)
(2,(wcslen(source)
(3,RET)
(4,1)
(5,(wchar_t *)
(6,data)
(7,)
(8,sizeof(wchar_t)
(9,data)
(10,printWLine(data)
(11,wchar_t *)
(12,1)
(13,data = NULL)
(14,-1)
(15,if (data == NULL)
(16,data)
(17,SRC_STRING)
(18,data)
(19,source)
(20,source[10+1] = SRC_STRING)
(21,sizeof(wchar_t)
(22,)
(23,)
(24,wcslen(source)
(25,10)
(26,NULL)
(27,malloc(10*sizeof(wchar_t)
(28,wcslen(source)
(29,source)
(30,source)
(31,data)
(32,wchar_t)
(33,exit(-1)
(34,source)
(35,data = (wchar_t *)
(36,memmove(data, source, (wcslen(source)
(37,free(data)
(38,data == NULL)
(39,wchar_t)
(40,NULL)
(41,10*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^