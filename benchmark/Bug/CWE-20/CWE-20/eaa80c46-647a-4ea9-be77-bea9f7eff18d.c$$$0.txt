-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_bad()
{
    char * data;
    CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType myUnion;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* spawnvp - searches for the location of the command among
             * the directories specified by the PATH environment variable */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _spawnvp(_P_WAIT, COMMAND_INT, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
67,70
67,71
68,69
70,71
70,72
71,72
73,74
75,76
77,78
77,79
78,79
78,80
80,81
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
91,93
92,93
93,94
93,95
95,96
95,97
95,98
98,99
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
107,108
107,109
107,110
107,111
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,49,51,52,56,58,62,64,69,72,74,76,79,81,82,87,88,90,94,96,97,101,102,106,108,109,110,114,116,118,120,124,126,128,130
-----computeFrom-----
29,30
29,31
60,61
60,62
70,71
70,72
77,78
77,79
78,79
78,80
84,85
84,86
-----guardedBy-----
62,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_bad(){    char * data;    CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
void
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_bad()
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_bad
{    char * data;    CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
char * data;
char * data;
char
* data
*
data
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType myUnion;
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType myUnion;
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType
CWE78_OS_Command_Injection__char_environment_w32_spawnvp_34_unionType
myUnion
myUnion
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnvp(_P_WAIT, COMMAND_INT, args);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnvp(_P_WAIT, COMMAND_INT, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(26,1,0)
(19,29,0)
(47,55,0)
(31,26,0)
(1,33,0)
(17,35,0)
(33,1,0)
(31,55,0)
(41,33,0)
(5,17,0)
(27,38,0)
(30,40,0)
(52,31,0)
(7,47,0)
(8,26,0)
(12,15,0)
(21,34,0)
(20,17,0)
(35,34,0)
(45,21,0)
(38,34,0)
(26,31,0)
(36,31,0)
(0,15,0)
(22,35,0)
(40,28,0)
(18,34,0)
(4,49,0)
(44,16,0)
(29,1,0)
(13,34,0)
(47,6,0)
(28,40,0)
(39,28,0)
(23,40,0)
(25,42,0)
(6,26,0)
(31,15,0)
(46,38,0)
(32,49,0)
(37,48,0)
(53,1,0)
(16,15,0)
(10,49,0)
(6,47,0)
(50,29,0)
(15,38,0)
(55,51,0)
(54,34,0)
(49,48,0)
(56,51,0)
(49,42,0)
(43,51,0)
(35,15,0)
(51,34,0)
(3,6,0)
(48,21,0)
(14,47,0)
(15,34,0)
(16,55,0)
(9,51,0)
(28,21,0)
(26,6,0)
(24,55,0)
(26,2,0)
(1,51,0)
(55,16,0)
(42,48,0)
(36,52,1)
(3,8,1)
(26,1,1)
(20,5,1)
(22,17,1)
(31,55,1)
(46,27,1)
(38,46,1)
(11,49,1)
(53,55,1)
(29,19,1)
(42,25,1)
(15,38,1)
(44,24,1)
(15,12,1)
(32,4,1)
(10,32,1)
(16,44,1)
(26,31,1)
(35,22,1)
(31,36,1)
(4,42,1)
(47,7,1)
(7,14,1)
(5,26,1)
(6,47,1)
(12,0,1)
(5,29,1)
(8,31,1)
(47,55,1)
(26,6,1)
(55,16,1)
(29,1,1)
(49,10,1)
(25,28,1)
(50,1,1)
(49,42,1)
(28,40,1)
(30,39,1)
(24,15,1)
(14,3,1)
(35,15,1)
(23,30,1)
(1,33,1)
(31,15,1)
(40,23,1)
(0,38,1)
(19,50,1)
(52,29,1)
(39,35,1)
(16,15,1)
(17,20,1)
(33,41,1)
(41,53,1)
(14,29,2)
(28,40,2)
(26,29,2)
(31,15,2)
(36,29,2)
(49,42,2)
(47,29,2)
(29,1,2)
(3,29,2)
(55,16,2)
(31,29,2)
(26,31,2)
(8,29,2)
(31,55,2)
(15,38,2)
(7,29,2)
(35,15,2)
(6,47,2)
(16,15,2)
(52,29,2)
(6,29,2)
(26,1,2)
(47,55,2)
(26,6,2)
(1,33,2)
-----------------------------------
(0,data)
(1,* environment = GETENV(ENV_VARIABLE)
(2,)
(3,100)
(4,_P_WAIT)
(5,myUnion)
(6,100-dataLen-1)
(7,1)
(8,environment)
(9,if (environment != NULL)
(10,args)
(11,RET)
(12,dataBuffer)
(13,dataBuffer)
(14,dataLen)
(15,data = dataBuffer)
(16,strlen(data)
(17,myUnion.unionFirst)
(18,myUnion)
(19,NULL)
(20,unionFirst)
(21,)
(22,data)
(23,unionSecond)
(24,dataLen)
(25,args)
(26,strncat(data+dataLen, environment, 100-dataLen-1)
(27,dataBuffer)
(28,* data = myUnion.unionSecond)
(29,environment != NULL)
(30,myUnion)
(31,data+dataLen)
(32,COMMAND_INT)
(33,GETENV(ENV_VARIABLE)
(34,)
(35,myUnion.unionFirst = data)
(36,dataLen)
(37,args)
(38,dataBuffer[100] = COMMAND_ARG2)
(39,data)
(40,myUnion.unionSecond)
(41,ENV_VARIABLE)
(42,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(43,environment)
(44,data)
(45,data)
(46,COMMAND_ARG2)
(47,dataLen-1)
(48,)
(49,_spawnvp(_P_WAIT, COMMAND_INT, args)
(50,environment)
(51,)
(52,data)
(53,environment)
(54,data)
(55,dataLen = strlen(data)
(56,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^