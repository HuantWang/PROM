-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
            strcat(data, source);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
110,113
111,112
113,114
115,116
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,67,69,73,75,76,80,81,85,87,89,93,95,96,98,99,104,106,107,108,112,114,116,120,122,126,128
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
63,64
63,65
97,98
97,99
101,102
101,103
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strcat(data, source);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strcat(data, source);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strcat(data, source);            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strcat(data, source);            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(35,32,0)
(42,5,0)
(23,28,0)
(6,23,0)
(52,38,0)
(20,24,0)
(2,62,0)
(18,41,0)
(3,38,0)
(3,24,0)
(59,19,0)
(61,28,0)
(33,28,0)
(40,37,0)
(37,40,0)
(46,54,0)
(43,38,0)
(62,2,0)
(17,18,0)
(24,54,0)
(56,16,0)
(13,20,0)
(25,53,0)
(55,11,0)
(58,41,0)
(54,28,0)
(41,18,0)
(57,32,0)
(32,53,0)
(36,6,0)
(57,37,0)
(23,40,0)
(53,32,0)
(10,3,0)
(39,33,0)
(8,28,0)
(50,23,0)
(18,54,0)
(17,24,0)
(0,11,0)
(47,17,0)
(45,7,0)
(30,1,0)
(40,28,0)
(29,28,0)
(37,21,0)
(20,18,0)
(16,24,0)
(1,24,0)
(5,19,0)
(22,1,0)
(14,28,0)
(63,19,0)
(21,37,0)
(19,5,0)
(1,18,0)
(15,7,0)
(31,41,0)
(12,24,0)
(26,40,0)
(49,33,0)
(38,3,0)
(48,29,0)
(32,57,0)
(44,6,0)
(7,40,0)
(37,57,0)
(5,16,0)
(7,29,0)
(9,2,0)
(51,3,0)
(11,40,0)
(4,18,0)
(62,27,0)
(47,20,1)
(23,40,1)
(59,63,1)
(1,30,1)
(17,47,1)
(16,56,1)
(41,58,1)
(32,53,1)
(7,40,1)
(11,40,1)
(53,25,1)
(51,18,1)
(23,50,1)
(31,4,1)
(58,31,1)
(5,19,1)
(50,6,1)
(29,48,1)
(18,41,1)
(22,16,1)
(11,0,1)
(30,22,1)
(7,45,1)
(13,1,1)
(63,42,1)
(1,18,1)
(4,23,1)
(37,57,1)
(9,11,1)
(25,35,1)
(26,33,1)
(10,51,1)
(20,18,1)
(42,3,1)
(34,17,1)
(43,10,1)
(52,43,1)
(37,21,1)
(36,44,1)
(3,38,1)
(0,55,1)
(17,18,1)
(49,39,1)
(2,9,1)
(20,13,1)
(44,29,1)
(35,26,1)
(57,32,1)
(15,62,1)
(56,5,1)
(48,7,1)
(38,52,1)
(15,11,1)
(33,49,1)
(40,37,1)
(55,40,1)
(19,59,1)
(45,15,1)
(6,36,1)
(62,2,1)
(18,41,2)
(37,21,2)
(57,32,2)
(62,2,2)
(1,18,2)
(5,19,2)
(40,37,2)
(9,11,2)
(7,40,2)
(32,53,2)
(62,11,2)
(3,38,2)
(20,18,2)
(37,57,2)
(23,40,2)
(2,11,2)
(17,18,2)
(11,40,2)
-----------------------------------
(0,NULL)
(1,strcat(data, source)
(2,-1)
(3,memset(source, 'C', 100-1)
(4,data)
(5,source[100-1])
(6,myUnion.unionFirst)
(7,data[0])
(8,data)
(9,1)
(10,'C')
(11,data == NULL)
(12,source)
(13,data)
(14,if (data == NULL)
(15,data)
(16,source[100-1] = '\\\\0')
(17,free(data)
(18,* data = myUnion.unionSecond)
(19,100-1)
(20,printLine(data)
(21,char *)
(22,data)
(23,myUnion.unionFirst = data)
(24,)
(25,char)
(26,data)
(27,)
(28,)
(29,data[0] = '\\\\0')
(30,source)
(31,myUnion)
(32,50*sizeof(char)
(33,data = NULL)
(34,RET)
(35,50)
(36,unionFirst)
(37,(char *)
(38,100-1)
(39,data)
(40,data = (char *)
(41,myUnion.unionSecond)
(42,source)
(43,100)
(44,myUnion)
(45,0)
(46,data)
(47,data)
(48,'\\\\0')
(49,NULL)
(50,data)
(51,source)
(52,1)
(53,sizeof(char)
(54,)
(55,data)
(56,'\\\\0')
(57,malloc(50*sizeof(char)
(58,unionSecond)
(59,1)
(60,memset(source, \'C\', 100-1)
(61,myUnion)
(62,exit(-1)
(63,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^