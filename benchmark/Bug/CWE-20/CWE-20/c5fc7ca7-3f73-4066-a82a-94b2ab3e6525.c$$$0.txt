-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        char dest[100];
        memset(dest, 'C', 100-1); /* fill with 'C's */
        dest[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */
        strncpy(dest, data, strlen(dest));
        /* Ensure null termination */
        dest[100-1] = '\0';
        printLine(dest);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
26,28
29,30
30,31
30,32
31,32
31,33
32,33
34,35
34,36
38,39
39,40
39,41
39,42
39,43
40,41
42,43
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
56,57
56,58
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,6,8,9,14,16,18,22,24,25,27,28,33,35,36,37,41,43,45,48,50,55,57,58,59,63,65
-----computeFrom-----
26,27
26,28
30,31
30,32
34,35
34,36
52,53
52,54
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        strncpy(dest, data, strlen(dest));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        strncpy(dest, data, strlen(dest));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
{        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        strncpy(dest, data, strlen(dest));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
strncpy(dest, data, strlen(dest));
strncpy(dest, data, strlen(dest))
strncpy
strncpy
dest
dest
data
data
strlen(dest)
strlen
strlen
dest
dest
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(7,27,0)
(28,24,0)
(10,29,0)
(29,3,0)
(18,3,0)
(24,0,0)
(16,14,0)
(11,17,0)
(14,22,0)
(12,16,0)
(5,16,0)
(11,3,0)
(2,0,0)
(3,23,0)
(32,3,0)
(0,24,0)
(6,18,0)
(27,1,0)
(8,24,0)
(21,1,0)
(25,17,0)
(1,27,0)
(13,27,0)
(22,3,0)
(9,11,0)
(11,19,0)
(24,3,0)
(31,22,0)
(14,16,0)
(1,29,0)
(15,11,0)
(17,11,0)
(26,14,0)
(20,0,0)
(27,7,1)
(10,1,1)
(4,18,1)
(24,0,1)
(11,17,1)
(15,9,1)
(17,25,1)
(1,27,1)
(22,31,1)
(5,26,1)
(7,13,1)
(26,11,1)
(21,24,1)
(25,15,1)
(18,6,1)
(0,2,1)
(6,22,1)
(20,28,1)
(14,16,1)
(29,10,1)
(12,5,1)
(11,19,1)
(9,29,1)
(31,14,1)
(16,12,1)
(28,8,1)
(13,21,1)
(2,20,1)
(24,0,2)
(11,17,2)
(11,19,2)
(14,16,2)
(1,27,2)
-----------------------------------
(0,100-1)
(1,dest[100-1])
(2,1)
(3,)
(4,RET)
(5,100)
(6,dest)
(7,1)
(8,dest)
(9,dest)
(10,'\\\\0')
(11,strncpy(dest, data, strlen(dest)
(12,1)
(13,100)
(14,dest[100-1])
(15,data)
(16,100-1)
(17,strlen(dest)
(18,printLine(dest)
(19,char * data)
(20,100)
(21,dest)
(22,dest[100-1] = '\\\\0')
(23,)
(24,memset(dest, 'C', 100-1)
(25,dest)
(26,dest)
(27,100-1)
(28,'C')
(29,dest[100-1] = '\\\\0')
(30,memset(dest, \'C\', 100-1)
(31,'\\\\0')
(32,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^