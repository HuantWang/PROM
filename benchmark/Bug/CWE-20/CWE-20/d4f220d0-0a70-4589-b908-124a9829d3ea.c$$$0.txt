-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strncpy(data, source, 100-1);
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,99,104,106,107,108,112,114,118,120
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
101,102
101,103
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(57,31,0)
(38,21,0)
(35,54,0)
(58,26,0)
(49,30,0)
(18,23,0)
(42,51,0)
(6,2,0)
(35,51,0)
(46,7,0)
(25,21,0)
(61,5,0)
(32,30,0)
(27,66,0)
(1,28,0)
(29,66,0)
(32,34,0)
(15,30,0)
(8,51,0)
(2,63,0)
(64,34,0)
(6,26,0)
(30,32,0)
(62,27,0)
(39,7,0)
(63,2,0)
(61,63,0)
(44,6,0)
(40,47,0)
(31,57,0)
(29,6,0)
(63,61,0)
(35,6,0)
(29,23,0)
(21,28,0)
(14,5,0)
(10,58,0)
(34,7,0)
(51,35,0)
(23,29,0)
(20,32,0)
(29,34,0)
(54,34,0)
(43,23,0)
(60,66,0)
(4,41,0)
(28,21,0)
(2,6,0)
(0,35,0)
(2,13,0)
(41,34,0)
(65,6,0)
(22,9,0)
(50,26,0)
(16,61,0)
(27,34,0)
(35,66,0)
(27,6,0)
(67,54,0)
(3,29,0)
(66,7,0)
(55,29,0)
(53,9,0)
(47,34,0)
(9,6,0)
(19,32,0)
(12,44,0)
(37,31,0)
(41,66,0)
(57,11,0)
(48,66,0)
(56,24,0)
(9,58,0)
(33,44,0)
(13,2,0)
(41,6,0)
(28,47,0)
(5,61,0)
(17,24,0)
(66,60,1)
(2,63,1)
(61,5,1)
(1,32,1)
(29,6,1)
(31,37,1)
(0,29,1)
(9,53,1)
(20,19,1)
(30,15,1)
(62,41,1)
(9,6,1)
(24,56,1)
(67,35,1)
(29,66,1)
(22,57,1)
(15,49,1)
(41,4,1)
(49,20,1)
(3,47,1)
(41,66,1)
(65,24,1)
(55,3,1)
(21,38,1)
(18,43,1)
(8,0,1)
(38,25,1)
(16,65,1)
(35,6,1)
(23,18,1)
(40,28,1)
(60,48,1)
(54,67,1)
(35,51,1)
(19,24,1)
(27,62,1)
(22,44,1)
(33,12,1)
(25,1,1)
(44,33,1)
(10,9,1)
(28,21,1)
(57,31,1)
(42,8,1)
(2,13,1)
(37,44,1)
(44,6,1)
(47,40,1)
(6,2,1)
(56,17,1)
(29,23,1)
(4,54,1)
(14,16,1)
(32,30,1)
(51,42,1)
(43,55,1)
(19,58,1)
(58,10,1)
(5,14,1)
(36,27,1)
(53,22,1)
(63,61,1)
(27,6,1)
(41,6,1)
(35,66,1)
(12,6,1)
(27,66,1)
(17,66,1)
(2,63,2)
(44,6,2)
(33,24,2)
(41,6,2)
(27,66,2)
(6,24,2)
(35,66,2)
(63,24,2)
(10,24,2)
(57,44,2)
(12,24,2)
(29,23,2)
(61,5,2)
(44,24,2)
(27,6,2)
(29,6,2)
(63,61,2)
(32,30,2)
(57,31,2)
(37,44,2)
(35,6,2)
(9,24,2)
(58,24,2)
(14,24,2)
(28,21,2)
(61,24,2)
(41,66,2)
(22,24,2)
(31,44,2)
(16,24,2)
(6,2,2)
(29,66,2)
(9,6,2)
(5,24,2)
(2,24,2)
(35,51,2)
(65,24,2)
(53,24,2)
(2,13,2)
-----------------------------------
(0,data)
(1,source)
(2,(char *)
(3,data)
(4,data)
(5,sizeof(char)
(6,data = (char *)
(7,)
(8,100)
(9,data[0])
(10,'\\\\0')
(11,)
(12,data)
(13,char *)
(14,char)
(15,1)
(16,50)
(17,STATIC_CONST_FIVE)
(18,1)
(19,source)
(20,'C')
(21,100-1)
(22,data)
(23,100-1)
(24,STATIC_CONST_FIVE==5)
(25,100)
(26,)
(27,free(data)
(28,source[100-1])
(29,strncpy(data, source, 100-1)
(30,100-1)
(31,-1)
(32,memset(source, \'C\', 100-1)
(33,NULL)
(34,)
(35,data[100-1])
(36,RET)
(37,1)
(38,1)
(39,if(STATIC_CONST_FIVE==5)
(40,'\\\\0')
(41,printLine(data)
(42,1)
(43,100)
(44,data == NULL)
(45,\'\\\\0\')
(46,data)
(47,source[100-1] = '\\\\0')
(48,data)
(49,100)
(50,if (data == NULL)
(51,100-1)
(52,memset(source, 'C', 100-1)
(53,0)
(54,data[100-1] = '\\\\0')
(55,source)
(56,5)
(57,exit(-1)
(58,data[0] = '\\\\0')
(59,data[0] = \'\\\\0\')
(60,NULL)
(61,50*sizeof(char)
(62,data)
(63,malloc(50*sizeof(char)
(64,source)
(65,data)
(66,data = NULL)
(67,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^