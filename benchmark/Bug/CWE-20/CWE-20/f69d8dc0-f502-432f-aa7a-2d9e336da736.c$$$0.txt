-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(39,10,0)
(49,59,0)
(20,23,0)
(29,45,0)
(3,22,0)
(64,8,0)
(58,2,0)
(65,41,0)
(2,50,0)
(23,13,0)
(29,23,0)
(28,46,0)
(32,9,0)
(52,65,0)
(10,35,0)
(34,27,0)
(16,20,0)
(40,27,0)
(7,29,0)
(9,62,0)
(56,37,0)
(63,35,0)
(8,50,0)
(43,13,0)
(6,17,0)
(3,20,0)
(4,23,0)
(22,17,0)
(55,1,0)
(60,4,0)
(8,23,0)
(8,49,0)
(54,23,0)
(23,20,0)
(50,14,0)
(44,8,0)
(25,1,0)
(2,23,0)
(26,22,0)
(1,41,0)
(2,35,0)
(57,35,0)
(0,50,0)
(27,45,0)
(15,32,0)
(37,13,0)
(29,28,0)
(20,16,0)
(30,57,0)
(38,29,0)
(48,28,0)
(17,22,0)
(51,13,0)
(37,23,0)
(66,41,0)
(19,13,0)
(22,3,0)
(24,13,0)
(8,41,0)
(49,8,0)
(11,46,0)
(20,3,0)
(21,2,0)
(47,4,0)
(31,13,0)
(9,32,0)
(12,41,0)
(36,42,0)
(18,35,0)
(13,5,0)
(33,36,0)
(53,57,0)
(37,23,1)
(57,30,1)
(8,64,1)
(55,65,1)
(18,4,1)
(28,48,1)
(34,57,1)
(65,52,1)
(60,23,1)
(50,0,1)
(48,29,1)
(53,10,1)
(25,55,1)
(41,12,1)
(22,17,1)
(33,27,1)
(56,36,1)
(20,3,1)
(7,38,1)
(53,35,1)
(9,32,1)
(12,66,1)
(55,41,1)
(4,23,1)
(66,28,1)
(17,6,1)
(39,50,1)
(38,27,1)
(26,54,1)
(63,18,1)
(3,22,1)
(1,41,1)
(64,44,1)
(2,58,1)
(10,35,1)
(2,35,1)
(23,20,1)
(8,23,1)
(20,16,1)
(0,2,1)
(47,60,1)
(65,41,1)
(2,23,1)
(4,47,1)
(44,1,1)
(49,8,1)
(58,21,1)
(36,33,1)
(29,23,1)
(57,35,1)
(27,40,1)
(21,57,1)
(6,26,1)
(61,37,1)
(27,45,1)
(15,4,1)
(29,7,1)
(10,39,1)
(35,63,1)
(52,49,1)
(56,1,1)
(37,56,1)
(18,9,1)
(30,53,1)
(1,25,1)
(29,45,1)
(40,34,1)
(8,41,1)
(8,50,1)
(32,15,1)
(65,41,2)
(65,1,2)
(27,45,2)
(8,41,2)
(8,1,2)
(10,35,2)
(53,57,2)
(3,22,2)
(10,57,2)
(55,27,2)
(8,50,2)
(12,27,2)
(2,35,2)
(29,23,2)
(7,27,2)
(39,57,2)
(36,27,2)
(29,45,2)
(21,57,2)
(57,35,2)
(1,1,2)
(2,57,2)
(29,27,2)
(23,20,2)
(57,57,2)
(2,23,2)
(64,1,2)
(9,32,2)
(49,1,2)
(22,17,2)
(52,1,2)
(38,27,2)
(32,4,2)
(20,16,2)
(0,57,2)
(58,57,2)
(28,27,2)
(15,4,2)
(48,27,2)
(49,8,2)
(25,27,2)
(37,23,2)
(1,41,2)
(33,27,2)
(20,3,2)
(30,57,2)
(9,4,2)
(25,1,2)
(55,1,2)
(1,27,2)
(50,57,2)
(41,27,2)
(4,23,2)
(8,23,2)
(66,27,2)
(44,1,2)
-----------------------------------
(0,0)
(1,i < 10)
(2,buffer[i])
(3,malloc(10 * sizeof(int)
(4,buffer == NULL)
(5,)
(6,int)
(7,data)
(8,buffer[i])
(9,exit(-1)
(10,i++)
(11,for(i = 0; i < 10; i++)
(12,0)
(13,)
(14,)
(15,1)
(16,int *)
(17,sizeof(int)
(18,i)
(19,if (data >= 0)
(20,(int *)
(21,buffer)
(22,10 * sizeof(int)
(23,* buffer = (int *)
(24,i)
(25,10)
(26,10)
(27,data >= 0)
(28,buffer[data] = 1)
(29,buffer[data])
(30,10)
(31,for (i = 0; i < 10; i++)
(32,-1)
(33,"ERROR: Array index is negative.")
(34,data)
(35,i = 0)
(36,printLine("ERROR: Array index is negative.")
(37,free(buffer)
(38,buffer)
(39,i)
(40,0)
(41,i = 0)
(42,)
(43,if (buffer == NULL)
(44,buffer)
(45,int data)
(46,)
(47,NULL)
(48,1)
(49,printIntLine(buffer[i])
(50,buffer[i] = 0)
(51,buffer)
(52,i)
(53,i)
(54,buffer)
(55,i)
(56,buffer)
(57,i < 10)
(58,i)
(59,)
(60,buffer)
(61,RET)
(62,)
(63,0)
(64,i)
(65,i++)
(66,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^