-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    {
        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (dataBuffer == NULL) {exit(-1);}
        wmemset(dataBuffer, L'A', 100-1);
        dataBuffer[100-1] = L'\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
75,76
-----nextToken-----
2,4,5,7,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,55,56,61,63,64,65,69,72,73,76
-----computeFrom-----
28,29
28,30
35,36
35,37
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    return data;}
{        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
return data;
data
data
-----joern-----
(14,8,0)
(1,0,0)
(21,18,0)
(20,16,0)
(6,13,0)
(13,6,0)
(7,8,0)
(13,14,0)
(27,18,0)
(5,7,0)
(7,5,0)
(11,25,0)
(6,25,0)
(25,0,0)
(5,14,0)
(18,15,0)
(24,28,0)
(12,5,0)
(13,17,0)
(23,8,0)
(18,22,0)
(9,14,0)
(2,9,0)
(0,25,0)
(3,5,0)
(20,28,0)
(17,13,0)
(4,8,0)
(7,22,0)
(14,13,0)
(18,7,0)
(25,6,0)
(10,7,0)
(19,9,0)
(26,14,0)
(28,20,0)
(8,15,0)
(29,8,0)
(2,19,1)
(3,12,1)
(10,23,1)
(5,3,1)
(5,14,1)
(23,9,1)
(23,20,1)
(9,14,1)
(18,7,1)
(14,13,1)
(25,0,1)
(12,10,1)
(1,11,1)
(18,22,1)
(7,5,1)
(0,1,1)
(20,28,1)
(27,7,1)
(18,27,1)
(28,24,1)
(9,2,1)
(13,6,1)
(6,25,1)
(7,22,1)
(13,17,1)
(24,9,1)
(11,26,1)
(19,14,1)
(21,18,1)
(13,17,2)
(18,7,2)
(20,28,2)
(20,9,2)
(21,18,2)
(18,22,2)
(9,14,2)
(13,6,2)
(5,14,2)
(28,9,2)
(7,22,2)
(24,9,2)
(6,25,2)
(14,13,2)
(25,0,2)
(7,5,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,wchar_t)
(2,NULL)
(3,8)
(4,if (dataBuffer == NULL)
(5,dataBuffer - 8)
(6,malloc(100*sizeof(wchar_t)
(7,data = dataBuffer - 8)
(8,)
(9,dataBuffer == NULL)
(10,data)
(11,100)
(12,dataBuffer)
(13,(wchar_t *)
(14,* dataBuffer = (wchar_t *)
(15,)
(16,)
(17,wchar_t *)
(18,return data;)
(19,dataBuffer)
(20,exit(-1)
(21,RET)
(22,wchar_t * data)
(23,'\\\\0')
(24,1)
(25,100*sizeof(wchar_t)
(26,dataBuffer)
(27,data)
(28,-1)
(29,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^