-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)malloc(10);
    if (data == NULL) {exit(-1);}
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
67,69
69,70
70,71
70,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,34,38,40,45,47,51,53,55,58,62,64,66,68,71,72,76,79,80,84,86
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad(){    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad
{    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);
source
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(0,38,0)
(6,17,0)
(11,17,0)
(20,24,0)
(26,7,0)
(5,0,0)
(9,16,0)
(7,32,0)
(17,32,0)
(35,20,0)
(0,20,0)
(15,14,0)
(16,9,0)
(22,11,0)
(17,11,0)
(14,17,0)
(30,21,0)
(36,24,0)
(29,38,0)
(19,24,0)
(4,14,0)
(12,8,0)
(37,32,0)
(21,38,0)
(1,9,0)
(24,32,0)
(25,32,0)
(28,22,0)
(2,32,0)
(11,22,0)
(6,19,0)
(23,7,0)
(10,11,0)
(8,24,0)
(19,6,0)
(8,17,0)
(31,32,0)
(3,0,0)
(38,0,0)
(13,6,0)
(16,27,0)
(38,21,0)
(0,17,0)
(33,17,0)
(11,10,0)
(18,6,0)
(0,24,0)
(1,14,1)
(9,1,1)
(12,19,1)
(4,15,1)
(28,33,1)
(14,4,1)
(6,17,1)
(18,13,1)
(21,30,1)
(0,17,1)
(22,28,1)
(7,23,1)
(6,18,1)
(20,35,1)
(2,7,1)
(35,16,1)
(16,9,1)
(0,20,1)
(15,17,1)
(29,3,1)
(35,14,1)
(38,21,1)
(13,0,1)
(33,2,1)
(8,12,1)
(19,6,1)
(30,29,1)
(11,22,1)
(23,26,1)
(11,10,1)
(14,17,1)
(0,38,1)
(34,8,1)
(3,5,1)
(17,11,1)
(8,17,1)
(5,20,1)
(38,21,2)
(0,38,2)
(0,17,2)
(8,17,2)
(11,22,2)
(9,14,2)
(14,17,2)
(11,10,2)
(17,11,2)
(1,14,2)
(16,9,2)
(6,17,2)
(19,6,2)
(0,20,2)
(16,14,2)
-----------------------------------
(0,memcpy(data, source, 10*sizeof(int)
(1,1)
(2,goto source;)
(3,source)
(4,NULL)
(5,data)
(6,data[0])
(7,data = NULL)
(8,free(data)
(9,-1)
(10,int *)
(11,(int *)
(12,data)
(13,data)
(14,data == NULL)
(15,data)
(16,exit(-1)
(17,data = (int *)
(18,0)
(19,printIntLine(data[0])
(20,source[10] = {0})
(21,sizeof(int)
(22,malloc(10)
(23,NULL)
(24,)
(25,data)
(26,data)
(27,)
(28,10)
(29,10)
(30,int)
(31,source:)
(32,)
(33,data)
(34,RET)
(35,source)
(36,source)
(37,if (data == NULL)
(38,10*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^