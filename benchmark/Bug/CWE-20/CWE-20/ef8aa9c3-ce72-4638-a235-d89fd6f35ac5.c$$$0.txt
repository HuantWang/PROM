-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    if(badStatic)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET connectSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* Abort on error or the connection was closed */
                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
56,69
56,70
57,58
58,59
58,60
59,60
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
83,84
86,87
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
120,121
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
138,139
139,140
140,141
142,143
144,145
146,147
147,148
147,149
148,149
150,151
150,152
150,153
150,154
150,155
151,152
153,154
155,156
155,157
156,157
156,158
158,159
160,161
161,162
161,163
162,163
164,165
166,167
166,168
167,168
168,169
168,170
171,172
172,173
172,174
173,174
173,175
175,176
179,180
179,181
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
187,188
190,191
192,193
193,194
193,195
194,195
194,196
195,196
197,198
197,199
198,199
200,201
200,202
201,202
203,204
204,205
204,206
208,209
209,210
209,211
210,211
212,213
212,214
212,215
213,214
215,216
218,219
218,220
219,220
221,222
222,223
223,224
223,225
224,225
225,226
228,229
229,230
229,231
230,231
232,233
232,234
232,235
233,234
235,236
238,239
238,240
239,240
241,242
242,243
243,244
243,245
244,245
245,246
249,250
249,251
250,251
250,252
251,252
253,254
255,256
256,257
257,258
257,259
258,259
260,261
262,263
263,264
-----nextToken-----
2,4,5,7,9,10,14,19,21,25,27,30,32,33,37,39,42,46,48,52,54,60,63,65,67,69,73,75,77,81,84,85,89,94,95,97,103,104,105,108,110,115,116,119,121,126,128,132,134,137,141,143,145,149,152,154,157,159,163,165,169,170,174,176,177,178,183,185,188,189,191,196,199,202,205,206,207,211,214,216,217,220,226,227,231,234,236,237,240,246,247,248,252,254,259,261,264
-----computeFrom-----
58,59
58,60
71,72
71,73
91,92
91,93
99,100
99,101
112,113
112,114
123,124
123,125
147,148
147,149
161,162
161,163
166,167
166,168
172,173
172,174
173,174
173,175
180,181
180,182
181,182
181,183
186,187
186,188
193,194
193,195
197,198
197,199
200,201
200,202
209,210
209,211
223,224
223,225
229,230
229,231
243,244
243,245
250,251
250,252
-----guardedBy-----
252,261
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
badStatic
badStatic
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(60,13,0)
(126,89,0)
(11,77,0)
(2,54,0)
(98,130,0)
(47,132,0)
(66,82,0)
(50,117,0)
(48,83,0)
(135,55,0)
(75,55,0)
(82,132,0)
(90,132,0)
(117,77,0)
(105,65,0)
(41,7,0)
(58,134,0)
(125,71,0)
(100,44,0)
(141,139,0)
(1,139,0)
(16,83,0)
(42,119,0)
(91,138,0)
(28,101,0)
(71,28,0)
(82,106,0)
(54,63,0)
(83,139,0)
(18,99,0)
(17,101,0)
(82,86,0)
(127,61,0)
(79,43,0)
(132,82,0)
(101,139,0)
(26,24,0)
(124,8,0)
(86,82,0)
(102,64,0)
(59,15,0)
(6,78,0)
(72,112,0)
(24,55,0)
(92,139,0)
(54,36,0)
(43,1,0)
(40,100,0)
(117,0,0)
(94,105,0)
(69,55,0)
(0,117,0)
(55,5,0)
(127,89,0)
(114,139,0)
(44,139,0)
(65,119,0)
(73,116,0)
(28,71,0)
(143,55,0)
(83,116,0)
(31,106,0)
(52,55,0)
(48,24,0)
(99,8,0)
(113,26,0)
(136,46,0)
(138,139,0)
(99,15,0)
(1,43,0)
(29,130,0)
(117,83,0)
(133,46,0)
(122,55,0)
(3,1,0)
(77,117,0)
(93,138,0)
(21,57,0)
(130,55,0)
(88,16,0)
(47,15,0)
(85,82,0)
(137,36,0)
(35,71,0)
(101,17,0)
(140,16,0)
(39,99,0)
(132,90,0)
(53,55,0)
(86,139,0)
(62,81,0)
(23,0,0)
(106,63,0)
(111,24,0)
(12,48,0)
(46,44,0)
(7,127,0)
(1,134,0)
(96,116,0)
(0,23,0)
(117,50,0)
(45,83,0)
(119,86,0)
(110,55,0)
(97,86,0)
(63,106,0)
(20,28,0)
(95,61,0)
(25,55,0)
(84,55,0)
(26,37,0)
(26,83,0)
(47,36,0)
(105,86,0)
(127,7,0)
(103,64,0)
(64,139,0)
(116,83,0)
(120,103,0)
(67,139,0)
(89,127,0)
(0,57,0)
(14,59,0)
(118,31,0)
(57,0,0)
(61,127,0)
(34,139,0)
(128,10,0)
(134,1,0)
(68,109,0)
(119,65,0)
(76,116,0)
(129,7,0)
(132,47,0)
(56,24,0)
(32,105,0)
(63,54,0)
(22,50,0)
(36,59,0)
(38,103,0)
(65,105,0)
(115,47,0)
(82,83,0)
(44,100,0)
(49,17,0)
(70,119,0)
(4,54,0)
(108,63,0)
(51,107,0)
(87,139,0)
(36,55,0)
(59,36,0)
(106,82,0)
(106,31,0)
(33,48,0)
(9,47,0)
(121,117,0)
(27,139,0)
(142,34,1)
(119,86,1)
(66,97,1)
(96,45,1)
(100,40,1)
(104,48,1)
(59,15,1)
(39,30,1)
(24,111,1)
(19,62,1)
(133,101,1)
(76,96,1)
(82,83,1)
(54,2,1)
(50,22,1)
(19,123,1)
(26,113,1)
(0,57,1)
(56,130,1)
(120,38,1)
(59,14,1)
(62,123,1)
(3,134,1)
(0,23,1)
(18,99,1)
(98,29,1)
(2,4,1)
(93,89,1)
(102,103,1)
(68,142,1)
(105,86,1)
(14,137,1)
(77,11,1)
(21,121,1)
(1,43,1)
(61,95,1)
(106,63,1)
(89,127,1)
(88,140,1)
(138,91,1)
(6,65,1)
(16,83,1)
(91,93,1)
(106,31,1)
(104,26,1)
(33,60,1)
(137,24,1)
(22,117,1)
(89,126,1)
(65,105,1)
(11,0,1)
(82,132,1)
(42,70,1)
(4,108,1)
(119,42,1)
(46,136,1)
(129,19,1)
(26,83,1)
(47,15,1)
(58,16,1)
(43,79,1)
(29,30,1)
(35,125,1)
(95,7,1)
(28,20,1)
(123,142,1)
(32,86,1)
(132,90,1)
(38,1,1)
(54,36,1)
(39,104,1)
(97,50,1)
(127,7,1)
(105,94,1)
(73,76,1)
(125,64,1)
(115,9,1)
(34,65,1)
(94,32,1)
(33,51,1)
(57,21,1)
(111,56,1)
(40,46,1)
(20,71,1)
(72,104,1)
(48,12,1)
(39,72,1)
(117,77,1)
(130,98,1)
(48,24,1)
(136,133,1)
(60,16,1)
(50,117,1)
(140,83,1)
(44,100,1)
(12,33,1)
(117,0,1)
(126,127,1)
(108,31,1)
(86,82,1)
(49,28,1)
(16,88,1)
(36,59,1)
(83,116,1)
(79,3,1)
(85,106,1)
(71,35,1)
(99,15,1)
(70,105,1)
(99,39,1)
(31,118,1)
(17,49,1)
(7,41,1)
(41,129,1)
(132,47,1)
(9,66,1)
(113,48,1)
(121,44,1)
(47,36,1)
(33,128,1)
(64,102,1)
(63,54,1)
(123,68,1)
(47,115,1)
(28,71,1)
(127,61,1)
(65,119,1)
(1,134,1)
(117,83,1)
(103,120,1)
(48,83,1)
(129,36,1)
(82,85,1)
(26,24,1)
(82,106,1)
(33,19,1)
(134,58,1)
(33,6,1)
(45,138,1)
(101,17,1)
(128,89,1)
(116,73,1)
(118,132,1)
(51,50,1)
(117,77,2)
(127,61,2)
(71,16,2)
(101,16,2)
(50,16,2)
(4,50,2)
(70,105,2)
(22,16,2)
(65,105,2)
(89,30,2)
(128,89,2)
(132,90,2)
(106,63,2)
(100,16,2)
(62,123,2)
(83,89,2)
(59,15,2)
(44,100,2)
(26,24,2)
(82,132,2)
(1,43,2)
(0,23,2)
(106,50,2)
(137,30,2)
(93,89,2)
(45,89,2)
(127,7,2)
(126,30,2)
(41,30,2)
(115,50,2)
(117,0,2)
(61,19,2)
(116,89,2)
(48,24,2)
(132,47,2)
(24,30,2)
(42,105,2)
(117,83,2)
(28,16,2)
(61,30,2)
(26,48,2)
(136,16,2)
(14,30,2)
(138,89,2)
(106,31,2)
(33,30,2)
(65,119,2)
(89,19,2)
(1,16,2)
(63,50,2)
(72,104,2)
(38,16,2)
(59,30,2)
(125,16,2)
(101,17,2)
(16,83,2)
(127,19,2)
(50,117,2)
(21,16,2)
(119,86,2)
(129,19,2)
(86,82,2)
(123,65,2)
(11,16,2)
(99,15,2)
(104,30,2)
(28,71,2)
(48,30,2)
(68,142,2)
(32,50,2)
(16,89,2)
(94,50,2)
(65,50,2)
(44,16,2)
(79,16,2)
(89,127,2)
(54,50,2)
(96,89,2)
(130,30,2)
(83,116,2)
(3,16,2)
(113,48,2)
(60,16,2)
(54,36,2)
(77,16,2)
(31,50,2)
(66,50,2)
(1,134,2)
(51,50,2)
(0,57,2)
(108,50,2)
(140,89,2)
(91,89,2)
(76,89,2)
(47,50,2)
(121,16,2)
(47,36,2)
(73,89,2)
(88,89,2)
(86,50,2)
(6,65,2)
(12,30,2)
(17,16,2)
(105,86,2)
(95,30,2)
(49,16,2)
(118,50,2)
(34,65,2)
(47,15,2)
(56,30,2)
(7,19,2)
(46,16,2)
(57,16,2)
(126,19,2)
(103,16,2)
(43,16,2)
(26,83,2)
(58,16,2)
(2,50,2)
(119,105,2)
(105,50,2)
(7,30,2)
(18,99,2)
(64,16,2)
(9,50,2)
(82,83,2)
(35,16,2)
(36,59,2)
(98,30,2)
(132,50,2)
(133,16,2)
(48,83,2)
(20,16,2)
(41,19,2)
(82,106,2)
(63,54,2)
(19,65,2)
(82,50,2)
(29,30,2)
(95,19,2)
(120,16,2)
(117,16,2)
(129,30,2)
(127,30,2)
(134,16,2)
(142,65,2)
(40,16,2)
(97,50,2)
(85,50,2)
(36,30,2)
(102,16,2)
(0,16,2)
(111,30,2)
-----------------------------------
(0,(struct sockaddr*)
(1,memset(&service, 0, sizeof(service)
(2,1)
(3,0)
(4,dataLen)
(5,)
(6,break;)
(7,MAKEWORD(2,2)
(8,)
(9,data)
(10,)
(11,service)
(12,INVALID_SOCKET)
(13,)
(14,data)
(15,wchar_t * data)
(16,connectSocket == INVALID_SOCKET)
(17,inet_addr(IP_ADDRESS)
(18,RET)
(19,0)
(20,s_addr)
(21,service)
(22,SOCKET_ERROR)
(23,struct sockaddr*)
(24,connectSocket = INVALID_SOCKET)
(25,if (wsaDataInit)
(26,CLOSE_SOCKET(connectSocket)
(27,if (replace)
(28,service.sin_addr.s_addr)
(29,wsaDataInit)
(30,badStatic)
(31,sizeof(wchar_t)
(32,recvResult)
(33,connectSocket)
(34,'\\\\0')
(35,sin_addr)
(36,dataLen = wcslen(data)
(37,)
(38,service)
(39,data)
(40,TCP_PORT)
(41,2)
(42,0)
(43,sizeof(service)
(44,service.sin_port = htons(TCP_PORT)
(45,connectSocket)
(46,service.sin_port)
(47,data + dataLen)
(48,connectSocket != INVALID_SOCKET)
(49,IP_ADDRESS)
(50,connect(connectSocket, (struct sockaddr*)
(51,break;)
(52,recvResult)
(53,replace)
(54,dataLen - 1)
(55,)
(56,connectSocket)
(57,&service)
(58,service)
(59,wcslen(data)
(60,break;)
(61,&wsaData)
(62,\'\\\\0\')
(63,100 - dataLen - 1)
(64,service.sin_family = AF_INET)
(65,recvResult == SOCKET_ERROR || recvResult == 0)
(66,connectSocket)
(67,if (replace)
(68,\'\\\\0\')
(69,dataLen)
(70,recvResult)
(71,service.sin_addr)
(72,WSACleanup()
(73,IPPROTO_TCP)
(74,\'\\\\0\')
(75,do)
(76,SOCK_STREAM)
(77,sizeof(service)
(78,)
(79,service)
(80,'\\\\0')
(81,)
(82,recv(connectSocket, (char *)
(83,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(84,connectSocket)
(85,0)
(86,recvResult = recv(connectSocket, (char *)
(87,if (WSAStartup(MAKEWORD(2,2)
(88,INVALID_SOCKET)
(89,WSAStartup(MAKEWORD(2,2)
(90,char *)
(91,1)
(92,if (connectSocket == INVALID_SOCKET)
(93,wsaDataInit)
(94,SOCKET_ERROR)
(95,wsaData)
(96,AF_INET)
(97,recvResult)
(98,0)
(99,return data;)
(100,htons(TCP_PORT)
(101,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(102,AF_INET)
(103,service.sin_family)
(104,wsaDataInit)
(105,recvResult == SOCKET_ERROR)
(106,sizeof(wchar_t)
(107,)
(108,100)
(109,)
(110,wsaDataInit)
(111,INVALID_SOCKET)
(112,)
(113,connectSocket)
(114,if (recvResult == SOCKET_ERROR || recvResult == 0)
(115,dataLen)
(116,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(117,connect(connectSocket, (struct sockaddr*)
(118,wchar_t)
(119,recvResult == 0)
(120,sin_family)
(121,connectSocket)
(122,wsaData)
(123,replace)
(124,if(badStatic)
(125,service)
(126,NO_ERROR)
(127,WSAStartup(MAKEWORD(2,2)
(128,break;)
(129,2)
(130,wsaDataInit = 0)
(131,'\\\\0')
(132,(char *)
(133,service)
(134,&service)
(135,service)
(136,sin_port)
(137,dataLen)
(138,wsaDataInit = 1)
(139,)
(140,connectSocket)
(141,if (connect(connectSocket, (struct sockaddr*)
(142,replace)
(143,if (connectSocket != INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^