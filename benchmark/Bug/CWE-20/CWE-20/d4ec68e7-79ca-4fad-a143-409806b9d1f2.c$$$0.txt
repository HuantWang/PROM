-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data)
{
    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,7,9,13,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data){    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink
size_t data
size_t
size_t
data
data
{    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(10,30,0)
(15,23,0)
(38,22,0)
(13,4,0)
(17,21,0)
(2,30,0)
(34,9,0)
(6,36,0)
(20,33,0)
(28,9,0)
(15,20,0)
(1,24,0)
(10,18,0)
(19,10,0)
(7,18,0)
(16,17,0)
(12,6,0)
(20,15,0)
(24,18,0)
(21,17,0)
(21,33,0)
(23,5,0)
(22,18,0)
(35,20,0)
(24,30,0)
(37,35,0)
(32,39,0)
(29,14,0)
(26,20,0)
(23,30,0)
(30,23,0)
(22,30,0)
(3,22,0)
(0,6,0)
(20,35,0)
(13,27,0)
(5,23,0)
(23,15,0)
(4,13,0)
(40,32,0)
(11,4,0)
(9,30,0)
(30,18,0)
(31,21,0)
(23,5,1)
(11,9,1)
(22,30,1)
(32,40,1)
(24,1,1)
(28,30,1)
(24,30,1)
(10,30,1)
(16,31,1)
(40,21,1)
(21,33,1)
(13,4,1)
(2,21,1)
(20,33,1)
(1,22,1)
(38,3,1)
(3,9,1)
(17,16,1)
(23,15,1)
(26,2,1)
(30,23,1)
(8,32,1)
(21,17,1)
(31,25,1)
(10,19,1)
(22,38,1)
(8,25,1)
(35,37,1)
(3,13,1)
(4,11,1)
(8,10,1)
(9,34,1)
(9,30,1)
(20,35,1)
(15,20,1)
(19,24,1)
(34,28,1)
(37,26,1)
(38,21,2)
(17,25,2)
(13,9,2)
(15,21,2)
(3,21,2)
(4,9,2)
(26,21,2)
(40,21,2)
(23,15,2)
(31,25,2)
(24,21,2)
(10,30,2)
(28,21,2)
(20,35,2)
(34,21,2)
(20,21,2)
(9,30,2)
(21,25,2)
(23,5,2)
(9,21,2)
(11,9,2)
(37,21,2)
(13,4,2)
(19,21,2)
(1,21,2)
(22,30,2)
(20,33,2)
(16,25,2)
(30,23,2)
(32,21,2)
(21,33,2)
(24,30,2)
(35,21,2)
(23,21,2)
(15,20,2)
(21,17,2)
(2,21,2)
(10,21,2)
(22,21,2)
(30,21,2)
-----------------------------------
(0,if (data > strlen(HELLO_STRING)
(1,myString)
(2,myString)
(3,myString)
(4,-1)
(5,char *)
(6,)
(7,if (myString == NULL)
(8,RET)
(9,myString == NULL)
(10,free(myString)
(11,1)
(12,myString)
(13,exit(-1)
(14,)
(15,malloc(data*sizeof(char)
(16,HELLO_STRING)
(17,strlen(HELLO_STRING)
(18,)
(19,myString)
(20,data*sizeof(char)
(21,data > strlen(HELLO_STRING)
(22,strcpy(myString, HELLO_STRING)
(23,(char *)
(24,printLine(myString)
(25,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
(26,data)
(27,)
(28,myString)
(29,if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
(30,myString = (char *)
(31,data)
(32,printLine("Input is less than the length of the source string")
(33,size_t data)
(34,NULL)
(35,sizeof(char)
(36,)
(37,char)
(38,HELLO_STRING)
(39,)
(40,"Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^