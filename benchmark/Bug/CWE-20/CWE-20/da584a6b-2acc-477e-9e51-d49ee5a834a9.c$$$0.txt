-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_popen_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(31,55,0)
(31,38,0)
(34,0,0)
(57,8,0)
(41,59,0)
(13,24,0)
(44,55,0)
(12,42,0)
(12,24,0)
(44,26,0)
(33,15,0)
(11,6,0)
(3,8,0)
(39,38,0)
(35,10,0)
(9,3,0)
(19,14,0)
(45,55,0)
(49,50,0)
(4,18,0)
(13,55,0)
(59,26,0)
(45,24,0)
(23,5,0)
(47,8,0)
(38,31,0)
(28,45,0)
(42,54,0)
(58,57,0)
(21,6,0)
(12,55,0)
(50,15,0)
(20,35,0)
(22,31,0)
(46,52,0)
(14,54,0)
(57,5,0)
(15,50,0)
(38,26,0)
(7,24,0)
(60,12,0)
(37,40,0)
(21,55,0)
(31,40,0)
(36,42,0)
(26,44,0)
(21,59,0)
(5,24,0)
(53,59,0)
(52,55,0)
(8,57,0)
(50,24,0)
(2,50,0)
(6,29,0)
(24,35,0)
(40,37,0)
(56,38,0)
(59,21,0)
(30,63,0)
(27,35,0)
(25,40,0)
(48,5,0)
(18,26,0)
(17,13,0)
(16,44,0)
(26,63,0)
(5,57,0)
(43,18,0)
(51,12,0)
(62,45,0)
(32,21,0)
(61,52,0)
(45,8,0)
(8,45,0)
(57,58,0)
(40,31,0)
(24,13,0)
(8,3,0)
(37,18,0)
(18,37,0)
(1,26,0)
(52,10,0)
(25,31,1)
(8,57,1)
(1,3,1)
(8,47,1)
(45,24,1)
(41,32,1)
(53,41,1)
(57,58,1)
(42,36,1)
(44,55,1)
(57,5,1)
(37,18,1)
(21,59,1)
(51,60,1)
(38,56,1)
(28,62,1)
(15,33,1)
(43,26,1)
(26,44,1)
(39,22,1)
(56,39,1)
(9,8,1)
(61,37,1)
(18,4,1)
(37,40,1)
(62,15,1)
(49,24,1)
(61,42,1)
(14,19,1)
(3,9,1)
(2,49,1)
(13,55,1)
(52,61,1)
(24,13,1)
(40,31,1)
(12,24,1)
(61,6,1)
(59,26,1)
(12,55,1)
(5,23,1)
(32,37,1)
(16,1,1)
(3,8,1)
(38,26,1)
(19,3,1)
(40,25,1)
(17,7,1)
(15,50,1)
(6,11,1)
(59,53,1)
(61,15,1)
(22,18,1)
(23,48,1)
(44,16,1)
(46,52,1)
(12,51,1)
(50,2,1)
(18,26,1)
(4,43,1)
(60,14,1)
(33,50,1)
(45,28,1)
(45,55,1)
(52,55,1)
(47,57,1)
(21,55,1)
(8,45,1)
(13,17,1)
(31,55,1)
(5,24,1)
(31,38,1)
(11,21,1)
(50,24,1)
(48,45,1)
(36,12,1)
(5,15,2)
(41,37,2)
(40,31,2)
(3,8,2)
(59,37,2)
(21,59,2)
(47,15,2)
(12,24,2)
(14,3,2)
(21,55,2)
(45,55,2)
(50,24,2)
(5,24,2)
(38,18,2)
(4,3,2)
(15,50,2)
(40,18,2)
(3,15,2)
(11,37,2)
(59,26,2)
(8,15,2)
(57,5,2)
(56,18,2)
(42,3,2)
(45,24,2)
(60,3,2)
(37,18,2)
(8,57,2)
(39,18,2)
(45,15,2)
(12,3,2)
(21,37,2)
(62,15,2)
(18,26,2)
(51,3,2)
(25,18,2)
(24,13,2)
(22,18,2)
(37,3,2)
(46,52,2)
(31,55,2)
(32,37,2)
(8,45,2)
(12,55,2)
(28,15,2)
(1,3,2)
(43,3,2)
(44,55,2)
(23,15,2)
(26,3,2)
(26,44,2)
(31,18,2)
(36,3,2)
(57,58,2)
(19,3,2)
(44,3,2)
(38,26,2)
(37,40,2)
(13,55,2)
(31,38,2)
(57,15,2)
(9,15,2)
(16,3,2)
(52,55,2)
(18,3,2)
(48,15,2)
(6,37,2)
(53,37,2)
-----------------------------------
(0,)
(1,dataLen)
(2,dataLen)
(3,fgets(data+dataLen, (int)
(4,0)
(5,100-dataLen)
(6,data[dataLen-1] = \\\'\\\\0\\\')
(7,dataLen)
(8,fgets(data+dataLen, (int)
(9,NULL)
(10,)
(11,\\\'\\\\0\\\')
(12,data[dataLen])
(13,strlen(data)
(14,printLine("fgets()
(15,100-dataLen > 1)
(16,data)
(17,data)
(18,dataLen > 0)
(19,"fgets()
(20,if (100-dataLen > 1)
(21,data[dataLen-1])
(22,data)
(23,dataLen)
(24,dataLen = strlen(data)
(25,\\\'\\\\n\\\')
(26,dataLen = strlen(data)
(27,dataLen)
(28,dataLen)
(29,)
(30,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(31,data[dataLen-1])
(32,data)
(33,1)
(34,if (fgets(data+dataLen, (int)
(35,)
(36,\\\'\\\\0\\\')
(37,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(38,dataLen-1)
(39,dataLen)
(40,data[dataLen-1] == \\\'\\\\n\\\')
(41,dataLen)
(42,data[dataLen] = \\\'\\\\0\\\')
(43,dataLen)
(44,strlen(data)
(45,data+dataLen)
(46,RET)
(47,stdin)
(48,100)
(49,100)
(50,100-dataLen)
(51,dataLen)
(52,return data;)
(53,1)
(54,)
(55,char * data)
(56,1)
(57,(int)
(58,int)
(59,dataLen-1)
(60,data)
(61,data)
(62,data)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^