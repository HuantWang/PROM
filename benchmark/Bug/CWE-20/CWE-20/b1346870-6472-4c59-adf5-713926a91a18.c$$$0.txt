-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticTrue)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,19,24,26,27,30,33,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_05_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(51,6,0)
(46,14,0)
(42,1,0)
(11,36,0)
(24,44,0)
(33,6,0)
(17,40,0)
(9,15,0)
(25,6,0)
(39,12,0)
(30,29,0)
(27,36,0)
(10,13,0)
(45,29,0)
(2,14,0)
(41,12,0)
(48,8,0)
(5,14,0)
(1,19,0)
(31,24,0)
(24,20,0)
(22,46,0)
(6,25,0)
(35,30,0)
(18,30,0)
(0,5,0)
(15,32,0)
(11,38,0)
(8,29,0)
(29,13,0)
(29,14,0)
(8,14,0)
(20,13,0)
(13,20,0)
(47,25,0)
(24,19,0)
(23,17,0)
(28,8,0)
(26,44,0)
(43,19,0)
(36,11,0)
(49,19,0)
(21,12,0)
(34,1,0)
(25,19,0)
(13,10,0)
(5,29,0)
(3,34,0)
(20,24,0)
(1,34,0)
(16,17,0)
(44,24,0)
(13,29,0)
(46,29,0)
(6,7,0)
(19,12,0)
(29,13,1)
(11,36,1)
(42,4,1)
(35,18,1)
(44,26,1)
(6,25,1)
(46,22,1)
(30,29,1)
(8,48,1)
(5,29,1)
(48,28,1)
(50,19,1)
(3,42,1)
(9,1,1)
(37,5,1)
(1,19,1)
(25,47,1)
(37,4,1)
(19,43,1)
(1,34,1)
(13,20,1)
(0,46,1)
(28,30,1)
(22,8,1)
(18,29,1)
(43,49,1)
(31,45,1)
(28,11,1)
(36,27,1)
(24,19,1)
(51,50,1)
(15,9,1)
(30,35,1)
(8,29,1)
(37,15,1)
(24,44,1)
(33,51,1)
(27,30,1)
(20,24,1)
(46,29,1)
(25,19,1)
(4,50,1)
(26,31,1)
(47,33,1)
(4,6,1)
(34,3,1)
(5,0,1)
(45,1,1)
(13,10,1)
(8,1,2)
(8,29,2)
(25,50,2)
(11,36,2)
(18,1,2)
(48,1,2)
(24,19,2)
(29,1,2)
(20,1,2)
(44,1,2)
(11,30,2)
(25,19,2)
(6,25,2)
(29,13,2)
(15,1,2)
(35,1,2)
(13,10,2)
(26,1,2)
(31,1,2)
(34,4,2)
(0,1,2)
(13,20,2)
(36,30,2)
(42,4,2)
(22,1,2)
(3,4,2)
(20,24,2)
(1,4,2)
(1,34,2)
(28,1,2)
(6,50,2)
(1,19,2)
(45,1,2)
(5,29,2)
(46,29,2)
(24,44,2)
(47,50,2)
(27,30,2)
(24,1,2)
(33,50,2)
(46,1,2)
(30,29,2)
(30,1,2)
(13,1,2)
(5,1,2)
(51,50,2)
(9,1,2)
-----------------------------------
(0,myString)
(1,data > wcslen(HELLO_STRING)
(2,if (myString == NULL)
(3,HELLO_STRING)
(4,staticTrue)
(5,free(myString)
(6,fscanf(stdin, "%zu", &data)
(7,)
(8,wcscpy(myString, HELLO_STRING)
(9,"Input is less than the length of the source string")
(10,wchar_t *)
(11,exit(-1)
(12,)
(13,(wchar_t *)
(14,)
(15,printLine("Input is less than the length of the source string")
(16,myString)
(17,)
(18,myString)
(19,data = 0)
(20,malloc(data*sizeof(wchar_t)
(21,if(staticTrue)
(22,myString)
(23,if (data > wcslen(HELLO_STRING)
(24,data*sizeof(wchar_t)
(25,&data)
(26,wchar_t)
(27,1)
(28,myString)
(29,myString = (wchar_t *)
(30,myString == NULL)
(31,data)
(32,)
(33,"%zu")
(34,wcslen(HELLO_STRING)
(35,NULL)
(36,-1)
(37,RET)
(38,)
(39,if(staticTrue)
(40,)
(41,data)
(42,data)
(43,0)
(44,sizeof(wchar_t)
(45,myString)
(46,printWLine(myString)
(47,data)
(48,HELLO_STRING)
(49,data)
(50,staticTrue)
(51,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^