-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,10,0)
(5,16,0)
(6,30,0)
(40,19,0)
(7,28,0)
(21,24,0)
(39,24,0)
(35,26,0)
(37,0,0)
(18,24,0)
(14,36,0)
(26,30,0)
(41,30,0)
(12,20,0)
(27,14,0)
(13,28,0)
(24,25,0)
(8,10,0)
(0,10,0)
(17,36,0)
(2,10,0)
(38,29,0)
(21,28,0)
(19,28,0)
(30,22,0)
(1,21,0)
(26,28,0)
(18,21,0)
(3,29,0)
(34,16,0)
(23,29,0)
(15,29,0)
(19,24,0)
(30,26,0)
(9,18,0)
(31,29,0)
(32,36,0)
(28,29,0)
(16,36,0)
(4,21,0)
(11,0,0)
(26,35,1)
(40,16,1)
(37,11,1)
(9,21,1)
(41,0,1)
(10,2,1)
(7,13,1)
(21,1,1)
(4,19,1)
(20,10,1)
(30,26,1)
(14,27,1)
(5,34,1)
(18,21,1)
(36,32,1)
(27,18,1)
(16,36,1)
(18,9,1)
(12,30,1)
(26,28,1)
(20,12,1)
(0,37,1)
(19,28,1)
(32,17,1)
(0,10,1)
(35,6,1)
(34,14,1)
(11,10,1)
(6,41,1)
(14,36,1)
(16,5,1)
(17,0,1)
(21,28,1)
(33,16,1)
(1,4,1)
(11,20,1)
(2,8,1)
(8,28,1)
(19,40,1)
(28,7,1)
(34,36,1)
(16,36,2)
(14,16,2)
(0,0,2)
(41,0,2)
(4,16,2)
(9,16,2)
(20,10,2)
(14,36,2)
(26,28,2)
(21,16,2)
(0,10,2)
(35,0,2)
(11,0,2)
(16,16,2)
(18,16,2)
(19,28,2)
(34,16,2)
(37,0,2)
(18,21,2)
(27,16,2)
(26,0,2)
(5,16,2)
(6,0,2)
(40,16,2)
(21,28,2)
(1,16,2)
(20,0,2)
(12,0,2)
(30,26,2)
(19,16,2)
(30,0,2)
-----------------------------------
(0,i < 1)
(1,data)
(2,0)
(3,for(j = 0; j < 1; j++)
(4,result)
(5,1)
(6,"%hd")
(7,0)
(8,i)
(9,result)
(10,i = 0)
(11,i)
(12,i)
(13,data)
(14,j++)
(15,for(i = 0; i < 1; i++)
(16,j < 1)
(17,j)
(18,printIntLine(result)
(19,++data)
(20,i++)
(21,result = data)
(22,)
(23,j)
(24,)
(25,)
(26,&data)
(27,j)
(28,data = 0)
(29,)
(30,fscanf (stdin, "%hd", &data)
(31,data)
(32,0)
(33,RET)
(34,j)
(35,data)
(36,j = 0)
(37,1)
(38,i)
(39,result)
(40,data)
(41,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^