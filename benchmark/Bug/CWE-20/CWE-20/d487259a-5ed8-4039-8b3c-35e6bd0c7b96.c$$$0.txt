-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_08_bad()
CWE190_Integer_Overflow__short_rand_postinc_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,9,0)
(0,10,0)
(9,13,0)
(18,4,0)
(7,2,0)
(25,0,0)
(5,9,0)
(17,25,0)
(1,13,0)
(16,9,0)
(20,13,0)
(25,6,0)
(22,6,0)
(4,18,0)
(15,13,0)
(4,8,0)
(5,0,0)
(2,25,0)
(19,25,0)
(11,9,0)
(14,0,0)
(6,23,0)
(8,4,0)
(2,0,0)
(3,5,0)
(5,6,0)
(4,6,0)
(6,4,0)
(25,9,1)
(5,6,1)
(22,12,1)
(25,6,1)
(18,22,1)
(16,11,1)
(2,25,1)
(19,17,1)
(12,9,1)
(3,24,1)
(6,4,1)
(5,3,1)
(25,19,1)
(24,12,1)
(21,2,1)
(2,7,1)
(7,25,1)
(24,6,1)
(17,5,1)
(4,18,1)
(21,24,1)
(9,16,1)
(5,9,1)
(4,8,1)
(2,25,2)
(4,8,2)
(22,12,2)
(4,12,2)
(25,24,2)
(7,24,2)
(5,24,2)
(18,12,2)
(6,4,2)
(17,24,2)
(4,18,2)
(25,9,2)
(5,6,2)
(3,24,2)
(25,6,2)
(19,24,2)
(2,24,2)
(5,9,2)
(6,12,2)
-----------------------------------
(0,)
(1,if(staticReturnsTrue()
(2,printIntLine(result)
(3,data)
(4,(short)
(5,data++)
(6,data = (short)
(7,result)
(8,short)
(9,data = 0)
(10,)
(11,data)
(12,staticReturnsTrue()
(13,)
(14,result)
(15,if(staticReturnsTrue()
(16,0)
(17,result)
(18,RAND32()
(19,data)
(20,data)
(21,RET)
(22,data)
(23,)
(24,staticReturnsTrue()
(25,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^