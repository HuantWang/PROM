-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_18_bad()
{
    wchar_t * data;
    wchar_t dataBadBuffer[50];
    wchar_t dataGoodBuffer[100];
    goto source;
source:
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    data[0] = L'\0'; /* null terminate */
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
28,29
28,30
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
38,40
39,40
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
47,48
47,49
49,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
58,59
58,60
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
70,71
71,72
71,73
71,74
71,75
71,76
72,73
74,75
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,14,16,18,21,23,25,27,29,33,35,40,41,42,46,48,50,54,56,57,59,60,65,67,68,69,73,75,76,77,79,83,85
-----computeFrom-----
31,32
31,33
37,38
37,39
58,59
58,60
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_18_bad(){    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    data[0] = L'\0'; /* null terminate */    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_18_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_18_bad
{    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    data[0] = L'\0'; /* null terminate */    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBadBuffer[50];
wchar_t dataBadBuffer[50];
wchar_t
dataBadBuffer[50]
dataBadBuffer
[50]
50
wchar_t dataGoodBuffer[100];
wchar_t dataGoodBuffer[100];
wchar_t
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
goto source;
source
source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;
source
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(2,10,0)
(15,12,0)
(11,2,0)
(13,10,0)
(14,12,0)
(1,12,0)
(3,12,0)
(7,10,0)
(4,9,0)
(10,12,0)
(5,12,0)
(0,12,0)
(9,12,0)
(2,9,0)
(8,9,0)
(11,13,1)
(8,0,1)
(2,11,1)
(2,9,1)
(3,9,1)
(6,2,1)
(9,4,1)
(13,3,1)
(4,8,1)
(2,9,2)
-----------------------------------
(0,goto source;)
(1,data)
(2,printWLine(data)
(3,'\\\\0')
(4,dataBadBuffer)
(5,dataBadBuffer)
(6,RET)
(7,source)
(8,data)
(9,data = dataBadBuffer)
(10,)
(11,data)
(12,)
(13,'\\\\0')
(14,dataGoodBuffer)
(15,source:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^