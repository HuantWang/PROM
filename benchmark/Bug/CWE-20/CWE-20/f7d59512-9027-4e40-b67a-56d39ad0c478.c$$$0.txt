-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int64_t_01_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    data = (int64_t *)malloc(100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i] = 5LL;
        }
    }
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printLongLongLine(data[0]);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,56,58,63,64,67,68,71,77,79,80,84,86,90,93,94
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
61,62
61,63
65,66
65,67
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int64_t_01_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    {        size_t i;        for(i = 0; i < 100; i++)        {            data[i] = 5LL;        }    }    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */    free(data);    /* POTENTIAL FLAW: Use of data that may have been freed */    printLongLongLine(data[0]);    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */}
void
CWE416_Use_After_Free__malloc_free_int64_t_01_bad()
CWE416_Use_After_Free__malloc_free_int64_t_01_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    {        size_t i;        for(i = 0; i < 100; i++)        {            data[i] = 5LL;        }    }    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */    free(data);    /* POTENTIAL FLAW: Use of data that may have been freed */    printLongLongLine(data[0]);    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        size_t i;        for(i = 0; i < 100; i++)        {            data[i] = 5LL;        }    }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)        {            data[i] = 5LL;        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = 5LL;        }
data[i] = 5LL;
data[i] = 5LL
data[i]
data
data
i
i
5LL
free(data);
free(data)
free
free
data
data
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
-----joern-----
(33,28,0)
(4,39,0)
(9,8,0)
(18,2,0)
(39,7,0)
(6,17,0)
(36,2,0)
(14,7,0)
(22,20,0)
(29,7,0)
(5,37,0)
(27,6,0)
(10,14,0)
(22,7,0)
(8,13,0)
(0,13,0)
(37,3,0)
(16,7,0)
(28,37,0)
(28,7,0)
(21,33,0)
(2,3,0)
(2,36,0)
(37,28,0)
(15,7,0)
(1,13,0)
(25,28,0)
(20,28,0)
(35,11,0)
(20,22,0)
(34,39,0)
(30,33,0)
(40,16,0)
(37,5,0)
(24,27,0)
(6,27,0)
(3,37,0)
(31,20,0)
(19,8,0)
(38,14,0)
(11,13,0)
(41,36,0)
(3,2,0)
(23,12,0)
(16,28,0)
(26,20,0)
(37,5,1)
(14,10,1)
(10,38,1)
(2,36,1)
(11,13,1)
(23,8,1)
(8,13,1)
(30,28,1)
(33,21,1)
(19,13,1)
(1,0,1)
(9,19,1)
(36,41,1)
(22,20,1)
(21,30,1)
(27,24,1)
(6,27,1)
(24,33,1)
(26,31,1)
(20,28,1)
(40,8,1)
(33,28,1)
(37,3,1)
(35,23,1)
(28,37,1)
(31,16,1)
(3,2,1)
(41,18,1)
(16,40,1)
(18,25,1)
(19,11,1)
(16,28,1)
(25,14,1)
(0,33,1)
(8,9,1)
(13,1,1)
(20,26,1)
(11,35,1)
(0,6,1)
(32,22,1)
(2,36,2)
(37,5,2)
(28,37,2)
(8,13,2)
(3,2,2)
(24,33,2)
(23,8,2)
(16,28,2)
(9,8,2)
(35,8,2)
(8,8,2)
(20,28,2)
(27,33,2)
(33,28,2)
(11,8,2)
(22,20,2)
(6,33,2)
(37,3,2)
(11,13,2)
(6,27,2)
(19,8,2)
-----------------------------------
(0,i)
(1,0)
(2,100*sizeof(int64_t)
(3,malloc(100*sizeof(int64_t)
(4,i)
(5,int64_t *)
(6,exit(-1)
(7,)
(8,i < 100)
(9,100)
(10,NULL)
(11,i++)
(12,)
(13,i = 0)
(14,data = NULL)
(15,data)
(16,free(data)
(17,)
(18,100)
(19,i)
(20,data[0])
(21,NULL)
(22,printLongLongLine(data[0])
(23,L)
(24,1)
(25,data)
(26,0)
(27,-1)
(28,data = (int64_t *)
(29,if (data == NULL)
(30,data)
(31,data)
(32,RET)
(33,data == NULL)
(34,for(i = 0; i < 100; i++)
(35,i)
(36,sizeof(int64_t)
(37,(int64_t *)
(38,data)
(39,)
(40,data)
(41,int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^