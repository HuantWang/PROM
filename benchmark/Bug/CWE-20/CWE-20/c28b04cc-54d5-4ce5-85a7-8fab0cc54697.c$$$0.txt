-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    void * * dataPtr = (void * *)dataVoidPtr;
    /* dereference dataPtr into data */
    void * data = (*dataPtr);
    {
        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
        size_t dataLen = strlen((char *)data);
        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
        if (dest == NULL) {exit(-1);}
        (void)wcscpy(dest, data);
        printLine((char *)dest);
        free(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
56,57
57,58
57,59
59,60
59,61
59,62
62,63
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
71,73
72,73
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
94,96
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
108,110
109,110
109,111
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,42,44,48,51,53,55,58,60,61,65,67,70,73,74,77,78,82,84,89,91,95,96,99,101,103,107,110,112,114,118,120
-----computeFrom-----
71,72
71,73
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    void * * dataPtr = (void * *)dataVoidPtr;    /* dereference dataPtr into data */    void * data = (*dataPtr);    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(void * dataVoidPtr)
CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    void * * dataPtr = (void * *)dataVoidPtr;    /* dereference dataPtr into data */    void * data = (*dataPtr);    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
void * * dataPtr = (void * *)dataVoidPtr;
void * * dataPtr = (void * *)dataVoidPtr;
void
* * dataPtr = (void * *)dataVoidPtr
*
*
dataPtr
= (void * *)dataVoidPtr
(void * *)dataVoidPtr
void * *
void
* *
*
*
dataVoidPtr
dataVoidPtr
void * data = (*dataPtr);
void * data = (*dataPtr);
void
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void
* dest = (void *)calloc(dataLen+1, sizeof(wchar_t))
*
dest
= (void *)calloc(dataLen+1, sizeof(wchar_t))
(void *)calloc(dataLen+1, sizeof(wchar_t))
void *
void
*
*
calloc(dataLen+1, sizeof(wchar_t))
calloc
calloc
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

if (dest == NULL) {exit(-1);}
dest == NULL
dest
dest
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
free(dest);
free(dest)
free
free
dest
dest
-----joern-----
(5,29,0)
(21,47,0)
(37,49,0)
(0,10,0)
(34,33,0)
(44,31,0)
(27,35,0)
(17,10,0)
(33,10,0)
(48,10,0)
(25,37,0)
(31,44,0)
(15,10,0)
(22,35,0)
(10,49,0)
(33,13,0)
(43,26,0)
(32,10,0)
(35,13,0)
(31,40,0)
(31,13,0)
(26,43,0)
(43,51,0)
(0,11,0)
(0,38,0)
(26,32,0)
(9,29,0)
(50,38,0)
(37,21,0)
(21,12,0)
(21,37,0)
(11,0,0)
(51,25,0)
(4,19,0)
(25,51,0)
(8,32,0)
(43,23,0)
(29,19,0)
(3,5,0)
(47,21,0)
(32,26,0)
(36,16,0)
(39,9,0)
(19,29,0)
(38,13,0)
(41,16,0)
(18,51,0)
(19,4,0)
(44,10,0)
(6,43,0)
(30,25,0)
(24,49,0)
(7,13,0)
(29,5,0)
(36,42,0)
(2,38,0)
(1,9,0)
(28,49,0)
(20,31,0)
(38,51,0)
(40,31,0)
(51,49,0)
(16,36,0)
(38,0,0)
(13,10,0)
(13,19,0)
(9,32,0)
(19,13,0)
(23,43,0)
(29,9,0)
(46,37,0)
(45,21,0)
(9,1,1)
(7,32,1)
(45,46,1)
(31,13,1)
(21,45,1)
(39,7,1)
(43,51,1)
(38,50,1)
(5,3,1)
(29,9,1)
(35,22,1)
(18,37,1)
(43,6,1)
(38,13,1)
(32,26,1)
(21,47,1)
(0,11,1)
(33,34,1)
(31,40,1)
(35,13,1)
(21,12,1)
(8,51,1)
(36,16,1)
(13,19,1)
(3,9,1)
(30,18,1)
(51,25,1)
(2,36,1)
(38,51,1)
(25,30,1)
(29,5,1)
(20,0,1)
(37,21,1)
(16,41,1)
(34,44,1)
(19,29,1)
(25,37,1)
(43,23,1)
(41,35,1)
(31,20,1)
(1,39,1)
(0,38,1)
(26,43,1)
(27,13,1)
(50,2,1)
(22,27,1)
(9,32,1)
(2,35,1)
(19,4,1)
(33,13,1)
(44,31,1)
(14,33,1)
(6,8,1)
(36,35,2)
(16,35,2)
(0,38,2)
(35,13,2)
(36,16,2)
(32,26,2)
(21,47,2)
(43,23,2)
(43,51,2)
(29,5,2)
(41,35,2)
(44,31,2)
(33,13,2)
(21,12,2)
(0,11,2)
(38,13,2)
(13,19,2)
(31,40,2)
(26,43,2)
(25,37,2)
(19,29,2)
(31,13,2)
(37,21,2)
(19,4,2)
(9,32,2)
(29,9,2)
(38,51,2)
(51,25,2)
-----------------------------------
(0,(void)
(1,1)
(2,dest)
(3,wchar_t)
(4,void *)
(5,sizeof(wchar_t)
(6,data)
(7,dest)
(8,dataLen)
(9,dataLen+1)
(10,)
(11,void)
(12,void * dataVoidPtr)
(13,* dest = (void *)
(14,RET)
(15,if (dest == NULL)
(16,-1)
(17,dataLen)
(18,data)
(19,(void *)
(20,dest)
(21,(void * *)
(22,NULL)
(23,char *)
(24,dataPtr)
(25,*dataPtr)
(26,strlen((char *)
(27,dest)
(28,data)
(29,calloc(dataLen+1, sizeof(wchar_t)
(30,dataPtr)
(31,(char *)
(32,dataLen = strlen((char *)
(33,free(dest)
(34,dest)
(35,dest == NULL)
(36,exit(-1)
(37,* * dataPtr = (void * *)
(38,wcscpy(dest, data)
(39,dataLen)
(40,char *)
(41,1)
(42,)
(43,(char *)
(44,printLine((char *)
(45,dataVoidPtr)
(46,dataPtr)
(47,void * *)
(48,dest)
(49,)
(50,data)
(51,* data = (*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^