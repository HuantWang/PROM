-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
89,94
90,91
92,93
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,94,95,97,101,103,107,109
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,33,0)
(9,22,0)
(3,7,0)
(2,16,0)
(21,16,0)
(23,26,0)
(4,6,0)
(18,22,0)
(29,6,0)
(22,17,0)
(12,30,0)
(21,15,0)
(24,19,0)
(34,19,0)
(30,26,0)
(13,19,0)
(9,3,0)
(3,30,0)
(33,30,0)
(17,22,0)
(8,10,0)
(33,20,0)
(11,26,0)
(0,20,0)
(34,30,0)
(33,19,0)
(28,20,0)
(19,10,0)
(7,3,0)
(16,21,0)
(5,34,0)
(3,9,0)
(14,17,0)
(20,10,0)
(6,30,0)
(30,3,0)
(34,20,0)
(32,10,0)
(22,9,0)
(22,17,1)
(31,0,1)
(25,34,1)
(30,3,1)
(33,19,1)
(33,30,1)
(34,5,1)
(12,1,1)
(1,19,1)
(16,2,1)
(6,30,1)
(2,6,1)
(9,22,1)
(19,24,1)
(4,30,1)
(33,31,1)
(24,13,1)
(3,7,1)
(34,30,1)
(6,29,1)
(3,9,1)
(0,1,1)
(21,16,1)
(14,18,1)
(29,4,1)
(23,6,1)
(17,14,1)
(34,19,1)
(0,23,1)
(18,12,1)
(23,21,1)
(5,33,1)
(6,1,2)
(3,1,2)
(3,9,2)
(16,6,2)
(30,1,2)
(17,1,2)
(12,1,2)
(34,30,2)
(30,3,2)
(29,1,2)
(2,6,2)
(9,1,2)
(14,1,2)
(4,1,2)
(22,17,2)
(3,7,2)
(6,30,2)
(33,30,2)
(23,1,2)
(22,1,2)
(9,22,2)
(21,6,2)
(33,19,2)
(18,1,2)
(34,19,2)
(21,16,2)
-----------------------------------
(0,'\\\\0')
(1,globalReturnsTrue()
(2,1)
(3,(wchar_t *)
(4,data)
(5,data)
(6,data == NULL)
(7,wchar_t *)
(8,data)
(9,malloc(50*sizeof(wchar_t)
(10,)
(11,if (data == NULL)
(12,data)
(13,data)
(14,wchar_t)
(15,)
(16,-1)
(17,sizeof(wchar_t)
(18,50)
(19,data = NULL)
(20,)
(21,exit(-1)
(22,50*sizeof(wchar_t)
(23,'\\\\0')
(24,NULL)
(25,RET)
(26,)
(27,\'\\\\0\')
(28,source)
(29,NULL)
(30,data = (wchar_t *)
(31,data)
(32,if(globalReturnsTrue()
(33,printWLine(data)
(34,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^