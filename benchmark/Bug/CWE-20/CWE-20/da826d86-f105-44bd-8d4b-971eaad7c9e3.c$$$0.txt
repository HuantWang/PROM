-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    else
    {
        /* FIX: Set a pointer to a "large" buffer, thus avoiding buffer overflows in the sinks. */
        data = dataGoodBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
84,85
84,86
86,87
88,89
88,90
89,90
90,91
90,92
91,92
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
108,110
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
115,116
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
125,126
129,130
130,131
130,132
130,133
130,134
131,132
133,134
135,136
137,138
137,139
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
149,150
149,151
150,151
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,64,69,71,76,78,83,85,87,92,94,99,100,103,104,107,114,116,117,118,124,126,127,128,132,134,136,138,142,143,147,151,152
-----computeFrom-----
30,31
30,32
54,55
54,56
67,68
67,69
74,75
74,76
97,98
97,99
101,102
101,103
110,111
110,112
120,121
120,122
137,138
137,139
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrueOrFalse())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    else    {        /* FIX: Set a pointer to a "large" buffer, thus avoiding buffer overflows in the sinks. */        data = dataGoodBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrueOrFalse())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    else    {        /* FIX: Set a pointer to a "large" buffer, thus avoiding buffer overflows in the sinks. */        data = dataGoodBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalReturnsTrueOrFalse())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    else    {        /* FIX: Set a pointer to a "large" buffer, thus avoiding buffer overflows in the sinks. */        data = dataGoodBuffer;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        /* FIX: Set a pointer to a "large" buffer, thus avoiding buffer overflows in the sinks. */        data = dataGoodBuffer;    }
data = dataGoodBuffer;
data = dataGoodBuffer
data
data
dataGoodBuffer
dataGoodBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(51,17,0)
(61,8,0)
(64,20,0)
(67,26,0)
(71,17,0)
(7,9,0)
(41,72,0)
(28,57,0)
(44,26,0)
(47,9,0)
(16,17,0)
(22,39,0)
(37,10,0)
(70,43,0)
(62,9,0)
(57,0,0)
(36,61,0)
(0,29,0)
(13,10,0)
(39,22,0)
(60,51,0)
(14,69,0)
(28,25,0)
(43,20,0)
(22,6,0)
(28,72,0)
(25,28,0)
(6,50,0)
(26,67,0)
(69,9,0)
(54,59,0)
(8,61,0)
(20,9,0)
(55,64,0)
(59,52,0)
(10,2,0)
(15,2,0)
(56,71,0)
(45,29,0)
(48,15,0)
(71,21,0)
(66,17,0)
(5,32,0)
(49,24,0)
(64,5,0)
(18,59,0)
(33,5,0)
(0,57,0)
(31,8,0)
(61,64,0)
(21,15,0)
(72,28,0)
(27,20,0)
(29,0,0)
(38,37,0)
(35,20,0)
(40,0,0)
(57,28,0)
(5,72,0)
(37,24,0)
(30,5,0)
(72,9,0)
(21,71,0)
(67,27,0)
(1,24,0)
(26,59,0)
(53,42,0)
(11,9,0)
(42,39,0)
(39,42,0)
(59,69,0)
(34,64,0)
(58,21,0)
(50,6,0)
(6,69,0)
(26,5,0)
(6,22,0)
(46,26,0)
(24,17,0)
(64,59,0)
(69,6,0)
(23,3,0)
(3,17,0)
(64,61,0)
(4,51,0)
(19,71,0)
(63,43,0)
(12,39,0)
(27,67,0)
(24,37,0)
(30,33,1)
(37,24,1)
(64,5,1)
(37,38,1)
(6,22,1)
(13,37,1)
(15,48,1)
(16,59,1)
(65,72,1)
(53,12,1)
(69,6,1)
(60,4,1)
(16,5,1)
(71,17,1)
(51,60,1)
(24,49,1)
(3,17,1)
(28,57,1)
(44,46,1)
(54,18,1)
(8,31,1)
(18,65,1)
(28,25,1)
(72,28,1)
(67,26,1)
(59,54,1)
(56,19,1)
(26,44,1)
(36,34,1)
(21,71,1)
(40,41,1)
(51,17,1)
(42,53,1)
(22,39,1)
(46,64,1)
(27,67,1)
(61,8,1)
(12,14,1)
(1,51,1)
(4,17,1)
(49,1,1)
(31,36,1)
(58,71,1)
(6,50,1)
(5,30,1)
(59,69,1)
(64,59,1)
(33,65,1)
(4,3,1)
(55,51,1)
(39,42,1)
(64,61,1)
(17,66,1)
(19,10,1)
(48,21,1)
(68,27,1)
(38,24,1)
(45,40,1)
(24,17,1)
(0,29,1)
(26,59,1)
(66,16,1)
(26,5,1)
(23,15,1)
(3,23,1)
(71,56,1)
(10,13,1)
(41,69,1)
(5,72,1)
(57,0,1)
(21,58,1)
(34,55,1)
(29,45,1)
(5,65,2)
(57,0,2)
(1,51,2)
(15,51,2)
(37,24,2)
(71,17,2)
(58,51,2)
(21,51,2)
(23,51,2)
(21,71,2)
(10,51,2)
(24,17,2)
(51,51,2)
(27,67,2)
(4,51,2)
(69,6,2)
(51,17,2)
(19,51,2)
(48,51,2)
(49,51,2)
(72,28,2)
(37,51,2)
(26,59,2)
(33,65,2)
(26,5,2)
(3,51,2)
(3,17,2)
(6,50,2)
(60,51,2)
(59,65,2)
(30,65,2)
(64,61,2)
(56,51,2)
(64,59,2)
(22,39,2)
(54,65,2)
(13,51,2)
(39,42,2)
(28,57,2)
(28,25,2)
(59,69,2)
(0,29,2)
(5,72,2)
(71,51,2)
(6,22,2)
(18,65,2)
(61,8,2)
(67,26,2)
(24,51,2)
(38,51,2)
(64,5,2)
-----------------------------------
(0,100*sizeof(twoIntsStruct)
(1,source)
(2,)
(3,i++)
(4,i)
(5,data = dataGoodBuffer)
(6,(twoIntsStruct *)
(7,dataBadBuffer)
(8,sizeof(twoIntsStruct)
(9,)
(10,source[i].intOne = 0)
(11,if(globalReturnsTrueOrFalse()
(12,50)
(13,0)
(14,dataBadBuffer)
(15,source[i].intTwo = 0)
(16,i)
(17,i = 0)
(18,data)
(19,source)
(20,)
(21,source[i].intTwo)
(22,ALLOCA(50*sizeof(twoIntsStruct)
(23,i)
(24,source[i])
(25,twoIntsStruct *)
(26,data[0])
(27,printStructLine(&data[0])
(28,(twoIntsStruct *)
(29,sizeof(twoIntsStruct)
(30,dataGoodBuffer)
(31,twoIntsStruct)
(32,)
(33,data)
(34,source)
(35,source)
(36,100)
(37,source[i].intOne)
(38,intOne)
(39,50*sizeof(twoIntsStruct)
(40,100)
(41,dataGoodBuffer)
(42,sizeof(twoIntsStruct)
(43,)
(44,0)
(45,twoIntsStruct)
(46,data)
(47,dataGoodBuffer)
(48,0)
(49,i)
(50,twoIntsStruct *)
(51,i < 100)
(52,)
(53,twoIntsStruct)
(54,dataBadBuffer)
(55,data)
(56,i)
(57,ALLOCA(100*sizeof(twoIntsStruct)
(58,intTwo)
(59,data = dataBadBuffer)
(60,100)
(61,100*sizeof(twoIntsStruct)
(62,data)
(63,for (i = 0; i < 100; i++)
(64,memmove(data, source, 100*sizeof(twoIntsStruct)
(65,globalReturnsTrueOrFalse()
(66,0)
(67,&data[0])
(68,RET)
(69,* dataBadBuffer = (twoIntsStruct *)
(70,i)
(71,source[i])
(72,* dataGoodBuffer = (twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^