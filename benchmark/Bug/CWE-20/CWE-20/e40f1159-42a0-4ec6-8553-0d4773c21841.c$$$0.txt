-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()
{
    int * data;
    data = NULL;
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)malloc(10);
    if (data == NULL) {exit(-1);}
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
48,49
48,50
48,51
50,51
52,53
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
63,65
65,66
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,34,36,41,43,47,49,51,54,58,60,62,64,67,68,72,75,76,80,82
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad(){    int * data;    data = NULL;    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad
{    int * data;    data = NULL;    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(27,11,0)
(12,5,0)
(35,34,0)
(24,30,0)
(30,20,0)
(17,12,0)
(16,0,0)
(32,24,0)
(34,22,0)
(14,12,0)
(19,28,0)
(9,20,0)
(18,11,0)
(24,32,0)
(0,10,0)
(13,31,0)
(33,32,0)
(5,12,0)
(12,31,0)
(1,25,0)
(10,0,0)
(36,24,0)
(24,20,0)
(24,31,0)
(32,25,0)
(0,31,0)
(9,31,0)
(20,11,0)
(28,31,0)
(0,16,0)
(4,30,0)
(8,9,0)
(3,29,0)
(26,20,0)
(23,29,0)
(7,28,0)
(31,0,0)
(5,20,0)
(29,11,0)
(22,6,0)
(2,24,0)
(25,32,0)
(15,16,0)
(22,34,0)
(31,11,0)
(8,5,1)
(1,33,1)
(2,36,1)
(13,29,1)
(25,1,1)
(12,31,1)
(30,4,1)
(9,8,1)
(0,16,1)
(16,15,1)
(32,25,1)
(29,23,1)
(33,2,1)
(7,19,1)
(34,35,1)
(28,7,1)
(22,34,1)
(24,32,1)
(5,12,1)
(23,3,1)
(12,14,1)
(0,10,1)
(21,9,1)
(31,0,1)
(15,13,1)
(4,22,1)
(17,24,1)
(28,31,1)
(24,30,1)
(24,31,1)
(9,31,1)
(35,28,1)
(14,17,1)
(4,28,1)
(36,30,1)
(19,31,1)
(31,0,2)
(35,28,2)
(22,28,2)
(24,31,2)
(34,28,2)
(28,31,2)
(24,30,2)
(12,31,2)
(0,16,2)
(5,12,2)
(22,34,2)
(32,25,2)
(9,31,2)
(24,32,2)
(0,10,2)
-----------------------------------
(0,(int *)
(1,int)
(2,source)
(3,data)
(4,source)
(5,printIntLine(data[0])
(6,)
(7,NULL)
(8,data)
(9,free(data)
(10,int *)
(11,)
(12,data[0])
(13,data)
(14,0)
(15,10)
(16,malloc(10)
(17,data)
(18,if (data == NULL)
(19,data)
(20,)
(21,RET)
(22,exit(-1)
(23,NULL)
(24,memmove(data, source, 10*sizeof(int)
(25,sizeof(int)
(26,source)
(27,data)
(28,data == NULL)
(29,data = NULL)
(30,source[10] = {0})
(31,data = (int *)
(32,10*sizeof(int)
(33,10)
(34,-1)
(35,1)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^