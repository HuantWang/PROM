-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
61,73
61,74
61,75
61,76
61,77
61,78
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
186,191
187,188
189,190
191,192
191,193
192,193
192,194
194,195
196,197
197,198
197,199
198,199
200,201
202,203
202,204
203,204
204,205
204,206
207,208
208,209
208,210
209,210
209,211
211,212
215,216
215,217
216,217
216,218
217,218
217,219
218,219
220,221
222,223
222,224
223,224
226,227
228,229
229,230
229,231
230,231
230,232
231,232
233,234
233,235
234,235
236,237
236,238
237,238
239,240
240,241
240,242
244,245
245,246
245,247
246,247
248,249
248,250
248,251
249,250
251,252
254,255
254,256
255,256
257,258
258,259
259,260
259,261
260,261
261,262
264,265
265,266
265,267
266,267
268,269
268,270
268,271
269,270
271,272
274,275
274,276
275,276
277,278
278,279
279,280
279,281
280,281
281,282
285,286
285,287
286,287
286,288
287,288
289,290
291,292
292,293
293,294
293,295
294,295
296,297
298,299
298,300
299,300
299,301
300,301
302,303
304,305
305,306
306,307
306,308
307,308
309,310
311,312
312,313
-----nextToken-----
2,4,5,7,9,10,15,17,21,23,26,28,29,33,35,38,42,44,47,51,53,57,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,112,117,118,121,123,128,130,134,136,139,143,145,147,152,154,156,158,160,164,167,169,171,173,177,179,181,185,188,190,193,195,199,201,205,206,210,212,213,214,219,221,224,225,227,232,235,238,241,242,243,247,250,252,253,256,262,263,267,270,272,273,276,282,283,284,288,290,295,297,301,303,308,310,313
-----computeFrom-----
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
114,115
114,116
125,126
125,127
149,150
149,151
162,163
162,164
175,176
175,177
183,184
183,185
197,198
197,199
202,203
202,204
208,209
208,210
209,210
209,211
216,217
216,218
217,218
217,219
222,223
222,224
229,230
229,231
233,234
233,235
236,237
236,238
245,246
245,247
259,260
259,261
265,266
265,267
279,280
279,281
286,287
286,288
299,300
299,301
-----guardedBy-----
288,297
301,310
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(70,24,0)
(199,179,0)
(128,95,0)
(97,101,0)
(99,9,0)
(148,22,0)
(21,37,0)
(78,179,0)
(155,28,0)
(120,24,0)
(116,179,0)
(25,138,0)
(23,136,0)
(162,44,0)
(139,28,0)
(36,38,0)
(61,56,0)
(144,164,0)
(51,179,0)
(54,188,0)
(169,40,0)
(5,139,0)
(85,203,0)
(60,122,0)
(86,56,0)
(88,49,0)
(178,65,0)
(67,20,0)
(76,109,0)
(45,148,0)
(136,23,0)
(7,136,0)
(157,163,0)
(18,170,0)
(53,138,0)
(104,201,0)
(182,101,0)
(161,56,0)
(158,101,0)
(181,198,0)
(70,102,0)
(99,170,0)
(136,7,0)
(67,56,0)
(121,179,0)
(73,186,0)
(55,20,0)
(137,140,0)
(57,28,0)
(103,67,0)
(84,164,0)
(17,78,0)
(183,106,0)
(148,28,0)
(19,81,0)
(4,179,0)
(194,52,0)
(64,179,0)
(15,0,0)
(28,179,0)
(176,108,0)
(159,49,0)
(129,179,0)
(39,68,0)
(66,174,0)
(106,122,0)
(96,86,0)
(49,6,0)
(184,111,0)
(181,28,0)
(169,190,0)
(20,67,0)
(95,118,0)
(42,79,0)
(109,164,0)
(92,140,0)
(120,102,0)
(20,179,0)
(38,99,0)
(125,179,0)
(153,188,0)
(6,57,0)
(188,101,0)
(1,101,0)
(99,38,0)
(32,70,0)
(164,109,0)
(53,75,0)
(136,179,0)
(47,181,0)
(118,107,0)
(122,106,0)
(33,50,0)
(105,131,0)
(48,167,0)
(8,161,0)
(57,6,0)
(34,51,0)
(0,81,0)
(38,24,0)
(140,137,0)
(110,143,0)
(40,101,0)
(90,106,0)
(111,179,0)
(146,137,0)
(180,6,0)
(100,161,0)
(38,90,0)
(24,179,0)
(126,81,0)
(132,144,0)
(190,169,0)
(15,39,0)
(29,101,0)
(173,67,0)
(137,164,0)
(86,40,0)
(27,190,0)
(75,179,0)
(55,157,0)
(197,7,0)
(178,6,0)
(101,87,0)
(107,118,0)
(196,15,0)
(35,101,0)
(61,169,0)
(31,155,0)
(150,38,0)
(46,112,0)
(11,39,0)
(192,101,0)
(91,73,0)
(69,55,0)
(141,0,0)
(122,40,0)
(174,44,0)
(174,28,0)
(13,24,0)
(164,137,0)
(44,101,0)
(156,53,0)
(6,179,0)
(190,24,0)
(83,175,0)
(160,155,0)
(175,190,0)
(40,86,0)
(119,201,0)
(102,120,0)
(170,40,0)
(98,107,0)
(102,70,0)
(178,167,0)
(61,78,0)
(10,57,0)
(124,167,0)
(167,101,0)
(62,155,0)
(0,179,0)
(148,44,0)
(82,179,0)
(170,99,0)
(164,28,0)
(149,181,0)
(164,144,0)
(14,157,0)
(58,57,0)
(151,120,0)
(190,175,0)
(195,23,0)
(81,0,0)
(74,111,0)
(94,44,0)
(161,87,0)
(131,186,0)
(77,101,0)
(89,142,0)
(28,155,0)
(186,179,0)
(145,70,0)
(50,90,0)
(166,136,0)
(114,170,0)
(41,61,0)
(37,51,0)
(80,169,0)
(202,101,0)
(2,138,0)
(137,146,0)
(30,28,0)
(72,75,0)
(71,122,0)
(130,101,0)
(198,181,0)
(24,38,0)
(147,171,0)
(43,20,0)
(113,120,0)
(38,6,0)
(177,40,0)
(165,101,0)
(106,90,0)
(170,56,0)
(90,50,0)
(63,198,0)
(134,37,0)
(115,131,0)
(118,203,0)
(90,38,0)
(138,53,0)
(172,107,0)
(118,95,0)
(93,101,0)
(193,178,0)
(49,167,0)
(169,61,0)
(185,57,0)
(3,174,0)
(9,99,0)
(186,73,0)
(201,6,0)
(203,118,0)
(12,139,0)
(81,56,0)
(103,173,1)
(156,138,1)
(66,3,1)
(159,88,1)
(81,126,1)
(137,140,1)
(186,73,1)
(32,145,1)
(36,13,1)
(38,90,1)
(107,98,1)
(37,134,1)
(8,194,1)
(140,92,1)
(144,132,1)
(54,153,1)
(109,76,1)
(33,99,1)
(137,146,1)
(49,167,1)
(39,11,1)
(154,59,1)
(120,24,1)
(88,148,1)
(147,201,1)
(120,151,1)
(174,44,1)
(46,139,1)
(47,109,1)
(86,96,1)
(28,155,1)
(181,28,1)
(180,198,1)
(53,156,1)
(157,14,1)
(30,111,1)
(203,118,1)
(57,28,1)
(141,78,1)
(174,28,1)
(196,16,1)
(13,201,1)
(124,48,1)
(164,28,1)
(55,69,1)
(106,122,1)
(20,67,1)
(15,0,1)
(44,94,1)
(161,56,1)
(100,161,1)
(21,136,1)
(49,6,1)
(57,185,1)
(184,203,1)
(92,84,1)
(90,50,1)
(83,27,1)
(104,119,1)
(185,58,1)
(12,5,1)
(94,162,1)
(25,51,1)
(70,24,1)
(86,56,1)
(40,86,1)
(61,169,1)
(193,49,1)
(3,176,1)
(11,15,1)
(58,10,1)
(102,120,1)
(5,28,1)
(190,175,1)
(78,17,1)
(161,8,1)
(67,103,1)
(14,55,1)
(122,71,1)
(17,61,1)
(181,149,1)
(81,56,1)
(15,196,1)
(178,6,1)
(178,167,1)
(91,131,1)
(60,183,1)
(8,123,1)
(38,6,1)
(188,54,1)
(43,16,1)
(51,34,1)
(136,7,1)
(151,113,1)
(174,66,1)
(3,147,1)
(111,74,1)
(3,110,1)
(3,42,1)
(76,164,1)
(113,70,1)
(198,63,1)
(194,123,1)
(75,72,1)
(164,144,1)
(110,109,1)
(128,107,1)
(139,12,1)
(167,124,1)
(98,172,1)
(170,56,1)
(84,186,1)
(175,83,1)
(145,24,1)
(201,6,1)
(74,184,1)
(3,89,1)
(99,170,1)
(166,23,1)
(80,41,1)
(96,177,1)
(3,154,1)
(170,18,1)
(0,81,1)
(118,107,1)
(160,62,1)
(49,159,1)
(150,90,1)
(99,9,1)
(73,91,1)
(102,70,1)
(172,40,1)
(190,24,1)
(105,115,1)
(23,195,1)
(67,56,1)
(169,40,1)
(139,28,1)
(59,20,1)
(90,106,1)
(42,198,1)
(38,150,1)
(138,2,1)
(172,154,1)
(34,37,1)
(136,23,1)
(148,44,1)
(24,38,1)
(178,193,1)
(149,47,1)
(53,138,1)
(148,28,1)
(154,157,1)
(38,99,1)
(45,174,1)
(118,95,1)
(176,102,1)
(177,167,1)
(16,0,1)
(162,188,1)
(201,104,1)
(55,20,1)
(183,50,1)
(123,49,1)
(134,21,1)
(132,137,1)
(6,57,1)
(18,114,1)
(95,128,1)
(148,45,1)
(41,102,1)
(173,43,1)
(197,166,1)
(31,160,1)
(2,25,1)
(198,181,1)
(164,137,1)
(126,19,1)
(48,44,1)
(88,174,1)
(115,75,1)
(72,53,1)
(169,190,1)
(10,180,1)
(131,105,1)
(89,203,1)
(63,181,1)
(85,118,1)
(109,164,1)
(7,197,1)
(123,178,1)
(203,85,1)
(155,31,1)
(122,40,1)
(43,39,1)
(3,46,1)
(195,139,1)
(114,36,1)
(170,40,1)
(61,56,1)
(69,59,1)
(19,141,1)
(62,30,1)
(71,60,1)
(70,32,1)
(50,33,1)
(27,80,1)
(119,6,1)
(38,90,2)
(118,95,2)
(174,28,2)
(141,102,2)
(51,139,2)
(61,169,2)
(178,49,2)
(46,139,2)
(155,203,2)
(193,49,2)
(178,6,2)
(140,139,2)
(67,56,2)
(170,40,2)
(39,16,2)
(27,102,2)
(136,139,2)
(57,28,2)
(49,6,2)
(196,16,2)
(100,161,2)
(84,139,2)
(120,70,2)
(107,154,2)
(169,40,2)
(103,102,2)
(203,118,2)
(61,102,2)
(122,201,2)
(99,170,2)
(45,174,2)
(203,154,2)
(137,139,2)
(134,139,2)
(6,57,2)
(170,201,2)
(201,6,2)
(126,102,2)
(72,139,2)
(6,198,2)
(23,139,2)
(2,139,2)
(98,154,2)
(148,44,2)
(69,59,2)
(95,154,2)
(190,24,2)
(109,164,2)
(173,102,2)
(14,59,2)
(90,201,2)
(128,154,2)
(38,6,2)
(139,28,2)
(13,201,2)
(164,144,2)
(0,81,2)
(43,102,2)
(75,139,2)
(151,70,2)
(36,201,2)
(190,175,2)
(62,203,2)
(18,201,2)
(174,44,2)
(30,203,2)
(186,139,2)
(136,23,2)
(10,198,2)
(118,107,2)
(0,102,2)
(194,123,2)
(99,9,2)
(111,203,2)
(172,154,2)
(106,201,2)
(25,139,2)
(38,201,2)
(150,201,2)
(198,109,2)
(136,7,2)
(67,102,2)
(70,201,2)
(24,201,2)
(91,139,2)
(73,139,2)
(24,38,2)
(86,56,2)
(78,102,2)
(119,198,2)
(58,198,2)
(90,106,2)
(60,201,2)
(137,146,2)
(169,190,2)
(53,139,2)
(89,203,2)
(19,102,2)
(34,139,2)
(131,139,2)
(181,28,2)
(7,139,2)
(102,70,2)
(160,203,2)
(33,201,2)
(5,203,2)
(21,139,2)
(47,109,2)
(170,56,2)
(42,198,2)
(41,102,2)
(70,24,2)
(169,102,2)
(16,102,2)
(138,139,2)
(49,167,2)
(31,203,2)
(80,102,2)
(57,198,2)
(38,99,2)
(20,102,2)
(139,203,2)
(102,120,2)
(110,109,2)
(195,139,2)
(166,139,2)
(118,154,2)
(71,201,2)
(185,198,2)
(137,140,2)
(184,203,2)
(161,56,2)
(11,16,2)
(104,198,2)
(28,155,2)
(122,40,2)
(85,154,2)
(201,198,2)
(81,102,2)
(90,50,2)
(55,20,2)
(83,102,2)
(28,203,2)
(114,201,2)
(37,139,2)
(156,139,2)
(148,28,2)
(50,201,2)
(55,59,2)
(148,174,2)
(154,102,2)
(109,139,2)
(197,139,2)
(92,139,2)
(63,109,2)
(180,198,2)
(40,86,2)
(115,139,2)
(164,137,2)
(181,109,2)
(190,102,2)
(53,138,2)
(32,201,2)
(99,201,2)
(132,139,2)
(145,201,2)
(198,181,2)
(113,70,2)
(157,59,2)
(176,102,2)
(164,139,2)
(178,167,2)
(17,102,2)
(81,56,2)
(183,201,2)
(164,28,2)
(144,139,2)
(12,203,2)
(20,67,2)
(147,201,2)
(186,73,2)
(15,16,2)
(102,201,2)
(106,122,2)
(61,56,2)
(175,102,2)
(74,203,2)
(15,0,2)
(76,139,2)
(120,24,2)
(105,139,2)
(59,102,2)
(149,109,2)
-----------------------------------
(0,replace = strchr(data, '\\\\r')
(1,do)
(2,sin_addr)
(3,listenSocket)
(4,if (WSAStartup(MAKEWORD(2,2)
(5,listenSocket)
(6,acceptSocket = accept(listenSocket, NULL, NULL)
(7,sizeof(service)
(8,data)
(9,char *)
(10,listenSocket)
(11,\'\\\\0\')
(12,INVALID_SOCKET)
(13,recvResult)
(14,'\\\\0')
(15,*replace)
(16,replace)
(17,\'\\\\0\')
(18,dataLen)
(19,data)
(20,replace = strchr(data, '\\\\n')
(21,service)
(22,)
(23,&service)
(24,recvResult = recv(acceptSocket, (char *)
(25,service)
(26,'\\\\0')
(27,recvResult)
(28,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(29,if (acceptSocket != INVALID_SOCKET)
(30,listenSocket)
(31,IPPROTO_TCP)
(32,SOCKET_ERROR)
(33,char)
(34,AF_INET)
(35,dataLen)
(36,acceptSocket)
(37,service.sin_family)
(38,recv(acceptSocket, (char *)
(39,*replace = '\\\\0')
(40,dataLen = strlen(data)
(41,data)
(42,break;)
(43,replace)
(44,listenSocket = INVALID_SOCKET)
(45,listenSocket)
(46,break;)
(47,listenSocket)
(48,acceptSocket)
(49,acceptSocket != INVALID_SOCKET)
(50,sizeof(char)
(51,service.sin_family = AF_INET)
(52,)
(53,service.sin_addr.s_addr)
(54,0)
(55,*replace)
(56,char * data)
(57,accept(listenSocket, NULL, NULL)
(58,NULL)
(59,replace)
(60,dataLen)
(61,data[dataLen + recvResult / sizeof(char)
(62,AF_INET)
(63,SOCKET_ERROR)
(64,if (replace)
(65,)
(66,INVALID_SOCKET)
(67,strchr(data, \'\\\\n\')
(68,)
(69,replace)
(70,recvResult == SOCKET_ERROR)
(71,1)
(72,INADDR_ANY)
(73,htons(TCP_PORT)
(74,1)
(75,service.sin_addr.s_addr = INADDR_ANY)
(76,SOCKET_ERROR)
(77,wsaDataInit)
(78,data[dataLen + recvResult / sizeof(char)
(79,)
(80,dataLen)
(81,strchr(data, \'\\\\r\')
(82,if (listenSocket == INVALID_SOCKET)
(83,char)
(84,listenSocket)
(85,NO_ERROR)
(86,strlen(data)
(87,)
(88,acceptSocket)
(89,break;)
(90,sizeof(char)
(91,TCP_PORT)
(92,service)
(93,replace)
(94,INVALID_SOCKET)
(95,&wsaData)
(96,data)
(97,if (listenSocket != INVALID_SOCKET)
(98,2)
(99,(char *)
(100,RET)
(101,)
(102,recvResult == SOCKET_ERROR || recvResult == 0)
(103,'\\\\n')
(104,SOCKET_ERROR)
(105,sin_port)
(106,100 - dataLen - 1)
(107,MAKEWORD(2,2)
(108,)
(109,bind(listenSocket, (struct sockaddr*)
(110,break;)
(111,wsaDataInit = 1)
(112,)
(113,recvResult)
(114,data)
(115,service)
(116,if (bind(listenSocket, (struct sockaddr*)
(117,strchr(data, '\\\\r')
(118,WSAStartup(MAKEWORD(2,2)
(119,acceptSocket)
(120,recvResult == 0)
(121,if (listen(listenSocket, LISTEN_BACKLOG)
(122,dataLen - 1)
(123,wsaDataInit)
(124,INVALID_SOCKET)
(125,if (recvResult == SOCKET_ERROR || recvResult == 0)
(126,'\\\\r')
(127,\'\\\\0\')
(128,wsaData)
(129,if (acceptSocket == SOCKET_ERROR)
(130,acceptSocket)
(131,service.sin_port)
(132,service)
(133,\'\\\\n\')
(134,sin_family)
(135,replace = strchr(data, \'\\\\n\')
(136,memset(&service, 0, sizeof(service)
(137,(struct sockaddr*)
(138,service.sin_addr)
(139,listenSocket == INVALID_SOCKET)
(140,&service)
(141,replace)
(142,)
(143,)
(144,sizeof(service)
(145,recvResult)
(146,struct sockaddr*)
(147,break;)
(148,CLOSE_SOCKET(listenSocket)
(149,LISTEN_BACKLOG)
(150,0)
(151,0)
(152,replace = strchr(data, \'\\\\r\')
(153,wsaDataInit)
(154,0)
(155,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(156,s_addr)
(157,*replace = '\\\\0')
(158,service)
(159,INVALID_SOCKET)
(160,SOCK_STREAM)
(161,return data;)
(162,listenSocket)
(163,)
(164,bind(listenSocket, (struct sockaddr*)
(165,if (wsaDataInit)
(166,0)
(167,acceptSocket = INVALID_SOCKET)
(168,*replace = \'\\\\0\')
(169,dataLen + recvResult / sizeof(char)
(170,data + dataLen)
(171,)
(172,2)
(173,data)
(174,listenSocket != INVALID_SOCKET)
(175,sizeof(char)
(176,break;)
(177,dataLen)
(178,CLOSE_SOCKET(acceptSocket)
(179,)
(180,acceptSocket)
(181,listen(listenSocket, LISTEN_BACKLOG)
(182,wsaData)
(183,100)
(184,wsaDataInit)
(185,NULL)
(186,service.sin_port = htons(TCP_PORT)
(187,strchr(data, '\\\\n')
(188,wsaDataInit = 0)
(189,'\\\\0')
(190,recvResult / sizeof(char)
(191,*replace = \'\\\\0\')
(192,recvResult)
(193,acceptSocket)
(194,WSACleanup()
(195,service)
(196,replace)
(197,service)
(198,listen(listenSocket, LISTEN_BACKLOG)
(199,if (replace)
(200,\'\\\\r\')
(201,acceptSocket == SOCKET_ERROR)
(202,listenSocket)
(203,WSAStartup(MAKEWORD(2,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^