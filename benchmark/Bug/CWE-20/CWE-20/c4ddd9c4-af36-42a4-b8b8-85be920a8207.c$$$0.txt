-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
25,26
26,27
26,28
28,29
28,30
31,32
31,33
31,34
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
53,55
54,55
56,57
57,58
57,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
75,76
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,9,11,15,16,20,23,27,29,30,34,37,39,44,47,49,52,55,58,59,63,65,70,72,76,78,80,84,86,90,92,97,98
-----computeFrom-----
13,14
13,15
18,19
18,20
32,33
32,34
42,43
42,44
53,54
53,55
61,62
61,63
-----guardedBy-----
39,80
34,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,26,0)
(40,14,0)
(20,7,0)
(5,20,0)
(26,18,0)
(28,38,0)
(42,17,0)
(3,8,0)
(16,20,0)
(2,34,0)
(26,22,0)
(8,7,0)
(23,40,0)
(13,2,0)
(29,20,0)
(0,7,0)
(25,39,0)
(27,8,0)
(35,17,0)
(25,21,0)
(0,20,0)
(19,29,0)
(18,26,0)
(5,7,0)
(32,26,0)
(6,7,0)
(41,21,0)
(36,38,0)
(2,38,0)
(26,2,0)
(16,18,0)
(16,10,0)
(20,16,0)
(33,29,0)
(4,5,0)
(1,28,0)
(34,2,0)
(31,36,0)
(12,20,0)
(37,28,0)
(21,25,0)
(11,0,0)
(43,36,0)
(15,38,0)
(8,20,0)
(10,16,0)
(42,2,0)
(17,42,0)
(9,42,0)
(24,22,0)
(18,16,0)
(27,3,1)
(8,27,1)
(26,22,1)
(3,25,1)
(24,32,1)
(40,23,1)
(22,24,1)
(30,0,1)
(23,42,1)
(5,20,1)
(26,2,1)
(0,20,1)
(34,13,1)
(0,11,1)
(11,5,1)
(29,20,1)
(21,41,1)
(36,31,1)
(33,19,1)
(25,21,1)
(17,35,1)
(30,40,1)
(19,20,1)
(35,9,1)
(32,12,1)
(2,34,1)
(42,17,1)
(4,8,1)
(41,29,1)
(9,2,1)
(8,20,1)
(3,29,1)
(13,36,1)
(18,26,1)
(12,42,1)
(16,10,1)
(42,2,1)
(5,4,1)
(20,16,1)
(16,18,1)
(31,43,1)
(29,33,1)
(16,42,2)
(24,42,2)
(26,42,2)
(2,34,2)
(25,21,2)
(21,29,2)
(16,10,2)
(19,42,2)
(32,42,2)
(22,42,2)
(8,20,2)
(20,42,2)
(0,42,2)
(0,20,2)
(18,26,2)
(41,29,2)
(40,42,2)
(5,20,2)
(25,29,2)
(18,42,2)
(42,17,2)
(33,42,2)
(27,42,2)
(8,42,2)
(11,42,2)
(3,42,2)
(42,2,2)
(20,16,2)
(26,22,2)
(29,42,2)
(4,42,2)
(16,18,2)
(26,2,2)
(12,42,2)
(5,42,2)
(29,20,2)
(23,42,2)
-----------------------------------
(0,free(myString)
(1,if (data > strlen(HELLO_STRING)
(2,data = rand()
(3,myString)
(4,myString)
(5,printLine(myString)
(6,if (myString == NULL)
(7,)
(8,strcpy(myString, HELLO_STRING)
(9,data)
(10,char *)
(11,myString)
(12,myString)
(13,data)
(14,)
(15,data)
(16,(char *)
(17,strlen(HELLO_STRING)
(18,malloc(data*sizeof(char)
(19,myString)
(20,myString = (char *)
(21,-1)
(22,sizeof(char)
(23,"Input is less than the length of the source string")
(24,char)
(25,exit(-1)
(26,data*sizeof(char)
(27,HELLO_STRING)
(28,)
(29,myString == NULL)
(30,RET)
(31,0)
(32,data)
(33,NULL)
(34,rand()
(35,HELLO_STRING)
(36,data = 0)
(37,myString)
(38,)
(39,)
(40,printLine("Input is less than the length of the source string")
(41,1)
(42,data > strlen(HELLO_STRING)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^