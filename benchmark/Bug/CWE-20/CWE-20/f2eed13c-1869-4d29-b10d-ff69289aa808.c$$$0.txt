-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(1,46,0)
(4,25,0)
(37,15,0)
(31,22,0)
(43,8,0)
(38,32,0)
(5,15,0)
(36,26,0)
(16,9,0)
(39,46,0)
(12,30,0)
(40,0,0)
(41,46,0)
(27,46,0)
(22,9,0)
(15,24,0)
(26,17,0)
(26,22,0)
(19,39,0)
(45,22,0)
(15,22,0)
(25,1,0)
(28,1,0)
(17,23,0)
(25,17,0)
(10,9,0)
(32,22,0)
(7,9,0)
(1,22,0)
(11,1,0)
(0,8,0)
(5,24,0)
(1,17,0)
(32,46,0)
(2,5,0)
(15,46,0)
(0,22,0)
(26,46,0)
(21,8,0)
(14,17,0)
(44,24,0)
(39,22,0)
(35,32,0)
(13,15,0)
(8,33,0)
(8,0,0)
(46,42,0)
(20,18,0)
(39,24,0)
(30,3,0)
(39,22,1)
(0,22,1)
(40,21,1)
(5,15,1)
(11,26,1)
(1,22,1)
(32,46,1)
(22,31,1)
(32,38,1)
(29,25,1)
(46,27,1)
(31,45,1)
(4,1,1)
(19,32,1)
(35,6,1)
(41,34,1)
(29,5,1)
(12,32,1)
(26,22,1)
(27,41,1)
(25,4,1)
(39,19,1)
(2,15,1)
(39,46,1)
(0,40,1)
(6,8,1)
(28,11,1)
(26,46,1)
(29,30,1)
(5,2,1)
(36,6,1)
(1,46,1)
(21,43,1)
(6,46,1)
(8,0,1)
(15,46,1)
(34,22,1)
(15,37,1)
(15,22,1)
(26,36,1)
(38,35,1)
(32,22,1)
(25,1,1)
(1,28,1)
(37,13,1)
(13,39,1)
(30,12,1)
(43,34,1)
(40,34,2)
(25,6,2)
(32,46,2)
(28,6,2)
(26,46,2)
(13,32,2)
(0,22,2)
(43,34,2)
(1,46,2)
(27,34,2)
(30,32,2)
(15,32,2)
(26,22,2)
(37,32,2)
(11,6,2)
(39,32,2)
(8,0,2)
(35,6,2)
(5,15,2)
(41,34,2)
(1,22,2)
(38,6,2)
(0,34,2)
(4,6,2)
(39,46,2)
(12,32,2)
(1,6,2)
(39,22,2)
(2,32,2)
(25,1,2)
(19,32,2)
(46,34,2)
(36,6,2)
(32,6,2)
(5,32,2)
(15,46,2)
(21,34,2)
(15,22,2)
(32,22,2)
(8,34,2)
(26,6,2)
-----------------------------------
(0,&data)
(1,result = data)
(2,result)
(3,)
(4,result)
(5,printUnsignedLine(result)
(6,globalReturnsTrueOrFalse()
(7,if(globalReturnsTrueOrFalse()
(8,fscanf (stdin, "%u", &data)
(9,)
(10,if(globalReturnsTrueOrFalse()
(11,result)
(12,"data value is too large to perform arithmetic safely.")
(13,result)
(14,result)
(15,result = data)
(16,data)
(17,)
(18,)
(19,data)
(20,if (data < UINT_MAX)
(21,"%u")
(22,data = 0)
(23,)
(24,)
(25,printUnsignedLine(result)
(26,data++)
(27,2)
(28,data)
(29,RET)
(30,printLine("data value is too large to perform arithmetic safely.")
(31,0)
(32,data < UINT_MAX)
(33,)
(34,globalReturnsTrueOrFalse()
(35,data)
(36,data)
(37,data)
(38,UINT_MAX)
(39,data++)
(40,data)
(41,data)
(42,)
(43,stdin)
(44,result)
(45,data)
(46,data = 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^