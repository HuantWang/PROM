-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_15_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    switch(6)
    {
    case 6:
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
31,32
31,33
31,34
31,35
31,36
31,37
32,33
34,35
35,36
35,37
36,37
38,39
42,43
43,44
43,45
44,45
48,49
48,50
48,51
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
64,68
65,66
66,67
66,68
67,68
70,71
70,72
71,72
74,75
75,76
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
84,85
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
98,99
98,100
98,101
99,100
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
119,120
120,121
120,122
121,122
121,123
122,123
124,125
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
136,137
136,138
137,138
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,33,37,39,40,41,45,46,47,52,54,56,61,63,68,69,72,73,76,83,85,86,87,93,95,96,97,102,104,109,110,113,114,117,123,125,128,130,134,138,139
-----computeFrom-----
35,36
35,37
66,67
66,68
70,71
70,72
79,80
79,81
89,90
89,91
107,108
107,109
111,112
111,113
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_15_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_15_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_15_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(14,20,0)
(58,29,0)
(48,34,0)
(9,46,0)
(28,50,0)
(19,43,0)
(22,4,0)
(47,49,0)
(40,32,0)
(38,4,0)
(22,13,0)
(1,33,0)
(31,20,0)
(42,41,0)
(20,13,0)
(36,57,0)
(15,32,0)
(49,53,0)
(54,50,0)
(26,13,0)
(60,1,0)
(1,41,0)
(6,50,0)
(24,22,0)
(44,41,0)
(33,1,0)
(11,34,0)
(4,58,0)
(18,50,0)
(49,47,0)
(34,23,0)
(68,37,0)
(25,49,0)
(0,47,0)
(61,37,0)
(3,43,0)
(23,32,0)
(62,32,0)
(37,41,0)
(8,44,0)
(10,32,0)
(66,1,0)
(67,58,0)
(27,40,0)
(57,54,0)
(17,34,0)
(30,43,0)
(52,53,0)
(65,23,0)
(37,33,0)
(7,50,0)
(11,3,0)
(16,44,0)
(12,41,0)
(63,22,0)
(4,22,0)
(45,57,0)
(39,47,0)
(35,23,0)
(34,11,0)
(2,13,0)
(56,41,0)
(46,13,0)
(47,13,0)
(53,29,0)
(64,54,0)
(59,42,0)
(37,23,0)
(43,54,0)
(33,51,0)
(3,11,0)
(5,32,0)
(41,12,1)
(22,24,1)
(24,63,1)
(26,10,1)
(65,21,1)
(3,11,1)
(16,41,1)
(31,46,1)
(31,13,1)
(47,0,1)
(17,48,1)
(26,5,1)
(27,21,1)
(34,23,1)
(68,61,1)
(39,20,1)
(42,59,1)
(22,13,1)
(67,4,1)
(53,52,1)
(8,16,1)
(47,13,1)
(2,26,1)
(46,13,1)
(11,34,1)
(37,23,1)
(38,22,1)
(20,14,1)
(42,41,1)
(52,49,1)
(66,60,1)
(25,47,1)
(5,23,1)
(12,56,1)
(34,17,1)
(37,41,1)
(16,42,1)
(48,44,1)
(44,41,1)
(33,1,1)
(4,38,1)
(9,58,1)
(55,3,1)
(60,37,1)
(10,40,1)
(44,8,1)
(13,2,1)
(63,53,1)
(46,9,1)
(0,39,1)
(49,47,1)
(14,31,1)
(37,68,1)
(4,22,1)
(35,65,1)
(59,33,1)
(20,13,1)
(40,27,1)
(56,20,1)
(58,67,1)
(23,35,1)
(1,66,1)
(1,41,1)
(61,44,1)
(49,25,1)
(24,20,2)
(44,44,2)
(52,20,2)
(16,44,2)
(68,44,2)
(37,23,2)
(49,20,2)
(35,21,2)
(42,44,2)
(37,41,2)
(22,13,2)
(58,20,2)
(20,13,2)
(46,20,2)
(34,23,2)
(60,44,2)
(33,1,2)
(25,20,2)
(44,41,2)
(20,20,2)
(22,20,2)
(0,20,2)
(65,21,2)
(37,44,2)
(14,20,2)
(1,41,2)
(10,21,2)
(61,44,2)
(33,44,2)
(53,20,2)
(47,13,2)
(9,20,2)
(67,20,2)
(38,20,2)
(27,21,2)
(46,13,2)
(47,20,2)
(40,21,2)
(8,44,2)
(49,47,2)
(4,20,2)
(42,41,2)
(5,21,2)
(3,11,2)
(23,21,2)
(4,22,2)
(66,44,2)
(31,20,2)
(59,44,2)
(1,44,2)
(11,34,2)
(39,20,2)
(63,20,2)
-----------------------------------
(0,i)
(1,source[i])
(2,0)
(3,printStructLine(&data[0])
(4,source[i].intTwo)
(5,break;)
(6,data)
(7,dataGoodBuffer)
(8,100)
(9,i)
(10,break;)
(11,&data[0])
(12,0)
(13,i = 0)
(14,100)
(15,default:)
(16,i)
(17,0)
(18,dataBadBuffer)
(19,for (i = 0; i < 100; i++)
(20,i < 100)
(21,6)
(22,source[i])
(23,data = dataBadBuffer)
(24,i)
(25,intOne)
(26,i)
(27,"Benign, fixed string")
(28,switch(6)
(29,)
(30,i)
(31,i)
(32,)
(33,data[i] = source[i])
(34,data[0])
(35,dataBadBuffer)
(36,for (i = 0; i < 100; i++)
(37,data[i])
(38,intTwo)
(39,source)
(40,printLine("Benign, fixed string")
(41,i = 0)
(42,i++)
(43,)
(44,i < 100)
(45,i)
(46,i++)
(47,source[i])
(48,data)
(49,source[i].intOne)
(50,)
(51,)
(52,0)
(53,source[i].intOne = 0)
(54,)
(55,RET)
(56,i)
(57,)
(58,source[i].intTwo = 0)
(59,i)
(60,source)
(61,data)
(62,case 6:)
(63,source)
(64,source)
(65,data)
(66,i)
(67,0)
(68,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^