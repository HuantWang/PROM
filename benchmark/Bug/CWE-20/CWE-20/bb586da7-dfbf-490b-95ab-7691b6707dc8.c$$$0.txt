-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_53_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink
data
data
-----joern-----
(46,2,0)
(56,22,0)
(44,12,0)
(33,58,0)
(62,6,0)
(16,17,0)
(57,53,0)
(65,43,0)
(54,37,0)
(61,28,0)
(29,16,0)
(36,57,0)
(70,26,0)
(19,9,0)
(60,32,0)
(21,51,0)
(22,9,0)
(9,45,0)
(63,41,0)
(7,37,0)
(6,37,0)
(69,22,0)
(22,69,0)
(26,1,0)
(39,53,0)
(34,58,0)
(26,32,0)
(52,20,0)
(13,0,0)
(21,58,0)
(2,15,0)
(35,12,0)
(3,26,0)
(58,28,0)
(50,14,0)
(48,64,0)
(43,37,0)
(45,9,0)
(12,40,0)
(64,37,0)
(12,15,0)
(25,69,0)
(0,59,0)
(1,26,0)
(10,6,0)
(45,41,0)
(9,22,0)
(57,32,0)
(38,41,0)
(42,21,0)
(22,28,0)
(47,15,0)
(59,0,0)
(68,28,0)
(32,43,0)
(0,32,0)
(55,27,0)
(23,40,0)
(1,21,0)
(31,57,0)
(58,32,0)
(66,59,0)
(2,28,0)
(41,15,0)
(8,0,0)
(15,2,0)
(28,37,0)
(67,28,0)
(24,51,0)
(49,43,0)
(20,18,0)
(61,32,0)
(69,15,0)
(21,1,0)
(28,6,0)
(53,17,0)
(32,61,0)
(57,28,0)
(58,21,0)
(1,30,0)
(40,28,0)
(4,61,0)
(40,12,0)
(40,20,0)
(64,28,0)
(41,45,0)
(51,21,0)
(15,14,0)
(5,69,0)
(30,1,0)
(41,15,1)
(9,19,1)
(53,39,1)
(25,5,1)
(47,51,1)
(70,58,1)
(58,33,1)
(2,28,1)
(48,53,1)
(36,16,1)
(1,30,1)
(2,46,1)
(42,1,1)
(64,28,1)
(45,9,1)
(8,13,1)
(31,36,1)
(61,4,1)
(45,41,1)
(60,28,1)
(22,69,1)
(63,38,1)
(48,45,1)
(51,21,1)
(68,67,1)
(56,41,1)
(21,58,1)
(26,3,1)
(57,31,1)
(58,32,1)
(28,68,1)
(51,24,1)
(19,22,1)
(57,28,1)
(58,28,1)
(59,66,1)
(61,28,1)
(15,2,1)
(67,6,1)
(40,12,1)
(64,48,1)
(44,35,1)
(69,15,1)
(21,42,1)
(24,21,1)
(23,45,1)
(20,52,1)
(1,26,1)
(66,0,1)
(26,32,1)
(29,51,1)
(11,64,1)
(48,20,1)
(12,15,1)
(0,8,1)
(34,59,1)
(40,28,1)
(57,32,1)
(52,40,1)
(0,32,1)
(16,29,1)
(4,60,1)
(9,22,1)
(12,44,1)
(62,10,1)
(3,70,1)
(48,59,1)
(38,15,1)
(21,1,1)
(6,62,1)
(13,32,1)
(39,57,1)
(5,56,1)
(46,47,1)
(28,6,1)
(22,28,1)
(35,23,1)
(32,61,1)
(33,34,1)
(41,63,1)
(59,0,1)
(69,25,1)
(40,28,2)
(64,28,2)
(42,59,2)
(23,45,2)
(25,41,2)
(24,59,2)
(15,51,2)
(22,28,2)
(38,51,2)
(1,59,2)
(26,59,2)
(45,41,2)
(5,41,2)
(21,59,2)
(57,32,2)
(16,51,2)
(59,0,2)
(12,45,2)
(46,51,2)
(45,9,2)
(40,12,2)
(57,51,2)
(1,26,2)
(1,30,2)
(58,28,2)
(70,59,2)
(2,28,2)
(58,32,2)
(51,59,2)
(35,45,2)
(53,51,2)
(44,45,2)
(34,59,2)
(61,28,2)
(31,51,2)
(21,58,2)
(26,32,2)
(22,69,2)
(9,22,2)
(19,41,2)
(2,51,2)
(69,41,2)
(22,41,2)
(3,59,2)
(12,15,2)
(29,51,2)
(40,45,2)
(39,51,2)
(33,59,2)
(58,59,2)
(28,6,2)
(63,51,2)
(32,61,2)
(57,28,2)
(56,41,2)
(0,32,2)
(52,45,2)
(41,15,2)
(51,21,2)
(21,1,2)
(9,41,2)
(36,51,2)
(47,51,2)
(15,2,2)
(41,51,2)
(69,15,2)
(45,51,2)
(20,45,2)
-----------------------------------
(0,100-dataLen)
(1,(int)
(2,strlen(data)
(3,dataLen)
(4,data)
(5,dataLen)
(6,dataBuffer[100] = COMMAND_ARG2)
(7,data)
(8,dataLen)
(9,data[dataLen-1] == \\\'\\\\n\\\')
(10,dataBuffer)
(11,RET)
(12,dataLen-1)
(13,100)
(14,)
(15,dataLen = strlen(data)
(16,printLine("fgets()
(17,)
(18,)
(19,\\\'\\\\n\\\')
(20,data[dataLen-1] = \\\'\\\\0\\\')
(21,fgets(data+dataLen, (int)
(22,data[dataLen-1])
(23,data)
(24,NULL)
(25,1)
(26,100-dataLen)
(27,)
(28,data = dataBuffer)
(29,"fgets()
(30,int)
(31,dataLen)
(32,dataLen = strlen(data)
(33,dataLen)
(34,data)
(35,dataLen)
(36,data)
(37,)
(38,dataLen)
(39,\\\'\\\\0\\\')
(40,data[dataLen-1])
(41,dataLen > 0)
(42,stdin)
(43,)
(44,1)
(45,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(46,data)
(47,dataLen)
(48,data)
(49,if (100-dataLen > 1)
(50,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(51,fgets(data+dataLen, (int)
(52,\\\'\\\\0\\\')
(53,data[dataLen] = \\\'\\\\0\\\')
(54,dataBuffer)
(55,if (fgets(data+dataLen, (int)
(56,data)
(57,data[dataLen])
(58,data+dataLen)
(59,100-dataLen > 1)
(60,dataLen)
(61,strlen(data)
(62,COMMAND_ARG2)
(63,0)
(64,CWE78_OS_Command_Injection__char_console_w32_execv_53b_badSink(data)
(65,dataLen)
(66,1)
(67,data)
(68,dataBuffer)
(69,dataLen-1)
(70,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^