-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* FLAW: Use a small buffer */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    memset(data, 'A', 50-1); /* fill with 'A's */
    data[50-1] = '\0'; /* null terminate */
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
63,64
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,64
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    return data;}
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
return data;
data
data
-----joern-----
(9,33,0)
(33,8,0)
(29,1,0)
(1,33,0)
(22,17,0)
(0,4,0)
(19,13,0)
(34,9,0)
(1,17,0)
(9,28,0)
(7,1,0)
(22,33,0)
(11,13,0)
(33,9,0)
(2,22,0)
(15,16,0)
(22,8,0)
(35,20,0)
(16,15,0)
(24,10,0)
(33,17,0)
(5,12,0)
(23,8,0)
(14,23,0)
(20,33,0)
(3,10,0)
(20,17,0)
(28,26,0)
(12,10,0)
(12,8,0)
(26,4,0)
(20,23,0)
(20,13,0)
(4,26,0)
(26,28,0)
(18,12,0)
(32,8,0)
(10,12,0)
(12,33,0)
(31,16,0)
(28,9,0)
(15,30,0)
(13,20,0)
(25,33,0)
(9,34,0)
(6,26,0)
(12,17,0)
(27,22,0)
(26,4,1)
(12,17,1)
(15,16,1)
(22,33,1)
(20,33,1)
(27,23,1)
(13,11,1)
(35,12,1)
(1,17,1)
(1,33,1)
(33,17,1)
(11,19,1)
(22,27,1)
(16,31,1)
(1,29,1)
(12,10,1)
(7,33,1)
(20,17,1)
(6,25,1)
(24,5,1)
(12,33,1)
(22,17,1)
(9,28,1)
(29,7,1)
(3,24,1)
(20,13,1)
(28,26,1)
(4,0,1)
(18,1,1)
(18,15,1)
(2,22,1)
(0,6,1)
(33,9,1)
(19,35,1)
(14,20,1)
(10,3,1)
(9,34,1)
(5,18,1)
(31,1,1)
(23,14,1)
(22,17,2)
(20,17,2)
(1,33,2)
(9,34,2)
(16,1,2)
(22,33,2)
(15,1,2)
(12,33,2)
(2,22,2)
(1,17,2)
(12,10,2)
(33,9,2)
(33,17,2)
(26,4,2)
(20,13,2)
(20,33,2)
(31,1,2)
(12,17,2)
(15,16,2)
(9,28,2)
(28,26,2)
-----------------------------------
(0,char)
(1,data == NULL)
(2,RET)
(3,1)
(4,sizeof(char)
(5,'A')
(6,50)
(7,data)
(8,)
(9,(char *)
(10,50-1)
(11,1)
(12,memset(data, 'A', 50-1)
(13,50-1)
(14,'\\\\0')
(15,exit(-1)
(16,-1)
(17,char * data)
(18,data)
(19,50)
(20,data[50-1])
(21,memset(data, \'A\', 50-1)
(22,return data;)
(23,data[50-1] = '\\\\0')
(24,50)
(25,data)
(26,50*sizeof(char)
(27,data)
(28,malloc(50*sizeof(char)
(29,NULL)
(30,)
(31,1)
(32,if (data == NULL)
(33,data = (char *)
(34,char *)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^