-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,26,0)
(31,32,0)
(11,6,0)
(14,47,0)
(51,16,0)
(1,50,0)
(16,32,0)
(47,36,0)
(19,24,0)
(42,0,0)
(46,40,0)
(26,19,0)
(22,5,0)
(18,36,0)
(31,50,0)
(9,31,0)
(5,22,0)
(7,13,0)
(7,40,0)
(15,17,0)
(39,31,0)
(8,6,0)
(1,32,0)
(48,2,0)
(17,41,0)
(37,1,0)
(12,27,0)
(19,26,0)
(35,2,0)
(45,27,0)
(16,50,0)
(40,7,0)
(26,22,0)
(27,44,0)
(8,49,0)
(29,7,0)
(19,50,0)
(36,47,0)
(4,22,0)
(24,19,0)
(3,28,0)
(50,19,0)
(25,0,0)
(21,50,0)
(28,50,0)
(47,0,0)
(0,2,0)
(34,28,0)
(30,32,0)
(6,8,0)
(40,0,0)
(50,32,0)
(10,7,0)
(33,2,0)
(23,5,0)
(22,0,0)
(51,31,1)
(7,40,1)
(4,21,1)
(8,6,1)
(34,50,1)
(1,37,1)
(16,50,1)
(31,39,1)
(19,24,1)
(9,28,1)
(21,47,1)
(11,28,1)
(46,29,1)
(0,42,1)
(50,19,1)
(22,5,1)
(42,25,1)
(36,18,1)
(6,11,1)
(5,23,1)
(47,36,1)
(10,43,1)
(39,9,1)
(23,4,1)
(20,7,1)
(28,50,1)
(47,0,1)
(26,22,1)
(19,26,1)
(40,46,1)
(14,20,1)
(37,16,1)
(16,51,1)
(38,17,1)
(22,0,1)
(43,0,1)
(17,15,1)
(20,43,1)
(9,8,1)
(3,34,1)
(31,50,1)
(15,47,1)
(28,3,1)
(1,50,1)
(29,10,1)
(40,0,1)
(38,20,1)
(38,1,1)
(18,14,1)
(17,47,2)
(39,47,2)
(1,47,2)
(47,20,2)
(6,28,2)
(8,28,2)
(19,47,2)
(21,47,2)
(19,24,2)
(1,50,2)
(16,47,2)
(16,50,2)
(36,20,2)
(46,43,2)
(47,0,2)
(26,47,2)
(15,47,2)
(37,47,2)
(22,47,2)
(8,6,2)
(28,47,2)
(4,47,2)
(7,43,2)
(22,5,2)
(51,47,2)
(31,50,2)
(10,43,2)
(23,47,2)
(11,28,2)
(5,47,2)
(50,47,2)
(31,47,2)
(50,19,2)
(47,36,2)
(19,26,2)
(28,50,2)
(22,0,2)
(34,47,2)
(14,20,2)
(3,47,2)
(40,0,2)
(7,40,2)
(26,22,2)
(29,43,2)
(18,20,2)
(9,47,2)
(40,43,2)
-----------------------------------
(0,data = 0)
(1,free(myString)
(2,)
(3,NULL)
(4,data)
(5,sizeof(char)
(6,-1)
(7,fscanf(stdin, "%zu", &data)
(8,exit(-1)
(9,myString)
(10,stdin)
(11,1)
(12,myString)
(13,)
(14,data)
(15,"Input is less than the length of the source string")
(16,printLine(myString)
(17,printLine("Input is less than the length of the source string")
(18,HELLO_STRING)
(19,(char *)
(20,staticReturnsTrue()
(21,myString)
(22,data*sizeof(char)
(23,char)
(24,char *)
(25,data)
(26,malloc(data*sizeof(char)
(27,)
(28,myString == NULL)
(29,"%zu")
(30,if (myString == NULL)
(31,strcpy(myString, HELLO_STRING)
(32,)
(33,if(staticReturnsTrue()
(34,myString)
(35,if(staticReturnsTrue()
(36,strlen(HELLO_STRING)
(37,myString)
(38,RET)
(39,HELLO_STRING)
(40,&data)
(41,)
(42,0)
(43,staticReturnsTrue()
(44,)
(45,if (data > strlen(HELLO_STRING)
(46,data)
(47,data > strlen(HELLO_STRING)
(48,data)
(49,)
(50,myString = (char *)
(51,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^