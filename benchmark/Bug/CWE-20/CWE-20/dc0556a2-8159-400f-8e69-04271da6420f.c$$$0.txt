-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17_bad()
{
    int i;
    int * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
116,118
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,13,15,16,20,22,27,28,31,32,35,40,43,45,48,50,53,54,58,60,65,67,71,73,75,78,83,85,90,91,94,95,98,104,106,109,111,115,118,119,123,125
-----computeFrom-----
18,19
18,20
25,26
25,27
29,30
29,31
38,39
38,40
49,50
49,51
56,57
56,58
88,89
88,90
92,93
92,94
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17_bad(){    int i;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17_bad
{    int i;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int i;
int i;
int
i
i
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(50,12,0)
(52,10,0)
(38,34,0)
(16,9,0)
(10,52,0)
(45,5,0)
(18,33,0)
(45,57,0)
(12,59,0)
(16,59,0)
(28,32,0)
(7,21,0)
(33,9,0)
(20,32,0)
(57,36,0)
(12,32,0)
(27,25,0)
(36,57,0)
(46,45,0)
(40,16,0)
(0,5,0)
(31,33,0)
(53,11,0)
(54,49,0)
(21,13,0)
(17,59,0)
(34,6,0)
(52,22,0)
(60,6,0)
(44,42,0)
(62,35,0)
(43,29,0)
(35,1,0)
(51,19,0)
(5,42,0)
(5,45,0)
(57,45,0)
(32,21,0)
(14,59,0)
(37,7,0)
(16,5,0)
(25,36,0)
(35,59,0)
(12,5,0)
(4,36,0)
(33,7,0)
(1,35,0)
(39,6,0)
(9,26,0)
(30,13,0)
(16,6,0)
(9,33,0)
(8,16,0)
(29,6,0)
(2,10,0)
(33,6,0)
(19,49,0)
(47,49,0)
(55,19,0)
(24,34,0)
(11,5,0)
(45,46,0)
(36,25,0)
(59,13,0)
(35,5,0)
(3,13,0)
(23,35,0)
(56,11,0)
(41,48,0)
(58,13,0)
(61,21,0)
(1,32,0)
(48,49,0)
(9,33,1)
(48,41,1)
(41,52,1)
(6,39,1)
(2,11,1)
(38,29,1)
(41,11,1)
(55,48,1)
(56,53,1)
(62,34,1)
(31,16,1)
(14,17,1)
(19,51,1)
(18,31,1)
(12,59,1)
(37,19,1)
(10,2,1)
(47,59,1)
(12,50,1)
(16,6,1)
(33,18,1)
(29,6,1)
(39,60,1)
(43,9,1)
(34,6,1)
(8,34,1)
(33,7,1)
(35,5,1)
(25,27,1)
(5,45,1)
(48,49,1)
(50,1,1)
(35,23,1)
(12,5,1)
(36,25,1)
(16,5,1)
(38,6,1)
(4,0,1)
(59,14,1)
(7,37,1)
(23,62,1)
(53,5,1)
(45,46,1)
(11,5,1)
(55,49,1)
(60,7,1)
(57,36,1)
(54,47,1)
(19,49,1)
(1,35,1)
(52,10,1)
(15,12,1)
(24,38,1)
(45,57,1)
(34,24,1)
(51,55,1)
(0,19,1)
(40,8,1)
(33,6,1)
(49,54,1)
(16,40,1)
(29,43,1)
(11,56,1)
(16,59,1)
(35,59,1)
(27,4,1)
(33,34,2)
(43,34,2)
(57,36,2)
(31,34,2)
(27,19,2)
(19,19,2)
(4,19,2)
(16,5,2)
(9,33,2)
(45,57,2)
(16,34,2)
(57,19,2)
(34,34,2)
(11,5,2)
(36,25,2)
(8,34,2)
(12,5,2)
(2,11,2)
(29,34,2)
(29,6,2)
(33,7,2)
(40,34,2)
(56,19,2)
(5,45,2)
(35,59,2)
(11,19,2)
(16,59,2)
(52,11,2)
(53,19,2)
(10,11,2)
(12,59,2)
(35,5,2)
(55,19,2)
(0,19,2)
(36,19,2)
(33,6,2)
(41,19,2)
(48,49,2)
(51,19,2)
(52,10,2)
(5,19,2)
(24,34,2)
(48,19,2)
(25,19,2)
(19,49,2)
(1,35,2)
(16,6,2)
(45,19,2)
(38,34,2)
(45,46,2)
(34,6,2)
(9,34,2)
(18,34,2)
-----------------------------------
(0,data)
(1,printIntLine(data[0])
(2,1)
(3,data)
(4,50)
(5,data = (int *)
(6,i = 0)
(7,source[100] = {0})
(8,data)
(9,data[i] = source[i])
(10,-1)
(11,data == NULL)
(12,free(data)
(13,)
(14,NULL)
(15,RET)
(16,data[i])
(17,data)
(18,i)
(19,i < 1)
(20,i)
(21,)
(22,)
(23,0)
(24,100)
(25,sizeof(int)
(26,)
(27,int)
(28,for (i = 0; i < 100; i++)
(29,i++)
(30,i)
(31,source)
(32,)
(33,source[i])
(34,i < 100)
(35,data[0])
(36,50*sizeof(int)
(37,source)
(38,i)
(39,0)
(40,i)
(41,i)
(42,)
(43,i)
(44,if (data == NULL)
(45,(int *)
(46,int *)
(47,i)
(48,i++)
(49,i = 0)
(50,data)
(51,1)
(52,exit(-1)
(53,data)
(54,0)
(55,i)
(56,NULL)
(57,malloc(50*sizeof(int)
(58,for(i = 0; i < 1; i++)
(59,data = NULL)
(60,i)
(61,source)
(62,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^