-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        {
            int source[10] = {0};
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
            for (i = 0; i < 10; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
80,81
82,83
84,85
84,86
85,86
86,87
86,88
88,89
88,90
88,91
91,92
92,93
93,94
95,96
95,97
95,98
95,99
95,100
96,97
97,98
97,99
99,100
99,101
99,102
101,102
103,104
104,105
106,107
107,108
107,109
108,109
110,111
112,113
112,114
112,115
112,116
113,114
114,115
114,116
115,116
118,119
118,120
119,120
122,123
123,124
125,126
126,127
127,128
127,129
128,129
128,130
129,130
131,132
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
142,144
143,144
146,147
147,148
147,149
148,149
150,151
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,67,69,74,76,81,83,87,89,90,94,98,100,102,105,109,111,116,117,120,121,124,130,132,135,137,141,144,145,149,151
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
78,79
78,80
114,115
114,116
118,119
118,120
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(49,50,0)
(73,62,0)
(57,37,0)
(62,73,0)
(70,54,0)
(50,48,0)
(4,73,0)
(13,29,0)
(19,7,0)
(53,59,0)
(32,47,0)
(47,24,0)
(37,47,0)
(36,54,0)
(15,59,0)
(35,37,0)
(18,2,0)
(9,49,0)
(42,7,0)
(47,8,0)
(44,20,0)
(24,47,0)
(32,8,0)
(17,48,0)
(14,44,0)
(30,50,0)
(27,12,0)
(62,70,0)
(65,4,0)
(4,2,0)
(59,15,0)
(24,25,0)
(3,41,0)
(15,54,0)
(61,47,0)
(1,18,0)
(68,73,0)
(7,19,0)
(70,23,0)
(27,29,0)
(71,32,0)
(0,54,0)
(56,23,0)
(69,41,0)
(48,54,0)
(23,70,0)
(73,48,0)
(66,8,0)
(41,54,0)
(4,27,0)
(34,24,0)
(40,19,0)
(25,24,0)
(51,2,0)
(20,50,0)
(39,50,0)
(6,32,0)
(16,50,0)
(29,2,0)
(11,71,0)
(21,29,0)
(28,8,0)
(5,25,0)
(24,34,0)
(49,73,0)
(29,16,0)
(63,62,0)
(19,15,0)
(55,44,0)
(45,43,0)
(20,44,0)
(52,54,0)
(60,45,0)
(22,18,0)
(43,45,0)
(67,4,0)
(38,2,0)
(72,16,0)
(33,50,0)
(44,73,0)
(8,54,0)
(29,27,0)
(64,15,0)
(58,2,0)
(26,58,0)
(43,46,0)
(71,15,0)
(7,8,0)
(10,70,0)
(20,44,1)
(11,37,1)
(70,23,1)
(65,18,1)
(37,35,1)
(22,2,1)
(24,34,1)
(31,49,1)
(21,4,1)
(40,42,1)
(57,47,1)
(2,51,1)
(32,47,1)
(41,3,1)
(47,24,1)
(16,72,1)
(67,65,1)
(32,6,1)
(4,67,1)
(71,15,1)
(5,61,1)
(44,14,1)
(6,71,1)
(42,41,1)
(22,58,1)
(68,32,1)
(24,25,1)
(58,26,1)
(29,13,1)
(56,10,1)
(23,56,1)
(38,16,1)
(49,73,1)
(60,37,1)
(29,2,1)
(4,2,1)
(7,19,1)
(55,18,1)
(69,70,1)
(26,27,1)
(19,40,1)
(61,7,1)
(15,59,1)
(10,15,1)
(44,73,1)
(51,38,1)
(58,2,1)
(19,15,1)
(73,62,1)
(45,60,1)
(18,1,1)
(14,55,1)
(11,43,1)
(18,2,1)
(71,11,1)
(59,53,1)
(53,64,1)
(1,22,1)
(29,16,1)
(37,47,1)
(27,29,1)
(25,5,1)
(62,70,1)
(43,45,1)
(13,21,1)
(4,73,1)
(9,20,1)
(35,57,1)
(62,63,1)
(49,9,1)
(72,73,1)
(63,68,1)
(3,69,1)
(19,15,2)
(58,18,2)
(62,70,2)
(44,73,2)
(43,37,2)
(60,37,2)
(37,47,2)
(65,18,2)
(29,2,2)
(29,18,2)
(7,19,2)
(27,18,2)
(45,37,2)
(58,2,2)
(18,18,2)
(27,29,2)
(20,44,2)
(67,18,2)
(1,18,2)
(70,23,2)
(32,47,2)
(4,18,2)
(21,18,2)
(43,45,2)
(22,18,2)
(73,62,2)
(49,73,2)
(18,2,2)
(47,24,2)
(13,18,2)
(24,25,2)
(71,15,2)
(4,73,2)
(24,34,2)
(26,18,2)
(4,2,2)
(15,59,2)
(29,16,2)
-----------------------------------
(0,data)
(1,10)
(2,i = 0)
(3,NULL)
(4,data[i])
(5,10)
(6,data)
(7,* data = *dataPtr1)
(8,)
(9,data)
(10,dataPtr2)
(11,dataPtr1)
(12,)
(13,i)
(14,0)
(15,* *dataPtr1 = &data)
(16,source[10] = {0})
(17,data)
(18,i < 10)
(19,*dataPtr1)
(20,printIntLine(data[0])
(21,source)
(22,i)
(23,&data)
(24,(int *)
(25,malloc(10)
(26,i)
(27,data[i] = source[i])
(28,if (data == NULL)
(29,source[i])
(30,i)
(31,RET)
(32,*dataPtr1 = data)
(33,source)
(34,int *)
(35,NULL)
(36,dataPtr2)
(37,data == NULL)
(38,i)
(39,for (i = 0; i < 10; i++)
(40,dataPtr1)
(41,data = NULL)
(42,data)
(43,exit(-1)
(44,data[0])
(45,-1)
(46,)
(47,data = (int *)
(48,)
(49,free(data)
(50,)
(51,0)
(52,dataPtr1)
(53,data)
(54,)
(55,data)
(56,data)
(57,data)
(58,i++)
(59,&data)
(60,1)
(61,data)
(62,*dataPtr2)
(63,dataPtr2)
(64,dataPtr1)
(65,data)
(66,data)
(67,i)
(68,data)
(69,data)
(70,* *dataPtr2 = &data)
(71,*dataPtr1)
(72,source)
(73,* data = *dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^