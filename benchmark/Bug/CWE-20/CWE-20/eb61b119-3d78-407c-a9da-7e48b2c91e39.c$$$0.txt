-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
63,64
64,65
64,66
65,66
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,61,62,66,67,68,72,74,76,80,82,83,85,86,91,93,94,95,99,101,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
84,85
84,86
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,34,0)
(44,32,0)
(27,34,0)
(49,34,0)
(13,35,0)
(32,34,0)
(14,39,0)
(49,8,0)
(34,39,0)
(52,7,0)
(4,30,0)
(40,48,0)
(1,48,0)
(45,44,0)
(6,44,0)
(17,49,0)
(26,32,0)
(31,48,0)
(8,49,0)
(27,52,0)
(18,52,0)
(56,27,0)
(19,9,0)
(7,22,0)
(57,43,0)
(10,48,0)
(25,43,0)
(52,48,0)
(16,33,0)
(20,29,0)
(55,8,0)
(43,39,0)
(22,7,0)
(24,7,0)
(3,18,0)
(37,6,0)
(27,43,0)
(7,52,0)
(46,48,0)
(36,8,0)
(47,49,0)
(15,43,0)
(22,33,0)
(28,39,0)
(50,34,0)
(44,6,0)
(11,52,0)
(21,33,0)
(33,22,0)
(2,43,0)
(33,16,0)
(42,30,0)
(0,6,0)
(15,34,0)
(41,25,0)
(20,35,0)
(30,52,0)
(38,16,0)
(15,52,0)
(7,24,0)
(9,48,0)
(12,48,0)
(5,25,0)
(35,20,0)
(30,10,0)
(58,18,0)
(23,15,0)
(25,52,0)
(51,10,0)
(51,30,1)
(27,56,1)
(10,51,1)
(37,0,1)
(22,33,1)
(54,43,1)
(11,54,1)
(25,43,1)
(0,45,1)
(16,38,1)
(4,18,1)
(55,36,1)
(17,40,1)
(52,7,1)
(19,54,1)
(9,19,1)
(42,4,1)
(53,27,1)
(36,47,1)
(38,21,1)
(41,5,1)
(30,42,1)
(56,15,1)
(33,16,1)
(40,10,1)
(26,44,1)
(17,46,1)
(47,17,1)
(23,25,1)
(20,35,1)
(6,37,1)
(25,52,1)
(4,20,1)
(3,58,1)
(13,18,1)
(18,3,1)
(49,8,1)
(15,52,1)
(27,52,1)
(7,24,1)
(15,23,1)
(8,55,1)
(32,26,1)
(7,22,1)
(35,13,1)
(5,32,1)
(57,2,1)
(15,43,1)
(30,52,1)
(46,9,1)
(44,6,1)
(25,41,1)
(21,11,1)
(27,43,1)
(43,57,1)
(45,49,1)
(58,52,1)
(18,52,1)
(18,54,2)
(20,35,2)
(51,54,2)
(15,43,2)
(27,43,2)
(38,54,2)
(25,52,2)
(7,54,2)
(42,54,2)
(11,54,2)
(4,54,2)
(30,54,2)
(46,54,2)
(35,18,2)
(49,8,2)
(58,54,2)
(52,54,2)
(15,52,2)
(22,33,2)
(16,54,2)
(33,54,2)
(22,54,2)
(3,54,2)
(40,54,2)
(7,22,2)
(33,16,2)
(10,54,2)
(27,52,2)
(44,6,2)
(7,24,2)
(18,52,2)
(20,18,2)
(30,52,2)
(9,54,2)
(21,54,2)
(52,7,2)
(13,18,2)
(25,43,2)
(19,54,2)
-----------------------------------
(0,100)
(1,default:)
(2,data)
(3,NULL)
(4,data)
(5,data)
(6,100-1)
(7,(char *)
(8,100-1)
(9,printLine("Benign, fixed string")
(10,data[0] = \\\'\\\\0\\\')
(11,data)
(12,case 6:)
(13,1)
(14,switch(6)
(15,printLine(data)
(16,sizeof(char)
(17,source)
(18,data == NULL)
(19,"Benign, fixed string")
(20,exit(-1)
(21,50)
(22,malloc(50*sizeof(char)
(23,data)
(24,char *)
(25,strcpy(data, source)
(26,\\\'\\\\0\\\')
(27,free(data)
(28,data)
(29,)
(30,data[0])
(31,if (data == NULL)
(32,source[100-1] = \\\'\\\\0\\\')
(33,50*sizeof(char)
(34,)
(35,-1)
(36,100)
(37,1)
(38,char)
(39,)
(40,break;)
(41,source)
(42,0)
(43,data = NULL)
(44,source[100-1])
(45,source)
(46,break;)
(47,\\\'C\\\')
(48,)
(49,memset(source, \\\'C\\\', 100-1)
(50,source)
(51,\\\'\\\\0\\\')
(52,data = (char *)
(53,RET)
(54,6)
(55,1)
(56,data)
(57,NULL)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^