-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_52_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_52_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_system_52_bad()
CWE78_OS_Command_Injection__char_console_system_52_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_system_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_system_52b_badSink
CWE78_OS_Command_Injection__char_console_system_52b_badSink
data
data
-----joern-----
(18,55,0)
(51,8,0)
(48,24,0)
(46,9,0)
(14,19,0)
(55,67,0)
(50,4,0)
(66,45,0)
(54,9,0)
(53,4,0)
(37,27,0)
(14,15,0)
(70,24,0)
(46,16,0)
(11,70,0)
(10,8,0)
(59,9,0)
(29,26,0)
(24,67,0)
(9,70,0)
(6,11,0)
(30,55,0)
(41,29,0)
(32,68,0)
(70,67,0)
(62,69,0)
(46,27,0)
(44,19,0)
(8,62,0)
(58,26,0)
(61,25,0)
(5,46,0)
(68,30,0)
(11,8,0)
(45,30,0)
(42,16,0)
(63,62,0)
(22,67,0)
(19,14,0)
(12,22,0)
(26,29,0)
(21,67,0)
(65,70,0)
(65,53,0)
(3,55,0)
(57,65,0)
(69,70,0)
(56,15,0)
(7,63,0)
(14,70,0)
(16,46,0)
(31,47,0)
(69,62,0)
(9,30,0)
(35,69,0)
(25,7,0)
(1,19,0)
(8,11,0)
(49,24,0)
(15,39,0)
(7,25,0)
(9,46,0)
(25,11,0)
(29,30,0)
(45,27,0)
(17,63,0)
(2,70,0)
(27,45,0)
(19,62,0)
(68,70,0)
(64,20,0)
(27,46,0)
(33,45,0)
(52,14,0)
(22,70,0)
(40,30,0)
(65,30,0)
(43,67,0)
(34,62,0)
(38,29,0)
(13,70,0)
(11,25,0)
(28,50,0)
(63,7,0)
(60,63,0)
(36,65,0)
(27,37,0)
(62,47,0)
(0,53,0)
(30,68,0)
(52,7,1)
(24,48,1)
(61,11,1)
(6,63,1)
(12,26,1)
(65,70,1)
(35,34,1)
(36,57,1)
(62,69,1)
(19,1,1)
(32,40,1)
(29,30,1)
(1,44,1)
(25,61,1)
(45,30,1)
(8,62,1)
(51,6,1)
(14,70,1)
(54,59,1)
(68,70,1)
(22,70,1)
(16,42,1)
(66,9,1)
(19,62,1)
(58,29,1)
(17,60,1)
(11,8,1)
(70,13,1)
(30,68,1)
(27,37,1)
(65,30,1)
(48,49,1)
(42,46,1)
(69,70,1)
(23,22,1)
(65,36,1)
(46,5,1)
(25,11,1)
(7,25,1)
(9,70,1)
(15,56,1)
(33,66,1)
(34,16,1)
(63,62,1)
(9,30,1)
(14,19,1)
(12,53,1)
(26,58,1)
(27,45,1)
(16,46,1)
(44,52,1)
(8,10,1)
(50,28,1)
(29,38,1)
(12,7,1)
(10,51,1)
(40,70,1)
(9,54,1)
(0,65,1)
(13,2,1)
(12,15,1)
(57,50,1)
(70,24,1)
(56,14,1)
(28,16,1)
(59,26,1)
(68,32,1)
(63,17,1)
(38,41,1)
(46,27,1)
(60,62,1)
(2,24,1)
(41,30,1)
(45,33,1)
(69,35,1)
(5,27,1)
(46,9,1)
(7,63,1)
(11,70,1)
(26,29,1)
(22,12,1)
(53,0,1)
(11,70,2)
(1,7,2)
(25,63,2)
(8,62,2)
(15,7,2)
(60,16,2)
(62,69,2)
(68,70,2)
(56,7,2)
(19,62,2)
(9,30,2)
(70,24,2)
(69,70,2)
(65,16,2)
(35,16,2)
(50,16,2)
(16,46,2)
(46,9,2)
(57,16,2)
(17,16,2)
(33,26,2)
(22,70,2)
(53,16,2)
(27,45,2)
(25,11,2)
(7,16,2)
(14,70,2)
(28,16,2)
(69,16,2)
(9,26,2)
(63,16,2)
(19,7,2)
(65,30,2)
(27,37,2)
(30,68,2)
(14,7,2)
(66,26,2)
(46,27,2)
(52,7,2)
(29,30,2)
(62,16,2)
(65,70,2)
(27,26,2)
(46,26,2)
(54,26,2)
(7,63,2)
(11,63,2)
(42,26,2)
(14,19,2)
(45,30,2)
(45,26,2)
(6,63,2)
(5,26,2)
(9,70,2)
(7,25,2)
(34,16,2)
(8,63,2)
(26,29,2)
(11,8,2)
(16,26,2)
(36,16,2)
(44,7,2)
(61,63,2)
(10,63,2)
(51,63,2)
(59,26,2)
(63,62,2)
(0,16,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,1)
(2,data)
(3,if (100-dataLen > 1)
(4,)
(5,stdin)
(6,data)
(7,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(8,dataLen-1)
(9,data+dataLen)
(10,1)
(11,data[dataLen-1])
(12,data)
(13,data_buf)
(14,data[dataLen-1])
(15,data[dataLen-1] = \\\'\\\\0\\\')
(16,fgets(data+dataLen, (int)
(17,0)
(18,dataLen)
(19,dataLen-1)
(20,)
(21,data)
(22,CWE78_OS_Command_Injection__char_console_system_52b_badSink(data)
(23,RET)
(24,data_buf[100] = FULL_COMMAND)
(25,data[dataLen-1] == \\\'\\\\n\\\')
(26,100-dataLen > 1)
(27,(int)
(28,"fgets()
(29,100-dataLen)
(30,dataLen = strlen(data)
(31,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(32,data)
(33,dataLen)
(34,dataLen)
(35,data)
(36,dataLen)
(37,int)
(38,dataLen)
(39,)
(40,dataLen)
(41,100)
(42,NULL)
(43,data_buf)
(44,dataLen)
(45,100-dataLen)
(46,fgets(data+dataLen, (int)
(47,)
(48,FULL_COMMAND)
(49,data_buf)
(50,printLine("fgets()
(51,dataLen)
(52,data)
(53,data[dataLen] = \\\'\\\\0\\\')
(54,dataLen)
(55,)
(56,\\\'\\\\0\\\')
(57,data)
(58,1)
(59,data)
(60,dataLen)
(61,\\\'\\\\n\\\')
(62,dataLen = strlen(data)
(63,dataLen > 0)
(64,if (fgets(data+dataLen, (int)
(65,data[dataLen])
(66,100)
(67,)
(68,strlen(data)
(69,strlen(data)
(70,data = data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^