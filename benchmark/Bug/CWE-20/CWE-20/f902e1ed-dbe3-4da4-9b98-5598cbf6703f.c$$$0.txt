-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,93,94,99,101,102,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
85,86
85,87
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(30,59,0)
(52,11,0)
(22,56,0)
(51,49,0)
(47,19,0)
(41,15,0)
(25,15,0)
(21,15,0)
(49,5,0)
(33,34,0)
(12,11,0)
(28,5,0)
(35,16,0)
(46,5,0)
(4,23,0)
(32,5,0)
(8,9,0)
(50,41,0)
(10,32,0)
(59,49,0)
(38,41,0)
(58,8,0)
(5,15,0)
(8,50,0)
(44,33,0)
(43,7,0)
(34,36,0)
(6,16,0)
(42,40,0)
(31,17,0)
(40,5,0)
(56,5,0)
(32,11,0)
(49,41,0)
(9,41,0)
(34,33,0)
(53,30,0)
(56,59,0)
(17,8,0)
(5,27,0)
(45,23,0)
(27,26,0)
(57,49,0)
(29,17,0)
(1,50,0)
(49,59,0)
(28,19,0)
(28,23,0)
(11,32,0)
(16,26,0)
(8,17,0)
(23,28,0)
(14,15,0)
(27,24,0)
(26,16,0)
(24,27,0)
(20,50,0)
(19,13,0)
(18,41,0)
(27,5,0)
(55,35,0)
(26,27,0)
(59,56,0)
(39,9,0)
(48,7,0)
(37,28,0)
(2,18,0)
(16,35,0)
(7,5,0)
(32,13,0)
(59,30,0)
(40,41,0)
(49,50,0)
(18,5,0)
(0,32,0)
(7,5,1)
(9,39,1)
(34,33,1)
(33,44,1)
(59,56,1)
(50,1,1)
(22,57,1)
(32,5,1)
(18,2,1)
(18,5,1)
(55,6,1)
(49,59,1)
(52,12,1)
(8,50,1)
(56,5,1)
(3,34,1)
(26,16,1)
(44,7,1)
(35,55,1)
(56,22,1)
(40,42,1)
(23,4,1)
(4,45,1)
(43,5,1)
(49,50,1)
(58,49,1)
(28,23,1)
(51,50,1)
(1,20,1)
(45,37,1)
(5,27,1)
(12,0,1)
(17,31,1)
(11,52,1)
(53,56,1)
(37,32,1)
(10,3,1)
(28,5,1)
(59,30,1)
(27,24,1)
(27,26,1)
(20,19,1)
(47,28,1)
(2,9,1)
(8,17,1)
(6,46,1)
(3,7,1)
(42,18,1)
(54,40,1)
(0,10,1)
(16,35,1)
(19,47,1)
(30,53,1)
(57,51,1)
(7,48,1)
(20,3,1)
(48,43,1)
(32,11,1)
(40,5,1)
(49,5,1)
(29,58,1)
(39,8,1)
(31,29,1)
(44,7,2)
(49,50,2)
(10,3,2)
(45,3,2)
(18,5,2)
(49,5,2)
(27,24,2)
(47,3,2)
(26,16,2)
(59,56,2)
(59,30,2)
(5,27,2)
(32,3,2)
(56,5,2)
(8,17,2)
(28,5,2)
(34,33,2)
(16,35,2)
(28,3,2)
(4,3,2)
(32,5,2)
(40,5,2)
(0,3,2)
(28,23,2)
(12,3,2)
(8,50,2)
(27,26,2)
(34,7,2)
(11,3,2)
(19,3,2)
(37,3,2)
(52,3,2)
(32,11,2)
(49,59,2)
(33,7,2)
(7,5,2)
(23,3,2)
-----------------------------------
(0,\\\'A\\\')
(1,"")
(2,data)
(3,globalReturnsTrue()
(4,1)
(5,data = (char *)
(6,100)
(7,data == NULL)
(8,dest[50-1])
(9,dest[50-1] = \\\'\\\\0\\\')
(10,data)
(11,100-1)
(12,100)
(13,)
(14,if(globalReturnsTrue()
(15,)
(16,100*sizeof(char)
(17,50-1)
(18,printLine(data)
(19,data[100-1] = \\\'\\\\0\\\')
(20,dest)
(21,data)
(22,data)
(23,100-1)
(24,char *)
(25,if (data == NULL)
(26,malloc(100*sizeof(char)
(27,(char *)
(28,data[100-1])
(29,50)
(30,sizeof(char)
(31,1)
(32,memset(data, \\\'A\\\', 100-1)
(33,-1)
(34,exit(-1)
(35,sizeof(char)
(36,)
(37,data)
(38,dest)
(39,\\\'\\\\0\\\')
(40,free(data)
(41,)
(42,data)
(43,data)
(44,1)
(45,100)
(46,data)
(47,\\\'\\\\0\\\')
(48,NULL)
(49,memcpy(dest, data, strlen(data)
(50,dest[50] = "")
(51,dest)
(52,1)
(53,char)
(54,RET)
(55,char)
(56,strlen(data)
(57,data)
(58,dest)
(59,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^