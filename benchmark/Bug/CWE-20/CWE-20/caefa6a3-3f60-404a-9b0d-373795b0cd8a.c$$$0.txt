-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_03_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(5==5)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
80,82
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,76,78,81,82,87,89
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_03_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_03_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_03_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
5==5
5
5
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
5==5
5
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(5,16,0)
(17,29,0)
(2,22,0)
(35,20,0)
(27,36,0)
(17,12,0)
(17,7,0)
(12,6,0)
(21,6,0)
(18,6,0)
(16,22,0)
(13,16,0)
(4,22,0)
(23,26,0)
(26,29,0)
(8,26,0)
(10,34,0)
(30,22,0)
(14,12,0)
(29,17,0)
(38,27,0)
(28,37,0)
(12,17,0)
(13,12,0)
(18,12,0)
(0,13,0)
(11,6,0)
(33,8,0)
(13,24,0)
(36,27,0)
(26,8,0)
(36,19,0)
(32,18,0)
(25,34,0)
(3,20,0)
(7,17,0)
(37,12,0)
(29,26,0)
(15,16,0)
(1,37,0)
(28,1,1)
(36,27,1)
(14,34,1)
(10,16,1)
(20,3,1)
(25,10,1)
(23,14,1)
(12,17,1)
(38,37,1)
(32,11,1)
(9,20,1)
(37,12,1)
(11,36,1)
(0,20,1)
(18,12,1)
(26,8,1)
(15,5,1)
(13,0,1)
(3,35,1)
(33,23,1)
(35,18,1)
(29,26,1)
(9,13,1)
(11,37,1)
(37,28,1)
(27,38,1)
(17,29,1)
(8,33,1)
(13,12,1)
(18,32,1)
(35,34,1)
(17,7,1)
(34,25,1)
(16,15,1)
(1,12,1)
(13,16,1)
(13,12,2)
(11,34,2)
(0,20,2)
(12,34,2)
(26,8,2)
(13,16,2)
(32,34,2)
(17,34,2)
(17,7,2)
(18,12,2)
(18,34,2)
(12,17,2)
(8,34,2)
(36,27,2)
(26,34,2)
(29,26,2)
(17,29,2)
(14,34,2)
(37,12,2)
(38,37,2)
(1,34,2)
(28,34,2)
(36,37,2)
(23,34,2)
(29,34,2)
(33,34,2)
(37,34,2)
(27,37,2)
(13,20,2)
-----------------------------------
(0,data)
(1,data)
(2,if(5==5)
(3,5)
(4,if(5==5)
(5,data)
(6,)
(7,wchar_t *)
(8,sizeof(wchar_t)
(9,RET)
(10,5)
(11,\'\\\\0\')
(12,data = (wchar_t *)
(13,printWLine(data)
(14,data)
(15,NULL)
(16,data = NULL)
(17,(wchar_t *)
(18,free(data)
(19,)
(20,5==5)
(21,if (data == NULL)
(22,)
(23,100)
(24,)
(25,5)
(26,100*sizeof(wchar_t)
(27,-1)
(28,NULL)
(29,malloc(100*sizeof(wchar_t)
(30,data)
(31,'\\\\0')
(32,data)
(33,wchar_t)
(34,5==5)
(35,5)
(36,exit(-1)
(37,data == NULL)
(38,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^