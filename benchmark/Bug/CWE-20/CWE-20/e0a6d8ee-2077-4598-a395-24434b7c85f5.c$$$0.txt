-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_06_bad()
CWE190_Integer_Overflow__char_max_postinc_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,11,0)
(7,14,0)
(27,15,0)
(15,11,0)
(25,21,0)
(21,16,0)
(21,15,0)
(13,14,0)
(17,8,0)
(18,11,0)
(12,16,0)
(20,15,0)
(15,8,0)
(11,14,0)
(22,23,0)
(15,16,0)
(8,5,0)
(28,14,0)
(4,9,0)
(16,10,0)
(26,23,0)
(9,8,0)
(1,3,0)
(9,11,0)
(2,8,0)
(9,16,0)
(24,3,0)
(9,8,1)
(2,17,1)
(9,11,1)
(18,0,1)
(23,26,1)
(15,27,1)
(3,1,1)
(15,11,1)
(4,3,1)
(27,20,1)
(6,3,1)
(26,22,1)
(24,23,1)
(22,11,1)
(6,21,1)
(17,23,1)
(1,24,1)
(8,2,1)
(11,18,1)
(20,9,1)
(25,15,1)
(24,8,1)
(21,25,1)
(15,8,1)
(9,4,1)
(21,15,1)
(15,8,2)
(27,3,2)
(2,23,2)
(8,23,2)
(15,11,2)
(9,8,2)
(21,15,2)
(9,3,2)
(17,23,2)
(20,3,2)
(25,3,2)
(9,11,2)
(21,3,2)
(15,3,2)
(4,3,2)
-----------------------------------
(0,data)
(1,5)
(2,CHAR_MAX)
(3,STATIC_CONST_FIVE==5)
(4,data)
(5,)
(6,RET)
(7,data)
(8,data = CHAR_MAX)
(9,data++)
(10,)
(11,data = ' ')
(12,result)
(13,if(STATIC_CONST_FIVE==5)
(14,)
(15,result = data)
(16,)
(17,data)
(18,' ')
(19,data = \' \')
(20,result)
(21,printHexCharLine(result)
(22,STATIC_CONST_FIVE)
(23,STATIC_CONST_FIVE==5)
(24,STATIC_CONST_FIVE)
(25,result)
(26,5)
(27,data)
(28,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^