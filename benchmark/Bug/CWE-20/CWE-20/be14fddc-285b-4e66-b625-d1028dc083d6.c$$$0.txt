-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(21,22,0)
(25,17,0)
(17,8,0)
(4,9,0)
(13,11,0)
(11,13,0)
(22,11,0)
(20,11,0)
(3,8,0)
(14,3,0)
(22,6,0)
(10,8,0)
(16,24,0)
(9,24,0)
(18,25,0)
(25,9,0)
(8,5,0)
(11,22,0)
(17,25,0)
(7,25,0)
(23,24,0)
(15,24,0)
(19,9,0)
(25,22,0)
(11,20,0)
(0,17,0)
(3,17,0)
(2,1,1)
(17,25,1)
(12,2,1)
(14,17,1)
(22,11,1)
(13,21,1)
(19,4,1)
(0,2,1)
(25,9,1)
(1,9,1)
(3,17,1)
(2,22,1)
(11,13,1)
(25,18,1)
(25,22,1)
(9,19,1)
(7,0,1)
(3,14,1)
(11,20,1)
(21,1,1)
(18,7,1)
(12,3,1)
(25,2,2)
(3,2,2)
(13,1,2)
(11,20,2)
(25,22,2)
(11,1,2)
(25,9,2)
(14,2,2)
(21,1,2)
(17,2,2)
(22,11,2)
(7,2,2)
(0,2,2)
(3,17,2)
(18,2,2)
(17,25,2)
(22,1,2)
(11,13,2)
-----------------------------------
(0,result)
(1,GLOBAL_CONST_TRUE)
(2,GLOBAL_CONST_TRUE)
(3,printUnsignedLine(result)
(4,data)
(5,)
(6,)
(7,data)
(8,)
(9,data = 0)
(10,result)
(11,(unsigned int)
(12,RET)
(13,RAND32()
(14,result)
(15,if(GLOBAL_CONST_TRUE)
(16,data)
(17,result = data * data)
(18,data)
(19,0)
(20,unsigned int)
(21,data)
(22,data = (unsigned int)
(23,if(GLOBAL_CONST_TRUE)
(24,)
(25,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^