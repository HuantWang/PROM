-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_08_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(staticReturnsTrue())
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
63,65
64,65
65,66
67,68
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,60,62,66,71,73
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_08_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_08_bad()
CWE415_Double_Free__malloc_free_int64_t_08_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(15,14,0)
(11,14,0)
(23,25,0)
(27,0,0)
(20,0,0)
(17,5,0)
(15,24,0)
(28,30,0)
(14,11,0)
(25,32,0)
(31,17,0)
(29,9,0)
(18,16,0)
(25,8,0)
(17,30,0)
(9,15,0)
(0,27,0)
(13,15,0)
(32,25,0)
(12,8,0)
(14,15,0)
(32,14,0)
(21,16,0)
(19,16,0)
(4,24,0)
(26,9,0)
(27,7,0)
(10,24,0)
(1,4,0)
(6,30,0)
(8,25,0)
(17,15,0)
(30,16,0)
(4,15,0)
(14,32,0)
(30,28,1)
(1,27,1)
(31,3,1)
(23,13,1)
(4,1,1)
(15,14,1)
(28,6,1)
(17,30,1)
(8,12,1)
(29,15,1)
(20,9,1)
(13,2,1)
(0,20,1)
(17,31,1)
(32,25,1)
(3,2,1)
(4,15,1)
(1,9,1)
(3,4,1)
(12,23,1)
(22,17,1)
(25,8,1)
(14,32,1)
(27,0,1)
(22,3,1)
(14,11,1)
(2,30,1)
(17,15,1)
(9,26,1)
(26,29,1)
(9,15,1)
(4,15,2)
(4,2,2)
(9,15,2)
(12,2,2)
(15,14,2)
(17,15,2)
(23,2,2)
(32,25,2)
(14,2,2)
(9,2,2)
(32,2,2)
(8,2,2)
(27,9,2)
(14,32,2)
(13,2,2)
(27,0,2)
(25,8,2)
(17,30,2)
(0,9,2)
(14,11,2)
(29,2,2)
(25,2,2)
(20,9,2)
(15,2,2)
(17,3,2)
(31,3,2)
(26,2,2)
(1,2,2)
-----------------------------------
(0,-1)
(1,data)
(2,staticReturnsTrue()
(3,staticReturnsTrue()
(4,free(data)
(5,)
(6,data)
(7,)
(8,sizeof(int64_t)
(9,data == NULL)
(10,if (data == NULL)
(11,int64_t *)
(12,int64_t)
(13,data)
(14,(int64_t *)
(15,data = (int64_t *)
(16,)
(17,free(data)
(18,if(staticReturnsTrue()
(19,data)
(20,1)
(21,if(staticReturnsTrue()
(22,RET)
(23,100)
(24,)
(25,100*sizeof(int64_t)
(26,NULL)
(27,exit(-1)
(28,NULL)
(29,data)
(30,data = NULL)
(31,data)
(32,malloc(100*sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^