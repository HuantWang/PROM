-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int64_t_09_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
87,88
89,90
91,92
91,93
92,93
94,95
95,96
96,97
96,98
97,98
99,100
99,101
100,101
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,67,68,71,72,75,81,83,84,88,90,93,98,101,102
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
65,66
65,67
69,70
69,71
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int64_t_09_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int64_t_09_bad()
CWE416_Use_After_Free__malloc_free_int64_t_09_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5LL;            }
data[i] = 5LL;
data[i] = 5LL
data[i]
data
data
i
i
5LL
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
-----joern-----
(25,41,0)
(2,28,0)
(18,41,0)
(38,40,0)
(45,41,0)
(38,8,0)
(42,9,0)
(47,13,0)
(47,29,0)
(32,18,0)
(17,3,0)
(23,5,0)
(20,3,0)
(11,28,0)
(44,41,0)
(9,42,0)
(37,13,0)
(15,35,0)
(12,24,0)
(46,35,0)
(19,31,0)
(36,0,0)
(27,28,0)
(10,8,0)
(7,38,0)
(45,18,0)
(16,25,0)
(14,45,0)
(33,31,0)
(26,0,0)
(0,28,0)
(18,9,0)
(40,38,0)
(40,9,0)
(9,18,0)
(8,38,0)
(5,31,0)
(13,18,0)
(21,31,0)
(3,18,0)
(4,5,0)
(46,39,0)
(43,13,0)
(13,5,0)
(35,46,0)
(13,47,0)
(9,40,0)
(1,25,0)
(22,2,0)
(27,3,1)
(27,46,1)
(35,15,1)
(45,14,1)
(7,32,1)
(23,4,1)
(38,8,1)
(13,37,1)
(47,13,1)
(6,47,1)
(14,0,1)
(34,30,1)
(28,11,1)
(34,45,1)
(12,0,1)
(30,5,1)
(40,38,1)
(3,17,1)
(0,28,1)
(32,30,1)
(13,18,1)
(26,36,1)
(45,18,1)
(36,28,1)
(11,27,1)
(36,2,1)
(0,26,1)
(2,28,1)
(5,23,1)
(37,43,1)
(22,12,1)
(15,3,1)
(8,10,1)
(9,40,1)
(20,18,1)
(2,22,1)
(46,35,1)
(3,18,1)
(10,7,1)
(43,34,1)
(18,9,1)
(6,34,1)
(9,42,1)
(13,5,1)
(17,20,1)
(0,0,2)
(14,30,2)
(17,30,2)
(37,34,2)
(2,0,2)
(45,30,2)
(43,34,2)
(15,3,2)
(9,42,2)
(7,30,2)
(3,30,2)
(20,30,2)
(22,0,2)
(13,34,2)
(40,38,2)
(40,30,2)
(13,18,2)
(36,30,2)
(47,13,2)
(0,30,2)
(46,3,2)
(13,5,2)
(46,35,2)
(26,30,2)
(18,30,2)
(12,0,2)
(3,18,2)
(11,30,2)
(8,30,2)
(0,28,2)
(2,28,2)
(27,30,2)
(28,30,2)
(38,8,2)
(26,0,2)
(10,30,2)
(32,30,2)
(9,40,2)
(9,30,2)
(47,34,2)
(35,3,2)
(45,18,2)
(18,9,2)
(38,30,2)
(36,0,2)
-----------------------------------
(0,i < 100)
(1,i)
(2,i++)
(3,data == NULL)
(4,data)
(5,data = NULL)
(6,RET)
(7,100)
(8,sizeof(int64_t)
(9,(int64_t *)
(10,int64_t)
(11,0)
(12,L)
(13,data[0])
(14,data)
(15,1)
(16,for(i = 0; i < 100; i++)
(17,NULL)
(18,data = (int64_t *)
(19,if(GLOBAL_CONST_TRUE)
(20,data)
(21,data)
(22,i)
(23,NULL)
(24,)
(25,)
(26,100)
(27,i)
(28,i = 0)
(29,)
(30,GLOBAL_CONST_TRUE)
(31,)
(32,data)
(33,if(GLOBAL_CONST_TRUE)
(34,GLOBAL_CONST_TRUE)
(35,-1)
(36,i)
(37,0)
(38,100*sizeof(int64_t)
(39,)
(40,malloc(100*sizeof(int64_t)
(41,)
(42,int64_t *)
(43,data)
(44,if (data == NULL)
(45,free(data)
(46,exit(-1)
(47,printLongLongLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^