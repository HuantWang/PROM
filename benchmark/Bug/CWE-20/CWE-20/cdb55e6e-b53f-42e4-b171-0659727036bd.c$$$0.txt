-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52c_badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52c_badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52c_badSink(twoIntsStruct * data)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52c_badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(10,26,0)
(37,7,0)
(7,37,0)
(14,12,0)
(21,14,0)
(3,7,0)
(40,0,0)
(5,14,0)
(23,39,0)
(38,28,0)
(13,40,0)
(42,27,0)
(33,22,0)
(29,7,0)
(31,33,0)
(36,0,0)
(18,40,0)
(39,6,0)
(4,0,0)
(42,32,0)
(7,0,0)
(9,31,0)
(27,12,0)
(16,35,0)
(2,4,0)
(11,37,0)
(4,31,0)
(14,6,0)
(10,14,0)
(31,4,0)
(14,10,0)
(27,42,0)
(34,27,0)
(41,27,0)
(1,0,0)
(8,33,0)
(32,6,0)
(28,22,0)
(32,42,0)
(20,10,0)
(26,10,0)
(30,26,0)
(25,39,0)
(17,4,0)
(6,15,0)
(37,28,0)
(19,6,0)
(35,0,0)
(7,3,1)
(34,41,1)
(21,40,1)
(37,7,1)
(20,5,1)
(13,0,1)
(16,28,1)
(28,38,1)
(38,37,1)
(32,42,1)
(26,30,1)
(13,35,1)
(4,2,1)
(35,16,1)
(14,12,1)
(2,17,1)
(18,13,1)
(9,4,1)
(35,0,1)
(36,1,1)
(29,33,1)
(40,0,1)
(41,14,1)
(42,27,1)
(37,11,1)
(31,9,1)
(33,8,1)
(5,21,1)
(30,20,1)
(17,40,1)
(31,4,1)
(7,0,1)
(8,31,1)
(11,7,1)
(24,32,1)
(27,34,1)
(0,36,1)
(4,0,1)
(27,12,1)
(10,26,1)
(14,10,1)
(40,18,1)
(3,29,1)
(8,40,2)
(42,27,2)
(27,12,2)
(13,40,2)
(2,40,2)
(29,40,2)
(37,40,2)
(31,4,2)
(10,26,2)
(40,0,2)
(32,42,2)
(11,40,2)
(28,40,2)
(4,40,2)
(35,0,2)
(17,40,2)
(7,0,2)
(4,0,2)
(33,40,2)
(16,40,2)
(7,40,2)
(18,40,2)
(31,40,2)
(38,40,2)
(35,40,2)
(3,40,2)
(14,12,2)
(14,10,2)
(9,40,2)
(40,40,2)
(37,7,2)
-----------------------------------
(0,i = 0)
(1,i)
(2,i)
(3,i)
(4,source[i])
(5,source)
(6,)
(7,source[i])
(8,0)
(9,intOne)
(10,100*sizeof(twoIntsStruct)
(11,intTwo)
(12,twoIntsStruct * data)
(13,i)
(14,memcpy(data, source, 100*sizeof(twoIntsStruct)
(15,)
(16,i)
(17,source)
(18,100)
(19,source)
(20,100)
(21,data)
(22,)
(23,i)
(24,RET)
(25,for (i = 0; i < 100; i++)
(26,sizeof(twoIntsStruct)
(27,data[0])
(28,source[i].intTwo = 0)
(29,source)
(30,twoIntsStruct)
(31,source[i].intOne)
(32,printStructLine(&data[0])
(33,source[i].intOne = 0)
(34,0)
(35,i++)
(36,0)
(37,source[i].intTwo)
(38,0)
(39,)
(40,i < 100)
(41,data)
(42,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^