-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
57,58
57,59
59,60
59,61
59,62
61,62
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
86,87
87,88
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,62,65,70,72,77,78,81,82,85,91,93,96,98,102,105,106,110,112
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
75,76
75,77
79,80
79,81
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(12,26,0)
(18,8,0)
(11,25,0)
(48,8,0)
(55,0,0)
(27,39,0)
(15,10,0)
(10,12,0)
(20,3,0)
(7,43,0)
(47,18,0)
(24,4,0)
(1,26,0)
(20,15,0)
(29,3,0)
(41,4,0)
(16,39,0)
(28,29,0)
(9,12,0)
(13,6,0)
(22,10,0)
(30,41,0)
(3,52,0)
(2,26,0)
(14,41,0)
(32,17,0)
(50,13,0)
(17,13,0)
(38,54,0)
(5,2,0)
(8,48,0)
(20,4,0)
(43,3,0)
(29,13,0)
(37,2,0)
(55,25,0)
(23,3,0)
(43,2,0)
(10,4,0)
(35,10,0)
(40,4,0)
(48,38,0)
(43,13,0)
(21,20,0)
(13,38,0)
(10,15,0)
(44,2,0)
(36,8,0)
(34,3,0)
(46,29,0)
(38,48,0)
(37,29,0)
(42,52,0)
(51,4,0)
(38,13,0)
(29,37,0)
(26,52,0)
(49,20,0)
(53,52,0)
(20,13,0)
(8,18,0)
(54,38,0)
(33,6,0)
(19,17,0)
(25,55,0)
(31,24,0)
(15,45,0)
(11,17,1)
(22,35,1)
(17,13,1)
(32,19,1)
(37,29,1)
(43,3,1)
(15,10,1)
(28,46,1)
(29,3,1)
(20,13,1)
(9,39,1)
(9,17,1)
(41,4,1)
(20,21,1)
(43,7,1)
(17,32,1)
(25,11,1)
(18,47,1)
(13,38,1)
(19,13,1)
(16,3,1)
(56,43,1)
(10,22,1)
(4,51,1)
(10,4,1)
(55,25,1)
(27,16,1)
(14,24,1)
(51,40,1)
(40,12,1)
(12,9,1)
(21,49,1)
(30,14,1)
(7,37,1)
(35,20,1)
(39,27,1)
(48,8,1)
(23,34,1)
(50,39,1)
(24,31,1)
(46,41,1)
(29,28,1)
(3,23,1)
(36,50,1)
(10,12,1)
(47,36,1)
(38,48,1)
(49,41,1)
(41,30,1)
(31,15,1)
(29,13,1)
(24,4,1)
(14,4,1)
(38,54,1)
(9,55,1)
(20,3,1)
(8,18,1)
(20,4,1)
(43,13,1)
(10,4,2)
(8,18,2)
(31,41,2)
(18,39,2)
(30,41,2)
(11,17,2)
(49,41,2)
(50,39,2)
(17,39,2)
(20,41,2)
(20,13,2)
(48,8,2)
(35,41,2)
(15,10,2)
(36,39,2)
(38,54,2)
(41,4,2)
(43,3,2)
(20,3,2)
(15,41,2)
(8,39,2)
(37,29,2)
(22,41,2)
(55,25,2)
(17,13,2)
(29,13,2)
(48,39,2)
(24,41,2)
(21,41,2)
(24,4,2)
(29,3,2)
(13,38,2)
(13,39,2)
(38,48,2)
(20,4,2)
(55,17,2)
(47,39,2)
(32,39,2)
(10,12,2)
(10,41,2)
(14,41,2)
(19,39,2)
(25,17,2)
(38,39,2)
(43,13,2)
(41,41,2)
-----------------------------------
(0,)
(1,source)
(2,)
(3,data = NULL)
(4,i = 0)
(5,for (i = 0; i < 100; i++)
(6,)
(7,data)
(8,50*sizeof(int)
(9,source)
(10,source[i])
(11,1)
(12,source[100] = {0})
(13,data = (int *)
(14,i)
(15,data[i] = source[i])
(16,staticFive)
(17,data == NULL)
(18,sizeof(int)
(19,data)
(20,data[i])
(21,i)
(22,i)
(23,NULL)
(24,i++)
(25,-1)
(26,)
(27,5)
(28,0)
(29,data[0])
(30,100)
(31,i)
(32,NULL)
(33,if (data == NULL)
(34,data)
(35,source)
(36,50)
(37,printIntLine(data[0])
(38,(int *)
(39,staticFive==5)
(40,i)
(41,i < 100)
(42,data)
(43,free(data)
(44,i)
(45,)
(46,data)
(47,int)
(48,malloc(50*sizeof(int)
(49,data)
(50,data)
(51,0)
(52,)
(53,if(staticFive==5)
(54,int *)
(55,exit(-1)
(56,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^