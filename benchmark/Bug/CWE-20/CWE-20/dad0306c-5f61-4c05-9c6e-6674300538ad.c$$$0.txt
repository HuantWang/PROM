-----label-----
1
-----code-----
void CWE416_Use_After_Free__return_freed_ptr_07_bad()
{
    if(staticFive==5)
    {
        {
            /* Call the bad helper function */
            char * reversedString = helperBad("BadSink");
            printLine(reversedString);
            /* free(reversedString);
             * This call to free() was removed because we want the tool to detect the use after free,
             * but we don't want that function to be free(). Essentially we want to avoid a double free
             */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
26,27
28,29
-----nextToken-----
2,4,9,10,15,17,18,22,23,27,29
-----computeFrom-----
7,8
7,9
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__return_freed_ptr_07_bad(){    if(staticFive==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
void
CWE416_Use_After_Free__return_freed_ptr_07_bad()
CWE416_Use_After_Free__return_freed_ptr_07_bad
{    if(staticFive==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
if(staticFive==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
{            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }
char * reversedString = helperBad("BadSink");
char * reversedString = helperBad("BadSink");
char
* reversedString = helperBad("BadSink")
*
reversedString
= helperBad("BadSink")
helperBad("BadSink")
helperBad
helperBad
"BadSink"
printLine(reversedString);
printLine(reversedString)
printLine
printLine
reversedString
reversedString
-----joern-----
(7,11,0)
(12,9,0)
(9,1,0)
(11,14,0)
(2,3,0)
(8,12,0)
(0,1,0)
(9,11,0)
(13,3,0)
(1,9,0)
(10,4,0)
(12,11,0)
(5,9,0)
(3,2,1)
(0,5,1)
(12,9,1)
(2,13,1)
(9,1,1)
(6,3,1)
(12,8,1)
(6,12,1)
(8,9,1)
(5,3,1)
(1,0,1)
(12,3,2)
(12,9,2)
(5,3,2)
(8,3,2)
(9,3,2)
(9,1,2)
(1,3,2)
(0,3,2)
-----------------------------------
(0,"BadSink")
(1,helperBad("BadSink")
(2,5)
(3,staticFive==5)
(4,)
(5,reversedString)
(6,RET)
(7,reversedString)
(8,reversedString)
(9,* reversedString = helperBad("BadSink")
(10,if(staticFive==5)
(11,)
(12,printLine(reversedString)
(13,staticFive)
(14,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^