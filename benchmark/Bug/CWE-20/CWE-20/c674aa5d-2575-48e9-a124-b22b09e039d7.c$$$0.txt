-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strncpy(data, source, 100-1);
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,97,102,104,105,106,110,112,116,118
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
99,100
99,101
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18_bad(){    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18_bad
{    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));
source
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(62,54,0)
(36,3,0)
(28,43,0)
(33,61,0)
(12,39,0)
(42,9,0)
(23,24,0)
(17,54,0)
(32,9,0)
(54,33,0)
(52,39,0)
(51,35,0)
(55,56,0)
(3,16,0)
(26,57,0)
(20,10,0)
(3,36,0)
(0,57,0)
(8,56,0)
(25,9,0)
(46,33,0)
(34,12,0)
(22,36,0)
(41,21,0)
(7,55,0)
(16,3,0)
(35,51,0)
(50,33,0)
(4,61,0)
(21,41,0)
(27,36,0)
(43,62,0)
(9,33,0)
(29,61,0)
(13,27,0)
(14,27,0)
(1,39,0)
(24,61,0)
(6,61,0)
(55,50,0)
(53,33,0)
(62,36,0)
(11,62,0)
(48,46,0)
(46,36,0)
(12,36,0)
(40,32,0)
(9,32,0)
(53,36,0)
(39,12,0)
(56,55,0)
(57,36,0)
(12,33,0)
(59,21,0)
(35,3,0)
(18,56,0)
(41,15,0)
(62,43,0)
(38,51,0)
(5,12,0)
(3,35,0)
(36,61,0)
(60,51,0)
(47,61,0)
(19,38,0)
(45,33,0)
(30,32,0)
(37,43,0)
(2,50,0)
(49,24,0)
(10,61,0)
(51,38,0)
(31,53,0)
(27,10,0)
(32,40,1)
(44,46,1)
(54,17,1)
(25,10,1)
(35,51,1)
(17,62,1)
(51,38,1)
(9,32,1)
(3,16,1)
(59,57,1)
(30,42,1)
(40,30,1)
(12,36,1)
(39,52,1)
(22,6,1)
(60,22,1)
(7,9,1)
(56,18,1)
(21,59,1)
(53,31,1)
(6,24,1)
(52,1,1)
(42,25,1)
(41,21,1)
(50,2,1)
(46,36,1)
(20,27,1)
(1,34,1)
(11,12,1)
(13,14,1)
(43,28,1)
(2,55,1)
(55,56,1)
(18,8,1)
(38,19,1)
(62,36,1)
(24,49,1)
(10,20,1)
(57,26,1)
(27,13,1)
(49,23,1)
(34,5,1)
(27,36,1)
(14,41,1)
(0,36,1)
(36,3,1)
(31,54,1)
(12,39,1)
(62,43,1)
(8,7,1)
(37,11,1)
(53,36,1)
(5,50,1)
(3,35,1)
(48,53,1)
(28,37,1)
(26,0,1)
(57,36,1)
(19,60,1)
(46,48,1)
(14,57,1)
(57,36,2)
(35,51,2)
(59,57,2)
(51,38,2)
(53,36,2)
(46,36,2)
(55,56,2)
(21,57,2)
(62,36,2)
(36,3,2)
(9,32,2)
(3,16,2)
(41,21,2)
(12,39,2)
(41,57,2)
(3,35,2)
(62,43,2)
(27,36,2)
(12,36,2)
-----------------------------------
(0,data)
(1,100)
(2,'\\\\0')
(3,(char *)
(4,source:)
(5,data)
(6,goto source;)
(7,source)
(8,100)
(9,memset(source, \'C\', 100-1)
(10,data[0] = '\\\\0')
(11,data)
(12,strncpy(data, source, 100-1)
(13,0)
(14,data)
(15,)
(16,char *)
(17,'\\\\0')
(18,1)
(19,char)
(20,'\\\\0')
(21,-1)
(22,data)
(23,data)
(24,data = NULL)
(25,source)
(26,NULL)
(27,data[0])
(28,1)
(29,if (data == NULL)
(30,100)
(31,data)
(32,100-1)
(33,)
(34,source)
(35,malloc(50*sizeof(char)
(36,data = (char *)
(37,100)
(38,sizeof(char)
(39,100-1)
(40,1)
(41,exit(-1)
(42,'C')
(43,100-1)
(44,RET)
(45,source)
(46,free(data)
(47,data)
(48,data)
(49,NULL)
(50,source[100-1] = '\\\\0')
(51,50*sizeof(char)
(52,1)
(53,printLine(data)
(54,data[100-1] = '\\\\0')
(55,source[100-1])
(56,100-1)
(57,data == NULL)
(58,memset(source, 'C', 100-1)
(59,1)
(60,50)
(61,)
(62,data[100-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^