-----label-----
1
-----code-----
static void badSink()
{
    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData;
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
9,12
12,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
30,33
30,34
31,32
33,34
36,37
36,38
39,40
40,41
40,42
41,42
41,43
42,43
44,45
44,46
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
63,64
63,65
64,65
64,66
65,66
67,68
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,14,19,21,24,26,28,32,34,35,37,38,43,45,46,47,52,53,56,57,60,66,68,71,73,78,80,81,82,86,88,92,94
-----computeFrom-----
36,37
36,38
40,41
40,42
44,45
44,46
50,51
50,52
54,55
54,56
63,64
63,65
75,76
75,77
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData;    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
static void
badSink()
badSink
{    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData;    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData;
char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData;
char
* data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData
*
data
= CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(45,36,0)
(3,20,0)
(42,36,0)
(21,44,0)
(20,46,0)
(38,40,0)
(47,40,0)
(36,45,0)
(14,7,0)
(43,21,0)
(26,4,0)
(19,45,0)
(8,40,0)
(1,41,0)
(18,40,0)
(30,12,0)
(35,4,0)
(29,0,0)
(38,21,0)
(7,40,0)
(16,0,0)
(27,38,0)
(31,4,0)
(20,41,0)
(36,21,0)
(32,0,0)
(25,46,0)
(24,18,0)
(9,6,0)
(49,4,0)
(15,21,0)
(10,17,0)
(38,9,0)
(33,4,0)
(0,4,0)
(48,32,0)
(50,32,0)
(5,12,0)
(7,9,0)
(46,4,0)
(11,45,0)
(0,32,0)
(12,40,0)
(22,7,0)
(23,31,0)
(36,31,0)
(28,41,0)
(49,21,0)
(17,21,0)
(37,38,0)
(9,7,0)
(39,44,0)
(17,4,0)
(4,44,0)
(41,20,0)
(13,49,0)
(1,3,1)
(9,7,1)
(23,36,1)
(11,19,1)
(50,48,1)
(30,40,1)
(38,21,1)
(42,12,1)
(47,46,1)
(21,43,1)
(19,42,1)
(32,50,1)
(38,27,1)
(14,38,1)
(40,8,1)
(36,21,1)
(22,14,1)
(43,15,1)
(49,13,1)
(45,11,1)
(18,40,1)
(13,17,1)
(41,28,1)
(17,21,1)
(25,20,1)
(7,22,1)
(12,40,1)
(16,21,1)
(46,25,1)
(24,9,1)
(3,0,1)
(27,37,1)
(12,5,1)
(2,49,1)
(17,10,1)
(29,16,1)
(10,31,1)
(8,47,1)
(48,29,1)
(38,40,1)
(20,41,1)
(5,30,1)
(37,12,1)
(7,40,1)
(30,18,1)
(0,32,1)
(18,24,1)
(49,21,1)
(31,23,1)
(36,45,1)
(28,1,1)
(38,21,2)
(14,12,2)
(36,21,2)
(37,12,2)
(17,21,2)
(38,40,2)
(38,12,2)
(27,12,2)
(12,12,2)
(7,12,2)
(22,12,2)
(24,12,2)
(36,45,2)
(9,12,2)
(9,7,2)
(7,40,2)
(0,32,2)
(18,12,2)
(49,21,2)
(30,12,2)
(18,40,2)
(12,40,2)
(20,41,2)
(5,12,2)
-----------------------------------
(0,memset(source, 'C', 100-1)
(1,100)
(2,RET)
(3,source)
(4,)
(5,100)
(6,)
(7,source[i])
(8,0)
(9,data[i] = source[i])
(10,data)
(11,1)
(12,i < 100)
(13,data)
(14,source)
(15,data)
(16,source)
(17,printLine(data)
(18,i++)
(19,100)
(20,source[100-1])
(21,* data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData)
(22,i)
(23,'\\\\0')
(24,i)
(25,'\\\\0')
(26,source)
(27,i)
(28,1)
(29,'C')
(30,i)
(31,data[100-1] = '\\\\0')
(32,100-1)
(33,i)
(34,memset(source, \'C\', 100-1)
(35,for (i = 0; i < 100; i++)
(36,data[100-1])
(37,data)
(38,data[i])
(39,data)
(40,i = 0)
(41,100-1)
(42,data)
(43,CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData)
(44,)
(45,100-1)
(46,source[100-1] = '\\\\0')
(47,i)
(48,100)
(49,free(data)
(50,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^