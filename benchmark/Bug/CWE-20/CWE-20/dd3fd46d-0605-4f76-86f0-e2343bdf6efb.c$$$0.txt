-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_18_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    goto source;
source:
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
89,91
89,92
90,91
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
106,107
107,108
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,32,36,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,93,95,100,101,104,105,108,114,116,119,121,125,129,130
-----computeFrom-----
34,35
34,36
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
98,99
98,100
102,103
102,104
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_18_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_18_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_18_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
goto source;
source
source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;
source
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(10,55,0)
(25,18,0)
(43,37,0)
(39,51,0)
(57,42,0)
(33,59,0)
(28,37,0)
(43,18,0)
(45,43,0)
(50,55,0)
(15,54,0)
(18,20,0)
(59,32,0)
(49,40,0)
(44,50,0)
(19,37,0)
(23,29,0)
(31,25,0)
(42,50,0)
(29,23,0)
(59,54,0)
(36,2,0)
(12,7,0)
(3,54,0)
(1,48,0)
(17,28,0)
(22,43,0)
(26,37,0)
(0,2,0)
(29,48,0)
(11,16,0)
(2,37,0)
(6,55,0)
(43,51,0)
(16,7,0)
(53,25,0)
(38,32,0)
(60,54,0)
(9,51,0)
(23,42,0)
(30,55,0)
(40,11,0)
(58,44,0)
(61,44,0)
(35,34,0)
(52,3,0)
(47,59,0)
(8,50,0)
(18,25,0)
(48,51,0)
(56,42,0)
(4,3,0)
(21,12,0)
(34,54,0)
(32,12,0)
(5,11,0)
(32,59,0)
(13,55,0)
(24,40,0)
(14,48,0)
(11,40,0)
(25,37,0)
(51,55,0)
(48,29,0)
(41,16,0)
(46,55,0)
(40,54,0)
(41,11,1)
(11,40,1)
(48,1,1)
(59,47,1)
(40,49,1)
(49,24,1)
(3,4,1)
(19,3,1)
(52,34,1)
(24,12,1)
(31,53,1)
(48,51,1)
(34,35,1)
(28,17,1)
(39,30,1)
(32,38,1)
(60,51,1)
(36,0,1)
(43,22,1)
(28,37,1)
(51,9,1)
(12,21,1)
(27,23,1)
(23,29,1)
(2,37,1)
(54,15,1)
(0,28,1)
(43,37,1)
(21,32,1)
(35,16,1)
(18,25,1)
(5,40,1)
(59,54,1)
(14,2,1)
(25,31,1)
(17,18,1)
(52,54,1)
(40,54,1)
(3,54,1)
(26,19,1)
(33,3,1)
(0,37,1)
(2,36,1)
(11,5,1)
(15,60,1)
(25,37,1)
(16,41,1)
(45,2,1)
(34,54,1)
(43,51,1)
(32,59,1)
(37,26,1)
(22,45,1)
(53,43,1)
(9,39,1)
(38,59,1)
(47,33,1)
(4,52,1)
(29,48,1)
(1,14,1)
(59,3,2)
(22,2,2)
(47,3,2)
(11,3,2)
(0,2,2)
(48,51,2)
(31,2,2)
(49,3,2)
(59,54,2)
(45,2,2)
(21,3,2)
(32,3,2)
(34,3,2)
(4,3,2)
(29,48,2)
(3,3,2)
(43,2,2)
(18,25,2)
(35,3,2)
(33,3,2)
(12,3,2)
(17,2,2)
(28,37,2)
(5,3,2)
(3,54,2)
(53,2,2)
(40,54,2)
(24,3,2)
(32,59,2)
(38,3,2)
(28,2,2)
(18,2,2)
(11,40,2)
(34,54,2)
(25,37,2)
(2,2,2)
(40,3,2)
(52,3,2)
(25,2,2)
(43,37,2)
(43,51,2)
(2,37,2)
(23,29,2)
(16,3,2)
(36,2,2)
(41,3,2)
-----------------------------------
(0,i)
(1,0)
(2,i < 100)
(3,i < 100)
(4,100)
(5,intTwo)
(6,dataBadBuffer)
(7,)
(8,source)
(9,dataBadBuffer)
(10,dataGoodBuffer)
(11,source[i].intTwo)
(12,source[i].intOne = 0)
(13,data)
(14,data)
(15,0)
(16,source[i].intTwo = 0)
(17,i)
(18,data[i] = source[i])
(19,i)
(20,)
(21,0)
(22,i)
(23,printStructLine(&data[0])
(24,source)
(25,source[i])
(26,0)
(27,RET)
(28,i++)
(29,&data[0])
(30,goto source;)
(31,i)
(32,source[i].intOne)
(33,source)
(34,i++)
(35,i)
(36,100)
(37,i = 0)
(38,intOne)
(39,data)
(40,source[i])
(41,0)
(42,)
(43,data[i])
(44,)
(45,data)
(46,source:)
(47,i)
(48,data[0])
(49,i)
(50,)
(51,data = dataBadBuffer)
(52,i)
(53,source)
(54,i = 0)
(55,)
(56,for (i = 0; i < 100; i++)
(57,i)
(58,i)
(59,source[i])
(60,i)
(61,for (i = 0; i < 100; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^