-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_03_bad()
{
    wchar_t * data;
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    if(5==5)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
54,55
54,56
55,56
55,57
58,59
58,60
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
72,73
72,74
72,75
72,76
72,77
73,74
74,75
74,76
76,77
76,78
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
100,101
100,102
100,103
100,104
100,105
101,102
103,104
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,14,16,17,21,23,26,28,31,32,35,37,38,42,44,47,49,52,53,56,57,62,64,69,70,71,75,77,79,83,85,86,88,89,94,96,97,98,102,104,105,106,108,112,114
-----computeFrom-----
27,28
27,29
48,49
48,50
55,56
55,57
60,61
60,62
66,67
66,68
87,88
87,89
91,92
91,93
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_03_bad(){    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(5==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_03_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_03_bad
{    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(5==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)ALLOCA(50*sizeof(wchar_t))
(wchar_t *)ALLOCA(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(50*sizeof(wchar_t))
ALLOCA
ALLOCA
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
dataGoodBuffer
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if(5==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(24,35,0)
(28,6,0)
(36,20,0)
(12,20,0)
(2,19,0)
(6,22,0)
(35,20,0)
(32,9,0)
(16,36,0)
(33,2,0)
(30,31,0)
(15,20,0)
(25,24,0)
(18,8,0)
(27,2,0)
(32,14,0)
(32,34,0)
(35,24,0)
(34,32,0)
(26,35,0)
(29,36,0)
(14,6,0)
(37,36,0)
(24,4,0)
(17,22,0)
(13,18,0)
(9,20,0)
(10,31,0)
(1,9,0)
(8,18,0)
(24,25,0)
(21,20,0)
(11,37,0)
(5,20,0)
(37,2,0)
(3,19,0)
(4,8,0)
(6,14,0)
(2,35,0)
(8,4,0)
(9,32,0)
(0,8,0)
(4,24,0)
(14,32,0)
(22,6,0)
(32,14,1)
(32,34,1)
(37,11,1)
(29,3,1)
(3,2,1)
(30,9,1)
(27,31,1)
(24,4,1)
(37,2,1)
(2,35,1)
(11,29,1)
(24,25,1)
(0,26,1)
(31,10,1)
(18,13,1)
(2,33,1)
(13,0,1)
(22,17,1)
(1,35,1)
(4,8,1)
(35,24,1)
(7,37,1)
(6,22,1)
(28,1,1)
(9,32,1)
(14,6,1)
(29,31,1)
(8,18,1)
(17,28,1)
(10,30,1)
(33,27,1)
(32,34,2)
(24,4,2)
(37,2,2)
(2,31,2)
(32,14,2)
(35,24,2)
(27,31,2)
(9,32,2)
(3,31,2)
(6,22,2)
(14,6,2)
(33,31,2)
(24,25,2)
(2,35,2)
(8,18,2)
(4,8,2)
-----------------------------------
(0,50)
(1,dataGoodBuffer)
(2,data = dataBadBuffer)
(3,\'\\\\0\')
(4,ALLOCA(50*sizeof(wchar_t)
(5,dataGoodBuffer)
(6,100*sizeof(wchar_t)
(7,RET)
(8,50*sizeof(wchar_t)
(9,* dataGoodBuffer = (wchar_t *)
(10,5)
(11,data)
(12,dataBadBuffer)
(13,wchar_t)
(14,ALLOCA(100*sizeof(wchar_t)
(15,data)
(16,source)
(17,wchar_t)
(18,sizeof(wchar_t)
(19,)
(20,)
(21,if(5==5)
(22,sizeof(wchar_t)
(23,'\\\\0')
(24,(wchar_t *)
(25,wchar_t *)
(26,dataBadBuffer)
(27,data)
(28,100)
(29,'\\\\0')
(30,5)
(31,5==5)
(32,(wchar_t *)
(33,dataBadBuffer)
(34,wchar_t *)
(35,* dataBadBuffer = (wchar_t *)
(36,)
(37,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^