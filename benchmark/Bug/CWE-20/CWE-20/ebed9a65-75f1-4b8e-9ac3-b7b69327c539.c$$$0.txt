-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,93,94,99,101,102,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
55,56
55,57
59,60
59,61
63,64
63,65
85,86
85,87
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,37,0)
(19,39,0)
(15,36,0)
(12,9,0)
(25,14,0)
(32,19,0)
(26,20,0)
(0,6,0)
(39,3,0)
(47,14,0)
(4,41,0)
(2,19,0)
(29,9,0)
(28,52,0)
(53,5,0)
(33,60,0)
(36,54,0)
(36,52,0)
(54,3,0)
(34,50,0)
(20,30,0)
(31,6,0)
(3,54,0)
(1,33,0)
(33,44,0)
(43,25,0)
(50,38,0)
(20,14,0)
(11,16,0)
(44,30,0)
(60,30,0)
(52,36,0)
(39,16,0)
(61,39,0)
(14,25,0)
(47,39,0)
(6,7,0)
(29,50,0)
(59,5,0)
(37,18,0)
(29,39,0)
(14,20,0)
(46,29,0)
(57,39,0)
(58,60,0)
(6,38,0)
(8,20,0)
(33,5,0)
(21,7,0)
(22,39,0)
(54,36,0)
(3,39,0)
(45,16,0)
(6,39,0)
(23,30,0)
(35,61,0)
(13,47,0)
(56,44,0)
(48,41,0)
(10,44,0)
(20,44,0)
(30,16,0)
(55,16,0)
(51,7,0)
(3,27,0)
(20,39,0)
(9,29,0)
(7,6,0)
(17,9,0)
(24,22,0)
(27,3,0)
(22,30,0)
(14,47,0)
(61,30,0)
(49,18,0)
(37,40,0)
(5,33,0)
(60,58,1)
(49,19,1)
(50,34,1)
(25,43,1)
(33,44,1)
(47,39,1)
(26,8,1)
(43,47,1)
(58,33,1)
(39,3,1)
(24,61,1)
(22,39,1)
(33,5,1)
(2,39,1)
(15,57,1)
(44,56,1)
(10,50,1)
(8,44,1)
(29,9,1)
(14,47,1)
(6,39,1)
(17,12,1)
(6,7,1)
(56,10,1)
(47,13,1)
(13,26,1)
(54,36,1)
(53,59,1)
(48,19,1)
(7,21,1)
(29,39,1)
(61,39,1)
(5,53,1)
(36,52,1)
(0,31,1)
(3,54,1)
(61,35,1)
(37,18,1)
(35,60,1)
(1,20,1)
(9,17,1)
(19,39,1)
(20,44,1)
(22,24,1)
(41,4,1)
(20,39,1)
(21,51,1)
(59,1,1)
(48,37,1)
(20,14,1)
(51,0,1)
(3,27,1)
(52,28,1)
(28,15,1)
(19,32,1)
(46,6,1)
(42,22,1)
(10,41,1)
(31,41,1)
(32,2,1)
(18,49,1)
(12,46,1)
(14,25,1)
(34,29,1)
(4,48,1)
(0,41,2)
(20,39,2)
(12,41,2)
(22,39,2)
(46,41,2)
(3,27,2)
(18,19,2)
(31,41,2)
(39,3,2)
(61,39,2)
(19,39,2)
(6,41,2)
(51,41,2)
(17,41,2)
(47,39,2)
(33,44,2)
(14,25,2)
(36,52,2)
(54,36,2)
(6,7,2)
(49,19,2)
(20,14,2)
(14,47,2)
(7,41,2)
(37,18,2)
(29,41,2)
(33,5,2)
(3,54,2)
(29,9,2)
(29,39,2)
(20,44,2)
(6,39,2)
(37,19,2)
(34,41,2)
(50,41,2)
(21,41,2)
(9,41,2)
-----------------------------------
(0,\\\'A\\\')
(1,dest)
(2,data)
(3,(char *)
(4,5)
(5,50-1)
(6,memset(data, \\\'A\\\', 100-1)
(7,100-1)
(8,dest)
(9,100-1)
(10,dest)
(11,if (data == NULL)
(12,100)
(13,data)
(14,strlen(data)
(15,100)
(16,)
(17,1)
(18,-1)
(19,data == NULL)
(20,memmove(dest, data, strlen(data)
(21,1)
(22,free(data)
(23,dest)
(24,data)
(25,sizeof(char)
(26,data)
(27,char *)
(28,char)
(29,data[100-1])
(30,)
(31,data)
(32,NULL)
(33,dest[50-1])
(34,\\\'\\\\0\\\')
(35,data)
(36,100*sizeof(char)
(37,exit(-1)
(38,)
(39,data = (char *)
(40,)
(41,5==5)
(42,RET)
(43,char)
(44,dest[50] = "")
(45,data)
(46,data)
(47,strlen(data)
(48,5)
(49,1)
(50,data[100-1] = \\\'\\\\0\\\')
(51,100)
(52,sizeof(char)
(53,1)
(54,malloc(100*sizeof(char)
(55,if(5==5)
(56,"")
(57,data)
(58,\\\'\\\\0\\\')
(59,50)
(60,dest[50-1] = \\\'\\\\0\\\')
(61,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^