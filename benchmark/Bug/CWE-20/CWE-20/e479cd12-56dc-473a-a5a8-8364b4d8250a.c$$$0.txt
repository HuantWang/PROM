-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
62,65
63,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,66,69,71,74,78,80
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_17_bad()
CWE190_Integer_Overflow__char_rand_preinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,8,0)
(4,6,0)
(42,24,0)
(2,30,0)
(36,17,0)
(12,25,0)
(20,6,0)
(24,18,0)
(12,20,0)
(34,26,0)
(23,26,0)
(20,42,0)
(17,25,0)
(18,24,0)
(25,10,0)
(1,2,0)
(41,8,0)
(11,34,0)
(9,25,0)
(21,30,0)
(27,26,0)
(39,6,0)
(29,8,0)
(24,42,0)
(7,42,0)
(6,8,0)
(31,12,0)
(22,24,0)
(17,42,0)
(16,23,0)
(37,8,0)
(17,6,0)
(20,25,0)
(40,8,0)
(15,26,0)
(19,2,0)
(38,30,0)
(14,21,0)
(24,22,0)
(5,34,0)
(3,20,0)
(28,20,0)
(42,32,0)
(33,30,0)
(16,42,1)
(20,6,1)
(35,2,1)
(17,6,1)
(12,31,1)
(31,20,1)
(38,34,1)
(1,30,1)
(26,27,1)
(21,14,1)
(17,36,1)
(1,21,1)
(5,23,1)
(30,33,1)
(23,26,1)
(34,11,1)
(18,7,1)
(27,15,1)
(5,26,1)
(2,19,1)
(7,34,1)
(42,24,1)
(6,4,1)
(21,30,1)
(17,42,1)
(12,20,1)
(23,16,1)
(28,17,1)
(19,1,1)
(15,6,1)
(14,12,1)
(24,18,1)
(33,38,1)
(24,22,1)
(36,2,1)
(20,3,1)
(3,28,1)
(34,26,1)
(20,42,1)
(2,30,1)
(11,5,1)
(4,39,1)
(23,26,2)
(24,34,2)
(2,30,2)
(11,34,2)
(20,2,2)
(17,2,2)
(19,2,2)
(20,42,2)
(18,34,2)
(42,34,2)
(24,22,2)
(36,2,2)
(12,2,2)
(5,34,2)
(3,2,2)
(16,34,2)
(12,20,2)
(24,18,2)
(1,2,2)
(7,34,2)
(17,6,2)
(21,30,2)
(34,34,2)
(21,2,2)
(14,2,2)
(20,6,2)
(2,2,2)
(42,24,2)
(17,42,2)
(23,34,2)
(31,2,2)
(34,26,2)
(28,2,2)
-----------------------------------
(0,j)
(1,j)
(2,j < 1)
(3,data)
(4,' ')
(5,i)
(6,data = \' \')
(7,data)
(8,)
(9,result)
(10,)
(11,1)
(12,printHexCharLine(result)
(13,data = ' ')
(14,j)
(15,i)
(16,i)
(17,++data)
(18,RAND32()
(19,1)
(20,result = data)
(21,j++)
(22,char)
(23,i++)
(24,(char)
(25,)
(26,i = 0)
(27,0)
(28,result)
(29,i)
(30,j = 0)
(31,result)
(32,)
(33,0)
(34,i < 1)
(35,RET)
(36,data)
(37,for(i = 0; i < 1; i++)
(38,j)
(39,data)
(40,for(j = 0; j < 1; j++)
(41,data)
(42,data = (char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^