-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(10,33,0)
(33,12,0)
(66,64,0)
(42,36,0)
(58,64,0)
(35,17,0)
(45,12,0)
(60,62,0)
(5,27,0)
(47,62,0)
(14,64,0)
(24,34,0)
(28,61,0)
(23,56,0)
(16,24,0)
(26,18,0)
(41,18,0)
(66,13,0)
(34,24,0)
(18,41,0)
(6,41,0)
(44,34,0)
(20,40,0)
(18,15,0)
(34,43,0)
(1,65,0)
(54,27,0)
(65,1,0)
(0,28,0)
(36,64,0)
(56,15,0)
(11,53,0)
(32,58,0)
(15,52,0)
(64,61,0)
(14,28,0)
(59,40,0)
(7,17,0)
(66,30,0)
(67,10,0)
(63,53,0)
(9,61,0)
(53,64,0)
(56,62,0)
(68,64,0)
(13,27,0)
(49,14,0)
(58,15,0)
(4,52,0)
(30,66,0)
(50,20,0)
(33,64,0)
(19,33,0)
(46,18,0)
(33,62,0)
(43,15,0)
(58,62,0)
(21,36,0)
(51,10,0)
(20,53,0)
(33,10,0)
(53,20,0)
(65,2,0)
(22,5,0)
(55,1,0)
(25,14,0)
(27,5,0)
(64,66,0)
(53,15,0)
(13,66,0)
(53,62,0)
(3,52,0)
(56,64,0)
(29,15,0)
(40,20,0)
(12,15,0)
(31,41,0)
(62,52,0)
(57,24,0)
(27,13,0)
(48,43,0)
(42,64,1)
(59,50,1)
(47,60,1)
(10,67,1)
(68,17,1)
(18,41,1)
(66,13,1)
(67,51,1)
(63,43,1)
(24,57,1)
(39,56,1)
(62,47,1)
(53,62,1)
(64,66,1)
(0,14,1)
(26,46,1)
(40,59,1)
(53,64,1)
(13,27,1)
(22,54,1)
(12,45,1)
(48,34,1)
(33,64,1)
(49,65,1)
(32,12,1)
(53,20,1)
(41,6,1)
(46,28,1)
(14,25,1)
(20,40,1)
(43,48,1)
(49,36,1)
(6,31,1)
(58,62,1)
(33,10,1)
(17,35,1)
(16,44,1)
(11,63,1)
(27,5,1)
(44,18,1)
(14,64,1)
(5,22,1)
(21,42,1)
(56,64,1)
(23,58,1)
(36,21,1)
(45,33,1)
(55,36,1)
(58,64,1)
(34,24,1)
(35,7,1)
(19,53,1)
(25,49,1)
(54,68,1)
(57,16,1)
(65,1,1)
(33,62,1)
(66,30,1)
(56,62,1)
(50,11,1)
(1,55,1)
(31,26,1)
(36,64,1)
(7,62,1)
(46,17,1)
(51,19,1)
(56,23,1)
(58,32,1)
(28,0,1)
(65,36,2)
(33,64,2)
(64,66,2)
(53,62,2)
(22,17,2)
(58,64,2)
(33,62,2)
(33,10,2)
(36,17,2)
(66,30,2)
(20,40,2)
(27,17,2)
(42,17,2)
(64,17,2)
(21,17,2)
(36,64,2)
(5,17,2)
(55,36,2)
(25,17,2)
(56,64,2)
(65,1,2)
(54,17,2)
(34,24,2)
(14,17,2)
(53,64,2)
(53,20,2)
(49,17,2)
(13,27,2)
(66,17,2)
(58,62,2)
(14,64,2)
(1,36,2)
(56,62,2)
(18,41,2)
(66,13,2)
(68,17,2)
(0,17,2)
(27,5,2)
(13,17,2)
(28,17,2)
-----------------------------------
(0,'\\\\0')
(1,-1)
(2,)
(3,data)
(4,if(STATIC_CONST_FIVE==5)
(5,sizeof(char)
(6,1)
(7,STATIC_CONST_FIVE)
(8,\'\\\\0\')
(9,if (data == NULL)
(10,100-1)
(11,source)
(12,data[100-1] = '\\\\0')
(13,malloc(50*sizeof(char)
(14,data[0])
(15,)
(16,100)
(17,STATIC_CONST_FIVE==5)
(18,memset(source, 'C', 100-1)
(19,data)
(20,100*sizeof(char)
(21,NULL)
(22,char)
(23,data)
(24,100-1)
(25,0)
(26,'C')
(27,50*sizeof(char)
(28,data[0] = \'\\\\0\')
(29,source)
(30,char *)
(31,100)
(32,data)
(33,data[100-1])
(34,source[100-1])
(35,5)
(36,data == NULL)
(37,memset(source, \'C\', 100-1)
(38,data[0] = '\\\\0')
(39,RET)
(40,sizeof(char)
(41,100-1)
(42,data)
(43,source[100-1] = '\\\\0')
(44,source)
(45,'\\\\0')
(46,source)
(47,NULL)
(48,'\\\\0')
(49,data)
(50,100)
(51,100)
(52,)
(53,memmove(data, source, 100*sizeof(char)
(54,50)
(55,1)
(56,free(data)
(57,1)
(58,printLine(data)
(59,char)
(60,data)
(61,)
(62,data = NULL)
(63,data)
(64,data = (char *)
(65,exit(-1)
(66,(char *)
(67,1)
(68,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^