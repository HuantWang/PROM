-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14_bad()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
57,58
57,59
59,60
59,61
59,62
61,62
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
86,87
87,88
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,62,65,70,72,77,78,81,82,85,91,93,96,98,102,105,106,110,112
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
75,76
75,77
79,80
79,81
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14_bad(){    int * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14_bad
{    int * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(15,16,0)
(46,54,0)
(23,54,0)
(2,20,0)
(54,48,0)
(9,2,0)
(17,16,0)
(49,22,0)
(10,19,0)
(32,16,0)
(13,14,0)
(51,25,0)
(31,10,0)
(3,47,0)
(44,50,0)
(51,48,0)
(5,17,0)
(42,24,0)
(17,48,0)
(51,29,0)
(27,11,0)
(14,11,0)
(41,14,0)
(48,51,0)
(15,48,0)
(0,11,0)
(39,12,0)
(54,23,0)
(24,20,0)
(37,21,0)
(40,24,0)
(38,19,0)
(45,34,0)
(55,48,0)
(19,10,0)
(30,53,0)
(8,1,0)
(18,20,0)
(7,15,0)
(25,51,0)
(43,12,0)
(15,34,0)
(28,34,0)
(34,14,0)
(29,19,0)
(23,34,0)
(12,20,0)
(36,16,0)
(12,41,0)
(16,11,0)
(1,48,0)
(17,20,0)
(17,37,0)
(4,54,0)
(6,41,0)
(26,1,0)
(12,37,0)
(50,3,0)
(54,16,0)
(19,29,0)
(33,22,0)
(29,51,0)
(56,17,0)
(3,50,0)
(37,12,0)
(48,53,0)
(52,20,0)
(4,46,1)
(46,24,1)
(19,10,1)
(56,5,1)
(12,43,1)
(16,36,1)
(2,20,1)
(43,39,1)
(24,40,1)
(41,6,1)
(12,20,1)
(8,48,1)
(17,20,1)
(12,41,1)
(55,22,1)
(22,49,1)
(29,19,1)
(15,7,1)
(17,48,1)
(1,48,1)
(40,42,1)
(10,31,1)
(6,22,1)
(49,33,1)
(38,55,1)
(1,26,1)
(3,50,1)
(17,56,1)
(33,16,1)
(42,2,1)
(15,48,1)
(5,24,1)
(6,3,1)
(7,23,1)
(24,20,1)
(18,52,1)
(51,25,1)
(20,18,1)
(52,41,1)
(54,4,1)
(2,9,1)
(6,1,1)
(50,44,1)
(54,16,1)
(36,32,1)
(48,51,1)
(42,20,1)
(54,48,1)
(51,29,1)
(23,54,1)
(37,12,1)
(26,8,1)
(9,37,1)
(39,17,1)
(17,16,1)
(44,1,1)
(15,16,1)
(35,15,1)
(31,38,1)
(50,1,2)
(56,24,2)
(8,22,2)
(26,22,2)
(44,1,2)
(40,24,2)
(3,1,2)
(24,24,2)
(42,24,2)
(12,20,2)
(3,50,2)
(2,20,2)
(9,24,2)
(55,22,2)
(1,48,2)
(43,24,2)
(19,10,2)
(54,48,2)
(19,22,2)
(23,54,2)
(31,22,2)
(15,48,2)
(51,29,2)
(54,16,2)
(12,41,2)
(37,12,2)
(48,22,2)
(1,22,2)
(2,24,2)
(15,16,2)
(24,20,2)
(17,20,2)
(29,19,2)
(17,16,2)
(37,24,2)
(48,51,2)
(17,24,2)
(51,25,2)
(5,24,2)
(29,22,2)
(10,22,2)
(39,24,2)
(51,22,2)
(17,48,2)
(38,22,2)
(12,24,2)
-----------------------------------
(0,data)
(1,data == NULL)
(2,i++)
(3,exit(-1)
(4,0)
(5,data)
(6,source)
(7,data)
(8,data)
(9,i)
(10,sizeof(int)
(11,)
(12,source[i])
(13,source)
(14,)
(15,free(data)
(16,data = NULL)
(17,data[i])
(18,0)
(19,50*sizeof(int)
(20,i = 0)
(21,)
(22,globalFive==5)
(23,printIntLine(data[0])
(24,i < 100)
(25,int *)
(26,NULL)
(27,if(globalFive==5)
(28,i)
(29,malloc(50*sizeof(int)
(30,if (data == NULL)
(31,int)
(32,data)
(33,globalFive)
(34,)
(35,RET)
(36,NULL)
(37,data[i] = source[i])
(38,50)
(39,source)
(40,100)
(41,source[100] = {0})
(42,i)
(43,i)
(44,1)
(45,for (i = 0; i < 100; i++)
(46,data)
(47,)
(48,data = (int *)
(49,5)
(50,-1)
(51,(int *)
(52,i)
(53,)
(54,data[0])
(55,data)
(56,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^