-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_10_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_10_bad(){    long * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_10_bad()
CWE415_Double_Free__malloc_free_long_10_bad
{    long * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
globalTrue
globalTrue
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(9,16,0)
(14,21,0)
(25,15,0)
(10,28,0)
(22,15,0)
(0,28,0)
(14,12,0)
(3,21,0)
(18,1,0)
(7,20,0)
(5,7,0)
(21,14,0)
(17,22,0)
(8,30,0)
(32,16,0)
(1,18,0)
(11,14,0)
(21,15,0)
(12,7,0)
(23,8,0)
(26,20,0)
(4,2,0)
(14,11,0)
(28,21,0)
(6,18,0)
(20,26,0)
(20,7,0)
(31,2,0)
(7,12,0)
(8,21,0)
(1,24,0)
(16,2,0)
(12,14,0)
(27,2,0)
(8,16,0)
(22,21,0)
(10,0,1)
(22,17,1)
(23,29,1)
(14,11,1)
(0,21,1)
(12,7,1)
(14,12,1)
(18,6,1)
(29,19,1)
(1,18,1)
(6,28,1)
(7,20,1)
(16,32,1)
(20,26,1)
(8,16,1)
(32,9,1)
(20,5,1)
(19,16,1)
(8,21,1)
(5,3,1)
(13,29,1)
(28,10,1)
(22,21,1)
(3,19,1)
(17,1,1)
(13,8,1)
(28,21,1)
(8,23,1)
(17,28,1)
(29,22,1)
(21,14,1)
(0,19,2)
(22,21,2)
(23,29,2)
(18,28,2)
(28,19,2)
(7,19,2)
(1,18,2)
(1,28,2)
(21,19,2)
(21,14,2)
(14,11,2)
(20,19,2)
(22,19,2)
(14,12,2)
(10,19,2)
(5,19,2)
(12,19,2)
(8,21,2)
(3,19,2)
(14,19,2)
(7,20,2)
(6,28,2)
(28,21,2)
(20,26,2)
(8,29,2)
(12,7,2)
(8,16,2)
(17,19,2)
-----------------------------------
(0,data)
(1,exit(-1)
(2,)
(3,data)
(4,if(globalTrue)
(5,100)
(6,1)
(7,100*sizeof(long)
(8,free(data)
(9,data)
(10,NULL)
(11,long *)
(12,malloc(100*sizeof(long)
(13,RET)
(14,(long *)
(15,)
(16,data = NULL)
(17,data)
(18,-1)
(19,globalTrue)
(20,sizeof(long)
(21,data = (long *)
(22,free(data)
(23,data)
(24,)
(25,if (data == NULL)
(26,long)
(27,if(globalTrue)
(28,data == NULL)
(29,globalTrue)
(30,)
(31,data)
(32,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^