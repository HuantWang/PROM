-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
        break;
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(wchar_t));
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
break;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memmove(data, source, 100*sizeof(wchar_t));
memmove(data, source, 100*sizeof(wchar_t))
memmove
memmove
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(19,7,0)
(39,20,0)
(33,7,0)
(9,31,0)
(17,19,0)
(10,5,0)
(9,29,0)
(5,29,0)
(16,39,0)
(41,31,0)
(12,42,0)
(29,36,0)
(21,34,0)
(2,16,0)
(29,42,0)
(18,31,0)
(32,15,0)
(15,12,0)
(18,29,0)
(4,36,0)
(25,36,0)
(15,32,0)
(9,19,0)
(42,8,0)
(8,42,0)
(42,29,0)
(35,36,0)
(34,38,0)
(11,9,0)
(6,40,0)
(31,7,0)
(27,32,0)
(18,19,0)
(42,12,0)
(5,31,0)
(38,34,0)
(23,15,0)
(22,29,0)
(38,5,0)
(28,31,0)
(5,19,0)
(0,40,0)
(5,38,0)
(30,5,0)
(39,16,0)
(1,38,0)
(40,29,0)
(3,19,0)
(14,7,0)
(12,15,0)
(43,31,0)
(13,18,0)
(5,19,1)
(18,19,1)
(42,8,1)
(40,6,1)
(32,27,1)
(29,42,1)
(13,43,1)
(5,29,1)
(18,29,1)
(38,34,1)
(19,3,1)
(34,21,1)
(23,22,1)
(24,19,1)
(9,29,1)
(16,2,1)
(10,30,1)
(39,16,1)
(40,29,1)
(11,18,1)
(41,24,1)
(22,24,1)
(43,5,1)
(9,11,1)
(4,40,1)
(12,15,1)
(3,17,1)
(1,10,1)
(15,32,1)
(5,38,1)
(4,39,1)
(35,4,1)
(42,12,1)
(0,29,1)
(27,23,1)
(37,9,1)
(41,35,1)
(6,0,1)
(21,1,1)
(9,19,1)
(18,13,1)
(2,40,1)
(30,41,1)
(15,24,2)
(12,24,2)
(23,24,2)
(39,40,2)
(22,24,2)
(27,24,2)
(5,19,2)
(38,34,2)
(39,16,2)
(32,24,2)
(40,24,2)
(9,19,2)
(18,19,2)
(42,12,2)
(5,38,2)
(18,29,2)
(29,24,2)
(42,8,2)
(29,42,2)
(9,29,2)
(40,29,2)
(0,24,2)
(16,40,2)
(5,29,2)
(2,40,2)
(15,32,2)
(6,24,2)
(12,15,2)
(4,24,2)
(42,24,2)
(35,24,2)
-----------------------------------
(0,data)
(1,100)
(2,1)
(3,NULL)
(4,'\\\\0')
(5,memmove(data, source, 100*sizeof(wchar_t)
(6,NULL)
(7,)
(8,wchar_t *)
(9,free(data)
(10,source)
(11,data)
(12,malloc(50*sizeof(wchar_t)
(13,data)
(14,data)
(15,50*sizeof(wchar_t)
(16,-1)
(17,data)
(18,printWLine(data)
(19,data = NULL)
(20,)
(21,wchar_t)
(22,data)
(23,50)
(24,1)
(25,if (data == NULL)
(26,\'\\\\0\')
(27,wchar_t)
(28,source)
(29,data = (wchar_t *)
(30,data)
(31,)
(32,sizeof(wchar_t)
(33,while(1)
(34,sizeof(wchar_t)
(35,break;)
(36,)
(37,RET)
(38,100*sizeof(wchar_t)
(39,exit(-1)
(40,data == NULL)
(41,'\\\\0')
(42,(wchar_t *)
(43,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^