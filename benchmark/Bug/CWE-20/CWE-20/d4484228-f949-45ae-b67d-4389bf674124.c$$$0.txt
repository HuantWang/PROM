-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_01_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
45,46
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
52,53
53,54
53,55
54,55
57,58
57,59
58,59
61,62
62,63
64,65
64,66
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
71,72
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
81,82
85,86
85,87
85,88
86,87
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
106,107
107,108
107,109
108,109
108,110
109,110
111,112
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
123,124
123,125
124,125
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,32,34,39,41,43,48,50,55,56,59,60,63,70,72,73,74,80,82,83,84,89,91,96,97,100,101,104,110,112,115,117,121,125,126
-----computeFrom-----
30,31
30,32
53,54
53,55
57,58
57,59
66,67
66,68
76,77
76,78
94,95
94,96
98,99
98,100
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_01_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_01_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_01_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(36,37,0)
(28,19,0)
(38,46,0)
(1,4,0)
(22,0,0)
(59,6,0)
(29,37,0)
(51,9,0)
(49,6,0)
(51,36,0)
(24,22,0)
(52,17,0)
(0,22,0)
(12,39,0)
(26,3,0)
(48,34,0)
(42,34,0)
(33,17,0)
(7,52,0)
(36,51,0)
(56,46,0)
(16,19,0)
(20,37,0)
(34,17,0)
(53,17,0)
(21,15,0)
(4,37,0)
(11,26,0)
(27,17,0)
(5,48,0)
(32,56,0)
(40,34,0)
(45,19,0)
(16,49,0)
(15,3,0)
(50,11,0)
(6,34,0)
(11,38,0)
(0,15,0)
(43,41,0)
(23,0,0)
(30,36,0)
(55,48,0)
(19,52,0)
(13,37,0)
(31,4,0)
(25,22,0)
(48,37,0)
(35,39,0)
(38,11,0)
(47,36,0)
(10,56,0)
(41,46,0)
(39,52,0)
(8,46,0)
(22,46,0)
(14,20,0)
(58,38,0)
(6,49,0)
(48,51,0)
(49,16,0)
(2,6,0)
(54,38,0)
(18,46,0)
(57,26,0)
(48,34,1)
(47,48,1)
(29,56,1)
(26,57,1)
(2,59,1)
(38,46,1)
(22,46,1)
(56,46,1)
(32,10,1)
(20,37,1)
(16,49,1)
(34,42,1)
(20,14,1)
(41,43,1)
(5,4,1)
(23,22,1)
(10,46,1)
(13,29,1)
(4,37,1)
(18,8,1)
(22,25,1)
(36,30,1)
(48,55,1)
(58,15,1)
(59,4,1)
(46,18,1)
(50,38,1)
(48,37,1)
(21,0,1)
(57,11,1)
(31,20,1)
(25,24,1)
(41,46,1)
(6,34,1)
(15,21,1)
(56,32,1)
(1,31,1)
(8,34,1)
(36,37,1)
(11,38,1)
(24,56,1)
(51,36,1)
(54,58,1)
(30,47,1)
(38,54,1)
(4,1,1)
(37,13,1)
(55,5,1)
(10,41,1)
(11,50,1)
(6,2,1)
(44,16,1)
(0,22,1)
(31,37,1)
(43,26,1)
(42,40,1)
(49,6,1)
(0,23,1)
(14,51,1)
(24,56,2)
(22,46,2)
(48,37,2)
(21,56,2)
(31,4,2)
(26,56,2)
(6,34,2)
(58,56,2)
(4,37,2)
(1,4,2)
(57,56,2)
(36,37,2)
(4,4,2)
(10,56,2)
(5,4,2)
(51,36,2)
(38,46,2)
(47,4,2)
(22,56,2)
(15,56,2)
(56,46,2)
(20,37,2)
(56,56,2)
(32,56,2)
(38,56,2)
(50,56,2)
(23,56,2)
(25,56,2)
(54,56,2)
(51,4,2)
(43,56,2)
(55,4,2)
(11,38,2)
(41,46,2)
(48,4,2)
(49,6,2)
(41,56,2)
(20,4,2)
(14,4,2)
(0,22,2)
(30,4,2)
(36,4,2)
(0,56,2)
(16,49,2)
(48,34,2)
(11,56,2)
-----------------------------------
(0,source[i].intOne)
(1,100)
(2,0)
(3,)
(4,i < 100)
(5,data)
(6,data[0])
(7,source)
(8,i)
(9,)
(10,i)
(11,source[i].intTwo)
(12,i)
(13,0)
(14,i)
(15,source[i].intOne = 0)
(16,printStructLine(&data[0])
(17,)
(18,0)
(19,)
(20,i++)
(21,0)
(22,source[i])
(23,intOne)
(24,source)
(25,i)
(26,source[i].intTwo = 0)
(27,dataBadBuffer)
(28,i)
(29,i)
(30,i)
(31,i)
(32,100)
(33,dataGoodBuffer)
(34,data = dataBadBuffer)
(35,for (i = 0; i < 100; i++)
(36,source[i])
(37,i = 0)
(38,source[i])
(39,)
(40,data)
(41,i++)
(42,dataBadBuffer)
(43,i)
(44,RET)
(45,for (i = 0; i < 100; i++)
(46,i = 0)
(47,source)
(48,data[i])
(49,&data[0])
(50,intTwo)
(51,data[i] = source[i])
(52,)
(53,data)
(54,i)
(55,i)
(56,i < 100)
(57,0)
(58,source)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^