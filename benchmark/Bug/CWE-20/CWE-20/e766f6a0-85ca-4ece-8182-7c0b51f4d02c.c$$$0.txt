-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(65,1,0)
(28,51,0)
(3,49,0)
(60,31,0)
(27,9,0)
(51,8,0)
(31,7,0)
(52,8,0)
(24,63,0)
(62,44,0)
(37,64,0)
(8,23,0)
(59,25,0)
(14,62,0)
(35,2,0)
(12,38,0)
(33,30,0)
(0,19,0)
(61,31,0)
(18,12,0)
(17,0,0)
(26,25,0)
(9,62,0)
(23,8,0)
(34,42,0)
(60,8,0)
(55,19,0)
(40,1,0)
(6,43,0)
(60,42,0)
(30,42,0)
(36,57,0)
(11,34,0)
(51,19,0)
(57,19,0)
(39,24,0)
(46,2,0)
(41,23,0)
(50,51,0)
(12,18,0)
(47,62,0)
(21,62,0)
(20,18,0)
(2,24,0)
(43,8,0)
(23,41,0)
(26,41,0)
(2,16,0)
(10,42,0)
(29,42,0)
(25,26,0)
(53,26,0)
(2,8,0)
(4,23,0)
(41,26,0)
(56,30,0)
(51,37,0)
(54,3,0)
(66,43,0)
(51,31,0)
(45,0,0)
(37,51,0)
(23,4,0)
(58,19,0)
(1,16,0)
(48,60,0)
(13,63,0)
(9,8,0)
(32,62,0)
(8,62,0)
(22,62,0)
(5,60,0)
(45,17,1)
(30,33,1)
(23,41,1)
(23,4,1)
(8,23,1)
(51,8,1)
(34,42,1)
(65,40,1)
(27,3,1)
(9,8,1)
(36,37,1)
(43,66,1)
(34,11,1)
(26,25,1)
(29,10,1)
(53,52,1)
(12,18,1)
(2,35,1)
(59,53,1)
(51,19,1)
(57,19,1)
(0,45,1)
(37,51,1)
(60,42,1)
(48,30,1)
(15,9,1)
(54,1,1)
(19,58,1)
(2,8,1)
(60,8,1)
(1,16,1)
(20,43,1)
(28,0,1)
(46,1,1)
(58,55,1)
(17,19,1)
(60,5,1)
(40,30,1)
(57,36,1)
(56,34,1)
(1,65,1)
(17,57,1)
(24,39,1)
(39,2,1)
(55,24,1)
(5,48,1)
(0,19,1)
(50,28,1)
(51,31,1)
(56,42,1)
(9,27,1)
(66,6,1)
(25,59,1)
(6,8,1)
(33,56,1)
(18,20,1)
(2,16,1)
(61,60,1)
(10,43,1)
(41,26,1)
(30,42,1)
(31,61,1)
(3,54,1)
(35,46,1)
(43,8,1)
(42,29,1)
(51,50,1)
(10,12,1)
(11,31,1)
(27,0,1)
(51,0,2)
(12,43,2)
(33,30,2)
(24,1,2)
(57,19,2)
(34,30,2)
(20,43,2)
(30,30,2)
(12,18,2)
(60,42,2)
(35,1,2)
(34,42,2)
(41,26,2)
(3,1,2)
(45,1,2)
(60,30,2)
(60,8,2)
(37,0,2)
(1,16,2)
(23,4,2)
(18,43,2)
(17,1,2)
(8,23,2)
(51,19,2)
(31,30,2)
(61,30,2)
(0,1,2)
(0,19,2)
(51,8,2)
(2,16,2)
(36,0,2)
(55,1,2)
(39,1,2)
(56,30,2)
(57,0,2)
(50,0,2)
(48,30,2)
(5,30,2)
(2,1,2)
(43,8,2)
(30,42,2)
(2,8,2)
(54,1,2)
(19,1,2)
(51,31,2)
(37,51,2)
(46,1,2)
(9,8,2)
(23,41,2)
(58,1,2)
(28,0,2)
(11,30,2)
(17,0,2)
(0,0,2)
(26,25,2)
(45,0,2)
-----------------------------------
(0,i < 10)
(1,data >= 0)
(2,buffer[data])
(3,printLine("ERROR: Array index is negative.")
(4,int *)
(5,i)
(6,buffer)
(7,)
(8,* buffer = (int *)
(9,free(buffer)
(10,i)
(11,i)
(12,exit(-1)
(13,for(i = 0; i < 10; i++)
(14,i)
(15,RET)
(16,int data)
(17,i)
(18,-1)
(19,i = 0)
(20,1)
(21,if (buffer == NULL)
(22,for (i = 0; i < 10; i++)
(23,(int *)
(24,buffer[data] = 1)
(25,sizeof(int)
(26,10 * sizeof(int)
(27,buffer)
(28,buffer)
(29,0)
(30,i < 10)
(31,buffer[i] = 0)
(32,if (data >= 0)
(33,10)
(34,i++)
(35,data)
(36,i)
(37,printIntLine(buffer[i])
(38,)
(39,1)
(40,data)
(41,malloc(10 * sizeof(int)
(42,i = 0)
(43,buffer == NULL)
(44,)
(45,10)
(46,buffer)
(47,buffer)
(48,buffer)
(49,)
(50,i)
(51,buffer[i])
(52,buffer)
(53,10)
(54,"ERROR: Array index is negative.")
(55,i)
(56,i)
(57,i++)
(58,0)
(59,int)
(60,buffer[i])
(61,0)
(62,)
(63,)
(64,)
(65,0)
(66,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^