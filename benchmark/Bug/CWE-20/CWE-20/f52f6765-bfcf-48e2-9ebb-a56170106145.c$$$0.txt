-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            memcpy(data, source, (strlen(source) + 1) * sizeof(char));
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
79,80
79,81
79,82
81,82
82,83
82,84
85,86
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
99,101
100,101
102,103
105,106
106,107
106,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,62,66,68,69,73,74,78,80,83,84,87,91,93,95,101,103,104,107,108,112,114,118,120
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
82,83
82,84
96,97
96,98
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,5,0)
(9,34,0)
(37,32,0)
(24,10,0)
(5,17,0)
(42,50,0)
(16,31,0)
(23,5,0)
(51,32,0)
(29,21,0)
(4,53,0)
(39,29,0)
(17,32,0)
(41,34,0)
(18,47,0)
(19,45,0)
(0,17,0)
(31,10,0)
(26,47,0)
(46,2,0)
(27,21,0)
(26,2,0)
(6,37,0)
(53,4,0)
(21,29,0)
(36,45,0)
(54,46,0)
(3,50,0)
(48,32,0)
(36,34,0)
(4,52,0)
(34,36,0)
(11,29,0)
(49,13,0)
(15,32,0)
(44,53,0)
(30,15,0)
(2,26,0)
(14,21,0)
(33,32,0)
(1,35,0)
(10,15,0)
(35,20,0)
(45,36,0)
(21,15,0)
(14,10,0)
(35,31,0)
(46,13,0)
(17,47,0)
(25,31,0)
(34,21,0)
(13,46,0)
(34,10,0)
(12,14,0)
(34,31,0)
(26,22,0)
(50,47,0)
(47,26,0)
(2,46,0)
(22,26,0)
(27,10,0)
(38,37,0)
(20,36,0)
(47,32,0)
(40,27,0)
(8,20,0)
(20,35,0)
(36,20,0)
(7,21,0)
(21,29,1)
(8,35,1)
(44,50,1)
(13,49,1)
(18,37,1)
(23,50,1)
(45,19,1)
(36,45,1)
(50,47,1)
(9,31,1)
(14,12,1)
(54,18,1)
(35,1,1)
(3,47,1)
(43,23,1)
(2,46,1)
(16,21,1)
(34,21,1)
(4,53,1)
(42,3,1)
(20,35,1)
(47,26,1)
(6,38,1)
(26,22,1)
(1,41,1)
(14,21,1)
(49,54,1)
(28,14,1)
(27,21,1)
(19,20,1)
(36,20,1)
(0,5,1)
(25,16,1)
(40,34,1)
(34,36,1)
(17,0,1)
(27,40,1)
(41,9,1)
(11,7,1)
(12,27,1)
(7,17,1)
(23,4,1)
(29,39,1)
(50,42,1)
(39,11,1)
(53,44,1)
(20,8,1)
(26,2,1)
(31,25,1)
(17,47,1)
(35,31,1)
(37,6,1)
(46,13,1)
(5,43,1)
(34,31,1)
(36,20,2)
(26,22,2)
(50,47,2)
(36,45,2)
(47,26,2)
(27,21,2)
(2,46,2)
(4,50,2)
(34,21,2)
(35,31,2)
(34,31,2)
(14,21,2)
(34,36,2)
(17,47,2)
(26,2,2)
(20,35,2)
(53,50,2)
(4,53,2)
(44,50,2)
(21,29,2)
(46,13,2)
-----------------------------------
(0,data)
(1,source)
(2,malloc(10*sizeof(char)
(3,data)
(4,exit(-1)
(5,myUnion.unionFirst)
(6,NULL)
(7,data)
(8,1)
(9,data)
(10,)
(11,myUnion)
(12,data)
(13,sizeof(char)
(14,free(data)
(15,)
(16,source)
(17,myUnion.unionFirst = data)
(18,data)
(19,char)
(20,strlen(source)
(21,* data = myUnion.unionSecond)
(22,char *)
(23,myUnion)
(24,source)
(25,SRC_STRING)
(26,(char *)
(27,printLine(data)
(28,RET)
(29,myUnion.unionSecond)
(30,data)
(31,source[10+1] = SRC_STRING)
(32,)
(33,data)
(34,memcpy(data, source, (strlen(source)
(35,strlen(source)
(36,(strlen(source)
(37,data = NULL)
(38,data)
(39,unionSecond)
(40,data)
(41,source)
(42,NULL)
(43,unionFirst)
(44,1)
(45,sizeof(char)
(46,10*sizeof(char)
(47,data = (char *)
(48,if (data == NULL)
(49,char)
(50,data == NULL)
(51,myUnion)
(52,)
(53,-1)
(54,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^