-----label-----
1
-----code-----
static int * badSource(int * data)
{
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (int *)malloc(50*sizeof(int));
    if (data == NULL) {exit(-1);}
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,45
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    return data;}
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(20,8,0)
(3,7,0)
(15,18,0)
(8,16,0)
(1,18,0)
(8,7,0)
(12,17,0)
(17,12,0)
(20,5,0)
(7,8,0)
(13,1,0)
(3,18,0)
(4,19,0)
(21,20,0)
(14,16,0)
(11,7,0)
(19,5,0)
(2,20,0)
(7,11,0)
(7,3,0)
(8,5,0)
(18,1,0)
(19,16,0)
(9,19,0)
(12,10,0)
(19,8,0)
(18,3,0)
(0,8,0)
(6,17,0)
(17,6,1)
(3,18,1)
(4,19,1)
(19,5,1)
(12,17,1)
(9,12,1)
(20,8,1)
(19,8,1)
(8,5,1)
(13,15,1)
(2,8,1)
(1,13,1)
(21,2,1)
(7,3,1)
(7,11,1)
(20,21,1)
(18,1,1)
(19,9,1)
(15,0,1)
(20,5,1)
(6,20,1)
(8,7,1)
(9,20,1)
(8,7,2)
(19,8,2)
(3,18,2)
(17,20,2)
(20,8,2)
(12,20,2)
(18,1,2)
(7,3,2)
(8,5,2)
(19,5,2)
(6,20,2)
(4,19,2)
(20,5,2)
(7,11,2)
(12,17,2)
-----------------------------------
(0,data)
(1,sizeof(int)
(2,data)
(3,malloc(50*sizeof(int)
(4,RET)
(5,int * data)
(6,1)
(7,(int *)
(8,data = (int *)
(9,data)
(10,)
(11,int *)
(12,exit(-1)
(13,int)
(14,if (data == NULL)
(15,50)
(16,)
(17,-1)
(18,50*sizeof(int)
(19,return data;)
(20,data == NULL)
(21,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^