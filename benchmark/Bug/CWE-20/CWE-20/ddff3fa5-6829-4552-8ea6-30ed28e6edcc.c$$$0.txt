-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21_bad()
{
    int * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
34,35
34,36
36,37
36,38
36,39
38,39
40,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,39,42,47,49,54,55,58,59,62,68,70,73,75,79,82,83,87,89
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
52,53
52,54
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21_bad(){    int * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21_bad
{    int * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(34,18,0)
(29,4,0)
(8,11,0)
(29,31,0)
(2,9,0)
(5,39,0)
(16,14,0)
(31,17,0)
(40,29,0)
(13,19,0)
(9,26,0)
(15,3,0)
(22,1,0)
(27,4,0)
(33,29,0)
(11,4,0)
(41,3,0)
(19,16,0)
(26,39,0)
(25,14,0)
(0,18,0)
(9,18,0)
(3,20,0)
(4,14,0)
(35,0,0)
(36,21,0)
(7,39,0)
(6,5,0)
(32,16,0)
(11,5,0)
(37,21,0)
(23,26,0)
(12,1,0)
(1,18,0)
(24,16,0)
(29,18,0)
(30,5,0)
(3,4,0)
(21,14,0)
(20,5,0)
(31,9,0)
(4,19,0)
(10,9,0)
(19,4,0)
(20,3,0)
(38,18,0)
(39,14,0)
(9,31,0)
(12,0,1)
(8,20,1)
(15,1,1)
(13,27,1)
(2,10,1)
(35,31,1)
(29,4,1)
(28,11,1)
(26,23,1)
(10,29,1)
(1,22,1)
(33,1,1)
(32,24,1)
(4,19,1)
(34,38,1)
(16,32,1)
(37,36,1)
(19,16,1)
(3,41,1)
(41,15,1)
(40,33,1)
(9,18,1)
(20,3,1)
(18,34,1)
(19,13,1)
(11,8,1)
(38,26,1)
(0,35,1)
(21,37,1)
(27,21,1)
(9,2,1)
(31,9,1)
(29,18,1)
(11,4,1)
(36,16,1)
(29,40,1)
(9,26,1)
(22,12,1)
(0,18,1)
(3,4,1)
(1,18,1)
(12,18,1)
(23,4,1)
(0,1,2)
(2,1,2)
(29,1,2)
(19,16,2)
(9,18,2)
(40,1,2)
(31,9,2)
(4,19,2)
(31,1,2)
(1,1,2)
(10,1,2)
(12,1,2)
(9,26,2)
(20,3,2)
(33,1,2)
(29,4,2)
(11,4,2)
(3,4,2)
(35,1,2)
(1,18,2)
(9,1,2)
(29,18,2)
(0,18,2)
(22,1,2)
-----------------------------------
(0,i++)
(1,i < 100)
(2,i)
(3,data[0])
(4,data = badSource(data)
(5,)
(6,for (i = 0; i < 100; i++)
(7,source)
(8,data)
(9,source[i])
(10,source)
(11,free(data)
(12,i)
(13,data)
(14,)
(15,data)
(16,data = NULL)
(17,)
(18,i = 0)
(19,badSource(data)
(20,printIntLine(data[0])
(21,badStatic = 1)
(22,100)
(23,source)
(24,data)
(25,data)
(26,source[100] = {0})
(27,data)
(28,RET)
(29,data[i])
(30,i)
(31,data[i] = source[i])
(32,NULL)
(33,data)
(34,0)
(35,i)
(36,badStatic)
(37,1)
(38,i)
(39,)
(40,i)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^