-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad()
{
    void * data;
    void * *dataPtr1 = &data;
    void * *dataPtr2 = &data;
    data = NULL;
    {
        void * data = *dataPtr1;
        /* POTENTIAL FLAW: Set data to point to a wide string */
        data = (void *)WIDE_STRING;
        *dataPtr1 = data;
    }
    {
        void * data = *dataPtr2;
        {
            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
            size_t dataLen = strlen((char *)data);
            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
            (void)wcscpy(dest, data);
            printLine((char *)dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
62,63
63,64
63,65
64,65
65,66
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
85,86
85,87
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
94,95
96,97
98,99
99,100
99,101
101,102
101,103
101,104
104,105
105,106
105,107
106,107
106,108
108,109
110,111
110,112
111,112
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
123,124
124,125
124,126
125,126
125,127
128,129
128,130
128,131
129,130
131,132
133,134
135,136
136,137
136,138
137,138
139,140
139,141
140,141
140,142
142,143
144,145
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,61,66,68,72,74,75,79,84,86,90,93,95,97,100,102,103,107,109,112,117,118,121,122,126,127,130,132,134,138,141,143,145
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
113,114
113,115
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad(){    void * data;    void * *dataPtr1 = &data;    void * *dataPtr2 = &data;    data = NULL;    {        void * data = *dataPtr1;        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        *dataPtr1 = data;    }    {        void * data = *dataPtr2;        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad
{    void * data;    void * *dataPtr1 = &data;    void * *dataPtr2 = &data;    data = NULL;    {        void * data = *dataPtr1;        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        *dataPtr1 = data;    }    {        void * data = *dataPtr2;        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }}
void * data;
void * data;
void
* data
*
data
void * *dataPtr1 = &data;
void * *dataPtr1 = &data;
void
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
void * *dataPtr2 = &data;
void * *dataPtr2 = &data;
void
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        void * data = *dataPtr1;        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        *dataPtr1 = data;    }
void * data = *dataPtr1;
void * data = *dataPtr1;
void
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (void *)WIDE_STRING;
data = (void *)WIDE_STRING
data
data
(void *)WIDE_STRING
void *
void
*
*
WIDE_STRING
WIDE_STRING
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        void * data = *dataPtr2;        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }
void * data = *dataPtr2;
void * data = *dataPtr2;
void
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void
* dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
*
dest
= (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
(void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
void *
void
*
*
ALLOCA((dataLen+1) * sizeof(wchar_t))
ALLOCA
ALLOCA
(dataLen+1) * sizeof(wchar_t)
(dataLen+1)
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
-----joern-----
(42,28,0)
(24,44,0)
(65,62,0)
(6,14,0)
(35,24,0)
(52,12,0)
(60,42,0)
(16,50,0)
(63,19,0)
(36,24,0)
(20,59,0)
(43,12,0)
(63,24,0)
(52,4,0)
(51,59,0)
(35,62,0)
(13,12,0)
(37,49,0)
(61,38,0)
(4,14,0)
(29,52,0)
(8,50,0)
(10,24,0)
(51,22,0)
(46,32,0)
(32,41,0)
(58,14,0)
(15,17,0)
(49,52,0)
(2,63,0)
(22,53,0)
(12,13,0)
(62,23,0)
(47,10,0)
(19,10,0)
(38,14,0)
(44,14,0)
(59,20,0)
(50,33,0)
(3,57,0)
(1,46,0)
(22,46,0)
(27,28,0)
(45,19,0)
(30,13,0)
(34,28,0)
(33,50,0)
(7,38,0)
(17,0,0)
(64,8,0)
(13,30,0)
(48,44,0)
(11,33,0)
(0,14,0)
(32,24,0)
(57,34,0)
(55,53,0)
(62,10,0)
(28,42,0)
(5,8,0)
(62,35,0)
(63,2,0)
(33,0,0)
(59,51,0)
(49,28,0)
(41,8,0)
(26,14,0)
(18,46,0)
(19,63,0)
(54,32,0)
(21,0,0)
(56,4,0)
(12,4,0)
(53,22,0)
(23,62,0)
(25,24,0)
(8,41,0)
(10,59,0)
(46,22,0)
(34,57,0)
(9,13,0)
(22,51,0)
(40,19,0)
(57,4,0)
(19,50,0)
(50,44,0)
(41,32,0)
(28,14,0)
(39,34,0)
(0,17,0)
(8,64,0)
(59,10,0)
(19,50,1)
(28,42,1)
(61,7,1)
(63,2,1)
(49,28,1)
(21,28,1)
(7,0,1)
(59,51,1)
(60,27,1)
(29,49,1)
(41,8,1)
(52,12,1)
(33,0,1)
(42,60,1)
(65,63,1)
(45,10,1)
(33,11,1)
(59,20,1)
(46,18,1)
(46,32,1)
(15,21,1)
(39,3,1)
(22,46,1)
(3,38,1)
(31,35,1)
(8,64,1)
(50,33,1)
(37,12,1)
(18,1,1)
(54,50,1)
(52,29,1)
(12,13,1)
(10,59,1)
(1,47,1)
(0,17,1)
(55,46,1)
(8,50,1)
(17,15,1)
(35,62,1)
(34,39,1)
(19,40,1)
(19,10,1)
(53,55,1)
(32,41,1)
(62,65,1)
(49,37,1)
(13,30,1)
(62,23,1)
(22,53,1)
(57,34,1)
(40,45,1)
(38,61,1)
(62,10,1)
(51,22,1)
(9,43,1)
(11,16,1)
(16,52,1)
(5,54,1)
(13,9,1)
(47,32,1)
(43,57,1)
(34,28,1)
(8,5,1)
(63,19,1)
(12,13,2)
(46,32,2)
(62,10,2)
(8,50,2)
(62,23,2)
(10,59,2)
(49,28,2)
(34,28,2)
(19,10,2)
(59,51,2)
(52,12,2)
(63,19,2)
(59,20,2)
(22,53,2)
(33,0,2)
(13,30,2)
(19,50,2)
(63,2,2)
(50,33,2)
(28,42,2)
(22,46,2)
(51,22,2)
(41,8,2)
(32,41,2)
(8,64,2)
(57,34,2)
(0,17,2)
(35,62,2)
-----------------------------------
(0,* *dataPtr2 = &data)
(1,dataLen)
(2,void)
(3,data)
(4,)
(5,data)
(6,data)
(7,data)
(8,(char *)
(9,WIDE_STRING)
(10,* dest = (void *)
(11,dataPtr2)
(12,data = (void *)
(13,(void *)
(14,)
(15,data)
(16,data)
(17,&data)
(18,1)
(19,wcscpy(dest, data)
(20,void *)
(21,dataPtr2)
(22,(dataLen+1)
(23,char *)
(24,)
(25,dest)
(26,dataPtr2)
(27,dataPtr1)
(28,* *dataPtr1 = &data)
(29,data)
(30,void *)
(31,RET)
(32,dataLen = strlen((char *)
(33,*dataPtr2)
(34,*dataPtr1)
(35,printLine((char *)
(36,dataLen)
(37,dataPtr1)
(38,data = NULL)
(39,dataPtr1)
(40,data)
(41,strlen((char *)
(42,&data)
(43,data)
(44,)
(45,dest)
(46,dataLen+1)
(47,dest)
(48,data)
(49,*dataPtr1)
(50,* data = *dataPtr2)
(51,ALLOCA((dataLen+1)
(52,*dataPtr1 = data)
(53,sizeof(wchar_t)
(54,dataLen)
(55,wchar_t)
(56,data)
(57,* data = *dataPtr1)
(58,dataPtr1)
(59,(void *)
(60,data)
(61,NULL)
(62,(char *)
(63,(void)
(64,char *)
(65,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^