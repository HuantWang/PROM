-----label-----
1
-----code-----
static void badSink(size_t data)
{
    if(badStatic)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,7,9,13,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(size_t data){    if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
badSink(size_t data)
badSink
size_t data
size_t
size_t
data
data
{    if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
badStatic
badStatic
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(39,27,0)
(32,17,0)
(15,4,0)
(14,40,0)
(7,21,0)
(37,17,0)
(31,10,0)
(22,33,0)
(24,37,0)
(13,20,0)
(4,10,0)
(18,11,0)
(19,27,0)
(21,17,0)
(38,35,0)
(34,31,0)
(26,21,0)
(23,13,0)
(28,26,0)
(12,7,0)
(8,21,0)
(11,21,0)
(34,7,0)
(4,15,0)
(27,21,0)
(7,12,0)
(25,3,0)
(0,25,0)
(33,31,0)
(5,11,0)
(26,17,0)
(3,25,0)
(37,21,0)
(11,17,0)
(29,15,0)
(35,30,0)
(31,34,0)
(31,33,0)
(1,13,0)
(16,31,0)
(7,34,0)
(3,36,0)
(2,4,0)
(21,7,0)
(11,18,1)
(24,11,1)
(37,21,1)
(4,15,1)
(8,4,1)
(27,19,1)
(3,25,1)
(28,37,1)
(9,26,1)
(22,16,1)
(18,5,1)
(31,10,1)
(21,7,1)
(35,38,1)
(0,27,1)
(25,0,1)
(2,6,1)
(37,24,1)
(15,29,1)
(16,8,1)
(19,39,1)
(9,6,1)
(26,28,1)
(26,21,1)
(34,31,1)
(7,12,1)
(5,27,1)
(39,21,1)
(33,22,1)
(7,34,1)
(29,2,1)
(11,21,1)
(31,33,1)
(38,4,1)
(9,35,1)
(5,3,1)
(4,10,1)
(27,21,1)
(27,21,2)
(16,4,2)
(34,4,2)
(33,4,2)
(31,10,2)
(7,34,2)
(37,21,2)
(4,15,2)
(19,4,2)
(8,4,2)
(3,25,2)
(29,6,2)
(26,21,2)
(34,31,2)
(31,4,2)
(21,4,2)
(26,4,2)
(15,6,2)
(25,27,2)
(35,4,2)
(4,10,2)
(22,4,2)
(7,12,2)
(11,21,2)
(24,4,2)
(3,27,2)
(37,4,2)
(27,4,2)
(0,27,2)
(38,4,2)
(28,4,2)
(18,4,2)
(7,4,2)
(2,6,2)
(5,4,2)
(39,4,2)
(11,4,2)
(4,6,2)
(31,33,2)
(21,7,2)
-----------------------------------
(0,1)
(1,myString)
(2,data)
(3,exit(-1)
(4,data > strlen(HELLO_STRING)
(5,myString)
(6,badStatic)
(7,(char *)
(8,myString)
(9,RET)
(10,size_t data)
(11,strcpy(myString, HELLO_STRING)
(12,char *)
(13,)
(14,if(badStatic)
(15,strlen(HELLO_STRING)
(16,data)
(17,)
(18,HELLO_STRING)
(19,NULL)
(20,)
(21,myString = (char *)
(22,char)
(23,if (data > strlen(HELLO_STRING)
(24,myString)
(25,-1)
(26,free(myString)
(27,myString == NULL)
(28,myString)
(29,HELLO_STRING)
(30,)
(31,data*sizeof(char)
(32,if (myString == NULL)
(33,sizeof(char)
(34,malloc(data*sizeof(char)
(35,printLine("Input is less than the length of the source string")
(36,)
(37,printLine(myString)
(38,"Input is less than the length of the source string")
(39,myString)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^