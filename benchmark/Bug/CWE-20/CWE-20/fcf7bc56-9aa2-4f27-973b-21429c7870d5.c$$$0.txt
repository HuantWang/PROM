-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(52,26,0)
(61,42,0)
(45,49,0)
(6,51,0)
(30,58,0)
(1,0,0)
(17,37,0)
(15,35,0)
(37,27,0)
(12,59,0)
(58,60,0)
(33,26,0)
(35,37,0)
(55,35,0)
(49,20,0)
(9,27,0)
(25,39,0)
(4,60,0)
(31,33,0)
(5,29,0)
(43,24,0)
(13,17,0)
(59,28,0)
(24,4,0)
(26,20,0)
(18,49,0)
(36,40,0)
(49,2,0)
(19,27,0)
(2,16,0)
(17,40,0)
(16,2,0)
(29,41,0)
(22,16,0)
(20,49,0)
(2,11,0)
(24,2,0)
(63,60,0)
(38,11,0)
(20,26,0)
(57,24,0)
(16,60,0)
(21,14,0)
(31,2,0)
(62,31,0)
(8,31,0)
(14,54,0)
(26,33,0)
(47,0,0)
(35,39,0)
(27,41,0)
(34,37,0)
(50,2,0)
(56,4,0)
(32,28,0)
(39,35,0)
(63,37,0)
(29,60,0)
(7,63,0)
(4,14,0)
(58,37,0)
(0,32,0)
(39,25,0)
(53,29,0)
(20,60,0)
(42,61,0)
(39,42,0)
(40,17,0)
(0,60,0)
(46,58,0)
(48,61,0)
(4,24,0)
(33,31,0)
(44,32,0)
(42,58,0)
(0,37,0)
(58,42,0)
(10,20,0)
(37,63,0)
(23,42,0)
(42,39,0)
(3,17,0)
(22,50,1)
(5,14,1)
(13,3,1)
(32,44,1)
(20,60,1)
(26,20,1)
(7,34,1)
(17,37,1)
(21,4,1)
(31,2,1)
(35,37,1)
(20,49,1)
(63,60,1)
(30,46,1)
(5,40,1)
(42,39,1)
(42,58,1)
(23,39,1)
(47,59,1)
(57,56,1)
(29,60,1)
(45,18,1)
(52,20,1)
(12,61,1)
(61,42,1)
(0,37,1)
(61,48,1)
(36,17,1)
(10,31,1)
(4,24,1)
(31,62,1)
(0,60,1)
(50,61,1)
(37,63,1)
(24,2,1)
(14,21,1)
(56,33,1)
(44,0,1)
(43,57,1)
(5,32,1)
(26,52,1)
(58,37,1)
(48,42,1)
(4,60,1)
(35,55,1)
(16,60,1)
(58,30,1)
(53,29,1)
(39,35,1)
(8,2,1)
(3,37,1)
(17,13,1)
(39,25,1)
(5,33,1)
(15,58,1)
(49,2,1)
(33,31,1)
(40,36,1)
(55,15,1)
(16,22,1)
(42,23,1)
(0,1,1)
(59,12,1)
(2,16,1)
(49,45,1)
(40,17,1)
(46,40,1)
(63,7,1)
(1,47,1)
(29,5,1)
(62,8,1)
(24,43,1)
(18,10,1)
(33,26,1)
(58,60,1)
(58,37,2)
(53,29,2)
(22,61,2)
(17,37,2)
(23,40,2)
(26,31,2)
(46,40,2)
(16,60,2)
(2,61,2)
(39,25,2)
(20,60,2)
(44,61,2)
(20,31,2)
(4,60,2)
(4,33,2)
(24,33,2)
(2,16,2)
(12,61,2)
(61,40,2)
(18,31,2)
(30,40,2)
(14,33,2)
(15,40,2)
(37,63,2)
(52,31,2)
(20,49,2)
(63,60,2)
(0,60,2)
(26,20,2)
(58,60,2)
(33,61,2)
(59,61,2)
(33,26,2)
(45,31,2)
(42,58,2)
(31,61,2)
(47,61,2)
(10,31,2)
(58,40,2)
(56,33,2)
(8,61,2)
(49,31,2)
(61,42,2)
(32,61,2)
(40,17,2)
(48,40,2)
(4,24,2)
(49,2,2)
(29,60,2)
(31,2,2)
(21,33,2)
(43,33,2)
(55,40,2)
(33,31,2)
(35,37,2)
(0,37,2)
(24,2,2)
(0,61,2)
(50,61,2)
(1,61,2)
(57,33,2)
(16,61,2)
(62,61,2)
(42,39,2)
(39,40,2)
(35,40,2)
(42,40,2)
(39,35,2)
-----------------------------------
(0,data[dataLen])
(1,dataLen)
(2,dataLen = strlen(data)
(3,100)
(4,data[dataLen-1])
(5,data)
(6,if (fgets(data+dataLen, (int)
(7,data)
(8,dataLen)
(9,dataLen)
(10,data)
(11,)
(12,"fgets()
(13,dataLen)
(14,data[dataLen-1] = \\\'\\\\0\\\')
(15,100)
(16,strlen(data)
(17,100-dataLen)
(18,dataLen)
(19,if (100-dataLen > 1)
(20,data[dataLen-1])
(21,\\\'\\\\0\\\')
(22,data)
(23,stdin)
(24,dataLen-1)
(25,int)
(26,data[dataLen-1] == \\\'\\\\n\\\')
(27,)
(28,)
(29,return data;)
(30,dataLen)
(31,dataLen > 0)
(32,data[dataLen] = \\\'\\\\0\\\')
(33,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(34,dataLen)
(35,100-dataLen)
(36,1)
(37,dataLen = strlen(data)
(38,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(39,(int)
(40,100-dataLen > 1)
(41,)
(42,fgets(data+dataLen, (int)
(43,1)
(44,\\\'\\\\0\\\')
(45,1)
(46,data)
(47,data)
(48,NULL)
(49,dataLen-1)
(50,dataLen)
(51,)
(52,\\\'\\\\n\\\')
(53,RET)
(54,)
(55,dataLen)
(56,data)
(57,dataLen)
(58,data+dataLen)
(59,printLine("fgets()
(60,char * data)
(61,fgets(data+dataLen, (int)
(62,0)
(63,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^