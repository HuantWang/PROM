-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,79,81,82,85,86,90,92,96,98
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
74,75
74,76
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad(){    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad
{    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
staticTrue
staticTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,9,0)
(37,8,0)
(8,39,0)
(40,22,0)
(4,14,0)
(12,37,0)
(10,14,0)
(13,37,0)
(2,39,0)
(18,23,0)
(0,6,0)
(11,44,0)
(8,37,0)
(16,5,0)
(29,0,0)
(24,20,0)
(29,3,0)
(13,22,0)
(32,4,0)
(36,3,0)
(6,0,0)
(19,6,0)
(27,12,0)
(18,5,0)
(34,19,0)
(26,13,0)
(38,9,0)
(20,19,0)
(39,8,0)
(25,8,0)
(15,13,0)
(19,43,0)
(35,29,0)
(3,29,0)
(0,29,0)
(39,22,0)
(6,19,0)
(13,9,0)
(37,12,0)
(7,34,0)
(37,13,0)
(1,34,0)
(6,28,0)
(21,22,0)
(20,9,0)
(13,19,0)
(5,18,0)
(31,19,0)
(30,44,0)
(4,19,0)
(17,43,0)
(33,9,0)
(9,44,0)
(14,44,0)
(28,6,0)
(20,14,0)
(22,14,0)
(13,14,0)
(22,21,1)
(39,22,1)
(29,3,1)
(20,19,1)
(40,42,1)
(18,5,1)
(34,1,1)
(16,34,1)
(5,16,1)
(13,9,1)
(35,31,1)
(3,36,1)
(1,7,1)
(12,27,1)
(15,22,1)
(32,20,1)
(6,28,1)
(4,9,1)
(2,26,1)
(31,42,1)
(27,8,1)
(8,39,1)
(19,6,1)
(40,34,1)
(36,35,1)
(39,2,1)
(24,13,1)
(34,19,1)
(41,4,1)
(42,9,1)
(4,19,1)
(8,25,1)
(13,19,1)
(20,9,1)
(7,19,1)
(37,8,1)
(40,18,1)
(37,12,1)
(25,39,1)
(26,15,1)
(0,29,1)
(4,32,1)
(13,22,1)
(33,38,1)
(6,0,1)
(9,33,1)
(20,24,1)
(21,40,1)
(13,37,1)
(29,42,2)
(20,9,2)
(13,19,2)
(6,28,2)
(39,22,2)
(0,42,2)
(1,42,2)
(35,42,2)
(20,19,2)
(31,42,2)
(7,42,2)
(19,42,2)
(16,34,2)
(4,9,2)
(13,22,2)
(18,5,2)
(36,42,2)
(29,3,2)
(19,6,2)
(37,12,2)
(13,9,2)
(5,34,2)
(8,39,2)
(34,42,2)
(34,19,2)
(0,29,2)
(6,42,2)
(13,37,2)
(18,34,2)
(37,8,2)
(6,0,2)
(4,19,2)
(3,42,2)
-----------------------------------
(0,malloc(10*sizeof(char)
(1,NULL)
(2,source)
(3,sizeof(char)
(4,free(data)
(5,-1)
(6,(char *)
(7,data)
(8,strlen(source)
(9,data = NULL)
(10,source)
(11,data)
(12,sizeof(char)
(13,memcpy(data, source, (strlen(source)
(14,)
(15,data)
(16,1)
(17,if (data == NULL)
(18,exit(-1)
(19,data = (char *)
(20,printLine(data)
(21,SRC_STRING)
(22,source[10+1] = SRC_STRING)
(23,)
(24,data)
(25,1)
(26,source)
(27,char)
(28,char *)
(29,10*sizeof(char)
(30,if(staticTrue)
(31,data)
(32,data)
(33,NULL)
(34,data == NULL)
(35,10)
(36,char)
(37,(strlen(source)
(38,data)
(39,strlen(source)
(40,source)
(41,RET)
(42,staticTrue)
(43,)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^