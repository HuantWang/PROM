-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_wchar_t_memcpy_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a small buffer */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 50-1); /* fill with 'A's */
        data[50-1] = L'\0'; /* null terminate */
    }
    else
    {
        /* FIX: Use a large buffer */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1); /* fill with 'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[100];
        wmemset(dest, L'C', 100-1);
        dest[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: using memcpy with the length of the dest where data
         * could be smaller than dest causing buffer overread */
        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));
        dest[100-1] = L'\0';
        printWLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
86,88
88,89
89,90
89,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
112,113
112,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
120,122
124,125
124,126
124,127
124,128
124,129
124,130
124,131
125,126
126,127
126,128
128,129
128,130
130,131
132,133
133,134
133,135
133,136
133,137
134,135
136,137
139,140
139,141
142,143
143,144
143,145
144,145
144,146
145,146
147,148
147,149
151,152
152,153
152,154
152,155
152,156
153,154
155,156
157,158
159,160
159,161
160,161
160,162
161,162
163,164
165,166
166,167
166,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
174,176
178,179
179,180
179,181
180,181
182,183
184,185
185,186
185,187
186,187
188,189
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,77,80,82,85,87,90,91,95,97,102,104,108,110,111,113,114,119,121,122,123,127,129,131,135,137,138,140,141,146,148,149,150,154,156,158,162,164,167,168,173,175,176,177,181,183,187,189
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
75,76
75,77
86,87
86,88
93,94
93,95
112,113
112,114
116,117
116,118
120,121
120,122
139,140
139,141
143,144
143,145
147,148
147,149
159,160
159,161
170,171
170,172
174,175
174,176
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_wchar_t_memcpy_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1); /* fill with 'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_12_bad()
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1); /* fill with 'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1); /* fill with 'A's */        data[100-1] = L'\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 50-1);
wmemset(data, L'A', 50-1)
wmemset
wmemset
data
data
L'A'
50-1
50
1
data[50-1] = L'\0';
data[50-1] = L'\0'
data[50-1]
data
data
50-1
50
1
L'\0'
{        /* FIX: Use a large buffer */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1); /* fill with 'A's */        data[100-1] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }
wchar_t dest[100];
wchar_t dest[100];
wchar_t
dest[100]
dest
[100]
100
wmemset(dest, L'C', 100-1);
wmemset(dest, L'C', 100-1)
wmemset
wmemset
dest
dest
L'C'
100-1
100
1
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));
memcpy(dest, data, wcslen(dest)*sizeof(wchar_t))
memcpy
memcpy
dest
dest
data
data
wcslen(dest)*sizeof(wchar_t)
wcslen(dest)
wcslen
wcslen
dest
dest
sizeof(wchar_t)
wchar_t
wchar_t

dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(19,5,0)
(38,0,0)
(40,27,0)
(6,63,0)
(29,31,0)
(16,25,0)
(63,24,0)
(24,63,0)
(14,55,0)
(52,22,0)
(45,26,0)
(55,11,0)
(4,61,0)
(55,5,0)
(23,48,0)
(3,58,0)
(22,52,0)
(50,61,0)
(30,5,0)
(31,51,0)
(42,34,0)
(22,60,0)
(3,59,0)
(61,51,0)
(5,13,0)
(47,8,0)
(0,5,0)
(22,20,0)
(20,22,0)
(48,34,0)
(11,55,0)
(46,35,0)
(32,60,0)
(27,17,0)
(12,20,0)
(34,8,0)
(11,24,0)
(47,35,0)
(9,13,0)
(56,52,0)
(54,31,0)
(5,55,0)
(25,48,0)
(8,47,0)
(34,48,0)
(0,31,0)
(60,22,0)
(35,47,0)
(43,13,0)
(44,51,0)
(17,2,0)
(55,14,0)
(17,27,0)
(37,51,0)
(24,11,0)
(21,19,0)
(28,26,0)
(36,59,0)
(0,48,0)
(52,48,0)
(33,25,0)
(34,42,0)
(52,5,0)
(48,26,0)
(8,34,0)
(1,19,0)
(53,31,0)
(59,3,0)
(49,31,0)
(7,24,0)
(41,47,0)
(15,52,0)
(10,49,0)
(52,31,0)
(0,48,1)
(30,18,1)
(38,49,1)
(32,56,1)
(29,52,1)
(63,6,1)
(0,38,1)
(34,8,1)
(55,11,1)
(52,22,1)
(1,5,1)
(6,7,1)
(5,55,1)
(22,20,1)
(56,15,1)
(36,19,1)
(18,61,1)
(7,30,1)
(48,34,1)
(45,17,1)
(59,36,1)
(24,63,1)
(52,5,1)
(25,16,1)
(21,1,1)
(43,3,1)
(61,4,1)
(34,42,1)
(17,27,1)
(22,60,1)
(25,48,1)
(43,19,1)
(3,59,1)
(0,5,1)
(33,48,1)
(53,43,1)
(53,45,1)
(11,24,1)
(41,23,1)
(23,18,1)
(12,60,1)
(39,0,1)
(8,47,1)
(19,5,1)
(45,25,1)
(49,10,1)
(10,29,1)
(15,53,1)
(27,40,1)
(35,46,1)
(52,48,1)
(55,14,1)
(47,35,1)
(40,25,1)
(20,12,1)
(19,21,1)
(46,41,1)
(16,33,1)
(4,50,1)
(60,32,1)
(24,63,2)
(48,34,2)
(59,19,2)
(27,25,2)
(0,5,2)
(11,24,2)
(41,18,2)
(0,48,2)
(5,18,2)
(43,18,2)
(47,35,2)
(30,18,2)
(25,48,2)
(55,11,2)
(8,47,2)
(55,14,2)
(34,42,2)
(46,18,2)
(3,19,2)
(35,18,2)
(6,18,2)
(17,27,2)
(63,18,2)
(55,18,2)
(1,18,2)
(22,60,2)
(36,19,2)
(5,55,2)
(19,5,2)
(11,18,2)
(52,5,2)
(17,25,2)
(19,18,2)
(24,18,2)
(8,18,2)
(34,18,2)
(23,18,2)
(22,20,2)
(25,18,2)
(3,59,2)
(33,18,2)
(52,48,2)
(34,8,2)
(7,18,2)
(40,25,2)
(52,22,2)
(48,18,2)
(16,18,2)
(45,18,2)
(21,18,2)
(47,18,2)
-----------------------------------
(0,free(data)
(1,data)
(2,)
(3,exit(-1)
(4,NULL)
(5,data = (wchar_t *)
(6,wchar_t)
(7,100)
(8,malloc(50*sizeof(wchar_t)
(9,if (data == NULL)
(10,dest)
(11,malloc(100*sizeof(wchar_t)
(12,wchar_t)
(13,)
(14,wchar_t *)
(15,dest)
(16,NULL)
(17,exit(-1)
(18,globalReturnsTrueOrFalse()
(19,data == NULL)
(20,sizeof(wchar_t)
(21,NULL)
(22,wcslen(dest)
(23,data)
(24,100*sizeof(wchar_t)
(25,data == NULL)
(26,)
(27,-1)
(28,if (data == NULL)
(29,'\\\\0')
(30,data)
(31,)
(32,dest)
(33,data)
(34,(wchar_t *)
(35,sizeof(wchar_t)
(36,1)
(37,data)
(38,data)
(39,RET)
(40,1)
(41,50)
(42,wchar_t *)
(43,\'\\\\0\')
(44,if(globalReturnsTrueOrFalse()
(45,\'\\\\0\')
(46,wchar_t)
(47,50*sizeof(wchar_t)
(48,data = (wchar_t *)
(49,printWLine(dest)
(50,data)
(51,)
(52,memcpy(dest, data, wcslen(dest)
(53,'\\\\0')
(54,dest)
(55,(wchar_t *)
(56,data)
(57,'\\\\0')
(58,)
(59,-1)
(60,wcslen(dest)
(61,data = NULL)
(62,'\\\\0')
(63,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^