-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(70,5,0)
(51,39,0)
(52,57,0)
(66,49,0)
(55,39,0)
(58,1,0)
(7,63,0)
(42,58,0)
(63,68,0)
(65,35,0)
(30,1,0)
(50,2,0)
(17,31,0)
(25,5,0)
(19,18,0)
(21,34,0)
(40,36,0)
(4,68,0)
(49,28,0)
(27,35,0)
(60,28,0)
(57,26,0)
(49,26,0)
(24,63,0)
(28,30,0)
(6,24,0)
(14,39,0)
(18,63,0)
(5,60,0)
(16,13,0)
(34,68,0)
(37,58,0)
(32,46,0)
(67,49,0)
(30,28,0)
(71,64,0)
(69,46,0)
(35,37,0)
(23,2,0)
(62,63,0)
(46,28,0)
(46,69,0)
(53,71,0)
(15,44,0)
(58,37,0)
(60,58,0)
(15,3,0)
(12,68,0)
(63,24,0)
(47,60,0)
(62,4,0)
(8,62,0)
(45,31,0)
(9,71,0)
(31,1,0)
(10,39,0)
(35,63,0)
(29,3,0)
(48,28,0)
(37,61,0)
(41,36,0)
(24,69,0)
(35,26,0)
(5,26,0)
(2,39,0)
(11,4,0)
(28,68,0)
(18,68,0)
(69,24,0)
(60,5,0)
(33,26,0)
(38,30,0)
(43,13,0)
(56,26,0)
(53,18,0)
(13,39,0)
(34,63,0)
(58,60,0)
(36,63,0)
(0,46,0)
(54,62,0)
(24,6,0)
(3,15,0)
(59,68,0)
(62,28,0)
(40,63,1)
(21,4,1)
(56,36,1)
(53,71,1)
(38,48,1)
(2,23,1)
(37,58,1)
(25,47,1)
(36,41,1)
(5,26,1)
(9,31,1)
(32,0,1)
(62,63,1)
(42,35,1)
(58,1,1)
(34,21,1)
(11,62,1)
(8,49,1)
(27,65,1)
(60,5,1)
(71,9,1)
(47,42,1)
(60,28,1)
(18,19,1)
(56,15,1)
(57,52,1)
(28,30,1)
(13,16,1)
(19,34,1)
(3,29,1)
(48,31,1)
(35,27,1)
(49,67,1)
(36,63,1)
(62,28,1)
(62,54,1)
(26,33,1)
(65,49,1)
(70,25,1)
(41,40,1)
(35,26,1)
(29,36,1)
(33,56,1)
(30,1,1)
(54,8,1)
(66,57,1)
(67,66,1)
(52,37,1)
(31,1,1)
(58,60,1)
(66,26,1)
(34,63,1)
(43,2,1)
(18,63,1)
(24,6,1)
(30,38,1)
(31,45,1)
(23,50,1)
(16,43,1)
(7,28,1)
(0,7,1)
(5,70,1)
(15,3,1)
(53,18,1)
(49,26,1)
(4,11,1)
(35,63,1)
(57,26,1)
(46,28,1)
(69,46,1)
(49,28,1)
(24,69,1)
(17,13,1)
(63,24,1)
(45,17,1)
(46,32,1)
(58,1,2)
(32,31,2)
(56,31,2)
(52,49,2)
(60,28,2)
(54,31,2)
(33,31,2)
(36,31,2)
(15,3,2)
(31,1,2)
(7,31,2)
(66,31,2)
(0,31,2)
(15,36,2)
(49,28,2)
(19,31,2)
(47,49,2)
(57,49,2)
(66,49,2)
(26,31,2)
(5,26,2)
(62,63,2)
(60,5,2)
(37,49,2)
(57,26,2)
(34,63,2)
(63,24,2)
(62,28,2)
(38,31,2)
(53,71,2)
(49,26,2)
(29,36,2)
(53,18,2)
(25,49,2)
(35,26,2)
(41,31,2)
(9,31,2)
(67,31,2)
(62,31,2)
(71,31,2)
(24,6,2)
(40,31,2)
(49,31,2)
(48,31,2)
(30,31,2)
(67,49,2)
(18,31,2)
(58,60,2)
(65,49,2)
(8,31,2)
(30,1,2)
(4,31,2)
(46,31,2)
(70,49,2)
(46,28,2)
(28,31,2)
(69,46,2)
(49,49,2)
(35,63,2)
(5,49,2)
(36,63,2)
(35,49,2)
(3,36,2)
(34,31,2)
(11,31,2)
(60,49,2)
(63,31,2)
(58,49,2)
(18,63,2)
(42,49,2)
(24,31,2)
(21,31,2)
(27,49,2)
(69,31,2)
(37,58,2)
(24,69,2)
(28,30,2)
-----------------------------------
(0,i)
(1,char * aString)
(2,i = 0)
(3,-1)
(4,reversedString[i] = '\\\\0')
(5,j-1)
(6,char *)
(7,reversedString)
(8,reversedString)
(9,NULL)
(10,reversedString)
(11,\'\\\\0\')
(12,if (reversedString == NULL)
(13,* reversedString = NULL)
(14,j)
(15,exit(-1)
(16,NULL)
(17,aString)
(18,return reversedString;)
(19,reversedString)
(20,'\\\\0')
(21,reversedString)
(22,reversedString[i] = \'\\\\0\')
(23,0)
(24,(char *)
(25,j)
(26,j = 0)
(27,j)
(28,i = strlen(aString)
(29,1)
(30,strlen(aString)
(31,aString != NULL)
(32,1)
(33,0)
(34,free(reversedString)
(35,reversedString[j])
(36,reversedString == NULL)
(37,reversedString[j] = aString[i-j-1])
(38,aString)
(39,)
(40,reversedString)
(41,NULL)
(42,aString)
(43,reversedString)
(44,)
(45,NULL)
(46,i+1)
(47,i)
(48,i)
(49,j < i)
(50,i)
(51,i)
(52,j)
(53,RET)
(54,i)
(55,if (aString != NULL)
(56,j)
(57,j++)
(58,aString[i-j-1])
(59,for (j = 0; j < i; j++)
(60,i-j-1)
(61,)
(62,reversedString[i])
(63,reversedString = (char *)
(64,)
(65,reversedString)
(66,j)
(67,i)
(68,)
(69,malloc(i+1)
(70,1)
(71,return NULL;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^