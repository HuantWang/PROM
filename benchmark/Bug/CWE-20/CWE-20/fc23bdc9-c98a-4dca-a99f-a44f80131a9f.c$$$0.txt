-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_15_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    switch(6)
    {
    case 6:
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
31,32
31,33
31,34
31,35
31,36
31,37
32,33
34,35
35,36
35,37
36,37
38,39
42,43
43,44
43,45
44,45
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
64,68
65,66
66,67
66,68
67,68
70,71
70,72
71,72
74,75
75,76
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
84,85
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
98,99
99,100
99,101
99,102
99,103
100,101
102,103
104,105
106,107
106,108
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,33,37,39,40,41,45,46,47,52,54,56,61,63,68,69,72,73,76,83,85,86,87,93,95,96,97,101,103,105,107,111,112,116,120,121
-----computeFrom-----
35,36
35,37
66,67
66,68
70,71
70,72
79,80
79,81
89,90
89,91
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_15_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_15_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_15_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(2,3,0)
(11,28,0)
(25,49,0)
(44,4,0)
(38,19,0)
(20,45,0)
(53,27,0)
(34,20,0)
(42,20,0)
(21,33,0)
(50,11,0)
(53,33,0)
(31,6,0)
(26,19,0)
(6,30,0)
(10,11,0)
(22,55,0)
(18,38,0)
(15,19,0)
(3,44,0)
(4,45,0)
(49,6,0)
(46,19,0)
(40,52,0)
(3,55,0)
(1,52,0)
(52,1,0)
(56,28,0)
(24,17,0)
(30,55,0)
(13,33,0)
(16,3,0)
(30,6,0)
(41,1,0)
(14,27,0)
(33,28,0)
(9,37,0)
(36,45,0)
(45,37,0)
(1,17,0)
(0,52,0)
(23,30,0)
(27,5,0)
(55,19,0)
(7,53,0)
(39,37,0)
(44,3,0)
(35,28,0)
(43,37,0)
(6,49,0)
(51,37,0)
(29,30,0)
(54,48,0)
(12,19,0)
(32,55,0)
(4,44,0)
(48,28,0)
(17,5,0)
(52,28,0)
(30,45,0)
(33,53,0)
(56,12,1)
(2,16,1)
(52,40,1)
(52,28,1)
(47,4,1)
(35,56,1)
(10,50,1)
(28,35,1)
(7,33,1)
(1,41,1)
(27,14,1)
(14,53,1)
(33,21,1)
(55,32,1)
(3,2,1)
(17,24,1)
(11,10,1)
(50,28,1)
(6,49,1)
(29,23,1)
(48,28,1)
(38,18,1)
(53,33,1)
(31,29,1)
(54,17,1)
(24,1,1)
(11,28,1)
(22,8,1)
(53,7,1)
(12,55,1)
(13,11,1)
(41,52,1)
(30,55,1)
(25,31,1)
(50,48,1)
(30,6,1)
(33,28,1)
(0,27,1)
(3,55,1)
(46,38,1)
(23,11,1)
(18,8,1)
(44,3,1)
(32,22,1)
(4,44,1)
(49,25,1)
(40,0,1)
(48,54,1)
(16,30,1)
(56,46,1)
(1,52,1)
(21,13,1)
(53,11,2)
(10,11,2)
(53,33,2)
(14,11,2)
(7,11,2)
(33,28,2)
(54,11,2)
(30,55,2)
(27,11,2)
(40,11,2)
(6,49,2)
(1,52,2)
(0,11,2)
(11,11,2)
(48,28,2)
(52,11,2)
(46,8,2)
(18,8,2)
(4,44,2)
(38,8,2)
(50,11,2)
(3,55,2)
(30,6,2)
(12,8,2)
(44,3,2)
(55,8,2)
(22,8,2)
(41,11,2)
(21,11,2)
(13,11,2)
(17,11,2)
(48,11,2)
(1,11,2)
(11,28,2)
(32,8,2)
(24,11,2)
(33,11,2)
(52,28,2)
-----------------------------------
(0,source)
(1,source[i].intTwo)
(2,0)
(3,data[0])
(4,printStructLine(&data[0])
(5,)
(6,100*sizeof(twoIntsStruct)
(7,intOne)
(8,6)
(9,data)
(10,100)
(11,i < 100)
(12,break;)
(13,source)
(14,0)
(15,default:)
(16,data)
(17,source[i].intTwo = 0)
(18,"Benign, fixed string")
(19,)
(20,)
(21,i)
(22,data)
(23,data)
(24,0)
(25,twoIntsStruct)
(26,case 6:)
(27,source[i].intOne = 0)
(28,i = 0)
(29,source)
(30,memcpy(data, source, 100*sizeof(twoIntsStruct)
(31,100)
(32,dataBadBuffer)
(33,source[i])
(34,for (i = 0; i < 100; i++)
(35,0)
(36,source)
(37,)
(38,printLine("Benign, fixed string")
(39,dataBadBuffer)
(40,i)
(41,intTwo)
(42,i)
(43,switch(6)
(44,&data[0])
(45,)
(46,break;)
(47,RET)
(48,i++)
(49,sizeof(twoIntsStruct)
(50,i)
(51,dataGoodBuffer)
(52,source[i])
(53,source[i].intOne)
(54,i)
(55,data = dataBadBuffer)
(56,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^