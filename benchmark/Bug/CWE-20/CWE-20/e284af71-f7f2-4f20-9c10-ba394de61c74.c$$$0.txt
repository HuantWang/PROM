-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
25,27
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
52,53
54,55
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
87,88
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
-----nextToken-----
2,4,9,15,17,22,23,26,28,30,34,37,39,42,43,47,50,51,53,57,63,64,72,73,76,77,78,79,83,86,88,91,92,96,99,101,104,105
-----computeFrom-----
19,20
19,21
59,60
59,61
65,66
65,67
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08_bad(){    if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08_bad
{    if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(7,15,0)
(10,23,0)
(29,37,0)
(31,37,0)
(4,14,0)
(6,40,0)
(7,0,0)
(28,6,0)
(25,29,0)
(32,28,0)
(26,37,0)
(3,16,0)
(1,3,0)
(3,1,0)
(17,26,0)
(17,35,0)
(40,6,0)
(26,17,0)
(8,6,0)
(22,26,0)
(35,17,0)
(6,28,0)
(33,37,0)
(30,26,0)
(36,30,0)
(7,22,0)
(23,29,0)
(6,8,0)
(34,16,0)
(9,30,0)
(5,3,0)
(29,38,0)
(0,7,0)
(20,38,0)
(12,22,0)
(5,37,0)
(29,23,0)
(37,27,0)
(2,16,0)
(3,5,0)
(19,17,0)
(16,3,0)
(18,22,0)
(15,7,0)
(0,37,0)
(22,7,0)
(40,37,0)
(21,23,0)
(28,26,0)
(38,29,0)
(24,28,0)
(16,2,1)
(22,12,1)
(21,0,1)
(17,19,1)
(22,26,1)
(30,9,1)
(25,23,1)
(36,13,1)
(29,38,1)
(26,17,1)
(18,26,1)
(11,13,1)
(28,32,1)
(2,34,1)
(9,36,1)
(23,10,1)
(3,16,1)
(6,8,1)
(5,3,1)
(20,25,1)
(12,18,1)
(19,30,1)
(17,35,1)
(29,23,1)
(32,24,1)
(7,15,1)
(0,7,1)
(10,21,1)
(7,22,1)
(40,6,1)
(34,33,1)
(24,5,1)
(11,40,1)
(38,20,1)
(6,28,1)
(28,26,1)
(3,1,1)
(33,29,1)
(19,13,2)
(7,13,2)
(3,16,2)
(24,13,2)
(7,15,2)
(3,1,2)
(5,3,2)
(28,26,2)
(5,13,2)
(29,13,2)
(6,28,2)
(7,22,2)
(2,13,2)
(0,7,2)
(38,13,2)
(17,35,2)
(21,13,2)
(25,13,2)
(26,17,2)
(10,13,2)
(28,13,2)
(29,23,2)
(22,13,2)
(17,13,2)
(6,13,2)
(30,13,2)
(40,6,2)
(9,13,2)
(16,13,2)
(33,13,2)
(0,13,2)
(18,13,2)
(26,13,2)
(36,13,2)
(20,13,2)
(34,13,2)
(12,13,2)
(6,8,2)
(40,13,2)
(3,13,2)
(32,13,2)
(29,38,2)
(22,26,2)
(23,13,2)
-----------------------------------
(0,printWLine((wchar_t *)
(1,wchar_t *)
(2,charFirst)
(3,(wchar_t *)
(4,if(staticReturnsTrue()
(5,printWLine((wchar_t *)
(6,(wchar_t *)
(7,(wchar_t *)
(8,wchar_t *)
(9,voidSecond)
(10,charFirst)
(11,RET)
(12,voidSecond)
(13,staticReturnsTrue()
(14,)
(15,wchar_t *)
(16,structCharVoid.charFirst)
(17,(void *)
(18,structCharVoid)
(19,SRC_STR)
(20,structCharVoid)
(21,structCharVoid)
(22,structCharVoid.voidSecond)
(23,structCharVoid.charFirst)
(24,structCharVoid)
(25,SRC_STR)
(26,structCharVoid.voidSecond = (void *)
(27,)
(28,structCharVoid.voidSecond)
(29,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(30,structCharVoid.voidSecond)
(31,structCharVoid)
(32,voidSecond)
(33,\'\\\\0\')
(34,structCharVoid)
(35,void *)
(36,structCharVoid)
(37,)
(38,sizeof(structCharVoid)
(39,'\\\\0')
(40,printWLine((wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^