-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07_bad()
{
    if(staticFive==5)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
26,28
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
45,46
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
55,56
56,57
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
-----nextToken-----
2,4,9,10,16,18,23,24,27,29,31,35,38,40,43,44,48,51,52,54,58,64,65,73,74,77,78,79,80,84,87,89,92,93,97,100,102,105,106
-----computeFrom-----
7,8
7,9
20,21
20,22
60,61
60,62
66,67
66,68
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07_bad(){    if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07_bad
{    if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
staticFive==5
staticFive
staticFive
5
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memmove
memmove
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(40,41,0)
(18,4,0)
(19,3,0)
(9,40,0)
(34,41,0)
(40,31,0)
(5,1,0)
(32,22,0)
(29,5,0)
(41,10,0)
(1,36,0)
(42,39,0)
(25,26,0)
(1,10,0)
(36,1,0)
(28,34,0)
(12,6,0)
(17,6,0)
(15,10,0)
(33,1,0)
(41,40,0)
(34,0,0)
(19,38,0)
(19,39,0)
(26,6,0)
(0,15,0)
(16,36,0)
(2,10,0)
(38,19,0)
(0,34,0)
(3,19,0)
(26,24,0)
(3,10,0)
(30,39,0)
(1,5,0)
(23,41,0)
(6,26,0)
(27,22,0)
(15,0,0)
(39,41,0)
(13,5,0)
(8,23,0)
(24,26,0)
(35,34,0)
(39,19,0)
(24,10,0)
(0,7,0)
(37,10,0)
(10,11,0)
(7,0,0)
(26,25,0)
(31,40,0)
(14,23,0)
(26,25,1)
(19,39,1)
(34,35,1)
(40,9,1)
(13,3,1)
(20,15,1)
(20,22,1)
(24,26,1)
(12,17,1)
(22,32,1)
(29,13,1)
(8,14,1)
(41,40,1)
(0,34,1)
(34,41,1)
(9,23,1)
(30,41,1)
(23,8,1)
(5,29,1)
(40,31,1)
(36,16,1)
(1,5,1)
(39,42,1)
(0,7,1)
(15,0,1)
(26,6,1)
(2,1,1)
(6,12,1)
(3,19,1)
(1,36,1)
(28,24,1)
(39,41,1)
(16,33,1)
(17,2,1)
(33,5,1)
(35,28,1)
(32,27,1)
(19,38,1)
(42,30,1)
(14,22,1)
(29,22,2)
(34,22,2)
(36,22,2)
(13,22,2)
(39,41,2)
(17,22,2)
(15,22,2)
(28,22,2)
(35,22,2)
(40,22,2)
(34,41,2)
(0,22,2)
(19,22,2)
(40,31,2)
(1,36,2)
(30,22,2)
(6,22,2)
(1,5,2)
(24,22,2)
(19,39,2)
(26,6,2)
(26,22,2)
(23,22,2)
(16,22,2)
(12,22,2)
(15,0,2)
(0,34,2)
(26,25,2)
(3,22,2)
(2,22,2)
(41,22,2)
(42,22,2)
(1,22,2)
(3,19,2)
(39,22,2)
(8,22,2)
(19,38,2)
(41,40,2)
(33,22,2)
(5,22,2)
(24,26,2)
(14,22,2)
(0,7,2)
(9,22,2)
-----------------------------------
(0,(wchar_t *)
(1,memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(2,'\\\\0')
(3,printWLine((wchar_t *)
(4,)
(5,structCharVoid.charFirst)
(6,structCharVoid.charFirst)
(7,wchar_t *)
(8,voidSecond)
(9,SRC_STR)
(10,)
(11,)
(12,charFirst)
(13,structCharVoid)
(14,structCharVoid)
(15,printWLine((wchar_t *)
(16,structCharVoid)
(17,structCharVoid)
(18,if(staticFive==5)
(19,(wchar_t *)
(20,RET)
(21,\'\\\\0\')
(22,staticFive==5)
(23,structCharVoid.voidSecond)
(24,printWLine((wchar_t *)
(25,wchar_t *)
(26,(wchar_t *)
(27,staticFive)
(28,structCharVoid)
(29,charFirst)
(30,structCharVoid)
(31,void *)
(32,5)
(33,SRC_STR)
(34,structCharVoid.voidSecond)
(35,voidSecond)
(36,sizeof(structCharVoid)
(37,structCharVoid)
(38,wchar_t *)
(39,structCharVoid.voidSecond)
(40,(void *)
(41,structCharVoid.voidSecond = (void *)
(42,voidSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^