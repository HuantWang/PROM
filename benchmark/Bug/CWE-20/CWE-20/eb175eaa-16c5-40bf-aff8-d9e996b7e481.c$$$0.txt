-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
15,18
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,51,52,53,56
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(14,17,0)
(0,23,0)
(11,18,0)
(31,9,0)
(9,24,0)
(0,16,0)
(31,6,0)
(9,22,0)
(12,18,0)
(21,26,0)
(22,9,0)
(18,2,0)
(5,27,0)
(17,31,0)
(13,0,0)
(18,23,0)
(24,9,0)
(1,5,0)
(4,26,0)
(15,2,0)
(24,4,0)
(8,0,0)
(9,31,0)
(19,17,0)
(26,4,0)
(30,6,0)
(18,31,0)
(0,31,0)
(2,6,0)
(3,31,0)
(27,25,0)
(17,23,0)
(29,16,0)
(31,23,0)
(28,4,0)
(4,24,0)
(27,5,0)
(15,18,1)
(0,8,1)
(9,24,1)
(14,31,1)
(12,27,1)
(11,12,1)
(0,23,1)
(1,17,1)
(3,7,1)
(26,21,1)
(28,3,1)
(9,22,1)
(5,1,1)
(8,2,1)
(31,9,1)
(2,15,1)
(19,14,1)
(0,31,1)
(17,19,1)
(18,23,1)
(24,4,1)
(27,5,1)
(31,23,1)
(17,31,1)
(18,31,1)
(21,28,1)
(12,17,1)
(13,0,1)
(17,23,1)
(8,7,1)
(18,11,1)
(4,26,1)
(9,22,2)
(14,7,2)
(13,0,2)
(18,31,2)
(28,7,2)
(31,7,2)
(24,7,2)
(27,17,2)
(0,23,2)
(4,26,2)
(31,23,2)
(21,7,2)
(31,9,2)
(1,17,2)
(5,17,2)
(19,7,2)
(26,7,2)
(17,31,2)
(17,7,2)
(9,7,2)
(18,23,2)
(0,31,2)
(15,7,2)
(17,23,2)
(9,24,2)
(11,7,2)
(24,4,2)
(3,7,2)
(18,7,2)
(4,7,2)
(2,7,2)
(27,5,2)
(12,7,2)
-----------------------------------
(0,return data;)
(1,1)
(2,data[0] = '\\\\0')
(3,data)
(4,50*sizeof(char)
(5,-1)
(6,)
(7,badStatic)
(8,data)
(9,(char *)
(10,data[0] = \'\\\\0\')
(11,0)
(12,data)
(13,RET)
(14,data)
(15,\'\\\\0\')
(16,)
(17,data == NULL)
(18,data[0])
(19,NULL)
(20,'\\\\0')
(21,char)
(22,char *)
(23,char * data)
(24,malloc(50*sizeof(char)
(25,)
(26,sizeof(char)
(27,exit(-1)
(28,50)
(29,if(badStatic)
(30,if (data == NULL)
(31,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^