-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05_bad()
{
    int * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
62,63
64,65
64,66
64,67
64,68
65,66
66,67
66,68
67,68
69,70
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
81,82
82,83
84,85
85,86
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,60,63,68,70,75,76,79,80,83,89,91,94,96,100,103,104,108,110
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
73,74
73,75
77,78
77,79
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05_bad(){    int * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05_bad
{    int * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
staticTrue
staticTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(39,41,0)
(3,48,0)
(7,48,0)
(48,47,0)
(49,3,0)
(2,23,0)
(36,26,0)
(20,5,0)
(12,2,0)
(37,22,0)
(18,26,0)
(24,8,0)
(36,39,0)
(20,22,0)
(15,16,0)
(51,47,0)
(8,32,0)
(3,43,0)
(40,19,0)
(43,3,0)
(25,54,0)
(28,39,0)
(19,40,0)
(40,23,0)
(4,31,0)
(11,33,0)
(33,16,0)
(39,40,0)
(31,47,0)
(43,26,0)
(27,48,0)
(0,33,0)
(2,17,0)
(36,48,0)
(22,16,0)
(13,16,0)
(30,24,0)
(28,48,0)
(1,28,0)
(45,3,0)
(42,15,0)
(26,31,0)
(40,39,0)
(22,4,0)
(6,31,0)
(3,39,0)
(21,54,0)
(17,2,0)
(46,41,0)
(22,20,0)
(8,24,0)
(44,36,0)
(9,26,0)
(50,39,0)
(23,2,0)
(23,40,0)
(29,47,0)
(38,17,0)
(35,28,0)
(53,16,0)
(34,22,0)
(54,39,0)
(10,4,0)
(28,20,0)
(28,16,0)
(52,48,1)
(22,4,1)
(10,52,1)
(20,22,1)
(35,1,1)
(49,33,1)
(0,11,1)
(30,54,1)
(45,49,1)
(22,37,1)
(3,45,1)
(40,19,1)
(28,16,1)
(23,2,1)
(28,35,1)
(14,36,1)
(43,3,1)
(24,30,1)
(42,20,1)
(28,39,1)
(28,48,1)
(3,48,1)
(10,54,1)
(15,42,1)
(48,7,1)
(36,39,1)
(11,15,1)
(3,39,1)
(36,48,1)
(25,39,1)
(16,13,1)
(54,39,1)
(33,16,1)
(38,12,1)
(17,38,1)
(8,24,1)
(39,40,1)
(2,17,1)
(34,28,1)
(15,16,1)
(54,21,1)
(37,34,1)
(50,52,1)
(7,27,1)
(44,43,1)
(13,53,1)
(12,50,1)
(1,33,1)
(11,16,1)
(36,44,1)
(4,10,1)
(40,23,1)
(33,0,1)
(21,25,1)
(53,4,1)
(10,8,1)
(22,16,1)
(11,33,2)
(35,33,2)
(8,24,2)
(8,54,2)
(28,16,2)
(12,52,2)
(38,52,2)
(40,52,2)
(33,16,2)
(40,23,2)
(23,2,2)
(22,33,2)
(40,19,2)
(30,54,2)
(25,52,2)
(20,33,2)
(2,17,2)
(43,3,2)
(33,33,2)
(15,16,2)
(34,33,2)
(28,33,2)
(42,33,2)
(21,52,2)
(36,48,2)
(54,52,2)
(0,33,2)
(20,22,2)
(50,52,2)
(3,39,2)
(37,33,2)
(1,33,2)
(17,52,2)
(28,39,2)
(28,48,2)
(54,39,2)
(23,52,2)
(39,52,2)
(15,33,2)
(24,54,2)
(2,52,2)
(22,4,2)
(22,16,2)
(3,48,2)
(36,39,2)
(39,40,2)
-----------------------------------
(0,100)
(1,data)
(2,50*sizeof(int)
(3,data[0])
(4,source[100] = {0})
(5,)
(6,source)
(7,NULL)
(8,exit(-1)
(9,for (i = 0; i < 100; i++)
(10,source)
(11,i)
(12,50)
(13,0)
(14,RET)
(15,i++)
(16,i = 0)
(17,sizeof(int)
(18,i)
(19,int *)
(20,data[i] = source[i])
(21,NULL)
(22,source[i])
(23,malloc(50*sizeof(int)
(24,-1)
(25,data)
(26,)
(27,data)
(28,data[i])
(29,data)
(30,1)
(31,)
(32,)
(33,i < 100)
(34,source)
(35,i)
(36,free(data)
(37,i)
(38,int)
(39,data = (int *)
(40,(int *)
(41,)
(42,i)
(43,printIntLine(data[0])
(44,data)
(45,0)
(46,if (data == NULL)
(47,)
(48,data = NULL)
(49,data)
(50,data)
(51,if(staticTrue)
(52,staticTrue)
(53,i)
(54,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^