-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_system_31_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
116,118
116,119
117,118
118,119
118,120
120,121
120,122
120,123
123,124
124,125
126,127
127,128
127,129
129,130
129,131
129,132
132,133
133,134
135,136
135,137
136,137
136,138
137,138
137,139
138,139
140,141
143,144
143,145
144,145
145,146
145,147
146,147
149,150
150,151
150,152
151,152
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,122,125,128,130,131,134,139,141,142,147,148,152,153
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
136,137
136,138
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_system_31_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_file_system_31_bad()
CWE78_OS_Command_Injection__char_file_system_31_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(19,72,0)
(59,1,0)
(52,55,0)
(25,36,0)
(9,26,0)
(53,19,0)
(58,44,0)
(50,27,0)
(73,21,0)
(33,65,0)
(34,55,0)
(60,54,0)
(13,1,0)
(2,60,0)
(38,75,0)
(0,54,0)
(5,36,0)
(12,20,0)
(29,22,0)
(66,29,0)
(45,27,0)
(8,13,0)
(74,44,0)
(3,22,0)
(67,58,0)
(70,67,0)
(33,26,0)
(60,33,0)
(36,22,0)
(67,70,0)
(28,55,0)
(49,39,0)
(55,29,0)
(20,22,0)
(41,72,0)
(21,28,0)
(6,60,0)
(44,55,0)
(26,33,0)
(57,67,0)
(69,50,0)
(55,22,0)
(2,21,0)
(31,28,0)
(50,21,0)
(7,58,0)
(26,21,0)
(16,59,0)
(40,2,0)
(62,53,0)
(2,55,0)
(30,11,0)
(73,55,0)
(24,29,0)
(28,21,0)
(48,36,0)
(32,21,0)
(68,35,0)
(60,19,0)
(58,36,0)
(47,2,0)
(23,39,0)
(35,51,0)
(19,39,0)
(64,70,0)
(46,73,0)
(18,58,0)
(43,50,0)
(4,51,0)
(11,75,0)
(73,59,0)
(37,22,0)
(60,2,0)
(54,60,0)
(71,44,0)
(14,26,0)
(61,19,0)
(35,19,0)
(65,33,0)
(10,73,0)
(15,38,0)
(56,20,0)
(33,60,0)
(39,19,0)
(42,20,0)
(21,20,0)
(17,53,0)
(44,36,0)
(27,50,0)
(44,55,1)
(50,69,1)
(59,16,1)
(67,58,1)
(73,21,1)
(57,58,1)
(13,8,1)
(6,33,1)
(60,19,1)
(27,50,1)
(58,44,1)
(38,15,1)
(68,59,1)
(68,54,1)
(26,21,1)
(28,55,1)
(74,53,1)
(11,30,1)
(50,21,1)
(53,19,1)
(17,19,1)
(14,9,1)
(73,55,1)
(27,45,1)
(29,24,1)
(55,29,1)
(47,53,1)
(9,2,1)
(2,55,1)
(34,52,1)
(24,66,1)
(26,14,1)
(2,40,1)
(46,10,1)
(70,64,1)
(28,31,1)
(43,21,1)
(23,61,1)
(0,60,1)
(31,32,1)
(39,49,1)
(49,23,1)
(35,19,1)
(44,71,1)
(63,11,1)
(35,68,1)
(8,54,1)
(67,57,1)
(60,33,1)
(55,34,1)
(54,0,1)
(21,28,1)
(30,38,1)
(64,67,1)
(61,27,1)
(63,70,1)
(19,39,1)
(16,73,1)
(74,27,1)
(45,50,1)
(33,65,1)
(53,62,1)
(32,55,1)
(69,43,1)
(60,6,1)
(70,67,1)
(10,13,1)
(62,17,1)
(60,2,1)
(2,21,1)
(15,70,1)
(73,46,1)
(18,44,1)
(74,35,1)
(33,26,1)
(58,7,1)
(71,74,1)
(52,29,1)
(7,18,1)
(40,47,1)
(54,60,1)
(60,19,2)
(23,27,2)
(54,60,2)
(35,19,2)
(62,27,2)
(60,2,2)
(11,70,2)
(19,27,2)
(68,53,2)
(54,53,2)
(26,53,2)
(58,44,2)
(33,65,2)
(53,19,2)
(73,54,2)
(6,53,2)
(40,53,2)
(9,53,2)
(67,58,2)
(2,21,2)
(35,53,2)
(60,33,2)
(38,70,2)
(55,29,2)
(61,27,2)
(27,50,2)
(0,53,2)
(26,21,2)
(13,54,2)
(2,53,2)
(39,27,2)
(19,39,2)
(28,55,2)
(47,53,2)
(73,21,2)
(44,55,2)
(16,54,2)
(49,27,2)
(73,55,2)
(15,70,2)
(10,54,2)
(33,53,2)
(21,28,2)
(59,54,2)
(46,54,2)
(17,27,2)
(33,26,2)
(8,54,2)
(50,21,2)
(30,70,2)
(53,27,2)
(60,53,2)
(2,55,2)
(70,67,2)
(14,53,2)
-----------------------------------
(0,NULL)
(1,)
(2,data+dataLen)
(3,data_buf)
(4,if (fgets(data+dataLen, (int)
(5,dataCopy)
(6,pFile)
(7,dataCopy)
(8,"fgets()
(9,100)
(10,data)
(11,exit(1)
(12,pFile)
(13,printLine("fgets()
(14,dataLen)
(15,"command execution failed!")
(16,\\\'\\\\0\\\')
(17,pFile)
(18,data)
(19,pFile = fopen(FILENAME, "r")
(20,)
(21,dataLen = strlen(data)
(22,)
(23,FILENAME)
(24,FULL_COMMAND)
(25,if (SYSTEM(data)
(26,100-dataLen)
(27,100-dataLen > 1)
(28,strlen(data)
(29,data_buf[100] = FULL_COMMAND)
(30,1)
(31,data)
(32,dataLen)
(33,(int)
(34,data_buf)
(35,fclose(pFile)
(36,)
(37,data)
(38,printLine("command execution failed!")
(39,fopen(FILENAME, "r")
(40,dataLen)
(41,if (pFile != NULL)
(42,dataLen)
(43,100)
(44,* dataCopy = data)
(45,1)
(46,dataLen)
(47,data)
(48,data)
(49,"r")
(50,100-dataLen)
(51,)
(52,data)
(53,pFile != NULL)
(54,fgets(data+dataLen, (int)
(55,data = data_buf)
(56,if (100-dataLen > 1)
(57,data)
(58,* data = dataCopy)
(59,data[dataLen] = \\\'\\\\0\\\')
(60,fgets(data+dataLen, (int)
(61,pFile)
(62,NULL)
(63,RET)
(64,0)
(65,int)
(66,data_buf)
(67,SYSTEM(data)
(68,pFile)
(69,dataLen)
(70,SYSTEM(data)
(71,data)
(72,)
(73,data[dataLen])
(74,dataCopy)
(75,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^