-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
53,59
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,80,82,87,88,91,94,95,98,104,106,109,111,115,117,121,123
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
75,76
75,77
85,86
85,87
89,90
89,91
92,93
92,94
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,28,0)
(0,30,0)
(20,31,0)
(55,25,0)
(38,54,0)
(27,52,0)
(19,12,0)
(31,34,0)
(9,14,0)
(51,12,0)
(36,31,0)
(20,44,0)
(11,44,0)
(59,46,0)
(22,21,0)
(40,10,0)
(41,46,0)
(16,44,0)
(10,40,0)
(58,46,0)
(11,31,0)
(49,20,0)
(26,12,0)
(48,4,0)
(18,0,0)
(56,21,0)
(50,34,0)
(52,27,0)
(15,47,0)
(20,46,0)
(37,9,0)
(44,28,0)
(31,27,0)
(35,28,0)
(55,5,0)
(43,9,0)
(47,31,0)
(14,9,0)
(7,10,0)
(46,28,0)
(17,40,0)
(39,47,0)
(27,14,0)
(1,31,0)
(23,5,0)
(29,36,0)
(57,54,0)
(9,37,0)
(53,46,0)
(11,46,0)
(12,40,0)
(54,46,0)
(6,30,0)
(42,37,0)
(47,30,0)
(13,44,0)
(47,48,0)
(21,30,0)
(14,27,0)
(48,21,0)
(12,51,0)
(21,54,0)
(27,31,0)
(5,55,0)
(24,30,0)
(40,46,0)
(45,51,0)
(2,11,0)
(51,30,0)
(47,44,0)
(21,48,0)
(33,36,0)
(10,54,0)
(32,11,1)
(43,1,1)
(20,49,1)
(20,44,1)
(36,29,1)
(17,54,1)
(39,51,1)
(0,18,1)
(0,30,1)
(27,14,1)
(47,44,1)
(21,22,1)
(37,42,1)
(38,8,1)
(8,44,1)
(36,31,1)
(27,52,1)
(42,43,1)
(54,57,1)
(40,10,1)
(19,45,1)
(23,36,1)
(14,9,1)
(11,2,1)
(22,56,1)
(47,15,1)
(5,23,1)
(12,26,1)
(6,40,1)
(24,6,1)
(29,33,1)
(47,31,1)
(10,54,1)
(51,30,1)
(30,24,1)
(51,12,1)
(11,44,1)
(26,19,1)
(57,38,1)
(48,21,1)
(45,30,1)
(18,48,1)
(7,17,1)
(10,7,1)
(44,13,1)
(45,0,1)
(15,39,1)
(55,5,1)
(21,54,1)
(20,31,1)
(31,27,1)
(47,30,1)
(38,36,1)
(1,8,1)
(2,20,1)
(11,31,1)
(56,47,1)
(12,40,1)
(13,16,1)
(38,55,1)
(49,51,1)
(21,30,1)
(33,31,1)
(9,37,1)
(36,31,2)
(37,8,2)
(42,8,2)
(20,44,2)
(47,51,2)
(9,8,2)
(10,54,2)
(56,51,2)
(21,30,2)
(9,37,2)
(21,54,2)
(51,12,2)
(55,5,2)
(20,31,2)
(45,51,2)
(23,36,2)
(43,8,2)
(31,27,2)
(47,44,2)
(48,21,2)
(31,8,2)
(26,51,2)
(27,14,2)
(21,51,2)
(36,8,2)
(19,51,2)
(0,30,2)
(29,8,2)
(47,31,2)
(1,8,2)
(22,51,2)
(27,52,2)
(5,36,2)
(12,51,2)
(51,30,2)
(11,44,2)
(12,40,2)
(0,51,2)
(18,51,2)
(14,8,2)
(11,31,2)
(39,51,2)
(47,30,2)
(33,8,2)
(15,51,2)
(14,9,2)
(48,51,2)
(55,36,2)
(40,10,2)
(27,8,2)
(51,51,2)
-----------------------------------
(0,i++)
(1,data)
(2,data)
(3,data)
(4,)
(5,-1)
(6,i)
(7,source)
(8,GLOBAL_CONST_TRUE)
(9,10*sizeof(wchar_t)
(10,wcslen(source)
(11,free(data)
(12,sourceLen + 1)
(13,NULL)
(14,malloc(10*sizeof(wchar_t)
(15,i)
(16,data)
(17,sourceLen)
(18,i)
(19,sourceLen)
(20,printWLine(data)
(21,source[i])
(22,i)
(23,1)
(24,0)
(25,)
(26,1)
(27,(wchar_t *)
(28,)
(29,NULL)
(30,i = 0)
(31,data = (wchar_t *)
(32,RET)
(33,data)
(34,)
(35,if(GLOBAL_CONST_TRUE)
(36,data == NULL)
(37,sizeof(wchar_t)
(38,source)
(39,data)
(40,sourceLen = wcslen(source)
(41,i)
(42,wchar_t)
(43,10)
(44,data = NULL)
(45,i)
(46,)
(47,data[i])
(48,data[i] = source[i])
(49,data)
(50,if (data == NULL)
(51,i < sourceLen + 1)
(52,wchar_t *)
(53,sourceLen)
(54,source[10+1] = SRC_STRING)
(55,exit(-1)
(56,source)
(57,SRC_STRING)
(58,source)
(59,for (i = 0; i < sourceLen + 1; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^