-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_listen_socket_system_16_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    while(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            char *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = strlen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(char)] = '\0';
                /* Eliminate CRLF */
                replace = strchr(data, '\r');
                if (replace)
                {
                    *replace = '\0';
                }
                replace = strchr(data, '\n');
                if (replace)
                {
                    *replace = '\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
80,82
80,83
80,84
80,85
80,86
80,87
80,88
80,89
80,90
80,91
80,92
80,93
80,94
80,95
80,96
80,97
81,82
82,83
82,84
83,84
85,86
85,87
85,88
85,89
86,87
88,89
90,91
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
107,108
110,111
111,112
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
130,131
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
141,142
143,144
143,145
144,145
144,146
145,146
145,147
145,148
145,149
146,147
148,149
150,151
150,152
151,152
151,153
152,153
154,155
156,157
157,158
159,160
160,161
161,162
163,164
165,166
167,168
167,169
168,169
168,170
169,170
169,171
169,172
170,171
172,173
174,175
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
184,187
184,188
185,186
187,188
189,190
191,192
193,194
193,195
194,195
194,196
195,196
197,198
199,200
201,202
202,203
202,204
203,204
205,206
205,207
205,208
205,209
205,210
206,207
208,209
210,211
210,212
211,212
211,213
213,214
215,216
216,217
216,218
217,218
219,220
221,222
221,223
222,223
223,224
223,225
226,227
227,228
227,229
228,229
228,230
230,231
234,235
234,236
235,236
235,237
236,237
236,238
237,238
239,240
241,242
241,243
242,243
245,246
247,248
248,249
248,250
249,250
249,251
250,251
252,253
252,254
253,254
255,256
255,257
256,257
258,259
259,260
259,261
263,264
264,265
264,266
265,266
267,268
267,269
267,270
268,269
270,271
273,274
273,275
274,275
276,277
277,278
278,279
278,280
279,280
280,281
283,284
284,285
284,286
285,286
287,288
287,289
287,290
288,289
290,291
293,294
293,295
294,295
296,297
297,298
298,299
298,300
299,300
300,301
304,305
304,306
305,306
305,307
306,307
308,309
310,311
311,312
312,313
312,314
313,314
315,316
317,318
317,319
318,319
318,320
319,320
321,322
323,324
324,325
325,326
325,327
326,327
328,329
331,332
331,333
332,333
332,334
333,334
333,335
334,335
336,337
339,340
339,341
340,341
341,342
341,343
342,343
345,346
346,347
346,348
347,348
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,40,42,45,47,48,52,54,57,61,63,66,70,72,76,78,84,87,89,91,93,97,99,101,105,108,109,113,118,119,121,127,128,129,131,136,137,140,142,147,149,153,155,158,162,164,166,171,173,175,177,179,183,186,188,190,192,196,198,200,204,207,209,212,214,218,220,224,225,229,231,232,233,238,240,243,244,246,251,254,257,260,261,262,266,269,271,272,275,281,282,286,289,291,292,295,301,302,303,307,309,314,316,320,322,327,329,330,335,337,338,343,344,348,349
-----computeFrom-----
23,24
23,25
82,83
82,84
95,96
95,97
115,116
115,117
123,124
123,125
133,134
133,135
144,145
144,146
168,169
168,170
181,182
181,183
194,195
194,196
202,203
202,204
216,217
216,218
221,222
221,223
227,228
227,229
228,229
228,230
235,236
235,237
236,237
236,238
241,242
241,243
248,249
248,250
252,253
252,254
255,256
255,257
264,265
264,266
278,279
278,280
284,285
284,286
298,299
298,300
305,306
305,307
318,319
318,320
332,333
332,334
-----guardedBy-----
307,316
320,329
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_listen_socket_system_16_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__char_listen_socket_system_16_bad()
CWE78_OS_Command_Injection__char_listen_socket_system_16_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(197,92,0)
(14,78,0)
(37,42,0)
(50,189,0)
(3,80,0)
(89,147,0)
(203,97,0)
(130,118,0)
(209,189,0)
(152,0,0)
(130,176,0)
(73,42,0)
(11,63,0)
(31,84,0)
(16,5,0)
(58,92,0)
(76,23,0)
(28,189,0)
(109,142,0)
(75,201,0)
(155,0,0)
(191,15,0)
(71,23,0)
(106,78,0)
(62,55,0)
(59,189,0)
(84,31,0)
(99,210,0)
(148,135,0)
(60,91,0)
(90,13,0)
(199,22,0)
(159,149,0)
(211,68,0)
(169,158,0)
(15,189,0)
(110,19,0)
(11,197,0)
(194,118,0)
(128,177,0)
(207,197,0)
(72,142,0)
(123,187,0)
(204,60,0)
(39,133,0)
(22,147,0)
(74,19,0)
(91,60,0)
(40,202,0)
(152,147,0)
(145,31,0)
(92,153,0)
(167,187,0)
(5,99,0)
(147,2,0)
(27,22,0)
(36,47,0)
(135,129,0)
(19,91,0)
(154,88,0)
(186,10,0)
(52,13,0)
(141,202,0)
(64,63,0)
(151,147,0)
(198,125,0)
(38,189,0)
(127,168,0)
(199,209,0)
(133,147,0)
(197,153,0)
(119,19,0)
(105,147,0)
(206,185,0)
(94,3,0)
(17,73,0)
(190,189,0)
(100,97,0)
(99,125,0)
(13,91,0)
(139,75,0)
(185,189,0)
(205,147,0)
(202,209,0)
(163,25,0)
(91,189,0)
(87,147,0)
(12,205,0)
(114,83,0)
(208,33,0)
(118,130,0)
(196,153,0)
(10,63,0)
(150,147,0)
(66,153,0)
(210,126,0)
(97,100,0)
(201,149,0)
(164,49,0)
(181,98,0)
(24,209,0)
(67,100,0)
(85,147,0)
(49,55,0)
(69,118,0)
(55,197,0)
(177,22,0)
(102,149,0)
(93,178,0)
(200,149,0)
(113,168,0)
(18,153,0)
(187,167,0)
(25,209,0)
(46,208,0)
(56,91,0)
(107,147,0)
(192,201,0)
(60,100,0)
(149,201,0)
(177,209,0)
(34,15,0)
(32,106,0)
(178,130,0)
(97,197,0)
(1,147,0)
(23,205,0)
(182,106,0)
(165,176,0)
(210,99,0)
(70,147,0)
(209,25,0)
(140,96,0)
(103,111,0)
(136,152,0)
(171,26,0)
(47,98,0)
(127,197,0)
(97,152,0)
(121,60,0)
(7,133,0)
(100,60,0)
(73,57,0)
(33,208,0)
(124,75,0)
(25,201,0)
(81,117,0)
(208,206,0)
(10,135,0)
(44,25,0)
(110,13,0)
(126,210,0)
(77,199,0)
(42,60,0)
(49,189,0)
(0,197,0)
(78,88,0)
(111,167,0)
(180,199,0)
(167,111,0)
(60,42,0)
(42,37,0)
(4,206,0)
(57,152,0)
(3,201,0)
(86,127,0)
(143,11,0)
(13,110,0)
(208,152,0)
(142,189,0)
(174,55,0)
(3,205,0)
(188,92,0)
(57,73,0)
(33,115,0)
(177,122,0)
(30,21,0)
(206,197,0)
(42,73,0)
(125,99,0)
(195,35,0)
(132,2,0)
(63,189,0)
(63,11,0)
(160,147,0)
(168,127,0)
(29,25,0)
(45,167,0)
(131,97,0)
(120,147,0)
(146,147,0)
(115,33,0)
(99,5,0)
(104,57,0)
(166,82,0)
(137,99,0)
(78,106,0)
(33,91,0)
(170,57,0)
(193,115,0)
(184,197,0)
(19,110,0)
(82,68,0)
(183,211,0)
(84,189,0)
(88,189,0)
(101,185,0)
(162,138,0)
(172,117,0)
(100,67,0)
(47,201,0)
(98,47,0)
(134,205,0)
(41,47,0)
(0,152,0)
(99,201,0)
(210,112,0)
(156,108,0)
(179,189,0)
(167,189,0)
(65,109,0)
(43,109,0)
(61,189,0)
(112,210,0)
(176,130,0)
(173,11,0)
(51,189,0)
(79,33,0)
(55,49,0)
(96,84,0)
(23,201,0)
(9,37,0)
(60,209,0)
(157,126,0)
(8,153,0)
(161,22,0)
(130,178,0)
(206,208,0)
(172,49,0)
(175,96,0)
(20,172,0)
(201,189,0)
(117,6,0)
(123,45,1)
(10,63,1)
(206,197,1)
(156,75,1)
(176,165,1)
(161,205,1)
(84,31,1)
(166,168,1)
(167,111,1)
(65,43,1)
(44,24,1)
(91,60,1)
(76,30,1)
(125,198,1)
(104,170,1)
(78,106,1)
(199,22,1)
(181,47,1)
(167,187,1)
(76,162,1)
(92,58,1)
(13,52,1)
(52,90,1)
(25,29,1)
(86,53,1)
(54,199,1)
(58,188,1)
(194,152,1)
(136,22,1)
(118,69,1)
(81,172,1)
(148,10,1)
(172,20,1)
(177,128,1)
(17,37,1)
(19,91,1)
(76,114,1)
(127,86,1)
(12,134,1)
(5,99,1)
(0,197,1)
(211,183,1)
(134,133,1)
(53,197,1)
(110,19,1)
(99,125,1)
(76,171,1)
(174,164,1)
(99,210,1)
(97,197,1)
(177,209,1)
(62,174,1)
(145,96,1)
(93,130,1)
(114,178,1)
(184,207,1)
(143,173,1)
(60,204,1)
(60,100,1)
(171,5,1)
(11,143,1)
(168,127,1)
(31,145,1)
(3,205,1)
(208,152,1)
(206,208,1)
(106,32,1)
(96,140,1)
(86,132,1)
(131,121,1)
(41,5,1)
(175,88,1)
(23,201,1)
(157,137,1)
(23,71,1)
(39,53,1)
(163,44,1)
(72,109,1)
(47,36,1)
(128,199,1)
(100,97,1)
(7,39,1)
(116,168,1)
(60,209,1)
(142,72,1)
(205,12,1)
(11,197,1)
(164,135,1)
(197,92,1)
(127,197,1)
(90,19,1)
(210,112,1)
(10,186,1)
(130,118,1)
(22,27,1)
(154,78,1)
(74,119,1)
(192,15,1)
(0,155,1)
(46,4,1)
(95,117,1)
(60,42,1)
(48,63,1)
(169,202,1)
(37,9,1)
(19,74,1)
(45,111,1)
(172,49,1)
(139,124,1)
(98,47,1)
(15,34,1)
(110,13,1)
(76,156,1)
(24,98,1)
(121,56,1)
(29,163,1)
(180,77,1)
(30,110,1)
(202,141,1)
(115,193,1)
(13,91,1)
(77,3,1)
(99,201,1)
(5,16,1)
(76,95,1)
(144,49,1)
(124,201,1)
(71,76,1)
(199,209,1)
(76,169,1)
(3,94,1)
(88,154,1)
(57,152,1)
(55,62,1)
(152,0,1)
(202,209,1)
(191,178,1)
(69,194,1)
(32,182,1)
(182,142,1)
(201,149,1)
(178,130,1)
(33,115,1)
(207,92,1)
(109,65,1)
(197,184,1)
(102,192,1)
(209,25,1)
(79,46,1)
(198,210,1)
(42,37,1)
(113,127,1)
(194,95,1)
(56,202,1)
(36,41,1)
(97,203,1)
(165,118,1)
(54,177,1)
(77,23,1)
(210,126,1)
(34,191,1)
(164,48,1)
(177,22,1)
(97,152,1)
(75,201,1)
(42,73,1)
(119,91,1)
(141,40,1)
(204,42,1)
(75,139,1)
(63,11,1)
(137,84,1)
(43,167,1)
(185,101,1)
(149,159,1)
(186,48,1)
(16,99,1)
(27,161,1)
(4,110,1)
(94,23,1)
(103,75,1)
(64,185,1)
(57,104,1)
(55,197,1)
(73,57,1)
(168,113,1)
(130,176,1)
(162,98,1)
(193,79,1)
(33,91,1)
(3,201,1)
(20,144,1)
(173,64,1)
(159,200,1)
(14,106,1)
(40,209,1)
(135,148,1)
(155,136,1)
(78,14,1)
(183,82,1)
(170,17,1)
(23,205,1)
(49,55,1)
(101,206,1)
(187,123,1)
(178,93,1)
(47,201,1)
(111,103,1)
(9,100,1)
(116,211,1)
(203,131,1)
(133,7,1)
(199,180,1)
(200,102,1)
(117,81,1)
(100,67,1)
(95,144,1)
(98,181,1)
(126,157,1)
(208,33,1)
(140,175,1)
(195,54,1)
(132,195,1)
(82,166,1)
(25,201,1)
(132,54,1)
(173,110,2)
(192,178,2)
(123,75,2)
(200,178,2)
(141,98,2)
(60,209,2)
(10,63,2)
(96,75,2)
(100,97,2)
(177,199,2)
(149,178,2)
(71,53,2)
(29,98,2)
(201,178,2)
(155,53,2)
(12,53,2)
(5,99,2)
(37,202,2)
(103,75,2)
(203,202,2)
(156,75,2)
(154,75,2)
(194,95,2)
(182,75,2)
(152,0,2)
(64,110,2)
(176,95,2)
(177,209,2)
(181,5,2)
(201,149,2)
(119,202,2)
(33,91,2)
(72,75,2)
(187,75,2)
(139,178,2)
(162,98,2)
(93,53,2)
(110,13,2)
(40,98,2)
(163,98,2)
(39,53,2)
(3,23,2)
(204,202,2)
(74,202,2)
(42,73,2)
(93,95,2)
(77,53,2)
(202,98,2)
(23,53,2)
(126,75,2)
(11,110,2)
(97,202,2)
(148,48,2)
(42,202,2)
(94,23,2)
(0,197,2)
(114,178,2)
(100,202,2)
(208,152,2)
(195,54,2)
(11,197,2)
(137,75,2)
(63,11,2)
(30,110,2)
(206,110,2)
(206,197,2)
(170,202,2)
(60,100,2)
(134,53,2)
(130,176,2)
(78,106,2)
(199,209,2)
(13,19,2)
(143,110,2)
(178,53,2)
(84,31,2)
(42,37,2)
(97,152,2)
(24,98,2)
(131,202,2)
(14,75,2)
(57,152,2)
(174,110,2)
(165,95,2)
(168,127,2)
(46,110,2)
(145,75,2)
(183,168,2)
(99,125,2)
(157,75,2)
(98,47,2)
(78,75,2)
(69,53,2)
(10,48,2)
(73,202,2)
(165,53,2)
(49,110,2)
(110,202,2)
(164,110,2)
(124,178,2)
(136,53,2)
(55,110,2)
(167,75,2)
(57,202,2)
(22,53,2)
(209,98,2)
(19,91,2)
(142,75,2)
(130,53,2)
(44,98,2)
(109,75,2)
(117,144,2)
(31,75,2)
(193,110,2)
(60,202,2)
(210,112,2)
(41,5,2)
(210,126,2)
(36,5,2)
(132,53,2)
(56,202,2)
(90,19,2)
(198,75,2)
(144,110,2)
(73,57,2)
(118,95,2)
(60,42,2)
(128,199,2)
(194,53,2)
(191,178,2)
(211,168,2)
(99,201,2)
(202,209,2)
(0,53,2)
(62,110,2)
(135,48,2)
(91,60,2)
(104,202,2)
(106,75,2)
(199,22,2)
(206,208,2)
(172,144,2)
(63,110,2)
(133,53,2)
(15,178,2)
(152,53,2)
(23,205,2)
(20,144,2)
(140,75,2)
(99,75,2)
(210,75,2)
(209,25,2)
(167,187,2)
(125,75,2)
(185,110,2)
(4,110,2)
(175,75,2)
(171,5,2)
(17,202,2)
(166,168,2)
(75,178,2)
(115,110,2)
(100,67,2)
(130,95,2)
(91,202,2)
(75,201,2)
(180,53,2)
(178,130,2)
(88,75,2)
(32,75,2)
(159,178,2)
(110,19,2)
(25,201,2)
(34,178,2)
(81,144,2)
(111,75,2)
(7,53,2)
(43,75,2)
(161,53,2)
(54,53,2)
(47,5,2)
(9,202,2)
(167,111,2)
(97,197,2)
(98,5,2)
(176,53,2)
(23,201,2)
(47,201,2)
(177,22,2)
(33,115,2)
(16,75,2)
(199,53,2)
(69,95,2)
(178,95,2)
(3,201,2)
(101,110,2)
(102,178,2)
(52,19,2)
(169,202,2)
(130,118,2)
(3,205,2)
(65,75,2)
(33,110,2)
(79,110,2)
(55,197,2)
(48,110,2)
(27,53,2)
(45,75,2)
(197,92,2)
(5,75,2)
(118,53,2)
(84,75,2)
(186,48,2)
(13,91,2)
(19,202,2)
(205,53,2)
(76,53,2)
(99,210,2)
(172,49,2)
(208,110,2)
(127,197,2)
(208,33,2)
(82,168,2)
(95,110,2)
(25,98,2)
(121,202,2)
(49,55,2)
-----------------------------------
(0,strlen(data)
(1,listenSocket)
(2,)
(3,CLOSE_SOCKET(listenSocket)
(4,data)
(5,bind(listenSocket, (struct sockaddr*)
(6,)
(7,0)
(8,data_buf)
(9,char)
(10,*replace)
(11,strchr(data, \\\'\\\\r\\\')
(12,INVALID_SOCKET)
(13,recvResult == 0)
(14,s_addr)
(15,wsaDataInit = 1)
(16,SOCKET_ERROR)
(17,100)
(18,if (SYSTEM(data)
(19,recvResult == SOCKET_ERROR)
(20,replace)
(21,)
(22,acceptSocket = INVALID_SOCKET)
(23,listenSocket != INVALID_SOCKET)
(24,acceptSocket)
(25,accept(listenSocket, NULL, NULL)
(26,)
(27,INVALID_SOCKET)
(28,if (listen(listenSocket, LISTEN_BACKLOG)
(29,NULL)
(30,break;)
(31,htons(TCP_PORT)
(32,sin_addr)
(33,recvResult / sizeof(char)
(34,1)
(35,)
(36,LISTEN_BACKLOG)
(37,sizeof(char)
(38,if (replace)
(39,wsaDataInit)
(40,acceptSocket)
(41,listenSocket)
(42,sizeof(char)
(43,service)
(44,listenSocket)
(45,0)
(46,dataLen)
(47,listen(listenSocket, LISTEN_BACKLOG)
(48,replace)
(49,replace = strchr(data, \\\'\\\\n\\\')
(50,if (bind(listenSocket, (struct sockaddr*)
(51,if (listenSocket == INVALID_SOCKET)
(52,0)
(53,1)
(54,wsaDataInit)
(55,strchr(data, \\\'\\\\n\\\')
(56,recvResult)
(57,dataLen - 1)
(58,FULL_COMMAND)
(59,if (WSAStartup(MAKEWORD(2,2)
(60,recv(acceptSocket, (char *)
(61,if (replace)
(62,\\\'\\\\n\\\')
(63,replace = strchr(data, \\\'\\\\r\\\')
(64,replace)
(65,sin_family)
(66,while(1)
(67,char *)
(68,)
(69,2)
(70,if (wsaDataInit)
(71,INVALID_SOCKET)
(72,AF_INET)
(73,100 - dataLen - 1)
(74,SOCKET_ERROR)
(75,listenSocket == INVALID_SOCKET)
(76,listenSocket)
(77,acceptSocket)
(78,service.sin_addr.s_addr)
(79,recvResult)
(80,)
(81,\\\'\\\\0\\\')
(82,printLine("command execution failed!")
(83,)
(84,service.sin_port = htons(TCP_PORT)
(85,recvResult)
(86,data)
(87,dataLen)
(88,service.sin_addr.s_addr = INADDR_ANY)
(89,if (listenSocket != INVALID_SOCKET)
(90,recvResult)
(91,recvResult = recv(acceptSocket, (char *)
(92,data_buf[100] = FULL_COMMAND)
(93,NO_ERROR)
(94,listenSocket)
(95,0)
(96,service.sin_port)
(97,data + dataLen)
(98,listen(listenSocket, LISTEN_BACKLOG)
(99,bind(listenSocket, (struct sockaddr*)
(100,(char *)
(101,\\\'\\\\0\\\')
(102,AF_INET)
(103,service)
(104,1)
(105,wsaData)
(106,service.sin_addr)
(107,service)
(108,)
(109,service.sin_family)
(110,recvResult == SOCKET_ERROR || recvResult == 0)
(111,&service)
(112,struct sockaddr*)
(113,0)
(114,break;)
(115,sizeof(char)
(116,RET)
(117,*replace = \\\'\\\\0\\\')
(118,MAKEWORD(2,2)
(119,recvResult)
(120,replace)
(121,acceptSocket)
(122,)
(123,service)
(124,listenSocket)
(125,sizeof(service)
(126,&service)
(127,SYSTEM(data)
(128,acceptSocket)
(129,)
(130,WSAStartup(MAKEWORD(2,2)
(131,data)
(132,break;)
(133,wsaDataInit = 0)
(134,listenSocket)
(135,*replace = \\\'\\\\0\\\')
(136,dataLen)
(137,listenSocket)
(138,)
(139,INVALID_SOCKET)
(140,sin_port)
(141,SOCKET_ERROR)
(142,service.sin_family = AF_INET)
(143,\\\'\\\\r\\\')
(144,replace)
(145,TCP_PORT)
(146,do)
(147,)
(148,\\\'\\\\0\\\')
(149,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(150,if (acceptSocket != INVALID_SOCKET)
(151,acceptSocket)
(152,dataLen = strlen(data)
(153,)
(154,INADDR_ANY)
(155,data)
(156,break;)
(157,service)
(158,)
(159,IPPROTO_TCP)
(160,wsaDataInit)
(161,acceptSocket)
(162,break;)
(163,NULL)
(164,replace)
(165,wsaData)
(166,"command execution failed!")
(167,memset(&service, 0, sizeof(service)
(168,SYSTEM(data)
(169,break;)
(170,dataLen)
(171,break;)
(172,*replace)
(173,data)
(174,data)
(175,service)
(176,&wsaData)
(177,CLOSE_SOCKET(acceptSocket)
(178,WSAStartup(MAKEWORD(2,2)
(179,if (recvResult == SOCKET_ERROR || recvResult == 0)
(180,INVALID_SOCKET)
(181,SOCKET_ERROR)
(182,service)
(183,1)
(184,data_buf)
(185,data[dataLen + recvResult / sizeof(char)
(186,replace)
(187,sizeof(service)
(188,data_buf)
(189,)
(190,if (acceptSocket == SOCKET_ERROR)
(191,wsaDataInit)
(192,listenSocket)
(193,char)
(194,2)
(195,WSACleanup()
(196,data)
(197,data = data_buf)
(198,service)
(199,acceptSocket != INVALID_SOCKET)
(200,SOCK_STREAM)
(201,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(202,acceptSocket == SOCKET_ERROR)
(203,dataLen)
(204,0)
(205,listenSocket = INVALID_SOCKET)
(206,data[dataLen + recvResult / sizeof(char)
(207,data)
(208,dataLen + recvResult / sizeof(char)
(209,acceptSocket = accept(listenSocket, NULL, NULL)
(210,(struct sockaddr*)
(211,exit(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^