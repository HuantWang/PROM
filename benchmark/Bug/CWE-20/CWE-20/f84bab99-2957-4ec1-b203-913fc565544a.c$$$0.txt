-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,78,80,84,86
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,7,0)
(21,2,0)
(32,36,0)
(8,32,0)
(27,30,0)
(10,37,0)
(33,37,0)
(5,12,0)
(27,33,0)
(19,27,0)
(18,31,0)
(20,27,0)
(7,33,0)
(7,3,0)
(28,30,0)
(23,18,0)
(3,2,0)
(26,3,0)
(0,30,0)
(29,33,0)
(33,6,0)
(16,12,0)
(1,15,0)
(32,8,0)
(25,15,0)
(13,31,0)
(7,12,0)
(35,8,0)
(12,2,0)
(11,12,0)
(18,23,0)
(31,18,0)
(37,10,0)
(27,3,0)
(5,3,0)
(5,33,0)
(15,33,0)
(9,2,0)
(14,6,0)
(4,18,0)
(22,5,0)
(30,3,0)
(27,12,0)
(23,37,0)
(37,23,0)
(37,33,0)
(24,5,1)
(37,10,1)
(5,12,1)
(0,28,1)
(5,33,1)
(11,16,1)
(25,33,1)
(22,27,1)
(8,35,1)
(23,18,1)
(34,12,1)
(32,8,1)
(28,32,1)
(31,13,1)
(27,33,1)
(29,34,1)
(12,11,1)
(17,7,1)
(27,30,1)
(30,0,1)
(7,24,1)
(7,12,1)
(18,31,1)
(1,25,1)
(4,29,1)
(5,22,1)
(27,12,1)
(28,34,1)
(37,23,1)
(33,37,1)
(7,33,1)
(15,33,1)
(27,19,1)
(35,15,1)
(20,30,1)
(13,4,1)
(19,20,1)
(15,1,1)
(28,15,1)
(1,34,2)
(31,34,2)
(27,33,2)
(32,8,2)
(18,31,2)
(37,34,2)
(27,12,2)
(5,12,2)
(23,18,2)
(7,33,2)
(25,34,2)
(8,15,2)
(29,34,2)
(37,10,2)
(23,34,2)
(33,34,2)
(13,34,2)
(32,15,2)
(37,23,2)
(35,15,2)
(5,33,2)
(4,34,2)
(27,30,2)
(33,37,2)
(15,34,2)
(7,12,2)
(18,34,2)
(15,33,2)
-----------------------------------
(0,SRC_STRING)
(1,NULL)
(2,)
(3,)
(4,10)
(5,printLine(data)
(6,)
(7,free(data)
(8,-1)
(9,data)
(10,char *)
(11,NULL)
(12,data = NULL)
(13,char)
(14,if (data == NULL)
(15,data == NULL)
(16,data)
(17,RET)
(18,10*sizeof(char)
(19,source)
(20,data)
(21,if(globalReturnsTrue()
(22,data)
(23,malloc(10*sizeof(char)
(24,data)
(25,data)
(26,source)
(27,strcpy(data, source)
(28,source)
(29,data)
(30,source[10+1] = SRC_STRING)
(31,sizeof(char)
(32,exit(-1)
(33,data = (char *)
(34,globalReturnsTrue()
(35,1)
(36,)
(37,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^