-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(staticFive==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcsncat(dest, data, wcslen(data));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,88,90,95,97,98,99,103,105,109,111
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcsncat(dest, data, wcslen(data));
wcsncat(dest, data, wcslen(data))
wcsncat
wcsncat
dest
dest
data
data
wcslen(data)
wcslen
wcslen
data
data
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,9,0)
(30,33,0)
(32,16,0)
(17,16,0)
(16,32,0)
(23,31,0)
(10,2,0)
(3,20,0)
(28,38,0)
(9,20,0)
(32,11,0)
(30,2,0)
(26,30,0)
(32,2,0)
(2,32,0)
(12,2,0)
(17,8,0)
(22,38,0)
(37,30,0)
(5,2,0)
(9,4,0)
(13,28,0)
(33,2,0)
(0,31,0)
(16,17,0)
(19,28,0)
(6,38,0)
(36,12,0)
(12,28,0)
(15,17,0)
(11,32,0)
(30,28,0)
(33,30,0)
(14,10,0)
(8,17,0)
(13,2,0)
(1,35,0)
(27,10,0)
(18,13,0)
(2,38,0)
(34,33,0)
(24,38,0)
(21,28,0)
(7,8,0)
(33,2,1)
(7,15,1)
(20,3,1)
(13,18,1)
(12,2,1)
(27,2,1)
(32,11,1)
(3,10,1)
(23,10,1)
(23,9,1)
(1,31,1)
(18,19,1)
(14,27,1)
(0,23,1)
(30,33,1)
(16,17,1)
(25,12,1)
(33,34,1)
(8,7,1)
(21,31,1)
(34,26,1)
(21,1,1)
(10,2,1)
(10,14,1)
(12,36,1)
(32,16,1)
(37,21,1)
(2,32,1)
(17,8,1)
(19,30,1)
(9,20,1)
(30,2,1)
(26,37,1)
(36,13,1)
(13,2,1)
(15,5,1)
(31,0,1)
(12,2,2)
(30,33,2)
(20,10,2)
(32,11,2)
(9,20,2)
(16,17,2)
(30,2,2)
(32,16,2)
(2,32,2)
(3,10,2)
(33,2,2)
(13,2,2)
(1,31,2)
(10,2,2)
(9,10,2)
(17,8,2)
-----------------------------------
(0,5)
(1,\\'\\\\0\\')
(2,data = (wchar_t *)
(3,1)
(4,)
(5,data)
(6,if (data == NULL)
(7,wchar_t)
(8,sizeof(wchar_t)
(9,exit(-1)
(10,data == NULL)
(11,wchar_t *)
(12,free(data)
(13,printWLine(data)
(14,NULL)
(15,100)
(16,malloc(100*sizeof(wchar_t)
(17,100*sizeof(wchar_t)
(18,data)
(19,\\\'\\\\0\\\')
(20,-1)
(21,"")
(22,if(staticFive==5)
(23,staticFive)
(24,data)
(25,RET)
(26,data)
(27,data)
(28,)
(29,\\\'\\\\0\\\')
(30,wcsncat(dest, data, wcslen(data)
(31,staticFive==5)
(32,(wchar_t *)
(33,wcslen(data)
(34,data)
(35,)
(36,data)
(37,dest)
(38,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^