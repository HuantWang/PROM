-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21_bad()
{
    wchar_t * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
36,37
36,38
36,39
38,39
39,40
39,41
42,43
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
51,52
53,54
53,55
54,55
55,56
55,57
56,57
56,58
57,58
59,60
62,63
63,64
63,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,40,41,44,48,50,52,58,60,61,64,65,69,71,75,77
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
39,40
39,41
53,54
53,55
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21_bad(){    wchar_t * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21_bad
{    wchar_t * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memmove
memmove
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(9,22,0)
(22,21,0)
(18,22,0)
(27,21,0)
(9,11,0)
(9,23,0)
(29,21,0)
(1,24,0)
(22,9,0)
(16,3,0)
(23,9,0)
(1,26,0)
(0,26,0)
(26,2,0)
(16,23,0)
(14,21,0)
(20,6,0)
(15,3,0)
(30,6,0)
(21,24,0)
(7,24,0)
(29,1,0)
(6,24,0)
(31,11,0)
(3,21,0)
(14,1,0)
(17,22,0)
(25,16,0)
(28,23,0)
(12,3,0)
(26,1,0)
(4,2,0)
(13,29,0)
(5,2,0)
(2,24,0)
(8,1,0)
(22,3,0)
(11,9,0)
(19,14,0)
(22,1,0)
(23,16,0)
(9,23,1)
(23,28,1)
(30,20,1)
(23,16,1)
(28,16,1)
(22,1,1)
(2,4,1)
(13,14,1)
(20,2,1)
(29,1,1)
(0,8,1)
(1,26,1)
(6,30,1)
(19,22,1)
(25,17,1)
(11,31,1)
(15,1,1)
(9,11,1)
(26,0,1)
(10,29,1)
(16,25,1)
(8,6,1)
(31,23,1)
(22,3,1)
(18,3,1)
(14,1,1)
(29,13,1)
(4,5,1)
(12,15,1)
(22,9,1)
(3,12,1)
(26,2,1)
(17,18,1)
(14,19,1)
(16,3,1)
(1,26,2)
(14,1,2)
(26,2,2)
(29,1,2)
(9,11,2)
(23,16,2)
(9,23,2)
(22,1,2)
(22,3,2)
(22,9,2)
(16,3,2)
-----------------------------------
(0,data)
(1,data = badSource(data)
(2,data = NULL)
(3,source[10+1] = SRC_STRING)
(4,NULL)
(5,data)
(6,badStatic = 1)
(7,data)
(8,data)
(9,(wcslen(source)
(10,RET)
(11,sizeof(wchar_t)
(12,SRC_STRING)
(13,data)
(14,printWLine(data)
(15,source)
(16,wcslen(source)
(17,source)
(18,data)
(19,data)
(20,badStatic)
(21,)
(22,memmove(data, source, (wcslen(source)
(23,wcslen(source)
(24,)
(25,source)
(26,badSource(data)
(27,source)
(28,1)
(29,free(data)
(30,1)
(31,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^