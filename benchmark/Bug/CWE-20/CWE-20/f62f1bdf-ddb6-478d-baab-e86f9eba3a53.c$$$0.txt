-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
90,93
92,93
94,95
95,96
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
102,103
104,105
104,106
104,107
104,108
105,106
106,107
106,108
107,108
110,111
110,112
111,112
114,115
115,116
117,118
118,119
119,120
119,121
120,121
120,122
121,122
123,124
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
134,136
135,136
138,139
139,140
139,141
140,141
142,143
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,61,63,66,68,71,72,76,78,83,85,89,91,93,96,101,103,108,109,112,113,116,122,124,127,129,133,136,137,141,143
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
56,57
56,58
67,68
67,69
74,75
74,76
106,107
106,108
110,111
110,112
119,120
119,121
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(47,36,0)
(60,5,0)
(64,27,0)
(70,34,0)
(28,4,0)
(32,39,0)
(34,55,0)
(1,67,0)
(29,72,0)
(23,10,0)
(53,12,0)
(42,7,0)
(71,59,0)
(48,54,0)
(24,49,0)
(58,11,0)
(67,55,0)
(72,37,0)
(22,35,0)
(41,69,0)
(52,72,0)
(11,49,0)
(49,11,0)
(51,63,0)
(18,56,0)
(72,52,0)
(3,69,0)
(69,30,0)
(2,23,0)
(21,54,0)
(41,5,0)
(14,23,0)
(4,10,0)
(0,37,0)
(23,55,0)
(46,20,0)
(65,55,0)
(31,4,0)
(5,10,0)
(5,41,0)
(10,4,0)
(52,35,0)
(23,52,0)
(30,7,0)
(10,56,0)
(0,12,0)
(15,16,0)
(8,34,0)
(62,57,0)
(57,52,0)
(33,10,0)
(68,45,0)
(50,0,0)
(26,52,0)
(40,30,0)
(28,11,0)
(72,29,0)
(34,47,0)
(20,25,0)
(34,16,0)
(4,28,0)
(37,0,0)
(66,46,0)
(44,63,0)
(6,7,0)
(16,30,0)
(27,10,0)
(12,0,0)
(43,55,0)
(38,69,0)
(68,39,0)
(4,31,0)
(59,7,0)
(20,46,0)
(27,69,0)
(11,28,0)
(61,57,0)
(19,5,0)
(17,59,0)
(63,10,0)
(37,72,0)
(5,52,0)
(47,34,0)
(23,47,0)
(54,55,0)
(39,68,0)
(27,52,0)
(23,55,1)
(5,60,1)
(43,65,1)
(11,49,1)
(55,43,1)
(58,33,1)
(27,10,1)
(17,71,1)
(63,10,1)
(34,16,1)
(70,23,1)
(61,62,1)
(27,64,1)
(15,63,1)
(12,53,1)
(34,55,1)
(48,67,1)
(28,11,1)
(59,17,1)
(15,68,1)
(5,10,1)
(53,50,1)
(62,52,1)
(49,24,1)
(64,41,1)
(41,5,1)
(1,47,1)
(63,51,1)
(48,55,1)
(27,52,1)
(67,55,1)
(23,2,1)
(54,21,1)
(21,48,1)
(0,12,1)
(5,52,1)
(68,39,1)
(15,20,1)
(66,63,1)
(37,0,1)
(65,16,1)
(54,55,1)
(13,59,1)
(16,15,1)
(67,1,1)
(2,14,1)
(33,13,1)
(51,44,1)
(4,28,1)
(14,54,1)
(50,26,1)
(72,29,1)
(60,19,1)
(32,57,1)
(72,37,1)
(23,10,1)
(39,32,1)
(20,46,1)
(47,34,1)
(15,57,1)
(19,54,1)
(8,70,1)
(9,27,1)
(57,52,1)
(23,52,1)
(44,10,1)
(57,61,1)
(46,66,1)
(52,72,1)
(24,58,1)
(10,4,1)
(4,31,1)
(34,8,1)
(26,13,1)
(14,54,2)
(44,13,2)
(54,54,2)
(54,55,2)
(23,10,2)
(67,54,2)
(24,13,2)
(63,10,2)
(57,13,2)
(62,13,2)
(20,46,2)
(61,13,2)
(0,13,2)
(52,72,2)
(57,52,2)
(20,63,2)
(70,54,2)
(68,57,2)
(4,13,2)
(10,13,2)
(47,34,2)
(23,55,2)
(72,29,2)
(28,11,2)
(5,52,2)
(1,54,2)
(63,13,2)
(27,52,2)
(2,54,2)
(0,12,2)
(34,16,2)
(50,13,2)
(67,55,2)
(26,13,2)
(58,13,2)
(23,54,2)
(4,31,2)
(4,28,2)
(37,0,2)
(68,39,2)
(34,54,2)
(53,13,2)
(12,13,2)
(47,54,2)
(27,10,2)
(28,13,2)
(11,13,2)
(72,13,2)
(48,54,2)
(46,63,2)
(11,49,2)
(72,37,2)
(37,13,2)
(52,13,2)
(39,57,2)
(8,54,2)
(10,4,2)
(32,57,2)
(49,13,2)
(51,13,2)
(66,63,2)
(41,5,2)
(5,10,2)
(23,52,2)
(21,54,2)
(33,13,2)
(34,55,2)
-----------------------------------
(0,100*sizeof(int)
(1,i)
(2,i)
(3,i)
(4,(int *)
(5,data[0])
(6,data)
(7,)
(8,i)
(9,RET)
(10,data = (int *)
(11,50*sizeof(int)
(12,sizeof(int)
(13,globalReturnsTrueOrFalse()
(14,data)
(15,source)
(16,source[100] = {0})
(17,NULL)
(18,if (data == NULL)
(19,data)
(20,exit(-1)
(21,100)
(22,if (data == NULL)
(23,data[i])
(24,int)
(25,)
(26,data)
(27,free(data)
(28,malloc(50*sizeof(int)
(29,int *)
(30,)
(31,int *)
(32,1)
(33,data)
(34,source[i])
(35,)
(36,)
(37,malloc(100*sizeof(int)
(38,for (i = 0; i < 100; i++)
(39,-1)
(40,source)
(41,printIntLine(data[0])
(42,if(globalReturnsTrueOrFalse()
(43,0)
(44,data)
(45,)
(46,-1)
(47,data[i] = source[i])
(48,i)
(49,sizeof(int)
(50,100)
(51,NULL)
(52,data = (int *)
(53,int)
(54,i < 100)
(55,i = 0)
(56,)
(57,data == NULL)
(58,50)
(59,data = NULL)
(60,0)
(61,NULL)
(62,data)
(63,data == NULL)
(64,data)
(65,i)
(66,1)
(67,i++)
(68,exit(-1)
(69,)
(70,source)
(71,data)
(72,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^