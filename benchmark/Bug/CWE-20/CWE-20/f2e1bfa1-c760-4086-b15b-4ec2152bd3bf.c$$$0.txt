-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,69,73,75,79,81
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
71,72
71,73
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_10_bad()
CWE190_Integer_Overflow__int_fgets_square_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(39,36,0)
(15,9,0)
(25,14,0)
(24,29,0)
(23,14,0)
(37,4,0)
(26,10,0)
(18,13,0)
(10,30,0)
(36,22,0)
(3,4,0)
(38,4,0)
(40,16,0)
(36,27,0)
(37,13,0)
(0,6,0)
(33,18,0)
(13,21,0)
(14,29,0)
(1,37,0)
(29,14,0)
(6,9,0)
(4,35,0)
(31,16,0)
(8,13,0)
(18,37,0)
(12,16,0)
(9,20,0)
(7,22,0)
(14,6,0)
(4,37,0)
(4,36,0)
(17,35,0)
(22,36,0)
(2,14,0)
(5,9,0)
(34,35,0)
(11,6,0)
(35,16,0)
(22,6,0)
(29,14,1)
(4,3,1)
(26,29,1)
(29,24,1)
(14,25,1)
(19,36,1)
(37,4,1)
(39,29,1)
(38,1,1)
(28,35,1)
(19,28,1)
(14,6,1)
(18,33,1)
(2,23,1)
(23,6,1)
(22,7,1)
(18,37,1)
(32,18,1)
(24,14,1)
(22,6,1)
(0,28,1)
(32,19,1)
(3,38,1)
(25,2,1)
(33,37,1)
(36,22,1)
(10,26,1)
(4,35,1)
(11,0,1)
(17,34,1)
(35,17,1)
(7,39,1)
(4,36,1)
(1,19,1)
(19,10,1)
(6,11,1)
(11,28,2)
(25,28,2)
(36,29,2)
(29,14,2)
(3,19,2)
(1,19,2)
(37,19,2)
(39,29,2)
(36,22,2)
(22,29,2)
(14,6,2)
(38,19,2)
(23,28,2)
(29,28,2)
(26,29,2)
(14,28,2)
(4,35,2)
(33,19,2)
(2,28,2)
(4,19,2)
(10,29,2)
(6,28,2)
(24,28,2)
(22,6,2)
(18,19,2)
(0,28,2)
(7,29,2)
(4,36,2)
(18,37,2)
(37,4,2)
-----------------------------------
(0,inputBuffer)
(1,result)
(2,CHAR_ARRAY_SIZE)
(3,data)
(4,data * data)
(5,inputBuffer)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,inputBuffer)
(8,result)
(9,)
(10,printLine("fgets()
(11,"")
(12,if(globalTrue)
(13,)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,)
(17,0)
(18,printIntLine(result)
(19,globalTrue)
(20,)
(21,)
(22,atoi(inputBuffer)
(23,inputBuffer)
(24,NULL)
(25,stdin)
(26,"fgets()
(27,)
(28,globalTrue)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,)
(31,data)
(32,RET)
(33,result)
(34,data)
(35,data = 0)
(36,data = atoi(inputBuffer)
(37,result = data * data)
(38,data)
(39,data)
(40,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^