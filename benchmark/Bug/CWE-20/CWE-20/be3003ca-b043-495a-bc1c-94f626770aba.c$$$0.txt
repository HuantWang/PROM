-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            strncpy(data, source, 100-1);
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
82,89
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
110,113
110,114
111,112
113,114
115,116
117,118
117,119
120,121
121,122
121,123
122,123
122,124
123,124
125,126
125,127
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,67,69,73,75,76,80,81,85,87,89,93,95,96,98,99,104,106,107,108,112,114,116,118,119,124,126,127,128,132,134,138,140
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
63,64
63,65
97,98
97,99
101,102
101,103
105,106
105,107
117,118
117,119
121,122
121,123
125,126
125,127
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,30,0)
(53,35,0)
(24,19,0)
(41,12,0)
(31,53,0)
(15,12,0)
(28,24,0)
(72,5,0)
(52,12,0)
(56,4,0)
(4,9,0)
(21,59,0)
(45,9,0)
(5,18,0)
(40,46,0)
(50,67,0)
(13,42,0)
(67,50,0)
(30,15,0)
(18,5,0)
(59,12,0)
(73,55,0)
(58,51,0)
(64,57,0)
(13,32,0)
(24,28,0)
(50,17,0)
(37,55,0)
(20,3,0)
(5,47,0)
(36,17,0)
(44,29,0)
(12,29,0)
(47,46,0)
(57,50,0)
(43,41,0)
(33,35,0)
(65,15,0)
(51,17,0)
(10,67,0)
(9,10,0)
(59,46,0)
(54,18,0)
(32,13,0)
(66,57,0)
(14,49,0)
(27,3,0)
(67,23,0)
(38,13,0)
(71,6,0)
(70,30,0)
(0,36,0)
(55,46,0)
(55,3,0)
(68,6,0)
(42,46,0)
(2,50,0)
(1,17,0)
(67,10,0)
(62,36,0)
(60,30,0)
(10,9,0)
(69,28,0)
(29,17,0)
(41,46,0)
(26,17,0)
(35,50,0)
(46,29,0)
(9,4,0)
(15,46,0)
(3,55,0)
(61,53,0)
(6,50,0)
(34,17,0)
(22,15,0)
(16,49,0)
(23,67,0)
(25,47,0)
(39,32,0)
(13,12,0)
(6,51,0)
(35,17,0)
(49,12,0)
(8,18,0)
(7,42,0)
(11,32,0)
(12,49,0)
(42,7,1)
(41,12,1)
(4,56,1)
(67,10,1)
(15,12,1)
(33,53,1)
(30,70,1)
(2,36,1)
(25,5,1)
(36,0,1)
(71,57,1)
(6,50,1)
(47,25,1)
(73,37,1)
(53,31,1)
(6,68,1)
(38,15,1)
(45,2,1)
(13,32,1)
(55,3,1)
(35,33,1)
(71,24,1)
(31,61,1)
(51,58,1)
(64,50,1)
(12,49,1)
(67,23,1)
(3,20,1)
(15,30,1)
(10,9,1)
(50,67,1)
(52,35,1)
(69,57,1)
(24,28,1)
(22,65,1)
(65,47,1)
(59,21,1)
(20,27,1)
(56,45,1)
(27,73,1)
(57,50,1)
(61,51,1)
(54,8,1)
(28,69,1)
(41,43,1)
(0,62,1)
(48,41,1)
(57,66,1)
(59,12,1)
(32,39,1)
(49,14,1)
(39,11,1)
(35,50,1)
(68,71,1)
(14,16,1)
(66,64,1)
(16,52,1)
(11,38,1)
(43,59,1)
(21,42,1)
(58,6,1)
(18,54,1)
(7,13,1)
(5,18,1)
(37,12,1)
(13,12,1)
(9,4,1)
(72,55,1)
(8,72,1)
(70,60,1)
(60,22,1)
(12,49,2)
(28,57,2)
(15,30,2)
(67,23,2)
(35,50,2)
(67,10,2)
(13,32,2)
(10,9,2)
(50,67,2)
(69,57,2)
(24,57,2)
(41,12,2)
(6,50,2)
(5,18,2)
(59,12,2)
(57,50,2)
(9,4,2)
(13,12,2)
(55,3,2)
(15,12,2)
(24,28,2)
-----------------------------------
(0,NULL)
(1,data)
(2,data)
(3,100-1)
(4,sizeof(char)
(5,source[100-1])
(6,data[0])
(7,'\\\\0')
(8,100)
(9,50*sizeof(char)
(10,malloc(50*sizeof(char)
(11,100)
(12,* data = myUnion.unionSecond)
(13,data[100-1])
(14,unionSecond)
(15,strncpy(data, source, 100-1)
(16,myUnion)
(17,)
(18,100-1)
(19,)
(20,1)
(21,data)
(22,source)
(23,char *)
(24,exit(-1)
(25,'\\\\0')
(26,if (data == NULL)
(27,100)
(28,-1)
(29,)
(30,100-1)
(31,unionFirst)
(32,100-1)
(33,data)
(34,myUnion)
(35,myUnion.unionFirst = data)
(36,data = NULL)
(37,source)
(38,data)
(39,1)
(40,source)
(41,free(data)
(42,data[100-1] = '\\\\0')
(43,data)
(44,data)
(45,50)
(46,)
(47,source[100-1] = '\\\\0')
(48,RET)
(49,myUnion.unionSecond)
(50,data = (char *)
(51,data[0] = '\\\\0')
(52,data)
(53,myUnion.unionFirst)
(54,1)
(55,memset(source, 'C', 100-1)
(56,char)
(57,data == NULL)
(58,'\\\\0')
(59,printLine(data)
(60,100)
(61,myUnion)
(62,data)
(63,memset(source, \'C\', 100-1)
(64,data)
(65,data)
(66,NULL)
(67,(char *)
(68,0)
(69,1)
(70,1)
(71,data)
(72,source)
(73,'C')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^