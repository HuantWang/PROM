-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_41_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    data = (int64_t *)malloc(100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,55,57,61,63
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_41_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    badSink(data);}
void
CWE415_Double_Free__malloc_free_int64_t_41_bad()
CWE415_Double_Free__malloc_free_int64_t_41_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    badSink(data);}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(11,25,0)
(3,25,0)
(11,3,0)
(15,0,0)
(26,19,0)
(16,2,0)
(20,25,0)
(19,14,0)
(17,1,0)
(2,16,0)
(4,3,0)
(10,25,0)
(12,3,0)
(19,26,0)
(0,15,0)
(23,1,0)
(8,26,0)
(0,16,0)
(1,25,0)
(20,3,0)
(9,15,0)
(13,20,0)
(15,24,0)
(18,25,0)
(16,0,0)
(24,15,0)
(3,16,0)
(6,4,0)
(5,4,0)
(21,24,0)
(7,11,0)
(16,3,0)
(16,2,1)
(13,4,1)
(22,11,1)
(23,17,1)
(5,6,1)
(0,15,1)
(6,3,1)
(16,0,1)
(4,3,1)
(20,3,1)
(20,13,1)
(13,19,1)
(9,12,1)
(12,1,1)
(1,23,1)
(11,7,1)
(11,3,1)
(24,21,1)
(7,20,1)
(3,16,1)
(15,24,1)
(19,26,1)
(4,5,1)
(21,9,1)
(8,4,1)
(26,8,1)
(19,26,2)
(0,15,2)
(26,4,2)
(16,0,2)
(19,4,2)
(4,3,2)
(3,16,2)
(20,3,2)
(8,4,2)
(15,24,2)
(11,3,2)
(16,2,2)
-----------------------------------
(0,malloc(100*sizeof(int64_t)
(1,data = NULL)
(2,int64_t *)
(3,data = (int64_t *)
(4,data == NULL)
(5,NULL)
(6,data)
(7,data)
(8,1)
(9,100)
(10,if (data == NULL)
(11,badSink(data)
(12,data)
(13,data)
(14,)
(15,100*sizeof(int64_t)
(16,(int64_t *)
(17,data)
(18,data)
(19,exit(-1)
(20,free(data)
(21,int64_t)
(22,RET)
(23,NULL)
(24,sizeof(int64_t)
(25,)
(26,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^