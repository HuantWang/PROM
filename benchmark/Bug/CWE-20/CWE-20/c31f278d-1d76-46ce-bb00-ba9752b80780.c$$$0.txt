-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_14_bad()
CWE190_Integer_Overflow__char_rand_postinc_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,0,0)
(25,4,0)
(7,30,0)
(0,23,0)
(25,22,0)
(7,27,0)
(27,7,0)
(9,20,0)
(7,26,0)
(26,13,0)
(20,0,0)
(5,2,0)
(30,7,0)
(11,23,0)
(6,4,0)
(14,8,0)
(20,22,0)
(24,23,0)
(26,7,0)
(17,8,0)
(4,0,0)
(22,12,0)
(4,22,0)
(21,26,0)
(4,26,0)
(10,2,0)
(20,26,0)
(15,23,0)
(19,25,0)
(18,0,0)
(16,4,0)
(28,22,0)
(19,4,1)
(20,9,1)
(4,26,1)
(26,7,1)
(27,21,1)
(10,0,1)
(14,17,1)
(1,18,1)
(20,26,1)
(4,0,1)
(16,20,1)
(5,10,1)
(2,5,1)
(17,2,1)
(8,14,1)
(25,4,1)
(25,19,1)
(7,30,1)
(6,16,1)
(17,26,1)
(7,27,1)
(20,0,1)
(4,6,1)
(3,8,1)
(3,25,1)
(21,2,1)
(0,1,1)
(9,8,1)
(20,8,2)
(26,7,2)
(7,2,2)
(21,2,2)
(20,0,2)
(7,27,2)
(26,2,2)
(20,26,2)
(4,0,2)
(25,4,2)
(7,30,2)
(19,8,2)
(4,26,2)
(16,8,2)
(25,8,2)
(9,8,2)
(4,8,2)
(27,2,2)
(6,8,2)
-----------------------------------
(0,data = ' ')
(1,' ')
(2,globalFive==5)
(3,RET)
(4,result = data)
(5,5)
(6,data)
(7,(char)
(8,globalFive==5)
(9,data)
(10,globalFive)
(11,data)
(12,)
(13,)
(14,5)
(15,if(globalFive==5)
(16,result)
(17,globalFive)
(18,data)
(19,result)
(20,data++)
(21,data)
(22,)
(23,)
(24,if(globalFive==5)
(25,printHexCharLine(result)
(26,data = (char)
(27,RAND32()
(28,result)
(29,data = \' \')
(30,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^