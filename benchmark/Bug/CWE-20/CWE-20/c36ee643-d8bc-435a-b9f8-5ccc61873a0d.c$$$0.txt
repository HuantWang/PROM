-----label-----
1
-----code-----
static void badSink()
{
    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
9,12
12,13
13,14
15,16
15,17
15,18
15,19
16,17
17,18
17,19
19,20
19,21
19,22
21,22
22,23
22,24
25,26
26,27
28,29
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
36,38
37,38
38,39
38,40
39,40
39,41
40,41
42,43
45,46
46,47
46,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,11,14,18,20,23,24,27,31,33,35,41,43,44,47,48,52,54,58,60
-----computeFrom-----
22,23
22,24
36,37
36,38
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
static void
badSink()
badSink
{    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;
char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;
char
* data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData
*
data
= CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,18,0)
(20,24,0)
(13,18,0)
(13,0,0)
(3,13,0)
(11,24,0)
(7,9,0)
(14,0,0)
(0,18,0)
(2,1,0)
(23,9,0)
(19,5,0)
(6,10,0)
(24,11,0)
(1,2,0)
(8,9,0)
(17,8,0)
(22,0,0)
(16,13,0)
(11,13,0)
(8,18,0)
(10,9,0)
(18,5,0)
(10,18,0)
(21,1,0)
(4,2,0)
(11,1,0)
(2,0,0)
(13,9,0)
(9,5,0)
(13,11,0)
(1,11,0)
(24,20,1)
(1,2,1)
(11,1,1)
(3,16,1)
(1,21,1)
(8,9,1)
(6,13,1)
(17,10,1)
(10,9,1)
(20,1,1)
(12,8,1)
(0,22,1)
(13,0,1)
(9,23,1)
(2,4,1)
(14,9,1)
(4,3,1)
(11,24,1)
(10,6,1)
(2,0,1)
(21,2,1)
(13,9,1)
(13,11,1)
(22,14,1)
(16,0,1)
(8,17,1)
(23,7,1)
(13,9,2)
(13,11,2)
(13,0,2)
(8,9,2)
(2,0,2)
(11,1,2)
(1,2,2)
(11,24,2)
(10,9,2)
-----------------------------------
(0,source[10+1] = SRC_STRING)
(1,strlen(source)
(2,strlen(source)
(3,source)
(4,source)
(5,)
(6,data)
(7,data)
(8,free(data)
(9,* data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData)
(10,printLine(data)
(11,(strlen(source)
(12,RET)
(13,memcpy(data, source, (strlen(source)
(14,source)
(15,source)
(16,data)
(17,data)
(18,)
(19,data)
(20,char)
(21,1)
(22,SRC_STRING)
(23,CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData)
(24,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^