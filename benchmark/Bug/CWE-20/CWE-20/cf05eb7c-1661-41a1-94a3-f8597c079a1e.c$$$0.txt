-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54e_badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54e_badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54e_badSink(twoIntsStruct * data)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54e_badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(12,39,0)
(29,36,0)
(19,17,0)
(10,21,0)
(0,4,0)
(4,16,0)
(27,36,0)
(31,20,0)
(2,3,0)
(20,36,0)
(33,30,0)
(4,23,0)
(15,5,0)
(40,18,0)
(28,21,0)
(1,34,0)
(5,38,0)
(16,30,0)
(23,24,0)
(41,5,0)
(11,16,0)
(16,4,0)
(6,23,0)
(21,7,0)
(10,29,0)
(3,7,0)
(22,20,0)
(34,20,0)
(25,37,0)
(26,36,0)
(42,4,0)
(37,36,0)
(29,10,0)
(4,38,0)
(8,17,0)
(14,29,0)
(18,23,0)
(32,39,0)
(9,29,0)
(34,3,0)
(17,23,0)
(35,10,0)
(30,16,0)
(39,36,0)
(40,5,0)
(5,40,0)
(18,40,0)
(20,34,0)
(0,42,1)
(36,26,1)
(33,11,1)
(12,32,1)
(32,37,1)
(37,25,1)
(28,10,1)
(4,38,1)
(42,39,1)
(20,22,1)
(35,29,1)
(9,14,1)
(29,36,1)
(32,36,1)
(40,5,1)
(29,9,1)
(31,21,1)
(15,4,1)
(21,28,1)
(10,35,1)
(14,39,1)
(11,0,1)
(39,12,1)
(5,38,1)
(34,1,1)
(2,34,1)
(37,36,1)
(41,15,1)
(34,20,1)
(1,20,1)
(26,27,1)
(16,30,1)
(3,2,1)
(5,41,1)
(20,36,1)
(18,40,1)
(10,29,1)
(30,33,1)
(4,16,1)
(13,18,1)
(25,3,1)
(22,31,1)
(39,36,1)
(39,39,2)
(40,5,2)
(29,39,2)
(25,39,2)
(16,30,2)
(20,39,2)
(22,39,2)
(3,39,2)
(34,39,2)
(35,39,2)
(32,39,2)
(4,38,2)
(28,39,2)
(21,39,2)
(10,39,2)
(4,16,2)
(12,39,2)
(34,20,2)
(14,39,2)
(9,39,2)
(31,39,2)
(5,38,2)
(20,36,2)
(2,39,2)
(10,29,2)
(37,36,2)
(29,36,2)
(18,40,2)
(39,36,2)
(37,39,2)
(1,39,2)
-----------------------------------
(0,source)
(1,intTwo)
(2,0)
(3,source[i].intTwo = 0)
(4,memcpy(data, source, 100*sizeof(twoIntsStruct)
(5,data[0])
(6,source)
(7,)
(8,for (i = 0; i < 100; i++)
(9,i)
(10,source[i].intOne)
(11,100)
(12,100)
(13,RET)
(14,source)
(15,data)
(16,100*sizeof(twoIntsStruct)
(17,)
(18,printStructLine(&data[0])
(19,i)
(20,source[i])
(21,source[i].intOne = 0)
(22,i)
(23,)
(24,)
(25,i)
(26,0)
(27,i)
(28,0)
(29,source[i])
(30,sizeof(twoIntsStruct)
(31,source)
(32,i)
(33,twoIntsStruct)
(34,source[i].intTwo)
(35,intOne)
(36,i = 0)
(37,i++)
(38,twoIntsStruct * data)
(39,i < 100)
(40,&data[0])
(41,0)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^