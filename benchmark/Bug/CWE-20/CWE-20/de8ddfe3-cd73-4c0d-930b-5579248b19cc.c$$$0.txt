-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_08_bad()
{
    wchar_t * data;
    wchar_t dataBadBuffer[50];
    wchar_t dataGoodBuffer[100];
    if(staticReturnsTrue())
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
27,28
28,29
30,31
30,32
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
39,41
40,41
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
48,49
48,50
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
72,73
72,74
72,75
72,76
72,77
73,74
75,76
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,14,16,18,21,23,25,29,34,36,41,42,43,47,49,51,55,57,58,60,61,66,68,69,70,74,76,77,78,80,84,86
-----computeFrom-----
32,33
32,34
38,39
38,40
59,60
59,61
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_08_bad(){    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_08_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_08_bad
{    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBadBuffer[50];
wchar_t dataBadBuffer[50];
wchar_t
dataBadBuffer[50]
dataBadBuffer
[50]
50
wchar_t dataGoodBuffer[100];
wchar_t dataGoodBuffer[100];
wchar_t
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(12,9,0)
(13,9,0)
(8,9,0)
(3,1,0)
(17,10,0)
(2,1,0)
(10,9,0)
(3,10,0)
(7,1,0)
(0,10,0)
(4,11,0)
(16,3,0)
(15,9,0)
(1,11,0)
(5,3,1)
(2,14,1)
(3,1,1)
(4,1,1)
(0,4,1)
(16,0,1)
(7,2,1)
(0,14,1)
(3,16,1)
(1,7,1)
(1,14,2)
(2,14,2)
(4,14,2)
(7,14,2)
(3,1,2)
-----------------------------------
(0,'\\\\0')
(1,data = dataBadBuffer)
(2,data)
(3,printWLine(data)
(4,\'\\\\0\')
(5,RET)
(6,'\\\\0')
(7,dataBadBuffer)
(8,if(staticReturnsTrue()
(9,)
(10,)
(11,)
(12,dataGoodBuffer)
(13,dataBadBuffer)
(14,staticReturnsTrue()
(15,data)
(16,data)
(17,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^