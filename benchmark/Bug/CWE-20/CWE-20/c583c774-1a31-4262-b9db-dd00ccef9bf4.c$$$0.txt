-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(int * dataPtr)
{
    int data = *dataPtr;
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
76,78
77,78
79,80
82,83
82,84
82,85
83,84
83,85
84,85
87,88
87,89
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
106,107
107,108
109,110
110,111
111,112
111,113
112,113
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,28,30,31,35,37,40,42,45,46,50,52,57,59,64,65,68,69,72,78,80,81,85,86,92,94,95,100,101,104,105,108,113,116,118,123,124,128,130
-----computeFrom-----
41,42
41,43
48,49
48,50
62,63
62,64
66,67
66,68
75,76
75,77
83,84
83,85
89,90
89,91
98,99
98,100
102,103
102,104
-----guardedBy-----
85,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(int * dataPtr){    int data = *dataPtr;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(int * dataPtr)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink
int * dataPtr
int
* dataPtr
*
dataPtr
{    int data = *dataPtr;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = *dataPtr;
int data = *dataPtr;
int
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(63,48,0)
(2,37,0)
(22,35,0)
(48,65,0)
(49,32,0)
(29,60,0)
(45,37,0)
(25,2,0)
(9,8,0)
(26,60,0)
(11,58,0)
(48,63,0)
(10,1,0)
(68,17,0)
(34,37,0)
(23,26,0)
(5,17,0)
(51,1,0)
(6,11,0)
(17,8,0)
(7,58,0)
(37,14,0)
(6,1,0)
(0,60,0)
(39,21,0)
(6,37,0)
(53,44,0)
(57,66,0)
(1,61,0)
(64,66,0)
(18,1,0)
(38,6,0)
(65,24,0)
(39,44,0)
(55,61,0)
(30,24,0)
(63,1,0)
(54,1,0)
(66,64,0)
(27,61,0)
(47,2,0)
(39,1,0)
(37,34,0)
(71,39,0)
(24,65,0)
(65,48,0)
(32,62,0)
(16,6,0)
(63,12,0)
(31,61,0)
(64,59,0)
(61,14,0)
(34,70,0)
(40,61,0)
(33,29,0)
(50,61,0)
(41,18,0)
(36,65,0)
(67,39,0)
(19,51,0)
(15,34,0)
(69,51,0)
(44,46,0)
(52,60,0)
(56,11,0)
(39,8,0)
(21,39,0)
(21,4,0)
(51,44,0)
(35,8,0)
(28,26,0)
(1,63,0)
(51,60,0)
(12,63,0)
(3,8,0)
(54,61,0)
(13,14,0)
(43,54,0)
(20,18,0)
(51,1,1)
(43,32,1)
(32,49,1)
(17,8,1)
(34,15,1)
(2,37,1)
(54,1,1)
(28,29,1)
(22,21,1)
(33,44,1)
(38,2,1)
(53,51,1)
(26,60,1)
(68,8,1)
(10,37,1)
(67,71,1)
(6,16,1)
(60,0,1)
(56,6,1)
(29,60,1)
(18,1,1)
(69,26,1)
(66,57,1)
(52,18,1)
(39,67,1)
(26,23,1)
(39,44,1)
(48,65,1)
(43,17,1)
(16,38,1)
(51,19,1)
(24,30,1)
(68,35,1)
(9,11,1)
(11,56,1)
(52,64,1)
(35,22,1)
(23,28,1)
(63,12,1)
(36,10,1)
(49,2,1)
(0,52,1)
(5,68,1)
(2,25,1)
(6,37,1)
(1,63,1)
(6,1,1)
(63,48,1)
(39,1,1)
(3,9,1)
(8,3,1)
(15,45,1)
(37,34,1)
(54,43,1)
(47,26,1)
(19,69,1)
(20,1,1)
(25,47,1)
(29,33,1)
(30,36,1)
(18,41,1)
(17,5,1)
(34,70,1)
(35,8,1)
(28,60,1)
(41,20,1)
(51,60,1)
(64,66,1)
(44,53,1)
(57,18,1)
(39,8,1)
(42,54,1)
(71,17,1)
(21,39,1)
(65,24,1)
(49,2,2)
(54,1,2)
(2,37,2)
(21,17,2)
(38,2,2)
(18,1,2)
(22,17,2)
(51,26,2)
(3,2,2)
(11,2,2)
(68,17,2)
(8,2,2)
(69,26,2)
(64,18,2)
(6,37,2)
(32,2,2)
(29,26,2)
(23,26,2)
(39,8,2)
(57,18,2)
(29,60,2)
(53,26,2)
(51,60,2)
(34,70,2)
(44,26,2)
(51,1,2)
(28,26,2)
(1,63,2)
(6,1,2)
(66,18,2)
(64,66,2)
(5,17,2)
(19,26,2)
(17,2,2)
(39,17,2)
(33,26,2)
(16,2,2)
(5,2,2)
(56,2,2)
(26,60,2)
(68,2,2)
(9,2,2)
(35,8,2)
(37,34,2)
(17,8,2)
(21,39,2)
(67,17,2)
(6,2,2)
(39,44,2)
(63,12,2)
(39,1,2)
(48,65,2)
(26,26,2)
(63,48,2)
(35,17,2)
(17,17,2)
(71,17,2)
(65,24,2)
-----------------------------------
(0,0)
(1,* buffer = (int *)
(2,data >= 0)
(3,0)
(4,)
(5,10)
(6,buffer[data])
(7,for(i = 0; i < 10; i++)
(8,i = 0)
(9,i)
(10,buffer)
(11,buffer[data] = 1)
(12,int *)
(13,data)
(14,)
(15,dataPtr)
(16,data)
(17,i < 10)
(18,buffer == NULL)
(19,i)
(20,buffer)
(21,printIntLine(buffer[i])
(22,i)
(23,10)
(24,sizeof(int)
(25,0)
(26,i < 10)
(27,i)
(28,i)
(29,i++)
(30,int)
(31,for (i = 0; i < 10; i++)
(32,printLine("ERROR: Array index is negative.")
(33,i)
(34,*dataPtr)
(35,i++)
(36,10)
(37,data = *dataPtr)
(38,buffer)
(39,buffer[i])
(40,if (data >= 0)
(41,NULL)
(42,RET)
(43,buffer)
(44,buffer[i] = 0)
(45,data)
(46,)
(47,data)
(48,malloc(10 * sizeof(int)
(49,"ERROR: Array index is negative.")
(50,if (buffer == NULL)
(51,buffer[i])
(52,i)
(53,0)
(54,free(buffer)
(55,buffer)
(56,1)
(57,1)
(58,)
(59,)
(60,i = 0)
(61,)
(62,)
(63,(int *)
(64,exit(-1)
(65,10 * sizeof(int)
(66,-1)
(67,i)
(68,i)
(69,buffer)
(70,int * dataPtr)
(71,buffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^