-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_04_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
71,73
71,74
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
100,101
100,102
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
107,108
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
117,118
121,122
121,123
121,124
122,123
123,124
123,125
124,125
126,127
128,129
128,130
128,131
128,132
129,130
130,131
130,132
131,132
134,135
134,136
135,136
138,139
139,140
141,142
142,143
143,144
143,145
144,145
144,146
145,146
147,148
149,150
149,151
150,151
152,153
154,155
155,156
155,157
156,157
158,159
159,160
159,161
160,161
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,63,68,70,75,77,79,84,86,91,92,95,96,99,106,108,109,110,116,118,119,120,125,127,132,133,136,137,140,146,148,151,153,157,161,162
-----computeFrom-----
30,31
30,32
54,55
54,56
66,67
66,68
89,90
89,91
93,94
93,95
102,103
102,104
112,113
112,114
130,131
130,132
134,135
134,136
143,144
143,145
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_04_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_04_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_04_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(41,57,0)
(17,33,0)
(27,48,0)
(2,53,0)
(65,71,0)
(69,10,0)
(63,20,0)
(41,7,0)
(73,6,0)
(4,69,0)
(46,23,0)
(76,51,0)
(70,31,0)
(60,0,0)
(20,69,0)
(5,38,0)
(8,21,0)
(56,77,0)
(72,50,0)
(49,28,0)
(71,68,0)
(50,71,0)
(43,14,0)
(13,50,0)
(3,33,0)
(23,46,0)
(31,70,0)
(67,28,0)
(64,61,0)
(21,61,0)
(80,38,0)
(40,33,0)
(29,41,0)
(44,40,0)
(78,16,0)
(57,41,0)
(12,30,0)
(22,7,0)
(34,61,0)
(10,46,0)
(51,46,0)
(21,15,0)
(11,22,0)
(15,21,0)
(25,27,0)
(26,19,0)
(36,56,0)
(40,38,0)
(6,55,0)
(70,50,0)
(47,56,0)
(31,30,0)
(28,27,0)
(32,7,0)
(57,6,0)
(54,61,0)
(58,22,0)
(14,16,0)
(53,15,0)
(19,61,0)
(18,21,0)
(50,70,0)
(28,7,0)
(33,3,0)
(77,38,0)
(37,71,0)
(3,14,0)
(53,61,0)
(27,28,0)
(46,51,0)
(53,71,0)
(52,53,0)
(30,77,0)
(15,59,0)
(42,19,0)
(79,34,0)
(66,48,0)
(10,69,0)
(33,17,0)
(16,14,0)
(71,51,0)
(48,55,0)
(69,20,0)
(51,38,0)
(62,30,0)
(0,7,0)
(33,40,0)
(9,38,0)
(35,57,0)
(75,41,0)
(39,7,0)
(14,3,0)
(45,77,0)
(46,10,0)
(1,38,0)
(34,79,1)
(78,43,1)
(26,61,1)
(58,11,1)
(15,21,1)
(41,7,1)
(34,61,1)
(2,52,1)
(32,71,1)
(21,18,1)
(22,7,1)
(72,19,1)
(53,71,1)
(0,60,1)
(3,14,1)
(14,16,1)
(75,29,1)
(49,67,1)
(66,27,1)
(18,8,1)
(4,76,1)
(65,37,1)
(13,72,1)
(63,4,1)
(53,2,1)
(74,40,1)
(11,0,1)
(16,78,1)
(50,13,1)
(51,46,1)
(32,74,1)
(41,75,1)
(11,7,1)
(33,17,1)
(40,33,1)
(19,61,1)
(27,25,1)
(52,19,1)
(19,42,1)
(24,31,1)
(37,74,1)
(43,44,1)
(79,15,1)
(6,73,1)
(8,53,1)
(21,61,1)
(70,50,1)
(48,66,1)
(67,6,1)
(54,22,1)
(42,26,1)
(0,7,1)
(44,51,1)
(28,7,1)
(28,49,1)
(7,39,1)
(57,35,1)
(27,28,1)
(71,65,1)
(22,58,1)
(46,10,1)
(39,32,1)
(20,63,1)
(29,22,1)
(50,71,1)
(31,70,1)
(33,3,1)
(69,20,1)
(53,61,1)
(25,28,1)
(46,23,1)
(71,51,1)
(60,48,1)
(10,69,1)
(26,34,1)
(35,41,1)
(61,64,1)
(73,57,1)
(57,41,1)
(64,54,1)
(49,22,2)
(3,14,2)
(22,7,2)
(18,19,2)
(34,19,2)
(69,20,2)
(53,19,2)
(34,61,2)
(42,19,2)
(37,74,2)
(0,22,2)
(2,19,2)
(70,50,2)
(28,22,2)
(52,19,2)
(35,22,2)
(29,22,2)
(33,17,2)
(48,22,2)
(71,51,2)
(19,61,2)
(25,22,2)
(66,22,2)
(79,19,2)
(73,22,2)
(65,74,2)
(41,22,2)
(31,70,2)
(75,22,2)
(53,61,2)
(19,19,2)
(22,22,2)
(57,41,2)
(57,22,2)
(8,19,2)
(33,3,2)
(14,16,2)
(40,33,2)
(46,23,2)
(71,74,2)
(27,28,2)
(53,71,2)
(6,22,2)
(58,22,2)
(50,71,2)
(27,22,2)
(21,61,2)
(41,7,2)
(11,22,2)
(46,10,2)
(26,19,2)
(51,46,2)
(0,7,2)
(21,19,2)
(28,7,2)
(67,22,2)
(60,22,2)
(15,19,2)
(15,21,2)
(10,69,2)
-----------------------------------
(0,i++)
(1,dataBadBuffer)
(2,i)
(3,ALLOCA(100*sizeof(twoIntsStruct)
(4,50)
(5,if(STATIC_CONST_TRUE)
(6,source[i].intOne = 0)
(7,i = 0)
(8,source)
(9,data)
(10,ALLOCA(50*sizeof(twoIntsStruct)
(11,i)
(12,i)
(13,0)
(14,100*sizeof(twoIntsStruct)
(15,data[i] = source[i])
(16,sizeof(twoIntsStruct)
(17,twoIntsStruct *)
(18,i)
(19,i < 100)
(20,sizeof(twoIntsStruct)
(21,source[i])
(22,i < 100)
(23,twoIntsStruct *)
(24,RET)
(25,intTwo)
(26,i)
(27,source[i].intTwo)
(28,source[i])
(29,source)
(30,)
(31,printStructLine(&data[0])
(32,i)
(33,(twoIntsStruct *)
(34,i++)
(35,intOne)
(36,i)
(37,data)
(38,)
(39,0)
(40,* dataGoodBuffer = (twoIntsStruct *)
(41,source[i])
(42,100)
(43,100)
(44,dataGoodBuffer)
(45,source)
(46,(twoIntsStruct *)
(47,for (i = 0; i < 100; i++)
(48,source[i].intTwo = 0)
(49,i)
(50,data[0])
(51,* dataBadBuffer = (twoIntsStruct *)
(52,data)
(53,data[i])
(54,i)
(55,)
(56,)
(57,source[i].intOne)
(58,100)
(59,)
(60,i)
(61,i = 0)
(62,for (i = 0; i < 100; i++)
(63,twoIntsStruct)
(64,0)
(65,dataBadBuffer)
(66,0)
(67,source)
(68,)
(69,50*sizeof(twoIntsStruct)
(70,&data[0])
(71,data = dataBadBuffer)
(72,data)
(73,0)
(74,STATIC_CONST_TRUE)
(75,i)
(76,dataBadBuffer)
(77,)
(78,twoIntsStruct)
(79,i)
(80,dataGoodBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^