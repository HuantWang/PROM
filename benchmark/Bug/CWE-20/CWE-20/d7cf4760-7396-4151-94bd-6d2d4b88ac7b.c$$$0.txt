-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
72,73
72,74
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
109,110
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
130,131
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,68,71,73,75,79,81,82,84,85,90,92,93,94,99,100,103,104,107,113,115,118,120,125,127,128,129,133,135,139,141
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
83,84
83,85
87,88
87,89
91,92
91,93
97,98
97,99
101,102
101,103
110,111
110,112
122,123
122,124
126,127
126,128
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(23,71,0)
(5,8,0)
(0,72,0)
(63,21,0)
(30,37,0)
(18,16,0)
(40,63,0)
(71,34,0)
(53,8,0)
(24,8,0)
(61,6,0)
(56,16,0)
(64,76,0)
(7,68,0)
(79,21,0)
(61,53,0)
(26,13,0)
(25,21,0)
(49,55,0)
(63,71,0)
(45,74,0)
(63,70,0)
(16,8,0)
(16,1,0)
(55,29,0)
(62,76,0)
(22,8,0)
(67,34,0)
(68,21,0)
(77,11,0)
(10,21,0)
(76,37,0)
(11,10,0)
(39,5,0)
(46,54,0)
(33,71,0)
(10,71,0)
(36,63,0)
(19,48,0)
(73,54,0)
(63,54,0)
(32,13,0)
(28,1,0)
(10,11,0)
(5,71,0)
(2,68,0)
(52,50,0)
(50,70,0)
(14,61,0)
(68,55,0)
(9,29,0)
(35,6,0)
(38,73,0)
(41,21,0)
(62,41,0)
(72,8,0)
(69,21,0)
(12,25,0)
(51,10,0)
(60,46,0)
(31,1,0)
(57,6,0)
(76,62,0)
(69,71,0)
(37,76,0)
(42,25,0)
(5,21,0)
(78,50,0)
(47,11,0)
(21,41,0)
(19,74,0)
(70,20,0)
(21,29,0)
(17,53,0)
(74,19,0)
(41,59,0)
(1,16,0)
(4,54,0)
(69,8,0)
(44,69,0)
(70,50,0)
(41,62,0)
(59,41,0)
(6,61,0)
(27,34,0)
(43,8,0)
(8,34,0)
(15,54,0)
(58,73,0)
(50,54,0)
(10,72,0)
(18,13,1)
(2,19,1)
(69,71,1)
(50,54,1)
(78,52,1)
(69,21,1)
(70,50,1)
(28,56,1)
(3,5,1)
(32,71,1)
(5,71,1)
(69,44,1)
(62,76,1)
(73,58,1)
(72,0,1)
(53,17,1)
(68,21,1)
(14,16,1)
(5,39,1)
(12,42,1)
(39,69,1)
(74,45,1)
(4,53,1)
(50,78,1)
(56,18,1)
(10,71,1)
(10,11,1)
(47,51,1)
(30,64,1)
(52,63,1)
(60,70,1)
(73,54,1)
(19,74,1)
(45,25,1)
(1,31,1)
(49,68,1)
(7,2,1)
(64,79,1)
(13,26,1)
(25,12,1)
(42,21,1)
(26,32,1)
(5,21,1)
(38,46,1)
(77,47,1)
(25,21,1)
(36,40,1)
(6,57,1)
(51,73,1)
(21,41,1)
(18,55,1)
(15,4,1)
(63,21,1)
(76,37,1)
(68,7,1)
(40,73,1)
(41,62,1)
(0,10,1)
(57,35,1)
(31,28,1)
(37,30,1)
(33,23,1)
(54,15,1)
(58,38,1)
(61,6,1)
(11,77,1)
(63,54,1)
(41,59,1)
(71,33,1)
(63,71,1)
(16,1,1)
(63,36,1)
(46,54,1)
(35,14,1)
(38,54,1)
(46,60,1)
(10,21,1)
(79,13,1)
(55,49,1)
(17,61,1)
(44,72,1)
(2,25,1)
(49,13,2)
(61,6,2)
(50,54,2)
(10,71,2)
(21,41,2)
(5,71,2)
(70,50,2)
(64,13,2)
(46,54,2)
(62,76,2)
(12,13,2)
(16,1,2)
(76,37,2)
(73,73,2)
(25,21,2)
(63,54,2)
(25,13,2)
(40,73,2)
(38,73,2)
(36,73,2)
(45,25,2)
(76,13,2)
(50,73,2)
(69,71,2)
(63,21,2)
(46,73,2)
(55,13,2)
(41,13,2)
(70,73,2)
(10,11,2)
(7,13,2)
(74,25,2)
(52,73,2)
(69,21,2)
(79,13,2)
(41,62,2)
(2,13,2)
(37,13,2)
(19,74,2)
(68,13,2)
(58,73,2)
(68,21,2)
(73,54,2)
(41,59,2)
(19,25,2)
(30,13,2)
(60,73,2)
(5,21,2)
(42,13,2)
(21,13,2)
(78,73,2)
(62,13,2)
(10,21,2)
(63,71,2)
(63,73,2)
-----------------------------------
(0,'\\\\0')
(1,100-1)
(2,data)
(3,RET)
(4,i)
(5,free(data)
(6,100-1)
(7,0)
(8,)
(9,if (data == NULL)
(10,data[100-1])
(11,100-1)
(12,NULL)
(13,globalFive==5)
(14,source)
(15,0)
(16,memset(source, 'C', 100-1)
(17,'\\\\0')
(18,source)
(19,exit(-1)
(20,)
(21,data = (char *)
(22,for (i = 0; i < 100; i++)
(23,data)
(24,source)
(25,data == NULL)
(26,5)
(27,data)
(28,100)
(29,)
(30,char)
(31,1)
(32,globalFive)
(33,NULL)
(34,)
(35,100)
(36,i)
(37,sizeof(char)
(38,i)
(39,data)
(40,data)
(41,(char *)
(42,data)
(43,i)
(44,data)
(45,1)
(46,i++)
(47,100)
(48,)
(49,\'\\\\0\')
(50,source[i])
(51,data)
(52,source)
(53,source[100-1] = '\\\\0')
(54,i = 0)
(55,data[0] = \'\\\\0\')
(56,'C')
(57,1)
(58,100)
(59,char *)
(60,i)
(61,source[100-1])
(62,malloc(50*sizeof(char)
(63,data[i])
(64,50)
(65,'\\\\0')
(66,memset(source, \'C\', 100-1)
(67,if(globalFive==5)
(68,data[0])
(69,printLine(data)
(70,data[i] = source[i])
(71,data = NULL)
(72,data[100-1] = '\\\\0')
(73,i < 100)
(74,-1)
(75,data[0] = '\\\\0')
(76,50*sizeof(char)
(77,1)
(78,i)
(79,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^