-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14_bad()
{
    if(globalFive==5)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printWLine((wchar_t *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid->charFirst);
            printWLine((wchar_t *)structCharVoid->voidSecond);
            free(structCharVoid);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
54,55
54,56
55,56
55,57
57,58
59,60
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
71,72
74,75
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
82,83
84,85
85,86
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
98,99
98,100
99,100
100,101
101,102
101,103
102,103
105,106
106,107
106,108
111,112
112,113
112,114
113,114
115,116
115,117
116,117
116,118
118,119
120,121
120,122
121,122
124,125
125,126
125,127
126,127
128,129
128,130
129,130
129,131
131,132
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,9,10,16,18,19,24,26,29,33,34,38,40,45,47,52,53,56,58,60,64,67,69,72,73,77,80,81,83,88,94,95,103,104,107,108,109,110,114,117,119,122,123,127,130,132,135,136,140,142
-----computeFrom-----
7,8
7,9
36,37
36,38
49,50
49,51
90,91
90,92
96,97
96,98
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14_bad(){    if(globalFive==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14_bad()
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14_bad
{    if(globalFive==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
if(globalFive==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
globalFive==5
globalFive
globalFive
5
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memcpy
memcpy
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))
sizeof(structCharVoid->charFirst)/sizeof(wchar_t)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid->charFirst);
printWLine((wchar_t *)structCharVoid->charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid->charFirst
wchar_t *
wchar_t
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
free(structCharVoid);
free(structCharVoid)
free
free
structCharVoid
structCharVoid
-----joern-----
(58,1,0)
(31,16,0)
(23,19,0)
(20,54,0)
(25,54,0)
(5,7,0)
(17,54,0)
(37,18,0)
(9,46,0)
(59,1,0)
(42,48,0)
(15,20,0)
(45,24,0)
(7,5,0)
(47,21,0)
(26,17,0)
(35,28,0)
(18,19,0)
(46,9,0)
(28,54,0)
(24,45,0)
(50,60,0)
(18,54,0)
(17,40,0)
(34,1,0)
(1,38,0)
(40,17,0)
(3,45,0)
(41,21,0)
(5,2,0)
(6,32,0)
(7,1,0)
(13,33,0)
(19,18,0)
(44,25,0)
(21,10,0)
(54,17,0)
(19,23,0)
(29,28,0)
(53,6,0)
(8,1,0)
(5,25,0)
(22,6,0)
(51,49,0)
(24,36,0)
(6,54,0)
(54,1,0)
(33,13,0)
(46,49,0)
(30,49,0)
(18,10,0)
(32,14,0)
(46,27,0)
(10,1,0)
(39,33,0)
(49,46,0)
(60,14,0)
(55,26,0)
(32,1,0)
(4,32,0)
(26,55,0)
(21,54,0)
(11,54,0)
(34,19,0)
(27,46,0)
(2,5,0)
(25,5,0)
(9,1,0)
(14,32,0)
(32,6,0)
(14,60,0)
(25,10,0)
(17,26,0)
(0,16,0)
(60,54,0)
(12,25,0)
(49,54,0)
(10,33,0)
(33,10,0)
(43,55,0)
(52,18,0)
(20,1,0)
(19,34,0)
(44,12,1)
(15,7,1)
(21,54,1)
(47,28,1)
(7,5,1)
(32,14,1)
(20,54,1)
(49,54,1)
(34,19,1)
(6,54,1)
(47,24,1)
(14,60,1)
(39,21,1)
(18,37,1)
(60,50,1)
(17,26,1)
(25,44,1)
(43,11,1)
(37,52,1)
(32,6,1)
(3,28,1)
(10,33,1)
(24,45,1)
(28,29,1)
(4,6,1)
(54,17,1)
(25,54,1)
(18,54,1)
(55,43,1)
(5,25,1)
(41,47,1)
(19,18,1)
(5,2,1)
(49,30,1)
(16,0,1)
(17,40,1)
(20,15,1)
(46,49,1)
(22,53,1)
(50,4,1)
(33,39,1)
(9,46,1)
(56,16,1)
(60,54,1)
(56,20,1)
(30,51,1)
(11,16,1)
(0,31,1)
(46,27,1)
(18,10,1)
(52,10,1)
(21,41,1)
(35,54,1)
(19,23,1)
(8,32,1)
(12,9,1)
(28,54,1)
(6,22,1)
(29,35,1)
(26,55,1)
(51,8,1)
(45,3,1)
(53,34,1)
(25,10,1)
(33,13,1)
(35,16,2)
(6,54,2)
(7,16,2)
(32,14,2)
(52,16,2)
(10,33,2)
(8,16,2)
(46,27,2)
(20,54,2)
(19,23,2)
(24,45,2)
(41,16,2)
(7,5,2)
(9,46,2)
(30,16,2)
(21,54,2)
(46,49,2)
(50,16,2)
(25,54,2)
(33,16,2)
(5,25,2)
(32,6,2)
(45,28,2)
(18,10,2)
(29,16,2)
(19,16,2)
(34,19,2)
(49,16,2)
(39,16,2)
(20,16,2)
(60,16,2)
(28,54,2)
(18,16,2)
(6,16,2)
(21,16,2)
(25,16,2)
(10,16,2)
(5,2,2)
(11,16,2)
(12,16,2)
(15,16,2)
(14,60,2)
(3,28,2)
(26,55,2)
(22,16,2)
(51,16,2)
(5,16,2)
(54,16,2)
(33,13,2)
(17,16,2)
(25,10,2)
(26,16,2)
(53,16,2)
(55,16,2)
(4,16,2)
(14,16,2)
(18,54,2)
(19,18,2)
(47,16,2)
(43,16,2)
(9,16,2)
(60,54,2)
(37,16,2)
(24,28,2)
(34,16,2)
(54,17,2)
(17,40,2)
(44,16,2)
(28,16,2)
(49,54,2)
(46,16,2)
(32,16,2)
(17,26,2)
-----------------------------------
(0,5)
(1,)
(2,wchar_t *)
(3,1)
(4,SRC_STR)
(5,(wchar_t *)
(6,structCharVoid->charFirst)
(7,printWLine((wchar_t *)
(8,\'\\\\0\')
(9,printWLine((wchar_t *)
(10,structCharVoid->voidSecond = (void *)
(11,structCharVoid)
(12,structCharVoid)
(13,void *)
(14,sizeof(*structCharVoid)
(15,structCharVoid)
(16,globalFive==5)
(17,(charVoid *)
(18,structCharVoid->voidSecond)
(19,(wchar_t *)
(20,free(structCharVoid)
(21,structCharVoid->voidSecond)
(22,charFirst)
(23,wchar_t *)
(24,exit(-1)
(25,structCharVoid->voidSecond)
(26,malloc(sizeof(charVoid)
(27,wchar_t *)
(28,structCharVoid == NULL)
(29,NULL)
(30,charFirst)
(31,globalFive)
(32,memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(33,(void *)
(34,printWLine((wchar_t *)
(35,structCharVoid)
(36,)
(37,voidSecond)
(38,)
(39,SRC_STR)
(40,charVoid *)
(41,voidSecond)
(42,if(globalFive==5)
(43,charVoid)
(44,voidSecond)
(45,-1)
(46,(wchar_t *)
(47,structCharVoid)
(48,)
(49,structCharVoid->charFirst)
(50,structCharVoid)
(51,structCharVoid)
(52,structCharVoid)
(53,structCharVoid)
(54,* structCharVoid = (charVoid *)
(55,sizeof(charVoid)
(56,RET)
(57,'\\\\0')
(58,structCharVoid)
(59,if (structCharVoid == NULL)
(60,*structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^