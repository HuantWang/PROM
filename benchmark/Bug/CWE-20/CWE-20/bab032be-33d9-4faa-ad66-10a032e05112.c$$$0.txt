-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalTrue)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,93,95
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalTrue
globalTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(17,11,0)
(5,6,0)
(28,32,0)
(2,40,0)
(3,33,0)
(7,33,0)
(30,15,0)
(21,23,0)
(19,3,0)
(31,6,0)
(14,43,0)
(24,7,0)
(25,9,0)
(6,5,0)
(37,46,0)
(47,2,0)
(22,6,0)
(7,32,0)
(26,8,0)
(16,33,0)
(23,21,0)
(46,32,0)
(3,20,0)
(42,29,0)
(6,33,0)
(3,43,0)
(46,15,0)
(23,33,0)
(35,46,0)
(29,33,0)
(8,41,0)
(36,43,0)
(9,33,0)
(0,15,0)
(33,23,0)
(40,10,0)
(20,1,0)
(15,32,0)
(23,4,0)
(41,4,0)
(12,11,0)
(43,3,0)
(27,29,0)
(4,23,0)
(40,2,0)
(46,33,0)
(9,32,0)
(13,20,0)
(6,1,0)
(41,8,0)
(44,11,0)
(32,11,0)
(33,11,0)
(39,5,0)
(38,41,0)
(4,41,0)
(45,5,0)
(45,22,1)
(9,25,1)
(20,13,1)
(47,29,1)
(26,38,1)
(46,15,1)
(34,29,1)
(6,5,1)
(24,46,1)
(0,30,1)
(18,9,1)
(30,20,1)
(15,0,1)
(38,16,1)
(3,43,1)
(7,24,1)
(6,33,1)
(31,34,1)
(13,3,1)
(46,33,1)
(23,21,1)
(4,41,1)
(30,34,1)
(27,33,1)
(19,6,1)
(34,40,1)
(33,23,1)
(7,33,1)
(35,15,1)
(43,36,1)
(37,35,1)
(42,27,1)
(36,14,1)
(40,2,1)
(14,19,1)
(46,37,1)
(41,8,1)
(22,31,1)
(39,45,1)
(23,4,1)
(3,33,1)
(29,33,1)
(9,33,1)
(29,42,1)
(25,7,1)
(2,47,1)
(8,26,1)
(5,39,1)
(31,34,2)
(19,34,2)
(3,34,2)
(6,5,2)
(36,34,2)
(20,34,2)
(41,8,2)
(13,34,2)
(46,33,2)
(14,34,2)
(7,33,2)
(9,33,2)
(2,29,2)
(3,33,2)
(23,4,2)
(46,15,2)
(40,29,2)
(5,34,2)
(23,21,2)
(22,34,2)
(45,34,2)
(40,2,2)
(4,41,2)
(3,43,2)
(29,33,2)
(33,23,2)
(43,34,2)
(6,34,2)
(47,29,2)
(6,33,2)
(39,34,2)
-----------------------------------
(0,"")
(1,)
(2,-1)
(3,data[100-1])
(4,malloc(100*sizeof(char)
(5,100-1)
(6,memset(data, \\\'A\\\', 100-1)
(7,printLine(data)
(8,sizeof(char)
(9,free(data)
(10,)
(11,)
(12,data)
(13,\\\'\\\\0\\\')
(14,100)
(15,dest[50] = "")
(16,data)
(17,if (data == NULL)
(18,RET)
(19,data)
(20,data[100-1] = \\\'\\\\0\\\')
(21,char *)
(22,\\\'A\\\')
(23,(char *)
(24,data)
(25,data)
(26,char)
(27,data)
(28,dest)
(29,data == NULL)
(30,dest)
(31,data)
(32,)
(33,data = (char *)
(34,globalTrue)
(35,dest)
(36,1)
(37,data)
(38,100)
(39,1)
(40,exit(-1)
(41,100*sizeof(char)
(42,NULL)
(43,100-1)
(44,if(globalTrue)
(45,100)
(46,strcpy(dest, data)
(47,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^