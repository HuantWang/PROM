-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41_badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,66,68,73,74,77,78,81,87,89,92,94,98,102,103,107,109
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
71,72
71,73
75,76
75,77
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41_badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41_badSink(twoIntsStruct * data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41_badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(10,35,0)
(53,56,0)
(40,28,0)
(52,11,0)
(27,10,0)
(56,8,0)
(5,49,0)
(23,5,0)
(55,18,0)
(6,9,0)
(22,9,0)
(34,3,0)
(25,29,0)
(35,10,0)
(43,6,0)
(45,36,0)
(1,6,0)
(51,35,0)
(35,46,0)
(36,54,0)
(44,46,0)
(37,11,0)
(31,15,0)
(0,26,0)
(30,18,0)
(41,26,0)
(20,49,0)
(33,32,0)
(3,8,0)
(18,11,0)
(16,31,0)
(33,49,0)
(10,11,0)
(56,9,0)
(32,33,0)
(48,2,0)
(21,24,0)
(19,11,0)
(29,11,0)
(2,18,0)
(50,9,0)
(14,28,0)
(2,31,0)
(17,9,0)
(7,10,0)
(6,21,0)
(39,49,0)
(18,2,0)
(46,15,0)
(21,6,0)
(56,21,0)
(47,3,0)
(28,9,0)
(38,29,0)
(32,3,0)
(3,32,0)
(4,52,0)
(26,36,0)
(12,56,0)
(49,36,0)
(5,8,0)
(13,50,0)
(6,9,1)
(48,18,1)
(52,4,1)
(16,2,1)
(29,11,1)
(32,3,1)
(25,11,1)
(2,48,1)
(43,1,1)
(5,23,1)
(56,9,1)
(44,35,1)
(47,28,1)
(25,52,1)
(53,28,1)
(35,10,1)
(5,8,1)
(13,21,1)
(50,13,1)
(18,11,1)
(23,33,1)
(33,32,1)
(21,6,1)
(55,30,1)
(52,11,1)
(40,14,1)
(6,43,1)
(50,9,1)
(29,38,1)
(22,29,1)
(27,7,1)
(3,8,1)
(10,27,1)
(11,19,1)
(7,29,1)
(19,37,1)
(1,56,1)
(28,9,1)
(12,53,1)
(3,34,1)
(56,8,1)
(42,5,1)
(2,18,1)
(10,11,1)
(14,9,1)
(35,51,1)
(34,47,1)
(9,17,1)
(4,31,1)
(31,16,1)
(14,50,1)
(17,22,1)
(38,25,1)
(51,10,1)
(46,44,1)
(18,55,1)
(56,12,1)
(30,46,1)
(28,40,1)
(29,29,2)
(50,28,2)
(21,28,2)
(12,28,2)
(52,11,2)
(1,28,2)
(2,18,2)
(40,28,2)
(10,29,2)
(56,9,2)
(13,28,2)
(6,9,2)
(6,28,2)
(53,28,2)
(35,10,2)
(43,28,2)
(33,32,2)
(55,29,2)
(7,29,2)
(52,29,2)
(28,28,2)
(46,29,2)
(30,29,2)
(28,9,2)
(2,29,2)
(3,8,2)
(18,29,2)
(32,3,2)
(50,9,2)
(18,11,2)
(56,8,2)
(16,29,2)
(5,8,2)
(10,11,2)
(4,29,2)
(25,29,2)
(14,28,2)
(27,29,2)
(31,29,2)
(35,29,2)
(51,29,2)
(29,11,2)
(44,29,2)
(38,29,2)
(48,29,2)
(56,28,2)
(21,6,2)
-----------------------------------
(0,i)
(1,source)
(2,source[i].intTwo)
(3,data[0])
(4,i)
(5,free(data)
(6,source[i])
(7,source)
(8,twoIntsStruct * data)
(9,i = 0)
(10,source[i])
(11,i = 0)
(12,i)
(13,i)
(14,i)
(15,)
(16,0)
(17,0)
(18,source[i])
(19,0)
(20,for (i = 0; i < 100; i++)
(21,data[i] = source[i])
(22,i)
(23,data)
(24,)
(25,i)
(26,)
(27,i)
(28,i < 100)
(29,i < 100)
(30,source)
(31,source[i].intTwo = 0)
(32,&data[0])
(33,printStructLine(&data[0])
(34,0)
(35,source[i].intOne)
(36,)
(37,i)
(38,100)
(39,i)
(40,100)
(41,for (i = 0; i < 100; i++)
(42,RET)
(43,i)
(44,0)
(45,source)
(46,source[i].intOne = 0)
(47,data)
(48,intTwo)
(49,)
(50,i++)
(51,intOne)
(52,i++)
(53,data)
(54,)
(55,i)
(56,data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^