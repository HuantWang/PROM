-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    {
        wchar_t * data = *dataPtr1;
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with L'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
            SNPRINTF(data, 100, L"%s", source);
            printWLine(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
70,71
70,72
72,73
73,74
73,75
76,77
76,78
76,79
76,80
77,78
78,79
78,80
80,81
80,82
80,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
100,101
101,102
101,103
102,103
103,104
105,106
107,108
107,109
108,109
109,110
109,111
111,112
111,113
111,114
114,115
115,116
116,117
118,119
118,120
118,121
118,122
118,123
119,120
120,121
120,122
122,123
122,124
124,125
126,127
127,128
127,129
127,130
127,131
128,129
130,131
133,134
133,135
136,137
137,138
137,139
138,139
138,140
139,140
141,142
141,143
145,146
146,147
146,148
146,149
146,150
146,151
147,148
149,150
153,154
155,156
156,157
156,158
157,158
159,160
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,39,43,45,48,50,53,54,57,59,60,64,66,69,71,74,75,79,81,82,86,90,92,97,98,99,104,106,110,112,113,117,121,123,125,129,131,132,134,135,140,142,143,144,148,150,151,152,154,158,160
-----computeFrom-----
49,50
49,51
70,71
70,72
88,89
88,90
94,95
94,96
101,102
101,103
133,134
133,135
137,138
137,139
141,142
141,143
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    {        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_32_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    {        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)ALLOCA(50*sizeof(wchar_t))
(wchar_t *)ALLOCA(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(50*sizeof(wchar_t))
ALLOCA
ALLOCA
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
dataGoodBuffer
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

{        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(7,13,0)
(4,55,0)
(40,54,0)
(42,37,0)
(13,54,0)
(34,21,0)
(7,19,0)
(27,28,0)
(54,13,0)
(51,16,0)
(29,32,0)
(13,7,0)
(36,55,0)
(3,21,0)
(32,29,0)
(17,55,0)
(1,40,0)
(22,50,0)
(50,55,0)
(0,51,0)
(2,44,0)
(37,10,0)
(14,55,0)
(10,55,0)
(8,16,0)
(38,10,0)
(22,14,0)
(25,47,0)
(7,50,0)
(31,22,0)
(53,55,0)
(31,14,0)
(19,7,0)
(5,55,0)
(18,57,0)
(35,47,0)
(30,22,0)
(10,37,0)
(54,40,0)
(9,31,0)
(28,44,0)
(52,14,0)
(50,7,0)
(11,54,0)
(45,3,0)
(51,14,0)
(32,15,0)
(15,32,0)
(24,14,0)
(21,55,0)
(44,55,0)
(12,31,0)
(57,15,0)
(47,44,0)
(26,15,0)
(21,3,0)
(9,21,0)
(16,21,0)
(39,50,0)
(49,29,0)
(57,55,0)
(33,47,0)
(15,26,0)
(47,33,0)
(6,28,0)
(23,33,0)
(41,25,0)
(16,51,0)
(48,9,0)
(33,10,0)
(56,22,0)
(46,43,0)
(43,29,0)
(15,57,0)
(25,28,0)
(29,43,0)
(47,33,1)
(27,47,1)
(33,10,1)
(35,31,1)
(38,21,1)
(57,15,1)
(24,22,1)
(49,18,1)
(1,11,1)
(54,40,1)
(0,57,1)
(23,35,1)
(37,42,1)
(31,22,1)
(43,46,1)
(48,24,1)
(15,32,1)
(13,54,1)
(7,19,1)
(29,43,1)
(31,12,1)
(50,7,1)
(7,13,1)
(51,16,1)
(16,8,1)
(18,50,1)
(20,25,1)
(16,21,1)
(45,34,1)
(30,51,1)
(46,49,1)
(33,23,1)
(42,38,1)
(25,41,1)
(39,10,1)
(22,56,1)
(9,48,1)
(25,47,1)
(10,37,1)
(11,39,1)
(21,3,1)
(40,1,1)
(15,26,1)
(8,0,1)
(56,30,1)
(22,50,1)
(32,29,1)
(12,9,1)
(9,21,1)
(3,45,1)
(41,27,1)
(54,40,2)
(47,33,2)
(16,21,2)
(50,7,2)
(51,16,2)
(33,10,2)
(29,43,2)
(25,47,2)
(15,32,2)
(21,3,2)
(9,21,2)
(22,50,2)
(13,54,2)
(15,26,2)
(31,22,2)
(10,37,2)
(57,15,2)
(7,19,2)
(32,29,2)
(7,13,2)
-----------------------------------
(0,data)
(1,wchar_t)
(2,data)
(3,&data)
(4,dataPtr1)
(5,dataBadBuffer)
(6,source)
(7,(wchar_t *)
(8,dataPtr1)
(9,*dataPtr1)
(10,* *dataPtr2 = &data)
(11,50)
(12,data)
(13,ALLOCA(50*sizeof(wchar_t)
(14,)
(15,(wchar_t *)
(16,*dataPtr1)
(17,dataGoodBuffer)
(18,dataGoodBuffer)
(19,wchar_t *)
(20,RET)
(21,* *dataPtr1 = &data)
(22,data = dataBadBuffer)
(23,dataPtr2)
(24,'\\\\0')
(25,printWLine(data)
(26,wchar_t *)
(27,'\\\\0')
(28,)
(29,100*sizeof(wchar_t)
(30,data)
(31,*dataPtr1 = data)
(32,ALLOCA(100*sizeof(wchar_t)
(33,*dataPtr2)
(34,dataPtr1)
(35,data)
(36,data)
(37,&data)
(38,dataPtr2)
(39,dataBadBuffer)
(40,sizeof(wchar_t)
(41,data)
(42,data)
(43,sizeof(wchar_t)
(44,)
(45,data)
(46,wchar_t)
(47,* data = *dataPtr2)
(48,dataPtr1)
(49,100)
(50,* dataBadBuffer = (wchar_t *)
(51,* data = *dataPtr1)
(52,data)
(53,dataPtr2)
(54,50*sizeof(wchar_t)
(55,)
(56,dataBadBuffer)
(57,* dataGoodBuffer = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^