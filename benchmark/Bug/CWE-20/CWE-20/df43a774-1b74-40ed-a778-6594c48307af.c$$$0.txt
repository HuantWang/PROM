-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_preinc_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
74,77
75,76
76,77
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,78,81,83,86,90,92
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_preinc_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_preinc_32_bad()
CWE190_Integer_Overflow__short_rand_preinc_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(33,40,0)
(12,4,0)
(32,31,0)
(24,26,0)
(35,17,0)
(6,32,0)
(41,30,0)
(15,21,0)
(26,34,0)
(36,30,0)
(22,1,0)
(38,42,0)
(8,30,0)
(31,41,0)
(20,35,0)
(4,12,0)
(23,1,0)
(15,30,0)
(0,10,0)
(26,35,0)
(18,40,0)
(1,17,0)
(1,9,0)
(32,40,0)
(40,30,0)
(5,18,0)
(27,41,0)
(18,27,0)
(43,27,0)
(34,1,0)
(16,40,0)
(40,33,0)
(37,4,0)
(23,35,0)
(27,10,0)
(2,42,0)
(42,30,0)
(11,21,0)
(21,15,0)
(7,17,0)
(10,41,0)
(9,15,0)
(39,9,0)
(4,10,0)
(45,34,0)
(10,4,0)
(13,31,0)
(25,41,0)
(28,15,0)
(34,35,0)
(17,30,0)
(9,1,0)
(31,32,0)
(29,23,0)
(19,33,0)
(3,34,0)
(4,37,0)
(44,30,0)
(40,33,1)
(23,1,1)
(14,26,1)
(15,21,1)
(31,32,1)
(11,28,1)
(10,4,1)
(32,6,1)
(34,1,1)
(38,2,1)
(18,5,1)
(18,40,1)
(2,15,1)
(9,39,1)
(9,15,1)
(3,45,1)
(32,40,1)
(33,19,1)
(26,24,1)
(1,9,1)
(5,10,1)
(13,42,1)
(26,34,1)
(19,16,1)
(29,1,1)
(34,3,1)
(45,23,1)
(27,43,1)
(39,22,1)
(4,37,1)
(21,11,1)
(24,34,1)
(23,29,1)
(37,0,1)
(28,40,1)
(27,10,1)
(0,31,1)
(43,18,1)
(4,12,1)
(22,27,1)
(6,13,1)
(42,38,1)
(23,1,2)
(15,21,2)
(4,12,2)
(32,40,2)
(18,40,2)
(31,32,2)
(9,15,2)
(27,10,2)
(1,9,2)
(4,37,2)
(40,33,2)
(34,1,2)
(10,4,2)
(26,34,2)
-----------------------------------
(0,data)
(1,data = *dataPtr2)
(2,data)
(3,data)
(4,(short)
(5,dataPtr1)
(6,dataPtr1)
(7,data)
(8,data)
(9,*dataPtr2)
(10,data = (short)
(11,data)
(12,short)
(13,data)
(14,RET)
(15,*dataPtr2 = &data)
(16,dataPtr1)
(17,)
(18,*dataPtr1)
(19,data)
(20,result)
(21,&data)
(22,data)
(23,++data)
(24,result)
(25,data)
(26,printIntLine(result)
(27,*dataPtr1 = data)
(28,dataPtr2)
(29,data)
(30,)
(31,data = *dataPtr1)
(32,*dataPtr1)
(33,&data)
(34,result = data)
(35,)
(36,dataPtr2)
(37,RAND32()
(38,0)
(39,dataPtr2)
(40,*dataPtr1 = &data)
(41,)
(42,data = 0)
(43,data)
(44,dataPtr1)
(45,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^