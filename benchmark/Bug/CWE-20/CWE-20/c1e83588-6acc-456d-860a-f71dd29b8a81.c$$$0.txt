-----label-----
1
-----code-----
void CWE134_Uncontrolled_Format_String__wchar_t_console_snprintf_06_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t dest[100] = L"";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printWLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
127,129
128,129
128,130
129,130
132,133
133,134
133,135
133,136
134,135
135,136
135,137
137,138
137,139
137,140
139,140
141,142
143,144
144,145
144,146
144,147
144,148
145,146
147,148
149,150
149,151
152,153
154,155
155,156
155,157
156,157
158,159
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,131,136,138,140,142,146,148,150,151,153,157,159
-----computeFrom-----
22,23
22,24
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
128,129
128,130
149,150
149,151
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE134_Uncontrolled_Format_String__wchar_t_console_snprintf_06_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
void
CWE134_Uncontrolled_Format_String__wchar_t_console_snprintf_06_bad()
CWE134_Uncontrolled_Format_String__wchar_t_console_snprintf_06_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
{            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(62,43,0)
(34,33,0)
(13,31,0)
(1,29,0)
(40,37,0)
(41,23,0)
(63,29,0)
(51,52,0)
(62,4,0)
(15,61,0)
(6,18,0)
(53,38,0)
(32,57,0)
(19,4,0)
(10,7,0)
(0,21,0)
(22,24,0)
(46,13,0)
(21,10,0)
(11,27,0)
(24,22,0)
(61,26,0)
(42,24,0)
(4,19,0)
(44,7,0)
(8,17,0)
(45,19,0)
(39,10,0)
(7,31,0)
(13,10,0)
(3,26,0)
(54,37,0)
(12,21,0)
(22,38,0)
(47,9,0)
(33,47,0)
(10,17,0)
(23,21,0)
(60,47,0)
(18,10,0)
(48,37,0)
(33,31,0)
(55,57,0)
(33,34,0)
(31,37,0)
(35,31,0)
(4,62,0)
(50,17,0)
(28,33,0)
(62,18,0)
(24,31,0)
(14,53,0)
(52,47,0)
(5,37,0)
(58,13,0)
(25,31,0)
(13,4,0)
(16,34,0)
(7,10,0)
(49,34,0)
(43,62,0)
(18,62,0)
(56,33,0)
(4,13,0)
(17,36,0)
(30,4,0)
(20,22,0)
(2,18,0)
(21,23,0)
(10,7,1)
(57,55,1)
(62,18,1)
(34,49,1)
(59,52,1)
(55,32,1)
(21,10,1)
(1,63,1)
(60,57,1)
(33,34,1)
(30,62,1)
(46,23,1)
(13,10,1)
(51,33,1)
(20,19,1)
(59,57,1)
(49,16,1)
(4,62,1)
(2,13,1)
(32,3,1)
(22,24,1)
(3,61,1)
(0,12,1)
(32,29,1)
(33,31,1)
(18,10,1)
(15,19,1)
(42,20,1)
(35,25,1)
(25,5,1)
(56,60,1)
(12,10,1)
(24,42,1)
(45,4,1)
(52,51,1)
(21,0,1)
(13,58,1)
(6,2,1)
(24,31,1)
(63,31,1)
(33,28,1)
(28,34,1)
(14,22,1)
(31,35,1)
(29,1,1)
(32,14,1)
(62,43,1)
(58,46,1)
(39,29,1)
(19,4,1)
(16,56,1)
(18,6,1)
(13,31,1)
(4,13,1)
(7,44,1)
(7,31,1)
(23,21,1)
(4,30,1)
(23,41,1)
(61,15,1)
(32,23,1)
(41,21,1)
(19,45,1)
(44,39,1)
(13,31,2)
(62,23,2)
(10,29,2)
(19,23,2)
(19,4,2)
(20,19,2)
(13,23,2)
(18,10,2)
(49,57,2)
(45,23,2)
(51,57,2)
(41,29,2)
(42,19,2)
(22,19,2)
(34,57,2)
(3,19,2)
(0,29,2)
(52,57,2)
(23,21,2)
(22,24,2)
(23,29,2)
(61,19,2)
(33,31,2)
(60,57,2)
(10,7,2)
(4,23,2)
(4,13,2)
(58,23,2)
(62,18,2)
(62,43,2)
(13,10,2)
(15,19,2)
(28,57,2)
(21,10,2)
(33,34,2)
(24,19,2)
(7,31,2)
(33,57,2)
(18,23,2)
(21,29,2)
(14,19,2)
(44,29,2)
(12,29,2)
(56,57,2)
(24,31,2)
(6,23,2)
(4,62,2)
(7,29,2)
(30,23,2)
(46,23,2)
(2,23,2)
(16,57,2)
(39,29,2)
-----------------------------------
(0,dataLen)
(1,5)
(2,100)
(3,\\\'\\\\0\\\')
(4,fgetws(data+dataLen, (int)
(5,"")
(6,dataLen)
(7,wcslen(data)
(8,if (100-dataLen > 1)
(9,)
(10,dataLen = wcslen(data)
(11,if (fgetws(data+dataLen, (int)
(12,100)
(13,data+dataLen)
(14,\\\'\\\\0\\\')
(15,"fgetws()
(16,100)
(17,)
(18,100-dataLen)
(19,fgetws(data+dataLen, (int)
(20,dataLen)
(21,100-dataLen)
(22,dataLen = wcslen(data)
(23,100-dataLen > 1)
(24,wcslen(data)
(25,data)
(26,)
(27,)
(28,data)
(29,STATIC_CONST_FIVE==5)
(30,stdin)
(31,data = dataBuffer)
(32,STATIC_CONST_FIVE)
(33,SNPRINTF(dest, 100-1, data)
(34,100-1)
(35,dataBuffer)
(36,)
(37,)
(38,)
(39,dataLen)
(40,if(STATIC_CONST_FIVE==5)
(41,1)
(42,data)
(43,int)
(44,data)
(45,NULL)
(46,data)
(47,)
(48,if(STATIC_CONST_FIVE==5)
(49,1)
(50,dataLen)
(51,dest)
(52,printWLine(dest)
(53,)
(54,data)
(55,5)
(56,dest)
(57,STATIC_CONST_FIVE==5)
(58,dataLen)
(59,RET)
(60,"")
(61,printLine("fgetws()
(62,(int)
(63,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^