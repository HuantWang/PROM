-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
26,28
29,30
30,31
30,32
31,32
31,33
32,33
34,35
34,36
38,39
39,40
39,41
39,42
39,43
39,44
40,41
42,43
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,6,8,9,14,16,18,22,24,25,27,28,33,35,36,37,41,43,44,45,47,51,53,57,59
-----computeFrom-----
26,27
26,28
30,31
30,32
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(5,7,0)
(19,20,0)
(11,20,0)
(24,5,0)
(22,2,0)
(15,23,0)
(2,23,0)
(16,22,0)
(5,23,0)
(3,2,0)
(21,23,0)
(13,23,0)
(23,17,0)
(18,21,0)
(10,22,0)
(15,7,0)
(9,2,0)
(21,7,0)
(8,23,0)
(0,25,0)
(2,22,0)
(26,15,0)
(12,5,0)
(25,8,0)
(20,25,0)
(25,20,0)
(4,8,0)
(6,5,0)
(1,5,0)
(16,10,1)
(6,24,1)
(12,1,1)
(24,8,1)
(1,6,1)
(11,19,1)
(25,20,1)
(21,7,1)
(10,9,1)
(14,21,1)
(26,5,1)
(5,12,1)
(20,11,1)
(15,26,1)
(9,3,1)
(0,2,1)
(15,7,1)
(19,0,1)
(2,22,1)
(5,7,1)
(22,16,1)
(18,15,1)
(4,25,1)
(8,4,1)
(21,18,1)
(21,7,2)
(15,7,2)
(5,7,2)
(2,22,2)
(25,20,2)
-----------------------------------
(0,source)
(1,"%s")
(2,memset(source, \\\'C\\\', 100-1)
(3,source)
(4,\\\'\\\\0\\\')
(5,SNPRINTF(data, 100, "%s", source)
(6,100)
(7,char * data)
(8,source[100-1] = \\\'\\\\0\\\')
(9,\\\'C\\\')
(10,100)
(11,1)
(12,source)
(13,source)
(14,RET)
(15,printLine(data)
(16,1)
(17,)
(18,data)
(19,100)
(20,100-1)
(21,free(data)
(22,100-1)
(23,)
(24,data)
(25,source[100-1])
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^