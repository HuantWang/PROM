-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
24,25
27,28
27,29
29,30
29,31
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,28,33,35,39,41,45,47,48
-----computeFrom-----
12,13
12,14
20,21
20,22
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_rand_square_16_bad()
CWE190_Integer_Overflow__int_rand_square_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(24,11,0)
(3,11,0)
(11,19,0)
(21,25,0)
(6,10,0)
(18,15,0)
(10,1,0)
(17,13,0)
(25,0,0)
(10,25,0)
(15,13,0)
(7,1,0)
(0,25,0)
(4,0,0)
(25,1,0)
(11,3,0)
(2,13,0)
(12,8,0)
(1,8,0)
(23,13,0)
(16,19,0)
(0,11,0)
(22,0,0)
(9,15,0)
(0,15,0)
(9,18,1)
(12,10,1)
(0,15,1)
(3,24,1)
(6,25,1)
(0,11,1)
(4,21,1)
(10,6,1)
(14,5,1)
(11,3,1)
(22,4,1)
(15,9,1)
(0,22,1)
(20,15,1)
(21,5,1)
(10,25,1)
(14,12,1)
(25,0,1)
(5,16,1)
(16,11,1)
(24,20,1)
(5,20,1)
(22,5,2)
(25,0,2)
(11,20,2)
(16,20,2)
(25,5,2)
(10,25,2)
(12,5,2)
(6,5,2)
(0,5,2)
(11,3,2)
(0,15,2)
(10,5,2)
(4,5,2)
(0,11,2)
(3,20,2)
(21,5,2)
(24,20,2)
-----------------------------------
(0,data * data)
(1,)
(2,data)
(3,RAND32()
(4,data)
(5,1)
(6,result)
(7,result)
(8,)
(9,0)
(10,printIntLine(result)
(11,data = RAND32()
(12,break;)
(13,)
(14,RET)
(15,data = 0)
(16,break;)
(17,while(1)
(18,data)
(19,)
(20,1)
(21,result)
(22,data)
(23,while(1)
(24,data)
(25,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^