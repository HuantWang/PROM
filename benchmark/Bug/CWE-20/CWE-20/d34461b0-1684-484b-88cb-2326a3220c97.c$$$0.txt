-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_07_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(staticFive==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
129,130
130,131
130,132
132,133
132,134
132,135
132,136
136,137
137,138
137,139
137,140
137,141
138,139
140,141
142,143
144,145
146,147
147,148
147,149
147,150
148,149
150,151
152,153
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,131,133,134,135,139,141,143,145,149,151,153
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_07_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_07_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_07_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(59,32,0)
(37,20,0)
(80,15,0)
(3,59,0)
(14,20,0)
(30,49,0)
(72,29,0)
(45,30,0)
(5,32,0)
(68,44,0)
(70,13,0)
(42,31,0)
(9,48,0)
(57,43,0)
(0,61,0)
(62,48,0)
(27,31,0)
(38,56,0)
(65,15,0)
(73,62,0)
(58,9,0)
(27,37,0)
(79,59,0)
(30,59,0)
(62,73,0)
(74,29,0)
(36,9,0)
(1,51,0)
(39,37,0)
(23,43,0)
(29,37,0)
(43,16,0)
(73,37,0)
(33,39,0)
(59,3,0)
(45,64,0)
(25,18,0)
(78,20,0)
(11,45,0)
(40,71,0)
(66,60,0)
(24,71,0)
(4,51,0)
(30,45,0)
(2,6,0)
(52,73,0)
(10,68,0)
(73,50,0)
(64,39,0)
(48,62,0)
(15,20,0)
(43,31,0)
(35,37,0)
(28,44,0)
(54,50,0)
(37,15,0)
(50,73,0)
(41,3,0)
(26,32,0)
(59,30,0)
(21,53,0)
(44,20,0)
(61,47,0)
(34,16,0)
(69,24,0)
(77,18,0)
(22,13,0)
(18,68,0)
(64,6,0)
(31,27,0)
(17,6,0)
(32,64,0)
(51,64,0)
(46,20,0)
(50,31,0)
(12,37,0)
(19,45,0)
(6,76,0)
(63,40,0)
(32,59,0)
(18,44,0)
(29,64,0)
(75,64,0)
(9,31,0)
(7,50,0)
(8,62,0)
(48,9,0)
(31,60,0)
(16,61,0)
(39,64,0)
(16,43,0)
(49,30,0)
(51,53,0)
(55,27,0)
(29,40,0)
(16,37,0)
(32,37,0)
(53,51,0)
(24,69,1)
(64,39,1)
(9,36,1)
(62,73,1)
(40,63,1)
(29,64,1)
(50,31,1)
(68,10,1)
(43,23,1)
(10,53,1)
(10,13,1)
(53,51,1)
(69,3,1)
(37,15,1)
(53,21,1)
(29,37,1)
(31,27,1)
(13,70,1)
(32,5,1)
(75,13,1)
(27,37,1)
(3,59,1)
(73,50,1)
(7,54,1)
(35,12,1)
(58,31,1)
(45,19,1)
(43,31,1)
(0,16,1)
(29,74,1)
(23,57,1)
(39,33,1)
(32,64,1)
(18,68,1)
(15,80,1)
(32,37,1)
(72,24,1)
(61,0,1)
(5,26,1)
(52,9,1)
(16,37,1)
(67,18,1)
(26,53,1)
(30,45,1)
(70,22,1)
(50,7,1)
(41,59,1)
(54,52,1)
(19,11,1)
(48,9,1)
(10,61,1)
(39,37,1)
(80,65,1)
(73,37,1)
(51,64,1)
(55,42,1)
(27,55,1)
(18,77,1)
(51,4,1)
(33,75,1)
(22,37,1)
(45,64,1)
(16,43,1)
(9,31,1)
(59,79,1)
(36,58,1)
(10,40,1)
(59,30,1)
(4,1,1)
(62,8,1)
(42,3,1)
(21,51,1)
(74,72,1)
(37,35,1)
(10,48,1)
(1,64,1)
(11,32,1)
(48,62,1)
(59,32,1)
(79,30,1)
(34,48,1)
(57,34,1)
(3,41,1)
(12,15,1)
(63,29,1)
(25,68,1)
(77,25,1)
(30,49,1)
(8,73,1)
(64,39,2)
(16,37,2)
(50,9,2)
(31,27,2)
(32,37,2)
(43,48,2)
(21,13,2)
(32,64,2)
(26,53,2)
(3,53,2)
(0,48,2)
(59,30,2)
(39,37,2)
(30,45,2)
(41,53,2)
(39,13,2)
(27,37,2)
(53,51,2)
(16,48,2)
(48,9,2)
(57,48,2)
(37,15,2)
(40,3,2)
(52,9,2)
(34,48,2)
(30,49,2)
(73,50,2)
(30,53,2)
(69,3,2)
(7,9,2)
(43,31,2)
(75,13,2)
(59,32,2)
(62,9,2)
(11,53,2)
(73,37,2)
(79,53,2)
(51,13,2)
(23,48,2)
(72,3,2)
(53,13,2)
(48,3,2)
(59,53,2)
(73,9,2)
(3,59,2)
(45,64,2)
(54,9,2)
(4,13,2)
(33,13,2)
(63,3,2)
(29,3,2)
(5,53,2)
(58,3,2)
(61,48,2)
(27,3,2)
(74,3,2)
(31,3,2)
(9,31,2)
(29,37,2)
(55,3,2)
(24,3,2)
(18,68,2)
(64,13,2)
(48,62,2)
(8,9,2)
(42,3,2)
(45,53,2)
(50,31,2)
(62,73,2)
(9,3,2)
(16,43,2)
(51,64,2)
(1,13,2)
(32,53,2)
(19,53,2)
(29,64,2)
(36,3,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,100)
(2,dataLen)
(3,fgets(data+dataLen, (int)
(4,dataLen)
(5,dataLen)
(6,)
(7,1)
(8,\\\'\\\\n\\\')
(9,dataLen > 0)
(10,args)
(11,100)
(12,data)
(13,staticFive==5)
(14,if(staticFive==5)
(15,dataBuffer[100] = COMMAND_ARG2)
(16,data[dataLen-1])
(17,if (100-dataLen > 1)
(18,EXECVP(COMMAND_INT, args)
(19,dataLen)
(20,)
(21,1)
(22,staticFive)
(23,1)
(24,printLine("fgets()
(25,COMMAND_INT)
(26,data)
(27,strlen(data)
(28,args)
(29,data[dataLen])
(30,(int)
(31,dataLen = strlen(data)
(32,data+dataLen)
(33,data)
(34,data)
(35,dataBuffer)
(36,0)
(37,data = dataBuffer)
(38,if (fgets(data+dataLen, (int)
(39,strlen(data)
(40,data[dataLen] = \\\'\\\\0\\\')
(41,NULL)
(42,dataLen)
(43,dataLen-1)
(44,)
(45,100-dataLen)
(46,data)
(47,)
(48,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,int)
(50,dataLen-1)
(51,100-dataLen)
(52,data)
(53,100-dataLen > 1)
(54,dataLen)
(55,data)
(56,)
(57,dataLen)
(58,dataLen)
(59,fgets(data+dataLen, (int)
(60,)
(61,data[dataLen-1] = \\\'\\\\0\\\')
(62,data[dataLen-1] == \\\'\\\\n\\\')
(63,\\\'\\\\0\\\')
(64,dataLen = strlen(data)
(65,dataBuffer)
(66,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(67,RET)
(68,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(69,"fgets()
(70,5)
(71,)
(72,data)
(73,data[dataLen-1])
(74,dataLen)
(75,dataLen)
(76,)
(77,args)
(78,dataBuffer)
(79,stdin)
(80,COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^