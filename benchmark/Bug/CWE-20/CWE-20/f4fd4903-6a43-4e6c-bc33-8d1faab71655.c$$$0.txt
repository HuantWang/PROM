-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strncat(data, source, 100);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,95,99,101,105,107
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16_bad(){    char * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16_bad
{    char * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncat(data, source, 100);
strncat(data, source, 100)
strncat
strncat
data
data
source
source
100
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(48,32,0)
(24,35,0)
(42,46,0)
(20,34,0)
(52,20,0)
(54,0,0)
(40,48,0)
(35,23,0)
(51,30,0)
(16,32,0)
(34,20,0)
(36,18,0)
(45,31,0)
(6,15,0)
(3,51,0)
(19,35,0)
(22,9,0)
(30,23,0)
(57,0,0)
(54,14,0)
(7,35,0)
(2,14,0)
(7,32,0)
(51,35,0)
(17,45,0)
(43,30,0)
(50,30,0)
(41,54,0)
(20,12,0)
(21,5,0)
(56,51,0)
(4,7,0)
(51,32,0)
(32,36,0)
(44,19,0)
(48,30,0)
(5,32,0)
(36,12,0)
(18,36,0)
(25,23,0)
(19,9,0)
(27,17,0)
(5,15,0)
(38,9,0)
(32,26,0)
(45,17,0)
(12,36,0)
(37,34,0)
(29,51,0)
(7,30,0)
(12,20,0)
(13,23,0)
(36,32,0)
(15,26,0)
(39,46,0)
(33,0,0)
(9,19,0)
(28,5,0)
(14,35,0)
(1,26,0)
(55,26,0)
(11,19,0)
(48,35,0)
(0,54,0)
(46,32,0)
(45,17,1)
(11,1,1)
(49,7,1)
(20,34,1)
(29,56,1)
(14,2,1)
(40,51,1)
(19,9,1)
(3,14,1)
(22,44,1)
(17,27,1)
(36,18,1)
(37,52,1)
(15,6,1)
(1,15,1)
(56,3,1)
(38,22,1)
(7,30,1)
(41,19,1)
(0,33,1)
(9,38,1)
(5,21,1)
(51,32,1)
(52,16,1)
(34,37,1)
(28,45,1)
(44,11,1)
(7,32,1)
(32,36,1)
(4,48,1)
(8,30,1)
(48,30,1)
(48,40,1)
(46,42,1)
(30,43,1)
(6,5,1)
(48,32,1)
(43,50,1)
(7,4,1)
(11,8,1)
(51,30,1)
(39,32,1)
(42,39,1)
(5,32,1)
(51,29,1)
(12,20,1)
(2,54,1)
(27,46,1)
(33,57,1)
(54,0,1)
(16,8,1)
(46,32,1)
(57,41,1)
(36,12,1)
(21,28,1)
(28,46,1)
(19,9,2)
(36,18,2)
(54,0,2)
(36,12,2)
(27,46,2)
(48,32,2)
(45,17,2)
(51,32,2)
(32,36,2)
(5,32,2)
(48,30,2)
(45,46,2)
(7,30,2)
(34,8,2)
(39,8,2)
(52,8,2)
(7,32,2)
(1,8,2)
(15,8,2)
(36,8,2)
(5,8,2)
(32,8,2)
(12,8,2)
(20,8,2)
(12,20,2)
(17,46,2)
(6,8,2)
(46,32,2)
(16,8,2)
(20,34,2)
(46,8,2)
(28,8,2)
(51,30,2)
(21,8,2)
(42,8,2)
(37,8,2)
-----------------------------------
(0,100-1)
(1,break;)
(2,'\\\\0')
(3,data)
(4,data)
(5,data[0])
(6,'\\\\0')
(7,free(data)
(8,1)
(9,100-1)
(10,\'\\\\0\')
(11,source)
(12,malloc(50*sizeof(char)
(13,data)
(14,source[100-1] = '\\\\0')
(15,data[0] = '\\\\0')
(16,data)
(17,-1)
(18,char *)
(19,memset(source, \'C\', 100-1)
(20,50*sizeof(char)
(21,0)
(22,100)
(23,)
(24,source)
(25,while(1)
(26,)
(27,1)
(28,data)
(29,100)
(30,data = NULL)
(31,)
(32,data = (char *)
(33,1)
(34,sizeof(char)
(35,)
(36,(char *)
(37,char)
(38,1)
(39,data)
(40,data)
(41,source)
(42,NULL)
(43,NULL)
(44,'C')
(45,exit(-1)
(46,data == NULL)
(47,memset(source, 'C', 100-1)
(48,printLine(data)
(49,RET)
(50,data)
(51,strncat(data, source, 100)
(52,50)
(53,data[0] = \'\\\\0\')
(54,source[100-1])
(55,if (data == NULL)
(56,source)
(57,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^