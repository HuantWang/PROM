-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31_bad()
{
    int * data;
    data = NULL;
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)malloc(10);
    if (data == NULL) {exit(-1);}
    {
        int * dataCopy = data;
        int * data = dataCopy;
        {
            int source[10] = {0};
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
            for (i = 0; i < 10; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
44,47
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
57,58
57,59
57,60
60,61
61,62
63,64
63,65
63,66
63,67
63,68
64,65
65,66
65,67
67,68
67,69
67,70
69,70
71,72
72,73
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
90,91
91,92
93,94
94,95
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,34,36,41,43,47,49,50,53,56,58,59,62,66,68,70,73,77,79,84,85,88,89,92,98,100,103,105,109,112,113,117,119
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
82,83
82,84
86,87
86,88
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31_bad(){    int * data;    data = NULL;    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int * dataCopy = data;        int * data = dataCopy;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31_bad
{    int * data;    data = NULL;    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int * dataCopy = data;        int * data = dataCopy;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int * dataCopy = data;        int * data = dataCopy;        {            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int * dataCopy = data;
int * dataCopy = data;
int
* dataCopy = data
*
dataCopy
= data
data
data
int * data = dataCopy;
int * data = dataCopy;
int
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            int source[10] = {0};            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */            for (i = 0; i < 10; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(17,38,0)
(55,35,0)
(27,32,0)
(35,55,0)
(44,38,0)
(25,17,0)
(33,17,0)
(42,17,0)
(26,52,0)
(7,38,0)
(51,4,0)
(8,52,0)
(14,24,0)
(24,23,0)
(42,7,0)
(29,42,0)
(37,10,0)
(35,10,0)
(48,2,0)
(2,53,0)
(46,7,0)
(23,49,0)
(20,17,0)
(44,10,0)
(52,40,0)
(45,44,0)
(54,53,0)
(5,53,0)
(10,35,0)
(28,2,0)
(18,16,0)
(16,7,0)
(38,4,0)
(39,10,0)
(35,1,0)
(13,22,0)
(1,35,0)
(23,24,0)
(2,40,0)
(31,16,0)
(18,17,0)
(50,55,0)
(30,44,0)
(10,4,0)
(6,12,0)
(12,4,0)
(11,38,0)
(36,16,0)
(2,7,0)
(19,53,0)
(22,53,0)
(52,32,0)
(21,7,0)
(9,5,0)
(40,52,0)
(56,37,0)
(7,44,0)
(34,12,0)
(43,5,0)
(15,38,0)
(16,18,0)
(40,41,0)
(32,17,0)
(0,37,0)
(52,53,0)
(47,4,0)
(31,36,1)
(8,26,1)
(35,55,1)
(52,32,1)
(34,6,1)
(40,52,1)
(3,42,1)
(43,9,1)
(50,39,1)
(52,53,1)
(55,50,1)
(9,53,1)
(27,7,1)
(39,12,1)
(32,27,1)
(56,10,1)
(45,37,1)
(21,44,1)
(9,22,1)
(7,46,1)
(22,53,1)
(53,19,1)
(18,16,1)
(24,14,1)
(54,32,1)
(48,5,1)
(10,35,1)
(35,1,1)
(45,23,1)
(23,24,1)
(46,21,1)
(28,48,1)
(29,18,1)
(42,29,1)
(19,54,1)
(36,5,1)
(42,7,1)
(2,28,1)
(16,31,1)
(7,44,1)
(37,0,1)
(26,2,1)
(2,7,1)
(13,40,1)
(37,10,1)
(0,56,1)
(5,53,1)
(2,53,1)
(5,43,1)
(12,34,1)
(44,10,1)
(14,37,1)
(30,45,1)
(44,30,1)
(22,13,1)
(52,8,1)
(16,7,1)
(16,7,2)
(35,1,2)
(52,53,2)
(37,10,2)
(5,5,2)
(22,53,2)
(40,52,2)
(8,5,2)
(26,5,2)
(2,7,2)
(48,5,2)
(23,37,2)
(23,24,2)
(2,53,2)
(18,16,2)
(22,5,2)
(13,5,2)
(44,10,2)
(43,5,2)
(42,7,2)
(14,37,2)
(7,44,2)
(28,5,2)
(24,37,2)
(52,32,2)
(35,55,2)
(2,5,2)
(9,5,2)
(40,5,2)
(5,53,2)
(52,5,2)
(10,35,2)
-----------------------------------
(0,NULL)
(1,int *)
(2,data[i])
(3,RET)
(4,)
(5,i < 10)
(6,data)
(7,* data = dataCopy)
(8,i)
(9,i)
(10,data = (int *)
(11,dataCopy)
(12,data = NULL)
(13,i)
(14,1)
(15,data)
(16,data[0])
(17,)
(18,printIntLine(data[0])
(19,0)
(20,i)
(21,data)
(22,i++)
(23,exit(-1)
(24,-1)
(25,for (i = 0; i < 10; i++)
(26,source)
(27,source)
(28,i)
(29,data)
(30,data)
(31,0)
(32,source[10] = {0})
(33,source)
(34,NULL)
(35,(int *)
(36,data)
(37,data == NULL)
(38,)
(39,data)
(40,data[i] = source[i])
(41,)
(42,free(data)
(43,10)
(44,* dataCopy = data)
(45,dataCopy)
(46,dataCopy)
(47,data)
(48,data)
(49,)
(50,10)
(51,if (data == NULL)
(52,source[i])
(53,i = 0)
(54,i)
(55,malloc(10)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^