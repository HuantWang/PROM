-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (twoIntsStruct *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        data->intOne = 1;
        data->intTwo = 2;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printStructLine(data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
37,38
38,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,39,43,45,50,52,57,58,59,64,65,66,70,72,76,78
-----computeFrom-----
14,15
14,16
24,25
24,26
41,42
41,43
54,55
54,56
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
data = (twoIntsStruct *)malloc(sizeof(data));
data = (twoIntsStruct *)malloc(sizeof(data))
data
data
(twoIntsStruct *)malloc(sizeof(data))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 1;
data->intOne = 1
data->intOne
data
data
intOne
1
data->intTwo = 2;
data->intTwo = 2
data->intTwo
data
data
intTwo
2
printStructLine(data);
printStructLine(data)
printStructLine
printStructLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(32,15,0)
(7,0,0)
(36,23,0)
(16,34,0)
(31,35,0)
(2,34,0)
(37,29,0)
(3,18,0)
(27,18,0)
(29,34,0)
(33,15,0)
(23,18,0)
(0,25,0)
(22,23,0)
(23,30,0)
(13,3,0)
(3,34,0)
(25,35,0)
(29,18,0)
(19,27,0)
(3,2,0)
(30,12,0)
(24,17,0)
(35,2,0)
(5,30,0)
(15,32,0)
(27,1,0)
(21,1,0)
(25,0,0)
(17,18,0)
(18,12,0)
(20,12,0)
(14,34,0)
(11,2,0)
(4,18,0)
(0,7,0)
(35,25,0)
(0,18,0)
(9,17,0)
(26,2,0)
(18,0,0)
(1,12,0)
(32,28,0)
(29,2,0)
(6,27,0)
(10,3,1)
(23,22,1)
(30,5,1)
(11,26,1)
(29,37,1)
(32,15,1)
(35,31,1)
(36,17,1)
(3,18,1)
(5,23,1)
(19,30,1)
(35,2,1)
(37,8,1)
(17,9,1)
(27,6,1)
(27,18,1)
(1,21,1)
(9,24,1)
(3,13,1)
(29,2,1)
(31,4,1)
(25,35,1)
(3,2,1)
(8,2,1)
(21,27,1)
(37,1,1)
(22,36,1)
(33,17,1)
(13,29,1)
(15,33,1)
(29,18,1)
(17,18,1)
(4,8,1)
(23,18,1)
(0,25,1)
(36,32,1)
(24,18,1)
(0,7,1)
(6,19,1)
(18,0,1)
(2,11,1)
(4,8,2)
(29,2,2)
(35,8,2)
(35,2,2)
(0,25,2)
(15,17,2)
(6,8,2)
(32,15,2)
(36,8,2)
(25,35,2)
(25,8,2)
(24,8,2)
(1,8,2)
(3,18,2)
(5,8,2)
(17,8,2)
(19,8,2)
(9,8,2)
(33,17,2)
(18,0,2)
(17,18,2)
(3,2,2)
(18,8,2)
(0,7,2)
(0,8,2)
(23,8,2)
(23,18,2)
(30,8,2)
(32,17,2)
(22,8,2)
(29,18,2)
(27,8,2)
(21,8,2)
(31,8,2)
(27,18,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,data->intTwo = 2)
(2,data = NULL)
(3,free(data)
(4,data)
(5,1)
(6,intTwo)
(7,twoIntsStruct *)
(8,STATIC_CONST_TRUE)
(9,NULL)
(10,RET)
(11,NULL)
(12,)
(13,data)
(14,data)
(15,-1)
(16,if(STATIC_CONST_TRUE)
(17,data == NULL)
(18,data = (twoIntsStruct *)
(19,data)
(20,if (data == NULL)
(21,2)
(22,intOne)
(23,data->intOne)
(24,data)
(25,malloc(sizeof(data)
(26,data)
(27,data->intTwo)
(28,)
(29,printStructLine(data)
(30,data->intOne = 1)
(31,data)
(32,exit(-1)
(33,1)
(34,)
(35,sizeof(data)
(36,data)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^