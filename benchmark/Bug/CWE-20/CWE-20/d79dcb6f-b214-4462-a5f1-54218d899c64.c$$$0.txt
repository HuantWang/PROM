-----label-----
1
-----code-----
void CWE127_Buffer_Underread__malloc_char_cpy_34_bad()
{
    char * data;
    CWE127_Buffer_Underread__malloc_char_cpy_34_unionType myUnion;
    data = NULL;
    {
        char * dataBuffer = (char *)malloc(100*sizeof(char));
        if (dataBuffer == NULL) {exit(-1);}
        memset(dataBuffer, 'A', 100-1);
        dataBuffer[100-1] = '\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char dest[100*2];
            memset(dest, 'C', 100*2-1); /* fill with 'C's */
            dest[100*2-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */
            strcpy(dest, data);
            printLine(dest);
            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
             * returned by malloc() so can't safely call free() on it */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
66,67
66,68
69,70
70,71
70,72
71,72
71,73
72,73
74,75
74,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
98,101
101,102
102,103
102,104
103,104
106,107
106,108
106,109
106,110
106,111
107,108
108,109
108,110
110,111
110,112
112,113
113,114
113,115
116,117
117,118
117,119
117,120
117,121
118,119
120,121
123,124
123,125
124,125
124,126
128,129
129,130
129,131
130,131
130,132
131,132
133,134
133,135
134,135
134,136
139,140
140,141
140,142
140,143
141,142
143,144
145,146
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,30,34,36,39,41,44,45,49,51,56,58,62,64,65,67,68,73,75,76,77,81,84,85,90,91,93,97,99,100,104,105,109,111,114,115,119,121,122,125,126,127,132,135,136,137,138,142,144,146,150,152
-----computeFrom-----
19,20
19,21
40,41
40,42
47,48
47,49
66,67
66,68
70,71
70,72
74,75
74,76
79,80
79,81
82,83
82,84
87,88
87,89
113,114
113,115
123,124
123,125
124,125
124,126
129,130
129,131
133,134
133,135
134,135
134,136
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE127_Buffer_Underread__malloc_char_cpy_34_bad(){    char * data;    CWE127_Buffer_Underread__malloc_char_cpy_34_unionType myUnion;    data = NULL;    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char dest[100*2];            memset(dest, 'C', 100*2-1); /* fill with 'C's */            dest[100*2-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            strcpy(dest, data);            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
void
CWE127_Buffer_Underread__malloc_char_cpy_34_bad()
CWE127_Buffer_Underread__malloc_char_cpy_34_bad
{    char * data;    CWE127_Buffer_Underread__malloc_char_cpy_34_unionType myUnion;    data = NULL;    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char dest[100*2];            memset(dest, 'C', 100*2-1); /* fill with 'C's */            dest[100*2-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            strcpy(dest, data);            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
char * data;
char * data;
char
* data
*
data
CWE127_Buffer_Underread__malloc_char_cpy_34_unionType myUnion;
CWE127_Buffer_Underread__malloc_char_cpy_34_unionType myUnion;
CWE127_Buffer_Underread__malloc_char_cpy_34_unionType
CWE127_Buffer_Underread__malloc_char_cpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char dest[100*2];            memset(dest, 'C', 100*2-1); /* fill with 'C's */            dest[100*2-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            strcpy(dest, data);            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char dest[100*2];            memset(dest, 'C', 100*2-1); /* fill with 'C's */            dest[100*2-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            strcpy(dest, data);            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }
char dest[100*2];
char dest[100*2];
char
dest[100*2]
dest
[100*2]
100*2
100
2
memset(dest, 'C', 100*2-1);
memset(dest, 'C', 100*2-1)
memset
memset
dest
dest
'C'
100*2-1
100*2
100
2
1
dest[100*2-1] = '\0';
dest[100*2-1] = '\0'
dest[100*2-1]
dest
dest
100*2-1
100*2
100
2
1
'\0'
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(8,72,0)
(17,0,0)
(48,19,0)
(59,60,0)
(53,39,0)
(69,60,0)
(51,32,0)
(1,76,0)
(23,27,0)
(14,32,0)
(4,23,0)
(81,45,0)
(80,43,0)
(64,68,0)
(43,80,0)
(61,33,0)
(72,71,0)
(18,63,0)
(23,59,0)
(69,17,0)
(79,51,0)
(77,54,0)
(24,81,0)
(31,39,0)
(27,23,0)
(76,1,0)
(45,39,0)
(49,18,0)
(23,0,0)
(30,10,0)
(21,61,0)
(46,40,0)
(26,17,0)
(1,3,0)
(57,54,0)
(47,33,0)
(35,58,0)
(67,69,0)
(37,72,0)
(66,12,0)
(3,1,0)
(7,17,0)
(70,63,0)
(65,27,0)
(63,45,0)
(0,3,0)
(61,0,0)
(3,44,0)
(0,60,0)
(58,39,0)
(60,39,0)
(9,51,0)
(50,12,0)
(56,40,0)
(37,12,0)
(33,61,0)
(72,37,0)
(25,18,0)
(12,37,0)
(67,39,0)
(36,62,0)
(54,63,0)
(68,76,0)
(6,0,0)
(34,69,0)
(78,19,0)
(71,63,0)
(61,60,0)
(3,0,0)
(32,54,0)
(42,10,0)
(28,67,0)
(17,69,0)
(81,19,0)
(62,63,0)
(38,45,0)
(10,0,0)
(19,81,0)
(44,3,0)
(52,76,0)
(80,16,0)
(20,60,0)
(76,68,0)
(5,33,0)
(11,71,0)
(2,61,0)
(73,58,0)
(15,43,0)
(54,32,0)
(18,81,0)
(13,27,0)
(40,67,0)
(41,37,0)
(22,59,0)
(29,60,0)
(32,51,0)
(81,19,1)
(32,51,1)
(14,51,1)
(61,33,1)
(9,57,1)
(18,81,1)
(17,26,1)
(65,13,1)
(32,14,1)
(47,2,1)
(62,36,1)
(0,3,1)
(7,34,1)
(21,80,1)
(67,28,1)
(79,9,1)
(69,17,1)
(67,69,1)
(22,23,1)
(19,78,1)
(80,43,1)
(10,42,1)
(68,64,1)
(30,0,1)
(27,65,1)
(13,4,1)
(64,52,1)
(6,58,1)
(50,8,1)
(18,49,1)
(28,40,1)
(78,48,1)
(23,27,1)
(12,66,1)
(34,59,1)
(37,12,1)
(56,46,1)
(15,10,1)
(26,7,1)
(10,0,1)
(33,5,1)
(1,76,1)
(42,30,1)
(43,15,1)
(76,68,1)
(23,0,1)
(24,67,1)
(61,0,1)
(3,1,1)
(58,35,1)
(40,56,1)
(36,18,1)
(54,32,1)
(49,25,1)
(37,41,1)
(4,61,1)
(51,79,1)
(8,54,1)
(55,62,1)
(46,69,1)
(11,72,1)
(48,24,1)
(35,73,1)
(72,37,1)
(71,11,1)
(41,12,1)
(25,71,1)
(52,6,1)
(17,0,1)
(57,77,1)
(3,44,1)
(21,10,1)
(77,81,1)
(5,47,1)
(2,21,1)
(66,50,1)
(59,22,1)
(76,68,2)
(23,27,2)
(10,0,2)
(54,32,2)
(67,69,2)
(1,76,2)
(0,3,2)
(61,0,2)
(43,10,2)
(15,10,2)
(37,12,2)
(80,43,2)
(3,1,2)
(17,0,2)
(3,44,2)
(72,37,2)
(69,17,2)
(18,81,2)
(61,33,2)
(32,51,2)
(80,10,2)
(23,0,2)
(81,19,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,malloc(100*sizeof(char)
(2,'A')
(3,(char *)
(4,dataBuffer)
(5,1)
(6,dataBuffer)
(7,dataBuffer)
(8,dest)
(9,100)
(10,dataBuffer == NULL)
(11,'\\\\0')
(12,100*2)
(13,100)
(14,1)
(15,1)
(16,)
(17,dataBuffer - 8)
(18,strcpy(dest, data)
(19,myUnion.unionSecond)
(20,dataBuffer)
(21,dataBuffer)
(22,'\\\\0')
(23,dataBuffer[100-1])
(24,data)
(25,dest)
(26,8)
(27,100-1)
(28,data)
(29,if (dataBuffer == NULL)
(30,dataBuffer)
(31,myUnion)
(32,100*2-1)
(33,100-1)
(34,data)
(35,NULL)
(36,dest)
(37,100*2-1)
(38,data)
(39,)
(40,myUnion.unionFirst)
(41,1)
(42,NULL)
(43,-1)
(44,char *)
(45,)
(46,myUnion)
(47,100)
(48,myUnion)
(49,data)
(50,100)
(51,100*2)
(52,100)
(53,data)
(54,memset(dest, 'C', 100*2-1)
(55,RET)
(56,unionFirst)
(57,'C')
(58,data = NULL)
(59,dataBuffer[100-1] = '\\\\0')
(60,)
(61,memset(dataBuffer, 'A', 100-1)
(62,printLine(dest)
(63,)
(64,char)
(65,1)
(66,2)
(67,myUnion.unionFirst = data)
(68,sizeof(char)
(69,data = dataBuffer - 8)
(70,dest)
(71,dest[100*2-1] = '\\\\0')
(72,dest[100*2-1])
(73,data)
(74,memset(dataBuffer, \'A\', 100-1)
(75,memset(dest, \'C\', 100*2-1)
(76,100*sizeof(char)
(77,dest)
(78,unionSecond)
(79,2)
(80,exit(-1)
(81,* data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^