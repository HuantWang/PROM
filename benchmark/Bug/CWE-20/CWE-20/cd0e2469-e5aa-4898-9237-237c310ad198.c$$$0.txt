-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_17_bad()
{
    int i,j;
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
91,92
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,73,75,76,78,79,84,86,87,88,92,94,99,100,103,104,107,112,114
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_17_bad(){    int i,j;    wchar_t * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_17_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_17_bad
{    int i,j;    wchar_t * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int i,j;
int i,j;
int
i
i
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(26,16,0)
(3,10,0)
(0,28,0)
(42,16,0)
(21,23,0)
(49,28,0)
(9,28,0)
(50,5,0)
(28,13,0)
(23,28,0)
(30,12,0)
(15,25,0)
(34,38,0)
(41,12,0)
(47,49,0)
(2,16,0)
(33,25,0)
(45,46,0)
(8,24,0)
(19,46,0)
(48,41,0)
(14,0,0)
(18,17,0)
(38,12,0)
(49,13,0)
(1,13,0)
(4,38,0)
(36,16,0)
(11,12,0)
(10,16,0)
(37,0,0)
(40,5,0)
(28,31,0)
(46,17,0)
(46,19,0)
(22,10,0)
(17,46,0)
(31,28,0)
(31,19,0)
(29,31,0)
(19,31,0)
(5,25,0)
(23,43,0)
(24,8,0)
(6,15,0)
(20,25,0)
(39,13,0)
(35,24,0)
(23,10,0)
(31,29,0)
(27,16,0)
(8,32,0)
(21,5,1)
(40,50,1)
(9,38,1)
(6,23,1)
(5,25,1)
(49,28,1)
(31,29,1)
(38,12,1)
(41,12,1)
(14,37,1)
(8,24,1)
(4,34,1)
(45,9,1)
(23,21,1)
(1,8,1)
(35,0,1)
(47,1,1)
(48,49,1)
(44,5,1)
(25,20,1)
(23,28,1)
(1,0,1)
(50,15,1)
(46,17,1)
(15,6,1)
(50,25,1)
(24,35,1)
(41,48,1)
(5,40,1)
(0,14,1)
(31,19,1)
(33,38,1)
(15,25,1)
(11,10,1)
(38,4,1)
(10,22,1)
(12,30,1)
(22,3,1)
(30,11,1)
(49,47,1)
(23,10,1)
(17,18,1)
(20,33,1)
(37,28,1)
(34,12,1)
(28,31,1)
(19,46,1)
(18,45,1)
(34,41,1)
(0,28,1)
(1,38,2)
(28,31,2)
(40,5,2)
(19,38,2)
(23,5,2)
(35,0,2)
(47,38,2)
(5,5,2)
(28,38,2)
(23,10,2)
(18,38,2)
(38,38,2)
(15,25,2)
(15,5,2)
(4,38,2)
(31,19,2)
(46,38,2)
(14,38,2)
(41,12,2)
(9,38,2)
(5,25,2)
(37,38,2)
(45,38,2)
(41,38,2)
(8,24,2)
(8,0,2)
(6,5,2)
(24,0,2)
(19,46,2)
(46,17,2)
(0,28,2)
(34,38,2)
(31,38,2)
(50,5,2)
(21,5,2)
(31,29,2)
(38,12,2)
(49,28,2)
(23,28,2)
(0,38,2)
(49,38,2)
(17,38,2)
(48,38,2)
-----------------------------------
(0,data == NULL)
(1,'\\\\0')
(2,data)
(3,data)
(4,1)
(5,j < 1)
(6,j)
(7,\'\\\\0\')
(8,exit(-1)
(9,data)
(10,data = NULL)
(11,i)
(12,i = 0)
(13,)
(14,NULL)
(15,j++)
(16,)
(17,sizeof(wchar_t)
(18,wchar_t)
(19,malloc(100*sizeof(wchar_t)
(20,0)
(21,data)
(22,NULL)
(23,printWLine(data)
(24,-1)
(25,j = 0)
(26,for(i = 0; i < 1; i++)
(27,i)
(28,data = (wchar_t *)
(29,wchar_t *)
(30,0)
(31,(wchar_t *)
(32,)
(33,j)
(34,i)
(35,1)
(36,for(j = 0; j < 1; j++)
(37,data)
(38,i < 1)
(39,if (data == NULL)
(40,1)
(41,i++)
(42,j)
(43,)
(44,RET)
(45,100)
(46,100*sizeof(wchar_t)
(47,data)
(48,i)
(49,free(data)
(50,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^