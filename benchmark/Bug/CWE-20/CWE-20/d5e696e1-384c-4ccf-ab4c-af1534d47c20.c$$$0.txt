-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(65,23,0)
(27,29,0)
(46,35,0)
(53,54,0)
(32,8,0)
(61,36,0)
(14,32,0)
(54,35,0)
(18,26,0)
(18,33,0)
(2,36,0)
(40,17,0)
(26,51,0)
(18,37,0)
(5,52,0)
(47,11,0)
(37,36,0)
(31,17,0)
(23,65,0)
(13,20,0)
(4,35,0)
(46,52,0)
(49,1,0)
(64,43,0)
(12,3,0)
(34,6,0)
(50,32,0)
(45,66,0)
(33,18,0)
(24,51,0)
(17,36,0)
(0,8,0)
(3,43,0)
(9,61,0)
(61,26,0)
(16,66,0)
(3,54,0)
(44,36,0)
(2,20,0)
(66,11,0)
(11,47,0)
(26,61,0)
(58,29,0)
(54,3,0)
(4,36,0)
(20,1,0)
(62,52,0)
(38,4,0)
(39,11,0)
(46,63,0)
(56,47,0)
(25,65,0)
(57,46,0)
(22,61,0)
(52,3,0)
(32,35,0)
(51,26,0)
(37,18,0)
(47,23,0)
(36,29,0)
(11,66,0)
(19,2,0)
(60,37,0)
(26,18,0)
(28,37,0)
(48,55,0)
(15,63,0)
(11,35,0)
(55,17,0)
(17,55,0)
(52,46,0)
(30,49,0)
(61,35,0)
(59,26,0)
(63,10,0)
(7,2,0)
(65,3,0)
(2,35,0)
(41,65,0)
(29,42,0)
(66,3,0)
(36,4,0)
(23,47,0)
(51,24,1)
(66,45,1)
(59,18,1)
(32,50,1)
(9,22,1)
(45,16,1)
(2,36,1)
(25,41,1)
(56,11,1)
(32,35,1)
(31,36,1)
(3,54,1)
(20,13,1)
(13,2,1)
(18,33,1)
(61,9,1)
(61,35,1)
(60,28,1)
(39,65,1)
(23,47,1)
(30,51,1)
(37,36,1)
(14,32,1)
(26,59,1)
(50,63,1)
(52,5,1)
(52,3,1)
(4,38,1)
(54,35,1)
(12,51,1)
(46,35,1)
(47,11,1)
(55,48,1)
(50,23,1)
(2,35,1)
(16,39,1)
(50,55,1)
(40,31,1)
(44,21,1)
(66,3,1)
(26,18,1)
(17,40,1)
(28,61,1)
(17,36,1)
(57,23,1)
(48,17,1)
(36,4,1)
(65,3,1)
(38,44,1)
(23,65,1)
(50,20,1)
(47,56,1)
(46,52,1)
(62,57,1)
(63,15,1)
(55,17,1)
(5,62,1)
(26,61,1)
(7,49,1)
(2,19,1)
(11,35,1)
(37,60,1)
(54,53,1)
(61,36,1)
(19,7,1)
(53,12,1)
(24,26,1)
(11,66,1)
(65,25,1)
(15,46,1)
(4,35,1)
(22,55,1)
(51,26,1)
(50,21,1)
(49,30,1)
(18,37,1)
(41,3,1)
(44,21,2)
(47,11,2)
(2,36,2)
(16,65,2)
(36,4,2)
(52,3,2)
(51,26,2)
(2,51,2)
(53,51,2)
(7,51,2)
(22,55,2)
(13,51,2)
(9,55,2)
(23,51,2)
(26,55,2)
(32,35,2)
(60,55,2)
(55,17,2)
(55,21,2)
(3,54,2)
(15,23,2)
(14,32,2)
(36,21,2)
(47,65,2)
(46,23,2)
(26,61,2)
(30,51,2)
(49,51,2)
(65,3,2)
(45,65,2)
(17,21,2)
(12,51,2)
(26,18,2)
(37,36,2)
(46,35,2)
(2,35,2)
(51,55,2)
(18,33,2)
(3,51,2)
(24,55,2)
(61,55,2)
(54,51,2)
(56,65,2)
(46,52,2)
(4,35,2)
(62,23,2)
(23,65,2)
(39,65,2)
(11,66,2)
(19,51,2)
(66,65,2)
(41,51,2)
(61,36,2)
(61,35,2)
(17,36,2)
(11,65,2)
(57,23,2)
(66,3,2)
(63,23,2)
(31,21,2)
(40,21,2)
(28,55,2)
(25,51,2)
(20,51,2)
(5,23,2)
(48,21,2)
(54,35,2)
(59,55,2)
(37,55,2)
(18,55,2)
(18,37,2)
(52,23,2)
(65,51,2)
(4,21,2)
(38,21,2)
(11,35,2)
(23,47,2)
-----------------------------------
(0,if(badStatic)
(1,)
(2,data[dataLen])
(3,dataLen = strlen(data)
(4,strlen(data)
(5,1)
(6,)
(7,data)
(8,)
(9,dataLen)
(10,)
(11,data[dataLen-1])
(12,dataLen)
(13,\\\'\\\\0\\\')
(14,RET)
(15,\\\'\\\\0\\\')
(16,dataLen)
(17,100-dataLen)
(18,(int)
(19,dataLen)
(20,data[dataLen] = \\\'\\\\0\\\')
(21,badStatic)
(22,data)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,NULL)
(25,0)
(26,fgets(data+dataLen, (int)
(27,dataLen)
(28,100)
(29,)
(30,"fgets()
(31,100)
(32,return data;)
(33,int)
(34,if (fgets(data+dataLen, (int)
(35,char * data)
(36,dataLen = strlen(data)
(37,100-dataLen)
(38,data)
(39,data)
(40,dataLen)
(41,dataLen)
(42,)
(43,)
(44,dataLen)
(45,1)
(46,data[dataLen-1])
(47,data[dataLen-1] == \\\'\\\\n\\\')
(48,1)
(49,printLine("fgets()
(50,data)
(51,fgets(data+dataLen, (int)
(52,dataLen-1)
(53,data)
(54,strlen(data)
(55,100-dataLen > 1)
(56,\\\'\\\\n\\\')
(57,data)
(58,if (100-dataLen > 1)
(59,stdin)
(60,dataLen)
(61,data+dataLen)
(62,dataLen)
(63,data[dataLen-1] = \\\'\\\\0\\\')
(64,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(65,dataLen > 0)
(66,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^