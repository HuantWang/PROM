-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            SNPRINTF(data, 100, "%s", source);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
92,93
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
107,113
108,109
109,110
109,111
111,112
111,113
113,114
115,116
116,117
116,118
116,119
116,120
117,118
119,120
122,123
122,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
130,132
134,135
135,136
135,137
135,138
135,139
135,140
136,137
138,139
142,143
144,145
145,146
145,147
146,147
148,149
150,151
151,152
151,153
152,153
154,155
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,87,88,93,95,99,101,102,106,110,112,114,118,120,121,123,124,129,131,132,133,137,139,140,141,143,147,149,153,155
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
90,91
90,92
122,123
122,124
126,127
126,128
130,131
130,132
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, "%s", source);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, "%s", source);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, "%s", source);            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, "%s", source);            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(6,43,0)
(30,29,0)
(18,51,0)
(40,41,0)
(77,37,0)
(4,33,0)
(51,24,0)
(51,63,0)
(17,29,0)
(56,61,0)
(49,50,0)
(24,58,0)
(14,73,0)
(53,51,0)
(68,63,0)
(5,28,0)
(32,72,0)
(53,73,0)
(7,51,0)
(1,62,0)
(50,22,0)
(67,9,0)
(39,37,0)
(3,29,0)
(20,40,0)
(65,41,0)
(47,71,0)
(10,40,0)
(28,62,0)
(9,35,0)
(46,22,0)
(44,43,0)
(55,58,0)
(29,73,0)
(43,73,0)
(72,25,0)
(71,48,0)
(45,58,0)
(7,73,0)
(31,24,0)
(37,77,0)
(61,28,0)
(19,43,0)
(76,7,0)
(38,23,0)
(11,22,0)
(42,25,0)
(22,58,0)
(62,20,0)
(23,22,0)
(69,66,0)
(49,37,0)
(64,48,0)
(41,40,0)
(28,22,0)
(2,6,0)
(48,73,0)
(15,61,0)
(72,58,0)
(27,49,0)
(73,24,0)
(71,60,0)
(50,49,0)
(57,77,0)
(37,58,0)
(52,53,0)
(9,67,0)
(43,6,0)
(26,67,0)
(12,29,0)
(60,71,0)
(21,33,0)
(75,50,0)
(33,58,0)
(74,60,0)
(63,51,0)
(62,28,0)
(34,36,0)
(0,5,0)
(62,1,0)
(54,6,0)
(5,22,0)
(66,28,0)
(36,37,0)
(59,60,0)
(25,72,0)
(66,23,0)
(36,5,0)
(70,66,0)
(63,72,0)
(20,62,0)
(29,51,0)
(13,58,0)
(40,20,0)
(8,28,0)
(36,37,1)
(59,74,1)
(27,75,1)
(69,61,1)
(77,57,1)
(64,71,1)
(25,42,1)
(5,28,1)
(15,28,1)
(51,63,1)
(52,7,1)
(19,51,1)
(18,5,1)
(36,34,1)
(33,4,1)
(61,28,1)
(54,2,1)
(12,48,1)
(34,23,1)
(9,67,1)
(4,21,1)
(38,66,1)
(53,51,1)
(41,65,1)
(21,72,1)
(5,0,1)
(75,33,1)
(62,1,1)
(20,40,1)
(66,28,1)
(53,52,1)
(70,69,1)
(76,29,1)
(71,60,1)
(7,51,1)
(63,68,1)
(50,49,1)
(48,64,1)
(2,44,1)
(74,47,1)
(6,54,1)
(10,8,1)
(66,70,1)
(43,6,1)
(30,3,1)
(72,25,1)
(57,39,1)
(7,76,1)
(63,72,1)
(16,53,1)
(61,56,1)
(68,18,1)
(47,43,1)
(3,12,1)
(23,38,1)
(65,10,1)
(37,77,1)
(26,61,1)
(32,37,1)
(28,62,1)
(60,59,1)
(44,19,1)
(8,50,1)
(29,17,1)
(67,26,1)
(62,20,1)
(17,30,1)
(56,15,1)
(0,36,1)
(69,9,1)
(42,32,1)
(49,27,1)
(40,41,1)
(29,51,1)
(49,37,1)
(63,72,2)
(26,61,2)
(62,1,2)
(72,25,2)
(20,40,2)
(40,41,2)
(29,51,2)
(62,20,2)
(36,37,2)
(50,49,2)
(53,51,2)
(67,61,2)
(66,28,2)
(71,60,2)
(61,28,2)
(51,63,2)
(37,77,2)
(28,62,2)
(9,61,2)
(7,51,2)
(43,6,2)
(9,67,2)
(5,28,2)
(49,37,2)
-----------------------------------
(0,data)
(1,char *)
(2,100)
(3,100)
(4,NULL)
(5,*dataPtr1 = data)
(6,100-1)
(7,printLine(data)
(8,data)
(9,exit(-1)
(10,50)
(11,data)
(12,data)
(13,dataPtr2)
(14,source)
(15,data)
(16,RET)
(17,source)
(18,data)
(19,source)
(20,malloc(50*sizeof(char)
(21,data)
(22,)
(23,data[0] = \\\'\\\\0\\\')
(24,)
(25,&data)
(26,1)
(27,dataPtr1)
(28,data = (char *)
(29,SNPRINTF(data, 100, "%s", source)
(30,"%s")
(31,data)
(32,dataPtr2)
(33,data = NULL)
(34,dataPtr1)
(35,)
(36,*dataPtr1)
(37,* *dataPtr1 = &data)
(38,\\\'\\\\0\\\')
(39,dataPtr1)
(40,50*sizeof(char)
(41,sizeof(char)
(42,data)
(43,memset(source, \\\'C\\\', 100-1)
(44,\\\'C\\\')
(45,data)
(46,if (data == NULL)
(47,source)
(48,source[100-1] = \\\'\\\\0\\\')
(49,*dataPtr1)
(50,* data = *dataPtr1)
(51,* data = *dataPtr2)
(52,data)
(53,free(data)
(54,1)
(55,dataPtr1)
(56,NULL)
(57,data)
(58,)
(59,1)
(60,100-1)
(61,data == NULL)
(62,(char *)
(63,*dataPtr2)
(64,\\\'\\\\0\\\')
(65,char)
(66,data[0])
(67,-1)
(68,dataPtr2)
(69,data)
(70,0)
(71,source[100-1])
(72,* *dataPtr2 = &data)
(73,)
(74,100)
(75,data)
(76,data)
(77,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^