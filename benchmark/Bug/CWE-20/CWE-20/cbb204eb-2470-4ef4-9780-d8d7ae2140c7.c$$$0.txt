-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_31_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* wspawnlp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
116,118
116,119
117,118
118,119
118,120
120,121
120,122
120,123
123,124
124,125
126,127
127,128
127,129
129,130
129,131
129,132
132,133
133,134
135,136
136,137
136,138
136,139
136,140
136,141
136,142
136,143
137,138
139,140
141,142
143,144
145,146
147,148
149,150
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,122,125,128,130,131,134,138,140,142,144,146,148,150
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_31_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wspawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_31_bad()
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_31_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wspawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wspawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnlp
_wspawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(34,38,0)
(40,51,0)
(58,65,0)
(33,8,0)
(14,50,0)
(29,0,0)
(55,38,0)
(6,59,0)
(20,38,0)
(4,25,0)
(30,21,0)
(28,0,0)
(9,24,0)
(22,43,0)
(46,47,0)
(50,64,0)
(37,52,0)
(43,24,0)
(7,15,0)
(63,51,0)
(65,51,0)
(18,16,0)
(26,11,0)
(52,64,0)
(25,43,0)
(17,42,0)
(51,52,0)
(53,47,0)
(62,38,0)
(43,5,0)
(21,51,0)
(45,64,0)
(12,16,0)
(50,47,0)
(27,54,0)
(10,40,0)
(54,51,0)
(11,59,0)
(19,38,0)
(16,56,0)
(0,56,0)
(25,54,0)
(32,56,0)
(3,24,0)
(44,40,0)
(48,13,0)
(67,43,0)
(51,65,0)
(31,5,0)
(36,67,0)
(35,56,0)
(15,40,0)
(54,25,0)
(13,48,0)
(38,56,0)
(13,25,0)
(39,38,0)
(16,0,0)
(65,50,0)
(23,52,0)
(24,43,0)
(60,54,0)
(61,43,0)
(21,13,0)
(47,64,0)
(22,8,0)
(56,64,0)
(0,50,0)
(42,25,0)
(66,52,0)
(1,67,0)
(68,22,0)
(25,13,0)
(25,42,0)
(2,64,0)
(54,50,0)
(57,21,0)
(13,21,0)
(40,15,0)
(41,50,0)
(6,11,1)
(54,50,1)
(65,50,1)
(38,20,1)
(18,0,1)
(27,67,1)
(49,38,1)
(57,30,1)
(13,48,1)
(58,63,1)
(4,13,1)
(20,39,1)
(63,50,1)
(10,51,1)
(44,10,1)
(0,50,1)
(60,27,1)
(25,13,1)
(24,3,1)
(16,12,1)
(13,21,1)
(25,54,1)
(34,16,1)
(21,51,1)
(41,14,1)
(12,18,1)
(50,41,1)
(7,40,1)
(67,43,1)
(26,42,1)
(67,36,1)
(47,46,1)
(65,58,1)
(14,47,1)
(46,53,1)
(28,29,1)
(42,17,1)
(22,43,1)
(15,40,1)
(62,55,1)
(29,15,1)
(40,44,1)
(15,7,1)
(30,54,1)
(54,60,1)
(25,4,1)
(40,51,1)
(36,1,1)
(54,51,1)
(17,25,1)
(29,67,1)
(0,28,1)
(68,42,1)
(51,65,1)
(9,61,1)
(21,57,1)
(11,26,1)
(1,43,1)
(55,34,1)
(3,9,1)
(39,19,1)
(22,68,1)
(19,62,1)
(25,43,1)
(50,47,1)
(61,15,1)
(29,22,1)
(16,0,1)
(42,25,1)
(68,6,1)
(43,24,1)
(9,15,2)
(21,67,2)
(3,15,2)
(22,67,2)
(1,15,2)
(43,15,2)
(13,67,2)
(42,25,2)
(0,50,2)
(25,54,2)
(22,43,2)
(68,67,2)
(50,47,2)
(11,42,2)
(67,43,2)
(24,15,2)
(26,42,2)
(13,48,2)
(21,51,2)
(51,65,2)
(42,67,2)
(57,67,2)
(4,67,2)
(67,15,2)
(54,51,2)
(27,67,2)
(6,42,2)
(15,40,2)
(60,67,2)
(43,24,2)
(30,67,2)
(65,50,2)
(54,50,2)
(61,15,2)
(17,67,2)
(25,13,2)
(54,67,2)
(25,43,2)
(25,67,2)
(40,51,2)
(36,15,2)
(13,21,2)
(16,0,2)
-----------------------------------
(0,* dataCopy = data)
(1,pFile)
(2,data)
(3,"r")
(4,pFile)
(5,)
(6,\\\'\\\\0\\\')
(7,1)
(8,)
(9,FILENAME)
(10,100)
(11,printLine("fgetws()
(12,dataCopy)
(13,(int)
(14,data)
(15,100-dataLen > 1)
(16,* data = dataCopy)
(17,NULL)
(18,data)
(19,COMMAND_ARG1)
(20,NULL)
(21,100-dataLen)
(22,fclose(pFile)
(23,pFile)
(24,fopen(FILENAME, "r")
(25,fgetws(data+dataLen, (int)
(26,"fgetws()
(27,data)
(28,data)
(29,dataCopy)
(30,100)
(31,if (pFile != NULL)
(32,dataCopy)
(33,if (fgetws(data+dataLen, (int)
(34,_P_WAIT)
(35,data)
(36,NULL)
(37,if (100-dataLen > 1)
(38,_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(39,COMMAND_ARG3)
(40,100-dataLen)
(41,dataBuffer)
(42,fgetws(data+dataLen, (int)
(43,pFile = fopen(FILENAME, "r")
(44,dataLen)
(45,dataBuffer)
(46,COMMAND_ARG2)
(47,dataBuffer[100] = COMMAND_ARG2)
(48,int)
(49,RET)
(50,data = dataBuffer)
(51,dataLen = wcslen(data)
(52,)
(53,dataBuffer)
(54,data+dataLen)
(55,COMMAND_INT)
(56,)
(57,dataLen)
(58,data)
(59,)
(60,dataLen)
(61,pFile)
(62,COMMAND_INT)
(63,dataLen)
(64,)
(65,wcslen(data)
(66,dataLen)
(67,pFile != NULL)
(68,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^