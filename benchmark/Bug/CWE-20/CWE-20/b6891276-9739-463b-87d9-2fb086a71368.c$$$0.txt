-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink
&data
data
data
-----joern-----
(2,7,0)
(1,34,0)
(70,54,0)
(45,23,0)
(43,23,0)
(22,33,0)
(32,60,0)
(9,21,0)
(29,23,0)
(11,14,0)
(36,66,0)
(7,5,0)
(71,38,0)
(18,34,0)
(41,65,0)
(25,63,0)
(27,17,0)
(61,43,0)
(16,55,0)
(23,14,0)
(40,65,0)
(23,21,0)
(0,58,0)
(51,46,0)
(27,23,0)
(10,29,0)
(5,65,0)
(8,17,0)
(56,14,0)
(63,25,0)
(46,56,0)
(61,66,0)
(68,28,0)
(29,19,0)
(60,11,0)
(31,25,0)
(53,23,0)
(17,24,0)
(64,34,0)
(47,11,0)
(12,61,0)
(34,18,0)
(43,61,0)
(52,49,0)
(45,60,0)
(33,23,0)
(20,11,0)
(62,23,0)
(55,6,0)
(18,5,0)
(49,29,0)
(38,61,0)
(69,25,0)
(34,60,0)
(46,23,0)
(59,45,0)
(30,19,0)
(58,52,0)
(39,18,0)
(38,27,0)
(50,21,0)
(56,46,0)
(52,58,0)
(19,29,0)
(29,49,0)
(67,49,0)
(48,19,0)
(57,63,0)
(19,61,0)
(25,60,0)
(13,45,0)
(18,39,0)
(65,60,0)
(49,52,0)
(65,23,0)
(5,7,0)
(27,38,0)
(54,6,0)
(44,43,0)
(37,14,0)
(58,61,0)
(21,14,0)
(26,27,0)
(60,33,0)
(33,60,0)
(3,38,0)
(42,5,0)
(5,18,0)
(4,58,0)
(65,5,0)
(45,54,0)
(15,14,0)
(10,58,1)
(12,7,1)
(33,22,1)
(30,10,1)
(70,45,1)
(23,21,1)
(33,23,1)
(7,2,1)
(26,52,1)
(65,60,1)
(38,71,1)
(7,5,1)
(53,21,1)
(22,32,1)
(1,64,1)
(69,60,1)
(18,39,1)
(51,17,1)
(49,67,1)
(56,46,1)
(60,33,1)
(46,23,1)
(27,38,1)
(18,34,1)
(54,70,1)
(45,60,1)
(45,59,1)
(49,29,1)
(5,18,1)
(40,41,1)
(4,0,1)
(51,52,1)
(29,19,1)
(59,13,1)
(43,23,1)
(71,3,1)
(64,65,1)
(23,62,1)
(0,61,1)
(65,40,1)
(52,58,1)
(57,25,1)
(21,50,1)
(8,27,1)
(5,65,1)
(32,23,1)
(19,61,1)
(16,7,1)
(5,42,1)
(58,4,1)
(55,16,1)
(63,25,1)
(44,12,1)
(58,61,1)
(34,1,1)
(25,60,1)
(3,26,1)
(19,48,1)
(31,69,1)
(51,54,1)
(38,61,1)
(67,29,1)
(50,9,1)
(65,23,1)
(51,63,1)
(61,43,1)
(46,51,1)
(41,63,1)
(63,57,1)
(42,18,1)
(17,8,1)
(25,31,1)
(43,44,1)
(34,60,1)
(62,53,1)
(29,23,1)
(48,30,1)
(2,5,1)
(27,23,1)
(35,56,1)
(13,55,1)
(52,49,1)
(45,23,1)
(55,7,2)
(67,58,2)
(52,58,2)
(34,60,2)
(41,63,2)
(45,60,2)
(26,52,2)
(27,38,2)
(18,63,2)
(65,60,2)
(49,58,2)
(7,5,2)
(29,58,2)
(18,39,2)
(70,7,2)
(65,23,2)
(71,52,2)
(63,25,2)
(18,34,2)
(0,7,2)
(40,63,2)
(25,60,2)
(61,7,2)
(34,63,2)
(59,7,2)
(3,52,2)
(1,63,2)
(33,23,2)
(16,7,2)
(52,7,2)
(19,61,2)
(17,52,2)
(44,7,2)
(60,33,2)
(52,49,2)
(5,65,2)
(29,23,2)
(8,52,2)
(54,7,2)
(45,23,2)
(61,43,2)
(58,61,2)
(58,7,2)
(5,63,2)
(29,19,2)
(42,63,2)
(49,29,2)
(43,7,2)
(56,46,2)
(4,7,2)
(7,63,2)
(48,58,2)
(19,58,2)
(45,7,2)
(10,58,2)
(43,23,2)
(27,23,2)
(27,52,2)
(38,52,2)
(5,18,2)
(64,63,2)
(30,58,2)
(65,63,2)
(46,23,2)
(23,21,2)
(38,61,2)
(2,63,2)
(12,7,2)
(13,7,2)
-----------------------------------
(0,dataLen)
(1,dataLen)
(2,NULL)
(3,dataLen)
(4,0)
(5,fgets(data+dataLen, (int)
(6,)
(7,fgets(data+dataLen, (int)
(8,\\\'\\\\0\\\')
(9,dataBuffer)
(10,data)
(11,)
(12,dataLen)
(13,data)
(14,)
(15,dataBuffer)
(16,"fgets()
(17,data[dataLen-1] = \\\'\\\\0\\\')
(18,(int)
(19,dataLen-1)
(20,if (100-dataLen > 1)
(21,dataBuffer[100] = COMMAND_ARG2)
(22,data)
(23,data = dataBuffer)
(24,)
(25,100-dataLen)
(26,data)
(27,data[dataLen-1])
(28,)
(29,data[dataLen-1])
(30,dataLen)
(31,dataLen)
(32,dataLen)
(33,strlen(data)
(34,100-dataLen)
(35,RET)
(36,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,data)
(38,dataLen-1)
(39,int)
(40,dataLen)
(41,data)
(42,stdin)
(43,strlen(data)
(44,data)
(45,data[dataLen])
(46,&data)
(47,dataLen)
(48,1)
(49,data[dataLen-1] == \\\'\\\\n\\\')
(50,COMMAND_ARG2)
(51,data)
(52,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,data)
(54,data[dataLen] = \\\'\\\\0\\\')
(55,printLine("fgets()
(56,CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data)
(57,1)
(58,dataLen > 0)
(59,dataLen)
(60,dataLen = strlen(data)
(61,dataLen = strlen(data)
(62,dataBuffer)
(63,100-dataLen > 1)
(64,100)
(65,data+dataLen)
(66,)
(67,\\\'\\\\n\\\')
(68,if (fgets(data+dataLen, (int)
(69,100)
(70,\\\'\\\\0\\\')
(71,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^