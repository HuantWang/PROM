-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_04_bad()
{
    wchar_t * data;
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
54,55
54,56
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
71,72
71,73
71,74
71,75
71,76
72,73
73,74
73,75
75,76
75,77
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
99,100
99,101
99,102
99,103
99,104
100,101
102,103
106,107
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,21,23,26,28,31,32,35,37,38,42,44,47,49,52,53,56,61,63,68,69,70,74,76,78,82,84,85,87,88,93,95,96,97,101,103,104,105,107,111,113
-----computeFrom-----
27,28
27,29
48,49
48,50
59,60
59,61
65,66
65,67
86,87
86,88
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_04_bad(){    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_04_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_04_bad
{    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)ALLOCA(50*sizeof(wchar_t))
(wchar_t *)ALLOCA(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(50*sizeof(wchar_t))
ALLOCA
ALLOCA
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
dataGoodBuffer
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if(STATIC_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(18,13,0)
(13,8,0)
(34,23,0)
(10,0,0)
(3,33,0)
(19,16,0)
(33,6,0)
(15,33,0)
(33,22,0)
(6,0,0)
(2,1,0)
(26,1,0)
(30,18,0)
(6,18,0)
(25,0,0)
(28,0,0)
(4,34,0)
(7,0,0)
(8,13,0)
(27,6,0)
(4,19,0)
(8,29,0)
(19,25,0)
(9,8,0)
(23,34,0)
(20,22,0)
(25,19,0)
(29,8,0)
(34,4,0)
(13,18,0)
(35,34,0)
(18,30,0)
(16,19,0)
(18,6,0)
(21,0,0)
(17,23,0)
(12,29,0)
(31,33,0)
(1,0,0)
(5,25,0)
(11,31,0)
(31,1,0)
(19,4,0)
(14,31,1)
(11,2,1)
(15,3,1)
(13,8,1)
(35,5,1)
(33,15,1)
(19,4,1)
(2,20,1)
(25,19,1)
(9,27,1)
(32,25,1)
(31,33,1)
(19,16,1)
(2,32,1)
(8,29,1)
(31,11,1)
(18,13,1)
(23,17,1)
(12,9,1)
(18,30,1)
(6,18,1)
(3,32,1)
(20,33,1)
(33,6,1)
(17,35,1)
(34,23,1)
(4,34,1)
(29,12,1)
(5,6,1)
(4,34,2)
(6,18,2)
(34,23,2)
(8,29,2)
(13,8,2)
(20,32,2)
(19,4,2)
(15,32,2)
(18,30,2)
(19,16,2)
(3,32,2)
(33,6,2)
(18,13,2)
(33,32,2)
(25,19,2)
(31,33,2)
-----------------------------------
(0,)
(1,)
(2,'\\\\0')
(3,data)
(4,ALLOCA(100*sizeof(wchar_t)
(5,dataGoodBuffer)
(6,* dataBadBuffer = (wchar_t *)
(7,if(STATIC_CONST_TRUE)
(8,50*sizeof(wchar_t)
(9,50)
(10,dataBadBuffer)
(11,data)
(12,wchar_t)
(13,ALLOCA(50*sizeof(wchar_t)
(14,RET)
(15,dataBadBuffer)
(16,wchar_t *)
(17,wchar_t)
(18,(wchar_t *)
(19,(wchar_t *)
(20,\'\\\\0\')
(21,dataGoodBuffer)
(22,)
(23,sizeof(wchar_t)
(24,'\\\\0')
(25,* dataGoodBuffer = (wchar_t *)
(26,source)
(27,dataBadBuffer)
(28,data)
(29,sizeof(wchar_t)
(30,wchar_t *)
(31,printWLine(data)
(32,STATIC_CONST_TRUE)
(33,data = dataBadBuffer)
(34,100*sizeof(wchar_t)
(35,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^