-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strncpy(data, source, 100-1);
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,97,102,104,105,106,110,112,116,118
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
99,100
99,101
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,51,0)
(28,35,0)
(24,3,0)
(3,10,0)
(8,53,0)
(1,61,0)
(53,48,0)
(14,26,0)
(16,48,0)
(50,58,0)
(11,13,0)
(63,56,0)
(7,48,0)
(61,1,0)
(18,9,0)
(30,56,0)
(20,10,0)
(52,19,0)
(38,9,0)
(9,22,0)
(7,3,0)
(27,56,0)
(34,3,0)
(19,58,0)
(35,6,0)
(31,8,0)
(65,48,0)
(23,24,0)
(15,53,0)
(0,19,0)
(39,11,0)
(36,57,0)
(22,16,0)
(21,16,0)
(58,57,0)
(53,57,0)
(53,3,0)
(2,48,0)
(26,14,0)
(13,11,0)
(17,35,0)
(1,57,0)
(45,7,0)
(62,36,0)
(12,13,0)
(24,48,0)
(46,65,0)
(24,57,0)
(58,19,0)
(60,14,0)
(58,3,0)
(47,5,0)
(57,5,0)
(32,36,0)
(33,57,0)
(35,57,0)
(11,37,0)
(27,48,0)
(29,53,0)
(43,3,0)
(64,27,0)
(54,27,0)
(44,10,0)
(57,1,0)
(7,57,0)
(48,10,0)
(55,8,0)
(58,65,0)
(6,5,0)
(1,37,0)
(37,11,0)
(4,6,0)
(56,27,0)
(37,1,0)
(22,9,0)
(59,22,0)
(53,8,0)
(54,6,1)
(52,50,1)
(18,38,1)
(27,56,1)
(53,8,1)
(7,45,1)
(0,52,1)
(64,54,1)
(46,58,1)
(19,0,1)
(62,57,1)
(31,55,1)
(32,62,1)
(1,37,1)
(16,21,1)
(58,3,1)
(63,30,1)
(26,14,1)
(50,53,1)
(7,3,1)
(45,24,1)
(59,27,1)
(22,9,1)
(58,19,1)
(39,33,1)
(17,26,1)
(38,59,1)
(17,36,1)
(25,7,1)
(4,35,1)
(57,1,1)
(43,34,1)
(12,39,1)
(28,17,1)
(53,57,1)
(53,3,1)
(60,36,1)
(9,18,1)
(24,23,1)
(36,57,1)
(15,16,1)
(54,40,1)
(21,22,1)
(8,31,1)
(36,32,1)
(30,64,1)
(35,57,1)
(55,29,1)
(14,60,1)
(24,3,1)
(3,43,1)
(6,4,1)
(65,46,1)
(33,40,1)
(37,11,1)
(7,57,1)
(13,12,1)
(29,15,1)
(1,61,1)
(40,3,1)
(24,57,1)
(35,28,1)
(56,63,1)
(11,13,1)
(58,57,1)
(23,65,1)
(14,36,2)
(11,13,2)
(60,36,2)
(1,40,2)
(4,40,2)
(7,3,2)
(12,40,2)
(17,40,2)
(53,57,2)
(1,37,2)
(6,40,2)
(53,8,2)
(24,3,2)
(57,40,2)
(62,40,2)
(27,56,2)
(57,1,2)
(24,57,2)
(35,57,2)
(58,3,2)
(1,61,2)
(13,40,2)
(58,57,2)
(36,40,2)
(35,40,2)
(53,3,2)
(26,36,2)
(39,40,2)
(32,40,2)
(36,57,2)
(26,14,2)
(33,40,2)
(11,40,2)
(37,40,2)
(7,57,2)
(37,11,2)
(28,40,2)
(58,19,2)
(22,9,2)
-----------------------------------
(0,1)
(1,(char *)
(2,source)
(3,data = NULL)
(4,\'\\\\0\')
(5,)
(6,data[0] = '\\\\0')
(7,free(data)
(8,100-1)
(9,100-1)
(10,)
(11,50*sizeof(char)
(12,char)
(13,sizeof(char)
(14,-1)
(15,data)
(16,source[100-1] = '\\\\0')
(17,data)
(18,1)
(19,100-1)
(20,if(globalTrue)
(21,'\\\\0')
(22,source[100-1])
(23,data)
(24,printLine(data)
(25,RET)
(26,exit(-1)
(27,memset(source, \'C\', 100-1)
(28,0)
(29,source)
(30,100)
(31,1)
(32,NULL)
(33,data)
(34,data)
(35,data[0])
(36,data == NULL)
(37,malloc(50*sizeof(char)
(38,100)
(39,50)
(40,globalTrue)
(41,memset(source, 'C', 100-1)
(42,'\\\\0')
(43,NULL)
(44,data)
(45,data)
(46,'\\\\0')
(47,if (data == NULL)
(48,)
(49,data[0] = \'\\\\0\')
(50,data)
(51,)
(52,100)
(53,strncpy(data, source, 100-1)
(54,source)
(55,100)
(56,100-1)
(57,data = (char *)
(58,data[100-1])
(59,source)
(60,1)
(61,char *)
(62,data)
(63,1)
(64,'C')
(65,data[100-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^