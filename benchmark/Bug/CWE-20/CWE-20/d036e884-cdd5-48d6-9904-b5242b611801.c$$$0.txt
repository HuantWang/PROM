-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
53,54
54,55
54,56
56,57
56,58
56,59
58,59
60,61
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
80,81
81,82
83,84
84,85
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,59,62,67,69,74,75,78,79,82,88,90,93,95,99,102,103,107,109
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
72,73
72,74
76,77
76,78
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02_bad(){    int * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02_bad
{    int * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(6,52,0)
(20,19,0)
(37,42,0)
(15,42,0)
(35,46,0)
(15,31,0)
(53,25,0)
(16,52,0)
(45,43,0)
(52,16,0)
(17,20,0)
(12,30,0)
(31,54,0)
(54,31,0)
(7,42,0)
(11,20,0)
(48,35,0)
(49,54,0)
(0,46,0)
(23,32,0)
(36,50,0)
(44,28,0)
(27,37,0)
(26,5,0)
(28,53,0)
(47,17,0)
(18,32,0)
(52,46,0)
(30,42,0)
(40,36,0)
(24,46,0)
(2,52,0)
(31,15,0)
(4,35,0)
(14,19,0)
(38,50,0)
(21,13,0)
(8,13,0)
(54,43,0)
(1,17,0)
(17,42,0)
(53,28,0)
(39,46,0)
(30,13,0)
(9,17,0)
(35,16,0)
(3,39,0)
(17,9,0)
(33,19,0)
(42,5,0)
(35,20,0)
(50,19,0)
(29,20,0)
(52,36,0)
(15,51,0)
(42,15,0)
(16,22,0)
(13,50,0)
(32,46,0)
(10,37,0)
(30,20,0)
(9,13,0)
(43,54,0)
(51,15,0)
(35,42,0)
(17,47,1)
(37,42,1)
(36,40,1)
(45,49,1)
(40,37,1)
(30,20,1)
(35,20,1)
(32,46,1)
(18,39,1)
(52,46,1)
(2,6,1)
(35,46,1)
(18,46,1)
(27,10,1)
(43,45,1)
(24,0,1)
(39,46,1)
(6,35,1)
(32,23,1)
(53,28,1)
(46,24,1)
(20,11,1)
(52,36,1)
(49,7,1)
(0,36,1)
(15,31,1)
(54,43,1)
(11,29,1)
(44,37,1)
(31,54,1)
(17,20,1)
(9,17,1)
(16,52,1)
(4,48,1)
(3,16,1)
(12,9,1)
(23,18,1)
(47,1,1)
(7,34,1)
(35,42,1)
(1,32,1)
(15,51,1)
(28,44,1)
(40,53,1)
(52,2,1)
(42,15,1)
(30,12,1)
(39,3,1)
(17,42,1)
(41,30,1)
(35,4,1)
(37,27,1)
(10,42,1)
(34,20,1)
(48,32,1)
(40,34,1)
(30,42,1)
(30,42,2)
(49,34,2)
(53,37,2)
(10,34,2)
(16,32,2)
(16,52,2)
(15,31,2)
(9,17,2)
(32,32,2)
(53,28,2)
(45,34,2)
(17,42,2)
(35,20,2)
(54,43,2)
(4,32,2)
(27,34,2)
(35,42,2)
(37,42,2)
(35,32,2)
(54,34,2)
(52,32,2)
(2,32,2)
(15,34,2)
(43,34,2)
(30,20,2)
(42,15,2)
(48,32,2)
(39,46,2)
(17,20,2)
(31,54,2)
(52,36,2)
(18,32,2)
(23,32,2)
(52,46,2)
(3,32,2)
(7,34,2)
(31,34,2)
(42,34,2)
(35,46,2)
(44,37,2)
(15,51,2)
(28,37,2)
(37,34,2)
(6,32,2)
(32,46,2)
(39,32,2)
-----------------------------------
(0,i)
(1,data)
(2,i)
(3,i)
(4,i)
(5,)
(6,source)
(7,data)
(8,for (i = 0; i < 100; i++)
(9,printIntLine(data[0])
(10,data)
(11,NULL)
(12,data)
(13,)
(14,if(1)
(15,(int *)
(16,data[i] = source[i])
(17,data[0])
(18,i)
(19,)
(20,data = NULL)
(21,i)
(22,)
(23,100)
(24,0)
(25,)
(26,if (data == NULL)
(27,NULL)
(28,-1)
(29,data)
(30,free(data)
(31,malloc(50*sizeof(int)
(32,i < 100)
(33,data)
(34,1)
(35,data[i])
(36,source[100] = {0})
(37,data == NULL)
(38,source)
(39,i++)
(40,source)
(41,RET)
(42,data = (int *)
(43,sizeof(int)
(44,1)
(45,int)
(46,i = 0)
(47,0)
(48,data)
(49,50)
(50,)
(51,int *)
(52,source[i])
(53,exit(-1)
(54,50*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^