-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_long_09_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5L;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
55,56
55,57
56,57
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
84,85
86,87
88,89
88,90
89,90
91,92
92,93
93,94
93,95
94,95
96,97
96,98
97,98
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,59,64,65,68,69,72,78,80,81,85,87,90,95,98,99
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
62,63
62,64
66,67
66,68
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_long_09_bad(){    long * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_long_09_bad()
CWE416_Use_After_Free__malloc_free_long_09_bad
{    long * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5L;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5L;            }
data[i] = 5L;
data[i] = 5L
data[i]
data
data
i
i
5L
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLine(data[0]);
printLongLine(data[0])
printLongLine
printLongLine
data[0]
data
data
0
-----joern-----
(15,42,0)
(45,39,0)
(20,36,0)
(30,31,0)
(11,35,0)
(47,44,0)
(34,21,0)
(21,36,0)
(42,1,0)
(14,43,0)
(31,27,0)
(0,41,0)
(48,45,0)
(8,42,0)
(42,41,0)
(6,42,0)
(16,47,0)
(41,0,0)
(23,1,0)
(32,8,0)
(24,5,0)
(47,21,0)
(51,35,0)
(47,42,0)
(37,14,0)
(7,5,0)
(8,1,0)
(44,47,0)
(12,31,0)
(38,35,0)
(17,50,0)
(28,47,0)
(49,21,0)
(2,36,0)
(41,42,0)
(4,51,0)
(40,48,0)
(27,18,0)
(27,31,0)
(10,45,0)
(50,35,0)
(13,15,0)
(43,14,0)
(33,51,0)
(19,15,0)
(18,27,0)
(48,42,0)
(48,35,0)
(44,3,0)
(12,41,0)
(41,12,0)
(5,1,0)
(26,48,0)
(31,12,0)
(43,29,0)
(22,36,0)
(12,31,1)
(9,21,1)
(50,35,1)
(27,18,1)
(46,44,1)
(38,43,1)
(44,47,1)
(48,42,1)
(47,16,1)
(26,40,1)
(27,30,1)
(51,33,1)
(51,35,1)
(35,11,1)
(21,49,1)
(10,48,1)
(32,51,1)
(48,35,1)
(42,41,1)
(47,42,1)
(8,32,1)
(17,45,1)
(41,0,1)
(28,25,1)
(16,28,1)
(4,50,1)
(19,13,1)
(38,15,1)
(25,8,1)
(13,42,1)
(45,10,1)
(6,9,1)
(14,37,1)
(30,6,1)
(40,51,1)
(15,19,1)
(33,4,1)
(31,27,1)
(4,35,1)
(25,9,1)
(46,25,1)
(15,42,1)
(50,17,1)
(11,38,1)
(49,34,1)
(37,15,1)
(48,26,1)
(41,12,1)
(8,42,1)
(43,14,1)
(47,21,1)
(41,12,2)
(15,42,2)
(50,35,2)
(28,25,2)
(8,42,2)
(42,41,2)
(31,27,2)
(33,9,2)
(4,9,2)
(43,14,2)
(14,15,2)
(51,9,2)
(41,0,2)
(51,35,2)
(12,9,2)
(48,51,2)
(40,51,2)
(41,9,2)
(27,18,2)
(38,9,2)
(51,51,2)
(16,25,2)
(48,35,2)
(47,42,2)
(45,51,2)
(44,25,2)
(13,9,2)
(19,9,2)
(42,9,2)
(44,47,2)
(11,9,2)
(47,25,2)
(4,51,2)
(30,9,2)
(26,51,2)
(43,15,2)
(15,9,2)
(31,9,2)
(17,51,2)
(6,9,2)
(48,42,2)
(47,21,2)
(35,9,2)
(10,51,2)
(27,9,2)
(32,9,2)
(8,9,2)
(50,51,2)
(33,51,2)
(37,15,2)
(12,31,2)
-----------------------------------
(0,long *)
(1,)
(2,data)
(3,)
(4,i)
(5,)
(6,data)
(7,i)
(8,free(data)
(9,GLOBAL_CONST_TRUE)
(10,5L)
(11,0)
(12,malloc(100*sizeof(long)
(13,data)
(14,-1)
(15,data == NULL)
(16,0)
(17,i)
(18,long)
(19,NULL)
(20,if(GLOBAL_CONST_TRUE)
(21,data = NULL)
(22,if(GLOBAL_CONST_TRUE)
(23,if (data == NULL)
(24,for(i = 0; i < 100; i++)
(25,GLOBAL_CONST_TRUE)
(26,i)
(27,sizeof(long)
(28,data)
(29,)
(30,100)
(31,100*sizeof(long)
(32,data)
(33,100)
(34,data)
(35,i = 0)
(36,)
(37,1)
(38,i)
(39,)
(40,data)
(41,(long *)
(42,data = (long *)
(43,exit(-1)
(44,printLongLine(data[0])
(45,data[i] = 5L)
(46,RET)
(47,data[0])
(48,data[i])
(49,NULL)
(50,i++)
(51,i < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^