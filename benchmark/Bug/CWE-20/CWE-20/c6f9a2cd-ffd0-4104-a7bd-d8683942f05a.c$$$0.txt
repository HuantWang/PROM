-----label-----
1
-----code-----
int * CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource(int * data)
{
    if(CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,28,32,34,39,41,44
-----computeFrom-----
17,18
17,19
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource(int * data){    if(CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    return data;}
int
* CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource(int * data)
*
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource
int * data
int
* data
*
data
{    if(CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    return data;}
if(CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(8,21,0)
(11,3,0)
(5,7,0)
(0,10,0)
(10,14,0)
(18,19,0)
(1,16,0)
(6,10,0)
(19,1,0)
(9,21,0)
(1,14,0)
(21,14,0)
(21,12,0)
(1,19,0)
(14,1,0)
(14,20,0)
(4,14,0)
(13,3,0)
(13,15,0)
(14,7,0)
(3,13,0)
(10,20,0)
(17,12,0)
(16,1,0)
(21,20,0)
(21,20,1)
(0,6,1)
(21,14,1)
(13,3,1)
(4,2,1)
(9,10,1)
(21,9,1)
(11,10,1)
(10,20,1)
(1,19,1)
(18,4,1)
(9,13,1)
(10,14,1)
(10,0,1)
(14,20,1)
(1,16,1)
(19,18,1)
(6,14,1)
(14,1,1)
(3,11,1)
(9,2,1)
(8,21,1)
(10,20,2)
(14,2,2)
(21,20,2)
(14,1,2)
(11,10,2)
(14,20,2)
(0,2,2)
(21,14,2)
(4,2,2)
(6,2,2)
(8,21,2)
(13,3,2)
(18,2,2)
(1,19,2)
(1,2,2)
(3,10,2)
(19,2,2)
(10,14,2)
(13,10,2)
(10,2,2)
(1,16,2)
-----------------------------------
(0,NULL)
(1,(int *)
(2,CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)
(3,-1)
(4,data)
(5,if (data == NULL)
(6,data)
(7,)
(8,RET)
(9,data)
(10,data == NULL)
(11,1)
(12,)
(13,exit(-1)
(14,data = (int *)
(15,)
(16,int *)
(17,if(CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal)
(18,10)
(19,malloc(10)
(20,int * data)
(21,return data;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^