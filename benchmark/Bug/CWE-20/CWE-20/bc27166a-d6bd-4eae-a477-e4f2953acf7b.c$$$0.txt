-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            memcpy(data, source, (strlen(source) + 1) * sizeof(char));
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
75,76
75,77
78,79
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
89,91
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,58,61,63,64,67,71,73,76,77,80,84,86,88,94,96,97,100,101,105,107,111,113
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
75,76
75,77
89,90
89,91
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad(){    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad
{    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (strlen(source) + 1) * sizeof(char));            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,8,0)
(9,23,0)
(21,16,0)
(37,24,0)
(50,47,0)
(24,13,0)
(4,24,0)
(14,4,0)
(25,48,0)
(0,21,0)
(37,1,0)
(38,8,0)
(34,19,0)
(30,29,0)
(6,50,0)
(16,30,0)
(43,1,0)
(50,29,0)
(31,37,0)
(47,50,0)
(46,47,0)
(1,13,0)
(15,25,0)
(29,50,0)
(19,48,0)
(48,22,0)
(40,19,0)
(48,19,0)
(16,8,0)
(41,16,0)
(25,20,0)
(12,41,0)
(2,24,0)
(30,44,0)
(33,8,0)
(39,9,0)
(48,25,0)
(44,30,0)
(19,1,0)
(19,4,0)
(11,4,0)
(28,38,0)
(18,1,0)
(2,1,0)
(23,9,0)
(20,4,0)
(49,8,0)
(29,30,0)
(19,24,0)
(1,41,0)
(10,22,0)
(5,24,0)
(30,16,0)
(22,48,0)
(7,16,0)
(17,13,0)
(45,20,0)
(32,2,0)
(36,21,0)
(23,26,0)
(42,41,0)
(20,25,0)
(41,13,0)
(3,38,0)
(27,13,0)
(11,1,1)
(1,41,1)
(25,20,1)
(48,22,1)
(16,30,1)
(21,0,1)
(38,3,1)
(39,21,1)
(30,44,1)
(32,37,1)
(41,16,1)
(47,46,1)
(46,6,1)
(0,36,1)
(10,25,1)
(23,9,1)
(19,1,1)
(35,2,1)
(41,12,1)
(6,7,1)
(42,23,1)
(20,45,1)
(40,34,1)
(4,14,1)
(14,11,1)
(48,25,1)
(12,42,1)
(2,32,1)
(20,4,1)
(22,10,1)
(42,21,1)
(29,50,1)
(36,16,1)
(43,41,1)
(7,38,1)
(34,4,1)
(19,48,1)
(37,1,1)
(9,39,1)
(19,4,1)
(15,20,1)
(3,28,1)
(1,18,1)
(45,40,1)
(18,43,1)
(37,31,1)
(31,19,1)
(21,16,1)
(50,47,1)
(2,1,1)
(30,29,1)
(25,15,1)
(37,1,2)
(9,21,2)
(23,9,2)
(19,1,2)
(39,21,2)
(29,50,2)
(1,41,2)
(48,25,2)
(50,47,2)
(19,48,2)
(30,44,2)
(16,30,2)
(23,21,2)
(30,29,2)
(41,16,2)
(25,20,2)
(19,4,2)
(48,22,2)
(2,1,2)
(21,16,2)
(20,4,2)
-----------------------------------
(0,NULL)
(1,* data = dataCopy)
(2,free(data)
(3,NULL)
(4,source[10+1] = SRC_STRING)
(5,source)
(6,10)
(7,data)
(8,)
(9,-1)
(10,char)
(11,source)
(12,data)
(13,)
(14,SRC_STRING)
(15,1)
(16,data = (char *)
(17,dataCopy)
(18,dataCopy)
(19,memcpy(data, source, (strlen(source)
(20,strlen(source)
(21,data == NULL)
(22,sizeof(char)
(23,exit(-1)
(24,)
(25,strlen(source)
(26,)
(27,data)
(28,data)
(29,malloc(10*sizeof(char)
(30,(char *)
(31,data)
(32,data)
(33,data)
(34,data)
(35,RET)
(36,data)
(37,printLine(data)
(38,data = NULL)
(39,1)
(40,source)
(41,* dataCopy = data)
(42,dataCopy)
(43,data)
(44,char *)
(45,source)
(46,char)
(47,sizeof(char)
(48,(strlen(source)
(49,if (data == NULL)
(50,10*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^