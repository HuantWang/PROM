-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,52,56,58,61,62,65,69,71,73,77,79,83,85
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,36,0)
(20,23,0)
(30,25,0)
(6,34,0)
(25,30,0)
(36,26,0)
(28,3,0)
(31,34,0)
(21,32,0)
(11,24,0)
(12,24,0)
(9,24,0)
(30,36,0)
(15,37,0)
(23,10,0)
(27,22,0)
(35,10,0)
(14,10,0)
(0,12,0)
(23,38,0)
(25,3,0)
(1,35,0)
(18,12,0)
(32,21,0)
(5,25,0)
(36,12,0)
(10,34,0)
(38,34,0)
(7,22,0)
(8,38,0)
(0,22,0)
(2,21,0)
(4,37,0)
(35,12,0)
(37,12,0)
(13,0,0)
(36,30,0)
(26,36,0)
(17,0,0)
(35,38,0)
(29,38,0)
(22,10,0)
(0,38,0)
(0,10,0)
(32,16,0)
(23,12,0)
(3,25,0)
(4,15,1)
(23,20,1)
(30,25,1)
(35,38,1)
(36,26,1)
(9,32,1)
(38,29,1)
(35,1,1)
(3,28,1)
(13,17,1)
(22,27,1)
(19,35,1)
(36,30,1)
(0,12,1)
(37,4,1)
(21,2,1)
(18,33,1)
(0,38,1)
(1,23,1)
(15,12,1)
(9,37,1)
(29,8,1)
(27,7,1)
(28,5,1)
(37,12,1)
(2,37,1)
(0,22,1)
(7,33,1)
(23,38,1)
(35,12,1)
(17,22,1)
(12,36,1)
(23,12,1)
(7,9,1)
(25,3,1)
(5,18,1)
(20,0,1)
(0,13,1)
(32,21,1)
(33,38,1)
(25,3,2)
(25,33,2)
(30,33,2)
(37,12,2)
(28,33,2)
(32,37,2)
(36,33,2)
(12,36,2)
(2,37,2)
(15,33,2)
(5,33,2)
(21,37,2)
(30,25,2)
(36,30,2)
(35,38,2)
(0,12,2)
(37,33,2)
(12,33,2)
(0,38,2)
(36,26,2)
(32,21,2)
(23,38,2)
(23,12,2)
(35,12,2)
(3,33,2)
(18,33,2)
(0,22,2)
(4,33,2)
(9,33,2)
-----------------------------------
(0,wcscpy(data, source)
(1,data)
(2,1)
(3,sizeof(wchar_t)
(4,NULL)
(5,10)
(6,data)
(7,source)
(8,data)
(9,break;)
(10,)
(11,if (data == NULL)
(12,data = (wchar_t *)
(13,source)
(14,source)
(15,data)
(16,)
(17,data)
(18,data)
(19,RET)
(20,data)
(21,-1)
(22,source[10+1] = SRC_STRING)
(23,printWLine(data)
(24,)
(25,10*sizeof(wchar_t)
(26,wchar_t *)
(27,SRC_STRING)
(28,wchar_t)
(29,NULL)
(30,malloc(10*sizeof(wchar_t)
(31,while(1)
(32,exit(-1)
(33,1)
(34,)
(35,free(data)
(36,(wchar_t *)
(37,data == NULL)
(38,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^