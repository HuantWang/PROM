-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, wcslen(data), L"%s", data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
77,82
78,79
80,81
82,83
82,84
83,84
85,86
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,84,86,87,89,93,95,99,101
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
SNPRINTF(dest, wcslen(data), L"%s", data);
SNPRINTF(dest, wcslen(data), L"%s", data)
SNPRINTF
SNPRINTF
dest
dest
wcslen(data)
wcslen
wcslen
data
data
L"%s"
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,18,0)
(6,30,0)
(2,4,0)
(5,3,0)
(1,30,0)
(3,1,0)
(24,20,0)
(4,2,0)
(3,17,0)
(12,1,0)
(3,5,0)
(17,3,0)
(2,27,0)
(29,4,0)
(15,18,0)
(26,30,0)
(17,18,0)
(9,8,0)
(28,21,0)
(11,15,0)
(1,3,0)
(20,7,0)
(18,15,0)
(23,7,0)
(25,30,0)
(7,30,0)
(10,1,0)
(21,1,0)
(20,1,0)
(19,10,0)
(10,7,0)
(14,21,0)
(18,17,0)
(19,23,1)
(3,5,1)
(20,1,1)
(4,29,1)
(10,1,1)
(20,24,1)
(17,18,1)
(10,19,1)
(14,28,1)
(15,11,1)
(11,13,1)
(28,1,1)
(24,10,1)
(2,4,1)
(3,17,1)
(23,16,1)
(18,15,1)
(21,14,1)
(0,20,1)
(1,3,1)
(16,2,1)
(16,21,1)
(9,16,1)
(13,12,1)
(29,21,1)
(23,9,1)
(21,1,1)
(17,18,2)
(2,4,2)
(4,21,2)
(1,3,2)
(3,5,2)
(2,21,2)
(18,15,2)
(9,16,2)
(10,1,2)
(20,1,2)
(3,17,2)
(29,21,2)
(21,1,2)
-----------------------------------
(0,RET)
(1,data = (wchar_t *)
(2,exit(-1)
(3,(wchar_t *)
(4,-1)
(5,wchar_t *)
(6,if(staticTrue)
(7,)
(8,)
(9,\\\'\\\\0\\\')
(10,printWLine(data)
(11,wchar_t)
(12,data)
(13,100)
(14,NULL)
(15,sizeof(wchar_t)
(16,staticTrue)
(17,malloc(100*sizeof(wchar_t)
(18,100*sizeof(wchar_t)
(19,data)
(20,free(data)
(21,data == NULL)
(22,\\'\\\\0\\')
(23,"")
(24,data)
(25,data)
(26,if (data == NULL)
(27,)
(28,data)
(29,1)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^