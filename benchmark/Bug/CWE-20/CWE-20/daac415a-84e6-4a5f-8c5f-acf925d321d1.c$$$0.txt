-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_char_09_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_char_09_bad(){    char * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_char_09_bad()
CWE415_Double_Free__malloc_free_char_09_bad
{    char * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(9,28,0)
(23,6,0)
(9,13,0)
(25,10,0)
(14,31,0)
(7,10,0)
(14,18,0)
(23,28,0)
(30,28,0)
(17,32,0)
(8,30,0)
(22,32,0)
(20,28,0)
(3,22,0)
(12,29,0)
(4,10,0)
(13,32,0)
(2,6,0)
(32,13,0)
(24,30,0)
(1,9,0)
(13,9,0)
(15,12,0)
(12,28,0)
(32,22,0)
(28,9,0)
(12,4,0)
(9,1,0)
(27,31,0)
(28,6,0)
(31,14,0)
(21,4,0)
(26,10,0)
(16,4,0)
(5,23,0)
(20,19,1)
(11,23,1)
(23,28,1)
(24,8,1)
(14,31,1)
(30,24,1)
(4,21,1)
(27,30,1)
(21,16,1)
(9,13,1)
(0,11,1)
(17,20,1)
(0,12,1)
(13,32,1)
(19,4,1)
(32,22,1)
(23,5,1)
(28,9,1)
(5,30,1)
(9,1,1)
(3,17,1)
(31,27,1)
(5,14,1)
(15,11,1)
(11,19,1)
(12,15,1)
(22,3,1)
(12,28,1)
(8,28,1)
(30,28,1)
(12,4,1)
(23,28,2)
(5,19,2)
(14,31,2)
(28,9,2)
(14,30,2)
(12,28,2)
(9,13,2)
(9,19,2)
(32,19,2)
(28,19,2)
(12,11,2)
(23,19,2)
(13,32,2)
(32,22,2)
(30,28,2)
(17,19,2)
(24,19,2)
(30,19,2)
(13,19,2)
(8,19,2)
(22,19,2)
(31,30,2)
(9,1,2)
(27,30,2)
(20,19,2)
(3,19,2)
(12,4,2)
(15,11,2)
-----------------------------------
(0,RET)
(1,char *)
(2,if (data == NULL)
(3,char)
(4,data = NULL)
(5,data)
(6,)
(7,if(GLOBAL_CONST_TRUE)
(8,data)
(9,(char *)
(10,)
(11,GLOBAL_CONST_TRUE)
(12,free(data)
(13,malloc(100*sizeof(char)
(14,exit(-1)
(15,data)
(16,data)
(17,100)
(18,)
(19,GLOBAL_CONST_TRUE)
(20,data)
(21,NULL)
(22,sizeof(char)
(23,free(data)
(24,NULL)
(25,if(GLOBAL_CONST_TRUE)
(26,data)
(27,1)
(28,data = (char *)
(29,)
(30,data == NULL)
(31,-1)
(32,100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^