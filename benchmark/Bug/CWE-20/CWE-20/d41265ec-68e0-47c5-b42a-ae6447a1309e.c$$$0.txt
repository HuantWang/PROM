-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
61,68
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
98,99
99,100
99,101
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,97,100,101,106,108,109,110,114,116,120,122
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
96,97
96,98
103,104
103,105
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(39,59,0)
(4,52,0)
(8,52,0)
(55,25,0)
(52,49,0)
(60,0,0)
(38,63,0)
(48,36,0)
(43,22,0)
(20,51,0)
(10,43,0)
(65,46,0)
(53,42,0)
(44,25,0)
(34,20,0)
(29,36,0)
(3,2,0)
(58,22,0)
(2,46,0)
(59,39,0)
(25,33,0)
(21,1,0)
(2,43,0)
(66,44,0)
(1,49,0)
(11,45,0)
(64,0,0)
(31,17,0)
(15,58,0)
(52,59,0)
(47,58,0)
(26,30,0)
(2,58,0)
(63,58,0)
(27,31,0)
(33,43,0)
(27,59,0)
(2,52,0)
(18,8,0)
(28,33,0)
(45,43,0)
(46,2,0)
(57,30,0)
(68,45,0)
(14,58,0)
(42,43,0)
(47,43,0)
(40,2,0)
(50,65,0)
(17,31,0)
(46,65,0)
(24,16,0)
(35,42,0)
(47,52,0)
(25,44,0)
(51,20,0)
(59,52,0)
(54,22,0)
(9,47,0)
(30,42,0)
(42,30,0)
(16,52,0)
(32,22,0)
(6,17,0)
(11,0,0)
(37,31,0)
(63,52,0)
(63,43,0)
(25,52,0)
(16,1,0)
(62,46,0)
(0,11,0)
(25,58,0)
(12,49,0)
(31,27,0)
(59,27,0)
(7,44,0)
(13,11,0)
(5,16,0)
(67,8,0)
(51,19,0)
(60,13,1)
(64,60,1)
(62,40,1)
(57,26,1)
(47,58,1)
(5,51,1)
(5,8,1)
(31,17,1)
(24,5,1)
(2,58,1)
(41,63,1)
(66,55,1)
(38,47,1)
(44,7,1)
(37,4,1)
(34,8,1)
(59,27,1)
(25,52,1)
(21,16,1)
(65,50,1)
(48,58,1)
(1,21,1)
(17,6,1)
(58,14,1)
(28,25,1)
(36,29,1)
(47,52,1)
(45,68,1)
(30,57,1)
(11,0,1)
(0,64,1)
(20,34,1)
(68,11,1)
(35,36,1)
(46,65,1)
(3,45,1)
(2,46,1)
(6,37,1)
(33,28,1)
(50,62,1)
(42,30,1)
(25,44,1)
(63,38,1)
(4,36,1)
(26,53,1)
(53,35,1)
(35,1,1)
(13,42,1)
(8,52,1)
(67,52,1)
(55,2,1)
(9,33,1)
(7,66,1)
(16,52,1)
(47,9,1)
(51,20,1)
(59,39,1)
(16,24,1)
(8,18,1)
(63,52,1)
(29,48,1)
(14,15,1)
(27,31,1)
(52,59,1)
(25,58,1)
(2,52,1)
(40,3,1)
(63,58,1)
(18,67,1)
(59,39,2)
(2,46,2)
(47,58,2)
(24,36,2)
(25,44,2)
(4,36,2)
(42,30,2)
(5,36,2)
(51,8,2)
(2,58,2)
(34,8,2)
(8,52,2)
(17,36,2)
(6,36,2)
(27,36,2)
(27,31,2)
(52,59,2)
(31,36,2)
(47,52,2)
(11,0,2)
(37,36,2)
(1,36,2)
(31,17,2)
(59,36,2)
(25,52,2)
(59,27,2)
(8,36,2)
(63,52,2)
(25,58,2)
(46,65,2)
(18,36,2)
(63,58,2)
(16,52,2)
(20,8,2)
(67,36,2)
(52,36,2)
(21,36,2)
(16,36,2)
(51,20,2)
(2,52,2)
-----------------------------------
(0,100-1)
(1,data[0] = \'\\\\0\')
(2,memcpy(data, source, 100*sizeof(char)
(3,data)
(4,data)
(5,data)
(6,char)
(7,1)
(8,data == NULL)
(9,data)
(10,source)
(11,source[100-1])
(12,if (data == NULL)
(13,source)
(14,NULL)
(15,data)
(16,data[0])
(17,sizeof(char)
(18,NULL)
(19,)
(20,-1)
(21,\'\\\\0\')
(22,)
(23,data[0] = '\\\\0')
(24,0)
(25,data[100-1])
(26,100)
(27,malloc(50*sizeof(char)
(28,'\\\\0')
(29,5)
(30,100-1)
(31,50*sizeof(char)
(32,data)
(33,data[100-1] = '\\\\0')
(34,1)
(35,source)
(36,5==5)
(37,50)
(38,data)
(39,char *)
(40,source)
(41,RET)
(42,memset(source, \'C\', 100-1)
(43,)
(44,100-1)
(45,source[100-1] = '\\\\0')
(46,100*sizeof(char)
(47,printLine(data)
(48,5)
(49,)
(50,char)
(51,exit(-1)
(52,data = (char *)
(53,'C')
(54,if(5==5)
(55,data)
(56,memset(source, 'C', 100-1)
(57,1)
(58,data = NULL)
(59,(char *)
(60,100)
(61,'\\\\0')
(62,100)
(63,free(data)
(64,1)
(65,sizeof(char)
(66,100)
(67,data)
(68,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^