-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16_bad()
{
    while(1)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printWLine((wchar_t *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid->charFirst);
            printWLine((wchar_t *)structCharVoid->voidSecond);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
28,29
28,30
29,30
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
52,54
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
71,72
72,73
72,74
72,75
72,76
73,74
75,76
75,77
76,77
79,80
81,82
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
96,97
97,98
98,99
98,100
99,100
102,103
103,104
103,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
115,116
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
125,127
126,127
126,128
128,129
130,131
130,132
131,132
-----nextToken-----
2,4,7,13,15,16,21,23,26,30,31,35,37,42,44,49,50,53,55,57,61,64,66,69,70,74,77,78,80,85,91,92,100,101,104,105,106,107,111,114,116,119,120,124,127,129,132,133,134
-----computeFrom-----
33,34
33,35
46,47
46,48
87,88
87,89
93,94
93,95
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16_bad(){    while(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }        break;    }}
void
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16_bad()
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16_bad
{    while(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }        break;    }}
while(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }        break;    }
1
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }        break;    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))
sizeof(structCharVoid->charFirst)/sizeof(wchar_t)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid->charFirst);
printWLine((wchar_t *)structCharVoid->charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid->charFirst
wchar_t *
wchar_t
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
break;
-----joern-----
(39,57,0)
(1,38,0)
(13,30,0)
(16,57,0)
(52,50,0)
(36,52,0)
(8,57,0)
(55,11,0)
(30,43,0)
(26,38,0)
(38,1,0)
(42,52,0)
(20,11,0)
(57,16,0)
(51,34,0)
(32,23,0)
(19,11,0)
(10,39,0)
(7,20,0)
(33,35,0)
(29,30,0)
(8,36,0)
(23,17,0)
(9,30,0)
(18,33,0)
(48,1,0)
(15,13,0)
(36,30,0)
(37,36,0)
(15,3,0)
(20,7,0)
(27,6,0)
(26,6,0)
(50,52,0)
(44,28,0)
(47,28,0)
(4,30,0)
(21,57,0)
(12,16,0)
(0,30,0)
(17,23,0)
(39,36,0)
(8,14,0)
(14,8,0)
(11,57,0)
(16,17,0)
(2,37,0)
(11,20,0)
(13,15,0)
(57,30,0)
(16,12,0)
(6,26,0)
(28,57,0)
(45,43,0)
(14,31,0)
(17,16,0)
(31,14,0)
(39,15,0)
(24,39,0)
(1,57,0)
(22,8,0)
(46,37,0)
(40,18,0)
(33,18,0)
(38,30,0)
(54,8,0)
(15,39,0)
(38,26,0)
(37,57,0)
(6,57,0)
(14,29,0)
(41,1,0)
(3,15,0)
(49,30,0)
(29,14,0)
(56,38,0)
(4,20,0)
(20,4,0)
(52,36,0)
(21,5,1)
(52,42,1)
(8,36,1)
(10,4,1)
(41,48,1)
(11,55,1)
(32,21,1)
(1,41,1)
(49,38,1)
(52,50,1)
(45,13,1)
(39,24,1)
(13,15,1)
(19,49,1)
(8,57,1)
(15,3,1)
(6,27,1)
(6,57,1)
(24,10,1)
(44,57,1)
(22,36,1)
(28,47,1)
(16,17,1)
(23,32,1)
(40,28,1)
(15,39,1)
(16,12,1)
(42,37,1)
(33,18,1)
(36,52,1)
(27,56,1)
(14,31,1)
(25,5,1)
(48,29,1)
(20,7,1)
(18,40,1)
(25,45,1)
(1,57,1)
(46,2,1)
(14,8,1)
(37,46,1)
(8,54,1)
(57,16,1)
(28,57,1)
(56,1,1)
(39,36,1)
(4,20,1)
(47,44,1)
(20,11,1)
(39,57,1)
(38,1,1)
(17,23,1)
(29,14,1)
(38,26,1)
(11,57,1)
(2,28,1)
(2,33,1)
(26,6,1)
(54,22,1)
(37,57,1)
(55,19,1)
(11,57,2)
(16,12,2)
(6,57,2)
(2,5,2)
(14,31,2)
(33,28,2)
(20,11,2)
(38,5,2)
(39,36,2)
(4,20,2)
(15,5,2)
(42,5,2)
(29,14,2)
(14,5,2)
(57,16,2)
(41,5,2)
(24,5,2)
(8,5,2)
(38,26,2)
(16,5,2)
(17,5,2)
(54,5,2)
(49,5,2)
(40,28,2)
(20,5,2)
(52,5,2)
(57,5,2)
(36,5,2)
(13,5,2)
(37,5,2)
(18,28,2)
(6,5,2)
(46,5,2)
(26,6,2)
(26,5,2)
(20,7,2)
(4,5,2)
(48,5,2)
(10,5,2)
(23,5,2)
(27,5,2)
(33,18,2)
(8,57,2)
(47,5,2)
(32,5,2)
(52,50,2)
(15,3,2)
(36,52,2)
(29,5,2)
(1,5,2)
(55,5,2)
(21,5,2)
(39,5,2)
(28,5,2)
(17,23,2)
(56,5,2)
(39,57,2)
(11,5,2)
(45,5,2)
(14,8,2)
(8,36,2)
(38,1,2)
(44,5,2)
(16,17,2)
(37,57,2)
(28,57,2)
(22,5,2)
(15,39,2)
(13,15,2)
(1,57,2)
(19,5,2)
-----------------------------------
(0,structCharVoid)
(1,structCharVoid->charFirst)
(2,structCharVoid)
(3,wchar_t *)
(4,printWLine((wchar_t *)
(5,1)
(6,*structCharVoid)
(7,wchar_t *)
(8,structCharVoid->voidSecond)
(9,if (structCharVoid == NULL)
(10,structCharVoid)
(11,structCharVoid->charFirst)
(12,charVoid *)
(13,printWLine((wchar_t *)
(14,(wchar_t *)
(15,(wchar_t *)
(16,(charVoid *)
(17,malloc(sizeof(charVoid)
(18,-1)
(19,structCharVoid)
(20,(wchar_t *)
(21,structCharVoid)
(22,structCharVoid)
(23,sizeof(charVoid)
(24,voidSecond)
(25,RET)
(26,sizeof(*structCharVoid)
(27,structCharVoid)
(28,structCharVoid == NULL)
(29,printWLine((wchar_t *)
(30,)
(31,wchar_t *)
(32,charVoid)
(33,exit(-1)
(34,)
(35,)
(36,structCharVoid->voidSecond = (void *)
(37,structCharVoid->voidSecond)
(38,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(39,structCharVoid->voidSecond)
(40,1)
(41,charFirst)
(42,SRC_STR)
(43,)
(44,structCharVoid)
(45,break;)
(46,voidSecond)
(47,NULL)
(48,structCharVoid)
(49,'\\\\0')
(50,void *)
(51,while(1)
(52,(void *)
(53,\'\\\\0\')
(54,voidSecond)
(55,charFirst)
(56,SRC_STR)
(57,* structCharVoid = (charVoid *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^