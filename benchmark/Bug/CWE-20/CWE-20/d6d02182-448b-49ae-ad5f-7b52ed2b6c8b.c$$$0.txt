-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int_04_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int_04_bad(){    int * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int_04_bad()
CWE415_Double_Free__malloc_free_int_04_bad
{    int * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,20,0)
(10,18,0)
(24,9,0)
(7,12,0)
(26,20,0)
(21,20,0)
(5,16,0)
(28,11,0)
(2,25,0)
(25,2,0)
(18,0,0)
(9,7,0)
(32,25,0)
(23,0,0)
(11,2,0)
(17,0,0)
(23,19,0)
(8,18,0)
(3,5,0)
(31,19,0)
(14,16,0)
(27,20,0)
(11,28,0)
(22,23,0)
(2,11,0)
(1,11,0)
(5,0,0)
(0,25,0)
(29,19,0)
(0,16,0)
(7,9,0)
(25,32,0)
(25,0,0)
(4,28,0)
(23,30,0)
(7,9,1)
(10,0,1)
(3,7,1)
(25,2,1)
(28,4,1)
(0,25,1)
(19,31,1)
(13,6,1)
(5,3,1)
(24,18,1)
(31,29,1)
(22,6,1)
(11,28,1)
(23,19,1)
(18,0,1)
(1,17,1)
(23,22,1)
(23,0,1)
(6,5,1)
(3,18,1)
(8,10,1)
(6,15,1)
(17,15,1)
(4,1,1)
(9,24,1)
(13,23,1)
(2,11,1)
(25,32,1)
(15,19,1)
(18,8,1)
(5,0,1)
(2,15,2)
(23,19,2)
(23,6,2)
(0,15,2)
(25,15,2)
(10,15,2)
(7,18,2)
(23,0,2)
(11,28,2)
(0,25,2)
(18,0,2)
(22,6,2)
(17,15,2)
(5,15,2)
(24,18,2)
(3,15,2)
(9,18,2)
(25,32,2)
(7,9,2)
(8,15,2)
(1,15,2)
(4,15,2)
(11,15,2)
(28,15,2)
(25,2,2)
(18,15,2)
(5,0,2)
(2,11,2)
-----------------------------------
(0,data = (int *)
(1,100)
(2,malloc(100*sizeof(int)
(3,data)
(4,int)
(5,free(data)
(6,STATIC_CONST_TRUE)
(7,exit(-1)
(8,NULL)
(9,-1)
(10,data)
(11,100*sizeof(int)
(12,)
(13,RET)
(14,if (data == NULL)
(15,STATIC_CONST_TRUE)
(16,)
(17,data)
(18,data == NULL)
(19,data = NULL)
(20,)
(21,if(STATIC_CONST_TRUE)
(22,data)
(23,free(data)
(24,1)
(25,(int *)
(26,data)
(27,if(STATIC_CONST_TRUE)
(28,sizeof(int)
(29,data)
(30,)
(31,NULL)
(32,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^