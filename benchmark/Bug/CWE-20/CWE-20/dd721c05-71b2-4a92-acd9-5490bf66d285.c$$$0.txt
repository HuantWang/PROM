-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_53_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink
data
data
-----joern-----
(13,36,0)
(47,59,0)
(65,56,0)
(63,6,0)
(11,36,0)
(6,69,0)
(68,55,0)
(23,11,0)
(40,18,0)
(45,70,0)
(69,26,0)
(0,36,0)
(25,36,0)
(4,29,0)
(9,53,0)
(39,50,0)
(29,4,0)
(70,25,0)
(63,60,0)
(70,7,0)
(59,11,0)
(42,36,0)
(48,53,0)
(46,56,0)
(58,13,0)
(53,48,0)
(8,69,0)
(25,70,0)
(12,55,0)
(10,29,0)
(59,26,0)
(29,17,0)
(26,55,0)
(26,56,0)
(33,54,0)
(11,59,0)
(20,17,0)
(36,19,0)
(36,13,0)
(1,17,0)
(6,63,0)
(37,26,0)
(57,55,0)
(60,63,0)
(51,11,0)
(56,55,0)
(17,66,0)
(66,55,0)
(15,4,0)
(54,41,0)
(63,52,0)
(31,66,0)
(52,63,0)
(13,26,0)
(2,25,0)
(20,54,0)
(14,20,0)
(69,17,0)
(69,6,0)
(53,59,0)
(70,26,0)
(67,7,0)
(16,12,0)
(17,1,0)
(5,6,0)
(12,26,0)
(50,41,0)
(35,20,0)
(21,60,0)
(20,26,0)
(43,1,0)
(24,66,0)
(6,18,0)
(44,0,0)
(0,48,0)
(30,17,0)
(1,26,0)
(62,19,0)
(28,69,0)
(60,17,0)
(38,26,0)
(59,53,0)
(18,6,0)
(7,32,0)
(3,0,0)
(61,25,0)
(49,60,0)
(48,0,0)
(27,29,0)
(64,22,0)
(18,40,1)
(48,53,1)
(53,59,1)
(21,69,1)
(54,33,1)
(50,39,1)
(60,17,1)
(26,37,1)
(10,27,1)
(63,60,1)
(8,4,1)
(12,26,1)
(4,15,1)
(48,0,1)
(60,49,1)
(20,17,1)
(16,7,1)
(56,65,1)
(11,36,1)
(40,6,1)
(1,26,1)
(34,12,1)
(20,26,1)
(25,2,1)
(70,25,1)
(28,8,1)
(14,35,1)
(6,5,1)
(37,38,1)
(13,26,1)
(51,47,1)
(6,63,1)
(61,45,1)
(20,14,1)
(36,13,1)
(5,63,1)
(12,16,1)
(29,17,1)
(58,42,1)
(29,10,1)
(9,59,1)
(4,29,1)
(23,51,1)
(16,54,1)
(43,30,1)
(2,61,1)
(25,36,1)
(39,18,1)
(69,28,1)
(70,26,1)
(7,67,1)
(33,20,1)
(15,29,1)
(59,26,1)
(0,36,1)
(45,48,1)
(18,6,1)
(53,9,1)
(44,36,1)
(27,17,1)
(3,44,1)
(35,50,1)
(1,43,1)
(13,58,1)
(47,0,1)
(67,70,1)
(69,17,1)
(59,11,1)
(16,48,1)
(42,18,1)
(38,56,1)
(0,3,1)
(17,1,1)
(16,4,1)
(49,21,1)
(65,46,1)
(26,56,1)
(69,26,1)
(11,23,1)
(6,69,1)
(63,52,1)
(30,26,1)
(0,36,2)
(39,18,2)
(70,48,2)
(6,69,2)
(21,4,2)
(60,4,2)
(1,26,2)
(33,18,2)
(3,18,2)
(5,4,2)
(69,26,2)
(53,0,2)
(23,0,2)
(2,48,2)
(59,26,2)
(51,0,2)
(44,18,2)
(59,0,2)
(36,18,2)
(42,18,2)
(60,17,2)
(17,1,2)
(20,26,2)
(20,18,2)
(63,52,2)
(40,4,2)
(8,4,2)
(11,0,2)
(59,11,2)
(49,4,2)
(54,18,2)
(20,17,2)
(50,18,2)
(26,56,2)
(47,0,2)
(25,36,2)
(69,17,2)
(48,53,2)
(13,18,2)
(14,18,2)
(18,4,2)
(7,48,2)
(61,48,2)
(11,36,2)
(4,29,2)
(63,4,2)
(18,6,2)
(6,4,2)
(63,60,2)
(70,25,2)
(48,18,2)
(6,63,2)
(12,26,2)
(48,0,2)
(70,26,2)
(53,59,2)
(67,48,2)
(9,0,2)
(28,4,2)
(45,48,2)
(69,4,2)
(36,13,2)
(25,48,2)
(35,18,2)
(13,26,2)
(0,18,2)
(58,18,2)
(29,17,2)
-----------------------------------
(0,dataLen > 0)
(1,strlen(data)
(2,1)
(3,0)
(4,100-dataLen > 1)
(5,stdin)
(6,fgets(data+dataLen, (int)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,data)
(9,\\\'\\\\n\\\')
(10,dataLen)
(11,dataLen-1)
(12,CWE78_OS_Command_Injection__char_console_w32_spawnv_53b_badSink(data)
(13,strlen(data)
(14,dataLen)
(15,1)
(16,data)
(17,dataLen = strlen(data)
(18,fgets(data+dataLen, (int)
(19,)
(20,data[dataLen])
(21,100)
(22,)
(23,1)
(24,dataLen)
(25,dataLen-1)
(26,data = dataBuffer)
(27,100)
(28,dataLen)
(29,100-dataLen)
(30,dataLen)
(31,if (100-dataLen > 1)
(32,)
(33,\\\'\\\\0\\\')
(34,RET)
(35,data)
(36,dataLen = strlen(data)
(37,dataBuffer)
(38,data)
(39,"fgets()
(40,NULL)
(41,)
(42,dataLen)
(43,data)
(44,dataLen)
(45,data)
(46,dataBuffer)
(47,data)
(48,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,dataLen)
(50,printLine("fgets()
(51,dataLen)
(52,int)
(53,data[dataLen-1] == \\\'\\\\n\\\')
(54,data[dataLen] = \\\'\\\\0\\\')
(55,)
(56,dataBuffer[100] = COMMAND_ARG2)
(57,data)
(58,data)
(59,data[dataLen-1])
(60,100-dataLen)
(61,dataLen)
(62,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(63,(int)
(64,if (fgets(data+dataLen, (int)
(65,COMMAND_ARG2)
(66,)
(67,\\\'\\\\0\\\')
(68,dataBuffer)
(69,data+dataLen)
(70,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^