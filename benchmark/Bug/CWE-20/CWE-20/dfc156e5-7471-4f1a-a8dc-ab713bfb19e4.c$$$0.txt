-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
84,85
84,86
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
memcpy(dest, data, wcslen(data)*sizeof(wchar_t))
memcpy
memcpy
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(23,30,0)
(17,38,0)
(3,5,0)
(36,0,0)
(2,0,0)
(6,18,0)
(16,25,0)
(35,20,0)
(14,12,0)
(8,3,0)
(39,12,0)
(9,1,0)
(22,12,0)
(26,20,0)
(5,30,0)
(29,11,0)
(15,12,0)
(18,6,0)
(13,39,0)
(37,25,0)
(34,29,0)
(11,6,0)
(5,0,0)
(30,5,0)
(30,37,0)
(20,37,0)
(9,38,0)
(12,25,0)
(5,3,0)
(0,5,0)
(32,18,0)
(39,37,0)
(7,31,0)
(37,29,0)
(33,25,0)
(22,37,0)
(27,6,0)
(6,11,0)
(0,12,0)
(10,37,0)
(29,37,0)
(11,29,0)
(0,37,0)
(38,9,0)
(4,25,0)
(29,34,0)
(21,22,0)
(24,9,1)
(8,30,1)
(29,34,1)
(7,24,1)
(20,37,1)
(17,20,1)
(5,30,1)
(39,13,1)
(30,37,1)
(15,24,1)
(29,11,1)
(26,35,1)
(36,15,1)
(15,7,1)
(39,37,1)
(38,17,1)
(18,32,1)
(32,27,1)
(28,39,1)
(23,2,1)
(0,37,1)
(35,37,1)
(11,6,1)
(9,38,1)
(22,37,1)
(6,18,1)
(0,5,1)
(37,29,1)
(27,10,1)
(24,20,1)
(14,0,1)
(5,3,1)
(2,36,1)
(20,26,1)
(30,23,1)
(3,8,1)
(13,22,1)
(21,14,1)
(22,21,1)
(22,37,2)
(9,38,2)
(7,24,2)
(39,37,2)
(9,20,2)
(11,6,2)
(37,29,2)
(6,18,2)
(29,34,2)
(17,20,2)
(5,30,2)
(0,37,2)
(38,20,2)
(0,5,2)
(29,11,2)
(30,37,2)
(20,37,2)
(5,3,2)
-----------------------------------
(0,memcpy(dest, data, wcslen(data)
(1,)
(2,data)
(3,sizeof(wchar_t)
(4,if(GLOBAL_CONST_TRUE)
(5,wcslen(data)
(6,100*sizeof(wchar_t)
(7,\\'\\\\0\\')
(8,wchar_t)
(9,exit(-1)
(10,data)
(11,malloc(100*sizeof(wchar_t)
(12,)
(13,data)
(14,\\\'\\\\0\\\')
(15,"")
(16,if (data == NULL)
(17,1)
(18,sizeof(wchar_t)
(19,\\\'\\\\0\\\')
(20,data == NULL)
(21,data)
(22,printWLine(data)
(23,data)
(24,GLOBAL_CONST_TRUE)
(25,)
(26,NULL)
(27,100)
(28,RET)
(29,(wchar_t *)
(30,wcslen(data)
(31,)
(32,wchar_t)
(33,data)
(34,wchar_t *)
(35,data)
(36,dest)
(37,data = (wchar_t *)
(38,-1)
(39,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^