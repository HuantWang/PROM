-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad()
{
    char * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
36,37
36,38
36,39
38,39
39,40
39,41
42,43
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
51,52
53,54
53,55
54,55
55,56
55,57
56,57
56,58
57,58
59,60
62,63
63,64
63,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,40,41,44,48,50,52,58,60,61,64,65,69,71,75,77
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
39,40
39,41
53,54
53,55
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad(){    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad
{    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(28,17,0)
(23,24,0)
(20,0,0)
(25,29,0)
(3,12,0)
(0,17,0)
(15,29,0)
(0,12,0)
(11,7,0)
(6,17,0)
(12,8,0)
(27,6,0)
(22,6,0)
(13,17,0)
(7,12,0)
(26,8,0)
(27,4,0)
(17,8,0)
(28,12,0)
(21,2,0)
(29,8,0)
(0,6,0)
(18,26,0)
(4,20,0)
(2,17,0)
(4,27,0)
(20,24,0)
(14,8,0)
(24,20,0)
(9,26,0)
(12,7,0)
(0,20,0)
(30,28,0)
(7,29,0)
(19,27,0)
(10,6,0)
(1,0,0)
(20,4,0)
(2,12,0)
(5,4,0)
(31,0,0)
(16,2,1)
(3,26,1)
(19,31,1)
(26,9,1)
(12,7,1)
(20,24,1)
(0,20,1)
(7,11,1)
(0,6,1)
(24,23,1)
(31,1,1)
(7,29,1)
(22,12,1)
(29,25,1)
(21,28,1)
(6,10,1)
(5,27,1)
(1,6,1)
(11,3,1)
(27,6,1)
(28,30,1)
(4,27,1)
(20,4,1)
(2,21,1)
(30,0,1)
(28,12,1)
(2,12,1)
(4,5,1)
(27,19,1)
(10,22,1)
(18,29,1)
(0,12,1)
(9,18,1)
(23,4,1)
(25,15,1)
(0,20,2)
(27,6,2)
(0,6,2)
(7,29,2)
(12,7,2)
(2,12,2)
(4,27,2)
(20,4,2)
(0,12,2)
(20,24,2)
(28,12,2)
-----------------------------------
(0,memcpy(data, source, (strlen(source)
(1,data)
(2,free(data)
(3,data)
(4,strlen(source)
(5,1)
(6,source[10+1] = SRC_STRING)
(7,badSource(data)
(8,)
(9,1)
(10,SRC_STRING)
(11,data)
(12,data = badSource(data)
(13,source)
(14,data)
(15,data)
(16,RET)
(17,)
(18,badStatic)
(19,source)
(20,(strlen(source)
(21,data)
(22,source)
(23,char)
(24,sizeof(char)
(25,NULL)
(26,badStatic = 1)
(27,strlen(source)
(28,printLine(data)
(29,data = NULL)
(30,data)
(31,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^