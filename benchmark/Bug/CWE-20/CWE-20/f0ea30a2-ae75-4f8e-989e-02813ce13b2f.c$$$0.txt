-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_bad()
{
    int i;
    double * data;
    /* Initialize data */
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (double *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        *data = 1.7E300;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printDoubleLine(*data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
36,38
36,39
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
50,51
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
69,70
72,73
73,74
73,75
74,75
76,77
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,13,15,16,20,22,27,28,31,32,35,40,43,45,48,52,56,58,63,65,70,71,75,78,82,84
-----computeFrom-----
18,19
18,20
25,26
25,27
29,30
29,31
38,39
38,40
54,55
54,56
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_bad(){    int i;    double * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_bad
{    int i;    double * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
int i;
int i;
int
i
i
double * data;
double * data;
double
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
data = (double *)malloc(sizeof(data));
data = (double *)malloc(sizeof(data))
data
data
(double *)malloc(sizeof(data))
double *
double
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 1.7E300;
*data = 1.7E300
*data
data
data
1.7E300
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(38,33,0)
(19,6,0)
(16,4,0)
(17,4,0)
(40,23,0)
(36,26,0)
(30,5,0)
(29,28,0)
(32,23,0)
(1,34,0)
(35,17,0)
(4,34,0)
(4,29,0)
(18,23,0)
(7,5,0)
(22,33,0)
(16,2,0)
(15,2,0)
(35,29,0)
(5,4,0)
(27,36,0)
(20,39,0)
(10,16,0)
(14,4,0)
(14,39,0)
(21,23,0)
(13,18,0)
(39,34,0)
(11,2,0)
(5,39,0)
(26,12,0)
(28,29,0)
(5,30,0)
(17,35,0)
(29,4,0)
(9,4,0)
(25,6,0)
(29,35,0)
(24,17,0)
(6,4,0)
(30,2,0)
(0,40,0)
(16,33,0)
(33,2,0)
(5,33,0)
(31,2,0)
(26,36,0)
(8,40,0)
(17,33,0)
(37,14,0)
(3,16,1)
(30,5,1)
(17,4,1)
(40,23,1)
(25,4,1)
(29,35,1)
(37,6,1)
(17,33,1)
(5,39,1)
(37,26,1)
(24,9,1)
(18,13,1)
(6,4,1)
(16,4,1)
(26,36,1)
(16,33,1)
(5,4,1)
(9,40,1)
(32,21,1)
(16,10,1)
(4,29,1)
(10,30,1)
(6,19,1)
(18,23,1)
(5,33,1)
(17,24,1)
(27,6,1)
(14,4,1)
(36,27,1)
(35,17,1)
(29,28,1)
(0,8,1)
(5,7,1)
(38,22,1)
(39,20,1)
(14,37,1)
(13,39,1)
(7,40,1)
(20,14,1)
(8,18,1)
(40,0,1)
(19,25,1)
(33,38,1)
(23,32,1)
(8,23,1)
(21,33,1)
(39,40,2)
(13,40,2)
(27,6,2)
(16,33,2)
(37,40,2)
(29,35,2)
(9,40,2)
(5,33,2)
(6,40,2)
(24,40,2)
(40,40,2)
(5,4,2)
(18,40,2)
(29,28,2)
(5,39,2)
(26,36,2)
(6,4,2)
(35,17,2)
(35,40,2)
(26,6,2)
(36,6,2)
(14,4,2)
(17,4,2)
(20,40,2)
(17,40,2)
(4,40,2)
(4,29,2)
(8,40,2)
(25,40,2)
(40,23,2)
(0,40,2)
(29,40,2)
(17,33,2)
(30,5,2)
(16,4,2)
(19,40,2)
(14,40,2)
(18,23,2)
-----------------------------------
(0,1)
(1,if (data == NULL)
(2,)
(3,RET)
(4,data = (double *)
(5,*data)
(6,data == NULL)
(7,data)
(8,i)
(9,data)
(10,data)
(11,i)
(12,)
(13,i)
(14,*data)
(15,for(i = 0; i < 1; i++)
(16,free(data)
(17,sizeof(data)
(18,i++)
(19,NULL)
(20,1.7E300)
(21,i)
(22,data)
(23,i = 0)
(24,data)
(25,data)
(26,exit(-1)
(27,1)
(28,double *)
(29,(double *)
(30,printDoubleLine(*data)
(31,data)
(32,0)
(33,data = NULL)
(34,)
(35,malloc(sizeof(data)
(36,-1)
(37,data)
(38,NULL)
(39,*data = 1.7E300)
(40,i < 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^