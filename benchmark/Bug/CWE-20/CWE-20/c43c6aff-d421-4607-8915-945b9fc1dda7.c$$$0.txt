-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcscat(dest, data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
80,81
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,89,91,95,97
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcscat(dest, data);
wcscat(dest, data)
wcscat
wcscat
dest
dest
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,1,0)
(13,18,0)
(17,31,0)
(20,17,0)
(5,24,0)
(28,14,0)
(29,1,0)
(31,1,0)
(9,26,0)
(3,31,0)
(11,3,0)
(26,5,0)
(30,33,0)
(32,2,0)
(6,1,0)
(8,33,0)
(34,14,0)
(3,6,0)
(33,19,0)
(33,30,0)
(35,15,0)
(31,2,0)
(2,32,0)
(19,33,0)
(2,30,0)
(2,31,0)
(10,3,0)
(22,15,0)
(12,23,0)
(7,6,0)
(23,31,0)
(23,6,0)
(5,26,0)
(21,1,0)
(17,6,0)
(30,2,0)
(4,19,0)
(25,31,0)
(15,31,0)
(15,31,1)
(30,33,1)
(3,31,1)
(8,25,1)
(15,22,1)
(2,32,1)
(16,17,1)
(20,23,1)
(2,30,1)
(34,28,1)
(23,31,1)
(10,7,1)
(7,13,1)
(17,31,1)
(28,5,1)
(17,20,1)
(31,2,1)
(5,26,1)
(12,3,1)
(7,14,1)
(11,10,1)
(13,14,1)
(28,15,1)
(14,34,1)
(33,19,1)
(22,35,1)
(23,12,1)
(35,31,1)
(3,11,1)
(4,8,1)
(26,9,1)
(19,4,1)
(9,15,1)
(13,14,2)
(2,30,2)
(5,26,2)
(17,31,2)
(33,19,2)
(23,31,2)
(31,2,2)
(9,15,2)
(5,15,2)
(30,33,2)
(26,15,2)
(15,31,2)
(3,31,2)
(2,32,2)
-----------------------------------
(0,if (data == NULL)
(1,)
(2,(wchar_t *)
(3,wcscat(dest, data)
(4,wchar_t)
(5,exit(-1)
(6,)
(7,"")
(8,100)
(9,1)
(10,dest)
(11,data)
(12,data)
(13,\\\'\\\\0\\\')
(14,STATIC_CONST_FIVE==5)
(15,data == NULL)
(16,RET)
(17,free(data)
(18,)
(19,sizeof(wchar_t)
(20,data)
(21,data)
(22,NULL)
(23,printWLine(data)
(24,)
(25,data)
(26,-1)
(27,\\'\\\\0\\')
(28,STATIC_CONST_FIVE)
(29,if(STATIC_CONST_FIVE==5)
(30,malloc(100*sizeof(wchar_t)
(31,data = (wchar_t *)
(32,wchar_t *)
(33,100*sizeof(wchar_t)
(34,5)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^