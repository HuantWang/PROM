-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_05_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(staticTrue)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
62,63
62,64
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,59,61,64,69,71
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_05_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(staticTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_05_bad()
CWE415_Double_Free__malloc_free_int64_t_05_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(staticTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticTrue
staticTrue
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,1,0)
(24,10,0)
(22,0,0)
(31,30,0)
(26,0,0)
(32,30,0)
(6,15,0)
(8,6,0)
(11,0,0)
(15,2,0)
(3,20,0)
(16,31,0)
(14,4,0)
(5,10,0)
(5,13,0)
(9,23,0)
(4,0,0)
(12,1,0)
(10,24,0)
(10,20,0)
(23,10,0)
(23,20,0)
(24,32,0)
(32,24,0)
(28,5,0)
(30,32,0)
(30,31,0)
(15,6,0)
(29,10,0)
(1,10,0)
(5,4,0)
(7,30,0)
(17,4,0)
(24,27,0)
(27,24,0)
(23,9,1)
(9,1,1)
(18,25,1)
(25,23,1)
(18,5,1)
(16,7,1)
(9,15,1)
(28,25,1)
(29,21,1)
(6,8,1)
(32,30,1)
(15,6,1)
(5,4,1)
(24,32,1)
(21,4,1)
(19,10,1)
(31,16,1)
(5,28,1)
(14,17,1)
(25,21,1)
(5,10,1)
(4,14,1)
(1,12,1)
(7,29,1)
(30,31,1)
(12,19,1)
(23,10,1)
(10,24,1)
(24,27,1)
(8,1,1)
(1,10,1)
(1,10,2)
(15,6,2)
(16,21,2)
(6,1,2)
(24,21,2)
(23,21,2)
(1,21,2)
(24,32,2)
(12,21,2)
(31,21,2)
(23,10,2)
(5,4,2)
(9,21,2)
(8,1,2)
(28,25,2)
(32,30,2)
(30,31,2)
(32,21,2)
(19,21,2)
(10,21,2)
(30,21,2)
(5,10,2)
(24,27,2)
(5,25,2)
(29,21,2)
(7,21,2)
(15,1,2)
(10,24,2)
-----------------------------------
(0,)
(1,data == NULL)
(2,)
(3,if (data == NULL)
(4,data = NULL)
(5,free(data)
(6,-1)
(7,100)
(8,1)
(9,data)
(10,data = (int64_t *)
(11,if(staticTrue)
(12,NULL)
(13,)
(14,NULL)
(15,exit(-1)
(16,int64_t)
(17,data)
(18,RET)
(19,data)
(20,)
(21,staticTrue)
(22,if(staticTrue)
(23,free(data)
(24,(int64_t *)
(25,staticTrue)
(26,data)
(27,int64_t *)
(28,data)
(29,data)
(30,100*sizeof(int64_t)
(31,sizeof(int64_t)
(32,malloc(100*sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^