-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,26,29,34,36,40,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_10_bad()
CWE190_Integer_Overflow__int_rand_square_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,8,0)
(17,4,0)
(19,21,0)
(19,8,0)
(5,4,0)
(13,8,0)
(21,4,0)
(10,13,0)
(14,19,0)
(12,6,0)
(22,6,0)
(13,19,0)
(8,20,0)
(11,3,0)
(15,21,0)
(4,0,0)
(3,6,0)
(1,3,0)
(23,21,0)
(21,3,0)
(18,6,0)
(21,19,0)
(4,5,0)
(23,15,1)
(19,21,1)
(4,5,1)
(9,7,1)
(7,3,1)
(13,10,1)
(17,7,1)
(10,19,1)
(21,3,1)
(15,14,1)
(21,4,1)
(2,13,1)
(3,1,1)
(14,9,1)
(5,17,1)
(9,4,1)
(2,9,1)
(13,19,1)
(1,11,1)
(21,23,1)
(13,9,2)
(21,4,2)
(13,19,2)
(17,7,2)
(4,7,2)
(10,9,2)
(21,9,2)
(15,9,2)
(5,7,2)
(21,3,2)
(14,9,2)
(23,9,2)
(4,5,2)
(19,9,2)
(19,21,2)
-----------------------------------
(0,)
(1,0)
(2,RET)
(3,data = 0)
(4,data = RAND32()
(5,RAND32()
(6,)
(7,globalTrue)
(8,)
(9,globalTrue)
(10,result)
(11,data)
(12,data)
(13,printIntLine(result)
(14,result)
(15,data)
(16,result)
(17,data)
(18,if(globalTrue)
(19,result = data * data)
(20,)
(21,data * data)
(22,if(globalTrue)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^