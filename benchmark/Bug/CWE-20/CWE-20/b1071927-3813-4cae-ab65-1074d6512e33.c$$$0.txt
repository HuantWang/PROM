-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
57,62
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
86,87
86,88
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
93,94
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
103,104
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
115,117
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,63,65,70,72,77,78,81,82,85,92,94,95,96,102,104,105,106,110,112,114,116,120,121,125,129,130,134,136
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
75,76
75,77
79,80
79,81
88,89
88,90
98,99
98,100
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(60,3,0)
(8,0,0)
(27,23,0)
(39,15,0)
(60,45,0)
(49,23,0)
(6,57,0)
(19,11,0)
(1,49,0)
(34,6,0)
(13,49,0)
(48,56,0)
(53,2,0)
(57,54,0)
(24,48,0)
(26,12,0)
(58,38,0)
(6,49,0)
(61,6,0)
(46,30,0)
(41,0,0)
(13,29,0)
(31,3,0)
(8,30,0)
(0,8,0)
(16,4,0)
(44,23,0)
(52,37,0)
(41,12,0)
(51,45,0)
(50,15,0)
(57,6,0)
(12,41,0)
(6,12,0)
(0,41,0)
(4,12,0)
(25,41,0)
(6,15,0)
(64,65,0)
(67,15,0)
(15,23,0)
(11,17,0)
(45,17,0)
(54,57,0)
(10,48,0)
(40,17,0)
(21,36,0)
(47,56,0)
(67,29,0)
(36,17,0)
(28,11,0)
(43,8,0)
(48,17,0)
(42,17,0)
(33,67,0)
(41,25,0)
(29,67,0)
(9,57,0)
(35,4,0)
(2,12,0)
(56,37,0)
(2,49,0)
(59,64,0)
(7,38,0)
(2,15,0)
(45,60,0)
(37,5,0)
(56,48,0)
(30,8,0)
(32,67,0)
(29,13,0)
(67,12,0)
(66,60,0)
(64,59,0)
(38,49,0)
(3,5,0)
(20,18,0)
(14,54,0)
(55,59,0)
(12,18,0)
(63,45,0)
(39,50,1)
(26,62,1)
(45,17,1)
(63,11,1)
(55,4,1)
(46,43,1)
(13,29,1)
(0,8,1)
(21,37,1)
(8,30,1)
(56,47,1)
(10,24,1)
(11,28,1)
(22,2,1)
(12,41,1)
(16,12,1)
(3,31,1)
(67,15,1)
(9,34,1)
(29,67,1)
(51,63,1)
(43,26,1)
(24,3,1)
(4,35,1)
(11,17,1)
(48,10,1)
(45,51,1)
(6,15,1)
(41,0,1)
(61,11,1)
(57,54,1)
(67,33,1)
(19,36,1)
(37,52,1)
(62,15,1)
(56,48,1)
(40,62,1)
(36,21,1)
(2,12,1)
(17,42,1)
(40,64,1)
(28,19,1)
(33,32,1)
(42,40,1)
(60,45,1)
(14,9,1)
(66,45,1)
(47,48,1)
(60,66,1)
(41,25,1)
(32,6,1)
(40,4,1)
(15,39,1)
(30,46,1)
(48,17,1)
(52,56,1)
(35,16,1)
(59,55,1)
(2,15,1)
(6,57,1)
(34,61,1)
(31,60,1)
(2,53,1)
(19,17,1)
(6,12,1)
(36,17,1)
(54,14,1)
(64,59,1)
(67,12,1)
(53,13,1)
(4,12,1)
(55,4,2)
(8,30,2)
(43,62,2)
(52,11,2)
(57,54,2)
(19,11,2)
(59,4,2)
(30,62,2)
(67,12,2)
(29,67,2)
(37,11,2)
(31,11,2)
(51,11,2)
(6,12,2)
(4,62,2)
(13,29,2)
(28,11,2)
(4,12,2)
(41,25,2)
(41,62,2)
(64,4,2)
(0,62,2)
(56,11,2)
(16,62,2)
(21,11,2)
(48,17,2)
(60,45,2)
(63,11,2)
(47,11,2)
(41,0,2)
(11,17,2)
(36,11,2)
(0,8,2)
(24,11,2)
(8,62,2)
(2,12,2)
(12,41,2)
(10,11,2)
(6,15,2)
(3,11,2)
(46,62,2)
(2,15,2)
(45,11,2)
(60,11,2)
(12,62,2)
(64,59,2)
(67,15,2)
(66,11,2)
(35,62,2)
(26,62,2)
(6,57,2)
(36,17,2)
(48,11,2)
(56,48,2)
(11,11,2)
(45,17,2)
-----------------------------------
(0,malloc(50*sizeof(twoIntsStruct)
(1,source)
(2,free(data)
(3,source[i].intOne = 0)
(4,data == NULL)
(5,)
(6,memmove(data, source, 100*sizeof(twoIntsStruct)
(7,i)
(8,50*sizeof(twoIntsStruct)
(9,100)
(10,i)
(11,i < 100)
(12,data = (twoIntsStruct *)
(13,printStructLine(&data[0])
(14,twoIntsStruct)
(15,data = NULL)
(16,data)
(17,i = 0)
(18,)
(19,i)
(20,if (data == NULL)
(21,i)
(22,RET)
(23,)
(24,source)
(25,twoIntsStruct *)
(26,data)
(27,if(staticReturnsTrue()
(28,100)
(29,&data[0])
(30,sizeof(twoIntsStruct)
(31,0)
(32,data)
(33,0)
(34,source)
(35,NULL)
(36,i++)
(37,source[i].intTwo = 0)
(38,)
(39,NULL)
(40,i)
(41,(twoIntsStruct *)
(42,0)
(43,50)
(44,data)
(45,source[i])
(46,twoIntsStruct)
(47,intTwo)
(48,source[i])
(49,)
(50,data)
(51,i)
(52,0)
(53,data)
(54,sizeof(twoIntsStruct)
(55,1)
(56,source[i].intTwo)
(57,100*sizeof(twoIntsStruct)
(58,for (i = 0; i < 100; i++)
(59,-1)
(60,source[i].intOne)
(61,data)
(62,staticReturnsTrue()
(63,source)
(64,exit(-1)
(65,)
(66,intOne)
(67,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^