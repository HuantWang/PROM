-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%u", &data);
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
52,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,55,58,60,63,67,69
-----computeFrom-----
18,19
18,20
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(17,22,0)
(27,17,0)
(9,28,0)
(16,25,0)
(29,2,0)
(3,23,0)
(23,2,0)
(24,29,0)
(32,28,0)
(23,16,0)
(20,32,0)
(7,8,0)
(5,21,0)
(18,21,0)
(2,5,0)
(1,28,0)
(28,21,0)
(26,22,0)
(25,16,0)
(22,28,0)
(32,21,0)
(10,2,0)
(16,5,0)
(19,23,0)
(4,16,0)
(11,0,0)
(30,5,0)
(29,16,0)
(8,2,0)
(8,23,0)
(17,21,0)
(0,32,0)
(12,17,0)
(14,25,0)
(15,25,0)
(22,17,0)
(6,21,0)
(31,0,0)
(32,20,1)
(27,28,1)
(11,17,1)
(7,23,1)
(22,26,1)
(16,25,1)
(25,14,1)
(24,16,1)
(0,31,1)
(17,22,1)
(13,8,1)
(1,9,1)
(4,32,1)
(22,28,1)
(15,4,1)
(12,27,1)
(23,19,1)
(8,23,1)
(29,16,1)
(23,16,1)
(19,3,1)
(3,29,1)
(26,12,1)
(31,11,1)
(8,7,1)
(29,24,1)
(32,28,1)
(20,0,1)
(28,1,1)
(14,15,1)
(22,28,2)
(8,23,2)
(16,25,2)
(17,22,2)
(23,16,2)
(32,28,2)
(29,16,2)
-----------------------------------
(0,myUnion.unionFirst)
(1,0)
(2,)
(3,result)
(4,data)
(5,)
(6,data)
(7,result)
(8,printUnsignedLine(result)
(9,data)
(10,result)
(11,myUnion)
(12,"%u")
(13,RET)
(14,unionSecond)
(15,myUnion)
(16,data = myUnion.unionSecond)
(17,fscanf (stdin, "%u", &data)
(18,myUnion)
(19,data)
(20,data)
(21,)
(22,&data)
(23,result = data)
(24,data)
(25,myUnion.unionSecond)
(26,data)
(27,stdin)
(28,data = 0)
(29,++data)
(30,data)
(31,unionFirst)
(32,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^