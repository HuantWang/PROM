-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_memmove_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Use a small buffer */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    memset(data, 'A', 50-1); /* fill with 'A's */
    data[50-1] = '\0'; /* null terminate */
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char dest[100];
            memset(dest, 'C', 100-1);
            dest[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: using memmove with the length of the dest where data
             * could be smaller than dest causing buffer overread */
            memmove(dest, data, strlen(dest)*sizeof(char));
            dest[100-1] = '\0';
            printLine(dest);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
87,88
87,89
87,90
87,91
87,92
87,93
87,94
88,89
89,90
89,91
91,92
91,93
93,94
95,96
96,97
96,98
96,99
96,100
97,98
99,100
102,103
102,104
105,106
106,107
106,108
107,108
107,109
108,109
110,111
110,112
114,115
115,116
115,117
115,118
115,119
116,117
118,119
120,121
122,123
122,124
123,124
123,125
124,125
126,127
128,129
129,130
129,131
132,133
133,134
133,135
134,135
134,136
135,136
137,138
137,139
141,142
142,143
142,144
143,144
145,146
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,57,58,63,65,66,67,71,73,74,77,80,82,83,86,90,92,94,98,100,101,103,104,109,111,112,113,117,119,121,125,127,130,131,136,138,139,140,144,146,150,152
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
56,57
56,58
60,61
60,62
64,65
64,66
102,103
102,104
106,107
106,108
110,111
110,112
122,123
122,124
133,134
133,135
137,138
137,139
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_memmove_31_bad(){    char * data;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memmove with the length of the dest where data             * could be smaller than dest causing buffer overread */            memmove(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
void
CWE126_Buffer_Overread__malloc_char_memmove_31_bad()
CWE126_Buffer_Overread__malloc_char_memmove_31_bad
{    char * data;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memmove with the length of the dest where data             * could be smaller than dest causing buffer overread */            memmove(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memmove with the length of the dest where data             * could be smaller than dest causing buffer overread */            memmove(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memmove with the length of the dest where data             * could be smaller than dest causing buffer overread */            memmove(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memmove(dest, data, strlen(dest)*sizeof(char));
memmove(dest, data, strlen(dest)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(dest)*sizeof(char)
strlen(dest)
strlen
strlen
dest
dest
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(59,66,0)
(40,62,0)
(9,5,0)
(57,10,0)
(7,11,0)
(32,12,0)
(0,23,0)
(74,53,0)
(28,62,0)
(15,51,0)
(23,4,0)
(16,25,0)
(36,6,0)
(18,44,0)
(38,67,0)
(70,7,0)
(31,76,0)
(9,66,0)
(12,4,0)
(33,8,0)
(19,8,0)
(20,59,0)
(63,12,0)
(3,6,0)
(1,34,0)
(49,67,0)
(55,56,0)
(8,33,0)
(2,28,0)
(37,10,0)
(22,66,0)
(33,12,0)
(75,6,0)
(3,35,0)
(18,24,0)
(21,24,0)
(44,9,0)
(27,59,0)
(69,29,0)
(42,71,0)
(53,34,0)
(56,53,0)
(41,51,0)
(52,56,0)
(10,37,0)
(79,33,0)
(33,79,0)
(58,28,0)
(35,4,0)
(50,67,0)
(39,13,0)
(76,4,0)
(78,13,0)
(66,62,0)
(17,35,0)
(11,7,0)
(80,62,0)
(76,56,0)
(24,18,0)
(28,51,0)
(30,34,0)
(11,66,0)
(11,71,0)
(46,37,0)
(12,33,0)
(47,79,0)
(49,23,0)
(60,25,0)
(65,7,0)
(48,49,0)
(34,62,0)
(39,54,0)
(61,11,0)
(66,9,0)
(4,34,0)
(67,49,0)
(29,4,0)
(44,18,0)
(53,66,0)
(10,4,0)
(13,39,0)
(68,10,0)
(5,9,0)
(28,66,0)
(71,62,0)
(25,62,0)
(14,18,0)
(12,56,0)
(77,3,0)
(26,4,0)
(43,53,0)
(56,34,0)
(45,37,0)
(6,3,0)
(9,44,0)
(51,28,0)
(28,51,1)
(33,79,1)
(76,56,1)
(25,16,1)
(38,48,1)
(21,14,1)
(11,66,1)
(32,35,1)
(16,60,1)
(23,0,1)
(53,66,1)
(66,9,1)
(71,42,1)
(14,22,1)
(3,6,1)
(2,39,1)
(52,53,1)
(56,53,1)
(43,71,1)
(27,20,1)
(75,36,1)
(10,37,1)
(7,70,1)
(12,33,1)
(35,17,1)
(41,15,1)
(76,31,1)
(15,58,1)
(39,13,1)
(78,59,1)
(57,56,1)
(47,8,1)
(73,76,1)
(17,3,1)
(33,8,1)
(61,28,1)
(8,19,1)
(31,29,1)
(55,52,1)
(18,24,1)
(74,43,1)
(24,21,1)
(19,63,1)
(79,47,1)
(68,57,1)
(11,7,1)
(45,68,1)
(9,44,1)
(50,38,1)
(36,77,1)
(63,32,1)
(42,11,1)
(46,45,1)
(13,78,1)
(28,66,1)
(53,74,1)
(70,65,1)
(56,55,1)
(69,23,1)
(9,5,1)
(12,56,1)
(67,50,1)
(51,41,1)
(22,25,1)
(29,69,1)
(2,59,1)
(20,66,1)
(37,46,1)
(49,67,1)
(59,66,1)
(77,10,1)
(59,27,1)
(58,2,1)
(48,12,1)
(6,75,1)
(65,61,1)
(44,18,1)
(0,49,1)
(9,5,2)
(56,53,2)
(59,66,2)
(28,66,2)
(9,44,2)
(12,56,2)
(33,8,2)
(33,79,2)
(10,37,2)
(49,67,2)
(53,66,2)
(11,66,2)
(78,59,2)
(11,7,2)
(39,59,2)
(39,13,2)
(44,18,2)
(76,56,2)
(18,24,2)
(66,9,2)
(13,59,2)
(28,51,2)
(3,6,2)
(12,33,2)
-----------------------------------
(0,'\\\\0')
(1,dataCopy)
(2,data)
(3,dest[100-1])
(4,)
(5,char *)
(6,100-1)
(7,50-1)
(8,strlen(dest)
(9,(char *)
(10,memset(dest, \'C\', 100-1)
(11,data[50-1])
(12,memmove(dest, data, strlen(dest)
(13,-1)
(14,50)
(15,50)
(16,NULL)
(17,'\\\\0')
(18,50*sizeof(char)
(19,dest)
(20,data)
(21,char)
(22,data)
(23,dest[100-1] = '\\\\0')
(24,sizeof(char)
(25,data = NULL)
(26,dest)
(27,NULL)
(28,memset(data, \'A\', 50-1)
(29,printLine(dest)
(30,data)
(31,data)
(32,dest)
(33,strlen(dest)
(34,)
(35,dest[100-1] = '\\\\0')
(36,100)
(37,100-1)
(38,100)
(39,exit(-1)
(40,data)
(41,1)
(42,'\\\\0')
(43,dataCopy)
(44,malloc(50*sizeof(char)
(45,100)
(46,1)
(47,char)
(48,dest)
(49,dest[100-1])
(50,1)
(51,50-1)
(52,data)
(53,* dataCopy = data)
(54,)
(55,dataCopy)
(56,* data = dataCopy)
(57,dest)
(58,'A')
(59,data == NULL)
(60,data)
(61,data)
(62,)
(63,data)
(64,memset(data, 'A', 50-1)
(65,50)
(66,data = (char *)
(67,100-1)
(68,'C')
(69,dest)
(70,1)
(71,data[50-1] = '\\\\0')
(72,memset(dest, 'C', 100-1)
(73,RET)
(74,data)
(75,1)
(76,free(data)
(77,dest)
(78,1)
(79,sizeof(char)
(80,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^