-----label-----
1
-----code-----
static void badSink(wchar_t * data)
{
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcsncat(dest, data, wcslen(data));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
27,28
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
36,38
37,38
39,40
39,41
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,6,8,9,14,16,18,20,24,26,28,31,33,38,40,41,42,46,48,52,54
-----computeFrom-----
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(wchar_t * data){    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
static void
badSink(wchar_t * data)
badSink
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcsncat(dest, data, wcslen(data));
wcsncat(dest, data, wcslen(data))
wcsncat
wcsncat
dest
dest
data
data
wcslen(data)
wcslen
wcslen
data
data
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,4,0)
(7,12,0)
(13,11,0)
(11,12,0)
(5,11,0)
(5,4,0)
(0,8,0)
(14,5,0)
(11,5,0)
(8,12,0)
(6,10,0)
(12,2,0)
(10,12,0)
(11,4,0)
(10,4,0)
(3,12,0)
(1,11,0)
(14,13,1)
(3,11,1)
(8,4,1)
(6,3,1)
(13,1,1)
(10,6,1)
(5,14,1)
(5,4,1)
(8,0,1)
(11,5,1)
(10,4,1)
(11,4,1)
(0,10,1)
(9,8,1)
(1,7,1)
(11,4,2)
(5,4,2)
(11,5,2)
(10,4,2)
(8,4,2)
-----------------------------------
(0,data)
(1,dest)
(2,)
(3,\\\'\\\\0\\\')
(4,wchar_t * data)
(5,wcslen(data)
(6,data)
(7,"")
(8,free(data)
(9,RET)
(10,printWLine(data)
(11,wcsncat(dest, data, wcslen(data)
(12,)
(13,data)
(14,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^