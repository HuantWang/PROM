-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
44,45
45,46
47,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
92,93
92,94
92,95
92,96
92,97
92,98
93,94
94,95
94,96
96,97
98,99
99,100
99,101
101,102
101,103
101,104
104,105
105,106
105,107
106,107
106,108
108,109
110,111
110,112
111,112
113,114
113,115
115,116
116,117
116,118
119,120
119,121
120,121
120,122
121,122
123,124
125,126
126,127
127,128
127,129
128,129
130,131
132,133
132,134
132,135
132,136
133,134
134,135
134,136
135,136
138,139
138,140
139,140
142,143
143,144
145,146
146,147
147,148
147,149
148,149
148,150
149,150
151,152
154,155
154,156
154,157
155,156
155,157
156,157
159,160
159,161
160,161
161,162
161,163
162,163
162,164
163,164
165,166
168,169
168,170
168,171
168,172
169,170
170,171
170,172
171,172
174,175
174,176
175,176
178,179
179,180
181,182
182,183
183,184
183,185
184,185
186,187
186,188
187,188
189,190
191,192
192,193
193,194
193,195
194,195
197,198
198,199
198,200
199,200
201,202
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,46,48,53,55,57,59,61,66,69,71,76,77,82,83,86,87,90,95,97,100,102,103,107,109,112,114,117,118,122,124,129,131,136,137,140,141,144,150,152,153,157,158,164,166,167,172,173,176,177,180,185,188,190,195,196,200,202
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
50,51
50,52
64,65
64,66
80,81
80,82
84,85
84,86
113,114
113,115
120,121
120,122
134,135
134,136
138,139
138,140
147,148
147,149
155,156
155,157
161,162
161,163
170,171
170,172
174,175
174,176
-----guardedBy-----
55,71
157,166
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad(){    int i,j;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad
{    int i,j;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(58,38,0)
(106,74,0)
(19,22,0)
(12,14,0)
(88,47,0)
(61,19,0)
(17,37,0)
(111,20,0)
(28,56,0)
(92,85,0)
(0,106,0)
(74,106,0)
(7,91,0)
(89,75,0)
(37,89,0)
(40,71,0)
(70,109,0)
(62,103,0)
(13,69,0)
(77,65,0)
(64,54,0)
(53,107,0)
(18,24,0)
(77,26,0)
(24,74,0)
(50,8,0)
(46,71,0)
(7,89,0)
(20,19,0)
(105,71,0)
(73,39,0)
(68,13,0)
(81,89,0)
(103,45,0)
(9,69,0)
(48,56,0)
(39,1,0)
(100,1,0)
(33,54,0)
(57,69,0)
(51,50,0)
(95,84,0)
(38,107,0)
(15,103,0)
(44,37,0)
(56,87,0)
(34,69,0)
(56,62,0)
(98,26,0)
(27,10,0)
(65,77,0)
(59,84,0)
(47,88,0)
(37,50,0)
(23,19,0)
(67,74,0)
(83,107,0)
(31,61,0)
(10,11,0)
(19,61,0)
(20,10,0)
(110,77,0)
(91,55,0)
(66,1,0)
(21,47,0)
(16,57,0)
(7,69,0)
(25,54,0)
(29,1,0)
(7,50,0)
(90,57,0)
(24,19,0)
(82,107,0)
(72,71,0)
(32,20,0)
(85,50,0)
(2,62,0)
(14,102,0)
(88,35,0)
(63,50,0)
(37,1,0)
(74,84,0)
(109,43,0)
(63,54,0)
(60,83,0)
(41,87,0)
(79,105,0)
(26,77,0)
(99,39,0)
(20,50,0)
(91,7,0)
(20,74,0)
(8,49,0)
(49,8,0)
(65,8,0)
(8,50,0)
(30,72,0)
(36,100,0)
(87,56,0)
(4,7,0)
(94,54,0)
(78,7,0)
(93,84,0)
(50,54,0)
(96,62,0)
(86,83,0)
(101,103,0)
(104,56,0)
(97,54,0)
(76,63,0)
(42,105,0)
(8,65,0)
(54,108,0)
(61,62,0)
(3,24,0)
(112,84,0)
(52,84,0)
(80,11,0)
(6,85,0)
(7,50,1)
(57,69,1)
(79,71,1)
(87,56,1)
(44,17,1)
(104,28,1)
(10,27,1)
(0,67,1)
(18,3,1)
(88,47,1)
(81,37,1)
(1,66,1)
(20,19,1)
(24,18,1)
(70,24,1)
(37,50,1)
(32,24,1)
(7,69,1)
(58,63,1)
(105,71,1)
(72,71,1)
(37,44,1)
(109,70,1)
(12,87,1)
(65,77,1)
(68,91,1)
(61,62,1)
(74,106,1)
(6,50,1)
(37,1,1)
(99,73,1)
(21,85,1)
(24,74,1)
(42,79,1)
(83,60,1)
(82,53,1)
(78,4,1)
(63,50,1)
(38,58,1)
(30,14,1)
(30,19,1)
(72,30,1)
(87,41,1)
(71,46,1)
(111,32,1)
(98,110,1)
(29,85,1)
(20,74,1)
(105,42,1)
(51,83,1)
(63,76,1)
(96,2,1)
(7,78,1)
(100,36,1)
(7,89,1)
(4,57,1)
(77,26,1)
(48,104,1)
(90,69,1)
(27,20,1)
(31,23,1)
(61,31,1)
(76,109,1)
(5,83,1)
(46,40,1)
(86,38,1)
(79,72,1)
(23,87,1)
(86,107,1)
(41,56,1)
(20,50,1)
(3,39,1)
(73,100,1)
(14,12,1)
(13,68,1)
(53,105,1)
(40,74,1)
(39,1,1)
(28,62,1)
(76,57,1)
(9,10,1)
(83,107,1)
(50,8,1)
(89,81,1)
(85,50,1)
(110,51,1)
(60,86,1)
(38,107,1)
(85,92,1)
(34,9,1)
(62,96,1)
(91,7,1)
(100,1,1)
(107,82,1)
(16,90,1)
(8,65,1)
(90,13,1)
(47,21,1)
(57,16,1)
(29,88,1)
(24,19,1)
(56,48,1)
(2,105,1)
(13,69,1)
(69,34,1)
(17,39,1)
(39,99,1)
(36,89,1)
(73,1,1)
(20,111,1)
(56,62,1)
(92,6,1)
(106,0,1)
(66,29,1)
(8,49,1)
(26,98,1)
(19,61,1)
(7,69,2)
(50,83,2)
(77,83,2)
(96,105,2)
(78,57,2)
(20,74,2)
(8,65,2)
(88,85,2)
(56,105,2)
(73,83,2)
(69,24,2)
(30,105,2)
(98,83,2)
(77,26,2)
(44,39,2)
(83,83,2)
(85,50,2)
(41,105,2)
(6,83,2)
(100,39,2)
(111,24,2)
(42,105,2)
(8,49,2)
(81,39,2)
(14,87,2)
(48,105,2)
(24,74,2)
(60,83,2)
(72,105,2)
(86,83,2)
(2,105,2)
(32,24,2)
(17,39,2)
(61,62,2)
(12,87,2)
(39,1,2)
(27,24,2)
(3,83,2)
(109,24,2)
(20,24,2)
(38,107,2)
(91,57,2)
(65,83,2)
(100,1,2)
(23,87,2)
(37,50,2)
(89,39,2)
(39,83,2)
(9,24,2)
(87,105,2)
(99,83,2)
(39,39,2)
(16,57,2)
(92,83,2)
(83,107,2)
(110,83,2)
(21,85,2)
(87,56,2)
(62,105,2)
(63,83,2)
(58,83,2)
(37,1,2)
(38,83,2)
(8,83,2)
(29,83,2)
(20,50,2)
(13,57,2)
(1,83,2)
(105,71,2)
(36,39,2)
(19,87,2)
(4,57,2)
(24,19,2)
(28,105,2)
(76,83,2)
(90,24,2)
(47,85,2)
(24,83,2)
(65,77,2)
(105,105,2)
(18,83,2)
(91,7,2)
(72,71,2)
(16,24,2)
(70,24,2)
(68,57,2)
(57,24,2)
(13,69,2)
(61,87,2)
(90,57,2)
(56,62,2)
(104,105,2)
(51,83,2)
(20,19,2)
(26,83,2)
(99,39,2)
(88,47,2)
(31,87,2)
(73,39,2)
(10,24,2)
(79,105,2)
(57,69,2)
(50,8,2)
(85,83,2)
(7,89,2)
(63,50,2)
(74,106,2)
(57,57,2)
(7,57,2)
(66,83,2)
(34,24,2)
(7,50,2)
(19,61,2)
(37,39,2)
-----------------------------------
(0,1)
(1,i = 0)
(2,inputBuffer)
(3,data)
(4,buffer)
(5,RET)
(6,buffer)
(7,buffer[i])
(8,(int *)
(9,i)
(10,buffer[data] = 1)
(11,)
(12,"fgets()
(13,i++)
(14,printLine("fgets()
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,10)
(17,buffer)
(18,0)
(19,data = atoi(inputBuffer)
(20,buffer[data])
(21,1)
(22,)
(23,data)
(24,data >= 0)
(25,for (i = 0; i < 10; i++)
(26,sizeof(int)
(27,1)
(28,inputBuffer)
(29,i)
(30,i)
(31,inputBuffer)
(32,buffer)
(33,buffer)
(34,0)
(35,)
(36,i)
(37,buffer[i])
(38,j++)
(39,i < 10)
(40,i)
(41,NULL)
(42,1)
(43,)
(44,i)
(45,)
(46,0)
(47,-1)
(48,stdin)
(49,int *)
(50,* buffer = (int *)
(51,buffer)
(52,for(j = 0; j < 1; j++)
(53,j)
(54,)
(55,)
(56,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(57,i < 10)
(58,j)
(59,j)
(60,1)
(61,atoi(inputBuffer)
(62,inputBuffer[CHAR_ARRAY_SIZE] = "")
(63,free(buffer)
(64,if (data >= 0)
(65,malloc(10 * sizeof(int)
(66,0)
(67,data)
(68,i)
(69,i = 0)
(70,"ERROR: Array index is negative.")
(71,i = 0)
(72,i++)
(73,i)
(74,data = -1)
(75,)
(76,buffer)
(77,10 * sizeof(int)
(78,i)
(79,i)
(80,for(i = 0; i < 10; i++)
(81,0)
(82,0)
(83,j < 1)
(84,)
(85,buffer == NULL)
(86,j)
(87,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(88,exit(-1)
(89,buffer[i] = 0)
(90,i)
(91,printIntLine(buffer[i])
(92,NULL)
(93,i)
(94,i)
(95,for(i = 0; i < 1; i++)
(96,"")
(97,if (buffer == NULL)
(98,int)
(99,10)
(100,i++)
(101,inputBuffer)
(102,)
(103,)
(104,CHAR_ARRAY_SIZE)
(105,i < 1)
(106,-1)
(107,j = 0)
(108,)
(109,printLine("ERROR: Array index is negative.")
(110,10)
(111,data)
(112,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^