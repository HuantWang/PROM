-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticTrue)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
86,88
88,89
89,90
89,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
127,129
127,130
128,129
128,130
129,130
132,133
132,134
133,134
134,135
134,136
135,136
135,137
136,137
138,139
141,142
141,143
141,144
141,145
142,143
143,144
143,145
144,145
147,148
147,149
148,149
151,152
152,153
154,155
155,156
156,157
156,158
157,158
159,160
159,161
160,161
162,163
164,165
165,166
166,167
166,168
167,168
170,171
171,172
171,173
172,173
174,175
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,70,73,75,76,80,82,85,87,90,91,95,97,102,104,109,110,113,114,117,123,125,126,130,131,137,139,140,145,146,149,150,153,158,161,163,168,169,173,175
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
86,87
86,88
93,94
93,95
107,108
107,109
111,112
111,113
120,121
120,122
128,129
128,130
134,135
134,136
143,144
143,145
147,148
147,149
-----guardedBy-----
38,54
130,139
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
staticTrue
staticTrue
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(43,19,0)
(67,47,0)
(70,32,0)
(21,73,0)
(6,17,0)
(15,67,0)
(65,34,0)
(7,12,0)
(38,45,0)
(65,60,0)
(25,30,0)
(50,72,0)
(0,21,0)
(8,30,0)
(16,68,0)
(26,58,0)
(46,90,0)
(81,43,0)
(35,60,0)
(2,42,0)
(96,42,0)
(29,88,0)
(68,90,0)
(64,95,0)
(85,17,0)
(88,53,0)
(77,8,0)
(70,49,0)
(24,34,0)
(34,65,0)
(58,9,0)
(95,12,0)
(68,18,0)
(64,41,0)
(33,36,0)
(40,49,0)
(1,95,0)
(93,57,0)
(89,16,0)
(57,12,0)
(74,55,0)
(16,35,0)
(80,96,0)
(84,45,0)
(20,19,0)
(31,33,0)
(69,36,0)
(39,19,0)
(10,68,0)
(36,33,0)
(5,36,0)
(36,79,0)
(79,67,0)
(19,27,0)
(82,51,0)
(56,19,0)
(4,72,0)
(52,34,0)
(49,70,0)
(16,88,0)
(76,51,0)
(35,19,0)
(12,63,0)
(60,65,0)
(59,53,0)
(90,68,0)
(22,2,0)
(83,95,0)
(45,35,0)
(95,35,0)
(42,2,0)
(28,16,0)
(87,79,0)
(92,96,0)
(60,35,0)
(86,24,0)
(55,30,0)
(37,51,0)
(43,35,0)
(57,30,0)
(95,64,0)
(61,19,0)
(16,42,0)
(23,35,0)
(48,67,0)
(78,79,0)
(3,36,0)
(62,19,0)
(54,72,0)
(57,35,0)
(14,76,0)
(13,55,0)
(44,57,0)
(11,30,0)
(95,51,0)
(17,51,0)
(90,79,0)
(96,68,0)
(42,72,0)
(34,24,0)
(75,60,0)
(94,42,0)
(60,75,0)
(90,79,1)
(60,75,1)
(81,21,1)
(45,35,1)
(38,35,1)
(95,35,1)
(58,26,1)
(33,36,1)
(79,87,1)
(17,85,1)
(55,13,1)
(65,34,1)
(43,81,1)
(11,25,1)
(45,84,1)
(1,83,1)
(91,42,1)
(16,68,1)
(16,35,1)
(84,38,1)
(60,65,1)
(96,68,1)
(34,24,1)
(8,77,1)
(7,57,1)
(31,36,1)
(3,79,1)
(6,76,1)
(85,6,1)
(82,88,1)
(28,89,1)
(0,96,1)
(25,70,1)
(6,51,1)
(90,46,1)
(13,74,1)
(95,1,1)
(30,11,1)
(66,68,1)
(87,78,1)
(24,86,1)
(57,30,1)
(66,58,1)
(64,95,1)
(43,35,1)
(25,45,1)
(66,91,1)
(69,3,1)
(74,8,1)
(74,30,1)
(95,12,1)
(88,29,1)
(78,91,1)
(80,55,1)
(86,52,1)
(17,51,1)
(52,23,1)
(57,35,1)
(37,82,1)
(46,10,1)
(2,22,1)
(68,90,1)
(83,17,1)
(76,51,1)
(33,31,1)
(44,93,1)
(23,66,1)
(12,7,1)
(95,51,1)
(71,43,1)
(36,5,1)
(93,55,1)
(81,17,1)
(57,44,1)
(49,40,1)
(96,92,1)
(26,33,1)
(22,94,1)
(76,14,1)
(51,37,1)
(42,2,1)
(77,12,1)
(71,66,1)
(35,60,1)
(70,49,1)
(10,33,1)
(89,96,1)
(5,69,1)
(16,28,1)
(40,45,1)
(96,42,1)
(29,16,1)
(16,42,1)
(14,64,1)
(36,79,1)
(8,30,1)
(55,30,1)
(92,80,1)
(21,0,1)
(95,51,2)
(51,96,2)
(17,17,2)
(38,66,2)
(7,55,2)
(45,66,2)
(74,55,2)
(49,45,2)
(46,33,2)
(10,33,2)
(57,35,2)
(30,66,2)
(90,79,2)
(95,12,2)
(55,30,2)
(58,33,2)
(0,96,2)
(65,66,2)
(85,17,2)
(12,55,2)
(14,17,2)
(92,66,2)
(64,95,2)
(3,91,2)
(16,35,2)
(1,17,2)
(52,66,2)
(80,66,2)
(44,55,2)
(34,24,2)
(69,91,2)
(70,49,2)
(57,55,2)
(55,55,2)
(57,30,2)
(96,42,2)
(79,91,2)
(8,55,2)
(40,45,2)
(16,42,2)
(78,91,2)
(64,17,2)
(36,79,2)
(76,17,2)
(89,96,2)
(68,90,2)
(35,60,2)
(90,33,2)
(87,91,2)
(60,66,2)
(35,66,2)
(34,66,2)
(86,66,2)
(29,96,2)
(60,75,2)
(81,66,2)
(96,66,2)
(17,96,2)
(17,51,2)
(37,96,2)
(13,66,2)
(93,55,2)
(31,91,2)
(6,17,2)
(88,96,2)
(23,66,2)
(65,34,2)
(83,17,2)
(45,35,2)
(55,66,2)
(74,66,2)
(60,65,2)
(95,35,2)
(95,17,2)
(76,51,2)
(6,96,2)
(82,96,2)
(16,96,2)
(21,96,2)
(33,36,2)
(85,96,2)
(36,91,2)
(13,55,2)
(96,68,2)
(77,55,2)
(16,68,2)
(28,96,2)
(5,91,2)
(43,35,2)
(68,33,2)
(33,91,2)
(8,30,2)
(43,66,2)
(70,45,2)
(24,66,2)
(42,2,2)
(11,66,2)
(84,66,2)
(26,33,2)
(25,66,2)
-----------------------------------
(0,"ERROR: Array index is negative.")
(1,i)
(2,-1)
(3,inputBuffer)
(4,data)
(5,stdin)
(6,i)
(7,0)
(8,i++)
(9,)
(10,data)
(11,0)
(12,buffer[i] = 0)
(13,10)
(14,i)
(15,inputBuffer)
(16,buffer[data])
(17,i < 10)
(18,)
(19,)
(20,i)
(21,printLine("ERROR: Array index is negative.")
(22,1)
(23,buffer)
(24,sizeof(int)
(25,i)
(26,"fgets()
(27,)
(28,data)
(29,1)
(30,i = 0)
(31,NULL)
(32,)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,10 * sizeof(int)
(35,* buffer = (int *)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,0)
(38,buffer)
(39,buffer)
(40,1)
(41,)
(42,data = -1)
(43,free(buffer)
(44,i)
(45,buffer == NULL)
(46,inputBuffer)
(47,)
(48,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,-1)
(50,if(staticTrue)
(51,i = 0)
(52,10)
(53,)
(54,if(staticTrue)
(55,i < 10)
(56,if (buffer == NULL)
(57,buffer[i])
(58,printLine("fgets()
(59,for(i = 0; i < 10; i++)
(60,(int *)
(61,for (i = 0; i < 10; i++)
(62,if (data >= 0)
(63,)
(64,printIntLine(buffer[i])
(65,malloc(10 * sizeof(int)
(66,staticTrue)
(67,)
(68,data = atoi(inputBuffer)
(69,CHAR_ARRAY_SIZE)
(70,exit(-1)
(71,RET)
(72,)
(73,)
(74,i)
(75,int *)
(76,i++)
(77,i)
(78,inputBuffer)
(79,inputBuffer[CHAR_ARRAY_SIZE] = "")
(80,data)
(81,buffer)
(82,i)
(83,buffer)
(84,NULL)
(85,10)
(86,int)
(87,"")
(88,buffer[data] = 1)
(89,buffer)
(90,atoi(inputBuffer)
(91,staticTrue)
(92,0)
(93,buffer)
(94,data)
(95,buffer[i])
(96,data >= 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^