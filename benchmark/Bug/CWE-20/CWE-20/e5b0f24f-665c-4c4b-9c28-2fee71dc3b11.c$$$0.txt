-----label-----
1
-----code-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource(char * data)
{
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,45
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource(char * data){    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
char
* CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource(char * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource
char * data
char
* data
*
data
{    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(0,16,0)
(11,17,0)
(6,3,0)
(4,7,0)
(7,16,0)
(18,10,0)
(11,12,0)
(5,1,0)
(10,18,0)
(14,12,0)
(21,18,0)
(19,6,0)
(10,16,0)
(18,20,0)
(20,6,0)
(10,13,0)
(3,6,0)
(7,10,0)
(6,20,0)
(18,21,0)
(7,13,0)
(8,10,0)
(20,18,0)
(12,11,0)
(9,7,0)
(2,3,0)
(1,13,0)
(15,1,0)
(1,10,0)
(20,6,1)
(18,21,1)
(5,10,1)
(1,13,1)
(7,4,1)
(14,1,1)
(3,2,1)
(10,18,1)
(7,13,1)
(1,10,1)
(12,14,1)
(4,1,1)
(4,11,1)
(9,7,1)
(15,5,1)
(1,15,1)
(7,10,1)
(2,19,1)
(6,3,1)
(11,12,1)
(10,13,1)
(18,20,1)
(19,8,1)
(11,1,2)
(1,13,2)
(12,1,2)
(18,20,2)
(7,13,2)
(14,1,2)
(7,10,2)
(11,12,2)
(10,18,2)
(6,3,2)
(9,7,2)
(20,6,2)
(18,21,2)
(1,10,2)
(10,13,2)
-----------------------------------
(0,if (data == NULL)
(1,data == NULL)
(2,char)
(3,sizeof(char)
(4,data)
(5,data)
(6,10*sizeof(char)
(7,return data;)
(8,data)
(9,RET)
(10,data = (char *)
(11,exit(-1)
(12,-1)
(13,char * data)
(14,1)
(15,NULL)
(16,)
(17,)
(18,(char *)
(19,10)
(20,malloc(10*sizeof(char)
(21,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^