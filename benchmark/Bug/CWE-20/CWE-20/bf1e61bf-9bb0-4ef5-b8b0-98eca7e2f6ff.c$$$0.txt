-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42_bad()
{
    char * data;
    data = NULL;
    data = badSource(data);
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strcat(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
36,39
36,40
37,38
39,40
42,43
42,44
45,46
46,47
46,48
47,48
47,49
48,49
50,51
50,52
54,55
55,56
55,57
55,58
56,57
58,59
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,30,32,34,38,40,41,43,44,49,51,52,53,57,59,61,65,67,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
42,43
42,44
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42_bad(){    char * data;    data = NULL;    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42_bad
{    char * data;    data = NULL;    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,7,0)
(24,23,0)
(32,17,0)
(31,14,0)
(25,31,0)
(1,30,0)
(14,32,0)
(13,23,0)
(12,7,0)
(10,14,0)
(31,30,0)
(19,11,0)
(22,24,0)
(30,31,0)
(18,24,0)
(26,32,0)
(6,30,0)
(13,32,0)
(16,27,0)
(29,23,0)
(9,29,0)
(11,17,0)
(23,0,0)
(24,32,0)
(7,27,0)
(7,32,0)
(5,17,0)
(2,11,0)
(29,32,0)
(0,23,0)
(20,13,0)
(15,0,0)
(0,11,0)
(21,23,0)
(27,7,0)
(23,17,0)
(4,27,0)
(7,27,1)
(13,20,1)
(22,18,1)
(18,14,1)
(30,6,1)
(24,23,1)
(11,2,1)
(25,7,1)
(4,16,1)
(29,9,1)
(1,25,1)
(0,15,1)
(31,30,1)
(2,19,1)
(28,13,1)
(13,23,1)
(12,3,1)
(9,24,1)
(3,23,1)
(29,23,1)
(27,4,1)
(23,0,1)
(15,21,1)
(24,22,1)
(6,1,1)
(0,11,1)
(21,11,1)
(20,29,1)
(14,10,1)
(10,31,1)
(16,12,1)
(29,23,2)
(23,0,2)
(31,30,2)
(13,23,2)
(0,11,2)
(7,27,2)
(24,23,2)
-----------------------------------
(0,badSource(data)
(1,100)
(2,NULL)
(3,source)
(4,1)
(5,data)
(6,1)
(7,memset(source, \'C\', 100-1)
(8,memset(source, 'C', 100-1)
(9,data)
(10,'\\\\0')
(11,data = NULL)
(12,'C')
(13,free(data)
(14,source[100-1] = '\\\\0')
(15,data)
(16,100)
(17,)
(18,data)
(19,data)
(20,data)
(21,data)
(22,source)
(23,data = badSource(data)
(24,strcat(data, source)
(25,source)
(26,source)
(27,100-1)
(28,RET)
(29,printLine(data)
(30,100-1)
(31,source[100-1])
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^