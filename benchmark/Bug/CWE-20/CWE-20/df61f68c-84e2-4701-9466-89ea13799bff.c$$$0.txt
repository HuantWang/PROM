-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(6,20,0)
(22,21,0)
(55,38,0)
(17,53,0)
(34,13,0)
(33,27,0)
(56,53,0)
(23,33,0)
(3,23,0)
(49,60,0)
(8,49,0)
(9,14,0)
(46,51,0)
(24,23,0)
(13,29,0)
(51,56,0)
(55,25,0)
(27,33,0)
(33,23,0)
(62,28,0)
(23,24,0)
(39,38,0)
(30,54,0)
(59,29,0)
(29,13,0)
(35,27,0)
(49,15,0)
(38,6,0)
(57,24,0)
(12,45,0)
(23,3,0)
(44,6,0)
(11,6,0)
(33,63,0)
(16,49,0)
(36,15,0)
(29,2,0)
(37,12,0)
(18,62,0)
(42,23,0)
(52,13,0)
(3,15,0)
(4,45,0)
(15,14,0)
(38,55,0)
(29,25,0)
(63,33,0)
(44,25,0)
(51,6,0)
(0,30,0)
(32,60,0)
(55,53,0)
(40,20,0)
(45,15,0)
(10,27,0)
(31,3,0)
(47,19,0)
(1,2,0)
(43,38,0)
(3,25,0)
(56,51,0)
(13,6,0)
(6,44,0)
(21,28,0)
(7,62,0)
(58,45,0)
(26,51,0)
(14,15,0)
(45,12,0)
(27,15,0)
(53,55,0)
(53,56,0)
(61,21,0)
(5,44,0)
(50,3,0)
(2,41,0)
(15,62,0)
(60,54,0)
(21,25,0)
(14,25,0)
(48,55,0)
(49,25,0)
(3,15,1)
(53,17,1)
(44,5,1)
(17,55,1)
(11,24,1)
(14,9,1)
(0,24,1)
(30,0,1)
(23,3,1)
(51,26,1)
(44,25,1)
(39,43,1)
(59,56,1)
(55,38,1)
(50,12,1)
(35,3,1)
(12,37,1)
(61,21,1)
(38,39,1)
(32,49,1)
(21,25,1)
(13,6,1)
(31,50,1)
(56,53,1)
(27,10,1)
(6,44,1)
(23,42,1)
(33,63,1)
(52,59,1)
(33,27,1)
(24,57,1)
(3,25,1)
(46,6,1)
(51,6,1)
(5,11,1)
(55,25,1)
(37,45,1)
(27,15,1)
(57,23,1)
(60,32,1)
(42,33,1)
(21,22,1)
(58,15,1)
(22,60,1)
(8,30,1)
(3,31,1)
(22,56,1)
(23,33,1)
(53,55,1)
(12,45,1)
(2,1,1)
(49,15,1)
(49,25,1)
(24,23,1)
(29,25,1)
(16,8,1)
(4,58,1)
(48,51,1)
(34,52,1)
(9,36,1)
(14,25,1)
(56,51,1)
(15,14,1)
(43,48,1)
(10,35,1)
(49,16,1)
(45,15,1)
(38,6,1)
(45,4,1)
(1,29,1)
(29,13,1)
(22,12,1)
(22,2,1)
(26,46,1)
(13,34,1)
(57,12,2)
(48,51,2)
(34,56,2)
(49,24,2)
(51,24,2)
(55,51,2)
(12,45,2)
(59,56,2)
(51,6,2)
(23,3,2)
(16,24,2)
(27,12,2)
(13,56,2)
(29,56,2)
(45,15,2)
(17,51,2)
(42,12,2)
(15,14,2)
(33,27,2)
(24,12,2)
(35,12,2)
(46,24,2)
(52,56,2)
(3,12,2)
(6,44,2)
(56,53,2)
(33,12,2)
(13,6,2)
(60,24,2)
(23,12,2)
(8,24,2)
(29,25,2)
(10,12,2)
(27,15,2)
(24,23,2)
(30,24,2)
(31,12,2)
(11,24,2)
(21,25,2)
(43,51,2)
(49,25,2)
(33,63,2)
(29,13,2)
(23,33,2)
(0,24,2)
(2,56,2)
(44,24,2)
(50,12,2)
(3,25,2)
(61,21,2)
(26,24,2)
(3,15,2)
(39,51,2)
(56,51,2)
(56,24,2)
(53,51,2)
(49,15,2)
(53,55,2)
(1,56,2)
(44,25,2)
(55,25,2)
(14,25,2)
(5,24,2)
(55,38,2)
(38,51,2)
(6,24,2)
(38,6,2)
(32,24,2)
-----------------------------------
(0,"fgets()
(1,\\\'\\\\0\\\')
(2,data[dataLen-1] = \\\'\\\\0\\\')
(3,data+dataLen)
(4,dataLen)
(5,data)
(6,dataLen = strlen(data)
(7,if (100-dataLen > 1)
(8,data)
(9,data)
(10,dataLen)
(11,dataLen)
(12,100-dataLen > 1)
(13,dataLen-1)
(14,strlen(data)
(15,dataLen = strlen(data)
(16,dataLen)
(17,\\\'\\\\n\\\')
(18,dataLen)
(19,)
(20,)
(21,return data;)
(22,data)
(23,fgets(data+dataLen, (int)
(24,fgets(data+dataLen, (int)
(25,char * data)
(26,0)
(27,100-dataLen)
(28,)
(29,data[dataLen-1])
(30,printLine("fgets()
(31,dataLen)
(32,\\\'\\\\0\\\')
(33,(int)
(34,1)
(35,100)
(36,dataLen)
(37,1)
(38,dataLen-1)
(39,1)
(40,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(41,)
(42,stdin)
(43,dataLen)
(44,strlen(data)
(45,100-dataLen)
(46,dataLen)
(47,if (fgets(data+dataLen, (int)
(48,data)
(49,data[dataLen])
(50,data)
(51,dataLen > 0)
(52,dataLen)
(53,data[dataLen-1] == \\\'\\\\n\\\')
(54,)
(55,data[dataLen-1])
(56,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(57,NULL)
(58,100)
(59,data)
(60,data[dataLen] = \\\'\\\\0\\\')
(61,RET)
(62,)
(63,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^