-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_07_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,77,79,83,84,89,91
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_07_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_07_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_07_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(5,38,0)
(6,18,0)
(31,7,0)
(34,21,0)
(23,31,0)
(20,10,0)
(38,28,0)
(36,28,0)
(34,38,0)
(5,37,0)
(5,1,0)
(17,36,0)
(25,37,0)
(14,8,0)
(0,18,0)
(38,5,0)
(34,33,0)
(25,8,0)
(24,38,0)
(35,16,0)
(15,30,0)
(36,38,0)
(9,33,0)
(2,34,0)
(11,16,0)
(3,33,0)
(37,5,0)
(13,28,0)
(26,30,0)
(33,18,0)
(1,5,0)
(37,25,0)
(10,38,0)
(32,18,0)
(27,25,0)
(8,25,0)
(29,10,0)
(31,23,0)
(4,23,0)
(12,28,0)
(4,10,1)
(23,4,1)
(17,13,1)
(29,20,1)
(15,26,1)
(3,9,1)
(33,3,1)
(20,38,1)
(26,16,1)
(10,29,1)
(22,34,1)
(14,27,1)
(26,36,1)
(30,15,1)
(25,8,1)
(24,16,1)
(5,37,1)
(10,38,1)
(36,38,1)
(27,24,1)
(22,30,1)
(34,33,1)
(31,23,1)
(37,25,1)
(5,1,1)
(35,33,1)
(38,5,1)
(8,14,1)
(16,11,1)
(11,35,1)
(2,30,1)
(13,10,1)
(36,17,1)
(34,2,1)
(13,31,1)
(34,38,1)
(38,5,2)
(34,38,2)
(8,16,2)
(36,16,2)
(38,16,2)
(4,10,2)
(25,8,2)
(10,16,2)
(14,16,2)
(24,16,2)
(37,16,2)
(34,33,2)
(31,23,2)
(10,38,2)
(23,10,2)
(29,16,2)
(5,1,2)
(2,30,2)
(25,16,2)
(20,16,2)
(5,37,2)
(31,10,2)
(36,38,2)
(27,16,2)
(5,16,2)
(13,16,2)
(34,30,2)
(37,25,2)
(17,16,2)
-----------------------------------
(0,if(staticFive==5)
(1,wchar_t *)
(2,data)
(3,NULL)
(4,1)
(5,(wchar_t *)
(6,data)
(7,)
(8,sizeof(wchar_t)
(9,data)
(10,data == NULL)
(11,5)
(12,if (data == NULL)
(13,'\\\\0')
(14,wchar_t)
(15,5)
(16,staticFive==5)
(17,data)
(18,)
(19,\'\\\\0\')
(20,data)
(21,)
(22,RET)
(23,-1)
(24,data)
(25,100*sizeof(wchar_t)
(26,staticFive)
(27,100)
(28,)
(29,NULL)
(30,staticFive==5)
(31,exit(-1)
(32,if(staticFive==5)
(33,data = NULL)
(34,printWLine(data)
(35,staticFive)
(36,free(data)
(37,malloc(100*sizeof(wchar_t)
(38,data = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^