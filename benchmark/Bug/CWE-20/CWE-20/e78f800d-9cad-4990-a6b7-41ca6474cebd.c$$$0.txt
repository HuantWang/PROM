-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_14_bad()
CWE190_Integer_Overflow__int_fscanf_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(18,20,0)
(14,24,0)
(22,9,0)
(28,26,0)
(16,24,0)
(21,5,0)
(29,6,0)
(10,12,0)
(25,24,0)
(0,15,0)
(13,22,0)
(26,5,0)
(2,23,0)
(1,21,0)
(20,22,0)
(17,22,0)
(8,26,0)
(20,12,0)
(27,29,0)
(22,20,0)
(12,24,0)
(11,15,0)
(5,29,0)
(21,29,0)
(4,23,0)
(26,12,0)
(5,26,0)
(7,12,0)
(19,5,0)
(17,15,1)
(4,15,1)
(26,12,1)
(2,4,1)
(15,11,1)
(18,13,1)
(1,5,1)
(13,17,1)
(5,26,1)
(20,18,1)
(20,12,1)
(3,21,1)
(22,20,1)
(21,1,1)
(19,23,1)
(4,22,1)
(11,0,1)
(21,5,1)
(12,10,1)
(26,28,1)
(3,23,1)
(28,8,1)
(8,19,1)
(10,7,1)
(0,12,1)
(23,2,1)
(19,23,2)
(21,23,2)
(17,15,2)
(28,23,2)
(21,5,2)
(18,15,2)
(5,26,2)
(1,23,2)
(20,15,2)
(26,12,2)
(22,20,2)
(26,23,2)
(13,15,2)
(20,12,2)
(5,23,2)
(8,23,2)
(22,15,2)
-----------------------------------
(0,globalFive)
(1,result)
(2,5)
(3,RET)
(4,globalFive)
(5,result = data * data)
(6,)
(7,data)
(8,data)
(9,)
(10,0)
(11,5)
(12,data = 0)
(13,"%d")
(14,if(globalFive==5)
(15,globalFive==5)
(16,if(globalFive==5)
(17,stdin)
(18,data)
(19,result)
(20,&data)
(21,printIntLine(result)
(22,fscanf(stdin, "%d", &data)
(23,globalFive==5)
(24,)
(25,data)
(26,data * data)
(27,result)
(28,data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^