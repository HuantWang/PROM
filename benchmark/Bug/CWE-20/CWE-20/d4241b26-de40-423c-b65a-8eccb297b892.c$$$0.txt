-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* FLAW: Use a small buffer */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    memset(data, 'A', 50-1); /* fill with 'A's */
    data[50-1] = '\0'; /* null terminate */
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
63,64
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,64
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    return data;}
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
return data;
data
data
-----joern-----
(25,18,0)
(9,23,0)
(7,32,0)
(15,27,0)
(12,32,0)
(23,9,0)
(33,15,0)
(16,15,0)
(16,10,0)
(4,13,0)
(21,20,0)
(20,21,0)
(2,25,0)
(25,2,0)
(22,27,0)
(9,20,0)
(32,33,0)
(33,27,0)
(10,16,0)
(11,2,0)
(13,15,0)
(31,23,0)
(16,34,0)
(30,22,0)
(14,10,0)
(6,16,0)
(24,21,0)
(15,34,0)
(23,31,0)
(19,13,0)
(33,32,0)
(35,34,0)
(17,22,0)
(22,34,0)
(5,34,0)
(20,9,0)
(15,23,0)
(28,33,0)
(23,15,0)
(0,10,0)
(13,27,0)
(3,5,0)
(1,20,0)
(26,16,0)
(33,5,0)
(8,15,0)
(22,15,0)
(16,27,0)
(0,6,1)
(12,28,1)
(15,23,1)
(10,14,1)
(33,27,1)
(28,16,1)
(15,27,1)
(9,20,1)
(17,22,1)
(33,15,1)
(26,13,1)
(32,7,1)
(13,4,1)
(23,9,1)
(19,15,1)
(16,27,1)
(22,15,1)
(26,25,1)
(2,11,1)
(22,27,1)
(16,15,1)
(13,27,1)
(3,33,1)
(4,19,1)
(16,10,1)
(1,8,1)
(5,3,1)
(25,2,1)
(30,5,1)
(20,21,1)
(33,32,1)
(6,26,1)
(13,15,1)
(24,1,1)
(23,31,1)
(21,24,1)
(14,0,1)
(11,13,1)
(7,12,1)
(22,30,1)
(16,10,2)
(23,9,2)
(25,13,2)
(2,13,2)
(11,13,2)
(16,27,2)
(20,21,2)
(17,22,2)
(22,27,2)
(13,27,2)
(33,15,2)
(9,20,2)
(25,2,2)
(33,27,2)
(13,15,2)
(33,32,2)
(22,15,2)
(15,23,2)
(23,31,2)
(15,27,2)
(16,15,2)
-----------------------------------
(0,50)
(1,50)
(2,-1)
(3,'\\\\0')
(4,NULL)
(5,data[50-1] = '\\\\0')
(6,'A')
(7,1)
(8,data)
(9,malloc(50*sizeof(char)
(10,50-1)
(11,1)
(12,50)
(13,data == NULL)
(14,1)
(15,data = (char *)
(16,memset(data, 'A', 50-1)
(17,RET)
(18,)
(19,data)
(20,50*sizeof(char)
(21,sizeof(char)
(22,return data;)
(23,(char *)
(24,char)
(25,exit(-1)
(26,data)
(27,char * data)
(28,data)
(29,memset(data, \'A\', 50-1)
(30,data)
(31,char *)
(32,50-1)
(33,data[50-1])
(34,)
(35,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^