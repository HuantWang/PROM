-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad()
{
    int * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
36,37
36,38
36,39
38,39
40,41
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
49,50
51,52
51,53
53,54
54,55
54,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,39,42,46,48,50,52,55,56,60,63,64,68,70
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad(){    int * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad
{    int * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(16,19,0)
(25,21,0)
(1,19,0)
(8,10,0)
(6,3,0)
(2,1,0)
(19,1,0)
(9,10,0)
(28,21,0)
(11,28,0)
(26,23,0)
(28,24,0)
(5,27,0)
(11,23,0)
(1,15,0)
(27,24,0)
(18,6,0)
(3,6,0)
(12,6,0)
(15,23,0)
(3,23,0)
(13,16,0)
(29,11,0)
(10,24,0)
(21,28,0)
(6,28,0)
(21,10,0)
(0,24,0)
(23,24,0)
(14,27,0)
(4,19,0)
(1,23,0)
(20,28,0)
(1,28,0)
(17,15,0)
(19,16,0)
(22,1,0)
(2,22,1)
(19,16,1)
(18,1,1)
(5,10,1)
(17,28,1)
(25,20,1)
(1,19,1)
(3,6,1)
(14,5,1)
(28,21,1)
(21,25,1)
(1,15,1)
(21,10,1)
(11,29,1)
(29,3,1)
(20,27,1)
(10,9,1)
(15,17,1)
(22,15,1)
(11,28,1)
(7,11,1)
(16,13,1)
(13,4,1)
(9,8,1)
(4,2,1)
(1,28,1)
(6,28,1)
(27,14,1)
(12,18,1)
(6,12,1)
(21,10,2)
(19,16,2)
(3,6,2)
(1,28,2)
(6,28,2)
(28,21,2)
(11,28,2)
(1,19,2)
(1,15,2)
-----------------------------------
(0,data)
(1,memcpy(data, source, 10*sizeof(int)
(2,source)
(3,printIntLine(data[0])
(4,10)
(5,badStatic)
(6,data[0])
(7,RET)
(8,data)
(9,NULL)
(10,data = NULL)
(11,free(data)
(12,0)
(13,int)
(14,1)
(15,source[10] = {0})
(16,sizeof(int)
(17,source)
(18,data)
(19,10*sizeof(int)
(20,data)
(21,badSource(data)
(22,data)
(23,)
(24,)
(25,data)
(26,source)
(27,badStatic = 1)
(28,data = badSource(data)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^