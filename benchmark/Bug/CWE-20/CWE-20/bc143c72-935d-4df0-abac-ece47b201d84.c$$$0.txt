-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,61,63,68,69,70,74,76
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
52,53
52,54
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    /* use the function pointer */    funcPtr(data);}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(15,17,0)
(8,15,0)
(18,6,0)
(14,24,0)
(1,17,0)
(28,33,0)
(33,17,0)
(31,5,0)
(22,33,0)
(12,3,0)
(24,15,0)
(3,31,0)
(5,31,0)
(3,12,0)
(0,11,0)
(30,17,0)
(20,5,0)
(25,17,0)
(24,17,0)
(31,3,0)
(15,5,0)
(2,23,0)
(0,26,0)
(5,20,0)
(19,8,0)
(27,23,0)
(16,27,0)
(7,8,0)
(9,15,0)
(26,0,0)
(23,17,0)
(21,3,0)
(13,12,0)
(5,15,0)
(27,15,0)
(6,17,0)
(4,26,0)
(29,27,0)
(32,6,0)
(7,15,1)
(16,0,1)
(5,31,1)
(26,4,1)
(33,22,1)
(12,13,1)
(27,29,1)
(10,24,1)
(18,32,1)
(15,5,1)
(23,2,1)
(29,16,1)
(16,8,1)
(24,15,1)
(21,9,1)
(27,15,1)
(8,19,1)
(14,23,1)
(4,8,1)
(2,27,1)
(31,3,1)
(3,12,1)
(32,33,1)
(13,21,1)
(9,6,1)
(8,15,1)
(19,7,1)
(24,14,1)
(6,18,1)
(22,28,1)
(0,26,1)
(5,20,1)
(27,15,2)
(26,8,2)
(5,31,2)
(0,8,2)
(5,20,2)
(4,8,2)
(15,5,2)
(3,12,2)
(8,15,2)
(24,15,2)
(31,3,2)
(0,26,2)
-----------------------------------
(0,exit(-1)
(1,if (data == NULL)
(2,'\\\\0')
(3,50*sizeof(char)
(4,1)
(5,(char *)
(6,data = NULL)
(7,data)
(8,data == NULL)
(9,data)
(10,RET)
(11,)
(12,sizeof(char)
(13,char)
(14,data)
(15,data = (char *)
(16,data)
(17,)
(18,NULL)
(19,NULL)
(20,char *)
(21,50)
(22,badSink)
(23,data[0] = '\\\\0')
(24,funcPtr(data)
(25,funcPtr)
(26,-1)
(27,data[0])
(28,funcPtr)
(29,0)
(30,data)
(31,malloc(50*sizeof(char)
(32,data)
(33,(*funcPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^