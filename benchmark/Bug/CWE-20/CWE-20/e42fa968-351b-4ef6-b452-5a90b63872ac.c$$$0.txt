-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = strlen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
52,58
53,54
54,55
54,56
56,57
56,58
56,59
58,59
59,60
59,61
62,63
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
98,99
99,100
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,60,61,64,68,70,72,76,79,81,86,87,90,93,94,97,103,105,108,110,114,116,120,122
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
74,75
74,76
84,85
84,86
88,89
88,90
91,92
91,93
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad(){    char * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad
{    char * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(47,25,0)
(21,39,0)
(37,18,0)
(29,7,0)
(58,25,0)
(49,39,0)
(2,39,0)
(31,25,0)
(22,57,0)
(31,56,0)
(0,7,0)
(40,43,0)
(0,40,0)
(25,31,0)
(49,8,0)
(15,13,0)
(57,6,0)
(31,37,0)
(7,43,0)
(25,41,0)
(0,25,0)
(6,57,0)
(16,1,0)
(5,40,0)
(13,17,0)
(39,24,0)
(55,40,0)
(11,38,0)
(59,41,0)
(19,35,0)
(18,23,0)
(32,29,0)
(44,17,0)
(33,43,0)
(47,7,0)
(28,52,0)
(4,23,0)
(39,52,0)
(38,16,0)
(27,7,0)
(39,49,0)
(20,0,0)
(17,52,0)
(29,24,0)
(10,29,0)
(35,24,0)
(53,43,0)
(30,47,0)
(36,7,0)
(29,49,0)
(29,25,0)
(12,6,0)
(37,31,0)
(54,57,0)
(57,13,0)
(16,38,0)
(51,25,0)
(34,52,0)
(3,24,0)
(17,13,0)
(18,37,0)
(56,31,0)
(47,40,0)
(52,40,0)
(46,24,0)
(6,24,0)
(26,18,0)
(50,58,0)
(23,18,0)
(9,40,0)
(45,58,0)
(13,40,0)
(42,40,0)
(34,48,1)
(31,37,1)
(16,38,1)
(46,13,1)
(49,39,1)
(31,56,1)
(29,25,1)
(34,16,1)
(25,31,1)
(20,6,1)
(48,7,1)
(44,15,1)
(58,50,1)
(29,7,1)
(34,58,1)
(19,49,1)
(21,29,1)
(39,2,1)
(39,24,1)
(26,51,1)
(17,44,1)
(47,25,1)
(6,24,1)
(18,23,1)
(17,52,1)
(28,34,1)
(0,20,1)
(0,7,1)
(57,54,1)
(13,17,1)
(32,10,1)
(0,25,1)
(47,7,1)
(24,3,1)
(10,6,1)
(39,52,1)
(45,25,1)
(50,45,1)
(7,27,1)
(35,19,1)
(11,58,1)
(57,13,1)
(12,24,1)
(29,32,1)
(52,28,1)
(29,24,1)
(14,47,1)
(27,36,1)
(22,12,1)
(2,21,1)
(6,57,1)
(23,4,1)
(4,26,1)
(58,25,1)
(3,46,1)
(54,22,1)
(12,35,1)
(47,30,1)
(35,24,1)
(51,48,1)
(30,0,1)
(15,52,1)
(38,11,1)
(37,18,1)
(50,48,2)
(45,48,2)
(39,24,2)
(6,6,2)
(12,6,2)
(57,6,2)
(37,48,2)
(35,6,2)
(29,24,2)
(31,37,2)
(6,24,2)
(29,25,2)
(35,24,2)
(58,48,2)
(51,48,2)
(26,48,2)
(29,7,2)
(19,6,2)
(49,39,2)
(49,6,2)
(47,25,2)
(58,25,2)
(31,56,2)
(4,48,2)
(0,7,2)
(18,23,2)
(31,48,2)
(54,6,2)
(2,6,2)
(23,48,2)
(22,6,2)
(11,58,2)
(16,38,2)
(47,7,2)
(37,18,2)
(10,6,2)
(25,48,2)
(0,25,2)
(57,13,2)
(6,57,2)
(17,52,2)
(38,58,2)
(13,17,2)
(39,52,2)
(39,6,2)
(32,6,2)
(21,6,2)
(16,58,2)
(29,6,2)
(25,31,2)
(18,48,2)
-----------------------------------
(0,printLine(data)
(1,)
(2,i)
(3,0)
(4,char)
(5,source)
(6,i < sourceLen + 1)
(7,data = NULL)
(8,)
(9,sourceLen)
(10,data)
(11,1)
(12,i)
(13,sourceLen = strlen(source)
(14,RET)
(15,sourceLen)
(16,exit(-1)
(17,strlen(source)
(18,10*sizeof(char)
(19,i)
(20,data)
(21,source)
(22,sourceLen)
(23,sizeof(char)
(24,i = 0)
(25,data = (char *)
(26,10)
(27,NULL)
(28,SRC_STRING)
(29,data[i])
(30,data)
(31,(char *)
(32,i)
(33,data)
(34,source)
(35,i++)
(36,data)
(37,malloc(10*sizeof(char)
(38,-1)
(39,source[i])
(40,)
(41,)
(42,i)
(43,)
(44,source)
(45,data)
(46,i)
(47,free(data)
(48,1)
(49,data[i] = source[i])
(50,NULL)
(51,data)
(52,source[10+1] = SRC_STRING)
(53,if(1)
(54,1)
(55,for (i = 0; i < sourceLen + 1; i++)
(56,char *)
(57,sourceLen + 1)
(58,data == NULL)
(59,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^