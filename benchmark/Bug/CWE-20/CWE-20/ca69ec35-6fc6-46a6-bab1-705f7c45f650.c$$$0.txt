-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(11,33,0)
(19,39,0)
(45,2,0)
(45,29,0)
(5,7,0)
(37,2,0)
(36,42,0)
(34,12,0)
(0,10,0)
(0,40,0)
(5,15,0)
(30,40,0)
(20,24,0)
(10,0,0)
(22,29,0)
(7,33,0)
(35,2,0)
(38,36,0)
(0,42,0)
(44,18,0)
(8,18,0)
(24,30,0)
(39,7,0)
(46,29,0)
(23,39,0)
(42,13,0)
(43,42,0)
(32,30,0)
(2,45,0)
(40,30,0)
(30,24,0)
(29,46,0)
(2,39,0)
(12,45,0)
(17,5,0)
(15,33,0)
(16,33,0)
(28,13,0)
(44,3,0)
(25,7,0)
(25,15,0)
(42,0,0)
(27,9,0)
(41,15,0)
(4,9,0)
(25,42,0)
(29,45,0)
(5,42,0)
(2,42,0)
(14,36,0)
(2,15,0)
(6,7,0)
(45,12,0)
(21,46,0)
(40,0,0)
(1,15,0)
(2,7,0)
(26,25,0)
(46,39,0)
(18,44,0)
(34,29,1)
(23,9,1)
(0,40,1)
(43,9,1)
(32,43,1)
(22,46,1)
(39,19,1)
(23,44,1)
(12,34,1)
(29,22,1)
(24,20,1)
(26,5,1)
(8,36,1)
(44,18,1)
(15,1,1)
(23,36,1)
(18,8,1)
(42,0,1)
(9,4,1)
(46,21,1)
(5,15,1)
(36,42,1)
(19,23,1)
(27,15,1)
(14,42,1)
(25,26,1)
(1,41,1)
(2,15,1)
(40,30,1)
(2,45,1)
(36,38,1)
(38,14,1)
(17,2,1)
(21,37,1)
(31,25,1)
(45,12,1)
(5,17,1)
(25,15,1)
(5,42,1)
(20,32,1)
(25,42,1)
(30,24,1)
(37,35,1)
(35,39,1)
(46,39,1)
(0,10,1)
(4,27,1)
(2,42,1)
(29,46,1)
(2,39,1)
(45,29,1)
(45,12,2)
(18,36,2)
(5,15,2)
(0,10,2)
(2,42,2)
(38,9,2)
(36,42,2)
(14,9,2)
(30,9,2)
(29,46,2)
(42,9,2)
(46,39,2)
(25,15,2)
(2,15,2)
(0,40,2)
(5,42,2)
(20,9,2)
(30,24,2)
(44,18,2)
(24,9,2)
(0,9,2)
(36,9,2)
(2,45,2)
(43,9,2)
(42,0,2)
(44,36,2)
(45,29,2)
(2,39,2)
(40,30,2)
(8,36,2)
(40,9,2)
(25,42,2)
(32,9,2)
-----------------------------------
(0,(char *)
(1,NULL)
(2,memcpy(data, source, (strlen(source)
(3,)
(4,5)
(5,printLine(data)
(6,source)
(7,)
(8,1)
(9,staticFive==5)
(10,char *)
(11,if(staticFive==5)
(12,sizeof(char)
(13,)
(14,data)
(15,data = NULL)
(16,data)
(17,data)
(18,-1)
(19,SRC_STRING)
(20,char)
(21,source)
(22,1)
(23,source)
(24,sizeof(char)
(25,free(data)
(26,data)
(27,staticFive)
(28,if (data == NULL)
(29,strlen(source)
(30,10*sizeof(char)
(31,RET)
(32,10)
(33,)
(34,char)
(35,data)
(36,data == NULL)
(37,source)
(38,NULL)
(39,source[10+1] = SRC_STRING)
(40,malloc(10*sizeof(char)
(41,data)
(42,data = (char *)
(43,data)
(44,exit(-1)
(45,(strlen(source)
(46,strlen(source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^