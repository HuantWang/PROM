-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    else
    {
        /* FIX: Use a large buffer */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        size_t i, destLen;
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        destLen = strlen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
86,88
88,89
89,90
89,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
112,113
112,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
120,122
124,125
124,126
124,127
124,128
124,129
124,130
124,131
124,132
124,133
125,126
126,127
126,128
126,129
127,128
129,130
131,132
133,134
134,135
134,136
136,137
136,138
138,139
140,141
141,142
141,143
141,144
141,145
142,143
144,145
147,148
147,149
150,151
151,152
151,153
152,153
152,154
153,154
155,156
155,157
159,160
160,161
160,162
161,162
163,164
163,165
164,165
166,167
168,169
168,170
168,171
168,172
169,170
170,171
170,172
171,172
174,175
174,176
175,176
177,178
179,180
180,181
182,183
183,184
184,185
184,186
185,186
185,187
186,187
188,189
190,191
190,192
191,192
193,194
195,196
196,197
196,198
197,198
197,199
198,199
200,201
200,202
204,205
205,206
205,207
206,207
208,209
210,211
211,212
211,213
212,213
214,215
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,77,80,82,85,87,90,91,95,97,102,104,108,110,111,113,114,119,121,122,123,128,130,132,135,137,139,143,145,146,148,149,154,156,157,158,162,165,167,172,173,176,178,181,187,189,192,194,199,201,202,203,207,209,213,215
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
75,76
75,77
86,87
86,88
93,94
93,95
112,113
112,114
116,117
116,118
120,121
120,122
147,148
147,149
151,152
151,153
155,156
155,157
160,161
160,162
170,171
170,172
174,175
174,176
184,185
184,186
196,197
196,198
200,201
200,202
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_loop_12_bad()
CWE126_Buffer_Overread__malloc_char_loop_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Use a large buffer */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        /* FIX: Use a large buffer */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(1,41,0)
(13,54,0)
(43,114,0)
(9,34,0)
(106,0,0)
(74,14,0)
(6,3,0)
(30,32,0)
(48,103,0)
(42,5,0)
(11,110,0)
(0,3,0)
(56,123,0)
(3,0,0)
(12,109,0)
(110,97,0)
(77,104,0)
(117,81,0)
(10,127,0)
(54,14,0)
(35,14,0)
(58,120,0)
(57,64,0)
(78,33,0)
(123,127,0)
(109,12,0)
(2,61,0)
(83,110,0)
(5,67,0)
(27,0,0)
(91,15,0)
(122,100,0)
(34,104,0)
(103,69,0)
(37,21,0)
(81,127,0)
(34,9,0)
(104,34,0)
(49,59,0)
(10,24,0)
(53,10,0)
(18,59,0)
(52,29,0)
(73,3,0)
(93,41,0)
(33,26,0)
(14,29,0)
(33,127,0)
(48,81,0)
(100,119,0)
(62,69,0)
(125,127,0)
(16,125,0)
(112,97,0)
(79,63,0)
(125,97,0)
(108,51,0)
(64,29,0)
(110,114,0)
(94,103,0)
(127,26,0)
(8,77,0)
(31,12,0)
(125,16,0)
(32,1,0)
(33,63,0)
(65,24,0)
(12,127,0)
(72,26,0)
(87,109,0)
(120,58,0)
(15,14,0)
(68,1,0)
(51,45,0)
(76,82,0)
(21,97,0)
(100,122,0)
(85,67,0)
(25,32,0)
(63,33,0)
(81,117,0)
(55,42,0)
(28,58,0)
(23,55,0)
(10,14,0)
(102,122,0)
(20,97,0)
(9,71,0)
(104,77,0)
(50,104,0)
(120,54,0)
(24,67,0)
(38,112,0)
(12,72,0)
(41,14,0)
(3,24,0)
(4,5,0)
(115,127,0)
(80,64,0)
(95,14,0)
(112,16,0)
(1,32,0)
(3,67,0)
(103,48,0)
(7,72,0)
(113,109,0)
(71,9,0)
(46,55,0)
(81,48,0)
(82,59,0)
(39,125,0)
(16,44,0)
(90,63,0)
(66,120,0)
(114,61,0)
(121,82,0)
(127,81,0)
(47,88,0)
(42,55,0)
(111,97,0)
(75,26,0)
(99,42,0)
(22,33,0)
(92,88,0)
(84,108,0)
(70,123,0)
(105,125,0)
(126,29,0)
(19,58,0)
(114,14,0)
(125,24,0)
(42,24,0)
(116,14,0)
(82,14,0)
(51,108,0)
(61,114,0)
(9,24,0)
(59,82,0)
(69,103,0)
(24,9,0)
(88,24,0)
(17,112,0)
(23,99,1)
(112,97,1)
(127,81,1)
(58,19,1)
(121,76,1)
(110,11,1)
(94,115,1)
(49,121,1)
(123,70,1)
(120,58,1)
(9,34,1)
(33,127,1)
(38,17,1)
(56,127,1)
(30,68,1)
(39,105,1)
(10,24,1)
(109,113,1)
(83,97,1)
(92,47,1)
(15,91,1)
(6,100,1)
(25,30,1)
(41,93,1)
(99,3,1)
(123,127,1)
(42,55,1)
(48,103,1)
(21,97,1)
(46,23,1)
(110,114,1)
(76,72,1)
(104,77,1)
(64,80,1)
(10,53,1)
(32,25,1)
(3,24,1)
(108,84,1)
(8,50,1)
(83,21,1)
(103,69,1)
(81,48,1)
(42,24,1)
(125,127,1)
(69,62,1)
(88,92,1)
(28,66,1)
(20,114,1)
(102,88,1)
(55,46,1)
(0,106,1)
(2,43,1)
(114,61,1)
(100,122,1)
(50,65,1)
(43,54,1)
(115,107,1)
(9,71,1)
(37,16,1)
(86,10,1)
(65,107,1)
(21,37,1)
(22,51,1)
(22,123,1)
(125,97,1)
(90,79,1)
(88,24,1)
(110,97,1)
(12,109,1)
(87,31,1)
(6,88,1)
(97,111,1)
(77,8,1)
(5,4,1)
(61,2,1)
(13,120,1)
(125,24,1)
(76,5,1)
(34,104,1)
(18,49,1)
(111,20,1)
(7,12,1)
(107,64,1)
(12,127,1)
(70,56,1)
(31,33,1)
(80,57,1)
(54,13,1)
(91,41,1)
(4,42,1)
(53,15,1)
(33,63,1)
(27,73,1)
(73,6,1)
(79,78,1)
(19,28,1)
(51,108,1)
(112,38,1)
(106,27,1)
(66,82,1)
(62,94,1)
(10,127,1)
(84,123,1)
(11,83,1)
(47,24,1)
(63,90,1)
(17,110,1)
(3,0,1)
(125,39,1)
(72,7,1)
(16,125,1)
(113,87,1)
(59,18,1)
(81,117,1)
(82,59,1)
(93,1,1)
(68,110,1)
(24,9,1)
(1,32,1)
(78,22,1)
(105,112,1)
(122,102,1)
(88,107,2)
(0,107,2)
(110,97,2)
(5,107,2)
(10,24,2)
(123,127,2)
(12,109,2)
(104,77,2)
(79,107,2)
(4,107,2)
(6,107,2)
(3,107,2)
(120,58,2)
(115,107,2)
(81,107,2)
(16,125,2)
(11,110,2)
(125,127,2)
(113,107,2)
(47,107,2)
(103,69,2)
(39,110,2)
(48,103,2)
(42,24,2)
(9,107,2)
(46,107,2)
(100,122,2)
(63,107,2)
(103,107,2)
(33,107,2)
(50,107,2)
(3,0,2)
(69,107,2)
(77,107,2)
(27,107,2)
(100,88,2)
(105,110,2)
(62,107,2)
(78,107,2)
(110,110,2)
(73,107,2)
(24,9,2)
(127,107,2)
(17,110,2)
(51,108,2)
(3,24,2)
(37,110,2)
(16,110,2)
(21,97,2)
(24,107,2)
(56,107,2)
(12,107,2)
(23,107,2)
(83,110,2)
(9,71,2)
(106,107,2)
(48,107,2)
(42,55,2)
(33,63,2)
(72,107,2)
(33,127,2)
(1,32,2)
(92,107,2)
(82,59,2)
(112,110,2)
(31,107,2)
(87,107,2)
(9,34,2)
(38,110,2)
(110,114,2)
(65,107,2)
(90,107,2)
(125,97,2)
(81,117,2)
(22,107,2)
(88,24,2)
(10,127,2)
(104,107,2)
(102,88,2)
(55,107,2)
(7,107,2)
(122,88,2)
(12,127,2)
(94,107,2)
(108,123,2)
(99,107,2)
(125,24,2)
(70,107,2)
(114,61,2)
(8,107,2)
(112,97,2)
(109,107,2)
(125,110,2)
(127,81,2)
(34,104,2)
(51,123,2)
(84,123,2)
(21,110,2)
(81,48,2)
(123,107,2)
(34,107,2)
(42,107,2)
-----------------------------------
(0,100-1)
(1,dest[100-1])
(2,dest)
(3,memset(data, \'A\', 100-1)
(4,\'\\\\0\')
(5,data[100-1] = \'\\\\0\')
(6,data)
(7,\'\\\\0\')
(8,char)
(9,(char *)
(10,free(data)
(11,destLen)
(12,data[50-1])
(13,'\\\\0')
(14,)
(15,printLine(dest)
(16,dest[i] = data[i])
(17,dest)
(18,1)
(19,1)
(20,i)
(21,i++)
(22,data)
(23,100)
(24,data = (char *)
(25,1)
(26,)
(27,100)
(28,100)
(29,)
(30,100)
(31,data)
(32,100-1)
(33,memset(data, \'A\', 50-1)
(34,malloc(100*sizeof(char)
(35,i)
(36,'\\\\0')
(37,i)
(38,i)
(39,i)
(40,'\\\\0')
(41,dest[100-1] = '\\\\0')
(42,data[100-1])
(43,destLen)
(44,)
(45,)
(46,1)
(47,data)
(48,malloc(50*sizeof(char)
(49,100)
(50,100)
(51,exit(-1)
(52,if(globalReturnsTrueOrFalse()
(53,data)
(54,dest[100-1] = '\\\\0')
(55,100-1)
(56,data)
(57,data)
(58,100-1)
(59,100-1)
(60,memset(data, 'A', 50-1)
(61,strlen(dest)
(62,char)
(63,50-1)
(64,data = NULL)
(65,data)
(66,dest)
(67,)
(68,dest)
(69,sizeof(char)
(70,NULL)
(71,char *)
(72,data[50-1] = '\\\\0')
(73,\'A\')
(74,dest)
(75,if (data == NULL)
(76,dest)
(77,sizeof(char)
(78,\'A\')
(79,50)
(80,NULL)
(81,(char *)
(82,memset(dest, \'C\', 100-1)
(83,i)
(84,1)
(85,if (data == NULL)
(86,RET)
(87,50)
(88,data == NULL)
(89,memset(dest, 'C', 100-1)
(90,1)
(91,dest)
(92,NULL)
(93,'\\\\0')
(94,50)
(95,for (i = 0; i < destLen; i++)
(96,memset(data, 'A', 100-1)
(97,i = 0)
(98,'A')
(99,data)
(100,exit(-1)
(101,'A')
(102,1)
(103,50*sizeof(char)
(104,100*sizeof(char)
(105,data)
(106,1)
(107,globalReturnsTrueOrFalse()
(108,-1)
(109,50-1)
(110,i < destLen)
(111,0)
(112,dest[i])
(113,1)
(114,destLen = strlen(dest)
(115,data)
(116,destLen)
(117,char *)
(118,data[50-1] = \'\\\\0\')
(119,)
(120,dest[100-1])
(121,'C')
(122,-1)
(123,data == NULL)
(124,data[100-1] = '\\\\0')
(125,data[i])
(126,data)
(127,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^