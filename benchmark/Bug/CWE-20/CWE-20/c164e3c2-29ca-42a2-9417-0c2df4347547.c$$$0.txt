-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = strlen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
66,69
68,69
69,70
69,71
72,73
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
108,109
109,110
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,54,55,59,60,61,65,67,70,71,74,78,80,82,86,89,91,96,97,100,103,104,107,113,115,118,120,124,126,130,132
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
69,70
69,71
84,85
84,86
94,95
94,96
98,99
98,100
101,102
101,103
110,111
110,112
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,58,0)
(14,32,0)
(17,16,0)
(4,8,0)
(31,28,0)
(32,37,0)
(62,58,0)
(49,17,0)
(46,19,0)
(52,17,0)
(49,23,0)
(42,16,0)
(47,25,0)
(21,34,0)
(62,25,0)
(9,26,0)
(34,21,0)
(5,12,0)
(45,34,0)
(7,17,0)
(33,6,0)
(17,49,0)
(11,37,0)
(19,46,0)
(32,25,0)
(26,37,0)
(53,50,0)
(32,53,0)
(30,28,0)
(61,58,0)
(65,6,0)
(15,18,0)
(37,50,0)
(17,58,0)
(13,25,0)
(19,34,0)
(44,21,0)
(56,65,0)
(10,53,0)
(59,16,0)
(54,28,0)
(8,4,0)
(21,16,0)
(3,50,0)
(6,65,0)
(41,53,0)
(26,53,0)
(20,53,0)
(0,46,0)
(1,6,0)
(29,28,0)
(6,33,0)
(35,62,0)
(57,53,0)
(12,25,0)
(55,62,0)
(47,36,0)
(64,19,0)
(48,12,0)
(2,19,0)
(22,50,0)
(46,58,0)
(33,47,0)
(62,49,0)
(26,25,0)
(25,28,0)
(34,53,0)
(39,27,0)
(38,28,0)
(27,28,0)
(62,37,0)
(25,47,0)
(63,4,0)
(16,53,0)
(24,37,0)
(8,51,0)
(36,47,0)
(47,33,0)
(60,58,0)
(11,24,1)
(32,37,1)
(39,43,1)
(0,58,1)
(59,42,1)
(43,37,1)
(54,8,1)
(47,33,1)
(12,25,1)
(1,13,1)
(12,48,1)
(25,47,1)
(5,25,1)
(18,58,1)
(49,17,1)
(21,44,1)
(26,37,1)
(19,34,1)
(47,36,1)
(60,61,1)
(62,37,1)
(9,46,1)
(62,58,1)
(46,58,1)
(17,16,1)
(48,5,1)
(40,32,1)
(17,52,1)
(54,12,1)
(64,0,1)
(33,6,1)
(37,11,1)
(6,65,1)
(32,14,1)
(0,18,1)
(15,49,1)
(26,9,1)
(16,59,1)
(34,21,1)
(58,60,1)
(44,45,1)
(65,56,1)
(62,35,1)
(35,55,1)
(42,54,1)
(62,25,1)
(52,7,1)
(32,25,1)
(17,58,1)
(46,19,1)
(26,25,1)
(27,39,1)
(18,15,1)
(61,34,1)
(55,46,1)
(13,43,1)
(29,27,1)
(2,64,1)
(4,63,1)
(7,62,1)
(14,26,1)
(45,16,1)
(63,12,1)
(56,1,1)
(21,16,1)
(8,4,1)
(19,2,1)
(42,29,1)
(4,12,2)
(21,16,2)
(18,58,2)
(46,19,2)
(13,43,2)
(19,46,2)
(2,46,2)
(8,12,2)
(26,25,2)
(17,16,2)
(25,43,2)
(55,46,2)
(46,46,2)
(62,37,2)
(12,43,2)
(19,34,2)
(46,58,2)
(1,43,2)
(63,12,2)
(47,33,2)
(18,46,2)
(15,46,2)
(7,46,2)
(47,36,2)
(17,46,2)
(49,17,2)
(33,43,2)
(27,43,2)
(65,43,2)
(64,46,2)
(47,43,2)
(34,21,2)
(49,46,2)
(25,47,2)
(54,43,2)
(35,46,2)
(17,58,2)
(32,37,2)
(62,58,2)
(6,43,2)
(32,25,2)
(62,25,2)
(39,43,2)
(48,43,2)
(29,43,2)
(33,6,2)
(0,46,2)
(56,43,2)
(5,43,2)
(8,4,2)
(52,46,2)
(62,46,2)
(6,65,2)
(26,37,2)
(12,25,2)
-----------------------------------
(0,i)
(1,10)
(2,1)
(3,switch(6)
(4,-1)
(5,data)
(6,10*sizeof(char)
(7,source)
(8,exit(-1)
(9,data)
(10,sourceLen)
(11,NULL)
(12,data == NULL)
(13,data)
(14,data)
(15,i)
(16,source[10+1] = SRC_STRING)
(17,source[i])
(18,i++)
(19,sourceLen + 1)
(20,for (i = 0; i < sourceLen + 1; i++)
(21,strlen(source)
(22,data)
(23,)
(24,data)
(25,data = (char *)
(26,printLine(data)
(27,printLine("Benign, fixed string")
(28,)
(29,break;)
(30,default:)
(31,if (data == NULL)
(32,free(data)
(33,malloc(10*sizeof(char)
(34,sourceLen = strlen(source)
(35,i)
(36,char *)
(37,data = NULL)
(38,case 6:)
(39,"Benign, fixed string")
(40,RET)
(41,i)
(42,source)
(43,6)
(44,source)
(45,sourceLen)
(46,i < sourceLen + 1)
(47,(char *)
(48,NULL)
(49,data[i] = source[i])
(50,)
(51,)
(52,i)
(53,)
(54,break;)
(55,data)
(56,char)
(57,source)
(58,i = 0)
(59,SRC_STRING)
(60,0)
(61,i)
(62,data[i])
(63,1)
(64,sourceLen)
(65,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^