-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_10_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalTrue)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
126,128
127,128
128,129
128,130
130,131
130,132
130,133
130,134
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
144,145
145,146
145,147
145,148
146,147
148,149
150,151
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,129,131,132,133,137,139,141,143,147,149,151
-----computeFrom-----
23,24
23,25
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_10_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_console_w32_execv_10_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_10_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalTrue
globalTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(4,26,0)
(53,72,0)
(6,78,0)
(48,73,0)
(23,73,0)
(15,4,0)
(18,2,0)
(60,6,0)
(33,76,0)
(58,71,0)
(21,76,0)
(64,69,0)
(71,58,0)
(13,35,0)
(72,69,0)
(16,20,0)
(29,58,0)
(70,75,0)
(21,44,0)
(66,44,0)
(20,58,0)
(51,71,0)
(4,24,0)
(64,21,0)
(46,52,0)
(58,42,0)
(40,21,0)
(11,28,0)
(69,55,0)
(44,76,0)
(42,58,0)
(48,21,0)
(67,73,0)
(26,65,0)
(42,72,0)
(68,26,0)
(55,49,0)
(3,42,0)
(74,27,0)
(73,26,0)
(25,21,0)
(59,37,0)
(10,44,0)
(57,36,0)
(71,69,0)
(48,75,0)
(38,9,0)
(24,4,0)
(1,24,0)
(37,26,0)
(63,74,0)
(56,55,0)
(75,70,0)
(70,68,0)
(72,42,0)
(24,28,0)
(7,75,0)
(52,78,0)
(12,69,0)
(26,37,0)
(54,76,0)
(36,69,0)
(69,64,0)
(36,2,0)
(31,71,0)
(5,6,0)
(78,76,0)
(61,4,0)
(45,65,0)
(17,48,0)
(14,74,0)
(9,27,0)
(22,26,0)
(19,68,0)
(58,20,0)
(32,78,0)
(47,68,0)
(28,50,0)
(75,48,0)
(14,21,0)
(68,70,0)
(34,64,0)
(43,14,0)
(37,21,0)
(30,14,0)
(71,21,0)
(39,55,0)
(2,36,0)
(0,36,0)
(77,76,0)
(24,21,0)
(8,72,0)
(42,3,0)
(73,48,0)
(14,69,0)
(6,52,0)
(68,26,1)
(47,26,1)
(58,42,1)
(2,18,1)
(74,63,1)
(2,36,1)
(70,68,1)
(64,21,1)
(21,25,1)
(17,68,1)
(28,11,1)
(75,7,1)
(15,61,1)
(52,46,1)
(6,60,1)
(24,21,1)
(43,9,1)
(26,37,1)
(0,69,1)
(12,41,1)
(41,21,1)
(46,41,1)
(61,1,1)
(59,22,1)
(72,69,1)
(9,38,1)
(20,58,1)
(75,48,1)
(29,42,1)
(36,69,1)
(25,40,1)
(7,48,1)
(58,29,1)
(19,47,1)
(4,15,1)
(34,12,1)
(46,28,1)
(14,21,1)
(63,14,1)
(42,3,1)
(71,21,1)
(51,2,1)
(21,44,1)
(42,72,1)
(70,75,1)
(8,71,1)
(4,26,1)
(30,43,1)
(60,5,1)
(38,20,1)
(24,4,1)
(44,10,1)
(46,2,1)
(71,31,1)
(40,44,1)
(68,19,1)
(46,70,1)
(31,51,1)
(23,67,1)
(64,34,1)
(10,66,1)
(48,73,1)
(62,6,1)
(20,16,1)
(58,71,1)
(73,26,1)
(5,52,1)
(6,52,1)
(73,23,1)
(14,30,1)
(22,20,1)
(69,64,1)
(72,53,1)
(46,74,1)
(36,57,1)
(37,59,1)
(57,0,1)
(11,24,1)
(18,36,1)
(48,21,1)
(16,58,1)
(37,21,1)
(1,70,1)
(53,8,1)
(14,69,1)
(71,69,1)
(67,17,1)
(19,20,2)
(74,20,2)
(4,70,2)
(68,20,2)
(47,20,2)
(51,2,2)
(58,42,2)
(6,52,2)
(15,70,2)
(31,2,2)
(8,2,2)
(64,21,2)
(71,2,2)
(73,26,2)
(22,20,2)
(42,2,2)
(36,41,2)
(14,20,2)
(68,26,2)
(57,41,2)
(72,2,2)
(70,75,2)
(73,68,2)
(58,71,2)
(2,41,2)
(75,68,2)
(72,69,2)
(26,20,2)
(29,2,2)
(69,64,2)
(9,20,2)
(17,68,2)
(61,70,2)
(7,68,2)
(38,20,2)
(1,70,2)
(69,41,2)
(63,20,2)
(20,58,2)
(20,2,2)
(18,41,2)
(36,69,2)
(70,68,2)
(70,20,2)
(12,41,2)
(58,2,2)
(4,26,2)
(14,69,2)
(48,73,2)
(59,20,2)
(28,70,2)
(23,68,2)
(42,3,2)
(43,20,2)
(0,41,2)
(24,70,2)
(71,69,2)
(24,21,2)
(11,70,2)
(48,21,2)
(37,21,2)
(37,20,2)
(14,21,2)
(64,41,2)
(21,44,2)
(2,36,2)
(26,37,2)
(75,48,2)
(16,2,2)
(30,20,2)
(71,21,2)
(53,2,2)
(34,41,2)
(42,72,2)
(48,68,2)
(24,4,2)
(67,68,2)
-----------------------------------
(0,100)
(1,data)
(2,100-dataLen > 1)
(3,int)
(4,dataLen-1)
(5,COMMAND_INT_PATH)
(6,EXECV(COMMAND_INT_PATH, args)
(7,\\\'\\\\n\\\')
(8,100)
(9,printLine("fgets()
(10,COMMAND_ARG2)
(11,\\\'\\\\0\\\')
(12,dataLen)
(13,if (fgets(data+dataLen, (int)
(14,data[dataLen])
(15,1)
(16,NULL)
(17,data)
(18,1)
(19,0)
(20,fgets(data+dataLen, (int)
(21,data = dataBuffer)
(22,dataLen)
(23,1)
(24,data[dataLen-1])
(25,dataBuffer)
(26,dataLen = strlen(data)
(27,)
(28,data[dataLen-1] = \\\'\\\\0\\\')
(29,stdin)
(30,dataLen)
(31,dataLen)
(32,args)
(33,dataBuffer)
(34,data)
(35,)
(36,100-dataLen)
(37,strlen(data)
(38,"fgets()
(39,dataLen)
(40,data)
(41,globalTrue)
(42,(int)
(43,data)
(44,dataBuffer[100] = COMMAND_ARG2)
(45,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(46,args)
(47,dataLen)
(48,data[dataLen-1])
(49,)
(50,)
(51,data)
(52,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(53,dataLen)
(54,data)
(55,)
(56,if (100-dataLen > 1)
(57,dataLen)
(58,fgets(data+dataLen, (int)
(59,data)
(60,args)
(61,dataLen)
(62,RET)
(63,\\\'\\\\0\\\')
(64,strlen(data)
(65,)
(66,dataBuffer)
(67,dataLen)
(68,dataLen > 0)
(69,dataLen = strlen(data)
(70,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(71,data+dataLen)
(72,100-dataLen)
(73,dataLen-1)
(74,data[dataLen] = \\\'\\\\0\\\')
(75,data[dataLen-1] == \\\'\\\\n\\\')
(76,)
(77,if(globalTrue)
(78,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^