-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,78,80,81,85,87,91,93
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(14,19,0)
(8,2,0)
(8,15,0)
(2,28,0)
(23,2,0)
(37,11,0)
(30,15,0)
(24,8,0)
(15,0,0)
(41,28,0)
(0,15,0)
(13,8,0)
(26,43,0)
(28,41,0)
(12,23,0)
(6,11,0)
(34,10,0)
(20,41,0)
(8,17,0)
(28,2,0)
(18,16,0)
(22,0,0)
(2,38,0)
(8,40,0)
(25,11,0)
(16,2,0)
(36,40,0)
(23,25,0)
(4,38,0)
(20,19,0)
(3,2,0)
(8,25,0)
(39,35,0)
(33,25,0)
(40,17,0)
(10,1,0)
(41,20,0)
(0,40,0)
(1,10,0)
(19,20,0)
(32,20,0)
(21,35,0)
(23,17,0)
(43,2,0)
(28,9,0)
(7,25,0)
(15,8,0)
(16,17,0)
(1,29,0)
(27,17,0)
(31,43,0)
(5,40,0)
(9,28,0)
(17,11,0)
(16,25,0)
(40,36,1)
(43,26,1)
(41,20,1)
(8,2,1)
(5,1,1)
(36,5,1)
(12,8,1)
(28,41,1)
(1,10,1)
(10,34,1)
(15,30,1)
(16,2,1)
(32,3,1)
(28,9,1)
(23,2,1)
(30,0,1)
(26,31,1)
(8,25,1)
(31,2,1)
(19,14,1)
(8,40,1)
(23,25,1)
(18,23,1)
(5,43,1)
(8,15,1)
(34,43,1)
(2,28,1)
(13,40,1)
(0,22,1)
(16,25,1)
(5,35,1)
(25,7,1)
(35,21,1)
(22,24,1)
(39,25,1)
(42,16,1)
(20,19,1)
(3,35,1)
(21,39,1)
(0,40,1)
(14,32,1)
(24,13,1)
(16,18,1)
(7,33,1)
(15,0,1)
(43,2,1)
(23,12,1)
(34,43,2)
(32,35,2)
(8,40,2)
(16,2,2)
(43,2,2)
(23,25,2)
(41,20,2)
(20,35,2)
(28,41,2)
(8,2,2)
(16,25,2)
(31,35,2)
(20,19,2)
(0,40,2)
(15,0,2)
(2,35,2)
(2,28,2)
(28,9,2)
(28,35,2)
(43,35,2)
(8,25,2)
(23,2,2)
(41,35,2)
(3,35,2)
(26,35,2)
(1,10,2)
(19,35,2)
(14,35,2)
(1,43,2)
(10,43,2)
(8,15,2)
-----------------------------------
(0,wcslen(source)
(1,exit(-1)
(2,data = (wchar_t *)
(3,data)
(4,if (data == NULL)
(5,source)
(6,data)
(7,NULL)
(8,wcsncpy(data, source, wcslen(source)
(9,wchar_t *)
(10,-1)
(11,)
(12,data)
(13,data)
(14,wchar_t)
(15,wcslen(source)
(16,free(data)
(17,)
(18,data)
(19,sizeof(wchar_t)
(20,10*sizeof(wchar_t)
(21,5)
(22,source)
(23,printWLine(data)
(24,source)
(25,data = NULL)
(26,NULL)
(27,source)
(28,(wchar_t *)
(29,)
(30,1)
(31,data)
(32,10)
(33,data)
(34,1)
(35,5==5)
(36,SRC_STRING)
(37,if(5==5)
(38,)
(39,5)
(40,source[10+1] = SRC_STRING)
(41,malloc(10*sizeof(wchar_t)
(42,RET)
(43,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^