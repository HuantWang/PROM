-----label-----
1
-----code-----
void CWE127_Buffer_Underread__malloc_char_memcpy_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    else
    {
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FIX: Set data pointer to the allocated memory buffer */
            data = dataBuffer;
        }
    }
    {
        char dest[100];
        memset(dest, 'C', 100-1); /* fill with 'C's */
        dest[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */
        memcpy(dest, data, 100*sizeof(char));
        /* Ensure null termination */
        dest[100-1] = '\0';
        printLine(dest);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
86,87
86,88
86,89
86,90
86,91
87,88
88,89
88,90
90,91
90,92
90,93
93,94
94,95
94,96
95,96
95,97
97,98
99,100
99,101
100,101
102,103
102,104
104,105
105,106
105,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
128,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
140,141
141,142
141,143
142,143
144,145
146,147
146,148
146,149
146,150
146,151
146,152
147,148
148,149
148,150
150,151
150,152
152,153
154,155
155,156
155,157
155,158
155,159
156,157
158,159
161,162
161,163
164,165
165,166
165,167
166,167
166,168
167,168
169,170
169,171
173,174
174,175
174,176
174,177
174,178
175,176
177,178
179,180
181,182
181,183
183,184
184,185
184,186
187,188
188,189
188,190
189,190
189,191
190,191
192,193
192,194
196,197
197,198
197,199
198,199
200,201
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,89,91,92,96,98,101,103,106,107,111,113,118,120,124,126,127,129,130,135,137,138,139,143,145,149,151,153,157,159,160,162,163,168,170,171,172,176,178,180,182,185,186,191,193,194,195,199,201
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
102,103
102,104
109,110
109,111
128,129
128,130
132,133
132,134
136,137
136,138
141,142
141,143
161,162
161,163
165,166
165,167
169,170
169,171
181,182
181,183
188,189
188,190
192,193
192,194
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE127_Buffer_Underread__malloc_char_memcpy_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }    {        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        memcpy(dest, data, 100*sizeof(char));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE127_Buffer_Underread__malloc_char_memcpy_12_bad()
CWE127_Buffer_Underread__malloc_char_memcpy_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }    {        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        memcpy(dest, data, 100*sizeof(char));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    else    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
{        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }    }
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FIX: Set data pointer to the allocated memory buffer */            data = dataBuffer;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char dest[100];        memset(dest, 'C', 100-1); /* fill with 'C's */        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */        memcpy(dest, data, 100*sizeof(char));        /* Ensure null termination */        dest[100-1] = '\0';        printLine(dest);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memcpy(dest, data, 100*sizeof(char));
memcpy(dest, data, 100*sizeof(char))
memcpy
memcpy
dest
dest
data
data
100*sizeof(char)
100
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,69,0)
(98,4,0)
(47,46,0)
(100,88,0)
(117,17,0)
(7,88,0)
(59,74,0)
(45,4,0)
(102,83,0)
(43,87,0)
(34,69,0)
(96,57,0)
(65,15,0)
(5,74,0)
(12,88,0)
(37,78,0)
(23,24,0)
(38,14,0)
(91,87,0)
(90,75,0)
(86,36,0)
(40,12,0)
(12,43,0)
(9,48,0)
(17,46,0)
(69,42,0)
(121,4,0)
(89,62,0)
(15,4,0)
(44,11,0)
(101,74,0)
(13,75,0)
(120,48,0)
(17,75,0)
(25,75,0)
(16,15,0)
(88,55,0)
(28,16,0)
(44,58,0)
(114,89,0)
(72,33,0)
(115,42,0)
(58,44,0)
(31,58,0)
(6,47,0)
(87,23,0)
(64,80,0)
(61,0,0)
(1,12,0)
(62,89,0)
(56,66,0)
(48,15,0)
(20,46,0)
(46,75,0)
(50,95,0)
(36,102,0)
(46,20,0)
(113,46,0)
(24,23,0)
(18,13,0)
(102,43,0)
(17,33,0)
(83,88,0)
(22,68,0)
(33,17,0)
(118,27,0)
(41,37,0)
(94,120,0)
(92,15,0)
(107,62,0)
(74,59,0)
(24,68,0)
(102,36,0)
(3,81,0)
(62,16,0)
(68,24,0)
(87,91,0)
(104,24,0)
(5,20,0)
(21,65,0)
(10,88,0)
(42,69,0)
(19,46,0)
(32,83,0)
(42,15,0)
(108,66,0)
(12,84,0)
(43,88,0)
(8,36,0)
(80,81,0)
(112,48,0)
(82,84,0)
(49,42,0)
(119,43,0)
(110,113,0)
(30,89,0)
(113,95,0)
(75,52,0)
(0,75,0)
(79,10,0)
(20,5,0)
(10,43,0)
(26,45,0)
(63,10,0)
(23,87,0)
(13,47,0)
(35,120,0)
(76,17,0)
(37,41,0)
(80,57,0)
(106,33,0)
(29,81,0)
(20,67,0)
(95,113,0)
(54,27,0)
(74,5,0)
(113,0,0)
(42,10,0)
(27,43,0)
(48,120,0)
(81,80,0)
(116,47,0)
(69,14,0)
(66,46,0)
(87,43,0)
(67,20,0)
(111,41,0)
(47,13,0)
(97,95,0)
(60,84,0)
(84,12,0)
(42,13,0)
(93,45,0)
(57,15,0)
(77,102,0)
(70,59,0)
(8,77,1)
(24,68,1)
(5,74,1)
(17,46,1)
(119,85,1)
(108,46,1)
(59,70,1)
(70,101,1)
(20,67,1)
(17,33,1)
(82,60,1)
(54,118,1)
(28,62,1)
(45,93,1)
(47,6,1)
(113,95,1)
(64,42,1)
(76,117,1)
(9,13,1)
(22,104,1)
(10,63,1)
(81,3,1)
(21,57,1)
(111,66,1)
(44,58,1)
(58,31,1)
(48,120,1)
(9,10,1)
(115,16,1)
(74,59,1)
(97,110,1)
(20,5,1)
(83,32,1)
(40,27,1)
(65,21,1)
(95,50,1)
(113,46,1)
(102,36,1)
(42,69,1)
(61,113,1)
(3,29,1)
(34,49,1)
(94,35,1)
(66,46,1)
(117,37,1)
(77,12,1)
(32,102,1)
(57,96,1)
(62,89,1)
(23,24,1)
(68,22,1)
(120,94,1)
(33,72,1)
(56,108,1)
(40,44,1)
(37,41,1)
(63,79,1)
(80,81,1)
(117,66,1)
(31,27,1)
(71,65,1)
(6,116,1)
(47,46,1)
(112,9,1)
(107,48,1)
(27,54,1)
(46,20,1)
(49,115,1)
(50,97,1)
(102,43,1)
(10,43,1)
(1,40,1)
(19,85,1)
(114,30,1)
(79,83,1)
(96,80,1)
(18,0,1)
(27,43,1)
(41,111,1)
(16,28,1)
(66,56,1)
(110,17,1)
(106,76,1)
(14,38,1)
(69,14,1)
(85,45,1)
(104,119,1)
(87,23,1)
(72,106,1)
(86,8,1)
(12,84,1)
(42,13,1)
(116,18,1)
(84,82,1)
(60,1,1)
(42,10,1)
(30,107,1)
(87,91,1)
(118,43,1)
(13,47,1)
(38,34,1)
(0,61,1)
(29,64,1)
(93,26,1)
(89,114,1)
(12,43,1)
(43,87,1)
(36,86,1)
(35,112,1)
(101,19,1)
(87,23,2)
(76,85,2)
(59,85,2)
(13,47,2)
(79,85,2)
(42,69,2)
(108,85,2)
(27,43,2)
(33,85,2)
(42,10,2)
(40,85,2)
(66,85,2)
(6,85,2)
(117,85,2)
(61,85,2)
(17,33,2)
(58,27,2)
(23,24,2)
(8,85,2)
(10,85,2)
(22,85,2)
(17,46,2)
(113,85,2)
(68,85,2)
(86,85,2)
(20,67,2)
(5,85,2)
(110,85,2)
(20,85,2)
(72,85,2)
(113,95,2)
(5,74,2)
(102,85,2)
(17,85,2)
(102,43,2)
(12,84,2)
(80,81,2)
(97,85,2)
(47,85,2)
(23,85,2)
(111,66,2)
(77,85,2)
(83,85,2)
(102,36,2)
(37,66,2)
(46,20,2)
(37,41,2)
(74,85,2)
(27,85,2)
(95,85,2)
(84,85,2)
(24,68,2)
(116,85,2)
(101,85,2)
(56,85,2)
(44,58,2)
(63,85,2)
(70,85,2)
(113,46,2)
(82,85,2)
(62,89,2)
(104,85,2)
(69,14,2)
(32,85,2)
(66,46,2)
(87,85,2)
(18,85,2)
(106,85,2)
(43,87,2)
(54,85,2)
(24,85,2)
(12,43,2)
(74,59,2)
(12,85,2)
(36,85,2)
(87,91,2)
(118,85,2)
(48,120,2)
(43,85,2)
(46,85,2)
(50,85,2)
(119,85,2)
(10,43,2)
(60,85,2)
(41,66,2)
(19,85,2)
(0,85,2)
(13,85,2)
(31,27,2)
(47,46,2)
(42,13,2)
(20,5,2)
(44,27,2)
(1,85,2)
-----------------------------------
(0,dataBuffer[100-1] = '\\\\0')
(1,\'A\')
(2,dataBuffer[100-1] = \'\\\\0\')
(3,1)
(4,)
(5,malloc(100*sizeof(char)
(6,8)
(7,if (dataBuffer == NULL)
(8,100)
(9,dest)
(10,data = dataBuffer)
(11,)
(12,memset(dataBuffer, 'A', 100-1)
(13,data = dataBuffer - 8)
(14,sizeof(char)
(15,)
(16,dest[100-1] = '\\\\0')
(17,memset(dataBuffer, \'A\', 100-1)
(18,data)
(19,dataBuffer)
(20,(char *)
(21,dest)
(22,char)
(23,malloc(100*sizeof(char)
(24,100*sizeof(char)
(25,dataBuffer)
(26,data)
(27,dataBuffer == NULL)
(28,'\\\\0')
(29,100)
(30,100)
(31,1)
(32,\'\\\\0\')
(33,100-1)
(34,100)
(35,100)
(36,100-1)
(37,exit(-1)
(38,char)
(39,'A')
(40,dataBuffer)
(41,-1)
(42,memcpy(dest, data, 100*sizeof(char)
(43,* dataBuffer = (char *)
(44,exit(-1)
(45,data = NULL)
(46,* dataBuffer = (char *)
(47,dataBuffer - 8)
(48,memset(dest, 'C', 100-1)
(49,data)
(50,1)
(51,memset(dest, \'C\', 100-1)
(52,)
(53,memset(dataBuffer, 'A', 100-1)
(54,NULL)
(55,)
(56,NULL)
(57,dest[100-1] = '\\\\0')
(58,-1)
(59,sizeof(char)
(60,100)
(61,\'\\\\0\')
(62,dest[100-1])
(63,dataBuffer)
(64,dest)
(65,printLine(dest)
(66,dataBuffer == NULL)
(67,char *)
(68,sizeof(char)
(69,100*sizeof(char)
(70,char)
(71,RET)
(72,1)
(73,memset(dataBuffer, \'A\', 100-1)
(74,100*sizeof(char)
(75,)
(76,'A')
(77,dataBuffer)
(78,)
(79,data)
(80,dest[100-1])
(81,100-1)
(82,1)
(83,dataBuffer[100-1] = \'\\\\0\')
(84,100-1)
(85,globalReturnsTrueOrFalse()
(86,1)
(87,(char *)
(88,)
(89,100-1)
(90,if (dataBuffer == NULL)
(91,char *)
(92,dest)
(93,NULL)
(94,1)
(95,100-1)
(96,'\\\\0')
(97,100)
(98,data)
(99,'\\\\0')
(100,dataBuffer)
(101,100)
(102,dataBuffer[100-1])
(103,'\\\\0')
(104,100)
(105,\'A\')
(106,100)
(107,dest)
(108,dataBuffer)
(109,dataBuffer[100-1] = '\\\\0')
(110,dataBuffer)
(111,1)
(112,'C')
(113,dataBuffer[100-1])
(114,1)
(115,dest)
(116,dataBuffer)
(117,dataBuffer)
(118,dataBuffer)
(119,dataBuffer)
(120,100-1)
(121,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^