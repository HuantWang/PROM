-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_05_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    if(staticTrue)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
30,31
32,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
89,91
89,92
90,91
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
106,107
107,108
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,31,36,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,93,95,100,101,104,105,108,114,116,119,121,125,129,130
-----computeFrom-----
34,35
34,36
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
98,99
98,100
102,103
102,104
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_05_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_05_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_05_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
staticTrue
staticTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(36,37,0)
(18,7,0)
(38,23,0)
(34,62,0)
(14,23,0)
(2,37,0)
(6,18,0)
(51,62,0)
(49,62,0)
(46,18,0)
(31,49,0)
(16,51,0)
(50,3,0)
(3,25,0)
(37,58,0)
(33,62,0)
(0,59,0)
(9,11,0)
(47,30,0)
(15,59,0)
(22,7,0)
(4,9,0)
(54,30,0)
(7,61,0)
(8,3,0)
(35,61,0)
(39,25,0)
(52,24,0)
(11,40,0)
(26,20,0)
(17,3,0)
(38,62,0)
(15,8,0)
(44,43,0)
(32,38,0)
(18,58,0)
(12,30,0)
(42,25,0)
(41,59,0)
(28,43,0)
(53,24,0)
(27,11,0)
(10,58,0)
(9,37,0)
(14,25,0)
(7,18,0)
(5,14,0)
(60,38,0)
(1,10,0)
(61,40,0)
(55,49,0)
(37,9,0)
(21,14,0)
(23,48,0)
(57,58,0)
(59,20,0)
(8,15,0)
(20,30,0)
(29,58,0)
(23,38,0)
(25,13,0)
(14,62,0)
(24,58,0)
(3,8,0)
(56,30,0)
(43,20,0)
(36,2,1)
(49,62,1)
(39,45,1)
(3,25,1)
(23,38,1)
(24,58,1)
(14,62,1)
(4,37,1)
(7,18,1)
(3,17,1)
(37,36,1)
(51,62,1)
(57,29,1)
(19,15,1)
(52,53,1)
(42,39,1)
(34,33,1)
(46,11,1)
(61,35,1)
(35,7,1)
(31,62,1)
(38,62,1)
(58,57,1)
(25,42,1)
(10,1,1)
(18,58,1)
(9,37,1)
(11,27,1)
(10,58,1)
(37,58,1)
(22,18,1)
(29,45,1)
(9,4,1)
(55,31,1)
(27,9,1)
(14,21,1)
(16,23,1)
(31,51,1)
(14,25,1)
(49,55,1)
(21,5,1)
(17,50,1)
(5,49,1)
(1,61,1)
(38,60,1)
(53,58,1)
(8,3,1)
(29,25,1)
(60,32,1)
(18,6,1)
(15,8,1)
(24,52,1)
(62,34,1)
(6,46,1)
(50,49,1)
(51,16,1)
(53,10,1)
(2,24,1)
(33,24,1)
(32,14,1)
(7,22,1)
(38,49,2)
(55,49,2)
(35,24,2)
(42,45,2)
(15,8,2)
(60,49,2)
(16,49,2)
(49,62,2)
(23,38,2)
(46,24,2)
(37,24,2)
(18,58,2)
(53,24,2)
(10,58,2)
(52,24,2)
(31,49,2)
(14,62,2)
(36,24,2)
(18,24,2)
(14,49,2)
(51,62,2)
(39,45,2)
(37,58,2)
(9,37,2)
(38,62,2)
(21,49,2)
(1,24,2)
(6,24,2)
(24,24,2)
(32,49,2)
(9,24,2)
(22,24,2)
(5,49,2)
(3,25,2)
(8,3,2)
(24,58,2)
(7,18,2)
(51,49,2)
(23,49,2)
(14,25,2)
(61,24,2)
(11,24,2)
(10,24,2)
(25,45,2)
(49,49,2)
(2,24,2)
(4,24,2)
(7,24,2)
(27,24,2)
-----------------------------------
(0,i)
(1,i)
(2,source)
(3,data[0])
(4,intOne)
(5,data)
(6,i)
(7,source[i].intTwo)
(8,&data[0])
(9,source[i].intOne)
(10,i++)
(11,source[i].intOne = 0)
(12,dataBadBuffer)
(13,)
(14,data[i])
(15,printStructLine(&data[0])
(16,i)
(17,0)
(18,source[i])
(19,RET)
(20,)
(21,i)
(22,intTwo)
(23,data[i] = source[i])
(24,i < 100)
(25,data = dataBadBuffer)
(26,source)
(27,0)
(28,for (i = 0; i < 100; i++)
(29,i)
(30,)
(31,i)
(32,source)
(33,i)
(34,0)
(35,0)
(36,i)
(37,source[i])
(38,source[i])
(39,data)
(40,)
(41,for (i = 0; i < 100; i++)
(42,dataBadBuffer)
(43,)
(44,i)
(45,staticTrue)
(46,source)
(47,data)
(48,)
(49,i < 100)
(50,data)
(51,i++)
(52,100)
(53,i)
(54,dataGoodBuffer)
(55,100)
(56,if(staticTrue)
(57,0)
(58,i = 0)
(59,)
(60,i)
(61,source[i].intTwo = 0)
(62,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^