-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_17_bad()
{
    int i,j;
    int64_t * data;
    /* Initialize data */
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
89,90
90,91
92,93
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,76,78,83,84,87,88,91,96,98
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_17_bad(){    int i,j;    int64_t * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_17_bad()
CWE415_Double_Free__malloc_free_int64_t_17_bad
{    int i,j;    int64_t * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(48,37,0)
(13,21,0)
(15,34,0)
(38,13,0)
(18,45,0)
(20,9,0)
(25,47,0)
(17,24,0)
(31,21,0)
(32,24,0)
(34,15,0)
(46,47,0)
(6,29,0)
(28,22,0)
(34,2,0)
(33,39,0)
(16,6,0)
(5,3,0)
(26,13,0)
(9,3,0)
(7,13,0)
(41,26,0)
(15,37,0)
(37,15,0)
(27,26,0)
(1,38,0)
(39,3,0)
(12,3,0)
(0,42,0)
(44,9,0)
(10,47,0)
(38,21,0)
(29,6,0)
(24,47,0)
(19,42,0)
(14,37,0)
(29,8,0)
(35,40,0)
(13,34,0)
(42,22,0)
(30,48,0)
(37,48,0)
(11,22,0)
(2,34,0)
(4,47,0)
(36,47,0)
(34,13,0)
(43,35,0)
(35,24,0)
(35,13,0)
(45,22,0)
(30,14,1)
(48,30,1)
(39,3,1)
(20,3,1)
(26,13,1)
(35,43,1)
(42,19,1)
(20,39,1)
(19,0,1)
(18,38,1)
(9,44,1)
(43,9,1)
(45,22,1)
(24,32,1)
(0,22,1)
(5,42,1)
(35,24,1)
(7,42,1)
(38,1,1)
(38,13,1)
(1,29,1)
(45,18,1)
(44,20,1)
(14,7,1)
(6,16,1)
(34,15,1)
(15,37,1)
(27,13,1)
(37,48,1)
(34,2,1)
(23,9,1)
(28,11,1)
(42,22,1)
(16,26,1)
(41,27,1)
(32,17,1)
(26,41,1)
(39,33,1)
(35,13,1)
(22,28,1)
(29,6,1)
(0,45,1)
(3,12,1)
(1,26,1)
(11,24,1)
(33,35,1)
(12,5,1)
(9,3,1)
(13,34,1)
(38,13,2)
(13,42,2)
(43,9,2)
(30,42,2)
(41,42,2)
(16,26,2)
(39,3,2)
(9,9,2)
(37,42,2)
(39,9,2)
(26,42,2)
(35,13,2)
(0,42,2)
(29,26,2)
(37,48,2)
(38,42,2)
(15,37,2)
(48,42,2)
(1,42,2)
(34,2,2)
(33,9,2)
(26,13,2)
(27,42,2)
(13,34,2)
(14,42,2)
(20,9,2)
(34,15,2)
(42,22,2)
(42,42,2)
(44,9,2)
(6,26,2)
(35,24,2)
(18,42,2)
(35,9,2)
(34,42,2)
(29,6,2)
(15,42,2)
(45,22,2)
(9,3,2)
(19,42,2)
(45,42,2)
(7,42,2)
-----------------------------------
(0,i)
(1,data)
(2,int64_t *)
(3,j = 0)
(4,for(j = 0; j < 1; j++)
(5,j)
(6,-1)
(7,data)
(8,)
(9,j < 1)
(10,for(i = 0; i < 1; i++)
(11,i)
(12,0)
(13,data = (int64_t *)
(14,100)
(15,malloc(100*sizeof(int64_t)
(16,1)
(17,data)
(18,i)
(19,1)
(20,j)
(21,)
(22,i = 0)
(23,RET)
(24,data = NULL)
(25,data)
(26,data == NULL)
(27,data)
(28,0)
(29,exit(-1)
(30,int64_t)
(31,if (data == NULL)
(32,NULL)
(33,j)
(34,(int64_t *)
(35,free(data)
(36,i)
(37,100*sizeof(int64_t)
(38,free(data)
(39,j++)
(40,)
(41,NULL)
(42,i < 1)
(43,data)
(44,1)
(45,i++)
(46,j)
(47,)
(48,sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^