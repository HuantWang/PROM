-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_connect_socket_execl_65_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
58,59
58,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
83,86
83,87
83,88
83,89
83,90
83,91
83,92
83,93
83,94
83,95
83,96
83,97
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
110,111
113,114
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
140,142
141,142
144,145
144,146
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
151,155
152,153
154,155
156,157
156,158
157,158
157,159
158,159
160,161
162,163
163,164
165,166
166,167
167,168
169,170
171,172
173,174
174,175
174,176
175,176
177,178
177,179
177,180
177,181
177,182
178,179
180,181
182,183
182,184
183,184
183,185
185,186
187,188
188,189
188,190
189,190
191,192
193,194
193,195
194,195
195,196
195,197
198,199
199,200
199,201
200,201
200,202
202,203
206,207
206,208
207,208
207,209
208,209
208,210
209,210
211,212
213,214
213,215
214,215
217,218
219,220
220,221
220,222
221,222
221,223
222,223
224,225
224,226
225,226
227,228
227,229
228,229
230,231
231,232
231,233
235,236
236,237
236,238
237,238
239,240
239,241
239,242
240,241
242,243
245,246
245,247
246,247
248,249
249,250
250,251
250,252
251,252
252,253
255,256
256,257
256,258
257,258
259,260
259,261
259,262
260,261
262,263
265,266
265,267
266,267
268,269
269,270
270,271
270,272
271,272
272,273
276,277
276,278
277,278
277,279
278,279
280,281
282,283
283,284
284,285
284,286
285,286
287,288
289,290
290,291
290,292
291,292
293,294
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,36,40,42,46,48,52,54,57,59,60,64,66,69,73,75,79,81,87,90,92,94,96,100,102,104,108,111,112,116,121,122,124,130,131,132,135,137,142,143,146,148,153,155,159,161,164,168,170,172,176,179,181,184,186,190,192,196,197,201,203,204,205,210,212,215,216,218,223,226,229,232,233,234,238,241,243,244,247,253,254,258,261,263,264,267,273,274,275,279,281,286,288,292,294
-----computeFrom-----
38,39
38,40
85,86
85,87
98,99
98,100
118,119
118,120
126,127
126,128
139,140
139,141
150,151
150,152
174,175
174,176
188,189
188,190
193,194
193,195
199,200
199,201
200,201
200,202
207,208
207,209
208,209
208,210
213,214
213,215
220,221
220,222
224,225
224,226
227,228
227,229
236,237
236,238
250,251
250,252
256,257
256,258
270,271
270,272
277,278
277,279
-----guardedBy-----
279,288
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_connect_socket_execl_65_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE78_OS_Command_Injection__char_connect_socket_execl_65_bad()
CWE78_OS_Command_Injection__char_connect_socket_execl_65_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink;
void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink;
void
(*funcPtr) (char *) = CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink
*funcPtr
*
funcPtr
char *
char
*
*

= CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink
CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink
CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(37,154,0)
(25,14,0)
(137,156,0)
(118,173,0)
(160,35,0)
(59,181,0)
(60,129,0)
(161,34,0)
(21,7,0)
(116,141,0)
(70,8,0)
(139,22,0)
(33,146,0)
(173,176,0)
(35,32,0)
(142,155,0)
(180,26,0)
(2,10,0)
(135,19,0)
(8,36,0)
(144,49,0)
(109,178,0)
(36,47,0)
(43,154,0)
(27,139,0)
(168,19,0)
(143,22,0)
(182,37,0)
(109,154,0)
(130,170,0)
(96,132,0)
(35,160,0)
(158,71,0)
(23,105,0)
(34,35,0)
(73,141,0)
(138,141,0)
(75,141,0)
(50,76,0)
(132,14,0)
(171,141,0)
(98,37,0)
(42,184,0)
(56,59,0)
(50,138,0)
(106,154,0)
(163,141,0)
(77,144,0)
(129,176,0)
(36,8,0)
(44,73,0)
(176,129,0)
(97,105,0)
(175,47,0)
(128,170,0)
(102,114,0)
(181,8,0)
(82,167,0)
(98,139,0)
(91,175,0)
(11,99,0)
(38,141,0)
(47,141,0)
(24,36,0)
(78,49,0)
(121,154,0)
(61,22,0)
(0,154,0)
(84,167,0)
(90,123,0)
(52,167,0)
(129,144,0)
(20,148,0)
(46,154,0)
(17,141,0)
(176,154,0)
(10,37,0)
(153,34,0)
(14,132,0)
(183,176,0)
(48,110,0)
(12,73,0)
(168,176,0)
(148,14,0)
(120,153,0)
(150,139,0)
(178,109,0)
(152,129,0)
(126,77,0)
(55,162,0)
(141,22,0)
(180,154,0)
(72,173,0)
(179,34,0)
(49,144,0)
(144,154,0)
(9,57,0)
(175,139,0)
(50,144,0)
(108,141,0)
(68,60,0)
(111,154,0)
(181,59,0)
(15,49,0)
(167,154,0)
(37,98,0)
(167,52,0)
(1,57,0)
(66,179,0)
(147,89,0)
(27,47,0)
(104,81,0)
(81,128,0)
(57,1,0)
(85,178,0)
(170,128,0)
(41,22,0)
(112,26,0)
(133,141,0)
(88,67,0)
(34,179,0)
(184,154,0)
(71,22,0)
(57,176,0)
(61,139,0)
(129,60,0)
(117,129,0)
(148,123,0)
(129,181,0)
(67,106,0)
(19,168,0)
(105,166,0)
(156,139,0)
(31,139,0)
(94,144,0)
(136,4,0)
(26,180,0)
(151,177,0)
(177,180,0)
(113,141,0)
(51,138,0)
(79,7,0)
(127,77,0)
(6,114,0)
(100,22,0)
(35,34,0)
(168,146,0)
(80,50,0)
(166,105,0)
(60,68,0)
(28,98,0)
(13,57,0)
(1,173,0)
(95,71,0)
(157,82,0)
(8,181,0)
(60,27,0)
(114,144,0)
(156,4,0)
(29,81,0)
(146,47,0)
(74,61,0)
(18,52,0)
(62,141,0)
(146,156,0)
(107,132,0)
(4,154,0)
(5,27,0)
(119,98,0)
(54,168,0)
(45,140,0)
(123,3,0)
(32,35,0)
(167,82,0)
(103,160,0)
(173,1,0)
(114,138,0)
(149,67,0)
(86,106,0)
(156,146,0)
(122,48,0)
(14,154,0)
(87,27,0)
(174,36,0)
(92,138,0)
(166,109,0)
(63,47,0)
(146,168,0)
(181,129,0)
(89,128,0)
(27,60,0)
(124,49,0)
(172,154,0)
(139,71,0)
(10,48,0)
(65,131,0)
(128,81,0)
(132,139,0)
(128,89,0)
(47,175,0)
(7,22,0)
(145,166,0)
(30,177,0)
(34,144,0)
(16,184,0)
(34,153,0)
(27,47,1)
(138,51,1)
(95,7,1)
(74,115,1)
(61,139,1)
(71,158,1)
(105,23,1)
(182,4,1)
(158,95,1)
(181,59,1)
(144,49,1)
(27,87,1)
(33,137,1)
(70,59,1)
(179,66,1)
(82,157,1)
(27,139,1)
(128,170,1)
(85,166,1)
(16,42,1)
(94,184,1)
(37,98,1)
(57,176,1)
(112,177,1)
(57,9,1)
(145,105,1)
(98,139,1)
(151,109,1)
(80,114,1)
(128,81,1)
(168,19,1)
(173,72,1)
(114,144,1)
(184,16,1)
(12,139,1)
(129,181,1)
(64,39,1)
(60,68,1)
(176,129,1)
(14,132,1)
(60,27,1)
(174,24,1)
(72,118,1)
(148,20,1)
(51,92,1)
(150,71,1)
(66,34,1)
(173,176,1)
(89,147,1)
(18,77,1)
(42,89,1)
(142,179,1)
(153,120,1)
(177,30,1)
(139,71,1)
(170,130,1)
(119,182,1)
(36,174,1)
(129,60,1)
(9,13,1)
(97,106,1)
(39,14,1)
(129,144,1)
(181,8,1)
(77,127,1)
(64,123,1)
(156,146,1)
(36,47,1)
(114,102,1)
(10,37,1)
(96,107,1)
(67,88,1)
(21,79,1)
(45,89,1)
(157,84,1)
(91,63,1)
(50,80,1)
(6,142,1)
(35,32,1)
(126,144,1)
(52,18,1)
(92,73,1)
(19,135,1)
(29,64,1)
(183,179,1)
(89,128,1)
(15,124,1)
(24,70,1)
(31,150,1)
(136,156,1)
(114,138,1)
(5,152,1)
(56,60,1)
(47,175,1)
(180,26,1)
(35,160,1)
(120,35,1)
(6,55,1)
(130,81,1)
(20,39,1)
(13,176,1)
(81,104,1)
(90,148,1)
(78,15,1)
(30,151,1)
(106,86,1)
(115,50,1)
(50,144,1)
(34,153,1)
(7,21,1)
(175,139,1)
(25,93,1)
(149,167,1)
(166,145,1)
(137,1,1)
(167,52,1)
(4,136,1)
(167,82,1)
(117,181,1)
(156,139,1)
(6,45,1)
(178,85,1)
(48,122,1)
(87,5,1)
(34,144,1)
(129,117,1)
(74,65,1)
(124,94,1)
(86,67,1)
(109,178,1)
(98,28,1)
(160,103,1)
(166,105,1)
(65,115,1)
(127,126,1)
(84,52,1)
(28,119,1)
(83,61,1)
(77,144,1)
(25,48,1)
(175,91,1)
(93,37,1)
(107,25,1)
(29,47,1)
(8,36,1)
(88,149,1)
(161,180,1)
(139,31,1)
(146,47,1)
(148,14,1)
(23,97,1)
(135,54,1)
(11,77,1)
(103,161,1)
(115,114,1)
(147,128,1)
(63,138,1)
(55,1,1)
(73,44,1)
(44,12,1)
(104,29,1)
(54,33,1)
(122,10,1)
(26,112,1)
(61,74,1)
(132,96,1)
(34,35,1)
(10,2,1)
(6,64,1)
(1,57,1)
(179,34,1)
(152,183,1)
(59,56,1)
(102,6,1)
(6,11,1)
(50,138,1)
(49,78,1)
(123,90,1)
(1,173,1)
(118,57,1)
(146,168,1)
(132,139,1)
(168,176,1)
(2,93,1)
(166,105,2)
(114,144,2)
(86,77,2)
(10,93,2)
(8,36,2)
(59,179,2)
(39,1,2)
(89,64,2)
(27,179,2)
(156,139,2)
(180,77,2)
(88,77,2)
(48,93,2)
(15,89,2)
(135,1,2)
(23,77,2)
(157,77,2)
(144,89,2)
(90,39,2)
(1,57,2)
(152,179,2)
(8,179,2)
(132,1,2)
(42,89,2)
(184,89,2)
(132,139,2)
(84,77,2)
(176,129,2)
(146,47,2)
(36,179,2)
(47,175,2)
(181,8,2)
(129,60,2)
(142,179,2)
(96,1,2)
(85,77,2)
(14,132,2)
(129,179,2)
(182,1,2)
(70,179,2)
(49,89,2)
(89,128,2)
(168,19,2)
(128,170,2)
(149,77,2)
(35,32,2)
(146,1,2)
(61,139,2)
(151,77,2)
(98,139,2)
(137,1,2)
(103,77,2)
(5,179,2)
(167,77,2)
(126,89,2)
(98,1,2)
(178,77,2)
(176,179,2)
(129,144,2)
(130,64,2)
(181,179,2)
(161,77,2)
(56,179,2)
(13,179,2)
(118,57,2)
(72,57,2)
(60,68,2)
(119,1,2)
(80,114,2)
(1,173,2)
(60,27,2)
(120,77,2)
(27,47,2)
(64,1,2)
(67,77,2)
(173,176,2)
(167,52,2)
(160,77,2)
(87,179,2)
(109,178,2)
(144,49,2)
(122,93,2)
(175,139,2)
(4,1,2)
(28,1,2)
(45,89,2)
(16,89,2)
(50,114,2)
(145,77,2)
(94,89,2)
(57,179,2)
(26,77,2)
(129,181,2)
(60,179,2)
(19,1,2)
(153,77,2)
(168,176,2)
(35,160,2)
(81,64,2)
(93,1,2)
(34,144,2)
(34,35,2)
(57,176,2)
(168,1,2)
(34,153,2)
(104,64,2)
(114,138,2)
(174,179,2)
(37,1,2)
(52,77,2)
(166,77,2)
(82,77,2)
(180,26,2)
(9,179,2)
(106,77,2)
(147,64,2)
(179,77,2)
(128,81,2)
(170,64,2)
(50,138,2)
(77,89,2)
(36,47,2)
(10,37,2)
(97,77,2)
(139,71,2)
(148,39,2)
(54,1,2)
(156,1,2)
(1,179,2)
(77,144,2)
(55,1,2)
(37,98,2)
(127,89,2)
(66,77,2)
(146,168,2)
(177,77,2)
(136,1,2)
(112,77,2)
(173,57,2)
(123,39,2)
(183,179,2)
(179,34,2)
(14,1,2)
(11,77,2)
(24,179,2)
(50,144,2)
(78,89,2)
(65,115,2)
(181,59,2)
(167,82,2)
(124,89,2)
(35,77,2)
(105,77,2)
(34,77,2)
(33,1,2)
(2,93,2)
(25,1,2)
(27,139,2)
(128,64,2)
(30,77,2)
(109,77,2)
(29,64,2)
(117,179,2)
(107,1,2)
(148,14,2)
(18,77,2)
(156,146,2)
(20,39,2)
-----------------------------------
(0,if (connect(connectSocket, (struct sockaddr*)
(1,recvResult == SOCKET_ERROR || recvResult == 0)
(2,replace)
(3,)
(4,data[dataLen + recvResult / sizeof(char)
(5,data)
(6,connectSocket)
(7,(*funcPtr)
(8,100 - dataLen - 1)
(9,SOCKET_ERROR)
(10,*replace)
(11,break;)
(12,wsaDataInit)
(13,recvResult)
(14,replace = strchr(data, '\\\\n')
(15,SOCK_STREAM)
(16,1)
(17,dataLen)
(18,service)
(19,sizeof(char)
(20,replace)
(21,CWE78_OS_Command_Injection__char_connect_socket_execl_65b_badSink)
(22,)
(23,sin_addr)
(24,dataLen)
(25,replace)
(26,htons(TCP_PORT)
(27,data + dataLen)
(28,'\\\\r')
(29,2)
(30,sin_port)
(31,dataBuffer)
(32,struct sockaddr*)
(33,dataLen)
(34,connect(connectSocket, (struct sockaddr*)
(35,(struct sockaddr*)
(36,dataLen - 1)
(37,replace = strchr(data, \'\\\\r\')
(38,wsaDataInit)
(39,replace)
(40,replace = strchr(data, '\\\\r')
(41,funcPtr)
(42,wsaDataInit)
(43,if (recvResult == SOCKET_ERROR || recvResult == 0)
(44,0)
(45,break;)
(46,if (replace)
(47,dataLen = strlen(data)
(48,*replace = \'\\\\0\')
(49,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(50,CLOSE_SOCKET(connectSocket)
(51,INVALID_SOCKET)
(52,&service)
(53,replace = strchr(data, \'\\\\n\')
(54,recvResult)
(55,break;)
(56,char)
(57,recvResult == SOCKET_ERROR)
(58,*replace = '\\\\0')
(59,sizeof(char)
(60,(char *)
(61,funcPtr(data)
(62,connectSocket)
(63,dataLen)
(64,0)
(65,WSACleanup()
(66,SOCKET_ERROR)
(67,service.sin_family)
(68,char *)
(69,\'\\\\r\')
(70,100)
(71,dataBuffer[100] = COMMAND_ARG2)
(72,0)
(73,wsaDataInit = 0)
(74,data)
(75,service)
(76,)
(77,connectSocket == INVALID_SOCKET)
(78,IPPROTO_TCP)
(79,funcPtr)
(80,connectSocket)
(81,MAKEWORD(2,2)
(82,sizeof(service)
(83,RET)
(84,0)
(85,IP_ADDRESS)
(86,AF_INET)
(87,dataLen)
(88,sin_family)
(89,WSAStartup(MAKEWORD(2,2)
(90,\'\\\\0\')
(91,data)
(92,connectSocket)
(93,replace)
(94,connectSocket)
(95,dataBuffer)
(96,\'\\\\n\')
(97,service)
(98,strchr(data, '\\\\r')
(99,)
(100,dataBuffer)
(101,strchr(data, \'\\\\r\')
(102,INVALID_SOCKET)
(103,service)
(104,2)
(105,service.sin_addr)
(106,service.sin_family = AF_INET)
(107,data)
(108,wsaData)
(109,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(110,)
(111,if (WSAStartup(MAKEWORD(2,2)
(112,TCP_PORT)
(113,replace)
(114,connectSocket != INVALID_SOCKET)
(115,wsaDataInit)
(116,if (connectSocket != INVALID_SOCKET)
(117,0)
(118,recvResult)
(119,data)
(120,service)
(121,if (connectSocket == INVALID_SOCKET)
(122,\'\\\\0\')
(123,*replace = \'\\\\0\')
(124,AF_INET)
(125,'\\\\0')
(126,connectSocket)
(127,INVALID_SOCKET)
(128,WSAStartup(MAKEWORD(2,2)
(129,recv(connectSocket, (char *)
(130,wsaData)
(131,)
(132,strchr(data, '\\\\n')
(133,if (wsaDataInit)
(134,*replace = '\\\\0')
(135,char)
(136,'\\\\0')
(137,data)
(138,connectSocket = INVALID_SOCKET)
(139,data = dataBuffer)
(140,)
(141,)
(142,break;)
(143,data)
(144,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(145,s_addr)
(146,dataLen + recvResult / sizeof(char)
(147,NO_ERROR)
(148,*replace)
(149,service)
(150,data)
(151,service)
(152,connectSocket)
(153,sizeof(service)
(154,)
(155,)
(156,data[dataLen + recvResult / sizeof(char)
(157,service)
(158,COMMAND_ARG2)
(159,\'\\\\0\')
(160,&service)
(161,connectSocket)
(162,)
(163,do)
(164,'\\\\n')
(165,strchr(data, \'\\\\n\')
(166,service.sin_addr.s_addr)
(167,memset(&service, 0, sizeof(service)
(168,recvResult / sizeof(char)
(169,'\\\\0')
(170,&wsaData)
(171,recvResult)
(172,if (replace)
(173,recvResult == 0)
(174,1)
(175,strlen(data)
(176,recvResult = recv(connectSocket, (char *)
(177,service.sin_port)
(178,inet_addr(IP_ADDRESS)
(179,connect(connectSocket, (struct sockaddr*)
(180,service.sin_port = htons(TCP_PORT)
(181,sizeof(char)
(182,replace)
(183,recvResult)
(184,wsaDataInit = 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^