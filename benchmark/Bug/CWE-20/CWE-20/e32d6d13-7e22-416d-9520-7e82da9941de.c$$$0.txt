-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02_bad()
{
    double * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (double *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        *data = 1.7E300;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printDoubleLine(*data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
53,54
56,57
57,58
57,59
58,59
60,61
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,36,40,42,47,49,54,55,59,62,66,68
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02_bad(){    double * data;    /* Initialize data */    data = NULL;    if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02_bad
{    double * data;    /* Initialize data */    data = NULL;    if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
double * data;
double * data;
double
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
1
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
data = (double *)malloc(sizeof(data));
data = (double *)malloc(sizeof(data))
data
data
(double *)malloc(sizeof(data))
double *
double
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 1.7E300;
*data = 1.7E300
*data
data
data
1.7E300
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,7,0)
(27,11,0)
(7,2,0)
(12,21,0)
(17,29,0)
(28,31,0)
(13,11,0)
(32,18,0)
(4,5,0)
(13,18,0)
(10,31,0)
(3,11,0)
(12,5,0)
(14,29,0)
(7,11,0)
(24,7,0)
(8,13,0)
(6,5,0)
(1,11,0)
(20,18,0)
(15,5,0)
(27,14,0)
(22,15,0)
(12,14,0)
(2,15,0)
(21,18,0)
(12,11,0)
(25,14,0)
(19,27,0)
(0,1,0)
(15,2,0)
(9,12,0)
(11,7,0)
(21,12,0)
(31,28,0)
(28,26,0)
(13,5,0)
(16,1,0)
(5,18,0)
(11,29,0)
(7,24,0)
(27,11,1)
(8,21,1)
(23,5,1)
(13,11,1)
(13,8,1)
(9,23,1)
(28,31,1)
(10,1,1)
(12,14,1)
(13,5,1)
(12,9,1)
(19,1,1)
(11,7,1)
(1,0,1)
(1,11,1)
(19,28,1)
(5,6,1)
(22,3,1)
(12,11,1)
(14,25,1)
(15,5,1)
(31,10,1)
(27,19,1)
(2,15,1)
(7,2,1)
(9,14,1)
(6,4,1)
(7,24,1)
(15,22,1)
(16,11,1)
(3,23,1)
(25,27,1)
(0,16,1)
(12,5,1)
(21,12,1)
(30,13,1)
(7,2,2)
(28,31,2)
(7,23,2)
(12,14,2)
(14,23,2)
(3,23,2)
(13,5,2)
(12,5,2)
(2,23,2)
(13,11,2)
(1,23,2)
(1,11,2)
(19,23,2)
(27,11,2)
(16,23,2)
(15,5,2)
(21,12,2)
(0,23,2)
(22,23,2)
(11,7,2)
(28,1,2)
(25,23,2)
(2,15,2)
(10,1,2)
(31,1,2)
(12,11,2)
(11,23,2)
(7,24,2)
(15,23,2)
(27,23,2)
-----------------------------------
(0,NULL)
(1,data == NULL)
(2,malloc(sizeof(data)
(3,data)
(4,data)
(5,data = NULL)
(6,NULL)
(7,(double *)
(8,data)
(9,data)
(10,1)
(11,data = (double *)
(12,*data)
(13,free(data)
(14,*data = 1.7E300)
(15,sizeof(data)
(16,data)
(17,if (data == NULL)
(18,)
(19,data)
(20,data)
(21,printDoubleLine(*data)
(22,data)
(23,1)
(24,double *)
(25,1.7E300)
(26,)
(27,*data)
(28,exit(-1)
(29,)
(30,RET)
(31,-1)
(32,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^