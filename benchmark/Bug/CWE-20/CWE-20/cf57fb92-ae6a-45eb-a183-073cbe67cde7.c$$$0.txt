-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strncpy(data, source, strlen(source) + 1);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,80,84,86,90,92
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,4,0)
(36,27,0)
(28,34,0)
(20,27,0)
(14,26,0)
(10,3,0)
(35,34,0)
(17,34,0)
(3,30,0)
(12,35,0)
(33,14,0)
(6,17,0)
(28,27,0)
(29,5,0)
(28,30,0)
(20,18,0)
(29,35,0)
(30,37,0)
(32,35,0)
(28,5,0)
(28,35,0)
(3,34,0)
(13,9,0)
(3,27,0)
(34,37,0)
(21,34,0)
(22,13,0)
(0,26,0)
(5,28,0)
(19,37,0)
(18,20,0)
(24,30,0)
(7,29,0)
(11,8,0)
(38,37,0)
(4,14,0)
(9,1,0)
(39,30,0)
(23,27,0)
(4,20,0)
(5,29,0)
(26,14,0)
(2,36,0)
(9,13,0)
(17,30,0)
(16,5,0)
(27,20,0)
(31,28,0)
(27,8,0)
(25,36,0)
(15,28,0)
(17,27,0)
(14,4,0)
(16,29,1)
(9,13,1)
(41,3,1)
(22,36,1)
(32,12,1)
(36,27,1)
(12,9,1)
(36,2,1)
(30,24,1)
(20,18,1)
(17,6,1)
(6,28,1)
(24,39,1)
(29,35,1)
(35,32,1)
(26,0,1)
(5,29,1)
(17,27,1)
(7,15,1)
(17,30,1)
(3,10,1)
(20,4,1)
(12,36,1)
(10,17,1)
(3,27,1)
(13,22,1)
(23,40,1)
(12,40,1)
(2,25,1)
(14,26,1)
(28,27,1)
(28,35,1)
(28,30,1)
(15,31,1)
(3,30,1)
(5,16,1)
(40,30,1)
(27,20,1)
(25,27,1)
(29,7,1)
(28,5,1)
(33,23,1)
(0,33,1)
(4,14,1)
(31,35,1)
(4,14,2)
(28,35,2)
(36,40,2)
(28,27,2)
(28,5,2)
(3,30,2)
(9,36,2)
(4,40,2)
(20,4,2)
(23,40,2)
(33,40,2)
(2,40,2)
(28,30,2)
(27,40,2)
(0,40,2)
(27,20,2)
(29,35,2)
(14,26,2)
(17,27,2)
(25,40,2)
(13,36,2)
(22,36,2)
(20,18,2)
(20,40,2)
(36,27,2)
(3,27,2)
(17,30,2)
(9,13,2)
(5,29,2)
(14,40,2)
(26,40,2)
-----------------------------------
(0,char)
(1,)
(2,NULL)
(3,free(data)
(4,malloc(10*sizeof(char)
(5,strlen(source)
(6,data)
(7,source)
(8,)
(9,exit(-1)
(10,data)
(11,if (data == NULL)
(12,source)
(13,-1)
(14,10*sizeof(char)
(15,source)
(16,1)
(17,printLine(data)
(18,char *)
(19,if(STATIC_CONST_TRUE)
(20,(char *)
(21,source)
(22,1)
(23,data)
(24,NULL)
(25,data)
(26,sizeof(char)
(27,data = (char *)
(28,strncpy(data, source, strlen(source)
(29,strlen(source)
(30,data = NULL)
(31,data)
(32,SRC_STRING)
(33,10)
(34,)
(35,source[10+1] = SRC_STRING)
(36,data == NULL)
(37,)
(38,data)
(39,data)
(40,STATIC_CONST_TRUE)
(41,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^