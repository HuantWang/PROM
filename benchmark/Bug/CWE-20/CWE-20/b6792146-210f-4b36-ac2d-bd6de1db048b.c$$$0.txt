-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_04_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,22,0)
(23,8,0)
(16,20,0)
(7,0,0)
(24,14,0)
(20,21,0)
(18,13,0)
(8,0,0)
(9,21,0)
(5,22,0)
(0,8,0)
(14,22,0)
(15,22,0)
(20,14,0)
(2,8,0)
(6,21,0)
(0,14,0)
(12,14,0)
(13,14,0)
(21,3,0)
(13,21,0)
(25,13,0)
(6,13,0)
(1,6,0)
(8,4,0)
(0,7,1)
(10,14,1)
(14,24,1)
(0,14,1)
(11,10,1)
(1,13,1)
(6,1,1)
(23,10,1)
(19,11,1)
(25,18,1)
(7,2,1)
(16,11,1)
(8,0,1)
(19,6,1)
(2,23,1)
(13,14,1)
(24,12,1)
(20,14,1)
(11,8,1)
(6,13,1)
(20,16,1)
(13,25,1)
(18,20,1)
(6,13,2)
(20,14,2)
(20,11,2)
(25,11,2)
(8,10,2)
(6,11,2)
(2,10,2)
(16,11,2)
(0,10,2)
(1,11,2)
(0,14,2)
(23,10,2)
(18,11,2)
(7,10,2)
(13,11,2)
(8,0,2)
(13,14,2)
-----------------------------------
(0,&data)
(1,result)
(2,"%c")
(3,)
(4,)
(5,data)
(6,printHexCharLine(result)
(7,data)
(8,fscanf (stdin, "%c", &data)
(9,result)
(10,STATIC_CONST_TRUE)
(11,STATIC_CONST_TRUE)
(12,data)
(13,result = data)
(14,data = \\\' \\\')
(15,if(STATIC_CONST_TRUE)
(16,data)
(17,if(STATIC_CONST_TRUE)
(18,result)
(19,RET)
(20,++data)
(21,)
(22,)
(23,stdin)
(24,\\\' \\\')
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^