-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_08_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    if(staticReturnsTrue())
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
50,51
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
66,67
67,68
69,70
69,71
70,71
71,72
71,73
72,73
72,74
73,74
73,75
74,75
76,77
80,81
81,82
81,83
82,83
82,84
83,84
83,85
84,85
86,87
90,91
90,92
90,93
91,92
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
113,115
114,115
116,117
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
128,129
128,130
129,130
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,32,37,39,44,46,48,53,55,60,61,64,65,68,75,77,78,79,85,87,88,89,94,96,101,102,105,106,109,115,117,120,122,126,130,131
-----computeFrom-----
35,36
35,37
58,59
58,60
62,63
62,64
71,72
71,73
81,82
81,83
99,100
99,101
103,104
103,105
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_08_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_08_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_08_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(staticReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(61,1,0)
(22,41,0)
(48,59,0)
(30,11,0)
(16,42,0)
(27,26,0)
(8,22,0)
(61,53,0)
(15,22,0)
(15,42,0)
(53,49,0)
(24,41,0)
(7,26,0)
(29,1,0)
(45,32,0)
(22,15,0)
(35,56,0)
(32,47,0)
(40,7,0)
(44,1,0)
(54,61,0)
(3,56,0)
(47,30,0)
(51,46,0)
(59,51,0)
(46,56,0)
(61,26,0)
(47,32,0)
(17,1,0)
(23,7,0)
(20,26,0)
(48,7,0)
(5,46,0)
(12,14,0)
(28,57,0)
(58,49,0)
(7,48,0)
(37,51,0)
(43,17,0)
(26,19,0)
(14,42,0)
(13,17,0)
(49,1,0)
(21,1,0)
(62,44,0)
(38,15,0)
(32,42,0)
(36,47,0)
(60,56,0)
(10,14,0)
(53,50,0)
(57,46,0)
(41,11,0)
(34,15,0)
(59,48,0)
(0,51,0)
(49,53,0)
(33,39,0)
(9,42,0)
(6,32,0)
(31,49,0)
(39,42,0)
(2,57,0)
(4,30,0)
(25,61,0)
(18,56,0)
(61,26,1)
(7,23,1)
(13,1,1)
(58,61,1)
(12,10,1)
(21,14,1)
(47,32,1)
(36,32,1)
(29,21,1)
(39,33,1)
(10,42,1)
(1,29,1)
(22,15,1)
(48,7,1)
(7,26,1)
(22,8,1)
(10,39,1)
(33,41,1)
(38,34,1)
(20,55,1)
(17,1,1)
(14,12,1)
(9,16,1)
(8,15,1)
(14,42,1)
(24,22,1)
(32,45,1)
(43,13,1)
(31,58,1)
(49,1,1)
(15,42,1)
(27,20,1)
(16,55,1)
(16,26,1)
(61,25,1)
(52,59,1)
(49,31,1)
(54,17,1)
(45,6,1)
(23,40,1)
(6,14,1)
(13,44,1)
(40,17,1)
(61,1,1)
(41,24,1)
(47,36,1)
(39,42,1)
(32,42,1)
(26,27,1)
(59,48,1)
(30,4,1)
(44,1,1)
(15,38,1)
(25,54,1)
(4,47,1)
(53,49,1)
(62,53,1)
(34,30,1)
(42,9,1)
(17,43,1)
(44,62,1)
(13,17,2)
(59,48,2)
(14,42,2)
(61,17,2)
(14,14,2)
(48,7,2)
(17,17,2)
(32,42,2)
(22,14,2)
(34,14,2)
(53,17,2)
(33,14,2)
(15,42,2)
(26,55,2)
(47,32,2)
(32,14,2)
(22,15,2)
(61,26,2)
(39,42,2)
(58,17,2)
(43,17,2)
(17,1,2)
(30,14,2)
(47,14,2)
(61,1,2)
(24,14,2)
(53,49,2)
(39,14,2)
(27,55,2)
(15,14,2)
(36,14,2)
(44,17,2)
(4,14,2)
(54,17,2)
(62,17,2)
(20,55,2)
(8,14,2)
(49,17,2)
(6,14,2)
(10,14,2)
(49,1,2)
(38,14,2)
(44,1,2)
(31,17,2)
(41,14,2)
(45,14,2)
(7,26,2)
(12,14,2)
(25,17,2)
-----------------------------------
(0,for (i = 0; i < 100; i++)
(1,i = 0)
(2,i)
(3,if(staticReturnsTrue()
(4,0)
(5,source)
(6,source)
(7,data[0])
(8,intTwo)
(9,0)
(10,i)
(11,)
(12,100)
(13,i)
(14,i < 100)
(15,source[i])
(16,i)
(17,i < 100)
(18,data)
(19,)
(20,data)
(21,i)
(22,source[i].intTwo)
(23,0)
(24,0)
(25,i)
(26,data = dataBadBuffer)
(27,dataBadBuffer)
(28,for (i = 0; i < 100; i++)
(29,0)
(30,source[i].intOne = 0)
(31,i)
(32,source[i])
(33,i)
(34,source)
(35,dataGoodBuffer)
(36,intOne)
(37,i)
(38,i)
(39,i++)
(40,data)
(41,source[i].intTwo = 0)
(42,i = 0)
(43,100)
(44,i++)
(45,i)
(46,)
(47,source[i].intOne)
(48,&data[0])
(49,source[i])
(50,)
(51,)
(52,RET)
(53,data[i] = source[i])
(54,data)
(55,staticReturnsTrue()
(56,)
(57,)
(58,source)
(59,printStructLine(&data[0])
(60,dataBadBuffer)
(61,data[i])
(62,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^