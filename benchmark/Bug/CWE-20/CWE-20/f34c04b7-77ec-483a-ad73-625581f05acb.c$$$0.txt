-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
15,18
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,51,52,53,56
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(10,4,0)
(6,24,0)
(13,16,0)
(0,8,0)
(19,24,0)
(2,1,0)
(21,8,0)
(24,6,0)
(8,30,0)
(25,3,0)
(24,4,0)
(3,1,0)
(29,22,0)
(11,22,0)
(7,19,0)
(22,14,0)
(8,4,0)
(27,10,0)
(6,11,0)
(15,24,0)
(19,3,0)
(16,13,0)
(8,24,0)
(22,11,0)
(17,6,0)
(10,24,0)
(13,12,0)
(5,16,0)
(6,17,0)
(9,30,0)
(23,19,0)
(18,14,0)
(11,6,0)
(24,1,0)
(28,10,0)
(14,22,0)
(19,4,0)
(0,3,1)
(19,24,1)
(0,31,1)
(21,8,1)
(11,22,1)
(10,24,1)
(23,10,1)
(28,24,1)
(16,5,1)
(8,0,1)
(19,4,1)
(14,18,1)
(27,28,1)
(25,19,1)
(10,27,1)
(24,6,1)
(10,4,1)
(23,13,1)
(5,10,1)
(8,24,1)
(7,23,1)
(15,31,1)
(8,4,1)
(24,4,1)
(29,15,1)
(3,25,1)
(13,16,1)
(22,14,1)
(6,17,1)
(18,29,1)
(6,11,1)
(19,7,1)
(8,4,2)
(14,31,2)
(28,31,2)
(18,31,2)
(6,31,2)
(19,31,2)
(24,6,2)
(3,31,2)
(16,10,2)
(15,31,2)
(10,24,2)
(13,10,2)
(19,24,2)
(7,31,2)
(24,4,2)
(25,31,2)
(22,14,2)
(23,31,2)
(6,11,2)
(10,4,2)
(13,16,2)
(5,10,2)
(27,31,2)
(11,22,2)
(24,31,2)
(6,17,2)
(29,31,2)
(10,31,2)
(19,4,2)
(22,31,2)
(8,24,2)
(11,31,2)
(21,8,2)
-----------------------------------
(0,data)
(1,)
(2,if (data == NULL)
(3,data[0] = \'\\\\0\')
(4,char * data)
(5,1)
(6,(char *)
(7,0)
(8,return data;)
(9,if(badStatic)
(10,data == NULL)
(11,malloc(50*sizeof(char)
(12,)
(13,exit(-1)
(14,sizeof(char)
(15,data)
(16,-1)
(17,char *)
(18,char)
(19,data[0])
(20,data[0] = '\\\\0')
(21,RET)
(22,50*sizeof(char)
(23,data)
(24,data = (char *)
(25,'\\\\0')
(26,\'\\\\0\')
(27,NULL)
(28,data)
(29,50)
(30,)
(31,badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^