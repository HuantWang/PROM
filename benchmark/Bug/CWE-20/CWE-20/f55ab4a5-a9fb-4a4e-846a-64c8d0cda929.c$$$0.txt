-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
203,204
203,205
204,205
204,206
205,206
208,209
209,210
209,211
209,212
209,213
209,214
209,215
210,211
211,212
211,213
213,214
215,216
216,217
216,218
218,219
218,220
218,221
221,222
222,223
222,224
223,224
223,225
225,226
227,228
227,229
228,229
230,231
230,232
232,233
233,234
233,235
236,237
236,238
237,238
237,239
238,239
240,241
242,243
243,244
244,245
244,246
245,246
247,248
249,250
249,251
249,252
249,253
250,251
251,252
251,253
252,253
255,256
255,257
256,257
259,260
260,261
262,263
263,264
264,265
264,266
265,266
265,267
266,267
268,269
271,272
271,273
271,274
272,273
272,274
273,274
276,277
276,278
277,278
278,279
278,280
279,280
279,281
280,281
282,283
285,286
285,287
285,288
285,289
286,287
287,288
287,289
288,289
291,292
291,293
292,293
295,296
296,297
298,299
299,300
300,301
300,302
301,302
303,304
303,305
304,305
306,307
308,309
309,310
310,311
310,312
311,312
314,315
315,316
315,317
316,317
318,319
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,189,193,195,200,202,206,207,212,214,217,219,220,224,226,229,231,234,235,239,241,246,248,253,254,257,258,261,267,269,270,274,275,281,283,284,289,290,293,294,297,302,305,307,312,313,317,319
-----computeFrom-----
12,13
12,14
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
191,192
191,193
204,205
204,206
230,231
230,232
237,238
237,239
251,252
251,253
255,256
255,257
264,265
264,266
272,273
272,274
278,279
278,280
287,288
287,289
291,292
291,293
-----guardedBy-----
193,202
274,283
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(96,31,0)
(99,120,0)
(84,49,0)
(53,11,0)
(156,66,0)
(14,129,0)
(44,64,0)
(155,93,0)
(193,31,0)
(186,198,0)
(123,133,0)
(67,47,0)
(18,180,0)
(154,168,0)
(164,122,0)
(19,171,0)
(38,76,0)
(77,29,0)
(2,59,0)
(142,163,0)
(65,50,0)
(102,31,0)
(104,31,0)
(70,89,0)
(152,77,0)
(4,29,0)
(78,54,0)
(122,146,0)
(125,88,0)
(171,19,0)
(72,189,0)
(22,11,0)
(91,168,0)
(196,15,0)
(153,90,0)
(165,67,0)
(66,171,0)
(15,137,0)
(146,25,0)
(73,61,0)
(170,196,0)
(167,33,0)
(131,25,0)
(39,50,0)
(77,66,0)
(7,58,0)
(0,64,0)
(83,179,0)
(24,180,0)
(15,149,0)
(118,120,0)
(169,186,0)
(198,99,0)
(36,192,0)
(12,77,0)
(181,87,0)
(42,149,0)
(186,120,0)
(46,29,0)
(98,13,0)
(3,31,0)
(85,22,0)
(112,38,0)
(59,11,0)
(50,82,0)
(100,95,0)
(86,13,0)
(161,76,0)
(103,74,0)
(19,116,0)
(41,99,0)
(54,95,0)
(28,82,0)
(163,193,0)
(177,133,0)
(63,7,0)
(89,139,0)
(173,120,0)
(196,84,0)
(106,11,0)
(34,32,0)
(51,46,0)
(189,133,0)
(156,84,0)
(146,33,0)
(76,38,0)
(94,193,0)
(147,118,0)
(137,15,0)
(176,31,0)
(13,86,0)
(57,49,0)
(87,29,0)
(35,107,0)
(190,50,0)
(134,149,0)
(50,190,0)
(20,160,0)
(145,47,0)
(40,145,0)
(99,198,0)
(129,180,0)
(37,47,0)
(190,109,0)
(182,15,0)
(69,180,0)
(49,84,0)
(139,11,0)
(95,54,0)
(120,11,0)
(25,146,0)
(92,191,0)
(84,11,0)
(31,68,0)
(129,66,0)
(195,156,0)
(199,11,0)
(144,48,0)
(80,86,0)
(143,66,0)
(71,185,0)
(8,31,0)
(33,146,0)
(95,100,0)
(45,186,0)
(163,74,0)
(50,47,0)
(9,116,0)
(95,133,0)
(1,137,0)
(32,93,0)
(188,148,0)
(74,11,0)
(139,89,0)
(111,171,0)
(183,192,0)
(81,122,0)
(171,111,0)
(66,180,0)
(128,156,0)
(30,48,0)
(136,193,0)
(38,11,0)
(121,126,0)
(97,135,0)
(174,87,0)
(156,32,0)
(21,31,0)
(77,82,0)
(75,180,0)
(6,13,0)
(116,19,0)
(74,48,0)
(23,48,0)
(162,11,0)
(52,6,0)
(64,120,0)
(90,64,0)
(133,74,0)
(5,31,0)
(118,22,0)
(17,59,0)
(160,92,0)
(61,126,0)
(178,135,0)
(120,64,0)
(56,84,0)
(133,189,0)
(61,139,0)
(27,180,0)
(55,29,0)
(198,186,0)
(156,15,0)
(10,177,0)
(114,112,0)
(171,66,0)
(185,31,0)
(48,74,0)
(126,61,0)
(62,126,0)
(115,64,0)
(60,157,0)
(16,94,0)
(108,94,0)
(187,118,0)
(50,66,0)
(119,90,0)
(43,47,0)
(133,177,0)
(13,11,0)
(64,74,0)
(130,11,0)
(101,197,0)
(140,193,0)
(116,9,0)
(26,88,0)
(135,74,0)
(79,112,0)
(13,6,0)
(175,9,0)
(180,138,0)
(113,116,0)
(184,185,0)
(124,145,0)
(194,199,0)
(146,122,0)
(82,150,0)
(64,90,0)
(94,74,0)
(158,172,0)
(127,196,0)
(168,199,0)
(110,99,0)
(163,141,0)
(107,66,0)
(105,149,0)
(133,95,0)
(92,160,0)
(117,107,0)
(166,31,0)
(87,29,1)
(99,120,1)
(146,33,1)
(47,43,1)
(110,41,1)
(60,198,1)
(178,74,1)
(113,143,1)
(65,39,1)
(137,1,1)
(163,193,1)
(184,88,1)
(143,192,1)
(17,2,1)
(144,23,1)
(108,101,1)
(89,70,1)
(152,12,1)
(14,7,1)
(46,51,1)
(127,87,1)
(177,10,1)
(196,170,1)
(40,47,1)
(103,59,1)
(90,153,1)
(140,185,1)
(171,111,1)
(126,121,1)
(84,49,1)
(56,22,1)
(7,63,1)
(168,91,1)
(13,6,1)
(77,152,1)
(72,95,1)
(43,37,1)
(33,167,1)
(49,57,1)
(189,72,1)
(16,108,1)
(19,116,1)
(94,74,1)
(2,25,1)
(115,44,1)
(120,64,1)
(67,47,1)
(160,20,1)
(163,74,1)
(9,175,1)
(48,144,1)
(23,30,1)
(57,56,1)
(83,177,1)
(195,196,1)
(123,38,1)
(71,184,1)
(174,46,1)
(92,160,1)
(156,128,1)
(13,86,1)
(146,122,1)
(39,145,1)
(119,115,1)
(186,45,1)
(108,60,1)
(98,86,1)
(101,135,1)
(159,192,1)
(136,140,1)
(151,94,1)
(4,55,1)
(158,25,1)
(161,112,1)
(86,80,1)
(107,117,1)
(66,171,1)
(55,107,1)
(193,136,1)
(61,73,1)
(107,66,1)
(12,87,1)
(135,97,1)
(36,183,1)
(131,146,1)
(186,120,1)
(34,156,1)
(54,78,1)
(40,67,1)
(153,119,1)
(156,15,1)
(129,66,1)
(173,177,1)
(61,126,1)
(94,193,1)
(154,13,1)
(30,103,1)
(163,142,1)
(62,199,1)
(50,47,1)
(199,194,1)
(121,62,1)
(25,146,1)
(77,29,1)
(20,107,1)
(77,66,1)
(175,113,1)
(183,151,1)
(145,47,1)
(167,122,1)
(164,132,1)
(169,99,1)
(133,74,1)
(170,127,1)
(156,84,1)
(82,28,1)
(188,151,1)
(165,190,1)
(46,29,1)
(22,85,1)
(99,110,1)
(122,81,1)
(112,79,1)
(50,82,1)
(135,74,1)
(196,15,1)
(32,34,1)
(50,65,1)
(64,90,1)
(44,173,1)
(181,174,1)
(55,92,1)
(78,123,1)
(6,52,1)
(15,137,1)
(159,129,1)
(38,76,1)
(118,120,1)
(133,189,1)
(125,15,1)
(156,66,1)
(132,84,1)
(194,168,1)
(151,163,1)
(63,196,1)
(74,48,1)
(177,133,1)
(37,32,1)
(91,154,1)
(139,89,1)
(183,188,1)
(185,71,1)
(183,88,1)
(145,124,1)
(29,4,1)
(67,165,1)
(81,164,1)
(51,82,1)
(198,99,1)
(45,169,1)
(192,36,1)
(70,61,1)
(133,95,1)
(196,84,1)
(50,66,1)
(85,118,1)
(88,26,1)
(174,29,1)
(171,19,1)
(87,181,1)
(114,139,1)
(35,66,1)
(26,125,1)
(97,178,1)
(73,126,1)
(147,187,1)
(1,182,1)
(116,9,1)
(95,100,1)
(94,16,1)
(64,74,1)
(108,83,1)
(187,198,1)
(117,35,1)
(128,195,1)
(142,94,1)
(80,135,1)
(28,77,1)
(108,158,1)
(10,133,1)
(198,186,1)
(59,17,1)
(64,0,1)
(164,193,1)
(79,114,1)
(14,145,1)
(95,54,1)
(124,40,1)
(0,90,1)
(129,14,1)
(41,120,1)
(118,147,1)
(52,98,1)
(25,131,1)
(108,132,1)
(76,161,1)
(190,50,1)
(39,145,2)
(185,88,2)
(50,145,2)
(90,177,2)
(184,88,2)
(40,145,2)
(49,198,2)
(64,74,2)
(177,135,2)
(6,135,2)
(44,177,2)
(144,25,2)
(121,135,2)
(81,132,2)
(61,126,2)
(19,116,2)
(28,87,2)
(71,88,2)
(17,25,2)
(126,135,2)
(122,88,2)
(22,198,2)
(91,135,2)
(199,135,2)
(73,135,2)
(89,135,2)
(196,15,2)
(64,90,2)
(52,135,2)
(15,137,2)
(146,132,2)
(123,135,2)
(67,47,2)
(189,135,2)
(43,196,2)
(193,88,2)
(76,135,2)
(190,145,2)
(113,192,2)
(118,120,2)
(74,48,2)
(131,88,2)
(33,88,2)
(107,192,2)
(117,192,2)
(163,193,2)
(152,87,2)
(128,196,2)
(169,99,2)
(173,177,2)
(46,87,2)
(190,50,2)
(146,122,2)
(110,177,2)
(66,171,2)
(45,99,2)
(10,135,2)
(132,198,2)
(164,132,2)
(25,146,2)
(156,66,2)
(178,25,2)
(170,192,2)
(181,87,2)
(163,94,2)
(55,192,2)
(164,88,2)
(95,54,2)
(196,84,2)
(12,87,2)
(131,132,2)
(135,25,2)
(171,19,2)
(145,196,2)
(25,132,2)
(160,107,2)
(116,192,2)
(50,66,2)
(56,198,2)
(103,25,2)
(156,15,2)
(196,192,2)
(112,135,2)
(195,196,2)
(94,88,2)
(67,145,2)
(40,196,2)
(9,192,2)
(46,29,2)
(87,192,2)
(50,47,2)
(101,135,2)
(92,160,2)
(13,135,2)
(107,66,2)
(140,88,2)
(120,177,2)
(188,151,2)
(171,192,2)
(99,177,2)
(95,100,2)
(153,177,2)
(161,135,2)
(81,88,2)
(23,25,2)
(174,87,2)
(92,107,2)
(16,88,2)
(60,198,2)
(77,87,2)
(38,76,2)
(7,196,2)
(85,198,2)
(94,193,2)
(35,192,2)
(99,120,2)
(154,135,2)
(63,196,2)
(70,135,2)
(115,177,2)
(119,177,2)
(94,74,2)
(165,145,2)
(13,86,2)
(156,84,2)
(186,99,2)
(97,25,2)
(25,88,2)
(146,88,2)
(51,87,2)
(146,33,2)
(127,192,2)
(175,192,2)
(84,198,2)
(79,135,2)
(129,66,2)
(48,25,2)
(66,192,2)
(116,9,2)
(61,135,2)
(118,198,2)
(29,192,2)
(163,74,2)
(133,95,2)
(32,196,2)
(151,88,2)
(158,25,2)
(156,196,2)
(38,135,2)
(62,135,2)
(168,135,2)
(122,132,2)
(171,111,2)
(143,192,2)
(47,196,2)
(98,135,2)
(77,29,2)
(167,88,2)
(82,87,2)
(65,145,2)
(177,133,2)
(145,47,2)
(87,29,2)
(86,135,2)
(187,198,2)
(198,186,2)
(194,135,2)
(136,88,2)
(34,196,2)
(114,135,2)
(19,192,2)
(83,177,2)
(133,135,2)
(80,135,2)
(74,25,2)
(33,132,2)
(0,177,2)
(174,192,2)
(142,94,2)
(120,64,2)
(59,25,2)
(167,132,2)
(87,87,2)
(57,198,2)
(133,189,2)
(198,177,2)
(64,177,2)
(139,135,2)
(30,25,2)
(139,89,2)
(54,135,2)
(14,192,2)
(4,192,2)
(72,135,2)
(186,120,2)
(198,99,2)
(13,6,2)
(37,196,2)
(129,192,2)
(41,177,2)
(181,192,2)
(77,66,2)
(95,135,2)
(124,196,2)
(108,88,2)
(78,135,2)
(135,74,2)
(124,145,2)
(84,49,2)
(133,74,2)
(50,82,2)
(20,107,2)
(147,198,2)
(2,25,2)
(145,145,2)
-----------------------------------
(0,0)
(1,1)
(2,wsaDataInit)
(3,recvResult)
(4,0)
(5,service)
(6,sizeof(service)
(7,printLine("ERROR: Array index is negative.")
(8,do)
(9,sizeof(int)
(10,SOCKET_ERROR)
(11,)
(12,buffer)
(13,memset(&service, 0, sizeof(service)
(14,buffer)
(15,data = -1)
(16,INVALID_SOCKET)
(17,1)
(18,if (buffer == NULL)
(19,malloc(10 * sizeof(int)
(20,1)
(21,wsaDataInit)
(22,inputBuffer[recvResult] = \\\'\\\\0\\\')
(23,SOCK_STREAM)
(24,buffer)
(25,WSAStartup(MAKEWORD(2,2)
(26,5)
(27,i)
(28,0)
(29,i = 0)
(30,AF_INET)
(31,)
(32,buffer[data] = 1)
(33,&wsaData)
(34,1)
(35,buffer)
(36,5)
(37,i)
(38,service.sin_port = htons(TCP_PORT)
(39,buffer)
(40,i)
(41,recvResult)
(42,if(STATIC_CONST_FIVE==5)
(43,0)
(44,connectSocket)
(45,0)
(46,i++)
(47,i = 0)
(48,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(49,atoi(inputBuffer)
(50,buffer[i])
(51,i)
(52,service)
(53,if (connectSocket == INVALID_SOCKET)
(54,&service)
(55,i)
(56,data)
(57,inputBuffer)
(58,)
(59,wsaDataInit = 1)
(60,break;)
(61,service.sin_addr.s_addr)
(62,service)
(63,"ERROR: Array index is negative.")
(64,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(65,i)
(66,* buffer = (int *)
(67,i++)
(68,)
(69,for (i = 0; i < 10; i++)
(70,IP_ADDRESS)
(71,0)
(72,service)
(73,s_addr)
(74,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(75,if (data >= 0)
(76,htons(TCP_PORT)
(77,buffer[i])
(78,service)
(79,sin_port)
(80,service)
(81,2)
(82,buffer[i] = 0)
(83,break;)
(84,data = atoi(inputBuffer)
(85,\\\'\\\\0\\\')
(86,&service)
(87,i < 10)
(88,STATIC_CONST_FIVE==5)
(89,inet_addr(IP_ADDRESS)
(90,CHAR_ARRAY_SIZE - 1)
(91,sin_family)
(92,exit(-1)
(93,)
(94,connectSocket != INVALID_SOCKET)
(95,(struct sockaddr*)
(96,wsaData)
(97,INVALID_SOCKET)
(98,0)
(99,recvResult == SOCKET_ERROR)
(100,struct sockaddr*)
(101,break;)
(102,connectSocket)
(103,connectSocket)
(104,inputBuffer)
(105,if(STATIC_CONST_FIVE==5)
(106,if (connect(connectSocket, (struct sockaddr*)
(107,buffer == NULL)
(108,connectSocket)
(109,)
(110,SOCKET_ERROR)
(111,int *)
(112,service.sin_port)
(113,10)
(114,service)
(115,inputBuffer)
(116,10 * sizeof(int)
(117,NULL)
(118,inputBuffer[recvResult])
(119,CHAR_ARRAY_SIZE)
(120,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(121,sin_addr)
(122,MAKEWORD(2,2)
(123,connectSocket)
(124,10)
(125,STATIC_CONST_FIVE)
(126,service.sin_addr)
(127,data)
(128,data)
(129,free(buffer)
(130,if (WSAStartup(MAKEWORD(2,2)
(131,NO_ERROR)
(132,0)
(133,connect(connectSocket, (struct sockaddr*)
(134,data)
(135,connectSocket == INVALID_SOCKET)
(136,INVALID_SOCKET)
(137,-1)
(138,)
(139,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(140,connectSocket)
(141,)
(142,connectSocket)
(143,buffer)
(144,IPPROTO_TCP)
(145,i < 10)
(146,WSAStartup(MAKEWORD(2,2)
(147,recvResult)
(148,)
(149,)
(150,)
(151,wsaDataInit)
(152,i)
(153,1)
(154,service)
(155,for(i = 0; i < 10; i++)
(156,buffer[data])
(157,)
(158,break;)
(159,RET)
(160,-1)
(161,TCP_PORT)
(162,if (recvResult == SOCKET_ERROR || recvResult == 0)
(163,CLOSE_SOCKET(connectSocket)
(164,2)
(165,i)
(166,if (connectSocket != INVALID_SOCKET)
(167,wsaData)
(168,service.sin_family)
(169,recvResult)
(170,0)
(171,(int *)
(172,)
(173,recvResult)
(174,i)
(175,int)
(176,if (wsaDataInit)
(177,connect(connectSocket, (struct sockaddr*)
(178,connectSocket)
(179,)
(180,)
(181,10)
(182,data)
(183,STATIC_CONST_FIVE)
(184,wsaDataInit)
(185,wsaDataInit = 0)
(186,recvResult == 0)
(187,inputBuffer)
(188,WSACleanup()
(189,sizeof(service)
(190,printIntLine(buffer[i])
(191,)
(192,STATIC_CONST_FIVE==5)
(193,connectSocket = INVALID_SOCKET)
(194,AF_INET)
(195,buffer)
(196,data >= 0)
(197,)
(198,recvResult == SOCKET_ERROR || recvResult == 0)
(199,service.sin_family = AF_INET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^