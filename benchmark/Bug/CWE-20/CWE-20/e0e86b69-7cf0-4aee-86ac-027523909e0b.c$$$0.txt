-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_16_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
72,73
72,74
73,74
75,76
78,79
78,80
80,81
80,82
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,60,61,66,68,69,70,74,76,77,79,84,86,87
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_16_bad(){    char * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
void
CWE416_Use_After_Free__malloc_free_char_16_bad()
CWE416_Use_After_Free__malloc_free_char_16_bad
{    char * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
1
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
break;
while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
-----joern-----
(51,47,0)
(13,31,0)
(45,10,0)
(28,33,0)
(17,45,0)
(45,37,0)
(1,23,0)
(19,33,0)
(31,13,0)
(25,6,0)
(30,15,0)
(16,48,0)
(46,3,0)
(42,46,0)
(15,23,0)
(20,23,0)
(8,6,0)
(4,47,0)
(31,37,0)
(48,27,0)
(34,49,0)
(8,33,0)
(37,31,0)
(32,47,0)
(44,32,0)
(41,27,0)
(38,6,0)
(39,8,0)
(26,32,0)
(47,31,0)
(35,42,0)
(10,45,0)
(37,45,0)
(29,10,0)
(9,15,0)
(18,23,0)
(7,48,0)
(11,9,0)
(24,6,0)
(50,51,0)
(47,6,0)
(31,47,0)
(27,47,0)
(33,8,0)
(46,42,0)
(27,25,0)
(9,49,0)
(9,47,0)
(51,6,0)
(27,48,0)
(21,15,0)
(12,8,0)
(8,47,0)
(0,25,0)
(51,50,1)
(35,32,1)
(4,14,1)
(51,47,1)
(9,15,1)
(16,7,1)
(45,10,1)
(47,31,1)
(12,39,1)
(2,24,1)
(5,34,1)
(34,9,1)
(8,33,1)
(19,28,1)
(15,21,1)
(27,48,1)
(9,47,1)
(9,11,1)
(21,30,1)
(39,46,1)
(31,37,1)
(26,44,1)
(8,47,1)
(14,15,1)
(32,26,1)
(11,2,1)
(29,17,1)
(39,32,1)
(28,12,1)
(44,47,1)
(46,42,1)
(17,4,1)
(10,29,1)
(42,35,1)
(31,13,1)
(32,47,1)
(5,2,1)
(33,19,1)
(7,41,1)
(25,0,1)
(24,51,1)
(48,16,1)
(27,47,1)
(41,8,1)
(0,27,1)
(50,25,1)
(2,14,1)
(37,45,1)
(4,14,2)
(48,14,2)
(24,14,2)
(10,14,2)
(28,14,2)
(9,47,2)
(19,14,2)
(32,47,2)
(31,37,2)
(17,14,2)
(8,47,2)
(9,2,2)
(31,14,2)
(12,14,2)
(11,2,2)
(51,47,2)
(29,14,2)
(8,14,2)
(33,14,2)
(42,32,2)
(35,32,2)
(47,31,2)
(9,15,2)
(39,14,2)
(27,47,2)
(44,14,2)
(8,33,2)
(27,14,2)
(27,48,2)
(25,14,2)
(46,32,2)
(26,14,2)
(51,14,2)
(50,14,2)
(34,2,2)
(45,14,2)
(37,14,2)
(0,14,2)
(32,14,2)
(46,42,2)
(47,14,2)
(7,14,2)
(41,14,2)
(31,13,2)
(16,14,2)
(45,10,2)
(37,45,2)
-----------------------------------
(0,\'\\\\0\')
(1,data)
(2,1)
(3,)
(4,data)
(5,RET)
(6,)
(7,100)
(8,memset(data, \'A\', 100-1)
(9,printLine(data)
(10,sizeof(char)
(11,data)
(12,'A')
(13,char *)
(14,1)
(15,data = NULL)
(16,1)
(17,100)
(18,while(1)
(19,1)
(20,while(1)
(21,NULL)
(22,\'A\')
(23,)
(24,break;)
(25,data[100-1] = \'\\\\0\')
(26,NULL)
(27,data[100-1])
(28,100)
(29,char)
(30,data)
(31,(char *)
(32,data == NULL)
(33,100-1)
(34,break;)
(35,1)
(36,memset(data, 'A', 100-1)
(37,malloc(100*sizeof(char)
(38,if (data == NULL)
(39,data)
(40,'\\\\0')
(41,data)
(42,-1)
(43,data[100-1] = '\\\\0')
(44,data)
(45,100*sizeof(char)
(46,exit(-1)
(47,data = (char *)
(48,100-1)
(49,)
(50,data)
(51,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^