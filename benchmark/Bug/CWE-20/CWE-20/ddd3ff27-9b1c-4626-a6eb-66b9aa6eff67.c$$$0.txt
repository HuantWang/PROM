-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    data = badSource(data);
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
        strcat(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,49,51,55,57,59,61,65,67,69,73,75,79,81
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcat(dest, data);
strcat(dest, data)
strcat
strcat
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(32,26,0)
(17,28,0)
(17,14,0)
(8,20,0)
(32,7,0)
(31,32,0)
(21,20,0)
(18,29,0)
(14,25,0)
(35,6,0)
(23,18,0)
(20,26,0)
(5,17,0)
(3,13,0)
(13,2,0)
(20,8,0)
(10,28,0)
(31,29,0)
(0,22,0)
(2,27,0)
(14,29,0)
(22,18,0)
(33,1,0)
(30,8,0)
(25,31,0)
(9,1,0)
(12,25,0)
(25,14,0)
(2,13,0)
(6,18,0)
(16,29,0)
(17,18,0)
(28,18,0)
(1,31,0)
(26,20,0)
(11,14,0)
(7,32,0)
(19,29,0)
(4,31,0)
(22,14,0)
(6,14,0)
(32,31,0)
(24,17,0)
(34,28,0)
(26,32,0)
(28,34,1)
(0,6,1)
(30,21,1)
(2,13,1)
(12,11,1)
(25,31,1)
(22,0,1)
(24,5,1)
(25,12,1)
(14,25,1)
(35,17,1)
(33,9,1)
(6,14,1)
(26,20,1)
(3,1,1)
(17,28,1)
(21,4,1)
(1,33,1)
(5,28,1)
(9,31,1)
(1,31,1)
(32,26,1)
(11,2,1)
(20,8,1)
(11,1,1)
(8,30,1)
(13,3,1)
(6,35,1)
(31,32,1)
(17,14,1)
(10,14,1)
(22,14,1)
(15,22,1)
(34,10,1)
(17,24,1)
(32,7,1)
(32,26,2)
(2,1,2)
(25,31,2)
(2,13,2)
(26,20,2)
(13,1,2)
(22,14,2)
(17,14,2)
(14,25,2)
(3,1,2)
(32,7,2)
(17,28,2)
(31,32,2)
(6,14,2)
(1,31,2)
(20,8,2)
-----------------------------------
(0,data)
(1,data == NULL)
(2,exit(-1)
(3,1)
(4,data)
(5,dest)
(6,printLine(data)
(7,char *)
(8,sizeof(char)
(9,data)
(10,dest)
(11,data)
(12,data)
(13,-1)
(14,data = badSource(data)
(15,RET)
(16,if (data == NULL)
(17,strcat(dest, data)
(18,)
(19,data)
(20,100*sizeof(char)
(21,100)
(22,free(data)
(23,dest)
(24,data)
(25,badSource(data)
(26,malloc(100*sizeof(char)
(27,)
(28,dest[50] = "")
(29,)
(30,char)
(31,data = (char *)
(32,(char *)
(33,NULL)
(34,"")
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^