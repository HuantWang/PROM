-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(wchar_t));
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
61,68
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
98,99
99,100
99,101
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,97,100,101,106,108,109,110,114,116,120,122
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
96,97
96,98
103,104
103,105
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memcpy(data, source, 100*sizeof(wchar_t));
memcpy(data, source, 100*sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(37,15,0)
(32,10,0)
(26,33,0)
(5,18,0)
(35,41,0)
(33,40,0)
(28,5,0)
(18,33,0)
(22,1,0)
(40,33,0)
(33,26,0)
(32,15,0)
(2,14,0)
(19,16,0)
(17,22,0)
(21,19,0)
(19,26,0)
(12,1,0)
(10,26,0)
(41,26,0)
(24,9,0)
(14,2,0)
(23,26,0)
(30,9,0)
(15,32,0)
(10,16,0)
(8,1,0)
(2,0,0)
(6,22,0)
(34,23,0)
(3,29,0)
(42,26,0)
(10,22,0)
(7,32,0)
(33,18,0)
(19,22,0)
(29,5,0)
(27,10,0)
(10,32,0)
(18,5,0)
(26,9,0)
(31,22,0)
(13,23,0)
(41,22,0)
(4,16,0)
(39,16,0)
(11,14,0)
(16,1,0)
(41,16,0)
(5,29,0)
(25,10,0)
(5,29,1)
(23,13,1)
(10,32,1)
(19,26,1)
(3,28,1)
(27,31,1)
(17,10,1)
(10,16,1)
(41,26,1)
(25,27,1)
(19,21,1)
(7,25,1)
(31,30,1)
(30,2,1)
(35,17,1)
(33,18,1)
(19,16,1)
(13,34,1)
(20,19,1)
(33,40,1)
(11,23,1)
(30,23,1)
(4,39,1)
(31,38,1)
(37,7,1)
(42,38,1)
(14,11,1)
(29,3,1)
(41,35,1)
(34,26,1)
(16,4,1)
(18,5,1)
(41,16,1)
(23,26,1)
(32,15,1)
(38,16,1)
(2,14,1)
(26,33,1)
(10,26,1)
(21,41,1)
(28,42,1)
(15,37,1)
(33,38,2)
(30,38,2)
(18,5,2)
(14,23,2)
(32,15,2)
(26,33,2)
(41,26,2)
(34,38,2)
(42,38,2)
(41,16,2)
(19,16,2)
(28,38,2)
(23,26,2)
(26,38,2)
(2,14,2)
(33,18,2)
(10,26,2)
(10,32,2)
(18,38,2)
(33,40,2)
(2,23,2)
(29,38,2)
(5,29,2)
(11,23,2)
(3,38,2)
(23,38,2)
(13,38,2)
(5,38,2)
(19,26,2)
(10,16,2)
-----------------------------------
(0,)
(1,)
(2,exit(-1)
(3,wchar_t)
(4,NULL)
(5,50*sizeof(wchar_t)
(6,source)
(7,100)
(8,if(globalReturnsTrue()
(9,)
(10,memcpy(data, source, 100*sizeof(wchar_t)
(11,1)
(12,data)
(13,NULL)
(14,-1)
(15,sizeof(wchar_t)
(16,data = NULL)
(17,'\\\\0')
(18,malloc(50*sizeof(wchar_t)
(19,free(data)
(20,RET)
(21,data)
(22,)
(23,data == NULL)
(24,if (data == NULL)
(25,source)
(26,data = (wchar_t *)
(27,data)
(28,50)
(29,sizeof(wchar_t)
(30,\'\\\\0\')
(31,'\\\\0')
(32,100*sizeof(wchar_t)
(33,(wchar_t *)
(34,data)
(35,data)
(36,'\\\\0')
(37,wchar_t)
(38,globalReturnsTrue()
(39,data)
(40,wchar_t *)
(41,printWLine(data)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^