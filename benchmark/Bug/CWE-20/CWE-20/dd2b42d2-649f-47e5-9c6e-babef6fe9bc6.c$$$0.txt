-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    goto source;
source:
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
45,46
45,47
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,46,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
84,85
84,86
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
goto source;
source
source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1);
source
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(17,44,0)
(12,25,0)
(54,46,0)
(5,49,0)
(23,57,0)
(35,44,0)
(39,6,0)
(13,6,0)
(9,10,0)
(30,22,0)
(4,43,0)
(29,45,0)
(6,10,0)
(55,57,0)
(58,22,0)
(25,1,0)
(37,28,0)
(16,23,0)
(51,43,0)
(31,54,0)
(15,3,0)
(45,36,0)
(49,10,0)
(55,6,0)
(56,31,0)
(44,6,0)
(25,12,0)
(47,36,0)
(58,6,0)
(48,22,0)
(53,10,0)
(32,36,0)
(1,57,0)
(3,6,0)
(8,58,0)
(45,26,0)
(19,13,0)
(42,12,0)
(26,45,0)
(38,10,0)
(40,28,0)
(36,6,0)
(28,0,0)
(18,1,0)
(2,23,0)
(22,58,0)
(36,45,0)
(49,6,0)
(50,7,0)
(33,26,0)
(43,49,0)
(11,57,0)
(25,23,0)
(21,29,0)
(14,10,0)
(49,43,0)
(29,6,0)
(34,49,0)
(0,3,0)
(13,57,0)
(36,23,0)
(7,10,0)
(52,40,0)
(41,25,0)
(6,3,0)
(24,55,0)
(0,28,0)
(3,0,0)
(36,57,0)
(45,29,0)
(28,40,0)
(54,31,0)
(3,15,0)
(27,12,0)
(57,10,0)
(58,7,0)
(49,6,1)
(3,0,1)
(33,29,1)
(23,2,1)
(55,24,1)
(36,45,1)
(45,29,1)
(35,17,1)
(24,1,1)
(55,6,1)
(47,32,1)
(34,5,1)
(43,51,1)
(18,25,1)
(21,47,1)
(41,36,1)
(5,14,1)
(19,55,1)
(17,6,1)
(58,6,1)
(25,23,1)
(20,13,1)
(6,3,1)
(1,18,1)
(42,41,1)
(48,8,1)
(44,35,1)
(26,33,1)
(52,37,1)
(27,42,1)
(50,58,1)
(12,27,1)
(58,22,1)
(14,54,1)
(29,6,1)
(28,40,1)
(32,23,1)
(37,39,1)
(44,6,1)
(54,31,1)
(22,30,1)
(8,49,1)
(3,15,1)
(13,6,1)
(31,56,1)
(16,7,1)
(30,48,1)
(25,12,1)
(56,44,1)
(13,19,1)
(45,26,1)
(49,43,1)
(2,16,1)
(0,28,1)
(36,23,1)
(40,52,1)
(36,6,1)
(29,21,1)
(7,50,1)
(4,34,1)
(14,44,1)
(51,4,1)
(54,44,2)
(0,28,2)
(25,12,2)
(58,22,2)
(36,45,2)
(49,6,2)
(55,6,2)
(36,23,2)
(6,3,2)
(28,40,2)
(44,6,2)
(3,0,2)
(13,6,2)
(36,6,2)
(45,26,2)
(49,43,2)
(54,31,2)
(3,15,2)
(29,6,2)
(31,44,2)
(58,6,2)
(45,29,2)
(25,23,2)
(56,44,2)
-----------------------------------
(0,malloc(100*sizeof(char)
(1,dest[50-1] = \\\'\\\\0\\\')
(2,"")
(3,(char *)
(4,100)
(5,data)
(6,data = (char *)
(7,data[100-1] = \\\'\\\\0\\\')
(8,data)
(9,source:)
(10,)
(11,dest)
(12,50-1)
(13,free(data)
(14,goto source;)
(15,char *)
(16,dest)
(17,data)
(18,\\\'\\\\0\\\')
(19,data)
(20,RET)
(21,data)
(22,100-1)
(23,dest[50] = "")
(24,data)
(25,dest[50-1])
(26,sizeof(char)
(27,1)
(28,100*sizeof(char)
(29,strlen(data)
(30,1)
(31,-1)
(32,dest)
(33,char)
(34,\\\'A\\\')
(35,NULL)
(36,memcpy(dest, data, strlen(data)
(37,100)
(38,if (data == NULL)
(39,data)
(40,sizeof(char)
(41,dest)
(42,50)
(43,100-1)
(44,data == NULL)
(45,strlen(data)
(46,)
(47,data)
(48,100)
(49,memset(data, \\\'A\\\', 100-1)
(50,\\\'\\\\0\\\')
(51,1)
(52,char)
(53,data)
(54,exit(-1)
(55,printLine(data)
(56,1)
(57,)
(58,data[100-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^