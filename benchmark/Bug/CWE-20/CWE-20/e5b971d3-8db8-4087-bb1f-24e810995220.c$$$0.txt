-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int64_t));
        printLongLongLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
59,60
60,61
60,62
61,62
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
70,71
70,72
70,73
72,73
74,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
96,98
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,47,49,54,56,57,58,62,63,64,69,71,73,76,80,82,84,86,90,91,95,98,99,103,105
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int64_t));
memcpy(data, source, 100*sizeof(int64_t))
memcpy
memcpy
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(38,6,0)
(21,23,0)
(13,34,0)
(8,46,0)
(13,48,0)
(35,13,0)
(2,18,0)
(20,23,0)
(16,6,0)
(6,38,0)
(5,2,0)
(0,26,0)
(22,17,0)
(10,6,0)
(7,1,0)
(18,17,0)
(47,48,0)
(35,36,0)
(2,5,0)
(9,45,0)
(36,17,0)
(21,30,0)
(34,13,0)
(24,48,0)
(29,48,0)
(46,13,0)
(19,13,0)
(37,12,0)
(34,38,0)
(32,10,0)
(12,18,0)
(14,46,0)
(26,0,0)
(4,36,0)
(12,13,0)
(38,34,0)
(44,5,0)
(31,48,0)
(12,36,0)
(12,26,0)
(11,26,0)
(5,36,0)
(42,34,0)
(40,17,0)
(23,21,0)
(39,18,0)
(43,48,0)
(12,45,0)
(45,18,0)
(33,12,0)
(6,10,0)
(26,12,0)
(25,5,0)
(41,0,0)
(5,13,0)
(1,48,0)
(28,36,0)
(35,18,0)
(27,35,0)
(34,42,0)
(16,19,1)
(36,28,1)
(37,33,1)
(19,3,1)
(9,47,1)
(0,41,1)
(7,3,1)
(13,34,1)
(34,42,1)
(15,35,1)
(46,8,1)
(21,23,1)
(32,16,1)
(44,25,1)
(45,9,1)
(27,2,1)
(11,37,1)
(34,38,1)
(26,0,1)
(2,5,1)
(3,36,1)
(12,36,1)
(35,27,1)
(9,31,1)
(14,13,1)
(12,45,1)
(12,13,1)
(12,26,1)
(46,13,1)
(8,14,1)
(38,6,1)
(1,7,1)
(5,36,1)
(41,11,1)
(6,10,1)
(35,13,1)
(10,32,1)
(31,46,1)
(23,20,1)
(33,45,1)
(5,13,1)
(28,4,1)
(35,36,1)
(20,46,1)
(5,44,1)
(25,12,1)
(31,21,1)
(47,1,1)
(46,13,2)
(19,3,2)
(26,0,2)
(32,3,2)
(10,3,2)
(12,45,2)
(31,3,2)
(5,36,2)
(47,3,2)
(1,3,2)
(14,3,2)
(6,10,2)
(38,6,2)
(35,36,2)
(20,46,2)
(38,3,2)
(7,3,2)
(2,5,2)
(5,13,2)
(12,26,2)
(16,3,2)
(13,34,2)
(12,36,2)
(12,13,2)
(34,3,2)
(8,3,2)
(21,23,2)
(21,46,2)
(23,46,2)
(46,3,2)
(35,13,2)
(6,3,2)
(34,42,2)
(13,3,2)
(34,38,2)
-----------------------------------
(0,sizeof(int64_t)
(1,printLine("Benign, fixed string")
(2,printLongLongLine(data[0])
(3,6)
(4,data)
(5,data[0])
(6,50*sizeof(int64_t)
(7,"Benign, fixed string")
(8,NULL)
(9,source)
(10,sizeof(int64_t)
(11,100)
(12,memcpy(data, source, 100*sizeof(int64_t)
(13,data = (int64_t *)
(14,data)
(15,RET)
(16,50)
(17,)
(18,)
(19,data)
(20,1)
(21,exit(-1)
(22,switch(6)
(23,-1)
(24,default:)
(25,data)
(26,100*sizeof(int64_t)
(27,data)
(28,NULL)
(29,if (data == NULL)
(30,)
(31,break;)
(32,int64_t)
(33,data)
(34,(int64_t *)
(35,free(data)
(36,data = NULL)
(37,source)
(38,malloc(50*sizeof(int64_t)
(39,source)
(40,data)
(41,int64_t)
(42,int64_t *)
(43,case 6:)
(44,0)
(45,source[100] = {0})
(46,data == NULL)
(47,break;)
(48,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^