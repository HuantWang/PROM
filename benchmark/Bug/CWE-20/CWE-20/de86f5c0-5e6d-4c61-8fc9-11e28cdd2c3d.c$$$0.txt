-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int_10_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printIntLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
55,56
55,57
56,57
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
84,85
86,87
88,89
88,90
89,90
91,92
92,93
93,94
93,95
94,95
96,97
96,98
97,98
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,59,64,65,68,69,72,78,80,81,85,87,90,95,98,99
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
62,63
62,64
66,67
66,68
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int_10_bad(){    int * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int_10_bad()
CWE416_Use_After_Free__malloc_free_int_10_bad
{    int * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalTrue
globalTrue
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5;            }
data[i] = 5;
data[i] = 5
data[i]
data
data
i
i
5
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
-----joern-----
(30,44,0)
(45,11,0)
(15,22,0)
(13,26,0)
(34,43,0)
(5,42,0)
(28,17,0)
(25,22,0)
(18,20,0)
(3,26,0)
(22,7,0)
(25,35,0)
(11,17,0)
(27,29,0)
(8,48,0)
(21,7,0)
(46,9,0)
(20,35,0)
(49,29,0)
(27,35,0)
(0,44,0)
(17,13,0)
(4,25,0)
(4,41,0)
(48,8,0)
(6,35,0)
(50,49,0)
(14,9,0)
(32,29,0)
(10,20,0)
(16,7,0)
(12,25,0)
(43,35,0)
(48,47,0)
(23,27,0)
(40,22,0)
(13,17,0)
(19,27,0)
(24,29,0)
(31,25,0)
(26,35,0)
(25,4,0)
(9,29,0)
(26,3,0)
(35,38,0)
(37,38,0)
(42,36,0)
(17,11,0)
(43,38,0)
(2,8,0)
(26,13,0)
(27,42,0)
(35,26,0)
(44,38,0)
(33,7,0)
(20,18,1)
(24,32,1)
(27,29,1)
(13,17,1)
(48,8,1)
(26,13,1)
(20,35,1)
(35,26,1)
(29,24,1)
(1,39,1)
(18,10,1)
(49,29,1)
(9,29,1)
(27,35,1)
(51,4,1)
(32,48,1)
(39,22,1)
(43,34,1)
(34,9,1)
(27,19,1)
(32,20,1)
(15,40,1)
(19,23,1)
(2,20,1)
(49,50,1)
(25,31,1)
(46,29,1)
(50,42,1)
(45,28,1)
(1,43,1)
(11,45,1)
(22,15,1)
(26,3,1)
(6,39,1)
(31,12,1)
(25,35,1)
(9,14,1)
(5,27,1)
(42,5,1)
(28,6,1)
(43,35,1)
(8,2,1)
(14,46,1)
(10,35,1)
(46,49,1)
(25,22,1)
(4,25,1)
(17,11,1)
(23,9,1)
(12,1,1)
(51,1,1)
(12,1,2)
(31,1,2)
(27,35,2)
(42,9,2)
(26,3,2)
(9,29,2)
(19,9,2)
(14,39,2)
(27,29,2)
(2,20,2)
(4,1,2)
(10,39,2)
(9,9,2)
(14,9,2)
(48,20,2)
(18,39,2)
(26,13,2)
(11,39,2)
(49,29,2)
(20,39,2)
(43,35,2)
(45,39,2)
(5,9,2)
(48,8,2)
(28,39,2)
(17,11,2)
(25,35,2)
(4,25,2)
(27,9,2)
(29,39,2)
(46,9,2)
(50,9,2)
(17,39,2)
(35,26,2)
(46,39,2)
(8,20,2)
(35,39,2)
(20,35,2)
(25,22,2)
(32,39,2)
(43,39,2)
(13,17,2)
(13,39,2)
(9,39,2)
(25,1,2)
(23,9,2)
(34,39,2)
(49,9,2)
(6,39,2)
(26,39,2)
(24,39,2)
-----------------------------------
(0,i)
(1,globalTrue)
(2,1)
(3,int *)
(4,printIntLine(data[0])
(5,5)
(6,data)
(7,)
(8,-1)
(9,i < 100)
(10,data)
(11,sizeof(int)
(12,data)
(13,malloc(100*sizeof(int)
(14,100)
(15,NULL)
(16,data)
(17,100*sizeof(int)
(18,NULL)
(19,i)
(20,data == NULL)
(21,if(globalTrue)
(22,data = NULL)
(23,data)
(24,0)
(25,data[0])
(26,(int *)
(27,data[i])
(28,100)
(29,i = 0)
(30,for(i = 0; i < 100; i++)
(31,0)
(32,i)
(33,if(globalTrue)
(34,data)
(35,data = (int *)
(36,)
(37,if (data == NULL)
(38,)
(39,globalTrue)
(40,data)
(41,)
(42,data[i] = 5)
(43,free(data)
(44,)
(45,int)
(46,i)
(47,)
(48,exit(-1)
(49,i++)
(50,i)
(51,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^