-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_popen_34_bad()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType myUnion;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, L"w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
54,56
55,56
55,57
56,57
56,58
58,59
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
81,84
81,85
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
93,94
94,95
94,96
96,97
98,99
100,101
102,103
102,104
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
130,131
130,132
131,132
132,133
132,134
134,135
134,136
134,137
137,138
138,139
138,140
139,140
142,143
142,144
142,145
143,144
144,145
144,146
145,146
147,148
147,149
150,151
151,152
151,153
152,153
154,155
154,156
154,157
155,156
157,158
160,161
160,162
161,162
161,163
162,163
164,165
166,167
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,57,59,60,65,68,70,71,75,77,83,86,88,91,92,95,97,99,101,106,107,112,114,115,119,121,126,127,129,133,135,136,140,141,146,148,149,153,156,158,159,163,165,170,172
-----computeFrom-----
29,30
29,31
55,56
55,57
56,57
56,58
63,64
63,65
73,74
73,75
80,81
80,82
84,85
84,86
94,95
94,96
109,110
109,111
123,124
123,125
151,152
151,153
161,162
161,163
-----guardedBy-----
59,114
77,101
75,121
86,112
97,114
163,172
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_popen_34_bad(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType myUnion;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
void
CWE78_OS_Command_Injection__wchar_t_file_popen_34_bad()
CWE78_OS_Command_Injection__wchar_t_file_popen_34_bad
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType myUnion;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType
CWE78_OS_Command_Injection__wchar_t_file_popen_34_unionType
myUnion
myUnion
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(38,74,0)
(49,21,0)
(26,3,0)
(4,69,0)
(1,43,0)
(59,38,0)
(64,2,0)
(49,57,0)
(45,69,0)
(43,1,0)
(19,38,0)
(5,74,0)
(52,40,0)
(42,74,0)
(72,57,0)
(54,14,0)
(46,14,0)
(0,8,0)
(19,74,0)
(1,35,0)
(57,74,0)
(2,42,0)
(66,2,0)
(16,35,0)
(71,34,0)
(37,69,0)
(67,47,0)
(35,1,0)
(23,43,0)
(17,70,0)
(18,8,0)
(10,68,0)
(12,74,0)
(39,68,0)
(30,1,0)
(25,11,0)
(8,18,0)
(36,48,0)
(55,33,0)
(68,40,0)
(29,19,0)
(65,23,0)
(34,19,0)
(3,43,0)
(43,23,0)
(54,40,0)
(73,38,0)
(34,45,0)
(50,52,0)
(21,49,0)
(20,48,0)
(32,40,0)
(47,70,0)
(42,19,0)
(62,18,0)
(23,19,0)
(13,8,0)
(48,57,0)
(43,3,0)
(9,45,0)
(43,40,0)
(41,11,0)
(69,74,0)
(61,19,0)
(8,45,0)
(28,69,0)
(40,53,0)
(31,21,0)
(51,52,0)
(44,55,0)
(24,43,0)
(63,35,0)
(6,23,0)
(22,42,0)
(27,53,0)
(60,54,0)
(15,49,0)
(1,30,0)
(56,21,0)
(7,74,0)
(45,34,0)
(40,68,0)
(23,45,0)
(35,45,0)
(43,40,1)
(1,30,1)
(43,23,1)
(29,61,1)
(68,10,1)
(67,3,1)
(32,18,1)
(23,19,1)
(25,49,1)
(71,9,1)
(35,45,1)
(0,13,1)
(44,11,1)
(60,17,1)
(2,66,1)
(62,8,1)
(3,26,1)
(26,43,1)
(13,45,1)
(52,40,1)
(19,38,1)
(1,35,1)
(35,63,1)
(58,55,1)
(42,19,1)
(34,71,1)
(18,62,1)
(22,2,1)
(6,65,1)
(38,73,1)
(49,21,1)
(9,19,1)
(23,45,1)
(3,43,1)
(61,38,1)
(42,22,1)
(58,11,1)
(65,52,1)
(64,18,1)
(17,47,1)
(47,67,1)
(56,31,1)
(41,25,1)
(8,0,1)
(50,40,1)
(40,68,1)
(11,41,1)
(10,39,1)
(45,34,1)
(60,3,1)
(52,51,1)
(66,64,1)
(34,19,1)
(19,29,1)
(64,54,1)
(55,44,1)
(51,50,1)
(54,40,1)
(39,32,1)
(8,45,1)
(16,23,1)
(24,1,1)
(31,15,1)
(73,59,1)
(18,8,1)
(63,16,1)
(43,1,1)
(43,24,1)
(15,42,1)
(23,6,1)
(21,56,1)
(64,52,1)
(54,60,1)
(60,52,2)
(10,18,2)
(43,23,2)
(23,52,2)
(67,3,2)
(51,18,2)
(24,52,2)
(55,11,2)
(1,52,2)
(3,52,2)
(42,19,2)
(63,52,2)
(6,52,2)
(18,8,2)
(52,18,2)
(50,18,2)
(43,40,2)
(3,43,2)
(40,18,2)
(44,11,2)
(40,68,2)
(43,1,2)
(16,52,2)
(1,30,2)
(1,35,2)
(43,52,2)
(39,18,2)
(23,19,2)
(19,38,2)
(52,40,2)
(68,18,2)
(54,52,2)
(45,34,2)
(54,40,2)
(35,45,2)
(47,3,2)
(34,19,2)
(8,45,2)
(65,52,2)
(32,18,2)
(35,52,2)
(49,21,2)
(26,52,2)
(23,45,2)
(17,3,2)
-----------------------------------
(0,dataLen)
(1,(int)
(2,myUnion.unionFirst)
(3,fgetws(data+dataLen, (int)
(4,dataLen)
(5,data)
(6,dataLen)
(7,data_buf)
(8,100-dataLen)
(9,dataLen)
(10,"r")
(11,pipe != NULL)
(12,myUnion)
(13,100)
(14,)
(15,data)
(16,100)
(17,\\\'\\\\0\\\')
(18,100-dataLen > 1)
(19,data = data_buf)
(20,pipe)
(21,myUnion.unionSecond)
(22,data)
(23,data+dataLen)
(24,pFile)
(25,pipe)
(26,NULL)
(27,if (pFile != NULL)
(28,pFile)
(29,data_buf)
(30,int)
(31,myUnion)
(32,pFile)
(33,)
(34,wcslen(data)
(35,100-dataLen)
(36,if (pipe != NULL)
(37,if (100-dataLen > 1)
(38,data_buf[100] = FULL_COMMAND)
(39,FILENAME)
(40,pFile = fopen(FILENAME, "r")
(41,NULL)
(42,myUnion.unionFirst = data)
(43,fgetws(data+dataLen, (int)
(44,pipe)
(45,dataLen = wcslen(data)
(46,if (fgetws(data+dataLen, (int)
(47,printLine("fgetws()
(48,)
(49,* data = myUnion.unionSecond)
(50,pFile)
(51,NULL)
(52,pFile != NULL)
(53,)
(54,fclose(pFile)
(55,PCLOSE(pipe)
(56,unionSecond)
(57,)
(58,RET)
(59,data_buf)
(60,pFile)
(61,data)
(62,1)
(63,dataLen)
(64,myUnion)
(65,data)
(66,unionFirst)
(67,"fgetws()
(68,fopen(FILENAME, "r")
(69,)
(70,)
(71,data)
(72,data)
(73,FULL_COMMAND)
(74,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^