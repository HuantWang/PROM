-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(1)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcsncat(dest, data, wcslen(data));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
65,67
65,68
65,69
65,70
66,67
67,68
67,69
69,70
69,71
69,72
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,52,54,55,60,62,63,64,68,70,72,74,78,80,82,85,87,92,94,95,96,100,102,106,108
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
53,54
53,55
57,58
57,59
61,62
61,63
89,90
89,91
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
1
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcsncat(dest, data, wcslen(data));
wcsncat(dest, data, wcslen(data))
wcsncat
wcsncat
dest
dest
data
data
wcslen(data)
wcslen
wcslen
data
data
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,24,0)
(8,27,0)
(2,24,0)
(14,10,0)
(32,27,0)
(27,20,0)
(26,24,0)
(5,34,0)
(18,14,0)
(3,33,0)
(13,27,0)
(1,34,0)
(17,0,0)
(30,0,0)
(19,24,0)
(0,27,0)
(0,32,0)
(2,27,0)
(12,13,0)
(7,9,0)
(12,10,0)
(31,20,0)
(34,27,0)
(10,12,0)
(23,26,0)
(24,20,0)
(16,20,0)
(36,3,0)
(13,12,0)
(35,20,0)
(27,13,0)
(22,13,0)
(32,0,0)
(6,10,0)
(13,22,0)
(3,36,0)
(10,14,0)
(29,2,0)
(25,32,0)
(26,27,0)
(28,36,0)
(21,24,0)
(2,29,1)
(10,14,1)
(5,1,1)
(36,28,1)
(32,25,1)
(18,6,1)
(4,3,1)
(32,27,1)
(0,27,1)
(17,21,1)
(13,22,1)
(23,2,1)
(15,26,1)
(26,23,1)
(1,27,1)
(27,13,1)
(21,4,1)
(21,7,1)
(26,27,1)
(19,0,1)
(7,4,1)
(25,30,1)
(28,34,1)
(4,34,1)
(3,36,1)
(29,19,1)
(13,12,1)
(30,17,1)
(14,18,1)
(0,32,1)
(6,8,1)
(12,10,1)
(34,27,1)
(34,5,1)
(2,27,1)
(2,27,2)
(13,12,2)
(34,27,2)
(7,4,2)
(12,10,2)
(0,32,2)
(27,13,2)
(0,27,2)
(10,14,2)
(28,34,2)
(26,27,2)
(3,34,2)
(13,22,2)
(3,36,2)
(32,27,2)
(36,34,2)
-----------------------------------
(0,wcsncat(dest, data, wcslen(data)
(1,data)
(2,printWLine(data)
(3,exit(-1)
(4,1)
(5,NULL)
(6,100)
(7,\\'\\\\0\\')
(8,data)
(9,)
(10,100*sizeof(wchar_t)
(11,\\\'\\\\0\\\')
(12,malloc(100*sizeof(wchar_t)
(13,(wchar_t *)
(14,sizeof(wchar_t)
(15,RET)
(16,if(1)
(17,dest)
(18,wchar_t)
(19,\\\'\\\\0\\\')
(20,)
(21,"")
(22,wchar_t *)
(23,data)
(24,)
(25,data)
(26,free(data)
(27,data = (wchar_t *)
(28,1)
(29,data)
(30,data)
(31,if (data == NULL)
(32,wcslen(data)
(33,)
(34,data == NULL)
(35,data)
(36,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^