-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType myStruct)
{
    int data = myStruct.structFirst;
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
83,85
83,86
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,7,9,13,15,19,20,24,26,29,31,32,36,38,41,43,46,47,51,53,58,60,65,66,69,70,73,79,81,82,86,87,93,95,96,101,102,105,106,109,114,117,119,124,125,129,131
-----computeFrom-----
42,43
42,44
49,50
49,51
63,64
63,65
67,68
67,69
76,77
76,78
84,85
84,86
90,91
90,92
99,100
99,101
103,104
103,105
-----guardedBy-----
86,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType myStruct){    int data = myStruct.structFirst;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType myStruct)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType myStruct
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType
myStruct
myStruct
{    int data = myStruct.structFirst;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = myStruct.structFirst;
int data = myStruct.structFirst;
int
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(8,53,0)
(68,7,0)
(15,33,0)
(19,68,0)
(66,14,0)
(45,66,0)
(16,59,0)
(1,33,0)
(62,49,0)
(8,1,0)
(10,33,0)
(18,0,0)
(36,68,0)
(28,26,0)
(25,0,0)
(31,1,0)
(29,33,0)
(52,48,0)
(67,17,0)
(60,6,0)
(50,33,0)
(38,4,0)
(43,38,0)
(34,37,0)
(39,31,0)
(27,8,0)
(9,17,0)
(28,4,0)
(4,38,0)
(37,64,0)
(11,17,0)
(33,56,0)
(59,17,0)
(13,72,0)
(65,11,0)
(31,17,0)
(47,53,0)
(0,57,0)
(38,1,0)
(8,45,0)
(70,33,0)
(7,12,0)
(23,1,0)
(68,19,0)
(31,7,0)
(68,1,0)
(53,3,0)
(41,66,0)
(58,31,0)
(40,28,0)
(21,1,0)
(45,56,0)
(30,56,0)
(68,57,0)
(26,28,0)
(49,45,0)
(72,57,0)
(32,26,0)
(51,21,0)
(69,66,0)
(48,33,0)
(38,43,0)
(54,49,0)
(6,55,0)
(64,20,0)
(22,3,0)
(5,68,0)
(1,38,0)
(24,57,0)
(44,45,0)
(61,21,0)
(66,45,0)
(48,1,0)
(64,37,0)
(63,8,0)
(46,7,0)
(19,42,0)
(71,57,0)
(35,11,0)
(4,28,0)
(17,67,1)
(60,49,1)
(19,68,1)
(45,66,1)
(23,45,1)
(1,38,1)
(57,71,1)
(36,5,1)
(9,64,1)
(59,17,1)
(66,14,1)
(68,1,1)
(11,17,1)
(67,9,1)
(40,23,1)
(5,0,1)
(46,31,1)
(54,62,1)
(61,51,1)
(38,4,1)
(64,37,1)
(37,34,1)
(35,59,1)
(48,52,1)
(0,57,1)
(27,63,1)
(51,1,1)
(72,57,1)
(16,7,1)
(52,6,1)
(0,18,1)
(41,69,1)
(69,44,1)
(31,17,1)
(49,54,1)
(4,28,1)
(18,25,1)
(26,32,1)
(25,72,1)
(9,21,1)
(68,7,1)
(63,49,1)
(62,11,1)
(65,35,1)
(24,53,1)
(59,16,1)
(66,41,1)
(38,43,1)
(71,24,1)
(6,60,1)
(13,19,1)
(34,21,1)
(53,47,1)
(31,1,1)
(2,48,1)
(52,0,1)
(25,57,1)
(58,39,1)
(28,26,1)
(21,1,1)
(35,17,1)
(21,61,1)
(7,46,1)
(8,27,1)
(49,45,1)
(47,8,1)
(11,65,1)
(8,1,1)
(68,57,1)
(32,40,1)
(8,45,1)
(72,13,1)
(39,11,1)
(68,36,1)
(48,1,1)
(31,58,1)
(68,57,2)
(28,26,2)
(31,17,2)
(0,57,2)
(5,0,2)
(71,49,2)
(57,49,2)
(25,49,2)
(63,49,2)
(18,0,2)
(35,11,2)
(31,1,2)
(34,21,2)
(38,43,2)
(49,45,2)
(72,0,2)
(45,66,2)
(11,17,2)
(38,4,2)
(59,11,2)
(47,49,2)
(6,49,2)
(13,0,2)
(24,49,2)
(8,45,2)
(58,11,2)
(64,37,2)
(4,28,2)
(31,11,2)
(18,49,2)
(7,11,2)
(11,11,2)
(60,49,2)
(1,38,2)
(48,1,2)
(53,49,2)
(0,0,2)
(19,0,2)
(46,11,2)
(68,7,2)
(8,1,2)
(8,49,2)
(65,11,2)
(72,57,2)
(64,21,2)
(16,11,2)
(36,0,2)
(37,21,2)
(25,0,2)
(21,1,2)
(39,11,2)
(27,49,2)
(68,1,2)
(68,0,2)
(59,17,2)
(66,14,2)
(19,68,2)
(0,49,2)
-----------------------------------
(0,i < 10)
(1,* buffer = (int *)
(2,RET)
(3,)
(4,malloc(10 * sizeof(int)
(5,buffer)
(6,printLine("ERROR: Array index is negative.")
(7,buffer[i] = 0)
(8,buffer[data])
(9,i)
(10,if (data >= 0)
(11,i < 10)
(12,)
(13,i)
(14,CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_structType myStruct)
(15,buffer)
(16,i)
(17,i = 0)
(18,10)
(19,printIntLine(buffer[i])
(20,)
(21,buffer == NULL)
(22,for(i = 0; i < 10; i++)
(23,buffer)
(24,i)
(25,i)
(26,sizeof(int)
(27,data)
(28,10 * sizeof(int)
(29,for (i = 0; i < 10; i++)
(30,data)
(31,buffer[i])
(32,int)
(33,)
(34,1)
(35,i)
(36,i)
(37,-1)
(38,(int *)
(39,buffer)
(40,10)
(41,structFirst)
(42,)
(43,int *)
(44,data)
(45,data = myStruct.structFirst)
(46,0)
(47,1)
(48,free(buffer)
(49,data >= 0)
(50,i)
(51,buffer)
(52,buffer)
(53,buffer[data] = 1)
(54,0)
(55,)
(56,)
(57,i = 0)
(58,i)
(59,i++)
(60,"ERROR: Array index is negative.")
(61,NULL)
(62,data)
(63,buffer)
(64,exit(-1)
(65,10)
(66,myStruct.structFirst)
(67,0)
(68,buffer[i])
(69,myStruct)
(70,if (buffer == NULL)
(71,0)
(72,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^