-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad(){    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad
{    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,25,0)
(38,62,0)
(48,37,0)
(43,20,0)
(30,9,0)
(44,41,0)
(18,7,0)
(0,51,0)
(7,65,0)
(63,34,0)
(9,34,0)
(15,13,0)
(6,46,0)
(34,63,0)
(40,60,0)
(29,63,0)
(59,65,0)
(45,26,0)
(52,36,0)
(63,58,0)
(23,37,0)
(27,9,0)
(34,46,0)
(41,19,0)
(53,25,0)
(65,25,0)
(12,52,0)
(58,40,0)
(5,20,0)
(5,34,0)
(32,56,0)
(25,54,0)
(28,60,0)
(65,36,0)
(60,40,0)
(26,25,0)
(51,37,0)
(17,54,0)
(41,34,0)
(63,29,0)
(36,54,0)
(26,36,0)
(35,5,0)
(49,18,0)
(33,31,0)
(7,18,0)
(13,15,0)
(57,15,0)
(19,46,0)
(31,11,0)
(61,20,0)
(40,58,0)
(56,36,0)
(5,52,0)
(8,65,0)
(62,36,0)
(3,19,0)
(2,13,0)
(65,34,0)
(55,15,0)
(62,25,0)
(50,41,0)
(10,36,0)
(5,25,0)
(64,54,0)
(20,5,0)
(13,56,0)
(62,34,0)
(37,51,0)
(37,36,0)
(31,33,0)
(42,40,0)
(1,51,0)
(26,34,0)
(47,7,0)
(24,33,0)
(65,7,0)
(66,34,0)
(58,63,0)
(23,14,1)
(63,58,1)
(51,0,1)
(32,13,1)
(0,1,1)
(5,25,1)
(43,61,1)
(20,43,1)
(26,34,1)
(62,25,1)
(62,34,1)
(45,52,1)
(49,47,1)
(50,31,1)
(23,19,1)
(2,37,1)
(66,14,1)
(1,48,1)
(37,51,1)
(19,3,1)
(57,55,1)
(14,25,1)
(28,42,1)
(55,2,1)
(3,41,1)
(8,56,1)
(15,57,1)
(9,30,1)
(41,34,1)
(18,49,1)
(7,18,1)
(4,53,1)
(56,32,1)
(25,4,1)
(21,62,1)
(30,27,1)
(12,5,1)
(24,9,1)
(59,8,1)
(62,38,1)
(33,24,1)
(48,23,1)
(34,63,1)
(27,34,1)
(26,25,1)
(65,7,1)
(44,50,1)
(35,65,1)
(65,25,1)
(61,35,1)
(47,59,1)
(26,45,1)
(5,20,1)
(9,34,1)
(50,9,1)
(41,44,1)
(63,29,1)
(65,34,1)
(13,15,1)
(5,34,1)
(31,33,1)
(42,66,1)
(52,12,1)
(58,40,1)
(40,60,1)
(60,28,1)
(38,26,1)
(65,25,2)
(62,25,2)
(33,9,2)
(5,25,2)
(40,14,2)
(60,14,2)
(24,9,2)
(58,40,2)
(65,7,2)
(19,14,2)
(65,34,2)
(63,29,2)
(34,63,2)
(42,14,2)
(9,34,2)
(41,34,2)
(40,60,2)
(28,14,2)
(62,34,2)
(58,14,2)
(7,18,2)
(50,14,2)
(63,58,2)
(26,25,2)
(5,20,2)
(13,15,2)
(66,14,2)
(31,33,2)
(9,14,2)
(63,14,2)
(27,14,2)
(26,34,2)
(34,14,2)
(31,9,2)
(5,34,2)
(30,14,2)
(44,14,2)
(37,51,2)
(41,14,2)
(3,14,2)
-----------------------------------
(0,1)
(1,100)
(2,source)
(3,\'\\\\0\')
(4,NULL)
(5,data[100-1])
(6,if (data == NULL)
(7,100*sizeof(char)
(8,data)
(9,data == NULL)
(10,source)
(11,)
(12,'\\\\0')
(13,source[100-1])
(14,staticTrue)
(15,100-1)
(16,'\\\\0')
(17,data)
(18,sizeof(char)
(19,data[0] = '\\\\0')
(20,100-1)
(21,RET)
(22,data[0] = \'\\\\0\')
(23,source)
(24,1)
(25,data = NULL)
(26,printLine(data)
(27,data)
(28,char)
(29,char *)
(30,NULL)
(31,exit(-1)
(32,'\\\\0')
(33,-1)
(34,data = (char *)
(35,data)
(36,)
(37,memset(source, \'C\', 100-1)
(38,data)
(39,memset(source, 'C', 100-1)
(40,50*sizeof(char)
(41,data[0])
(42,50)
(43,1)
(44,0)
(45,data)
(46,)
(47,100)
(48,'C')
(49,char)
(50,data)
(51,100-1)
(52,data[100-1] = '\\\\0')
(53,data)
(54,)
(55,100)
(56,source[100-1] = '\\\\0')
(57,1)
(58,malloc(50*sizeof(char)
(59,source)
(60,sizeof(char)
(61,100)
(62,free(data)
(63,(char *)
(64,if(staticTrue)
(65,memmove(data, source, 100*sizeof(char)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^