-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData
CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(68,35,0)
(54,68,0)
(59,0,0)
(69,17,0)
(61,56,0)
(45,3,0)
(70,35,0)
(22,20,0)
(27,44,0)
(51,4,0)
(59,37,0)
(46,17,0)
(18,29,0)
(21,49,0)
(1,2,0)
(25,21,0)
(1,37,0)
(26,16,0)
(17,46,0)
(20,6,0)
(62,20,0)
(40,29,0)
(72,1,0)
(53,3,0)
(52,55,0)
(33,37,0)
(10,20,0)
(7,66,0)
(28,37,0)
(55,29,0)
(71,16,0)
(23,22,0)
(64,19,0)
(36,0,0)
(11,57,0)
(0,49,0)
(47,12,0)
(3,29,0)
(14,44,0)
(2,49,0)
(34,2,0)
(49,4,0)
(12,10,0)
(42,7,0)
(37,3,0)
(66,7,0)
(69,1,0)
(22,37,0)
(61,20,0)
(44,37,0)
(5,69,0)
(43,61,0)
(56,38,0)
(67,46,0)
(16,29,0)
(65,61,0)
(19,58,0)
(16,37,0)
(37,29,0)
(0,59,0)
(39,2,0)
(6,20,0)
(24,6,0)
(56,7,0)
(6,37,0)
(63,29,0)
(21,37,0)
(46,49,0)
(49,21,0)
(22,7,0)
(8,0,0)
(2,1,0)
(20,55,0)
(31,22,0)
(7,56,0)
(44,70,0)
(50,49,0)
(44,20,0)
(32,55,0)
(17,69,0)
(41,10,0)
(10,12,0)
(9,70,0)
(48,46,0)
(56,61,0)
(13,10,0)
(7,22,0)
(1,69,0)
(38,56,0)
(60,59,0)
(59,19,0)
(30,66,0)
(56,38,1)
(62,37,1)
(31,12,1)
(59,37,1)
(61,20,1)
(34,39,1)
(1,2,1)
(59,0,1)
(1,37,1)
(23,31,1)
(7,42,1)
(26,17,1)
(26,70,1)
(36,8,1)
(67,49,1)
(12,47,1)
(26,12,1)
(37,33,1)
(22,23,1)
(61,65,1)
(22,37,1)
(46,48,1)
(42,56,1)
(0,49,1)
(14,27,1)
(56,61,1)
(8,60,1)
(21,37,1)
(68,54,1)
(50,66,1)
(9,44,1)
(20,6,1)
(2,34,1)
(3,45,1)
(43,22,1)
(12,10,1)
(46,49,1)
(65,43,1)
(39,72,1)
(13,41,1)
(37,3,1)
(33,28,1)
(2,49,1)
(16,37,1)
(5,1,1)
(60,17,1)
(44,37,1)
(17,69,1)
(69,5,1)
(6,37,1)
(45,53,1)
(24,62,1)
(6,24,1)
(7,56,1)
(10,20,1)
(27,68,1)
(16,71,1)
(17,46,1)
(49,21,1)
(22,20,1)
(0,36,1)
(15,18,1)
(19,64,1)
(7,22,1)
(47,10,1)
(28,3,1)
(30,7,1)
(10,13,1)
(69,1,1)
(72,46,1)
(41,20,1)
(71,26,1)
(66,7,1)
(64,59,1)
(21,25,1)
(18,16,1)
(66,30,1)
(48,67,1)
(44,14,1)
(44,20,1)
(54,66,1)
(70,9,1)
(25,50,1)
(26,19,1)
(69,1,2)
(60,17,2)
(14,66,2)
(72,46,2)
(59,17,2)
(17,66,2)
(7,56,2)
(7,12,2)
(27,66,2)
(56,12,2)
(2,46,2)
(66,7,2)
(1,37,2)
(67,66,2)
(25,66,2)
(19,17,2)
(9,66,2)
(5,46,2)
(46,66,2)
(70,66,2)
(17,46,2)
(0,17,2)
(48,66,2)
(1,2,2)
(22,20,2)
(6,37,2)
(59,0,2)
(31,12,2)
(50,66,2)
(8,17,2)
(23,12,2)
(66,12,2)
(44,37,2)
(44,66,2)
(39,46,2)
(2,49,2)
(46,49,2)
(65,12,2)
(49,21,2)
(0,49,2)
(61,20,2)
(30,12,2)
(43,12,2)
(56,38,2)
(59,37,2)
(42,12,2)
(36,17,2)
(22,12,2)
(16,37,2)
(12,10,2)
(7,22,2)
(10,20,2)
(56,61,2)
(21,37,2)
(68,66,2)
(22,37,2)
(21,66,2)
(44,20,2)
(34,46,2)
(69,46,2)
(20,6,2)
(37,3,2)
(64,17,2)
(49,66,2)
(17,69,2)
(1,46,2)
(54,66,2)
(61,12,2)
-----------------------------------
(0,dataLen-1)
(1,data[dataLen-1])
(2,dataLen-1)
(3,dataBuffer[100] = COMMAND_ARG2)
(4,)
(5,\\\'\\\\n\\\')
(6,strlen(data)
(7,fgets(data+dataLen, (int)
(8,dataLen)
(9,\\\'\\\\0\\\')
(10,100-dataLen)
(11,if (fgets(data+dataLen, (int)
(12,100-dataLen > 1)
(13,dataLen)
(14,dataLen)
(15,RET)
(16,CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData = data)
(17,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,badSink()
(19,data[dataLen-1] = \\\'\\\\0\\\')
(20,dataLen = strlen(data)
(21,strlen(data)
(22,data+dataLen)
(23,dataLen)
(24,data)
(25,data)
(26,CWE78_OS_Command_Injection__char_console_w32_spawnv_45_badData)
(27,data)
(28,data)
(29,)
(30,NULL)
(31,data)
(32,dataLen)
(33,dataBuffer)
(34,1)
(35,)
(36,1)
(37,data = dataBuffer)
(38,int)
(39,dataLen)
(40,dataBuffer)
(41,100)
(42,stdin)
(43,100)
(44,data[dataLen])
(45,COMMAND_ARG2)
(46,dataLen > 0)
(47,1)
(48,0)
(49,dataLen = strlen(data)
(50,dataLen)
(51,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(52,if (100-dataLen > 1)
(53,dataBuffer)
(54,"fgets()
(55,)
(56,(int)
(57,)
(58,)
(59,data[dataLen-1])
(60,data)
(61,100-dataLen)
(62,dataLen)
(63,data)
(64,\\\'\\\\0\\\')
(65,dataLen)
(66,fgets(data+dataLen, (int)
(67,dataLen)
(68,printLine("fgets()
(69,data[dataLen-1] == \\\'\\\\n\\\')
(70,data[dataLen] = \\\'\\\\0\\\')
(71,data)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^