-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21_bad()
{
    char * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
41,44
41,45
42,43
44,45
47,48
47,49
50,51
51,52
51,53
52,53
52,54
53,54
55,56
55,57
59,60
60,61
60,62
60,63
60,64
60,65
61,62
63,64
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,39,43,45,46,48,49,54,56,57,58,62,64,65,66,68,72,74,78,80
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
47,48
47,49
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21_bad(){    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21_bad
{    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(34,13,0)
(26,13,0)
(27,22,0)
(32,1,0)
(10,6,0)
(29,15,0)
(5,4,0)
(29,5,0)
(13,26,0)
(19,27,0)
(26,15,0)
(6,15,0)
(32,30,0)
(2,29,0)
(8,6,0)
(28,13,0)
(23,1,0)
(21,4,0)
(16,6,0)
(24,15,0)
(9,22,0)
(12,9,0)
(14,5,0)
(1,32,0)
(11,26,0)
(36,24,0)
(0,26,0)
(5,22,0)
(17,6,0)
(24,5,0)
(33,32,0)
(15,22,0)
(31,30,0)
(3,22,0)
(20,15,0)
(18,1,0)
(30,15,0)
(35,27,0)
(6,5,0)
(7,9,0)
(4,5,0)
(4,9,0)
(24,36,1)
(34,28,1)
(31,32,1)
(19,35,1)
(5,4,1)
(29,2,1)
(7,12,1)
(36,6,1)
(27,19,1)
(32,1,1)
(29,5,1)
(4,21,1)
(2,24,1)
(1,18,1)
(26,13,1)
(14,27,1)
(6,17,1)
(35,9,1)
(21,14,1)
(11,0,1)
(30,31,1)
(17,8,1)
(23,33,1)
(16,10,1)
(28,11,1)
(33,26,1)
(24,5,1)
(0,5,1)
(25,29,1)
(4,9,1)
(13,34,1)
(9,7,1)
(18,23,1)
(6,5,1)
(10,30,1)
(8,16,1)
(4,9,2)
(29,5,2)
(24,5,2)
(32,1,2)
(6,5,2)
(26,13,2)
(5,4,2)
-----------------------------------
(0,source)
(1,100-1)
(2,data)
(3,data)
(4,badSource(data)
(5,data = badSource(data)
(6,SNPRINTF(data, 100, "%s", source)
(7,NULL)
(8,"%s")
(9,data = NULL)
(10,data)
(11,\\\'C\\\')
(12,data)
(13,100-1)
(14,data)
(15,)
(16,100)
(17,source)
(18,1)
(19,1)
(20,source)
(21,data)
(22,)
(23,100)
(24,printLine(data)
(25,RET)
(26,memset(source, \\\'C\\\', 100-1)
(27,badStatic = 1)
(28,100)
(29,free(data)
(30,source[100-1] = \\\'\\\\0\\\')
(31,\\\'\\\\0\\\')
(32,source[100-1])
(33,source)
(34,1)
(35,badStatic)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^