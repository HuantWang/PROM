-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnv_11_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wspawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
33,36
33,37
33,38
33,39
33,40
33,41
33,42
34,35
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
82,85
82,86
82,87
82,88
82,89
82,90
82,91
82,92
82,93
82,94
82,95
82,96
82,97
82,98
82,99
83,84
84,85
84,86
85,86
87,88
87,89
87,90
87,91
88,89
90,91
92,93
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
109,110
112,113
113,114
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
125,127
126,127
126,128
127,128
127,129
128,129
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
140,142
141,142
143,144
145,146
145,147
146,147
146,148
147,148
147,149
147,150
147,151
148,149
150,151
152,153
152,154
153,154
153,155
154,155
156,157
158,159
159,160
161,162
162,163
163,164
165,166
167,168
169,170
169,171
170,171
170,172
171,172
171,173
171,174
172,173
174,175
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
187,188
189,190
191,192
193,194
195,196
195,197
196,197
196,198
197,198
199,200
201,202
203,204
204,205
204,206
205,206
207,208
207,209
207,210
207,211
207,212
208,209
210,211
212,213
212,214
213,214
213,215
215,216
217,218
218,219
218,220
219,220
221,222
223,224
223,225
224,225
225,226
225,227
228,229
229,230
229,231
230,231
230,232
232,233
236,237
236,238
237,238
237,239
238,239
238,240
239,240
241,242
243,244
243,245
244,245
247,248
249,250
250,251
250,252
251,252
251,253
252,253
254,255
254,256
255,256
257,258
257,259
258,259
260,261
261,262
261,263
265,266
266,267
266,268
267,268
269,270
269,271
269,272
270,271
272,273
275,276
275,277
276,277
278,279
279,280
280,281
280,282
281,282
282,283
285,286
286,287
286,288
287,288
289,290
289,291
289,292
290,291
292,293
295,296
295,297
296,297
298,299
299,300
300,301
300,302
301,302
302,303
306,307
306,308
307,308
307,309
308,309
310,311
312,313
313,314
314,315
314,316
315,316
317,318
319,320
319,321
320,321
320,322
321,322
323,324
325,326
326,327
327,328
327,329
328,329
330,331
332,333
332,334
333,334
334,335
334,336
336,337
336,338
336,339
336,340
340,341
341,342
341,343
341,344
341,345
342,343
344,345
346,347
348,349
350,351
351,352
351,353
351,354
351,355
352,353
354,355
356,357
358,359
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,42,44,47,49,50,54,56,59,63,65,68,72,74,78,80,86,89,91,93,95,99,101,103,107,110,111,115,120,121,123,129,130,131,133,138,139,142,144,149,151,155,157,160,164,166,168,173,175,177,179,181,185,188,190,192,194,198,200,202,206,209,211,214,216,220,222,226,227,231,233,234,235,240,242,245,246,248,253,256,259,262,263,264,268,271,273,274,277,283,284,288,291,293,294,297,303,304,305,309,311,316,318,322,324,329,331,335,337,338,339,343,345,347,349,353,355,357,359
-----computeFrom-----
23,24
23,25
84,85
84,86
97,98
97,99
117,118
117,119
125,126
125,127
135,136
135,137
146,147
146,148
170,171
170,172
183,184
183,185
196,197
196,198
204,205
204,206
218,219
218,220
223,224
223,225
229,230
229,231
230,231
230,232
237,238
237,239
238,239
238,240
243,244
243,245
250,251
250,252
254,255
254,256
257,258
257,259
266,267
266,268
280,281
280,282
286,287
286,288
300,301
300,302
307,308
307,309
320,321
320,322
-----guardedBy-----
309,318
322,331
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnv_11_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnv_11_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnv_11_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(183,72,0)
(3,163,0)
(55,86,0)
(3,183,0)
(37,72,0)
(118,72,0)
(9,163,0)
(144,149,0)
(141,17,0)
(81,142,0)
(162,55,0)
(26,166,0)
(149,61,0)
(166,110,0)
(19,95,0)
(100,44,0)
(149,29,0)
(174,149,0)
(107,156,0)
(166,88,0)
(40,155,0)
(113,13,0)
(31,83,0)
(141,113,0)
(145,3,0)
(157,51,0)
(130,81,0)
(108,15,0)
(59,24,0)
(80,109,0)
(70,155,0)
(21,58,0)
(16,63,0)
(160,0,0)
(113,91,0)
(10,54,0)
(122,147,0)
(124,58,0)
(154,96,0)
(116,33,0)
(63,132,0)
(15,147,0)
(151,141,0)
(63,95,0)
(165,91,0)
(87,108,0)
(139,147,0)
(179,147,0)
(48,155,0)
(39,73,0)
(123,23,0)
(127,125,0)
(148,181,0)
(84,72,0)
(150,83,0)
(98,81,0)
(64,49,0)
(61,24,0)
(113,54,0)
(161,61,0)
(51,182,0)
(63,29,0)
(153,72,0)
(137,178,0)
(185,13,0)
(111,72,0)
(101,111,0)
(182,149,0)
(171,99,0)
(29,99,0)
(83,150,0)
(86,55,0)
(40,70,0)
(3,23,0)
(81,182,0)
(99,91,0)
(85,72,0)
(11,99,0)
(60,110,0)
(62,70,0)
(76,91,0)
(180,163,0)
(142,81,0)
(131,86,0)
(137,147,0)
(186,12,0)
(52,181,0)
(96,44,0)
(18,72,0)
(181,110,0)
(163,44,0)
(28,19,0)
(106,111,0)
(66,165,0)
(2,20,0)
(46,163,0)
(103,8,0)
(164,96,0)
(163,96,0)
(53,42,0)
(65,3,0)
(86,121,0)
(183,9,0)
(182,147,0)
(181,91,0)
(103,73,0)
(41,72,0)
(173,72,0)
(15,108,0)
(43,137,0)
(36,69,0)
(61,149,0)
(143,44,0)
(175,95,0)
(120,137,0)
(13,113,0)
(38,72,0)
(5,103,0)
(29,147,0)
(69,91,0)
(172,147,0)
(146,40,0)
(23,149,0)
(23,123,0)
(79,95,0)
(133,55,0)
(93,147,0)
(113,141,0)
(75,134,0)
(78,97,0)
(158,182,0)
(110,72,0)
(50,5,0)
(126,40,0)
(137,120,0)
(51,142,0)
(90,74,0)
(184,161,0)
(73,103,0)
(91,147,0)
(91,69,0)
(94,121,0)
(47,147,0)
(67,110,0)
(8,103,0)
(135,15,0)
(104,125,0)
(14,93,0)
(19,29,0)
(138,73,0)
(89,178,0)
(177,40,0)
(102,147,0)
(77,8,0)
(112,42,0)
(82,72,0)
(17,141,0)
(30,183,0)
(167,9,0)
(68,69,0)
(149,182,0)
(161,134,0)
(61,161,0)
(134,161,0)
(159,134,0)
(32,150,0)
(4,44,0)
(25,72,0)
(119,19,0)
(58,29,0)
(121,147,0)
(95,72,0)
(142,51,0)
(103,5,0)
(99,29,0)
(6,151,0)
(117,69,0)
(166,91,0)
(23,3,0)
(150,91,0)
(136,29,0)
(1,113,0)
(125,147,0)
(35,135,0)
(9,183,0)
(27,150,0)
(105,147,0)
(129,165,0)
(141,151,0)
(140,147,0)
(178,137,0)
(92,120,0)
(56,135,0)
(42,93,0)
(155,44,0)
(149,23,0)
(152,147,0)
(134,183,0)
(57,51,0)
(24,61,0)
(72,7,0)
(115,99,0)
(170,72,0)
(54,113,0)
(40,126,1)
(92,43,1)
(159,75,1)
(162,93,1)
(151,6,1)
(135,35,1)
(43,178,1)
(9,167,1)
(99,91,1)
(52,64,1)
(35,56,1)
(181,91,1)
(3,163,1)
(134,159,1)
(87,135,1)
(136,83,1)
(160,71,1)
(28,119,1)
(70,62,1)
(161,134,1)
(79,175,1)
(86,131,1)
(119,166,1)
(129,66,1)
(150,27,1)
(60,67,1)
(39,176,1)
(120,92,1)
(71,19,1)
(142,81,1)
(111,106,1)
(133,162,1)
(165,129,1)
(62,160,1)
(3,65,1)
(83,31,1)
(52,90,1)
(2,54,1)
(75,184,1)
(154,164,1)
(177,70,1)
(15,108,1)
(45,40,1)
(107,83,1)
(175,110,1)
(63,95,1)
(142,51,1)
(6,1,1)
(86,55,1)
(42,112,1)
(76,125,1)
(1,15,1)
(181,110,1)
(93,14,1)
(115,136,1)
(95,79,1)
(73,138,1)
(61,161,1)
(149,61,1)
(94,86,1)
(59,23,1)
(5,103,1)
(5,50,1)
(112,53,1)
(176,22,1)
(99,11,1)
(163,96,1)
(130,98,1)
(63,29,1)
(166,26,1)
(163,180,1)
(16,19,1)
(137,120,1)
(178,89,1)
(149,29,1)
(121,94,1)
(61,24,1)
(30,95,1)
(14,42,1)
(110,60,1)
(90,5,1)
(166,110,1)
(69,36,1)
(81,130,1)
(166,91,1)
(146,177,1)
(67,111,1)
(144,61,1)
(91,69,1)
(176,78,1)
(63,16,1)
(34,105,1)
(62,168,1)
(36,68,1)
(53,137,1)
(165,91,1)
(52,116,1)
(171,115,1)
(21,124,1)
(68,117,1)
(29,99,1)
(51,157,1)
(131,55,1)
(62,71,1)
(145,174,1)
(52,107,1)
(186,142,1)
(124,29,1)
(13,185,1)
(168,163,1)
(174,158,1)
(149,144,1)
(27,32,1)
(116,58,1)
(31,150,1)
(167,30,1)
(71,63,1)
(103,8,1)
(51,182,1)
(23,123,1)
(183,9,1)
(108,87,1)
(148,52,1)
(80,34,1)
(103,73,1)
(98,51,1)
(113,13,1)
(58,29,1)
(3,183,1)
(117,76,1)
(52,2,1)
(158,58,1)
(58,21,1)
(134,183,1)
(24,59,1)
(57,182,1)
(184,24,1)
(105,142,1)
(54,113,1)
(96,154,1)
(141,151,1)
(81,182,1)
(19,28,1)
(141,17,1)
(22,34,1)
(180,46,1)
(157,57,1)
(126,146,1)
(19,29,1)
(19,95,1)
(125,104,1)
(113,141,1)
(9,163,1)
(52,176,1)
(22,80,1)
(101,168,1)
(78,22,1)
(39,183,1)
(182,149,1)
(89,165,1)
(113,91,1)
(50,103,1)
(77,73,1)
(40,70,1)
(65,145,1)
(185,141,1)
(83,150,1)
(23,3,1)
(26,181,1)
(119,181,1)
(66,91,1)
(64,165,1)
(149,23,1)
(54,10,1)
(8,77,1)
(104,127,1)
(32,54,1)
(150,91,1)
(46,96,1)
(137,178,1)
(10,113,1)
(56,121,1)
(55,133,1)
(127,5,1)
(138,39,1)
(11,171,1)
(52,186,1)
(181,148,1)
(106,101,1)
(14,165,2)
(138,168,2)
(76,5,2)
(165,91,2)
(162,165,2)
(92,165,2)
(30,168,2)
(141,165,2)
(55,165,2)
(157,58,2)
(99,91,2)
(103,176,2)
(113,13,2)
(68,5,2)
(142,81,2)
(73,168,2)
(89,165,2)
(3,163,2)
(120,165,2)
(21,83,2)
(112,165,2)
(65,58,2)
(117,5,2)
(141,17,2)
(134,183,2)
(183,168,2)
(83,54,2)
(71,168,2)
(137,120,2)
(16,19,2)
(174,58,2)
(73,176,2)
(19,29,2)
(90,5,2)
(91,69,2)
(160,71,2)
(34,142,2)
(3,58,2)
(113,165,2)
(121,165,2)
(181,91,2)
(9,163,2)
(158,58,2)
(105,142,2)
(161,58,2)
(145,58,2)
(182,58,2)
(91,5,2)
(57,58,2)
(22,142,2)
(142,58,2)
(101,168,2)
(150,91,2)
(10,165,2)
(29,99,2)
(129,5,2)
(137,178,2)
(2,54,2)
(86,165,2)
(103,168,2)
(53,165,2)
(1,165,2)
(8,176,2)
(166,110,2)
(104,5,2)
(161,134,2)
(149,29,2)
(40,70,2)
(148,168,2)
(78,22,2)
(178,165,2)
(58,29,2)
(99,83,2)
(5,176,2)
(27,54,2)
(166,181,2)
(28,168,2)
(19,168,2)
(23,58,2)
(63,29,2)
(87,165,2)
(23,3,2)
(103,73,2)
(115,83,2)
(137,165,2)
(50,168,2)
(95,168,2)
(54,113,2)
(113,141,2)
(75,58,2)
(51,58,2)
(110,168,2)
(54,165,2)
(6,165,2)
(159,58,2)
(167,168,2)
(36,5,2)
(60,168,2)
(103,8,2)
(175,168,2)
(124,83,2)
(19,95,2)
(181,168,2)
(8,168,2)
(80,34,2)
(125,5,2)
(43,165,2)
(131,165,2)
(15,165,2)
(13,165,2)
(183,9,2)
(141,151,2)
(119,168,2)
(151,165,2)
(79,168,2)
(42,165,2)
(39,176,2)
(9,168,2)
(61,161,2)
(29,83,2)
(63,95,2)
(61,24,2)
(135,165,2)
(56,165,2)
(94,165,2)
(98,51,2)
(184,58,2)
(67,168,2)
(142,51,2)
(11,83,2)
(59,58,2)
(23,123,2)
(77,176,2)
(63,19,2)
(81,51,2)
(107,83,2)
(149,61,2)
(111,168,2)
(15,108,2)
(150,54,2)
(51,182,2)
(106,168,2)
(116,58,2)
(5,103,2)
(77,168,2)
(133,165,2)
(149,58,2)
(130,51,2)
(69,5,2)
(163,96,2)
(166,91,2)
(32,54,2)
(144,58,2)
(52,168,2)
(93,165,2)
(181,110,2)
(138,176,2)
(149,23,2)
(81,182,2)
(108,165,2)
(83,150,2)
(171,83,2)
(50,176,2)
(64,165,2)
(136,83,2)
(186,142,2)
(113,91,2)
(58,83,2)
(26,181,2)
(24,58,2)
(86,55,2)
(127,5,2)
(35,165,2)
(165,5,2)
(134,58,2)
(61,58,2)
(176,142,2)
(66,5,2)
(182,149,2)
(3,183,2)
(31,54,2)
(5,168,2)
(39,168,2)
(185,165,2)
-----------------------------------
(0,)
(1,listenSocket)
(2,break;)
(3,data + dataLen)
(4,if(globalReturnsTrue()
(5,WSAStartup(MAKEWORD(2,2)
(6,service)
(7,)
(8,&wsaData)
(9,wcslen(data)
(10,SOCKET_ERROR)
(11,NULL)
(12,)
(13,sizeof(service)
(14,AF_INET)
(15,service.sin_port = htons(TCP_PORT)
(16,acceptSocket)
(17,struct sockaddr*)
(18,acceptSocket)
(19,acceptSocket != INVALID_SOCKET)
(20,)
(21,SOCKET_ERROR)
(22,replace)
(23,(char *)
(24,sizeof(wchar_t)
(25,replace)
(26,listenSocket)
(27,LISTEN_BACKLOG)
(28,INVALID_SOCKET)
(29,acceptSocket = accept(listenSocket, NULL, NULL)
(30,dataLen)
(31,SOCKET_ERROR)
(32,listenSocket)
(33,)
(34,replace)
(35,sin_port)
(36,IPPROTO_TCP)
(37,do)
(38,wsaDataInit)
(39,2)
(40,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(41,listenSocket)
(42,service.sin_family)
(43,0)
(44,)
(45,RET)
(46,data)
(47,if (WSAStartup(MAKEWORD(2,2)
(48,args)
(49,)
(50,NO_ERROR)
(51,recvResult == SOCKET_ERROR)
(52,listenSocket)
(53,service)
(54,bind(listenSocket, (struct sockaddr*)
(55,service.sin_addr)
(56,service)
(57,recvResult)
(58,acceptSocket == SOCKET_ERROR)
(59,wchar_t)
(60,INVALID_SOCKET)
(61,sizeof(wchar_t)
(62,args)
(63,CLOSE_SOCKET(acceptSocket)
(64,break;)
(65,dataLen)
(66,listenSocket)
(67,listenSocket)
(68,SOCK_STREAM)
(69,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(70,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(71,wsaDataInit)
(72,)
(73,MAKEWORD(2,2)
(74,)
(75,dataLen)
(76,listenSocket)
(77,wsaData)
(78,\'\\\\0\')
(79,INVALID_SOCKET)
(80,\'\\\\0\')
(81,recvResult == 0)
(82,service)
(83,listen(listenSocket, LISTEN_BACKLOG)
(84,wsaData)
(85,if (listenSocket != INVALID_SOCKET)
(86,service.sin_addr.s_addr)
(87,TCP_PORT)
(88,)
(89,service)
(90,break;)
(91,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(92,service)
(93,service.sin_family = AF_INET)
(94,INADDR_ANY)
(95,acceptSocket = INVALID_SOCKET)
(96,dataBuffer[100] = COMMAND_ARG2)
(97,)
(98,recvResult)
(99,accept(listenSocket, NULL, NULL)
(100,data)
(101,wsaDataInit)
(102,if (replace)
(103,WSAStartup(MAKEWORD(2,2)
(104,1)
(105,\'\\\\0\')
(106,0)
(107,break;)
(108,htons(TCP_PORT)
(109,)
(110,listenSocket = INVALID_SOCKET)
(111,wsaDataInit = 0)
(112,sin_family)
(113,bind(listenSocket, (struct sockaddr*)
(114,'\\\\0')
(115,listenSocket)
(116,break;)
(117,AF_INET)
(118,recvResult)
(119,acceptSocket)
(120,sizeof(service)
(121,service.sin_addr.s_addr = INADDR_ANY)
(122,if (bind(listenSocket, (struct sockaddr*)
(123,char *)
(124,acceptSocket)
(125,wsaDataInit = 1)
(126,args)
(127,wsaDataInit)
(128,'\\\\0')
(129,INVALID_SOCKET)
(130,0)
(131,s_addr)
(132,)
(133,sin_addr)
(134,dataLen - 1)
(135,service.sin_port)
(136,acceptSocket)
(137,memset(&service, 0, sizeof(service)
(138,2)
(139,if (acceptSocket == SOCKET_ERROR)
(140,if (recvResult == SOCKET_ERROR || recvResult == 0)
(141,(struct sockaddr*)
(142,recvResult == SOCKET_ERROR || recvResult == 0)
(143,dataBuffer)
(144,0)
(145,data)
(146,COMMAND_INT_PATH)
(147,)
(148,INVALID_SOCKET)
(149,recv(acceptSocket, (char *)
(150,listen(listenSocket, LISTEN_BACKLOG)
(151,&service)
(152,if (listenSocket == INVALID_SOCKET)
(153,if (acceptSocket != INVALID_SOCKET)
(154,COMMAND_ARG2)
(155,)
(156,)
(157,SOCKET_ERROR)
(158,recvResult)
(159,1)
(160,WSACleanup()
(161,100 - dataLen - 1)
(162,service)
(163,data = dataBuffer)
(164,dataBuffer)
(165,listenSocket == INVALID_SOCKET)
(166,CLOSE_SOCKET(listenSocket)
(167,data)
(168,globalReturnsTrue()
(169,'\\\\0')
(170,if (wsaDataInit)
(171,NULL)
(172,if (listen(listenSocket, LISTEN_BACKLOG)
(173,dataLen)
(174,acceptSocket)
(175,acceptSocket)
(176,0)
(177,_P_WAIT)
(178,&service)
(179,if (replace)
(180,dataBuffer)
(181,listenSocket != INVALID_SOCKET)
(182,recvResult = recv(acceptSocket, (char *)
(183,dataLen = wcslen(data)
(184,100)
(185,service)
(186,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^