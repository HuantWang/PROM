-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,44,0)
(21,0,0)
(7,17,0)
(41,42,0)
(8,12,0)
(40,34,0)
(13,18,0)
(24,41,0)
(0,4,0)
(1,18,0)
(13,37,0)
(35,6,0)
(20,36,0)
(5,23,0)
(28,15,0)
(1,12,0)
(19,16,0)
(21,10,0)
(18,7,0)
(26,16,0)
(30,37,0)
(1,37,0)
(21,36,0)
(41,44,0)
(14,39,0)
(34,18,0)
(7,18,0)
(31,4,0)
(0,21,0)
(10,21,0)
(43,1,0)
(12,16,0)
(3,34,0)
(0,37,0)
(42,41,0)
(33,42,0)
(44,41,0)
(36,21,0)
(11,18,0)
(18,6,0)
(9,0,0)
(13,12,0)
(27,45,0)
(28,45,0)
(4,12,0)
(17,7,0)
(36,39,0)
(37,16,0)
(22,4,0)
(0,12,0)
(46,23,0)
(32,10,0)
(38,37,0)
(44,7,0)
(2,13,0)
(25,0,0)
(39,4,0)
(0,18,0)
(45,28,0)
(39,36,0)
(33,24,1)
(37,38,1)
(43,13,1)
(0,18,1)
(22,34,1)
(0,4,1)
(27,34,1)
(13,18,1)
(46,5,1)
(1,37,1)
(32,36,1)
(22,28,1)
(13,37,1)
(3,18,1)
(36,39,1)
(39,4,1)
(39,14,1)
(7,44,1)
(18,7,1)
(31,22,1)
(21,10,1)
(5,37,1)
(1,43,1)
(41,42,1)
(34,40,1)
(22,23,1)
(9,4,1)
(34,18,1)
(25,9,1)
(21,36,1)
(40,3,1)
(24,11,1)
(28,45,1)
(13,2,1)
(45,27,1)
(11,23,1)
(42,33,1)
(1,18,1)
(23,46,1)
(44,41,1)
(10,32,1)
(0,21,1)
(7,17,1)
(0,37,1)
(38,30,1)
(20,39,1)
(2,0,1)
(4,31,1)
(36,20,1)
(29,1,1)
(14,25,1)
(34,23,2)
(36,39,2)
(21,10,2)
(27,34,2)
(44,41,2)
(1,37,2)
(41,42,2)
(13,37,2)
(13,18,2)
(41,23,2)
(1,18,2)
(39,4,2)
(0,4,2)
(0,18,2)
(28,34,2)
(0,21,2)
(7,23,2)
(33,23,2)
(40,23,2)
(34,18,2)
(45,34,2)
(11,23,2)
(0,37,2)
(7,44,2)
(18,7,2)
(42,23,2)
(21,36,2)
(44,23,2)
(28,45,2)
(18,23,2)
(3,23,2)
(7,17,2)
(24,23,2)
-----------------------------------
(0,memcpy(data, source, (wcslen(source)
(1,free(data)
(2,data)
(3,data)
(4,source[10+1] = SRC_STRING)
(5,globalFive)
(6,)
(7,(wchar_t *)
(8,source)
(9,data)
(10,sizeof(wchar_t)
(11,data)
(12,)
(13,printWLine(data)
(14,source)
(15,)
(16,)
(17,wchar_t *)
(18,data = (wchar_t *)
(19,data)
(20,1)
(21,(wcslen(source)
(22,source)
(23,globalFive==5)
(24,10)
(25,source)
(26,if(globalFive==5)
(27,1)
(28,exit(-1)
(29,RET)
(30,data)
(31,SRC_STRING)
(32,wchar_t)
(33,wchar_t)
(34,data == NULL)
(35,if (data == NULL)
(36,wcslen(source)
(37,data = NULL)
(38,NULL)
(39,wcslen(source)
(40,NULL)
(41,10*sizeof(wchar_t)
(42,sizeof(wchar_t)
(43,data)
(44,malloc(10*sizeof(wchar_t)
(45,-1)
(46,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^