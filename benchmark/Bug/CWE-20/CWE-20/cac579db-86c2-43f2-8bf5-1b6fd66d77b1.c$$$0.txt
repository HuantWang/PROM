-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_17_bad()
CWE190_Integer_Overflow__int_fscanf_square_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(38,30,0)
(40,7,0)
(28,7,0)
(26,25,0)
(1,7,0)
(18,5,0)
(36,32,0)
(6,13,0)
(5,18,0)
(18,6,0)
(37,5,0)
(5,40,0)
(17,40,0)
(31,41,0)
(34,4,0)
(16,34,0)
(20,5,0)
(2,3,0)
(11,40,0)
(22,25,0)
(9,6,0)
(41,34,0)
(27,32,0)
(21,6,0)
(14,30,0)
(3,32,0)
(19,26,0)
(39,7,0)
(34,41,0)
(12,27,0)
(0,3,0)
(33,7,0)
(8,7,0)
(29,18,0)
(24,9,0)
(35,25,0)
(23,32,0)
(41,40,0)
(10,34,0)
(9,18,0)
(30,25,0)
(24,18,1)
(27,12,1)
(35,22,1)
(31,10,1)
(9,24,1)
(14,38,1)
(5,40,1)
(26,25,1)
(38,25,1)
(11,17,1)
(23,36,1)
(9,18,1)
(37,29,1)
(0,2,1)
(26,19,1)
(2,32,1)
(15,30,1)
(5,20,1)
(41,40,1)
(2,27,1)
(36,40,1)
(19,9,1)
(18,5,1)
(27,32,1)
(41,31,1)
(34,41,1)
(25,35,1)
(3,0,1)
(12,34,1)
(20,37,1)
(29,30,1)
(32,23,1)
(30,25,1)
(16,3,1)
(22,3,1)
(38,26,1)
(10,16,1)
(3,32,1)
(30,14,1)
(40,11,1)
(30,30,2)
(37,30,2)
(19,30,2)
(12,3,2)
(9,30,2)
(30,25,2)
(29,30,2)
(9,18,2)
(34,41,2)
(5,40,2)
(41,40,2)
(27,3,2)
(5,30,2)
(3,3,2)
(31,3,2)
(16,3,2)
(34,3,2)
(14,30,2)
(24,30,2)
(38,30,2)
(3,32,2)
(26,25,2)
(0,3,2)
(20,30,2)
(41,3,2)
(26,30,2)
(18,5,2)
(27,32,2)
(10,3,2)
(2,3,2)
(18,30,2)
-----------------------------------
(0,1)
(1,for(j = 0; j < 1; j++)
(2,i)
(3,i < 1)
(4,)
(5,data * data)
(6,)
(7,)
(8,j)
(9,printIntLine(result)
(10,"%d")
(11,0)
(12,i)
(13,)
(14,1)
(15,RET)
(16,stdin)
(17,data)
(18,result = data * data)
(19,j)
(20,data)
(21,result)
(22,j)
(23,0)
(24,result)
(25,j = 0)
(26,j++)
(27,i++)
(28,for(i = 0; i < 1; i++)
(29,result)
(30,j < 1)
(31,data)
(32,i = 0)
(33,data)
(34,fscanf(stdin, "%d", &data)
(35,0)
(36,i)
(37,data)
(38,j)
(39,i)
(40,data = 0)
(41,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^