-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(60,30,0)
(39,45,0)
(56,0,0)
(68,38,0)
(55,12,0)
(64,66,0)
(5,24,0)
(40,2,0)
(20,39,0)
(49,59,0)
(59,8,0)
(9,15,0)
(42,24,0)
(14,50,0)
(61,53,0)
(6,30,0)
(8,37,0)
(69,28,0)
(17,52,0)
(41,45,0)
(25,2,0)
(68,25,0)
(50,14,0)
(13,40,0)
(12,25,0)
(14,30,0)
(35,53,0)
(4,46,0)
(30,45,0)
(57,1,0)
(29,38,0)
(36,27,0)
(2,58,0)
(40,13,0)
(12,0,0)
(7,52,0)
(23,70,0)
(60,62,0)
(44,1,0)
(27,66,0)
(46,25,0)
(54,23,0)
(51,39,0)
(25,38,0)
(8,59,0)
(50,0,0)
(11,13,0)
(30,60,0)
(15,25,0)
(15,38,0)
(31,14,0)
(13,66,0)
(14,66,0)
(65,0,0)
(33,50,0)
(48,46,0)
(67,41,0)
(34,1,0)
(43,12,0)
(2,25,0)
(46,16,0)
(10,13,0)
(19,16,0)
(18,25,0)
(46,66,0)
(24,25,0)
(27,0,0)
(2,40,0)
(53,1,0)
(3,68,0)
(47,68,0)
(52,1,0)
(28,0,0)
(26,38,0)
(41,66,0)
(21,50,0)
(66,38,0)
(66,41,0)
(71,1,0)
(22,27,0)
(47,23,0)
(30,14,0)
(16,38,0)
(58,2,0)
(12,60,0)
(9,16,1)
(33,21,1)
(53,61,1)
(13,10,1)
(23,54,1)
(12,25,1)
(40,13,1)
(36,0,1)
(15,25,1)
(12,0,1)
(59,49,1)
(16,19,1)
(20,51,1)
(66,41,1)
(65,24,1)
(13,66,1)
(22,36,1)
(64,39,1)
(4,27,1)
(14,66,1)
(35,52,1)
(61,35,1)
(21,31,1)
(27,22,1)
(27,0,1)
(6,12,1)
(60,30,1)
(7,17,1)
(18,66,1)
(52,7,1)
(10,11,1)
(42,5,1)
(54,39,1)
(39,45,1)
(48,4,1)
(19,46,1)
(68,3,1)
(39,20,1)
(30,14,1)
(67,64,1)
(68,25,1)
(5,25,1)
(46,66,1)
(69,60,1)
(49,24,1)
(28,0,1)
(3,15,1)
(30,45,1)
(47,68,1)
(24,42,1)
(50,0,1)
(0,56,1)
(47,23,1)
(2,40,1)
(25,2,1)
(51,53,1)
(41,67,1)
(55,43,1)
(46,48,1)
(50,33,1)
(65,8,1)
(31,6,1)
(28,69,1)
(15,9,1)
(46,25,1)
(36,28,1)
(41,45,1)
(2,58,1)
(43,27,1)
(8,59,1)
(56,65,1)
(27,66,1)
(24,25,1)
(11,18,1)
(12,55,1)
(14,50,1)
(40,13,2)
(50,27,2)
(30,27,2)
(41,45,2)
(4,39,2)
(60,27,2)
(14,66,2)
(47,23,2)
(13,66,2)
(9,39,2)
(55,27,2)
(27,27,2)
(0,39,2)
(49,24,2)
(15,39,2)
(10,39,2)
(12,27,2)
(28,0,2)
(33,27,2)
(22,27,2)
(8,24,2)
(68,39,2)
(39,45,2)
(6,27,2)
(50,0,2)
(47,68,2)
(16,39,2)
(25,2,2)
(8,59,2)
(22,39,2)
(31,27,2)
(11,39,2)
(2,39,2)
(60,30,2)
(30,14,2)
(46,66,2)
(69,27,2)
(41,39,2)
(65,39,2)
(48,39,2)
(24,39,2)
(3,39,2)
(43,27,2)
(21,27,2)
(19,39,2)
(42,39,2)
(14,50,2)
(36,39,2)
(27,39,2)
(59,24,2)
(30,45,2)
(56,39,2)
(2,58,2)
(66,39,2)
(27,66,2)
(24,25,2)
(13,39,2)
(27,0,2)
(28,27,2)
(2,40,2)
(67,39,2)
(66,41,2)
(46,25,2)
(46,39,2)
(12,0,2)
(12,25,2)
(15,25,2)
(5,39,2)
(14,27,2)
(68,25,2)
(40,39,2)
(64,39,2)
(18,39,2)
(25,39,2)
(54,39,2)
(23,39,2)
(36,27,2)
-----------------------------------
(0,j = 0)
(1,)
(2,(char *)
(3,reversedString)
(4,reversedString)
(5,reversedString)
(6,aString)
(7,0)
(8,exit(-1)
(9,reversedString)
(10,1)
(11,i)
(12,reversedString[j])
(13,i+1)
(14,i-j-1)
(15,free(reversedString)
(16,reversedString[i] = \'\\\\0\')
(17,i)
(18,reversedString)
(19,'\\\\0')
(20,NULL)
(21,j)
(22,i)
(23,return NULL;)
(24,reversedString == NULL)
(25,reversedString = (char *)
(26,if (reversedString == NULL)
(27,j < i)
(28,j++)
(29,for (j = 0; j < i; j++)
(30,aString[i-j-1])
(31,i)
(32,reversedString[i] = '\\\\0')
(33,1)
(34,if (aString != NULL)
(35,reversedString)
(36,j)
(37,)
(38,)
(39,aString != NULL)
(40,malloc(i+1)
(41,strlen(aString)
(42,NULL)
(43,reversedString)
(44,i)
(45,char * aString)
(46,reversedString[i])
(47,RET)
(48,i)
(49,1)
(50,j-1)
(51,aString)
(52,i = 0)
(53,* reversedString = NULL)
(54,NULL)
(55,j)
(56,0)
(57,reversedString)
(58,char *)
(59,-1)
(60,reversedString[j] = aString[i-j-1])
(61,NULL)
(62,)
(63,\'\\\\0\')
(64,i)
(65,j)
(66,i = strlen(aString)
(67,aString)
(68,return reversedString;)
(69,j)
(70,)
(71,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^