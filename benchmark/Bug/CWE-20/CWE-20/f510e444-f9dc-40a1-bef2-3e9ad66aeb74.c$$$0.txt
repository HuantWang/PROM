-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_postinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            data++;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
67,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,43,46,48,51,55,57,62,64,69,72,74,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
60,61
60,62
-----guardedBy-----
62,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_postinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_rand_postinc_12_bad()
CWE190_Integer_Overflow__int_rand_postinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(44,14,0)
(2,7,0)
(14,7,0)
(33,39,0)
(35,19,0)
(25,39,0)
(1,29,0)
(2,29,0)
(7,13,0)
(36,29,0)
(3,6,0)
(9,41,0)
(27,0,0)
(28,18,0)
(36,6,0)
(26,41,0)
(36,0,0)
(18,29,0)
(2,0,0)
(14,29,0)
(12,44,0)
(34,3,0)
(0,11,0)
(19,42,0)
(29,37,0)
(44,7,0)
(24,7,0)
(22,18,0)
(14,0,0)
(3,39,0)
(32,41,0)
(18,0,0)
(20,41,0)
(39,6,0)
(4,36,0)
(40,2,0)
(10,6,0)
(15,14,0)
(29,43,0)
(8,32,0)
(39,29,0)
(30,0,0)
(39,0,0)
(37,29,0)
(23,32,0)
(5,38,0)
(21,14,0)
(2,40,1)
(15,21,1)
(18,22,1)
(14,0,1)
(33,36,1)
(25,33,1)
(3,34,1)
(16,3,1)
(16,19,1)
(18,0,1)
(29,37,1)
(39,29,1)
(30,27,1)
(39,25,1)
(32,8,1)
(36,4,1)
(1,17,1)
(44,12,1)
(4,18,1)
(2,29,1)
(14,29,1)
(16,44,1)
(12,14,1)
(0,30,1)
(39,0,1)
(36,29,1)
(28,31,1)
(19,35,1)
(21,2,1)
(36,0,1)
(40,31,1)
(27,17,1)
(31,0,1)
(18,29,1)
(2,0,1)
(44,14,1)
(34,39,1)
(14,15,1)
(22,28,1)
(3,39,1)
(31,29,1)
(17,32,1)
(35,18,1)
(37,1,1)
(8,23,1)
(44,31,2)
(35,18,2)
(22,31,2)
(19,18,2)
(4,18,2)
(14,0,2)
(37,17,2)
(36,18,2)
(29,37,2)
(36,29,2)
(15,31,2)
(21,31,2)
(25,18,2)
(2,31,2)
(3,18,2)
(40,31,2)
(1,17,2)
(18,31,2)
(33,18,2)
(2,0,2)
(39,29,2)
(36,0,2)
(44,14,2)
(30,17,2)
(18,0,2)
(12,31,2)
(2,29,2)
(0,17,2)
(27,17,2)
(34,18,2)
(39,0,2)
(39,18,2)
(18,29,2)
(3,39,2)
(28,31,2)
(14,29,2)
(14,31,2)
(29,17,2)
-----------------------------------
(0,data = 2)
(1,data)
(2,data++)
(3,printIntLine(result)
(4,data)
(5,if (data < INT_MAX)
(6,)
(7,)
(8,0)
(9,if(globalReturnsTrueOrFalse()
(10,result)
(11,)
(12,result)
(13,)
(14,result = data)
(15,data)
(16,RET)
(17,globalReturnsTrueOrFalse()
(18,data < INT_MAX)
(19,printLine("data value is too large to perform arithmetic safely.")
(20,data)
(21,result)
(22,INT_MAX)
(23,data)
(24,result)
(25,data)
(26,if(globalReturnsTrueOrFalse()
(27,data)
(28,data)
(29,data = RAND32()
(30,2)
(31,globalReturnsTrueOrFalse()
(32,data = 0)
(33,result)
(34,result)
(35,"data value is too large to perform arithmetic safely.")
(36,data++)
(37,RAND32()
(38,)
(39,result = data)
(40,data)
(41,)
(42,)
(43,)
(44,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^