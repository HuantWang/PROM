-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
49,52
49,53
50,51
52,53
52,54
53,54
55,56
57,58
59,60
59,61
60,61
60,62
62,63
65,66
66,67
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,31,33,34,38,40,44,46,51,54,56,58,61,63,64,67
-----computeFrom-----
42,43
42,44
52,53
52,54
59,60
59,61
60,61
60,62
-----guardedBy-----
44,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
badStatic
badStatic
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
return data;
data
data
-----joern-----
(8,17,0)
(8,30,0)
(19,30,0)
(33,28,0)
(0,30,0)
(31,16,0)
(24,31,0)
(25,33,0)
(17,8,0)
(23,31,0)
(3,2,0)
(28,33,0)
(22,33,0)
(4,6,0)
(27,30,0)
(10,6,0)
(30,14,0)
(4,16,0)
(17,16,0)
(15,7,0)
(2,33,0)
(29,4,0)
(26,17,0)
(31,22,0)
(33,30,0)
(22,7,0)
(15,8,0)
(5,2,0)
(12,4,0)
(11,7,0)
(21,8,0)
(1,28,0)
(9,22,0)
(32,15,0)
(22,20,0)
(7,15,0)
(22,31,0)
(13,15,0)
(7,22,0)
(31,8,0)
(13,32,1)
(15,8,1)
(11,9,1)
(31,16,1)
(8,17,1)
(23,2,1)
(3,33,1)
(12,4,1)
(17,16,1)
(31,8,1)
(22,33,1)
(5,3,1)
(24,23,1)
(4,16,1)
(25,8,1)
(17,26,1)
(29,22,1)
(31,24,1)
(1,25,1)
(22,31,1)
(4,29,1)
(32,11,1)
(2,5,1)
(26,21,1)
(21,18,1)
(22,7,1)
(29,18,1)
(9,31,1)
(7,15,1)
(33,28,1)
(28,1,1)
(15,13,1)
(2,33,1)
(29,2,1)
(8,17,2)
(17,18,2)
(31,16,2)
(21,18,2)
(15,8,2)
(12,4,2)
(2,33,2)
(22,31,2)
(17,16,2)
(7,2,2)
(31,8,2)
(22,33,2)
(22,2,2)
(11,2,2)
(24,2,2)
(1,18,2)
(32,2,2)
(25,18,2)
(28,18,2)
(9,2,2)
(13,2,2)
(3,18,2)
(8,18,2)
(15,2,2)
(33,28,2)
(22,7,2)
(4,16,2)
(5,18,2)
(31,2,2)
(7,15,2)
(26,18,2)
(33,18,2)
(2,18,2)
(23,2,2)
-----------------------------------
(0,if (environment != NULL)
(1,ENV_VARIABLE)
(2,environment != NULL)
(3,environment)
(4,return data;)
(5,NULL)
(6,)
(7,100-dataLen-1)
(8,dataLen = strlen(data)
(9,environment)
(10,if(badStatic)
(11,100)
(12,RET)
(13,1)
(14,)
(15,dataLen-1)
(16,char * data)
(17,strlen(data)
(18,badStatic)
(19,dataLen)
(20,)
(21,dataLen)
(22,strncat(data+dataLen, environment, 100-dataLen-1)
(23,data)
(24,dataLen)
(25,environment)
(26,data)
(27,environment)
(28,GETENV(ENV_VARIABLE)
(29,data)
(30,)
(31,data+dataLen)
(32,dataLen)
(33,* environment = GETENV(ENV_VARIABLE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^