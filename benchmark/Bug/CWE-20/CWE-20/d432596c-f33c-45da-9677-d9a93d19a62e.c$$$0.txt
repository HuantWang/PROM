-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
83,85
83,86
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,29,31,32,36,38,41,43,46,47,51,53,58,60,65,66,69,70,73,79,81,82,86,87,93,95,96,101,102,105,106,109,114,117,119,124,125,129,131
-----computeFrom-----
42,43
42,44
49,50
49,51
63,64
63,65
67,68
67,69
76,77
76,78
84,85
84,86
90,91
90,92
99,100
99,101
103,104
103,105
-----guardedBy-----
86,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink(int dataArray[])
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(9,22,0)
(56,61,0)
(50,53,0)
(35,7,0)
(5,4,0)
(54,40,0)
(16,44,0)
(58,14,0)
(18,62,0)
(55,15,0)
(20,35,0)
(51,8,0)
(68,17,0)
(36,45,0)
(25,55,0)
(43,37,0)
(13,67,0)
(62,18,0)
(26,14,0)
(31,66,0)
(6,8,0)
(43,40,0)
(63,40,0)
(57,33,0)
(46,14,0)
(44,30,0)
(41,9,0)
(32,58,0)
(12,43,0)
(55,61,0)
(4,40,0)
(24,30,0)
(65,8,0)
(71,58,0)
(15,55,0)
(8,61,0)
(52,40,0)
(69,63,0)
(45,8,0)
(27,8,0)
(38,2,0)
(0,17,0)
(26,9,0)
(30,8,0)
(47,63,0)
(1,26,0)
(26,30,0)
(67,14,0)
(49,8,0)
(7,62,0)
(34,18,0)
(7,35,0)
(62,7,0)
(18,34,0)
(59,15,0)
(53,55,0)
(45,30,0)
(37,43,0)
(60,44,0)
(2,42,0)
(17,55,0)
(66,10,0)
(10,66,0)
(30,18,0)
(48,43,0)
(43,9,0)
(43,30,0)
(10,72,0)
(18,30,0)
(23,57,0)
(11,53,0)
(39,14,0)
(29,26,0)
(70,15,0)
(19,7,0)
(64,33,0)
(17,57,0)
(17,30,0)
(15,21,0)
(37,3,0)
(71,67,1)
(18,34,1)
(31,44,1)
(17,55,1)
(70,59,1)
(39,44,1)
(10,66,1)
(36,63,1)
(55,15,1)
(39,10,1)
(48,12,1)
(54,57,1)
(63,69,1)
(26,1,1)
(14,46,1)
(43,9,1)
(7,35,1)
(9,41,1)
(71,14,1)
(53,11,1)
(68,53,1)
(53,55,1)
(63,40,1)
(38,53,1)
(0,68,1)
(41,26,1)
(17,0,1)
(52,54,1)
(4,5,1)
(57,23,1)
(43,48,1)
(45,30,1)
(2,38,1)
(15,70,1)
(23,17,1)
(59,25,1)
(18,62,1)
(36,2,1)
(20,19,1)
(44,30,1)
(46,39,1)
(15,21,1)
(69,47,1)
(37,43,1)
(44,16,1)
(40,52,1)
(29,58,1)
(5,37,1)
(12,63,1)
(67,13,1)
(32,71,1)
(17,30,1)
(26,30,1)
(30,18,1)
(16,60,1)
(67,14,1)
(28,45,1)
(66,31,1)
(11,50,1)
(43,30,1)
(1,29,1)
(58,32,1)
(60,30,1)
(19,24,1)
(24,55,1)
(35,20,1)
(58,14,1)
(4,40,1)
(43,40,1)
(26,14,1)
(50,58,1)
(47,4,1)
(45,36,1)
(62,7,1)
(47,40,1)
(13,9,1)
(17,55,2)
(45,30,2)
(37,63,2)
(26,58,2)
(55,15,2)
(58,58,2)
(68,53,2)
(38,53,2)
(32,58,2)
(57,53,2)
(69,63,2)
(26,30,2)
(12,63,2)
(43,40,2)
(43,30,2)
(9,58,2)
(2,53,2)
(41,58,2)
(10,44,2)
(30,18,2)
(47,63,2)
(54,53,2)
(40,53,2)
(71,58,2)
(10,66,2)
(4,40,2)
(17,53,2)
(0,53,2)
(67,14,2)
(13,58,2)
(63,40,2)
(17,30,2)
(47,53,2)
(7,35,2)
(58,14,2)
(44,30,2)
(63,53,2)
(62,7,2)
(52,53,2)
(26,14,2)
(37,43,2)
(43,9,2)
(5,63,2)
(1,58,2)
(69,53,2)
(18,34,2)
(4,63,2)
(29,58,2)
(67,58,2)
(66,44,2)
(63,63,2)
(15,21,2)
(18,62,2)
(31,44,2)
(53,55,2)
(43,63,2)
(23,53,2)
(48,63,2)
-----------------------------------
(0,data)
(1,i)
(2,printLine("ERROR: Array index is negative.")
(3,)
(4,i++)
(5,i)
(6,for (i = 0; i < 10; i++)
(7,10 * sizeof(int)
(8,)
(9,buffer[i] = 0)
(10,exit(-1)
(11,0)
(12,buffer)
(13,i)
(14,i = 0)
(15,dataArray[2])
(16,NULL)
(17,buffer[data])
(18,(int *)
(19,10)
(20,int)
(21,int dataArray[])
(22,)
(23,1)
(24,buffer)
(25,data)
(26,buffer[i])
(27,i)
(28,RET)
(29,buffer)
(30,* buffer = (int *)
(31,1)
(32,10)
(33,)
(34,int *)
(35,sizeof(int)
(36,buffer)
(37,printIntLine(buffer[i])
(38,"ERROR: Array index is negative.")
(39,i)
(40,i = 0)
(41,0)
(42,)
(43,buffer[i])
(44,buffer == NULL)
(45,free(buffer)
(46,0)
(47,i)
(48,i)
(49,if (buffer == NULL)
(50,data)
(51,if (data >= 0)
(52,0)
(53,data >= 0)
(54,i)
(55,data = dataArray[2])
(56,data)
(57,buffer[data] = 1)
(58,i < 10)
(59,dataArray)
(60,buffer)
(61,)
(62,malloc(10 * sizeof(int)
(63,i < 10)
(64,for(i = 0; i < 10; i++)
(65,buffer)
(66,-1)
(67,i++)
(68,buffer)
(69,10)
(70,2)
(71,i)
(72,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^