-----label-----
1
-----code-----
void CWE127_Buffer_Underread__malloc_char_loop_34_bad()
{
    char * data;
    CWE127_Buffer_Underread__malloc_char_loop_34_unionType myUnion;
    data = NULL;
    {
        char * dataBuffer = (char *)malloc(100*sizeof(char));
        if (dataBuffer == NULL) {exit(-1);}
        memset(dataBuffer, 'A', 100-1);
        dataBuffer[100-1] = '\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            size_t i;
            char dest[100];
            memset(dest, 'C', 100-1); /* fill with 'C's */
            dest[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */
            for (i = 0; i < 100; i++)
            {
                dest[i] = data[i];
            }
            /* Ensure null termination */
            dest[100-1] = '\0';
            printLine(dest);
            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
             * returned by malloc() so can't safely call free() on it */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
66,67
66,68
69,70
70,71
70,72
71,72
71,73
72,73
74,75
74,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
98,101
101,102
102,103
102,104
103,104
106,107
106,108
106,109
106,110
106,111
106,112
106,113
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
116,117
116,118
118,119
120,121
121,122
121,123
121,124
121,125
122,123
124,125
127,128
127,129
130,131
131,132
131,133
132,133
132,134
133,134
135,136
135,137
139,140
139,141
139,142
139,143
140,141
141,142
141,143
142,143
145,146
145,147
146,147
149,150
150,151
152,153
153,154
154,155
154,156
155,156
155,157
156,157
158,159
160,161
160,162
161,162
163,164
165,166
166,167
166,168
167,168
167,169
168,169
170,171
170,172
174,175
175,176
175,177
176,177
178,179
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,30,34,36,39,41,44,45,49,51,56,58,62,64,65,67,68,73,75,76,77,81,84,85,90,91,93,97,99,100,104,105,110,112,115,117,119,123,125,126,128,129,134,136,137,138,143,144,147,148,151,157,159,162,164,169,171,172,173,177,179
-----computeFrom-----
19,20
19,21
40,41
40,42
47,48
47,49
66,67
66,68
70,71
70,72
74,75
74,76
79,80
79,81
82,83
82,84
87,88
87,89
127,128
127,129
131,132
131,133
135,136
135,137
141,142
141,143
145,146
145,147
154,155
154,156
166,167
166,168
170,171
170,172
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE127_Buffer_Underread__malloc_char_loop_34_bad(){    char * data;    CWE127_Buffer_Underread__malloc_char_loop_34_unionType myUnion;    data = NULL;    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            size_t i;            char dest[100];            memset(dest, 'C', 100-1); /* fill with 'C's */            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            for (i = 0; i < 100; i++)            {                dest[i] = data[i];            }            /* Ensure null termination */            dest[100-1] = '\0';            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
void
CWE127_Buffer_Underread__malloc_char_loop_34_bad()
CWE127_Buffer_Underread__malloc_char_loop_34_bad
{    char * data;    CWE127_Buffer_Underread__malloc_char_loop_34_unionType myUnion;    data = NULL;    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            size_t i;            char dest[100];            memset(dest, 'C', 100-1); /* fill with 'C's */            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            for (i = 0; i < 100; i++)            {                dest[i] = data[i];            }            /* Ensure null termination */            dest[100-1] = '\0';            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
char * data;
char * data;
char
* data
*
data
CWE127_Buffer_Underread__malloc_char_loop_34_unionType myUnion;
CWE127_Buffer_Underread__malloc_char_loop_34_unionType myUnion;
CWE127_Buffer_Underread__malloc_char_loop_34_unionType
CWE127_Buffer_Underread__malloc_char_loop_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            size_t i;            char dest[100];            memset(dest, 'C', 100-1); /* fill with 'C's */            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            for (i = 0; i < 100; i++)            {                dest[i] = data[i];            }            /* Ensure null termination */            dest[100-1] = '\0';            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i;            char dest[100];            memset(dest, 'C', 100-1); /* fill with 'C's */            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */            for (i = 0; i < 100; i++)            {                dest[i] = data[i];            }            /* Ensure null termination */            dest[100-1] = '\0';            printLine(dest);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }
size_t i;
size_t i;
size_t
size_t
i
i
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
for (i = 0; i < 100; i++)            {                dest[i] = data[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                dest[i] = data[i];            }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(20,35,0)
(3,16,0)
(13,97,0)
(25,32,0)
(90,8,0)
(2,36,0)
(17,21,0)
(63,65,0)
(94,16,0)
(31,97,0)
(95,68,0)
(33,32,0)
(92,32,0)
(74,89,0)
(60,10,0)
(44,16,0)
(35,68,0)
(19,77,0)
(97,17,0)
(10,60,0)
(12,31,0)
(57,42,0)
(89,35,0)
(50,40,0)
(46,61,0)
(78,83,0)
(26,54,0)
(15,89,0)
(65,32,0)
(10,54,0)
(51,69,0)
(42,69,0)
(35,89,0)
(4,68,0)
(5,29,0)
(64,28,0)
(80,3,0)
(82,97,0)
(8,7,0)
(13,29,0)
(29,13,0)
(23,46,0)
(14,31,0)
(21,17,0)
(18,4,0)
(17,97,0)
(69,16,0)
(84,83,0)
(77,47,0)
(75,47,0)
(83,84,0)
(7,8,0)
(28,68,0)
(58,83,0)
(67,38,0)
(9,16,0)
(49,38,0)
(77,32,0)
(11,62,0)
(24,3,0)
(7,17,0)
(97,68,0)
(47,77,0)
(18,97,0)
(30,62,0)
(40,66,0)
(8,90,0)
(59,77,0)
(38,60,0)
(27,66,0)
(32,44,0)
(68,16,0)
(36,66,0)
(39,84,0)
(61,52,0)
(56,68,0)
(48,1,0)
(73,8,0)
(38,66,0)
(13,28,0)
(43,35,0)
(88,10,0)
(62,32,0)
(41,4,0)
(71,66,0)
(10,66,0)
(22,44,0)
(6,76,0)
(81,1,0)
(17,7,0)
(54,1,0)
(84,33,0)
(85,33,0)
(76,30,0)
(91,32,0)
(55,76,0)
(35,97,0)
(72,42,0)
(4,18,0)
(86,30,0)
(61,46,0)
(0,47,0)
(54,44,0)
(96,10,0)
(45,18,0)
(34,13,0)
(79,90,0)
(87,29,0)
(69,4,0)
(99,18,0)
(30,76,0)
(93,40,0)
(1,54,0)
(60,70,0)
(13,97,1)
(60,10,1)
(96,38,1)
(78,58,1)
(5,87,1)
(4,18,1)
(84,83,1)
(90,79,1)
(59,54,1)
(99,41,1)
(17,7,1)
(28,64,1)
(23,31,1)
(69,4,1)
(38,49,1)
(18,97,1)
(33,85,1)
(12,97,1)
(36,66,1)
(46,23,1)
(19,59,1)
(88,96,1)
(38,66,1)
(6,55,1)
(0,75,1)
(67,40,1)
(55,86,1)
(40,66,1)
(18,45,1)
(75,19,1)
(29,5,1)
(97,17,1)
(86,40,1)
(74,43,1)
(1,81,1)
(57,4,1)
(87,34,1)
(10,88,1)
(69,51,1)
(35,97,1)
(50,93,1)
(20,31,1)
(93,66,1)
(45,99,1)
(79,73,1)
(53,65,1)
(17,21,1)
(3,24,1)
(64,13,1)
(54,1,1)
(65,63,1)
(81,48,1)
(85,84,1)
(15,74,1)
(39,77,1)
(10,54,1)
(47,0,1)
(42,72,1)
(11,30,1)
(20,61,1)
(7,8,1)
(27,71,1)
(71,33,1)
(49,67,1)
(13,29,1)
(93,36,1)
(77,47,1)
(10,66,1)
(43,20,1)
(14,12,1)
(72,57,1)
(82,3,1)
(31,97,1)
(62,11,1)
(58,39,1)
(26,69,1)
(34,35,1)
(30,76,1)
(35,89,1)
(66,27,1)
(51,42,1)
(24,80,1)
(36,2,1)
(73,82,1)
(8,90,1)
(40,50,1)
(2,60,1)
(76,6,1)
(41,28,1)
(31,14,1)
(83,78,1)
(48,26,1)
(63,62,1)
(89,15,1)
(61,46,1)
(8,90,2)
(30,76,2)
(4,18,2)
(18,97,2)
(77,47,2)
(93,40,2)
(31,97,2)
(38,40,2)
(13,29,2)
(60,10,2)
(17,21,2)
(97,17,2)
(61,31,2)
(50,40,2)
(36,66,2)
(61,46,2)
(10,54,2)
(7,8,2)
(67,40,2)
(49,40,2)
(54,1,2)
(84,83,2)
(40,66,2)
(88,40,2)
(10,40,2)
(36,40,2)
(69,4,2)
(38,66,2)
(60,40,2)
(46,31,2)
(96,40,2)
(35,89,2)
(13,97,2)
(17,7,2)
(10,66,2)
(2,40,2)
(23,31,2)
(35,97,2)
(40,40,2)
-----------------------------------
(0,1)
(1,myUnion.unionSecond)
(2,i)
(3,data = NULL)
(4,data = dataBuffer - 8)
(5,1)
(6,1)
(7,malloc(100*sizeof(char)
(8,100*sizeof(char)
(9,data)
(10,data[i])
(11,'\\\\0')
(12,dataBuffer)
(13,dataBuffer[100-1])
(14,NULL)
(15,1)
(16,)
(17,(char *)
(18,dataBuffer - 8)
(19,'C')
(20,dataBuffer)
(21,char *)
(22,data)
(23,1)
(24,NULL)
(25,i)
(26,data)
(27,0)
(28,dataBuffer[100-1] = '\\\\0')
(29,100-1)
(30,dest[100-1])
(31,dataBuffer == NULL)
(32,)
(33,dest[100-1] = '\\\\0')
(34,dataBuffer)
(35,memset(dataBuffer, 'A', 100-1)
(36,i++)
(37,memset(dataBuffer, \'A\', 100-1)
(38,dest[i])
(39,dest)
(40,i < 100)
(41,data)
(42,myUnion.unionFirst)
(43,'A')
(44,)
(45,8)
(46,-1)
(47,100-1)
(48,myUnion)
(49,i)
(50,100)
(51,data)
(52,)
(53,RET)
(54,* data = myUnion.unionSecond)
(55,100)
(56,dataBuffer)
(57,myUnion)
(58,100)
(59,dest)
(60,dest[i] = data[i])
(61,exit(-1)
(62,dest[100-1] = '\\\\0')
(63,dest)
(64,'\\\\0')
(65,printLine(dest)
(66,i = 0)
(67,dest)
(68,)
(69,myUnion.unionFirst = data)
(70,)
(71,i)
(72,unionFirst)
(73,100)
(74,100)
(75,100)
(76,100-1)
(77,memset(dest, 'C', 100-1)
(78,1)
(79,char)
(80,data)
(81,unionSecond)
(82,dataBuffer)
(83,100-1)
(84,dest[100-1])
(85,'\\\\0')
(86,dest)
(87,100)
(88,i)
(89,100-1)
(90,sizeof(char)
(91,dest)
(92,for (i = 0; i < 100; i++)
(93,i)
(94,myUnion)
(95,if (dataBuffer == NULL)
(96,data)
(97,* dataBuffer = (char *)
(98,memset(dest, \'C\', 100-1)
(99,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^