-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_postinc_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        short result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_postinc_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_max_postinc_15_bad()
CWE190_Integer_Overflow__short_max_postinc_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(35,8,0)
(24,35,0)
(34,3,0)
(4,19,0)
(35,9,0)
(29,18,0)
(21,3,0)
(15,9,0)
(9,3,0)
(2,30,0)
(5,35,0)
(12,30,0)
(7,35,0)
(33,8,0)
(29,8,0)
(27,19,0)
(6,30,0)
(8,19,0)
(26,30,0)
(16,1,0)
(29,9,0)
(22,3,0)
(14,19,0)
(25,28,0)
(23,29,0)
(18,30,0)
(7,18,0)
(1,30,0)
(13,7,0)
(0,18,0)
(32,3,0)
(35,18,0)
(28,3,0)
(11,8,0)
(31,9,0)
(2,1,1)
(23,17,1)
(25,20,1)
(10,2,1)
(17,32,1)
(1,16,1)
(35,24,1)
(29,23,1)
(5,29,1)
(13,35,1)
(7,13,1)
(31,15,1)
(7,35,1)
(20,8,1)
(22,9,1)
(28,25,1)
(6,7,1)
(32,28,1)
(29,8,1)
(35,8,1)
(24,5,1)
(8,33,1)
(29,9,1)
(16,17,1)
(35,9,1)
(15,20,1)
(10,6,1)
(33,11,1)
(9,31,1)
(17,22,1)
(35,17,2)
(35,8,2)
(5,17,2)
(13,17,2)
(29,8,2)
(28,20,2)
(6,17,2)
(1,17,2)
(2,17,2)
(22,20,2)
(15,20,2)
(29,9,2)
(35,9,2)
(23,17,2)
(16,17,2)
(29,17,2)
(7,17,2)
(9,20,2)
(31,20,2)
(32,20,2)
(25,20,2)
(7,35,2)
(24,17,2)
-----------------------------------
(0,result)
(1,printLine("Benign, fixed string")
(2,break;)
(3,)
(4,switch(6)
(5,result)
(6,break;)
(7,printIntLine(result)
(8,data = 0)
(9,data = SHRT_MAX)
(10,RET)
(11,data)
(12,case 7:)
(13,result)
(14,switch(7)
(15,data)
(16,"Benign, fixed string")
(17,7)
(18,)
(19,)
(20,6)
(21,case 6:)
(22,break;)
(23,data)
(24,data)
(25,"Benign, fixed string")
(26,default:)
(27,data)
(28,printLine("Benign, fixed string")
(29,data++)
(30,)
(31,SHRT_MAX)
(32,break;)
(33,0)
(34,default:)
(35,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^