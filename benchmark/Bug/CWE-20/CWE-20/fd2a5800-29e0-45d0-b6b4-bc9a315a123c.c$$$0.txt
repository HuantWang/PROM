-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        unsigned int result = data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(26,33,0)
(32,1,0)
(34,11,0)
(21,15,0)
(22,9,0)
(24,30,0)
(1,32,0)
(14,15,0)
(33,30,0)
(10,35,0)
(9,11,0)
(32,33,0)
(18,35,0)
(15,11,0)
(8,23,0)
(21,11,0)
(5,30,0)
(16,21,0)
(4,35,0)
(9,33,0)
(37,23,0)
(11,23,0)
(27,4,0)
(25,1,0)
(12,32,0)
(17,35,0)
(1,35,0)
(13,1,0)
(6,23,0)
(20,15,0)
(3,23,0)
(19,35,0)
(15,33,0)
(31,33,0)
(29,23,0)
(2,30,0)
(36,8,0)
(4,27,1)
(21,16,1)
(3,21,1)
(22,7,1)
(0,3,1)
(8,36,1)
(9,22,1)
(13,25,1)
(29,8,1)
(32,33,1)
(25,28,1)
(27,28,1)
(33,26,1)
(1,32,1)
(7,18,1)
(14,9,1)
(26,31,1)
(7,19,1)
(16,15,1)
(15,20,1)
(9,33,1)
(28,33,1)
(0,29,1)
(32,12,1)
(12,13,1)
(21,15,1)
(19,1,1)
(15,33,1)
(20,14,1)
(36,7,1)
(18,4,1)
(25,28,2)
(12,28,2)
(32,33,2)
(19,28,2)
(13,28,2)
(21,7,2)
(14,7,2)
(27,28,2)
(36,7,2)
(22,7,2)
(8,7,2)
(1,32,2)
(18,28,2)
(15,33,2)
(9,33,2)
(4,28,2)
(16,7,2)
(3,7,2)
(21,15,2)
(9,7,2)
(20,7,2)
(15,7,2)
(32,28,2)
(29,7,2)
(1,28,2)
-----------------------------------
(0,RET)
(1,fscanf (stdin, "%u", &data)
(2,switch(6)
(3,break;)
(4,printLine("Benign, fixed string")
(5,switch(7)
(6,default:)
(7,7)
(8,printLine("Benign, fixed string")
(9,++data)
(10,case 6:)
(11,)
(12,data)
(13,"%u")
(14,result)
(15,result = data)
(16,result)
(17,default:)
(18,break;)
(19,break;)
(20,data)
(21,printUnsignedLine(result)
(22,data)
(23,)
(24,data)
(25,stdin)
(26,0)
(27,"Benign, fixed string")
(28,6)
(29,break;)
(30,)
(31,data)
(32,&data)
(33,data = 0)
(34,result)
(35,)
(36,"Benign, fixed string")
(37,case 7:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^