-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strncpy(data, source, strlen(source) + 1);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,80,84,86,90,92
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
globalTrue
globalTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,38,0)
(13,0,0)
(2,33,0)
(14,5,0)
(15,37,0)
(38,24,0)
(33,2,0)
(4,37,0)
(28,18,0)
(12,30,0)
(35,27,0)
(4,15,0)
(34,18,0)
(41,24,0)
(10,14,0)
(31,37,0)
(20,33,0)
(0,9,0)
(21,4,0)
(12,9,0)
(7,4,0)
(30,24,0)
(32,9,0)
(22,9,0)
(40,29,0)
(26,29,0)
(4,5,0)
(14,15,0)
(11,5,0)
(23,16,0)
(25,12,0)
(4,9,0)
(30,27,0)
(9,16,0)
(24,41,0)
(3,15,0)
(8,34,0)
(5,14,0)
(0,37,0)
(1,16,0)
(37,16,0)
(29,30,0)
(12,37,0)
(4,30,0)
(17,15,0)
(18,34,0)
(0,30,0)
(34,41,0)
(5,4,0)
(2,6,0)
(41,34,0)
(36,30,0)
(24,30,0)
(19,0,1)
(3,2,1)
(2,33,1)
(5,11,1)
(4,5,1)
(12,25,1)
(29,30,1)
(15,17,1)
(11,14,1)
(39,9,1)
(24,38,1)
(12,30,1)
(34,18,1)
(24,41,1)
(8,36,1)
(13,12,1)
(3,39,1)
(3,29,1)
(10,7,1)
(26,30,1)
(21,15,1)
(7,21,1)
(4,9,1)
(40,26,1)
(17,3,1)
(12,9,1)
(18,28,1)
(41,34,1)
(25,4,1)
(14,10,1)
(36,39,1)
(4,30,1)
(0,30,1)
(20,29,1)
(0,13,1)
(4,15,1)
(33,20,1)
(28,8,1)
(0,9,1)
(9,22,1)
(22,32,1)
(29,40,1)
(30,24,1)
(14,15,1)
(5,14,1)
(2,33,2)
(41,34,2)
(33,29,2)
(12,9,2)
(34,18,2)
(4,5,2)
(30,39,2)
(0,9,2)
(36,39,2)
(0,30,2)
(18,39,2)
(4,15,2)
(2,29,2)
(20,29,2)
(29,39,2)
(5,14,2)
(12,30,2)
(24,39,2)
(4,9,2)
(28,39,2)
(8,39,2)
(41,39,2)
(26,39,2)
(34,39,2)
(14,15,2)
(4,30,2)
(24,41,2)
(24,38,2)
(40,39,2)
(30,24,2)
(29,30,2)
-----------------------------------
(0,free(data)
(1,if(globalTrue)
(2,exit(-1)
(3,source)
(4,strncpy(data, source, strlen(source)
(5,strlen(source)
(6,)
(7,source)
(8,10)
(9,data = NULL)
(10,source)
(11,1)
(12,printLine(data)
(13,data)
(14,strlen(source)
(15,source[10+1] = SRC_STRING)
(16,)
(17,SRC_STRING)
(18,sizeof(char)
(19,RET)
(20,1)
(21,data)
(22,NULL)
(23,data)
(24,(char *)
(25,data)
(26,data)
(27,)
(28,char)
(29,data == NULL)
(30,data = (char *)
(31,source)
(32,data)
(33,-1)
(34,10*sizeof(char)
(35,if (data == NULL)
(36,data)
(37,)
(38,char *)
(39,globalTrue)
(40,NULL)
(41,malloc(10*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^