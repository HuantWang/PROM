-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memmove
memmove
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(17,31,0)
(1,12,0)
(31,39,0)
(30,1,0)
(15,37,0)
(20,13,0)
(22,1,0)
(28,4,0)
(14,20,0)
(1,24,0)
(8,23,0)
(24,11,0)
(24,41,0)
(32,7,0)
(41,24,0)
(1,21,0)
(32,18,0)
(5,21,0)
(37,29,0)
(33,8,0)
(3,39,0)
(19,39,0)
(39,35,0)
(29,18,0)
(7,32,0)
(1,39,0)
(5,11,0)
(31,13,0)
(16,13,0)
(27,12,0)
(18,32,0)
(0,45,0)
(25,5,0)
(40,29,0)
(24,1,0)
(10,33,0)
(26,11,0)
(39,32,0)
(8,33,0)
(36,12,0)
(9,3,0)
(31,12,0)
(18,29,0)
(43,45,0)
(34,21,0)
(32,39,0)
(12,4,0)
(6,41,0)
(13,4,0)
(11,5,0)
(29,37,0)
(20,12,0)
(38,3,0)
(20,39,0)
(42,21,0)
(21,13,0)
(1,13,0)
(2,4,0)
(11,24,0)
(44,35,0)
(46,31,1)
(29,37,1)
(31,17,1)
(19,45,1)
(22,30,1)
(5,25,1)
(36,27,1)
(34,45,1)
(1,39,1)
(8,33,1)
(33,10,1)
(24,11,1)
(18,29,1)
(1,21,1)
(6,11,1)
(25,22,1)
(3,9,1)
(45,0,1)
(14,1,1)
(11,5,1)
(43,12,1)
(40,19,1)
(1,24,1)
(12,36,1)
(1,12,1)
(5,21,1)
(31,39,1)
(9,38,1)
(32,7,1)
(3,39,1)
(32,18,1)
(10,3,1)
(24,41,1)
(20,39,1)
(38,39,1)
(0,43,1)
(20,12,1)
(34,8,1)
(37,15,1)
(30,21,1)
(26,5,1)
(34,3,1)
(21,42,1)
(41,6,1)
(15,40,1)
(39,32,1)
(11,26,1)
(31,12,1)
(20,14,1)
(17,20,1)
(42,34,1)
(18,45,2)
(1,12,2)
(29,45,2)
(32,45,2)
(32,18,2)
(18,29,2)
(24,41,2)
(31,12,2)
(39,32,2)
(40,45,2)
(39,45,2)
(5,21,2)
(37,45,2)
(1,21,2)
(15,45,2)
(20,12,2)
(19,45,2)
(3,39,2)
(8,33,2)
(32,7,2)
(20,39,2)
(29,37,2)
(1,24,2)
(3,45,2)
(38,45,2)
(10,3,2)
(1,39,2)
(11,5,2)
(33,3,2)
(24,11,2)
(9,45,2)
(8,3,2)
(31,39,2)
-----------------------------------
(0,5)
(1,memmove(data, source, (wcslen(source)
(2,data)
(3,data == NULL)
(4,)
(5,wcslen(source)
(6,wchar_t)
(7,wchar_t *)
(8,exit(-1)
(9,NULL)
(10,1)
(11,wcslen(source)
(12,data = NULL)
(13,)
(14,data)
(15,wchar_t)
(16,source)
(17,data)
(18,malloc(10*sizeof(wchar_t)
(19,data)
(20,printWLine(data)
(21,source[10+1] = SRC_STRING)
(22,source)
(23,)
(24,(wcslen(source)
(25,source)
(26,1)
(27,data)
(28,if(globalFive==5)
(29,10*sizeof(wchar_t)
(30,data)
(31,free(data)
(32,(wchar_t *)
(33,-1)
(34,source)
(35,)
(36,NULL)
(37,sizeof(wchar_t)
(38,data)
(39,data = (wchar_t *)
(40,10)
(41,sizeof(wchar_t)
(42,SRC_STRING)
(43,globalFive)
(44,if (data == NULL)
(45,globalFive==5)
(46,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^