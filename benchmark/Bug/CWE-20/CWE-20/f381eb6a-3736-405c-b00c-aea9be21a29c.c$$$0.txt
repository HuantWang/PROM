-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
    /* dereference dataPtr into data */
    wchar_t * data = (*dataPtr);
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, wcslen(data), L"%s", data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
49,54
50,51
52,53
54,55
54,56
55,56
57,58
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,41,43,45,47,51,53,56,58,59,61,65,67,71,73
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;    /* dereference dataPtr into data */    wchar_t * data = (*dataPtr);    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b_badSink(void * dataVoidPtr)
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;    /* dereference dataPtr into data */    wchar_t * data = (*dataPtr);    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
wchar_t
* * dataPtr = (wchar_t * *)dataVoidPtr
*
*
dataPtr
= (wchar_t * *)dataVoidPtr
(wchar_t * *)dataVoidPtr
wchar_t * *
wchar_t
* *
*
*
dataVoidPtr
dataVoidPtr
wchar_t * data = (*dataPtr);
wchar_t * data = (*dataPtr);
wchar_t
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
SNPRINTF(dest, wcslen(data), L"%s", data);
SNPRINTF(dest, wcslen(data), L"%s", data)
SNPRINTF
SNPRINTF
dest
dest
wcslen(data)
wcslen
wcslen
data
data
L"%s"
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,16,0)
(2,16,0)
(16,19,0)
(8,6,0)
(3,10,0)
(11,10,0)
(0,3,0)
(15,3,0)
(6,10,0)
(11,16,0)
(0,6,0)
(7,4,0)
(16,13,0)
(1,10,0)
(4,3,0)
(3,14,0)
(5,14,0)
(9,11,0)
(12,0,0)
(18,10,0)
(4,6,0)
(14,3,0)
(14,11,0)
(16,11,0)
(5,15,1)
(12,8,1)
(16,19,1)
(17,4,1)
(4,7,1)
(14,5,1)
(3,14,1)
(14,11,1)
(7,0,1)
(15,11,1)
(0,12,1)
(0,3,1)
(2,9,1)
(4,3,1)
(16,2,1)
(11,16,1)
(16,13,1)
(8,3,1)
(14,11,2)
(11,16,2)
(4,3,2)
(16,13,2)
(3,14,2)
(0,3,2)
(16,19,2)
-----------------------------------
(0,printWLine(data)
(1,data)
(2,dataVoidPtr)
(3,* data = (*dataPtr)
(4,free(data)
(5,dataPtr)
(6,)
(7,data)
(8,"")
(9,dataPtr)
(10,)
(11,* * dataPtr = (wchar_t * *)
(12,data)
(13,wchar_t * *)
(14,*dataPtr)
(15,data)
(16,(wchar_t * *)
(17,RET)
(18,dataPtr)
(19,void * dataVoidPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^