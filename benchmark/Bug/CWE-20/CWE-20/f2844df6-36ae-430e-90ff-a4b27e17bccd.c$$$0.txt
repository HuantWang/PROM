-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        size_t i, dataLen;
        dataLen = wcslen(data);
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        for (i = 0; i < dataLen; i++)
        {
            dest[i] = data[i];
        }
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
66,72
66,73
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
89,90
91,92
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
102,103
104,105
105,106
107,108
108,109
109,110
109,111
110,111
110,112
111,112
113,114
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
122,124
123,124
125,126
125,127
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,90,92,97,98,101,103,106,112,114,117,119,124,126,127,128,132,134,138,140
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
85,86
85,87
95,96
95,97
99,100
99,101
109,110
109,111
121,122
121,123
125,126
125,127
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
size_t i, dataLen;
size_t i, dataLen;
size_t
size_t
i
i
dataLen
dataLen
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < dataLen
i
i
dataLen
dataLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(53,43,0)
(13,41,0)
(23,40,0)
(31,30,0)
(26,18,0)
(44,42,0)
(26,14,0)
(21,41,0)
(12,6,0)
(35,40,0)
(10,50,0)
(28,41,0)
(46,42,0)
(31,40,0)
(8,43,0)
(40,9,0)
(33,47,0)
(0,9,0)
(17,31,0)
(22,31,0)
(54,32,0)
(23,15,0)
(9,0,0)
(14,9,0)
(15,43,0)
(51,23,0)
(31,50,0)
(29,35,0)
(27,15,0)
(45,28,0)
(30,39,0)
(34,15,0)
(2,6,0)
(9,14,0)
(11,50,0)
(6,50,0)
(3,18,0)
(30,31,0)
(7,21,0)
(1,15,0)
(9,40,0)
(28,40,0)
(6,30,0)
(21,50,0)
(19,32,0)
(41,15,0)
(48,11,0)
(52,43,0)
(32,54,0)
(14,26,0)
(54,37,0)
(25,26,0)
(24,15,0)
(35,15,0)
(36,40,0)
(5,15,0)
(18,26,0)
(42,40,0)
(38,50,0)
(20,21,0)
(40,43,0)
(41,28,0)
(17,6,1)
(31,40,1)
(11,50,1)
(28,40,1)
(26,18,1)
(24,16,1)
(20,7,1)
(34,21,1)
(3,25,1)
(13,24,1)
(45,13,1)
(35,40,1)
(19,42,1)
(21,50,1)
(30,31,1)
(11,48,1)
(24,33,1)
(48,30,1)
(40,9,1)
(18,3,1)
(22,17,1)
(42,44,1)
(46,40,1)
(21,20,1)
(54,32,1)
(42,40,1)
(9,0,1)
(50,10,1)
(10,38,1)
(23,40,1)
(2,12,1)
(16,42,1)
(7,50,1)
(33,16,1)
(23,51,1)
(6,2,1)
(6,50,1)
(29,34,1)
(4,23,1)
(32,19,1)
(16,54,1)
(25,36,1)
(51,35,1)
(35,29,1)
(31,50,1)
(44,46,1)
(12,21,1)
(14,26,1)
(31,22,1)
(38,41,1)
(9,14,1)
(41,28,1)
(28,45,1)
(7,11,1)
(21,41,1)
(11,50,2)
(2,21,2)
(31,40,2)
(6,21,2)
(42,40,2)
(12,21,2)
(32,42,2)
(7,21,2)
(54,42,2)
(48,21,2)
(54,32,2)
(19,42,2)
(40,9,2)
(22,21,2)
(41,28,2)
(17,21,2)
(31,50,2)
(30,31,2)
(23,40,2)
(9,14,2)
(21,50,2)
(11,21,2)
(26,18,2)
(21,21,2)
(14,26,2)
(6,50,2)
(33,16,2)
(30,21,2)
(28,40,2)
(31,21,2)
(35,40,2)
(9,0,2)
(20,21,2)
(21,41,2)
-----------------------------------
(0,wchar_t *)
(1,dataLen)
(2,i)
(3,wchar_t)
(4,RET)
(5,for (i = 0; i < dataLen; i++)
(6,dest[i])
(7,i)
(8,if(staticTrue)
(9,(wchar_t *)
(10,0)
(11,i++)
(12,dest)
(13,dataLen)
(14,malloc(100*sizeof(wchar_t)
(15,)
(16,staticTrue)
(17,data)
(18,sizeof(wchar_t)
(19,1)
(20,dataLen)
(21,i < dataLen)
(22,i)
(23,free(data)
(24,"")
(25,100)
(26,100*sizeof(wchar_t)
(27,i)
(28,wcslen(data)
(29,data)
(30,dest[i] = data[i])
(31,data[i])
(32,-1)
(33,\\\'\\\\0\\\')
(34,\\\'\\\\0\\\')
(35,printWLine(data)
(36,data)
(37,)
(38,i)
(39,)
(40,data = (wchar_t *)
(41,dataLen = wcslen(data)
(42,data == NULL)
(43,)
(44,NULL)
(45,data)
(46,data)
(47,)
(48,i)
(49,\\'\\\\0\\')
(50,i = 0)
(51,data)
(52,data)
(53,if (data == NULL)
(54,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^