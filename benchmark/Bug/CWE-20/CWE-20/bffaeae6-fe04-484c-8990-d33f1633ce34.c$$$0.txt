-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
89,94
90,91
92,93
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,94,95,97,101,103,107,109
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,46,0)
(13,23,0)
(24,35,0)
(41,19,0)
(40,21,0)
(45,9,0)
(50,34,0)
(37,40,0)
(30,21,0)
(14,34,0)
(3,5,0)
(28,19,0)
(15,8,0)
(35,24,0)
(19,6,0)
(31,6,0)
(47,39,0)
(32,21,0)
(4,27,0)
(23,39,0)
(38,39,0)
(17,8,0)
(56,40,0)
(7,29,0)
(6,24,0)
(5,21,0)
(18,31,0)
(6,46,0)
(44,29,0)
(2,6,0)
(0,6,0)
(22,35,0)
(52,26,0)
(33,40,0)
(42,23,0)
(9,26,0)
(40,6,0)
(36,40,0)
(2,26,0)
(53,51,0)
(29,7,0)
(11,2,0)
(40,26,0)
(1,34,0)
(43,22,0)
(49,24,0)
(22,43,0)
(2,21,0)
(54,22,0)
(19,27,0)
(34,1,0)
(35,22,0)
(5,6,0)
(25,51,0)
(24,6,0)
(23,26,0)
(26,51,0)
(7,48,0)
(1,9,0)
(39,23,0)
(10,1,0)
(24,49,0)
(21,51,0)
(20,43,0)
(5,26,0)
(12,31,0)
(16,46,0)
(34,50,1)
(19,6,1)
(27,4,1)
(5,21,1)
(14,10,1)
(35,22,1)
(12,6,1)
(44,31,1)
(33,36,1)
(8,15,1)
(24,35,1)
(18,12,1)
(41,31,1)
(55,5,1)
(17,21,1)
(39,38,1)
(2,11,1)
(41,7,1)
(43,20,1)
(4,19,1)
(30,32,1)
(31,6,1)
(23,39,1)
(9,45,1)
(15,17,1)
(56,37,1)
(3,2,1)
(2,21,1)
(38,47,1)
(40,21,1)
(1,34,1)
(50,14,1)
(36,56,1)
(20,54,1)
(31,18,1)
(19,28,1)
(5,6,1)
(54,0,1)
(22,43,1)
(29,44,1)
(47,42,1)
(2,6,1)
(6,24,1)
(10,23,1)
(40,33,1)
(5,3,1)
(13,27,1)
(0,8,1)
(42,13,1)
(11,40,1)
(28,41,1)
(40,6,1)
(7,29,1)
(45,1,1)
(24,49,1)
(37,9,1)
(13,8,1)
(21,30,1)
(6,24,2)
(44,31,2)
(27,8,2)
(1,34,2)
(5,6,2)
(7,29,2)
(40,6,2)
(23,39,2)
(24,49,2)
(28,8,2)
(18,8,2)
(40,21,2)
(22,43,2)
(20,8,2)
(41,8,2)
(5,21,2)
(31,8,2)
(24,8,2)
(43,8,2)
(0,8,2)
(12,8,2)
(22,8,2)
(7,31,2)
(6,8,2)
(29,31,2)
(4,8,2)
(31,6,2)
(35,8,2)
(54,8,2)
(2,21,2)
(24,35,2)
(2,6,2)
(19,6,2)
(35,22,2)
(19,8,2)
-----------------------------------
(0,data)
(1,source[100-1])
(2,printLine(data)
(3,data)
(4,\\\'\\\\0\\\')
(5,free(data)
(6,data = (char *)
(7,exit(-1)
(8,5==5)
(9,source[100-1] = \\\'\\\\0\\\')
(10,source)
(11,data)
(12,data)
(13,source)
(14,100)
(15,5)
(16,if (data == NULL)
(17,5)
(18,NULL)
(19,data[0])
(20,char)
(21,data = NULL)
(22,50*sizeof(char)
(23,memset(source, \\\'C\\\', 100-1)
(24,(char *)
(25,if(5==5)
(26,)
(27,data[0] = \\\'\\\\0\\\')
(28,0)
(29,-1)
(30,NULL)
(31,data == NULL)
(32,data)
(33,source)
(34,100-1)
(35,malloc(50*sizeof(char)
(36,"%s")
(37,data)
(38,1)
(39,100-1)
(40,SNPRINTF(data, 100, "%s", source)
(41,data)
(42,\\\'C\\\')
(43,sizeof(char)
(44,1)
(45,\\\'\\\\0\\\')
(46,)
(47,100)
(48,)
(49,char *)
(50,1)
(51,)
(52,source)
(53,data)
(54,50)
(55,RET)
(56,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^