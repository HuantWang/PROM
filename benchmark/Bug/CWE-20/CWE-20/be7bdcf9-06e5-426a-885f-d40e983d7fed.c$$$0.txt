-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            strncpy(data, source, strlen(source) + 1);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
104,105
104,106
104,107
106,107
107,108
107,109
110,111
111,112
113,114
114,115
114,116
114,117
114,118
115,116
117,118
119,120
121,122
121,123
122,123
122,124
123,124
125,126
128,129
129,130
129,131
130,131
132,133
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,88,92,94,95,99,103,105,108,109,112,116,118,120,124,126,127,131,133,137,139
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
107,108
107,109
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            strncpy(data, source, strlen(source) + 1);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            strncpy(data, source, strlen(source) + 1);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            strncpy(data, source, strlen(source) + 1);            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            strncpy(data, source, strlen(source) + 1);            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(59,21,0)
(51,43,0)
(31,30,0)
(44,21,0)
(5,29,0)
(35,10,0)
(63,9,0)
(62,57,0)
(8,21,0)
(30,64,0)
(1,4,0)
(57,15,0)
(60,43,0)
(20,25,0)
(36,10,0)
(60,28,0)
(47,14,0)
(19,48,0)
(2,29,0)
(18,9,0)
(13,64,0)
(22,25,0)
(58,20,0)
(55,56,0)
(52,0,0)
(43,4,0)
(16,56,0)
(12,8,0)
(11,53,0)
(64,25,0)
(24,2,0)
(56,20,0)
(63,16,0)
(41,16,0)
(38,7,0)
(29,25,0)
(38,11,0)
(9,63,0)
(14,2,0)
(40,14,0)
(30,21,0)
(43,25,0)
(18,16,0)
(46,3,0)
(28,60,0)
(53,48,0)
(17,25,0)
(45,25,0)
(9,18,0)
(32,63,0)
(64,0,0)
(8,56,0)
(4,43,0)
(59,56,0)
(61,53,0)
(11,38,0)
(0,64,0)
(23,29,0)
(18,21,0)
(48,53,0)
(21,20,0)
(28,29,0)
(3,43,0)
(21,30,0)
(26,28,0)
(15,50,0)
(33,9,0)
(34,2,0)
(53,11,0)
(38,2,0)
(3,24,0)
(49,16,0)
(2,38,0)
(7,38,0)
(39,18,0)
(27,59,0)
(10,25,0)
(18,56,0)
(54,60,0)
(42,18,0)
(15,57,0)
(37,24,0)
(24,29,0)
(27,8,1)
(16,49,1)
(15,57,1)
(62,14,1)
(28,60,1)
(38,11,1)
(24,2,1)
(64,0,1)
(38,7,1)
(42,16,1)
(18,16,1)
(26,10,1)
(8,12,1)
(9,63,1)
(14,2,1)
(46,14,1)
(1,51,1)
(60,43,1)
(18,21,1)
(60,54,1)
(33,63,1)
(46,15,1)
(37,3,1)
(2,38,1)
(53,48,1)
(3,43,1)
(18,9,1)
(14,47,1)
(24,37,1)
(6,59,1)
(34,28,1)
(9,33,1)
(31,44,1)
(30,31,1)
(12,18,1)
(8,21,1)
(43,4,1)
(19,61,1)
(39,42,1)
(59,21,1)
(44,24,1)
(52,13,1)
(21,30,1)
(61,34,1)
(40,2,1)
(30,64,1)
(47,40,1)
(32,39,1)
(54,26,1)
(63,32,1)
(4,1,1)
(41,21,1)
(10,36,1)
(0,52,1)
(3,46,1)
(49,41,1)
(36,35,1)
(57,62,1)
(63,16,1)
(48,19,1)
(35,64,1)
(13,43,1)
(11,53,1)
(59,27,1)
(43,4,2)
(14,2,2)
(63,16,2)
(21,30,2)
(64,0,2)
(30,64,2)
(28,60,2)
(18,21,2)
(3,43,2)
(24,2,2)
(9,63,2)
(2,38,2)
(38,11,2)
(18,16,2)
(18,9,2)
(38,7,2)
(15,14,2)
(15,57,2)
(8,21,2)
(59,21,2)
(60,43,2)
(62,14,2)
(11,53,2)
(57,14,2)
(53,48,2)
-----------------------------------
(0,&data)
(1,data)
(2,data = (char *)
(3,*dataPtr1)
(4,&data)
(5,if (data == NULL)
(6,RET)
(7,char *)
(8,printLine(data)
(9,strlen(source)
(10,data = NULL)
(11,malloc(10*sizeof(char)
(12,data)
(13,dataPtr2)
(14,data == NULL)
(15,exit(-1)
(16,source[10+1] = SRC_STRING)
(17,dataPtr1)
(18,strncpy(data, source, strlen(source)
(19,char)
(20,)
(21,* data = *dataPtr2)
(22,dataPtr2)
(23,data)
(24,*dataPtr1 = data)
(25,)
(26,data)
(27,data)
(28,* data = *dataPtr1)
(29,)
(30,*dataPtr2)
(31,dataPtr2)
(32,source)
(33,1)
(34,data)
(35,data)
(36,NULL)
(37,data)
(38,(char *)
(39,source)
(40,data)
(41,source)
(42,data)
(43,* *dataPtr1 = &data)
(44,data)
(45,data)
(46,dataPtr1)
(47,NULL)
(48,sizeof(char)
(49,SRC_STRING)
(50,)
(51,dataPtr1)
(52,data)
(53,10*sizeof(char)
(54,dataPtr1)
(55,source)
(56,)
(57,-1)
(58,data)
(59,free(data)
(60,*dataPtr1)
(61,10)
(62,1)
(63,strlen(source)
(64,* *dataPtr2 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^