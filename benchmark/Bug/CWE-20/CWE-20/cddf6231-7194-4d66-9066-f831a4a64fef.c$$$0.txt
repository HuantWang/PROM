-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_01_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    /* POTENTIAL FLAW: Possibly freeing memory twice */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,58,60
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_01_bad(){    long * data;    /* Initialize data */    data = NULL;    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    /* POTENTIAL FLAW: Possibly freeing memory twice */    free(data);}
void
CWE415_Double_Free__malloc_free_long_01_bad()
CWE415_Double_Free__malloc_free_long_01_bad
{    long * data;    /* Initialize data */    data = NULL;    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    /* POTENTIAL FLAW: Possibly freeing memory twice */    free(data);}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,11,0)
(4,11,0)
(10,14,0)
(16,2,0)
(18,1,0)
(25,7,0)
(9,14,0)
(23,13,0)
(21,1,0)
(7,6,0)
(24,11,0)
(7,25,0)
(24,13,0)
(8,5,0)
(10,6,0)
(6,7,0)
(2,13,0)
(14,10,0)
(17,5,0)
(14,13,0)
(22,11,0)
(13,11,0)
(19,24,0)
(8,15,0)
(3,6,0)
(26,20,0)
(12,2,0)
(20,13,0)
(6,10,0)
(5,8,0)
(13,14,0)
(14,9,0)
(20,11,0)
(20,26,1)
(0,24,1)
(6,7,1)
(3,23,1)
(17,2,1)
(2,12,1)
(7,3,1)
(26,8,1)
(14,10,1)
(8,5,1)
(2,13,1)
(7,25,1)
(14,9,1)
(24,19,1)
(26,2,1)
(12,16,1)
(13,14,1)
(16,13,1)
(23,1,1)
(19,20,1)
(10,6,1)
(5,17,1)
(24,13,1)
(1,21,1)
(20,13,1)
(21,18,1)
(10,6,2)
(8,2,2)
(5,2,2)
(24,13,2)
(20,13,2)
(17,2,2)
(14,10,2)
(2,13,2)
(7,25,2)
(14,9,2)
(6,7,2)
(8,5,2)
(13,14,2)
-----------------------------------
(0,RET)
(1,data = NULL)
(2,data == NULL)
(3,100)
(4,data)
(5,-1)
(6,100*sizeof(long)
(7,sizeof(long)
(8,exit(-1)
(9,long *)
(10,malloc(100*sizeof(long)
(11,)
(12,NULL)
(13,data = (long *)
(14,(long *)
(15,)
(16,data)
(17,1)
(18,data)
(19,data)
(20,free(data)
(21,NULL)
(22,if (data == NULL)
(23,data)
(24,free(data)
(25,long)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^