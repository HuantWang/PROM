-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67b_badSink(CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType myStruct)
{
    twoIntsStruct * data = myStruct.structFirst;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
52,53
52,54
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
69,70
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
81,83
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,14,16,17,21,22,27,29,31,36,38,43,44,47,48,51,58,60,61,62,68,70,71,72,76,78,80,82,86,87,91,95,96
-----computeFrom-----
41,42
41,43
45,46
45,47
54,55
54,56
64,65
64,66
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67b_badSink(CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType myStruct){    twoIntsStruct * data = myStruct.structFirst;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67b_badSink(CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType myStruct)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67b_badSink
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType myStruct
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType
myStruct
myStruct
{    twoIntsStruct * data = myStruct.structFirst;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data = myStruct.structFirst;
twoIntsStruct * data = myStruct.structFirst;
twoIntsStruct
twoIntsStruct
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(5,26,0)
(12,14,0)
(17,26,0)
(22,41,0)
(46,5,0)
(36,9,0)
(6,17,0)
(14,39,0)
(16,4,0)
(25,19,0)
(27,18,0)
(48,39,0)
(19,42,0)
(19,39,0)
(15,26,0)
(27,48,0)
(29,19,0)
(10,17,0)
(30,5,0)
(13,38,0)
(28,15,0)
(10,4,0)
(1,5,0)
(4,40,0)
(44,48,0)
(48,11,0)
(47,26,0)
(18,27,0)
(3,2,0)
(14,0,0)
(33,27,0)
(39,41,0)
(37,18,0)
(34,15,0)
(39,14,0)
(17,10,0)
(11,41,0)
(30,9,0)
(32,10,0)
(43,42,0)
(43,11,0)
(7,38,0)
(48,27,0)
(35,26,0)
(20,30,0)
(2,26,0)
(24,14,0)
(42,19,0)
(31,11,0)
(5,30,0)
(38,11,0)
(21,39,0)
(9,40,0)
(42,43,0)
(23,48,0)
(8,17,0)
(8,9,1)
(23,44,1)
(6,8,1)
(14,0,1)
(24,21,1)
(47,35,1)
(14,12,1)
(16,10,1)
(34,2,1)
(10,17,1)
(26,47,1)
(34,26,1)
(4,16,1)
(15,28,1)
(2,26,1)
(48,39,1)
(43,42,1)
(48,27,1)
(27,18,1)
(44,15,1)
(39,14,1)
(9,36,1)
(19,29,1)
(45,43,1)
(2,3,1)
(10,32,1)
(35,39,1)
(37,33,1)
(19,39,1)
(17,26,1)
(36,30,1)
(30,20,1)
(42,19,1)
(18,37,1)
(25,48,1)
(3,4,1)
(20,5,1)
(5,26,1)
(17,6,1)
(12,24,1)
(28,34,1)
(15,26,1)
(30,5,1)
(32,17,1)
(33,23,1)
(1,15,1)
(29,25,1)
(46,1,1)
(5,46,1)
(43,42,2)
(34,15,2)
(42,19,2)
(48,39,2)
(3,15,2)
(36,15,2)
(46,15,2)
(28,15,2)
(15,26,2)
(5,26,2)
(2,15,2)
(17,26,2)
(10,17,2)
(5,15,2)
(17,15,2)
(1,15,2)
(39,14,2)
(27,18,2)
(10,15,2)
(30,5,2)
(14,0,2)
(15,15,2)
(30,15,2)
(48,27,2)
(20,15,2)
(9,15,2)
(2,26,2)
(19,39,2)
(4,15,2)
(6,15,2)
(16,15,2)
(32,15,2)
(8,15,2)
-----------------------------------
(0,CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67_structType myStruct)
(1,source)
(2,i++)
(3,i)
(4,source[i].intTwo = 0)
(5,source[i])
(6,i)
(7,i)
(8,source)
(9,source[i].intOne = 0)
(10,source[i].intTwo)
(11,)
(12,structFirst)
(13,for (i = 0; i < 100; i++)
(14,myStruct.structFirst)
(15,i < 100)
(16,0)
(17,source[i])
(18,sizeof(twoIntsStruct)
(19,data[0])
(20,intOne)
(21,data)
(22,data)
(23,source)
(24,myStruct)
(25,data)
(26,i = 0)
(27,100*sizeof(twoIntsStruct)
(28,100)
(29,0)
(30,source[i].intOne)
(31,source)
(32,intTwo)
(33,100)
(34,i)
(35,i)
(36,0)
(37,twoIntsStruct)
(38,)
(39,* data = myStruct.structFirst)
(40,)
(41,)
(42,&data[0])
(43,printStructLine(&data[0])
(44,data)
(45,RET)
(46,i)
(47,0)
(48,memcpy(data, source, 100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^