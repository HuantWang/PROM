-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
76,77
77,78
79,80
80,81
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
96,98
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,70,71,74,75,78,84,86,89,91,95,98,99,103,105
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
68,69
68,70
72,73
72,74
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(10,23,0)
(19,20,0)
(3,17,0)
(1,17,0)
(17,40,0)
(27,11,0)
(37,26,0)
(51,4,0)
(38,2,0)
(28,36,0)
(46,26,0)
(38,6,0)
(47,44,0)
(15,26,0)
(37,23,0)
(49,10,0)
(18,20,0)
(40,48,0)
(26,44,0)
(15,48,0)
(7,48,0)
(15,23,0)
(45,37,0)
(24,48,0)
(23,20,0)
(5,9,0)
(52,4,0)
(39,15,0)
(1,22,0)
(33,2,0)
(48,44,0)
(37,7,0)
(0,44,0)
(7,37,0)
(43,26,0)
(25,14,0)
(50,17,0)
(9,23,0)
(21,23,0)
(20,18,0)
(2,38,0)
(9,26,0)
(36,11,0)
(16,9,0)
(32,27,0)
(13,40,0)
(8,27,0)
(12,19,0)
(41,11,0)
(9,11,0)
(17,1,0)
(20,23,0)
(42,37,0)
(23,14,0)
(20,19,0)
(31,48,0)
(29,11,0)
(9,1,0)
(17,11,0)
(34,48,0)
(30,10,0)
(17,40,1)
(19,12,1)
(49,30,1)
(32,11,1)
(15,26,1)
(27,8,1)
(9,23,1)
(15,39,1)
(13,4,1)
(13,38,1)
(9,16,1)
(15,23,1)
(35,15,1)
(30,23,1)
(17,11,1)
(9,11,1)
(39,7,1)
(11,41,1)
(28,1,1)
(7,37,1)
(36,28,1)
(37,26,1)
(36,11,1)
(20,19,1)
(26,46,1)
(51,26,1)
(37,42,1)
(13,10,1)
(21,4,1)
(1,17,1)
(32,36,1)
(3,9,1)
(5,27,1)
(9,26,1)
(10,49,1)
(27,11,1)
(2,33,1)
(4,52,1)
(23,20,1)
(41,29,1)
(40,13,1)
(37,23,1)
(33,10,1)
(45,27,1)
(12,21,1)
(17,50,1)
(10,23,1)
(38,2,1)
(46,43,1)
(8,32,1)
(16,5,1)
(50,3,1)
(42,45,1)
(52,51,1)
(29,40,1)
(20,18,1)
(30,4,2)
(10,4,2)
(15,23,2)
(17,27,2)
(12,4,2)
(38,10,2)
(8,27,2)
(49,4,2)
(32,27,2)
(1,17,2)
(20,4,2)
(10,23,2)
(9,11,2)
(21,4,2)
(2,10,2)
(50,27,2)
(37,23,2)
(16,27,2)
(9,27,2)
(17,11,2)
(20,18,2)
(28,27,2)
(5,27,2)
(33,10,2)
(37,26,2)
(15,26,2)
(36,11,2)
(3,27,2)
(36,27,2)
(23,4,2)
(19,4,2)
(23,20,2)
(27,27,2)
(17,40,2)
(20,19,2)
(9,26,2)
(27,11,2)
(7,37,2)
(9,23,2)
(38,2,2)
(1,27,2)
-----------------------------------
(0,data)
(1,data[i] = source[i])
(2,-1)
(3,source)
(4,5==5)
(5,data)
(6,)
(7,printIntLine(data[0])
(8,10)
(9,data[i])
(10,data == NULL)
(11,i = 0)
(12,10)
(13,source)
(14,)
(15,free(data)
(16,i)
(17,source[i])
(18,int *)
(19,malloc(10)
(20,(int *)
(21,data)
(22,)
(23,data = (int *)
(24,for (i = 0; i < 10; i++)
(25,if (data == NULL)
(26,data = NULL)
(27,i < 10)
(28,i)
(29,i)
(30,data)
(31,i)
(32,i)
(33,1)
(34,source)
(35,RET)
(36,i++)
(37,data[0])
(38,exit(-1)
(39,data)
(40,source[10] = {0})
(41,0)
(42,0)
(43,data)
(44,)
(45,data)
(46,NULL)
(47,if(5==5)
(48,)
(49,NULL)
(50,i)
(51,5)
(52,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^