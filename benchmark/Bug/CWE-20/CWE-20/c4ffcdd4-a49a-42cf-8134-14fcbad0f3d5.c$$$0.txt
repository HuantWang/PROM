-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnvp_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET connectSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* Abort on error or the connection was closed */
                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wspawnvp - searches for the location of the command among
             * the directories specified by the PATH environment variable */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _wspawnvp(_P_WAIT, COMMAND_INT, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
61,65
61,66
61,67
61,68
62,63
63,64
63,65
65,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
76,77
76,78
79,80
80,81
80,82
81,82
83,84
83,85
85,86
86,87
88,89
89,90
89,91
90,91
92,93
92,94
94,95
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
101,104
101,105
101,106
101,107
101,108
101,109
101,110
101,111
101,112
101,113
101,114
101,115
102,103
103,104
103,105
104,105
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
115,117
116,117
116,118
117,118
119,120
121,122
123,124
124,125
124,126
124,127
124,128
125,126
127,128
128,129
131,132
132,133
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
145,147
146,147
146,148
147,148
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
158,160
159,160
162,163
162,164
163,164
165,166
167,168
167,169
168,169
168,170
169,170
169,171
169,172
169,173
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
181,182
183,184
184,185
185,186
187,188
189,190
191,192
192,193
192,194
193,194
195,196
195,197
195,198
195,199
195,200
196,197
198,199
200,201
200,202
201,202
201,203
203,204
205,206
206,207
206,208
207,208
209,210
211,212
211,213
212,213
213,214
213,215
216,217
217,218
217,219
218,219
218,220
220,221
224,225
224,226
225,226
225,227
226,227
226,228
227,228
229,230
231,232
231,233
232,233
235,236
237,238
238,239
238,240
239,240
239,241
240,241
242,243
242,244
243,244
245,246
245,247
246,247
248,249
249,250
249,251
253,254
254,255
254,256
255,256
257,258
257,259
257,260
258,259
260,261
263,264
263,265
264,265
266,267
267,268
268,269
268,270
269,270
270,271
273,274
274,275
274,276
275,276
277,278
277,279
277,280
278,279
280,281
283,284
283,285
284,285
286,287
287,288
288,289
288,290
289,290
290,291
294,295
294,296
295,296
295,297
296,297
298,299
300,301
301,302
302,303
302,304
303,304
305,306
307,308
308,309
308,310
309,310
310,311
312,313
314,315
314,316
315,316
316,317
316,318
318,319
318,320
318,321
321,322
322,323
323,324
325,326
325,327
326,327
327,328
327,329
329,330
329,331
329,332
329,333
333,334
334,335
334,336
334,337
334,338
335,336
337,338
339,340
341,342
343,344
344,345
344,346
344,347
344,348
345,346
347,348
349,350
351,352
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,70,72,75,77,78,82,84,87,91,93,97,99,105,108,110,112,114,118,120,122,126,129,130,134,139,140,142,148,149,150,153,155,160,161,164,166,171,173,177,179,182,186,188,190,194,197,199,202,204,208,210,214,215,219,221,222,223,228,230,233,234,236,241,244,247,250,251,252,256,259,261,262,265,271,272,276,279,281,282,285,291,292,293,297,299,304,306,311,313,317,319,320,324,328,330,331,332,336,338,340,342,346,348,350,352
-----computeFrom-----
45,46
45,47
103,104
103,105
116,117
116,118
136,137
136,138
144,145
144,146
157,158
157,159
168,169
168,170
192,193
192,194
206,207
206,208
211,212
211,213
217,218
217,219
218,219
218,220
225,226
225,227
226,227
226,228
231,232
231,233
238,239
238,240
242,243
242,244
245,246
245,247
254,255
254,256
268,269
268,270
274,275
274,276
288,289
288,290
295,296
295,297
308,309
308,310
-----guardedBy-----
297,306
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnvp_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnvp_32_bad()
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnvp_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnvp(_P_WAIT, COMMAND_INT, args);
_wspawnvp(_P_WAIT, COMMAND_INT, args)
_wspawnvp
_wspawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(82,26,0)
(72,19,0)
(41,76,0)
(170,26,0)
(165,60,0)
(63,17,0)
(8,22,0)
(137,102,0)
(20,14,0)
(22,14,0)
(32,14,0)
(63,13,0)
(105,38,0)
(13,14,0)
(96,104,0)
(8,127,0)
(127,145,0)
(34,72,0)
(21,109,0)
(79,76,0)
(167,138,0)
(142,120,0)
(139,160,0)
(172,8,0)
(113,174,0)
(150,15,0)
(136,152,0)
(25,19,0)
(152,14,0)
(167,135,0)
(54,104,0)
(35,135,0)
(45,168,0)
(43,81,0)
(110,61,0)
(81,17,0)
(13,171,0)
(154,18,0)
(60,31,0)
(125,136,0)
(103,8,0)
(116,159,0)
(143,5,0)
(102,94,0)
(107,163,0)
(179,143,0)
(3,14,0)
(139,14,0)
(26,82,0)
(10,104,0)
(151,137,0)
(56,72,0)
(2,171,0)
(135,167,0)
(65,144,0)
(141,113,0)
(157,70,0)
(87,136,0)
(74,137,0)
(31,76,0)
(75,72,0)
(117,17,0)
(39,82,0)
(115,19,0)
(124,50,0)
(169,18,0)
(122,123,0)
(144,19,0)
(156,26,0)
(134,14,0)
(53,162,0)
(148,30,0)
(97,159,0)
(32,7,0)
(113,76,0)
(121,38,0)
(22,8,0)
(26,30,0)
(46,79,0)
(129,65,0)
(26,170,0)
(116,144,0)
(109,31,0)
(132,174,0)
(163,107,0)
(29,108,0)
(171,13,0)
(160,139,0)
(4,62,0)
(71,92,0)
(70,40,0)
(96,18,0)
(143,69,0)
(67,134,0)
(78,72,0)
(31,109,0)
(100,40,0)
(114,94,0)
(8,69,0)
(137,93,0)
(139,162,0)
(101,94,0)
(40,70,0)
(42,135,0)
(18,96,0)
(16,93,0)
(92,144,0)
(159,72,0)
(115,144,0)
(131,61,0)
(69,118,0)
(83,102,0)
(164,65,0)
(106,73,0)
(90,14,0)
(18,22,0)
(114,60,0)
(7,32,0)
(6,170,0)
(50,76,0)
(52,13,0)
(55,177,0)
(65,159,0)
(48,14,0)
(58,137,0)
(123,72,0)
(128,79,0)
(30,26,0)
(119,72,0)
(163,14,0)
(28,72,0)
(85,50,0)
(166,176,0)
(73,82,0)
(49,72,0)
(146,152,0)
(158,14,0)
(5,159,0)
(138,167,0)
(5,143,0)
(27,115,0)
(23,7,0)
(118,69,0)
(44,81,0)
(0,138,0)
(92,113,0)
(38,13,0)
(68,22,0)
(104,96,0)
(82,39,0)
(63,147,0)
(144,92,0)
(126,144,0)
(99,76,0)
(59,14,0)
(51,123,0)
(173,167,0)
(79,50,0)
(130,171,0)
(11,139,0)
(66,17,0)
(127,8,0)
(98,160,0)
(47,70,0)
(26,13,0)
(84,72,0)
(37,107,0)
(104,22,0)
(91,12,0)
(64,116,0)
(69,8,0)
(145,127,0)
(61,163,0)
(9,72,0)
(149,63,0)
(60,114,0)
(140,14,0)
(89,173,0)
(36,76,0)
(81,13,0)
(93,102,0)
(17,72,0)
(19,76,0)
(95,171,0)
(174,113,0)
(162,139,0)
(40,32,0)
(120,115,0)
(69,143,0)
(77,114,0)
(33,76,0)
(127,65,0)
(82,73,0)
(88,31,0)
(24,5,0)
(133,134,0)
(8,13,0)
(167,173,0)
(120,113,0)
(94,76,0)
(153,118,0)
(57,72,0)
(159,116,0)
(155,5,0)
(65,127,0)
(74,58,1)
(131,32,1)
(37,61,1)
(66,117,1)
(100,70,1)
(7,23,1)
(65,159,1)
(43,44,1)
(44,55,1)
(172,68,1)
(106,156,1)
(42,35,1)
(138,0,1)
(63,13,1)
(142,112,1)
(63,149,1)
(125,87,1)
(0,135,1)
(171,130,1)
(59,96,1)
(121,105,1)
(85,124,1)
(79,46,1)
(139,160,1)
(174,132,1)
(175,111,1)
(64,97,1)
(112,63,1)
(129,164,1)
(110,131,1)
(73,106,1)
(132,141,1)
(1,150,1)
(104,22,1)
(97,17,1)
(35,159,1)
(38,121,1)
(26,30,1)
(38,13,1)
(29,111,1)
(53,11,1)
(113,174,1)
(4,170,1)
(13,171,1)
(170,26,1)
(120,142,1)
(52,134,1)
(166,96,1)
(5,24,1)
(112,81,1)
(115,144,1)
(89,167,1)
(44,166,1)
(115,27,1)
(30,148,1)
(11,160,1)
(2,52,1)
(8,13,1)
(5,159,1)
(61,110,1)
(96,18,1)
(104,54,1)
(27,120,1)
(137,93,1)
(6,26,1)
(137,74,1)
(134,67,1)
(159,116,1)
(71,126,1)
(45,38,1)
(81,17,1)
(40,100,1)
(51,122,1)
(44,45,1)
(149,81,1)
(122,144,1)
(32,7,1)
(54,10,1)
(167,138,1)
(40,70,1)
(8,69,1)
(88,113,1)
(26,82,1)
(82,39,1)
(135,42,1)
(127,145,1)
(173,89,1)
(60,165,1)
(148,82,1)
(128,50,1)
(170,6,1)
(50,85,1)
(58,151,1)
(81,43,1)
(109,21,1)
(157,47,1)
(96,104,1)
(163,107,1)
(169,104,1)
(165,77,1)
(69,118,1)
(31,109,1)
(68,170,1)
(118,153,1)
(98,38,1)
(151,93,1)
(154,169,1)
(124,31,1)
(95,2,1)
(65,129,1)
(44,4,1)
(127,65,1)
(86,137,1)
(155,179,1)
(144,92,1)
(150,175,1)
(167,135,1)
(18,22,1)
(120,113,1)
(23,40,1)
(164,172,1)
(116,144,1)
(133,173,1)
(179,118,1)
(79,50,1)
(63,17,1)
(26,13,1)
(126,79,1)
(35,1,1)
(175,29,1)
(24,155,1)
(8,127,1)
(69,143,1)
(103,69,1)
(160,98,1)
(55,173,1)
(139,162,1)
(65,144,1)
(46,128,1)
(77,115,1)
(123,51,1)
(91,112,1)
(156,163,1)
(8,103,1)
(136,125,1)
(21,88,1)
(107,37,1)
(10,22,1)
(82,73,1)
(92,113,1)
(130,95,1)
(93,16,1)
(70,157,1)
(18,154,1)
(81,13,1)
(162,53,1)
(17,66,1)
(60,31,1)
(116,64,1)
(92,71,1)
(47,152,1)
(16,114,1)
(87,139,1)
(173,167,1)
(142,91,1)
(1,175,1)
(114,60,1)
(44,1,1)
(22,8,1)
(153,127,1)
(152,146,1)
(67,133,1)
(146,136,1)
(111,59,1)
(105,13,1)
(117,123,1)
(143,5,1)
(8,127,2)
(40,70,2)
(5,159,2)
(133,173,2)
(11,38,2)
(160,38,2)
(29,111,2)
(116,144,2)
(18,104,2)
(67,173,2)
(0,1,2)
(60,31,2)
(163,38,2)
(24,170,2)
(32,38,2)
(137,93,2)
(105,173,2)
(1,96,2)
(42,1,2)
(154,104,2)
(13,173,2)
(81,17,2)
(69,118,2)
(38,13,2)
(162,38,2)
(38,173,2)
(104,170,2)
(96,170,2)
(4,170,2)
(91,112,2)
(139,162,2)
(149,81,2)
(8,69,2)
(26,82,2)
(8,170,2)
(139,38,2)
(7,38,2)
(110,38,2)
(179,170,2)
(89,1,2)
(18,22,2)
(26,38,2)
(52,173,2)
(152,38,2)
(120,113,2)
(65,159,2)
(79,50,2)
(63,17,2)
(82,39,2)
(172,170,2)
(127,145,2)
(31,109,2)
(167,1,2)
(125,38,2)
(54,170,2)
(100,38,2)
(87,38,2)
(40,38,2)
(153,170,2)
(104,22,2)
(106,38,2)
(127,170,2)
(82,73,2)
(69,143,2)
(63,81,2)
(53,38,2)
(114,60,2)
(129,170,2)
(92,113,2)
(130,173,2)
(134,173,2)
(155,170,2)
(146,38,2)
(23,38,2)
(22,170,2)
(32,7,2)
(10,170,2)
(61,38,2)
(107,38,2)
(175,96,2)
(96,18,2)
(22,8,2)
(148,38,2)
(81,13,2)
(8,13,2)
(156,38,2)
(73,38,2)
(143,170,2)
(173,167,2)
(35,1,2)
(96,104,2)
(113,174,2)
(167,138,2)
(65,170,2)
(111,96,2)
(5,170,2)
(59,96,2)
(13,171,2)
(144,92,2)
(70,38,2)
(167,135,2)
(82,38,2)
(103,170,2)
(63,13,2)
(95,173,2)
(138,1,2)
(169,104,2)
(170,38,2)
(157,38,2)
(135,1,2)
(171,173,2)
(30,38,2)
(47,38,2)
(163,107,2)
(45,38,2)
(115,144,2)
(37,38,2)
(150,175,2)
(164,170,2)
(139,160,2)
(26,13,2)
(159,116,2)
(131,38,2)
(65,144,2)
(143,5,2)
(55,173,2)
(118,170,2)
(26,30,2)
(173,1,2)
(2,173,2)
(68,170,2)
(6,38,2)
(98,38,2)
(136,38,2)
(121,173,2)
(127,65,2)
(166,96,2)
(170,26,2)
(69,170,2)
-----------------------------------
(0,wsaData)
(1,0)
(2,AF_INET)
(3,if (connectSocket == INVALID_SOCKET)
(4,break;)
(5,dataLen - 1)
(6,SOCKET_ERROR)
(7,inet_addr(IP_ADDRESS)
(8,recv(connectSocket, (char *)
(9,wsaDataInit)
(10,recvResult)
(11,0)
(12,)
(13,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(14,)
(15,)
(16,args)
(17,connectSocket = INVALID_SOCKET)
(18,recvResult == 0)
(19,)
(20,if (replace)
(21,data)
(22,recvResult = recv(connectSocket, (char *)
(23,IP_ADDRESS)
(24,1)
(25,data)
(26,connect(connectSocket, (struct sockaddr*)
(27,data)
(28,do)
(29,\'\\\\0\')
(30,sizeof(service)
(31,* *dataPtr2 = &data)
(32,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(33,dataBuffer)
(34,dataLen)
(35,2)
(36,dataPtr1)
(37,TCP_PORT)
(38,connectSocket == INVALID_SOCKET)
(39,struct sockaddr*)
(40,service.sin_addr.s_addr)
(41,data)
(42,2)
(43,INVALID_SOCKET)
(44,connectSocket)
(45,break;)
(46,dataBuffer)
(47,service)
(48,if (WSAStartup(MAKEWORD(2,2)
(49,service)
(50,dataBuffer[100] = COMMAND_ARG2)
(51,0)
(52,connectSocket)
(53,service)
(54,SOCKET_ERROR)
(55,break;)
(56,if (connectSocket != INVALID_SOCKET)
(57,replace)
(58,COMMAND_INT)
(59,\'\\\\0\')
(60,*dataPtr2)
(61,service.sin_port)
(62,)
(63,CLOSE_SOCKET(connectSocket)
(64,data)
(65,data + dataLen)
(66,INVALID_SOCKET)
(67,1)
(68,recvResult)
(69,sizeof(wchar_t)
(70,service.sin_addr)
(71,dataPtr1)
(72,)
(73,&service)
(74,args)
(75,recvResult)
(76,)
(77,data)
(78,if (wsaDataInit)
(79,data = dataBuffer)
(80,'\\\\0')
(81,connectSocket != INVALID_SOCKET)
(82,(struct sockaddr*)
(83,args)
(84,connectSocket)
(85,COMMAND_ARG2)
(86,RET)
(87,service)
(88,dataPtr2)
(89,NO_ERROR)
(90,if (connect(connectSocket, (struct sockaddr*)
(91,WSACleanup()
(92,*dataPtr1)
(93,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(94,)
(95,SOCK_STREAM)
(96,recvResult == SOCKET_ERROR || recvResult == 0)
(97,dataLen)
(98,service)
(99,dataPtr2)
(100,s_addr)
(101,data)
(102,)
(103,0)
(104,recvResult == SOCKET_ERROR)
(105,connectSocket)
(106,service)
(107,htons(TCP_PORT)
(108,)
(109,&data)
(110,sin_port)
(111,replace)
(112,wsaDataInit)
(113,* *dataPtr1 = &data)
(114,* data = *dataPtr2)
(115,*dataPtr1 = data)
(116,wcslen(data)
(117,connectSocket)
(118,sizeof(wchar_t)
(119,wsaData)
(120,*dataPtr1)
(121,INVALID_SOCKET)
(122,wsaDataInit)
(123,wsaDataInit = 0)
(124,dataBuffer)
(125,sin_family)
(126,data)
(127,(char *)
(128,data)
(129,dataLen)
(130,IPPROTO_TCP)
(131,service)
(132,data)
(133,wsaDataInit)
(134,wsaDataInit = 1)
(135,MAKEWORD(2,2)
(136,service.sin_family)
(137,_wspawnvp(_P_WAIT, COMMAND_INT, args)
(138,&wsaData)
(139,memset(&service, 0, sizeof(service)
(140,if (recvResult == SOCKET_ERROR || recvResult == 0)
(141,dataPtr1)
(142,dataPtr1)
(143,100 - dataLen - 1)
(144,* data = *dataPtr1)
(145,char *)
(146,AF_INET)
(147,)
(148,service)
(149,connectSocket)
(150,'\\\\0')
(151,_P_WAIT)
(152,service.sin_family = AF_INET)
(153,wchar_t)
(154,0)
(155,dataLen)
(156,connectSocket)
(157,sin_addr)
(158,if (replace)
(159,dataLen = wcslen(data)
(160,&service)
(161,'\\\\0')
(162,sizeof(service)
(163,service.sin_port = htons(TCP_PORT)
(164,data)
(165,dataPtr2)
(166,break;)
(167,WSAStartup(MAKEWORD(2,2)
(168,)
(169,recvResult)
(170,connect(connectSocket, (struct sockaddr*)
(171,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(172,connectSocket)
(173,WSAStartup(MAKEWORD(2,2)
(174,&data)
(175,replace)
(176,)
(177,)
(178,\'\\\\0\')
(179,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^