-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (int64_t *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        *data = 2147483643LL;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printLongLongLine(*data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
58,59
59,60
59,61
60,61
62,63
63,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,38,42,44,49,51,56,57,61,64,68,70
-----computeFrom-----
14,15
14,16
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (int64_t *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 2147483643LL;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printLongLongLine(*data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (int64_t *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 2147483643LL;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printLongLongLine(*data);    free(data);}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (int64_t *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 2147483643LL;    }
1
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (int64_t *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 2147483643LL;    }
data = (int64_t *)malloc(sizeof(data));
data = (int64_t *)malloc(sizeof(data))
data
data
(int64_t *)malloc(sizeof(data))
int64_t *
int64_t
int64_t
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 2147483643LL;
*data = 2147483643LL
*data
data
data
2147483643LL
printLongLongLine(*data);
printLongLongLine(*data)
printLongLongLine
printLongLongLine
*data
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,14,0)
(11,15,0)
(15,19,0)
(15,11,0)
(4,20,0)
(13,8,0)
(19,18,0)
(12,20,0)
(24,5,0)
(29,20,0)
(29,23,0)
(16,29,0)
(4,19,0)
(25,13,0)
(23,14,0)
(10,19,0)
(27,19,0)
(23,29,0)
(6,5,0)
(2,14,0)
(17,4,0)
(8,13,0)
(20,14,0)
(5,6,0)
(8,15,0)
(13,20,0)
(22,10,0)
(29,19,0)
(1,18,0)
(6,3,0)
(28,18,0)
(4,14,0)
(15,8,0)
(19,15,0)
(0,20,0)
(21,10,0)
(27,9,1)
(15,11,1)
(1,6,1)
(19,15,1)
(26,4,1)
(21,22,1)
(22,19,1)
(17,23,1)
(4,17,1)
(24,10,1)
(29,20,1)
(29,16,1)
(23,29,1)
(6,5,1)
(13,20,1)
(8,13,1)
(4,20,1)
(4,19,1)
(16,1,1)
(15,8,1)
(20,12,1)
(9,20,1)
(1,10,1)
(29,19,1)
(10,19,1)
(25,27,1)
(10,21,1)
(12,0,1)
(5,24,1)
(16,9,1)
(13,25,1)
(8,13,2)
(25,9,2)
(19,15,2)
(24,10,2)
(13,20,2)
(19,9,2)
(15,11,2)
(15,8,2)
(5,10,2)
(6,5,2)
(6,10,2)
(4,19,2)
(8,9,2)
(15,9,2)
(27,9,2)
(10,9,2)
(13,9,2)
(21,9,2)
(29,20,2)
(29,19,2)
(10,19,2)
(4,20,2)
(22,9,2)
(23,29,2)
(1,9,2)
-----------------------------------
(0,data)
(1,L)
(2,if(1)
(3,)
(4,free(data)
(5,-1)
(6,exit(-1)
(7,data)
(8,malloc(sizeof(data)
(9,1)
(10,data == NULL)
(11,int64_t *)
(12,NULL)
(13,sizeof(data)
(14,)
(15,(int64_t *)
(16,data)
(17,data)
(18,)
(19,data = (int64_t *)
(20,data = NULL)
(21,NULL)
(22,data)
(23,printLongLongLine(*data)
(24,1)
(25,data)
(26,RET)
(27,data)
(28,if (data == NULL)
(29,*data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^