-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    data = badSource(data);
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, wcslen(data), L"%s", data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
63,68
64,65
66,67
68,69
68,70
69,70
71,72
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,49,51,55,57,59,61,65,67,70,72,73,75,79,81,85,87
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data = badSource(data);    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data = badSource(data);    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, wcslen(data), L"%s", data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
SNPRINTF(dest, wcslen(data), L"%s", data);
SNPRINTF(dest, wcslen(data), L"%s", data)
SNPRINTF
SNPRINTF
dest
dest
wcslen(data)
wcslen
wcslen
data
data
L"%s"
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,2,0)
(21,13,0)
(25,6,0)
(13,4,0)
(4,13,0)
(21,8,0)
(14,4,0)
(4,14,0)
(12,15,0)
(22,19,0)
(15,12,0)
(10,22,0)
(5,6,0)
(3,1,0)
(8,2,0)
(9,13,0)
(1,13,0)
(27,19,0)
(12,23,0)
(0,18,0)
(16,4,0)
(17,25,0)
(22,8,0)
(24,8,0)
(6,14,0)
(8,21,0)
(6,25,0)
(26,15,0)
(4,16,0)
(20,2,0)
(18,8,0)
(18,19,0)
(29,21,0)
(19,2,0)
(14,6,0)
(11,2,0)
(7,1,0)
(5,9,1)
(3,13,1)
(4,16,1)
(24,12,1)
(22,8,1)
(28,18,1)
(1,7,1)
(13,4,1)
(25,17,1)
(15,26,1)
(29,24,1)
(4,14,1)
(17,5,1)
(26,1,1)
(6,25,1)
(7,3,1)
(21,13,1)
(10,27,1)
(18,8,1)
(0,22,1)
(21,29,1)
(22,10,1)
(24,1,1)
(27,8,1)
(8,21,1)
(12,15,1)
(14,6,1)
(1,13,1)
(18,0,1)
(14,6,2)
(18,8,2)
(21,13,2)
(8,21,2)
(13,4,2)
(22,8,2)
(4,16,2)
(12,15,2)
(15,1,2)
(26,1,2)
(4,14,2)
(1,13,2)
(12,1,2)
(6,25,2)
-----------------------------------
(0,data)
(1,data == NULL)
(2,)
(3,data)
(4,(wchar_t *)
(5,100)
(6,100*sizeof(wchar_t)
(7,NULL)
(8,data = badSource(data)
(9,data)
(10,data)
(11,if (data == NULL)
(12,exit(-1)
(13,data = (wchar_t *)
(14,malloc(100*sizeof(wchar_t)
(15,-1)
(16,wchar_t *)
(17,wchar_t)
(18,free(data)
(19,)
(20,data)
(21,badSource(data)
(22,printWLine(data)
(23,)
(24,data)
(25,sizeof(wchar_t)
(26,1)
(27,"")
(28,RET)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^