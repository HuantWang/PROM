-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(staticFive==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,89,91,94,95,100,102,103,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
86,87
86,88
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(9,60,0)
(4,36,0)
(33,38,0)
(23,5,0)
(1,59,0)
(24,27,0)
(7,24,0)
(17,16,0)
(55,2,0)
(0,38,0)
(11,53,0)
(5,28,0)
(39,35,0)
(27,24,0)
(35,27,0)
(26,8,0)
(28,8,0)
(7,60,0)
(43,2,0)
(34,16,0)
(57,29,0)
(12,30,0)
(45,23,0)
(20,59,0)
(49,11,0)
(17,29,0)
(5,2,0)
(59,1,0)
(53,38,0)
(21,17,0)
(13,5,0)
(53,30,0)
(54,1,0)
(14,36,0)
(48,23,0)
(27,35,0)
(6,44,0)
(30,53,0)
(8,18,0)
(2,8,0)
(40,60,0)
(47,28,0)
(3,9,0)
(38,53,0)
(38,60,0)
(22,57,0)
(17,60,0)
(11,60,0)
(31,40,0)
(24,7,0)
(19,18,0)
(52,8,0)
(37,18,0)
(10,44,0)
(59,57,0)
(60,7,0)
(38,8,0)
(58,60,0)
(4,46,0)
(59,60,0)
(32,27,0)
(51,52,0)
(16,17,0)
(60,18,0)
(5,23,0)
(53,11,0)
(61,17,0)
(50,18,0)
(15,16,0)
(38,2,0)
(9,8,0)
(42,1,0)
(36,4,0)
(56,7,0)
(52,60,0)
(7,56,0)
(25,40,0)
(53,11,1)
(38,53,1)
(17,16,1)
(38,2,1)
(9,60,1)
(6,40,1)
(17,60,1)
(32,58,1)
(44,10,1)
(4,36,1)
(0,33,1)
(57,22,1)
(3,28,1)
(41,52,1)
(53,30,1)
(2,43,1)
(11,60,1)
(59,60,1)
(35,39,1)
(49,0,1)
(52,51,1)
(38,60,1)
(9,3,1)
(48,13,1)
(22,59,1)
(5,23,1)
(14,40,1)
(24,27,1)
(52,60,1)
(34,15,1)
(27,35,1)
(16,34,1)
(21,61,1)
(25,60,1)
(23,45,1)
(10,6,1)
(28,47,1)
(1,42,1)
(55,44,1)
(33,2,1)
(20,17,1)
(40,60,1)
(31,25,1)
(43,55,1)
(61,44,1)
(13,38,1)
(7,56,1)
(47,5,1)
(5,2,1)
(45,48,1)
(36,14,1)
(59,1,1)
(40,31,1)
(15,21,1)
(12,11,1)
(7,24,1)
(54,20,1)
(60,7,1)
(11,49,1)
(39,32,1)
(51,9,1)
(6,4,1)
(42,54,1)
(55,57,1)
(30,12,1)
(4,40,2)
(1,44,2)
(17,60,2)
(14,40,2)
(52,60,2)
(17,44,2)
(38,2,2)
(61,44,2)
(27,35,2)
(24,27,2)
(15,44,2)
(17,16,2)
(4,36,2)
(57,44,2)
(11,60,2)
(42,44,2)
(60,7,2)
(7,24,2)
(5,23,2)
(59,44,2)
(53,30,2)
(20,44,2)
(5,2,2)
(38,53,2)
(9,60,2)
(53,11,2)
(40,60,2)
(59,1,2)
(34,44,2)
(7,56,2)
(22,44,2)
(21,44,2)
(38,60,2)
(36,40,2)
(16,44,2)
(59,60,2)
(54,44,2)
-----------------------------------
(0,data)
(1,100-1)
(2,dest[50] = "")
(3,data)
(4,exit(-1)
(5,dest[50-1])
(6,staticFive)
(7,(char *)
(8,)
(9,printLine(data)
(10,5)
(11,strlen(data)
(12,char)
(13,dest)
(14,1)
(15,100)
(16,100-1)
(17,memset(data, \\\'A\\\', 100-1)
(18,)
(19,if(staticFive==5)
(20,data)
(21,\\\'A\\\')
(22,\\\'\\\\0\\\')
(23,50-1)
(24,malloc(100*sizeof(char)
(25,data)
(26,dest)
(27,100*sizeof(char)
(28,dest[50-1] = \\\'\\\\0\\\')
(29,)
(30,sizeof(char)
(31,NULL)
(32,100)
(33,dest)
(34,1)
(35,sizeof(char)
(36,-1)
(37,if (data == NULL)
(38,memmove(dest, data, strlen(data)
(39,char)
(40,data == NULL)
(41,RET)
(42,1)
(43,"")
(44,staticFive==5)
(45,1)
(46,)
(47,\\\'\\\\0\\\')
(48,50)
(49,data)
(50,data)
(51,data)
(52,free(data)
(53,strlen(data)
(54,100)
(55,dest)
(56,char *)
(57,data[100-1] = \\\'\\\\0\\\')
(58,data)
(59,data[100-1])
(60,data = (char *)
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^