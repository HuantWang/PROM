-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_13_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,64,65,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_13_bad(){    long * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_13_bad()
CWE415_Double_Free__malloc_free_long_13_bad
{    long * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(18,10,0)
(33,6,0)
(13,10,0)
(16,27,0)
(5,13,0)
(19,7,0)
(10,18,0)
(15,29,0)
(28,2,0)
(29,15,0)
(8,18,0)
(29,5,0)
(3,18,0)
(36,10,0)
(7,6,0)
(21,6,0)
(17,8,0)
(12,11,0)
(14,3,0)
(30,11,0)
(31,22,0)
(16,7,0)
(26,2,0)
(34,4,0)
(13,5,0)
(35,16,0)
(24,5,0)
(16,18,0)
(34,23,0)
(1,7,0)
(5,29,0)
(3,22,0)
(18,22,0)
(9,8,0)
(10,13,0)
(23,34,0)
(20,23,0)
(10,36,0)
(32,6,0)
(0,18,0)
(3,14,1)
(24,0,1)
(8,9,1)
(23,20,1)
(25,2,1)
(28,11,1)
(13,5,1)
(25,16,1)
(29,24,1)
(10,36,1)
(5,29,1)
(0,11,1)
(11,30,1)
(10,13,1)
(7,1,1)
(26,28,1)
(20,8,1)
(14,8,1)
(30,12,1)
(17,18,1)
(16,35,1)
(29,15,1)
(2,26,1)
(3,18,1)
(16,18,1)
(14,34,1)
(18,10,1)
(16,7,1)
(8,18,1)
(12,7,1)
(35,2,1)
(9,17,1)
(34,23,1)
(1,19,1)
(28,3,1)
(14,11,2)
(34,8,2)
(16,7,2)
(29,15,2)
(0,11,2)
(24,11,2)
(9,11,2)
(3,11,2)
(8,18,2)
(13,5,2)
(10,13,2)
(8,11,2)
(5,11,2)
(20,8,2)
(23,8,2)
(13,11,2)
(3,18,2)
(18,10,2)
(10,11,2)
(17,11,2)
(5,29,2)
(34,23,2)
(16,2,2)
(18,11,2)
(10,36,2)
(35,2,2)
(29,11,2)
(16,18,2)
-----------------------------------
(0,data)
(1,NULL)
(2,GLOBAL_CONST_FIVE==5)
(3,free(data)
(4,)
(5,100*sizeof(long)
(6,)
(7,data = NULL)
(8,data == NULL)
(9,NULL)
(10,(long *)
(11,GLOBAL_CONST_FIVE==5)
(12,GLOBAL_CONST_FIVE)
(13,malloc(100*sizeof(long)
(14,data)
(15,long)
(16,free(data)
(17,data)
(18,data = (long *)
(19,data)
(20,1)
(21,data)
(22,)
(23,-1)
(24,100)
(25,RET)
(26,5)
(27,)
(28,GLOBAL_CONST_FIVE)
(29,sizeof(long)
(30,5)
(31,if (data == NULL)
(32,if(GLOBAL_CONST_FIVE==5)
(33,if(GLOBAL_CONST_FIVE==5)
(34,exit(-1)
(35,data)
(36,long *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^