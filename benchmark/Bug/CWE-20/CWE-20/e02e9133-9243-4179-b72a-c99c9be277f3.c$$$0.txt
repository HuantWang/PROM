-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_memcpy_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: using memcpy with the length of the dest where data
         * could be smaller than dest causing buffer overread */
        memcpy(dest, data, strlen(dest)*sizeof(char));
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
74,76
74,77
74,78
74,79
74,80
74,81
75,76
76,77
76,78
78,79
78,80
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
102,103
102,104
102,105
102,106
103,104
105,106
107,108
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
116,118
119,120
120,121
120,122
121,122
121,123
122,123
124,125
124,126
128,129
129,130
129,131
130,131
132,133
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,77,79,81,85,87,88,90,91,96,98,99,100,104,106,108,112,114,117,118,123,125,126,127,131,133,137,139
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
89,90
89,91
93,94
93,95
97,98
97,99
109,110
109,111
120,121
120,122
124,125
124,126
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_memcpy_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_memcpy_06_bad()
CWE126_Buffer_Overread__malloc_char_memcpy_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memcpy(dest, data, strlen(dest)*sizeof(char));
memcpy(dest, data, strlen(dest)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(dest)*sizeof(char)
strlen(dest)
strlen
strlen
dest
dest
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(37,24,0)
(57,51,0)
(75,11,0)
(15,65,0)
(77,7,0)
(30,11,0)
(40,35,0)
(59,55,0)
(77,23,0)
(41,63,0)
(8,55,0)
(79,30,0)
(60,14,0)
(7,3,0)
(1,55,0)
(32,31,0)
(56,51,0)
(75,24,0)
(9,59,0)
(29,31,0)
(65,55,0)
(20,40,0)
(62,23,0)
(14,0,0)
(22,40,0)
(28,33,0)
(27,19,0)
(40,19,0)
(70,63,0)
(21,1,0)
(34,26,0)
(31,29,0)
(68,1,0)
(19,24,0)
(11,30,0)
(23,77,0)
(64,29,0)
(0,33,0)
(0,14,0)
(39,16,0)
(74,55,0)
(68,51,0)
(19,3,0)
(10,35,0)
(12,69,0)
(24,19,0)
(6,54,0)
(67,4,0)
(51,68,0)
(17,74,0)
(76,19,0)
(69,66,0)
(14,55,0)
(24,75,0)
(74,19,0)
(46,29,0)
(55,4,0)
(54,0,0)
(33,0,0)
(61,16,0)
(71,26,0)
(44,14,0)
(31,55,0)
(26,4,0)
(11,75,0)
(36,68,0)
(35,40,0)
(24,37,0)
(77,19,0)
(63,48,0)
(0,54,0)
(43,23,0)
(14,19,0)
(47,35,0)
(45,11,0)
(5,76,0)
(42,4,0)
(66,18,0)
(78,3,0)
(14,26,0)
(49,76,0)
(66,69,0)
(13,31,0)
(74,26,0)
(48,63,0)
(2,48,0)
(58,77,0)
(38,7,0)
(48,65,0)
(40,3,0)
(38,77,1)
(23,62,1)
(60,44,1)
(51,57,1)
(40,35,1)
(58,40,1)
(74,17,1)
(12,76,1)
(59,9,1)
(13,7,1)
(43,58,1)
(70,2,1)
(26,34,1)
(19,24,1)
(52,74,1)
(48,63,1)
(11,30,1)
(74,19,1)
(77,19,1)
(10,22,1)
(79,45,1)
(6,60,1)
(30,79,1)
(16,61,1)
(33,28,1)
(57,56,1)
(35,47,1)
(0,33,1)
(64,46,1)
(28,54,1)
(39,26,1)
(14,26,1)
(0,54,1)
(54,6,1)
(27,16,1)
(62,43,1)
(77,23,1)
(56,36,1)
(65,15,1)
(31,29,1)
(45,27,1)
(21,68,1)
(5,49,1)
(14,0,1)
(49,19,1)
(41,70,1)
(15,48,1)
(14,19,1)
(74,26,1)
(1,21,1)
(2,31,1)
(20,66,1)
(13,16,1)
(24,37,1)
(66,69,1)
(40,19,1)
(44,65,1)
(36,14,1)
(20,76,1)
(7,38,1)
(68,51,1)
(76,19,1)
(32,13,1)
(76,5,1)
(22,20,1)
(63,41,1)
(29,64,1)
(46,32,1)
(47,10,1)
(34,71,1)
(69,12,1)
(9,1,1)
(17,59,1)
(75,11,1)
(24,75,1)
(61,39,1)
(11,30,2)
(68,51,2)
(66,69,2)
(24,16,2)
(49,16,2)
(20,16,2)
(79,16,2)
(74,19,2)
(14,0,2)
(74,26,2)
(14,26,2)
(40,35,2)
(62,16,2)
(22,16,2)
(27,16,2)
(66,76,2)
(31,29,2)
(40,16,2)
(77,19,2)
(24,75,2)
(75,11,2)
(35,16,2)
(19,16,2)
(12,76,2)
(69,76,2)
(30,16,2)
(76,19,2)
(5,16,2)
(48,63,2)
(10,16,2)
(23,16,2)
(43,16,2)
(14,19,2)
(11,16,2)
(38,16,2)
(58,16,2)
(24,37,2)
(77,23,2)
(7,16,2)
(76,16,2)
(45,16,2)
(77,16,2)
(75,16,2)
(40,19,2)
(19,24,2)
(0,33,2)
(0,54,2)
(47,16,2)
-----------------------------------
(0,strlen(dest)
(1,dest[100-1] = '\\\\0')
(2,dest)
(3,)
(4,)
(5,NULL)
(6,dest)
(7,data[50-1] = '\\\\0')
(8,dest)
(9,dest)
(10,50)
(11,50*sizeof(char)
(12,1)
(13,dest)
(14,memcpy(dest, data, strlen(dest)
(15,'\\\\0')
(16,STATIC_CONST_FIVE==5)
(17,data)
(18,)
(19,data = (char *)
(20,data)
(21,'\\\\0')
(22,'A')
(23,50-1)
(24,(char *)
(25,data[50-1] = \'\\\\0\')
(26,data = NULL)
(27,data)
(28,char)
(29,100-1)
(30,sizeof(char)
(31,memset(dest, \'C\', 100-1)
(32,'C')
(33,sizeof(char)
(34,NULL)
(35,50-1)
(36,dest)
(37,char *)
(38,\'\\\\0\')
(39,STATIC_CONST_FIVE)
(40,memset(data, 'A', 50-1)
(41,1)
(42,if(STATIC_CONST_FIVE==5)
(43,50)
(44,dest)
(45,50)
(46,100)
(47,1)
(48,dest[100-1])
(49,data)
(50,\'A\')
(51,100-1)
(52,RET)
(53,'\\\\0')
(54,strlen(dest)
(55,)
(56,100)
(57,1)
(58,data)
(59,printLine(dest)
(60,data)
(61,5)
(62,1)
(63,100-1)
(64,1)
(65,dest[100-1] = '\\\\0')
(66,exit(-1)
(67,data)
(68,dest[100-1])
(69,-1)
(70,100)
(71,data)
(72,memset(data, \'A\', 50-1)
(73,memset(dest, 'C', 100-1)
(74,free(data)
(75,malloc(50*sizeof(char)
(76,data == NULL)
(77,data[50-1])
(78,if (data == NULL)
(79,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^