-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_w32spawnl_01_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    /* wspawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
117,121
117,122
117,123
117,124
118,119
120,121
122,123
124,125
126,127
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,123,125,127,129,131
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_w32spawnl_01_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_file_w32spawnl_01_bad()
CWE78_OS_Command_Injection__wchar_t_file_w32spawnl_01_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnl
_wspawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(38,31,0)
(32,16,0)
(24,50,0)
(12,7,0)
(2,59,0)
(40,6,0)
(4,7,0)
(48,57,0)
(33,18,0)
(24,53,0)
(34,47,0)
(50,24,0)
(7,16,0)
(54,18,0)
(16,25,0)
(46,27,0)
(45,39,0)
(6,18,0)
(28,50,0)
(5,1,0)
(53,24,0)
(51,11,0)
(28,39,0)
(44,50,0)
(24,22,0)
(37,1,0)
(49,16,0)
(17,6,0)
(50,28,0)
(53,39,0)
(39,27,0)
(29,47,0)
(39,40,0)
(3,1,0)
(10,57,0)
(14,1,0)
(26,59,0)
(31,39,0)
(20,28,0)
(40,39,0)
(50,44,0)
(18,47,0)
(19,27,0)
(9,31,0)
(59,16,0)
(43,40,0)
(56,25,0)
(42,22,0)
(15,28,0)
(6,47,0)
(1,47,0)
(31,11,0)
(58,52,0)
(11,31,0)
(21,1,0)
(35,49,0)
(36,1,0)
(0,53,0)
(23,53,0)
(53,6,0)
(41,27,0)
(16,59,0)
(49,52,0)
(8,24,0)
(24,16,0)
(30,48,0)
(27,47,0)
(22,24,0)
(13,6,0)
(40,43,1)
(16,59,1)
(28,39,1)
(37,3,1)
(20,15,1)
(51,31,1)
(15,53,1)
(5,21,1)
(35,22,1)
(50,44,1)
(11,31,1)
(21,37,1)
(13,18,1)
(24,16,1)
(9,38,1)
(31,9,1)
(22,42,1)
(53,39,1)
(49,16,1)
(8,50,1)
(53,0,1)
(42,24,1)
(54,33,1)
(12,16,1)
(14,5,1)
(39,40,1)
(0,23,1)
(36,14,1)
(23,7,1)
(48,30,1)
(45,6,1)
(55,1,1)
(7,16,1)
(4,12,1)
(40,6,1)
(6,18,1)
(10,48,1)
(31,39,1)
(3,7,1)
(11,51,1)
(50,28,1)
(49,35,1)
(24,8,1)
(35,10,1)
(6,17,1)
(3,11,1)
(59,26,1)
(24,50,1)
(18,54,1)
(3,49,1)
(22,24,1)
(38,39,1)
(53,6,1)
(32,11,1)
(2,32,1)
(30,22,1)
(1,36,1)
(28,20,1)
(26,2,1)
(43,45,1)
(17,13,1)
(24,53,1)
(7,4,1)
(49,7,2)
(11,31,2)
(48,22,2)
(30,22,2)
(15,7,2)
(12,11,2)
(53,39,2)
(28,7,2)
(10,22,2)
(8,7,2)
(39,40,2)
(35,7,2)
(49,16,2)
(28,39,2)
(26,11,2)
(20,7,2)
(42,7,2)
(0,7,2)
(24,7,2)
(22,24,2)
(22,7,2)
(53,6,2)
(7,16,2)
(31,39,2)
(40,6,2)
(24,16,2)
(53,7,2)
(4,11,2)
(16,59,2)
(16,11,2)
(2,11,2)
(32,11,2)
(50,7,2)
(24,53,2)
(24,50,2)
(6,18,2)
(50,28,2)
(7,11,2)
(50,44,2)
(59,11,2)
(23,7,2)
-----------------------------------
(0,dataLen)
(1,_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(2,FILENAME)
(3,_P_WAIT)
(4,NULL)
(5,COMMAND_ARG1)
(6,data = dataBuffer)
(7,pFile != NULL)
(8,pFile)
(9,dataLen)
(10,\\\'\\\\0\\\')
(11,100-dataLen > 1)
(12,pFile)
(13,data)
(14,COMMAND_ARG3)
(15,100)
(16,pFile = fopen(FILENAME, "r")
(17,dataBuffer)
(18,dataBuffer[100] = COMMAND_ARG2)
(19,pFile)
(20,dataLen)
(21,COMMAND_INT_PATH)
(22,fgetws(data+dataLen, (int)
(23,data)
(24,fgetws(data+dataLen, (int)
(25,)
(26,"r")
(27,)
(28,100-dataLen)
(29,data)
(30,"fgetws()
(31,100-dataLen)
(32,pFile)
(33,dataBuffer)
(34,dataBuffer)
(35,pFile)
(36,NULL)
(37,COMMAND_INT_PATH)
(38,100)
(39,dataLen = wcslen(data)
(40,wcslen(data)
(41,if (100-dataLen > 1)
(42,NULL)
(43,data)
(44,int)
(45,dataLen)
(46,dataLen)
(47,)
(48,printLine("fgetws()
(49,fclose(pFile)
(50,(int)
(51,1)
(52,)
(53,data+dataLen)
(54,COMMAND_ARG2)
(55,RET)
(56,if (pFile != NULL)
(57,)
(58,if (fgetws(data+dataLen, (int)
(59,fopen(FILENAME, "r")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^