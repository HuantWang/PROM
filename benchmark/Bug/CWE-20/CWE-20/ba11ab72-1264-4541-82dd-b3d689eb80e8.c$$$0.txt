-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad()
{
    goto sink;
sink:
    {
        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
        if (structCharVoid == NULL) {exit(-1);}
        structCharVoid->voidSecond = (void *)SRC_STR;
        /* Print the initial block pointed to by structCharVoid->voidSecond */
        printLine((char *)structCharVoid->voidSecond);
        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
        printLine((char *)structCharVoid->charFirst);
        printLine((char *)structCharVoid->voidSecond);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
53,55
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
80,81
82,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
96,97
96,98
97,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
129,130
131,132
131,133
132,133
-----nextToken-----
2,4,7,9,14,16,17,22,24,27,31,32,36,38,43,45,50,51,54,56,58,62,65,67,70,71,75,78,79,81,86,92,93,101,102,105,106,107,108,112,115,117,120,121,125,128,130,133,134
-----computeFrom-----
34,35
34,36
47,48
47,49
88,89
88,90
94,95
94,96
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad(){    goto sink;sink:    {        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));        if (structCharVoid == NULL) {exit(-1);}        structCharVoid->voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid->voidSecond */        printLine((char *)structCharVoid->voidSecond);        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */        printLine((char *)structCharVoid->charFirst);        printLine((char *)structCharVoid->voidSecond);    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad
{    goto sink;sink:    {        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));        if (structCharVoid == NULL) {exit(-1);}        structCharVoid->voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid->voidSecond */        printLine((char *)structCharVoid->voidSecond);        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */        printLine((char *)structCharVoid->charFirst);        printLine((char *)structCharVoid->voidSecond);    }}
goto sink;
sink
sink:    {        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));        if (structCharVoid == NULL) {exit(-1);}        structCharVoid->voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid->voidSecond */        printLine((char *)structCharVoid->voidSecond);        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */        printLine((char *)structCharVoid->charFirst);        printLine((char *)structCharVoid->voidSecond);    }
sink
{        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));        if (structCharVoid == NULL) {exit(-1);}        structCharVoid->voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid->voidSecond */        printLine((char *)structCharVoid->voidSecond);        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */        printLine((char *)structCharVoid->charFirst);        printLine((char *)structCharVoid->voidSecond);    }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(28,1,0)
(32,67,0)
(13,8,0)
(11,20,0)
(37,20,0)
(64,34,0)
(20,11,0)
(16,51,0)
(1,22,0)
(35,66,0)
(9,29,0)
(31,22,0)
(8,45,0)
(2,30,0)
(37,60,0)
(57,51,0)
(12,58,0)
(0,67,0)
(53,5,0)
(63,22,0)
(47,7,0)
(8,56,0)
(5,12,0)
(60,6,0)
(12,4,0)
(60,37,0)
(1,57,0)
(38,14,0)
(20,37,0)
(5,22,0)
(57,34,0)
(39,48,0)
(52,5,0)
(54,1,0)
(17,16,0)
(14,57,0)
(7,47,0)
(22,51,0)
(44,6,0)
(50,30,0)
(6,22,0)
(29,1,0)
(5,57,0)
(0,3,0)
(41,27,0)
(11,30,0)
(22,67,0)
(58,51,0)
(34,57,0)
(30,22,0)
(1,29,0)
(42,31,0)
(29,40,0)
(41,42,0)
(55,27,0)
(26,20,0)
(23,47,0)
(41,51,0)
(14,22,0)
(3,0,0)
(34,64,0)
(51,48,0)
(7,36,0)
(8,13,0)
(67,32,0)
(29,9,0)
(24,41,0)
(12,5,0)
(11,16,0)
(67,0,0)
(33,22,0)
(30,11,0)
(62,14,0)
(25,51,0)
(45,8,0)
(58,12,0)
(40,51,0)
(59,33,0)
(61,48,0)
(6,60,0)
(43,34,0)
(68,27,0)
(40,29,0)
(37,66,0)
(49,33,0)
(19,6,0)
(67,22,0)
(13,22,0)
(27,41,0)
(18,51,0)
(46,3,0)
(66,37,0)
(15,31,0)
(65,13,0)
(56,51,0)
(42,41,0)
(31,42,0)
(4,12,0)
(56,8,0)
(27,22,0)
(10,13,0)
(6,44,1)
(49,22,1)
(62,7,1)
(50,2,1)
(42,31,1)
(27,22,1)
(7,47,1)
(5,52,1)
(67,0,1)
(8,45,1)
(44,19,1)
(29,1,1)
(56,8,1)
(13,10,1)
(1,22,1)
(63,61,1)
(37,66,1)
(37,60,1)
(19,30,1)
(20,37,1)
(65,16,1)
(67,32,1)
(27,68,1)
(8,13,1)
(57,34,1)
(14,38,1)
(2,41,1)
(33,22,1)
(55,58,1)
(66,35,1)
(52,53,1)
(62,33,1)
(46,63,1)
(68,55,1)
(1,28,1)
(1,57,1)
(34,43,1)
(47,23,1)
(30,50,1)
(22,67,1)
(17,11,1)
(3,46,1)
(26,37,1)
(28,54,1)
(6,22,1)
(24,27,1)
(15,24,1)
(0,3,1)
(31,15,1)
(29,9,1)
(38,62,1)
(14,22,1)
(11,20,1)
(23,33,1)
(43,14,1)
(54,56,1)
(41,27,1)
(31,22,1)
(13,22,1)
(40,29,1)
(11,30,1)
(41,42,1)
(21,40,1)
(34,64,1)
(12,4,1)
(60,6,1)
(35,60,1)
(59,49,1)
(12,5,1)
(58,12,1)
(20,26,1)
(5,57,1)
(10,65,1)
(30,22,1)
(16,17,1)
(33,59,1)
(5,22,1)
(53,57,1)
(40,29,2)
(57,34,2)
(6,22,2)
(31,22,2)
(14,22,2)
(7,33,2)
(58,12,2)
(30,22,2)
(12,5,2)
(7,47,2)
(67,32,2)
(22,67,2)
(13,22,2)
(0,3,2)
(11,30,2)
(20,37,2)
(5,22,2)
(67,0,2)
(37,66,2)
(23,33,2)
(33,22,2)
(29,9,2)
(27,22,2)
(12,4,2)
(41,27,2)
(60,6,2)
(37,60,2)
(8,13,2)
(29,1,2)
(1,22,2)
(41,42,2)
(34,64,2)
(11,20,2)
(1,57,2)
(5,57,2)
(8,45,2)
(47,33,2)
(56,8,2)
(42,31,2)
-----------------------------------
(0,malloc(sizeof(charVoid)
(1,structCharVoid->voidSecond)
(2,structCharVoid)
(3,sizeof(charVoid)
(4,char *)
(5,structCharVoid->voidSecond)
(6,structCharVoid->charFirst)
(7,exit(-1)
(8,(char *)
(9,char *)
(10,charFirst)
(11,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(12,(char *)
(13,structCharVoid->charFirst)
(14,structCharVoid->voidSecond)
(15,structCharVoid)
(16,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(17,'\\\\0')
(18,if (structCharVoid == NULL)
(19,structCharVoid)
(20,(sizeof(structCharVoid->charFirst)
(21,RET)
(22,* structCharVoid = (charVoid *)
(23,1)
(24,SRC_STR)
(25,structCharVoid)
(26,1)
(27,structCharVoid->charFirst)
(28,voidSecond)
(29,(char *)
(30,structCharVoid->charFirst)
(31,*structCharVoid)
(32,charVoid *)
(33,structCharVoid == NULL)
(34,(void *)
(35,char)
(36,)
(37,sizeof(structCharVoid->charFirst)
(38,voidSecond)
(39,sink:)
(40,printLine((char *)
(41,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(42,sizeof(*structCharVoid)
(43,SRC_STR)
(44,charFirst)
(45,char *)
(46,charVoid)
(47,-1)
(48,)
(49,structCharVoid)
(50,charFirst)
(51,)
(52,voidSecond)
(53,structCharVoid)
(54,structCharVoid)
(55,structCharVoid)
(56,printLine((char *)
(57,structCharVoid->voidSecond = (void *)
(58,printLine((char *)
(59,NULL)
(60,sizeof(structCharVoid->charFirst)
(61,goto sink;)
(62,structCharVoid)
(63,structCharVoid)
(64,void *)
(65,structCharVoid)
(66,sizeof(char)
(67,(charVoid *)
(68,charFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^