-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execv_11_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wexecv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
127,129
128,129
129,130
129,131
131,132
131,133
131,134
131,135
135,136
136,137
136,138
136,139
136,140
137,138
139,140
141,142
143,144
145,146
146,147
146,148
146,149
147,148
149,150
151,152
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,132,133,134,138,140,142,144,148,150,152
-----computeFrom-----
23,24
23,25
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execv_11_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__wchar_t_console_w32_execv_11_bad()
CWE78_OS_Command_Injection__wchar_t_console_w32_execv_11_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(6,43,0)
(26,42,0)
(38,31,0)
(46,4,0)
(41,8,0)
(15,4,0)
(33,23,0)
(21,10,0)
(45,54,0)
(13,31,0)
(28,34,0)
(19,14,0)
(24,15,0)
(39,10,0)
(43,31,0)
(54,10,0)
(15,30,0)
(9,34,0)
(14,8,0)
(31,17,0)
(18,33,0)
(5,6,0)
(38,33,0)
(2,23,0)
(22,54,0)
(29,36,0)
(54,45,0)
(43,32,0)
(14,33,0)
(10,40,0)
(33,34,0)
(17,31,0)
(38,10,0)
(32,43,0)
(31,43,0)
(21,33,0)
(8,16,0)
(20,40,0)
(51,23,0)
(35,3,0)
(27,11,0)
(52,30,0)
(47,6,0)
(30,34,0)
(25,15,0)
(4,30,0)
(10,21,0)
(56,34,0)
(43,6,0)
(44,33,0)
(1,40,0)
(6,10,0)
(40,50,0)
(7,54,0)
(23,34,0)
(55,21,0)
(31,38,0)
(37,38,0)
(42,11,0)
(49,45,0)
(0,38,0)
(12,17,0)
(8,14,0)
(36,16,0)
(54,7,1)
(44,18,1)
(27,42,1)
(21,55,1)
(55,39,1)
(22,10,1)
(19,41,1)
(47,38,1)
(37,45,1)
(42,26,1)
(21,33,1)
(17,31,1)
(0,37,1)
(15,25,1)
(43,32,1)
(31,13,1)
(54,10,1)
(51,2,1)
(33,44,1)
(12,31,1)
(46,45,1)
(46,53,1)
(33,23,1)
(46,29,1)
(38,33,1)
(46,27,1)
(10,21,1)
(14,19,1)
(14,33,1)
(25,24,1)
(29,8,1)
(45,49,1)
(17,12,1)
(48,15,1)
(6,5,1)
(24,4,1)
(5,47,1)
(39,53,1)
(41,17,1)
(53,33,1)
(38,0,1)
(45,54,1)
(31,43,1)
(4,46,1)
(15,4,1)
(8,14,1)
(18,23,1)
(43,6,1)
(7,22,1)
(38,10,1)
(31,38,1)
(13,43,1)
(23,51,1)
(26,17,1)
(6,10,1)
(49,54,1)
(7,53,2)
(26,17,2)
(31,45,2)
(5,45,2)
(54,10,2)
(29,17,2)
(10,21,2)
(27,17,2)
(43,6,2)
(31,43,2)
(15,4,2)
(19,17,2)
(14,33,2)
(8,17,2)
(12,45,2)
(21,33,2)
(45,54,2)
(55,53,2)
(37,45,2)
(22,53,2)
(33,23,2)
(8,14,2)
(38,45,2)
(0,45,2)
(38,33,2)
(6,45,2)
(10,53,2)
(21,53,2)
(31,38,2)
(49,53,2)
(47,45,2)
(54,53,2)
(13,45,2)
(38,10,2)
(6,10,2)
(43,32,2)
(17,45,2)
(39,53,2)
(14,17,2)
(17,31,2)
(43,45,2)
(45,53,2)
(42,17,2)
(41,17,2)
-----------------------------------
(0,dataLen)
(1,if (100-dataLen > 1)
(2,dataBuffer)
(3,)
(4,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(5,dataLen)
(6,100-dataLen)
(7,dataLen)
(8,dataLen = wcslen(data)
(9,if(globalReturnsTrue()
(10,dataLen = wcslen(data)
(11,)
(12,NULL)
(13,stdin)
(14,wcslen(data)
(15,EXECV(COMMAND_INT_PATH, args)
(16,)
(17,fgetws(data+dataLen, (int)
(18,data)
(19,data)
(20,dataLen)
(21,wcslen(data)
(22,100)
(23,dataBuffer[100] = COMMAND_ARG2)
(24,COMMAND_INT_PATH)
(25,args)
(26,"fgetws()
(27,\\\'\\\\0\\\')
(28,dataBuffer)
(29,\\\'\\\\0\\\')
(30,)
(31,fgetws(data+dataLen, (int)
(32,int)
(33,data = dataBuffer)
(34,)
(35,if (fgetws(data+dataLen, (int)
(36,)
(37,data)
(38,data+dataLen)
(39,dataLen)
(40,)
(41,dataLen)
(42,printLine("fgetws()
(43,(int)
(44,dataBuffer)
(45,100-dataLen > 1)
(46,args)
(47,100)
(48,RET)
(49,1)
(50,)
(51,COMMAND_ARG2)
(52,args)
(53,globalReturnsTrue()
(54,100-dataLen)
(55,data)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^