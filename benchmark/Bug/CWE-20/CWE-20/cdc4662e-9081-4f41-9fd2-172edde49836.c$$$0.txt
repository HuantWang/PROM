-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, wcslen(data)*sizeof(wchar_t));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,93,94,99,101,102,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
85,86
85,87
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memmove(dest, data, wcslen(data)*sizeof(wchar_t));
memmove(dest, data, wcslen(data)*sizeof(wchar_t))
memmove
memmove
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(32,13,0)
(31,33,0)
(18,8,0)
(0,37,0)
(19,36,0)
(24,25,0)
(35,22,0)
(21,36,0)
(2,21,0)
(31,39,0)
(20,6,0)
(33,21,0)
(1,3,0)
(25,21,0)
(39,21,0)
(22,35,0)
(12,9,0)
(7,33,0)
(21,35,0)
(15,39,0)
(33,31,0)
(3,36,0)
(4,20,0)
(6,35,0)
(9,20,0)
(5,16,0)
(25,3,0)
(34,36,0)
(26,36,0)
(8,21,0)
(17,37,0)
(39,3,0)
(16,31,0)
(28,39,0)
(38,3,0)
(31,16,0)
(35,6,0)
(10,11,0)
(35,21,0)
(23,13,0)
(20,9,0)
(23,27,0)
(8,3,0)
(6,20,0)
(39,31,0)
(13,23,0)
(37,21,0)
(9,12,1)
(32,37,1)
(14,25,1)
(37,21,1)
(1,10,1)
(0,17,1)
(17,21,1)
(6,20,1)
(35,22,1)
(20,9,1)
(8,21,1)
(5,33,1)
(8,18,1)
(23,13,1)
(4,2,1)
(31,16,1)
(15,28,1)
(18,38,1)
(33,21,1)
(29,23,1)
(29,37,1)
(39,31,1)
(31,33,1)
(28,1,1)
(35,6,1)
(12,4,1)
(7,15,1)
(25,24,1)
(38,39,1)
(10,29,1)
(39,21,1)
(37,0,1)
(16,5,1)
(21,35,1)
(1,29,1)
(25,21,1)
(24,8,1)
(13,32,1)
(33,7,1)
(6,20,2)
(23,13,2)
(8,21,2)
(10,29,2)
(23,37,2)
(20,9,2)
(39,21,2)
(35,6,2)
(31,16,2)
(13,37,2)
(32,37,2)
(39,31,2)
(31,33,2)
(37,21,2)
(35,22,2)
(33,21,2)
(25,21,2)
(21,35,2)
-----------------------------------
(0,NULL)
(1,"")
(2,data)
(3,)
(4,100)
(5,wchar_t)
(6,malloc(100*sizeof(wchar_t)
(7,data)
(8,printWLine(data)
(9,sizeof(wchar_t)
(10,\\'\\\\0\\')
(11,)
(12,wchar_t)
(13,-1)
(14,RET)
(15,data)
(16,sizeof(wchar_t)
(17,data)
(18,data)
(19,if(staticReturnsTrue()
(20,100*sizeof(wchar_t)
(21,data = (wchar_t *)
(22,wchar_t *)
(23,exit(-1)
(24,data)
(25,free(data)
(26,if (data == NULL)
(27,)
(28,dest)
(29,staticReturnsTrue()
(30,\\\'\\\\0\\\')
(31,wcslen(data)
(32,1)
(33,wcslen(data)
(34,data)
(35,(wchar_t *)
(36,)
(37,data == NULL)
(38,\\\'\\\\0\\\')
(39,memmove(dest, data, wcslen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^