-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
76,77
77,78
79,80
80,81
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
96,98
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,70,71,74,75,78,84,86,89,91,95,98,99,103,105
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
68,69
68,70
72,73
72,74
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(7,21,0)
(8,28,0)
(12,8,0)
(39,17,0)
(4,16,0)
(7,44,0)
(16,50,0)
(44,0,0)
(8,42,0)
(3,42,0)
(1,37,0)
(20,21,0)
(48,6,0)
(13,28,0)
(4,23,0)
(8,44,0)
(30,16,0)
(16,4,0)
(14,17,0)
(27,37,0)
(18,38,0)
(49,3,0)
(27,6,0)
(10,28,0)
(43,30,0)
(17,28,0)
(19,45,0)
(2,23,0)
(50,16,0)
(42,45,0)
(7,28,0)
(24,37,0)
(25,8,0)
(35,37,0)
(16,30,0)
(36,28,0)
(40,42,0)
(6,42,0)
(34,38,0)
(29,6,0)
(18,31,0)
(22,36,0)
(47,4,0)
(44,7,0)
(38,18,0)
(6,27,0)
(32,45,0)
(37,45,0)
(3,37,0)
(6,4,0)
(46,7,0)
(8,4,0)
(9,15,0)
(26,7,0)
(15,4,0)
(41,15,0)
(21,37,0)
(33,42,0)
(3,4,0)
(7,21,1)
(20,18,1)
(47,5,1)
(3,42,1)
(49,27,1)
(11,3,1)
(48,17,1)
(43,47,1)
(13,10,1)
(38,34,1)
(8,42,1)
(17,39,1)
(10,21,1)
(16,50,1)
(18,38,1)
(6,29,1)
(30,43,1)
(36,22,1)
(25,17,1)
(21,20,1)
(27,6,1)
(28,13,1)
(20,5,1)
(34,15,1)
(3,49,1)
(6,4,1)
(36,28,1)
(7,26,1)
(39,14,1)
(12,25,1)
(16,30,1)
(20,15,1)
(8,28,1)
(7,28,1)
(8,12,1)
(15,41,1)
(14,28,1)
(44,7,1)
(26,46,1)
(14,36,1)
(33,40,1)
(9,4,1)
(15,4,1)
(29,48,1)
(8,4,1)
(6,42,1)
(4,16,1)
(41,9,1)
(42,33,1)
(17,28,1)
(46,8,1)
(3,4,1)
(5,42,1)
(22,44,1)
(46,17,2)
(22,17,2)
(7,28,2)
(8,28,2)
(12,17,2)
(18,38,2)
(8,17,2)
(6,42,2)
(30,5,2)
(14,17,2)
(34,15,2)
(16,50,2)
(44,7,2)
(8,42,2)
(15,4,2)
(3,42,2)
(26,17,2)
(8,4,2)
(7,17,2)
(16,5,2)
(43,5,2)
(3,4,2)
(17,28,2)
(25,17,2)
(4,16,2)
(41,5,2)
(18,15,2)
(38,15,2)
(6,4,2)
(4,5,2)
(7,21,2)
(16,30,2)
(39,17,2)
(47,5,2)
(27,6,2)
(17,17,2)
(36,17,2)
(36,28,2)
(44,17,2)
(9,5,2)
(15,5,2)
-----------------------------------
(0,)
(1,source)
(2,if (data == NULL)
(3,free(data)
(4,data = (int *)
(5,staticReturnsTrue()
(6,data[0])
(7,source[i])
(8,data[i])
(9,data)
(10,i)
(11,RET)
(12,i)
(13,0)
(14,i)
(15,data == NULL)
(16,(int *)
(17,i < 10)
(18,exit(-1)
(19,if(staticReturnsTrue()
(20,source)
(21,source[10] = {0})
(22,i)
(23,)
(24,for (i = 0; i < 10; i++)
(25,data)
(26,i)
(27,printIntLine(data[0])
(28,i = 0)
(29,0)
(30,malloc(10)
(31,)
(32,data)
(33,NULL)
(34,1)
(35,i)
(36,i++)
(37,)
(38,-1)
(39,10)
(40,data)
(41,NULL)
(42,data = NULL)
(43,10)
(44,data[i] = source[i])
(45,)
(46,source)
(47,data)
(48,data)
(49,data)
(50,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^