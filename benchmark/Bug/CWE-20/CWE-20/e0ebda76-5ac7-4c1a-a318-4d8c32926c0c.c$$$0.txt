-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,80,82,83,86,87,91,93,97,99
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
75,76
75,77
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,9,0)
(23,21,0)
(27,44,0)
(17,13,0)
(19,36,0)
(39,13,0)
(16,41,0)
(32,21,0)
(1,6,0)
(42,9,0)
(0,3,0)
(36,33,0)
(22,36,0)
(29,11,0)
(19,15,0)
(18,9,0)
(12,1,0)
(26,7,0)
(22,13,0)
(25,46,0)
(26,2,0)
(29,0,0)
(38,22,0)
(29,42,0)
(37,16,0)
(6,41,0)
(9,36,0)
(21,15,0)
(7,26,0)
(5,42,0)
(15,44,0)
(45,41,0)
(15,1,0)
(41,16,0)
(8,0,0)
(42,29,0)
(13,33,0)
(28,15,0)
(1,15,0)
(42,13,0)
(43,11,0)
(22,15,0)
(30,42,0)
(1,12,0)
(3,0,0)
(10,7,0)
(11,29,0)
(4,46,0)
(20,33,0)
(14,3,0)
(3,9,0)
(42,15,0)
(19,13,0)
(0,29,0)
(42,36,0)
(40,36,0)
(24,19,0)
(41,6,0)
(6,1,0)
(34,33,0)
(11,43,1)
(7,10,1)
(45,28,1)
(17,39,1)
(16,37,1)
(3,14,1)
(14,30,1)
(31,26,1)
(31,21,1)
(21,15,1)
(30,5,1)
(10,21,1)
(42,13,1)
(26,7,1)
(13,17,1)
(23,32,1)
(9,18,1)
(31,46,1)
(4,13,1)
(38,42,1)
(18,31,1)
(22,15,1)
(28,46,1)
(25,4,1)
(8,3,1)
(19,13,1)
(1,12,1)
(42,9,1)
(21,23,1)
(0,3,1)
(42,15,1)
(6,41,1)
(5,9,1)
(22,38,1)
(35,19,1)
(19,15,1)
(46,25,1)
(43,0,1)
(42,29,1)
(0,8,1)
(1,6,1)
(29,11,1)
(19,24,1)
(29,0,1)
(41,16,1)
(32,15,1)
(15,1,1)
(3,9,1)
(37,45,1)
(22,13,1)
(24,22,1)
(37,46,2)
(28,46,2)
(41,16,2)
(6,41,2)
(32,46,2)
(10,21,2)
(21,15,2)
(0,3,2)
(16,46,2)
(1,12,2)
(41,46,2)
(1,46,2)
(42,13,2)
(23,46,2)
(45,46,2)
(22,13,2)
(42,29,2)
(6,46,2)
(7,21,2)
(15,46,2)
(21,46,2)
(15,1,2)
(22,15,2)
(42,15,2)
(26,7,2)
(1,6,2)
(29,0,2)
(26,21,2)
(42,9,2)
(19,15,2)
(19,13,2)
(3,9,2)
(29,11,2)
-----------------------------------
(0,wcslen(source)
(1,(wchar_t *)
(2,)
(3,wcslen(source)
(4,5)
(5,data)
(6,malloc(10*sizeof(wchar_t)
(7,-1)
(8,1)
(9,source[10+1] = SRC_STRING)
(10,1)
(11,sizeof(wchar_t)
(12,wchar_t *)
(13,data = NULL)
(14,source)
(15,data = (wchar_t *)
(16,sizeof(wchar_t)
(17,NULL)
(18,SRC_STRING)
(19,free(data)
(20,data)
(21,data == NULL)
(22,printWLine(data)
(23,NULL)
(24,data)
(25,5)
(26,exit(-1)
(27,if (data == NULL)
(28,data)
(29,(wcslen(source)
(30,source)
(31,source)
(32,data)
(33,)
(34,if(5==5)
(35,RET)
(36,)
(37,wchar_t)
(38,data)
(39,data)
(40,source)
(41,10*sizeof(wchar_t)
(42,memcpy(data, source, (wcslen(source)
(43,wchar_t)
(44,)
(45,10)
(46,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^