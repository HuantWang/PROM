-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    wmemset(data, L'A', 100-1); /* fill with L'A's */
    data[100-1] = L'\0'; /* null terminate */
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        {
            wchar_t dest[50] = L"";
            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
            wcscat(dest, data);
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
81,82
81,83
81,84
81,85
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,68,71,74,76,77,80,84,86,88,90,94,96,98,102,104,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/            wcscat(dest, data);            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/            wcscat(dest, data);            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/            wcscat(dest, data);            printWLine(data);            free(data);        }    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/            wcscat(dest, data);            printWLine(data);            free(data);        }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcscat(dest, data);
wcscat(dest, data)
wcscat
wcscat
dest
dest
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,7,0)
(16,18,0)
(15,37,0)
(11,8,0)
(14,23,0)
(7,35,0)
(4,29,0)
(7,0,0)
(12,30,0)
(13,25,0)
(25,26,0)
(35,7,0)
(11,26,0)
(7,8,0)
(31,29,0)
(2,34,0)
(8,23,0)
(35,12,0)
(28,30,0)
(12,35,0)
(20,26,0)
(38,23,0)
(19,37,0)
(4,25,0)
(8,7,0)
(1,23,0)
(36,29,0)
(9,29,0)
(37,15,0)
(3,4,0)
(34,25,0)
(26,23,0)
(6,26,0)
(32,11,0)
(34,29,0)
(31,25,0)
(30,12,0)
(27,12,0)
(18,8,0)
(33,11,0)
(24,4,0)
(29,26,0)
(15,22,0)
(29,11,0)
(17,31,0)
(10,8,0)
(21,18,0)
(29,11,1)
(9,36,1)
(2,31,1)
(18,8,1)
(4,24,1)
(18,21,1)
(19,18,1)
(11,32,1)
(12,30,1)
(13,29,1)
(35,12,1)
(34,2,1)
(30,28,1)
(16,8,1)
(5,34,1)
(8,7,1)
(31,29,1)
(37,19,1)
(32,33,1)
(29,9,1)
(24,3,1)
(11,8,1)
(1,15,1)
(3,13,1)
(21,16,1)
(33,1,1)
(7,0,1)
(17,4,1)
(27,10,1)
(15,37,1)
(1,18,1)
(34,29,1)
(28,27,1)
(36,11,1)
(31,17,1)
(7,35,1)
(4,29,1)
(4,29,2)
(29,11,2)
(35,12,2)
(7,35,2)
(12,30,2)
(8,7,2)
(31,29,2)
(11,8,2)
(37,18,2)
(19,18,2)
(18,8,2)
(7,0,2)
(34,29,2)
(15,18,2)
(15,37,2)
-----------------------------------
(0,wchar_t *)
(1,\\\'\\\\0\\\')
(2,data)
(3,dest)
(4,wcscat(dest, data)
(5,RET)
(6,data)
(7,(wchar_t *)
(8,data = (wchar_t *)
(9,dataCopy)
(10,data)
(11,* dataCopy = data)
(12,100*sizeof(wchar_t)
(13,"")
(14,if (data == NULL)
(15,exit(-1)
(16,data)
(17,data)
(18,data == NULL)
(19,1)
(20,dataCopy)
(21,NULL)
(22,)
(23,)
(24,data)
(25,)
(26,)
(27,100)
(28,wchar_t)
(29,* data = dataCopy)
(30,sizeof(wchar_t)
(31,printWLine(data)
(32,data)
(33,dataCopy)
(34,free(data)
(35,malloc(100*sizeof(wchar_t)
(36,data)
(37,-1)
(38,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^