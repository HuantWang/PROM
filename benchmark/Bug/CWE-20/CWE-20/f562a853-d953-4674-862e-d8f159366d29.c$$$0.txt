-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_05_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(staticTrue)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,61,62,67,69,70,71,75,77,80,85,87
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
64,65
64,66
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_05_bad(){    char * data;    /* Initialize data */    data = NULL;    if(staticTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_05_bad()
CWE416_Use_After_Free__malloc_free_char_05_bad
{    char * data;    /* Initialize data */    data = NULL;    if(staticTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
staticTrue
staticTrue
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(0,18,0)
(32,23,0)
(21,16,0)
(42,37,0)
(19,22,0)
(30,21,0)
(46,22,0)
(7,23,0)
(18,43,0)
(33,16,0)
(8,19,0)
(47,5,0)
(49,36,0)
(28,36,0)
(34,21,0)
(29,18,0)
(33,23,0)
(38,16,0)
(36,12,0)
(31,43,0)
(39,29,0)
(22,46,0)
(3,48,0)
(16,43,0)
(48,3,0)
(44,28,0)
(6,2,0)
(10,28,0)
(33,15,0)
(18,16,0)
(22,19,0)
(4,29,0)
(46,3,0)
(36,16,0)
(24,5,0)
(3,16,0)
(14,33,0)
(12,43,0)
(9,5,0)
(36,28,0)
(2,6,0)
(1,18,0)
(3,46,0)
(16,3,0)
(37,16,0)
(37,43,0)
(23,5,0)
(41,12,0)
(2,40,0)
(17,6,0)
(18,29,0)
(11,22,0)
(18,16,1)
(46,22,1)
(37,42,1)
(21,30,1)
(11,38,1)
(33,14,1)
(37,16,1)
(18,29,1)
(32,7,1)
(19,8,1)
(35,33,1)
(36,28,1)
(34,16,1)
(10,49,1)
(29,39,1)
(6,17,1)
(4,1,1)
(25,37,1)
(27,23,1)
(44,10,1)
(39,4,1)
(35,25,1)
(30,34,1)
(2,6,1)
(16,3,1)
(28,44,1)
(38,27,1)
(8,11,1)
(33,16,1)
(25,27,1)
(33,23,1)
(21,16,1)
(36,16,1)
(22,19,1)
(3,48,1)
(0,21,1)
(12,41,1)
(1,0,1)
(17,21,1)
(3,46,1)
(49,18,1)
(42,12,1)
(23,32,1)
(41,36,1)
(14,25,1)
(0,2,1)
(36,16,2)
(36,27,2)
(41,27,2)
(22,19,2)
(34,27,2)
(16,27,2)
(11,27,2)
(12,27,2)
(22,27,2)
(2,21,2)
(28,27,2)
(0,27,2)
(49,27,2)
(46,27,2)
(6,21,2)
(19,27,2)
(44,27,2)
(1,27,2)
(3,48,2)
(3,46,2)
(4,27,2)
(37,27,2)
(18,16,2)
(14,25,2)
(21,27,2)
(30,27,2)
(10,27,2)
(3,27,2)
(46,22,2)
(33,16,2)
(33,23,2)
(33,25,2)
(21,16,2)
(38,27,2)
(36,28,2)
(17,21,2)
(16,3,2)
(18,29,2)
(8,27,2)
(39,27,2)
(2,6,2)
(18,27,2)
(29,27,2)
(42,27,2)
(37,16,2)
-----------------------------------
(0,data)
(1,\'A\')
(2,exit(-1)
(3,(char *)
(4,100)
(5,)
(6,-1)
(7,data)
(8,char)
(9,if(staticTrue)
(10,100)
(11,100)
(12,data[100-1] = '\\\\0')
(13,data[100-1] = \'\\\\0\')
(14,data)
(15,)
(16,data = (char *)
(17,1)
(18,memset(data, \'A\', 100-1)
(19,sizeof(char)
(20,'A')
(21,data == NULL)
(22,100*sizeof(char)
(23,data = NULL)
(24,if(staticTrue)
(25,staticTrue)
(26,memset(data, 'A', 100-1)
(27,staticTrue)
(28,100-1)
(29,100-1)
(30,NULL)
(31,if (data == NULL)
(32,NULL)
(33,printLine(data)
(34,data)
(35,RET)
(36,data[100-1])
(37,free(data)
(38,data)
(39,1)
(40,)
(41,\'\\\\0\')
(42,data)
(43,)
(44,1)
(45,'\\\\0')
(46,malloc(100*sizeof(char)
(47,data)
(48,char *)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^