-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,51,0)
(39,1,0)
(29,51,0)
(2,8,0)
(52,42,0)
(57,54,0)
(14,46,0)
(11,27,0)
(15,37,0)
(63,27,0)
(57,19,0)
(66,1,0)
(34,51,0)
(20,8,0)
(8,2,0)
(45,34,0)
(64,24,0)
(48,31,0)
(61,44,0)
(17,43,0)
(46,31,0)
(2,31,0)
(9,54,0)
(10,0,0)
(34,15,0)
(57,42,0)
(46,51,0)
(12,59,0)
(65,54,0)
(2,54,0)
(40,62,0)
(28,31,0)
(50,55,0)
(48,54,0)
(44,58,0)
(6,60,0)
(47,31,0)
(16,15,0)
(48,51,0)
(17,3,0)
(56,59,0)
(1,39,0)
(0,31,0)
(21,48,0)
(57,51,0)
(5,44,0)
(8,24,0)
(54,59,0)
(62,39,0)
(18,37,0)
(58,0,0)
(23,28,0)
(26,3,0)
(58,44,0)
(53,2,0)
(46,54,0)
(3,17,0)
(62,60,0)
(28,27,0)
(38,2,0)
(2,51,0)
(4,58,0)
(60,62,0)
(19,57,0)
(13,57,0)
(7,28,0)
(24,8,0)
(51,37,0)
(30,55,0)
(25,34,0)
(22,19,0)
(1,66,0)
(39,62,0)
(55,51,0)
(31,59,0)
(36,19,0)
(42,31,0)
(27,28,0)
(51,1,0)
(57,19,1)
(9,65,1)
(49,48,1)
(11,63,1)
(25,45,1)
(3,26,1)
(20,53,1)
(61,4,1)
(60,6,1)
(21,46,1)
(7,35,1)
(63,23,1)
(46,51,1)
(34,25,1)
(26,55,1)
(2,8,1)
(13,2,1)
(46,54,1)
(42,52,1)
(48,21,1)
(54,9,1)
(55,51,1)
(52,57,1)
(5,61,1)
(38,0,1)
(27,11,1)
(4,28,1)
(1,39,1)
(45,17,1)
(48,51,1)
(53,38,1)
(34,51,1)
(22,13,1)
(51,1,1)
(30,50,1)
(58,44,1)
(29,35,1)
(2,51,1)
(23,7,1)
(44,5,1)
(0,10,1)
(55,30,1)
(57,54,1)
(2,54,1)
(35,54,1)
(28,27,1)
(16,34,1)
(1,66,1)
(48,54,1)
(17,3,1)
(50,51,1)
(39,62,1)
(57,51,1)
(46,14,1)
(64,20,1)
(10,58,1)
(6,40,1)
(19,36,1)
(24,64,1)
(7,15,1)
(15,16,1)
(45,55,1)
(40,29,1)
(36,22,1)
(14,42,1)
(62,60,1)
(8,24,1)
(8,24,2)
(1,66,2)
(39,62,2)
(51,1,2)
(25,35,2)
(57,51,2)
(29,35,2)
(28,27,2)
(55,35,2)
(34,35,2)
(1,39,2)
(62,60,2)
(62,35,2)
(48,54,2)
(26,55,2)
(48,51,2)
(34,51,2)
(45,35,2)
(46,51,2)
(40,35,2)
(46,54,2)
(55,51,2)
(39,35,2)
(50,35,2)
(17,55,2)
(3,55,2)
(2,54,2)
(30,35,2)
(6,35,2)
(60,35,2)
(2,51,2)
(58,44,2)
(1,35,2)
(17,3,2)
(16,35,2)
(15,35,2)
(2,8,2)
(57,54,2)
(51,35,2)
(57,19,2)
-----------------------------------
(0,source[100-1] = '\\\\0')
(1,(char *)
(2,memmove(data, source, 100*sizeof(char)
(3,-1)
(4,source)
(5,1)
(6,char)
(7,source)
(8,100*sizeof(char)
(9,NULL)
(10,'\\\\0')
(11,1)
(12,if(STATIC_CONST_TRUE)
(13,data)
(14,data)
(15,data[0] = '\\\\0')
(16,'\\\\0')
(17,exit(-1)
(18,if (data == NULL)
(19,100-1)
(20,100)
(21,data)
(22,100)
(23,'C')
(24,sizeof(char)
(25,0)
(26,1)
(27,100-1)
(28,memset(source, \'C\', 100-1)
(29,data)
(30,NULL)
(31,)
(32,\'\\\\0\')
(33,data[0] = \'\\\\0\')
(34,data[0])
(35,STATIC_CONST_TRUE)
(36,1)
(37,)
(38,data)
(39,malloc(50*sizeof(char)
(40,50)
(41,memset(source, 'C', 100-1)
(42,data[100-1] = '\\\\0')
(43,)
(44,100-1)
(45,data)
(46,printLine(data)
(47,source)
(48,free(data)
(49,RET)
(50,data)
(51,data = (char *)
(52,'\\\\0')
(53,source)
(54,data = NULL)
(55,data == NULL)
(56,data)
(57,data[100-1])
(58,source[100-1])
(59,)
(60,sizeof(char)
(61,100)
(62,50*sizeof(char)
(63,100)
(64,char)
(65,data)
(66,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^