-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_15_bad()
{
    wchar_t * data;
    wchar_t dataBadBuffer[50];
    wchar_t dataGoodBuffer[100];
    switch(6)
    {
    case 6:
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
28,29
28,30
28,31
28,32
28,33
28,34
28,35
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
39,41
40,41
46,47
47,48
47,49
48,49
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
56,57
56,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
67,68
67,69
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
79,80
80,81
80,82
80,83
80,84
80,85
81,82
83,84
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,14,16,18,21,23,25,27,30,34,36,41,42,43,44,45,49,50,51,55,57,59,63,65,66,68,69,74,76,77,78,82,84,85,86,88,92,94
-----computeFrom-----
32,33
32,34
38,39
38,40
67,68
67,69
71,72
71,73
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_15_bad(){    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_15_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_15_bad
{    wchar_t * data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBadBuffer[50];
wchar_t dataBadBuffer[50];
wchar_t
dataBadBuffer[50]
dataBadBuffer
[50]
50
wchar_t dataGoodBuffer[100];
wchar_t dataGoodBuffer[100];
wchar_t
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
switch(6)    {    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(10,7,0)
(2,7,0)
(6,7,0)
(18,13,0)
(3,16,0)
(8,13,0)
(21,13,0)
(12,21,0)
(20,7,0)
(16,7,0)
(14,15,0)
(0,7,0)
(9,21,0)
(4,13,0)
(15,16,0)
(15,21,0)
(22,16,0)
(5,7,0)
(19,6,0)
(1,13,0)
(15,16,1)
(3,22,1)
(14,9,1)
(2,5,1)
(6,19,1)
(5,16,1)
(10,6,1)
(9,10,1)
(9,2,1)
(16,3,1)
(17,15,1)
(15,14,1)
(19,11,1)
(22,11,1)
(6,11,2)
(10,11,2)
(3,11,2)
(2,11,2)
(16,11,2)
(5,11,2)
(19,11,2)
(22,11,2)
(15,16,2)
-----------------------------------
(0,default:)
(1,dataGoodBuffer)
(2,break;)
(3,dataBadBuffer)
(4,data)
(5,\\\'\\\\0\\\')
(6,printLine("Benign, fixed string")
(7,)
(8,switch(6)
(9,\\\'\\\\0\\\')
(10,break;)
(11,6)
(12,source)
(13,)
(14,data)
(15,printWLine(data)
(16,data = dataBadBuffer)
(17,RET)
(18,dataBadBuffer)
(19,"Benign, fixed string")
(20,case 6:)
(21,)
(22,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^