-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad()
{
    void * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to point to a wide string */
        data = (void *)WIDE_STRING;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
        size_t dataLen = strlen((char *)data);
        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
        (void)wcscpy(dest, data);
        printLine((char *)dest);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
36,37
37,38
37,39
38,39
42,43
42,44
44,45
44,46
44,47
44,48
44,49
44,50
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
72,74
73,74
73,75
75,76
77,78
77,79
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
90,91
91,92
91,93
92,93
92,94
95,96
95,97
95,98
96,97
98,99
100,101
102,103
103,104
103,105
104,105
106,107
106,108
107,108
107,109
109,110
111,112
115,116
116,117
116,118
117,118
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,33,34,35,39,40,41,43,46,51,53,57,60,62,64,67,69,70,74,76,79,84,85,88,89,93,94,97,99,101,105,108,110,112,113,114,118,119,120
-----computeFrom-----
13,14
13,15
24,25
24,26
80,81
80,82
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad(){    void * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));        (void)wcscpy(dest, data);        printLine((char *)dest);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad
{    void * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));        (void)wcscpy(dest, data);        printLine((char *)dest);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void * data;
void * data;
void
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)WIDE_STRING;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (void *)WIDE_STRING;
data = (void *)WIDE_STRING
data
data
(void *)WIDE_STRING
void *
void
*
*
WIDE_STRING
WIDE_STRING
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));        (void)wcscpy(dest, data);        printLine((char *)dest);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));        (void)wcscpy(dest, data);        printLine((char *)dest);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));        (void)wcscpy(dest, data);        printLine((char *)dest);    }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void
* dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
*
dest
= (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
(void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
void *
void
*
*
ALLOCA((dataLen+1) * sizeof(wchar_t))
ALLOCA
ALLOCA
(dataLen+1) * sizeof(wchar_t)
(dataLen+1)
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(44,39,0)
(8,15,0)
(30,39,0)
(31,43,0)
(43,32,0)
(32,23,0)
(51,40,0)
(34,41,0)
(35,39,0)
(49,37,0)
(54,40,0)
(57,49,0)
(2,39,0)
(50,17,0)
(12,23,0)
(1,26,0)
(53,8,0)
(33,39,0)
(7,15,0)
(14,17,0)
(16,26,0)
(10,32,0)
(43,37,0)
(56,49,0)
(4,40,0)
(11,28,0)
(18,33,0)
(37,49,0)
(26,1,0)
(15,9,0)
(20,8,0)
(0,57,0)
(17,14,0)
(15,50,0)
(25,23,0)
(22,50,0)
(24,26,0)
(19,1,0)
(42,51,0)
(13,43,0)
(26,5,0)
(21,57,0)
(48,9,0)
(28,14,0)
(5,39,0)
(3,40,0)
(50,22,0)
(37,43,0)
(8,53,0)
(57,14,0)
(38,41,0)
(52,40,0)
(6,32,0)
(17,50,0)
(41,34,0)
(46,5,0)
(5,41,0)
(26,32,0)
(1,9,0)
(43,31,0)
(8,20,0)
(14,28,0)
(55,23,0)
(29,8,0)
(9,40,0)
(43,5,0)
(49,9,0)
(26,15,0)
(53,9,0)
(14,57,0)
(47,9,0)
(1,19,0)
(41,5,0)
(50,15,0)
(26,5,1)
(8,29,1)
(11,57,1)
(8,20,1)
(15,50,1)
(26,15,1)
(36,32,1)
(50,17,1)
(46,36,1)
(43,5,1)
(49,37,1)
(45,30,1)
(14,28,1)
(43,32,1)
(53,8,1)
(3,51,1)
(26,16,1)
(1,19,1)
(51,42,1)
(30,33,1)
(38,46,1)
(10,6,1)
(52,53,1)
(56,45,1)
(33,18,1)
(27,52,1)
(5,41,1)
(0,7,1)
(41,38,1)
(57,49,1)
(1,26,1)
(50,22,1)
(43,31,1)
(8,15,1)
(24,15,1)
(45,44,1)
(29,1,1)
(17,14,1)
(16,24,1)
(26,32,1)
(27,3,1)
(13,56,1)
(28,11,1)
(32,10,1)
(7,49,1)
(57,21,1)
(14,57,1)
(18,36,1)
(44,5,1)
(42,45,1)
(43,13,1)
(37,43,1)
(21,0,1)
(41,34,1)
(30,36,2)
(24,45,2)
(44,36,2)
(0,45,2)
(14,57,2)
(1,19,2)
(50,17,2)
(14,45,2)
(46,36,2)
(8,20,2)
(37,45,2)
(43,32,2)
(8,15,2)
(28,45,2)
(41,36,2)
(56,45,2)
(57,49,2)
(21,45,2)
(43,31,2)
(33,36,2)
(26,45,2)
(50,22,2)
(41,34,2)
(26,32,2)
(53,8,2)
(51,45,2)
(17,45,2)
(52,45,2)
(37,43,2)
(14,28,2)
(1,26,2)
(15,45,2)
(38,36,2)
(26,15,2)
(16,45,2)
(15,50,2)
(43,5,2)
(13,45,2)
(7,45,2)
(42,45,2)
(5,41,2)
(49,45,2)
(53,45,2)
(5,36,2)
(57,45,2)
(29,45,2)
(43,45,2)
(26,5,2)
(49,37,2)
(17,14,2)
(3,45,2)
(8,45,2)
(50,45,2)
(1,45,2)
(18,36,2)
(11,45,2)
-----------------------------------
(0,dataLen)
(1,(void)
(2,case 6:)
(3,break;)
(4,case 7:)
(5,data = (void *)
(6,data)
(7,dest)
(8,(char *)
(9,)
(10,NULL)
(11,wchar_t)
(12,data)
(13,data)
(14,(dataLen+1)
(15,* dest = (void *)
(16,data)
(17,ALLOCA((dataLen+1)
(18,"Benign, fixed string")
(19,void)
(20,char *)
(21,1)
(22,void *)
(23,)
(24,dest)
(25,switch(6)
(26,wcscpy(dest, data)
(27,RET)
(28,sizeof(wchar_t)
(29,dest)
(30,break;)
(31,char *)
(32,data = NULL)
(33,printLine("Benign, fixed string")
(34,void *)
(35,default:)
(36,6)
(37,strlen((char *)
(38,WIDE_STRING)
(39,)
(40,)
(41,(void *)
(42,"Benign, fixed string")
(43,(char *)
(44,break;)
(45,7)
(46,data)
(47,dataLen)
(48,dest)
(49,dataLen = strlen((char *)
(50,(void *)
(51,printLine("Benign, fixed string")
(52,break;)
(53,printLine((char *)
(54,default:)
(55,switch(7)
(56,dataLen)
(57,dataLen+1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^