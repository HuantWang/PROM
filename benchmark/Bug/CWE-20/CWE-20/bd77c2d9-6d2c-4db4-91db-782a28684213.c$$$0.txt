-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
68,70
70,71
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,67,69,72,73,77,80,81,85,87
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad(){    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad
{    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(4,23,0)
(38,20,0)
(3,1,0)
(38,30,0)
(2,39,0)
(0,13,0)
(35,7,0)
(2,1,0)
(38,17,0)
(31,27,0)
(23,4,0)
(25,12,0)
(16,30,0)
(11,31,0)
(29,38,0)
(22,24,0)
(6,7,0)
(26,0,0)
(1,2,0)
(28,24,0)
(13,20,0)
(33,17,0)
(10,17,0)
(34,20,0)
(30,9,0)
(32,9,0)
(37,0,0)
(35,17,0)
(20,12,0)
(35,4,0)
(7,20,0)
(0,30,0)
(0,17,0)
(24,30,0)
(36,11,0)
(21,23,0)
(35,20,0)
(31,11,0)
(27,31,0)
(18,35,0)
(30,31,0)
(17,12,0)
(13,0,0)
(8,12,0)
(5,35,0)
(35,30,0)
(31,30,0)
(4,35,0)
(14,4,0)
(15,38,1)
(23,21,1)
(38,17,1)
(22,30,1)
(26,35,1)
(14,5,1)
(11,36,1)
(36,16,1)
(0,17,1)
(35,17,1)
(0,30,1)
(19,17,1)
(35,30,1)
(38,29,1)
(18,7,1)
(24,28,1)
(31,27,1)
(5,18,1)
(21,14,1)
(13,0,1)
(1,3,1)
(37,26,1)
(35,4,1)
(31,11,1)
(4,23,1)
(6,2,1)
(35,7,1)
(0,37,1)
(6,24,1)
(30,31,1)
(3,24,1)
(16,19,1)
(38,30,1)
(2,1,1)
(7,6,1)
(29,13,1)
(33,10,1)
(24,30,1)
(6,19,1)
(28,22,1)
(17,33,1)
(36,19,2)
(38,17,2)
(35,7,2)
(4,23,2)
(11,19,2)
(0,30,2)
(0,17,2)
(31,27,2)
(24,30,2)
(24,19,2)
(2,24,2)
(1,24,2)
(13,0,2)
(35,30,2)
(31,19,2)
(35,4,2)
(22,19,2)
(38,30,2)
(2,1,2)
(3,24,2)
(30,31,2)
(28,19,2)
(16,19,2)
(35,17,2)
(30,19,2)
(31,11,2)
-----------------------------------
(0,data[0])
(1,-1)
(2,exit(-1)
(3,1)
(4,10*sizeof(int)
(5,source)
(6,source)
(7,source[10] = {0})
(8,if(globalReturnsTrue()
(9,)
(10,data)
(11,malloc(10)
(12,)
(13,printIntLine(data[0])
(14,10)
(15,RET)
(16,data)
(17,data = NULL)
(18,data)
(19,globalReturnsTrue()
(20,)
(21,int)
(22,data)
(23,sizeof(int)
(24,data == NULL)
(25,data)
(26,data)
(27,int *)
(28,NULL)
(29,data)
(30,data = (int *)
(31,(int *)
(32,if (data == NULL)
(33,NULL)
(34,source)
(35,memcpy(data, source, 10*sizeof(int)
(36,10)
(37,0)
(38,free(data)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^