-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_02_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
72,73
72,74
73,74
75,76
77,78
77,79
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,60,61,66,68,69,70,74,76,78,83,85
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_02_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_02_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_02_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
1
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(17,20,0)
(21,30,0)
(26,3,0)
(30,21,0)
(28,31,0)
(9,32,0)
(3,24,0)
(20,3,0)
(3,26,0)
(19,12,0)
(23,31,0)
(12,14,0)
(34,7,0)
(26,30,0)
(30,26,0)
(8,13,0)
(11,13,0)
(5,21,0)
(7,0,0)
(2,10,0)
(16,34,0)
(1,13,0)
(24,3,0)
(3,20,0)
(20,32,0)
(10,20,0)
(31,20,0)
(12,29,0)
(10,32,0)
(29,13,0)
(12,20,0)
(33,29,0)
(6,29,0)
(4,32,0)
(7,34,0)
(22,30,0)
(10,20,1)
(18,12,1)
(25,29,1)
(4,31,1)
(4,7,1)
(26,30,1)
(12,20,1)
(10,2,1)
(19,15,1)
(34,16,1)
(21,5,1)
(15,10,1)
(3,26,1)
(23,20,1)
(12,29,1)
(18,15,1)
(12,19,1)
(31,28,1)
(29,6,1)
(16,31,1)
(3,24,1)
(31,20,1)
(15,25,1)
(20,3,1)
(30,21,1)
(7,34,1)
(6,33,1)
(17,25,1)
(22,17,1)
(2,4,1)
(28,23,1)
(5,22,1)
(3,25,2)
(19,15,2)
(31,25,2)
(3,24,2)
(20,3,2)
(7,34,2)
(34,31,2)
(7,31,2)
(3,26,2)
(22,25,2)
(21,25,2)
(16,31,2)
(5,25,2)
(10,25,2)
(12,15,2)
(26,30,2)
(2,25,2)
(31,20,2)
(4,25,2)
(28,25,2)
(12,20,2)
(26,25,2)
(12,29,2)
(30,21,2)
(30,25,2)
(17,25,2)
(20,25,2)
(10,20,2)
(23,25,2)
-----------------------------------
(0,)
(1,if(1)
(2,data)
(3,(wchar_t *)
(4,'\\\\0')
(5,wchar_t)
(6,NULL)
(7,exit(-1)
(8,if(1)
(9,if (data == NULL)
(10,free(data)
(11,data)
(12,printWLine(data)
(13,)
(14,)
(15,1)
(16,1)
(17,data)
(18,RET)
(19,data)
(20,data = (wchar_t *)
(21,sizeof(wchar_t)
(22,100)
(23,data)
(24,wchar_t *)
(25,1)
(26,malloc(100*sizeof(wchar_t)
(27,\'\\\\0\')
(28,NULL)
(29,data = NULL)
(30,100*sizeof(wchar_t)
(31,data == NULL)
(32,)
(33,data)
(34,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^