-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_03_bad()
CWE190_Integer_Overflow__int_fscanf_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,11,0)
(7,14,0)
(20,0,0)
(25,1,0)
(21,11,0)
(15,25,0)
(26,12,0)
(17,8,0)
(16,0,0)
(20,23,0)
(1,22,0)
(10,23,0)
(12,8,0)
(9,20,0)
(29,27,0)
(0,18,0)
(8,23,0)
(2,11,0)
(19,27,0)
(8,12,0)
(25,12,0)
(3,1,0)
(5,0,0)
(24,11,0)
(6,14,0)
(13,8,0)
(12,1,0)
(0,20,0)
(28,23,0)
(12,8,1)
(8,23,1)
(20,9,1)
(10,28,1)
(4,25,1)
(27,29,1)
(0,20,1)
(29,19,1)
(25,12,1)
(26,27,1)
(25,15,1)
(9,16,1)
(7,23,1)
(23,10,1)
(5,14,1)
(6,7,1)
(19,0,1)
(13,26,1)
(20,23,1)
(16,5,1)
(17,13,1)
(15,12,1)
(4,27,1)
(19,14,1)
(8,17,1)
(14,6,1)
(9,14,2)
(12,27,2)
(5,14,2)
(0,20,2)
(8,23,2)
(0,14,2)
(17,27,2)
(16,14,2)
(12,8,2)
(15,27,2)
(8,27,2)
(25,12,2)
(20,23,2)
(20,14,2)
(25,27,2)
(13,27,2)
(26,27,2)
-----------------------------------
(0,fscanf(stdin, "%d", &data)
(1,)
(2,data)
(3,result)
(4,RET)
(5,stdin)
(6,5)
(7,5)
(8,data * data)
(9,data)
(10,0)
(11,)
(12,result = data * data)
(13,data)
(14,5==5)
(15,result)
(16,"%d")
(17,data)
(18,)
(19,5)
(20,&data)
(21,if(5==5)
(22,)
(23,data = 0)
(24,if(5==5)
(25,printIntLine(result)
(26,result)
(27,5==5)
(28,data)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^