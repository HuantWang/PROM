-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_52_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_52_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_52_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_52_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink
data
data
-----joern-----
(53,41,0)
(42,34,0)
(46,70,0)
(37,10,0)
(8,60,0)
(18,38,0)
(40,21,0)
(60,55,0)
(70,26,0)
(15,34,0)
(65,7,0)
(21,64,0)
(22,51,0)
(56,4,0)
(29,35,0)
(61,15,0)
(31,18,0)
(57,15,0)
(3,44,0)
(44,3,0)
(54,47,0)
(36,35,0)
(18,7,0)
(35,68,0)
(0,28,0)
(10,38,0)
(56,64,0)
(20,55,0)
(67,68,0)
(9,3,0)
(1,46,0)
(19,41,0)
(4,56,0)
(42,46,0)
(64,21,0)
(35,34,0)
(63,4,0)
(4,66,0)
(23,39,0)
(48,56,0)
(28,38,0)
(33,44,0)
(51,34,0)
(6,38,0)
(30,65,0)
(39,64,0)
(12,42,0)
(68,35,0)
(15,7,0)
(44,23,0)
(26,70,0)
(46,50,0)
(11,50,0)
(50,46,0)
(23,44,0)
(41,64,0)
(66,27,0)
(62,28,0)
(49,39,0)
(7,28,0)
(3,41,0)
(7,38,0)
(45,34,0)
(34,65,0)
(42,7,0)
(52,7,0)
(17,24,0)
(70,51,0)
(46,42,0)
(21,7,0)
(5,42,0)
(41,3,0)
(4,7,0)
(64,47,0)
(13,64,0)
(3,7,0)
(39,23,0)
(70,46,0)
(14,20,0)
(43,51,0)
(58,39,0)
(2,66,0)
(16,56,0)
(51,70,0)
(69,38,0)
(65,34,0)
(32,10,0)
(15,20,0)
(25,7,0)
(34,10,0)
(40,13,1)
(4,56,1)
(11,46,1)
(39,49,1)
(42,34,1)
(15,61,1)
(52,28,1)
(46,42,1)
(63,23,1)
(44,3,1)
(28,0,1)
(8,50,1)
(4,7,1)
(68,67,1)
(36,29,1)
(70,51,1)
(46,70,1)
(67,35,1)
(65,30,1)
(2,4,1)
(64,21,1)
(16,63,1)
(42,7,1)
(70,26,1)
(41,64,1)
(14,15,1)
(34,65,1)
(18,31,1)
(23,44,1)
(31,68,1)
(31,23,1)
(45,7,1)
(48,16,1)
(22,42,1)
(42,12,1)
(31,66,1)
(7,25,1)
(20,14,1)
(43,22,1)
(15,7,1)
(3,7,1)
(21,7,1)
(1,70,1)
(12,5,1)
(19,9,1)
(56,48,1)
(3,41,1)
(66,2,1)
(50,46,1)
(49,58,1)
(46,1,1)
(23,39,1)
(18,7,1)
(65,7,1)
(29,34,1)
(30,45,1)
(56,64,1)
(53,19,1)
(60,8,1)
(5,68,1)
(44,33,1)
(7,28,1)
(58,64,1)
(39,64,1)
(50,11,1)
(57,60,1)
(59,18,1)
(31,20,1)
(51,43,1)
(35,36,1)
(15,34,1)
(33,3,1)
(41,53,1)
(68,35,1)
(9,39,1)
(25,52,1)
(21,40,1)
(51,34,1)
(61,57,1)
(13,50,1)
(35,34,1)
(0,62,1)
(21,7,2)
(34,65,2)
(50,46,2)
(39,64,2)
(5,68,2)
(43,68,2)
(3,41,2)
(15,34,2)
(51,34,2)
(42,68,2)
(56,23,2)
(22,68,2)
(40,50,2)
(66,23,2)
(13,50,2)
(70,68,2)
(51,68,2)
(15,50,2)
(48,23,2)
(70,51,2)
(41,64,2)
(14,50,2)
(44,39,2)
(39,50,2)
(4,23,2)
(23,50,2)
(9,39,2)
(23,39,2)
(56,64,2)
(63,23,2)
(20,50,2)
(70,26,2)
(7,28,2)
(60,50,2)
(19,39,2)
(64,50,2)
(46,68,2)
(64,21,2)
(46,42,2)
(35,34,2)
(33,39,2)
(42,34,2)
(16,23,2)
(61,50,2)
(12,68,2)
(50,68,2)
(68,35,2)
(21,50,2)
(18,7,2)
(11,68,2)
(4,7,2)
(65,7,2)
(44,3,2)
(41,39,2)
(46,70,2)
(2,23,2)
(3,7,2)
(42,7,2)
(49,50,2)
(58,50,2)
(1,68,2)
(15,7,2)
(4,56,2)
(57,50,2)
(53,39,2)
(3,39,2)
(8,50,2)
(23,44,2)
-----------------------------------
(0,COMMAND_ARG2)
(1,stdin)
(2,\\\'\\\\0\\\')
(3,data[dataLen-1])
(4,data[dataLen-1])
(5,data)
(6,dataBuffer)
(7,data = dataBuffer)
(8,"fgets()
(9,data)
(10,)
(11,NULL)
(12,dataLen)
(13,dataLen)
(14,\\\'\\\\0\\\')
(15,data[dataLen])
(16,dataLen)
(17,if (fgets(data+dataLen, (int)
(18,CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data)
(19,dataLen)
(20,data[dataLen] = \\\'\\\\0\\\')
(21,strlen(data)
(22,100)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,)
(25,dataBuffer)
(26,int)
(27,)
(28,dataBuffer[100] = COMMAND_ARG2)
(29,100)
(30,data)
(31,data)
(32,if (100-dataLen > 1)
(33,\\\'\\\\n\\\')
(34,dataLen = strlen(data)
(35,100-dataLen)
(36,dataLen)
(37,dataLen)
(38,)
(39,dataLen > 0)
(40,data)
(41,dataLen-1)
(42,data+dataLen)
(43,dataLen)
(44,data[dataLen-1] == \\\'\\\\n\\\')
(45,dataLen)
(46,fgets(data+dataLen, (int)
(47,)
(48,1)
(49,0)
(50,fgets(data+dataLen, (int)
(51,100-dataLen)
(52,data)
(53,1)
(54,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,)
(56,dataLen-1)
(57,data)
(58,dataLen)
(59,RET)
(60,printLine("fgets()
(61,dataLen)
(62,dataBuffer)
(63,data)
(64,dataLen = strlen(data)
(65,strlen(data)
(66,data[dataLen-1] = \\\'\\\\0\\\')
(67,1)
(68,100-dataLen > 1)
(69,data)
(70,(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^