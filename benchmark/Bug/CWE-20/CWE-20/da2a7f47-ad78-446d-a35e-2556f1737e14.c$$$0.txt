-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad()
{
    int64_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int64_t));
        printLongLongLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
61,62
61,63
61,64
63,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,64,67,71,73,75,77,81,82,86,89,90,94,96
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad(){    int64_t * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad
{    int64_t * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
staticTrue
staticTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int64_t));
memcpy(data, source, 100*sizeof(int64_t))
memcpy
memcpy
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(41,29,0)
(3,1,0)
(18,30,0)
(26,17,0)
(39,1,0)
(5,1,0)
(32,36,0)
(24,5,0)
(36,7,0)
(30,0,0)
(8,36,0)
(42,33,0)
(15,42,0)
(38,42,0)
(14,0,0)
(6,13,0)
(22,33,0)
(40,30,0)
(18,29,0)
(19,5,0)
(35,30,0)
(42,15,0)
(12,23,0)
(19,29,0)
(9,23,0)
(36,30,0)
(6,18,0)
(33,42,0)
(40,20,0)
(2,29,0)
(13,6,0)
(7,29,0)
(15,40,0)
(18,6,0)
(29,1,0)
(17,26,0)
(16,5,0)
(7,36,0)
(40,15,0)
(21,6,0)
(19,30,0)
(30,40,0)
(18,41,0)
(26,4,0)
(34,19,0)
(11,17,0)
(20,40,0)
(23,30,0)
(27,13,0)
(25,18,0)
(28,18,0)
(10,41,0)
(36,5,0)
(18,5,0)
(35,37,1)
(15,42,1)
(18,41,1)
(31,19,1)
(18,5,1)
(30,40,1)
(19,5,1)
(41,10,1)
(38,35,1)
(36,30,1)
(27,21,1)
(32,8,1)
(24,16,1)
(42,33,1)
(18,30,1)
(21,25,1)
(22,38,1)
(40,20,1)
(10,26,1)
(12,9,1)
(19,30,1)
(10,37,1)
(40,15,1)
(10,23,1)
(23,30,1)
(37,5,1)
(13,27,1)
(33,22,1)
(11,23,1)
(5,24,1)
(26,17,1)
(7,36,1)
(17,11,1)
(25,28,1)
(19,34,1)
(18,6,1)
(8,18,1)
(34,7,1)
(23,12,1)
(9,30,1)
(28,41,1)
(6,13,1)
(36,5,1)
(36,32,1)
(23,37,2)
(35,37,2)
(36,30,2)
(9,37,2)
(18,30,2)
(30,40,2)
(19,30,2)
(22,37,2)
(18,41,2)
(26,17,2)
(40,20,2)
(36,5,2)
(7,36,2)
(18,5,2)
(15,37,2)
(15,42,2)
(33,37,2)
(38,37,2)
(11,23,2)
(18,6,2)
(30,37,2)
(26,23,2)
(12,37,2)
(23,30,2)
(19,5,2)
(40,15,2)
(42,37,2)
(17,23,2)
(6,13,2)
(42,33,2)
(40,37,2)
-----------------------------------
(0,)
(1,)
(2,source)
(3,data)
(4,)
(5,data = NULL)
(6,100*sizeof(int64_t)
(7,printLongLongLine(data[0])
(8,data)
(9,data)
(10,source)
(11,1)
(12,NULL)
(13,sizeof(int64_t)
(14,if (data == NULL)
(15,malloc(50*sizeof(int64_t)
(16,data)
(17,-1)
(18,memcpy(data, source, 100*sizeof(int64_t)
(19,free(data)
(20,int64_t *)
(21,100)
(22,int64_t)
(23,data == NULL)
(24,NULL)
(25,source)
(26,exit(-1)
(27,int64_t)
(28,data)
(29,)
(30,data = (int64_t *)
(31,RET)
(32,0)
(33,sizeof(int64_t)
(34,data)
(35,data)
(36,data[0])
(37,staticTrue)
(38,50)
(39,if(staticTrue)
(40,(int64_t *)
(41,source[100] = {0})
(42,50*sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^