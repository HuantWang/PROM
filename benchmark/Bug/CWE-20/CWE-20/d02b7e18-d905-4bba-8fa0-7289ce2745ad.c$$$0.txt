-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(65,71,0)
(57,4,0)
(2,53,0)
(52,62,0)
(55,45,0)
(7,61,0)
(13,53,0)
(18,42,0)
(61,71,0)
(55,60,0)
(10,61,0)
(49,39,0)
(5,55,0)
(45,71,0)
(21,57,0)
(39,49,0)
(60,13,0)
(13,51,0)
(64,62,0)
(17,45,0)
(68,54,0)
(41,71,0)
(51,4,0)
(37,4,0)
(6,4,0)
(60,28,0)
(70,6,0)
(0,59,0)
(66,59,0)
(7,45,0)
(56,62,0)
(49,30,0)
(38,2,0)
(33,24,0)
(32,17,0)
(59,45,0)
(13,60,0)
(36,71,0)
(32,68,0)
(17,71,0)
(20,27,0)
(34,14,0)
(6,24,0)
(9,55,0)
(8,41,0)
(7,4,0)
(3,53,0)
(57,14,0)
(1,27,0)
(55,24,0)
(67,7,0)
(48,51,0)
(22,13,0)
(43,57,0)
(31,42,0)
(45,34,0)
(51,13,0)
(58,62,0)
(34,45,0)
(46,3,0)
(4,71,0)
(44,68,0)
(16,35,0)
(27,51,0)
(47,24,0)
(40,17,0)
(50,52,0)
(19,2,0)
(51,27,0)
(3,4,0)
(14,57,0)
(25,6,0)
(27,24,0)
(11,7,0)
(12,52,0)
(63,39,0)
(35,24,0)
(42,62,0)
(23,62,0)
(14,34,0)
(34,15,0)
(41,45,0)
(15,34,0)
(4,3,0)
(29,45,0)
(4,3,1)
(38,42,1)
(24,33,1)
(40,41,1)
(33,47,1)
(55,5,1)
(9,6,1)
(35,24,1)
(3,46,1)
(8,61,1)
(59,66,1)
(17,40,1)
(17,45,1)
(45,34,1)
(44,2,1)
(41,8,1)
(7,4,1)
(6,4,1)
(11,67,1)
(46,37,1)
(60,13,1)
(6,70,1)
(7,11,1)
(32,17,1)
(31,52,1)
(68,44,1)
(6,24,1)
(55,45,1)
(61,10,1)
(37,2,1)
(16,60,1)
(41,45,1)
(2,53,1)
(7,45,1)
(25,35,1)
(63,59,1)
(59,45,1)
(70,25,1)
(2,19,1)
(18,31,1)
(10,7,1)
(27,24,1)
(52,50,1)
(48,22,1)
(51,4,1)
(0,45,1)
(49,39,1)
(22,55,1)
(47,49,1)
(13,51,1)
(19,38,1)
(20,48,1)
(14,57,1)
(34,14,1)
(21,43,1)
(66,0,1)
(42,18,1)
(39,63,1)
(35,16,1)
(47,59,1)
(57,4,1)
(1,20,1)
(43,29,1)
(51,27,1)
(34,15,1)
(29,4,1)
(50,12,1)
(3,53,1)
(57,21,1)
(25,24,1)
(67,6,1)
(32,68,1)
(13,53,1)
(55,24,1)
(27,1,1)
(5,9,1)
(55,24,2)
(44,2,2)
(6,2,2)
(49,59,2)
(7,4,2)
(17,2,2)
(4,3,2)
(22,6,2)
(25,6,2)
(46,2,2)
(48,6,2)
(27,6,2)
(16,6,2)
(55,45,2)
(32,17,2)
(7,2,2)
(6,24,2)
(6,4,2)
(59,45,2)
(3,2,2)
(11,2,2)
(21,2,2)
(34,2,2)
(63,59,2)
(34,14,2)
(14,57,2)
(68,2,2)
(47,2,2)
(37,2,2)
(14,2,2)
(70,2,2)
(32,68,2)
(57,4,2)
(66,2,2)
(51,27,2)
(43,2,2)
(70,6,2)
(6,6,2)
(4,2,2)
(51,6,2)
(51,4,2)
(49,39,2)
(29,2,2)
(8,2,2)
(61,2,2)
(17,45,2)
(13,51,2)
(60,13,2)
(20,6,2)
(41,45,2)
(24,2,2)
(41,2,2)
(40,2,2)
(67,2,2)
(33,2,2)
(34,15,2)
(39,59,2)
(2,53,2)
(35,6,2)
(27,24,2)
(59,2,2)
(10,2,2)
(55,6,2)
(13,53,2)
(57,2,2)
(45,2,2)
(5,6,2)
(13,6,2)
(25,2,2)
(3,53,2)
(35,24,2)
(1,6,2)
(7,45,2)
(60,6,2)
(0,2,2)
(9,6,2)
(45,34,2)
-----------------------------------
(0,reversedString)
(1,1)
(2,aString != NULL)
(3,strlen(aString)
(4,i = strlen(aString)
(5,j)
(6,j < i)
(7,reversedString[i])
(8,reversedString)
(9,reversedString)
(10,\'\\\\0\')
(11,i)
(12,i)
(13,aString[i-j-1])
(14,malloc(i+1)
(15,char *)
(16,j)
(17,return reversedString;)
(18,NULL)
(19,NULL)
(20,j)
(21,1)
(22,aString)
(23,j)
(24,j = 0)
(25,j)
(26,'\\\\0')
(27,j-1)
(28,)
(29,reversedString)
(30,)
(31,reversedString)
(32,RET)
(33,0)
(34,(char *)
(35,j++)
(36,if (reversedString == NULL)
(37,i)
(38,aString)
(39,-1)
(40,reversedString)
(41,free(reversedString)
(42,* reversedString = NULL)
(43,i)
(44,NULL)
(45,reversedString = (char *)
(46,aString)
(47,j)
(48,i)
(49,exit(-1)
(50,0)
(51,i-j-1)
(52,i = 0)
(53,char * aString)
(54,)
(55,reversedString[j])
(56,i)
(57,i+1)
(58,reversedString)
(59,reversedString == NULL)
(60,reversedString[j] = aString[i-j-1])
(61,reversedString[i] = \'\\\\0\')
(62,)
(63,1)
(64,if (aString != NULL)
(65,for (j = 0; j < i; j++)
(66,NULL)
(67,reversedString)
(68,return NULL;)
(69,reversedString[i] = '\\\\0')
(70,i)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^