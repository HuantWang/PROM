-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)malloc(10);
    if (data == NULL) {exit(-1);}
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
75,76
76,77
78,79
79,80
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,34,38,40,45,47,51,53,55,58,62,64,69,70,73,74,77,83,85,88,90,94,97,98,102,104
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
67,68
67,69
71,72
71,73
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad(){    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad
{    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);
source
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(31,45,0)
(4,0,0)
(7,10,0)
(18,22,0)
(3,44,0)
(30,17,0)
(21,41,0)
(11,22,0)
(36,13,0)
(12,49,0)
(38,49,0)
(19,5,0)
(37,13,0)
(20,14,0)
(17,47,0)
(0,13,0)
(9,6,0)
(47,10,0)
(23,44,0)
(27,26,0)
(48,21,0)
(10,13,0)
(41,21,0)
(46,45,0)
(45,31,0)
(34,45,0)
(10,47,0)
(24,14,0)
(9,26,0)
(49,10,0)
(33,9,0)
(27,14,0)
(11,10,0)
(31,22,0)
(26,9,0)
(15,6,0)
(40,0,0)
(47,17,0)
(39,11,0)
(26,32,0)
(44,14,0)
(28,13,0)
(27,10,0)
(2,9,0)
(16,27,0)
(47,42,0)
(8,22,0)
(25,22,0)
(5,14,0)
(29,27,0)
(43,13,0)
(42,47,0)
(6,22,0)
(41,35,0)
(22,13,0)
(9,14,0)
(45,10,0)
(47,17,1)
(23,14,1)
(47,42,1)
(44,3,1)
(0,40,1)
(33,2,1)
(12,10,1)
(11,10,1)
(7,28,1)
(27,14,1)
(34,44,1)
(28,0,1)
(9,33,1)
(15,41,1)
(39,31,1)
(6,15,1)
(44,14,1)
(30,7,1)
(27,10,1)
(26,9,1)
(23,5,1)
(38,12,1)
(1,11,1)
(9,6,1)
(9,14,1)
(11,39,1)
(27,29,1)
(49,10,1)
(45,10,1)
(19,26,1)
(21,48,1)
(2,27,1)
(29,16,1)
(48,49,1)
(5,14,1)
(41,21,1)
(45,46,1)
(20,6,1)
(10,47,1)
(40,4,1)
(31,45,1)
(5,19,1)
(15,49,1)
(49,38,1)
(46,34,1)
(24,20,1)
(3,23,1)
(14,24,1)
(16,44,1)
(17,30,1)
(11,10,2)
(49,10,2)
(27,10,2)
(29,44,2)
(21,49,2)
(9,6,2)
(45,10,2)
(9,44,2)
(44,44,2)
(27,14,2)
(23,44,2)
(19,44,2)
(10,47,2)
(31,45,2)
(41,21,2)
(33,44,2)
(47,17,2)
(3,44,2)
(48,49,2)
(26,9,2)
(9,14,2)
(5,44,2)
(41,49,2)
(5,14,2)
(44,14,2)
(16,44,2)
(47,42,2)
(26,44,2)
(2,44,2)
(27,44,2)
-----------------------------------
(0,data = NULL)
(1,RET)
(2,source)
(3,10)
(4,data)
(5,i++)
(6,source[10] = {0})
(7,data)
(8,source)
(9,source[i])
(10,data = (int *)
(11,free(data)
(12,data)
(13,)
(14,i = 0)
(15,source)
(16,data)
(17,malloc(10)
(18,for (i = 0; i < 10; i++)
(19,i)
(20,i)
(21,-1)
(22,)
(23,i)
(24,0)
(25,i)
(26,data[i] = source[i])
(27,data[i])
(28,goto source;)
(29,i)
(30,10)
(31,printIntLine(data[0])
(32,)
(33,i)
(34,data)
(35,)
(36,data)
(37,source:)
(38,NULL)
(39,data)
(40,NULL)
(41,exit(-1)
(42,int *)
(43,if (data == NULL)
(44,i < 10)
(45,data[0])
(46,0)
(47,(int *)
(48,1)
(49,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^