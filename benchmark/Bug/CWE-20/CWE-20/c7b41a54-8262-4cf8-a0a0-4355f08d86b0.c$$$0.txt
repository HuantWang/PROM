-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,52,56,58,61,62,65,69,71,73,77,79,80,84,86,90,92
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
60,61
60,62
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,29,0)
(28,29,0)
(6,23,0)
(27,17,0)
(8,27,0)
(18,26,0)
(32,21,0)
(33,2,0)
(19,26,0)
(26,35,0)
(14,33,0)
(27,26,0)
(13,2,0)
(11,12,0)
(30,21,0)
(3,2,0)
(42,38,0)
(30,33,0)
(3,5,0)
(18,5,0)
(33,14,0)
(27,2,0)
(4,5,0)
(16,6,0)
(33,30,0)
(7,12,0)
(21,30,0)
(12,5,0)
(15,26,0)
(39,35,0)
(36,29,0)
(31,18,0)
(10,3,0)
(1,12,0)
(17,11,0)
(18,2,0)
(27,12,0)
(9,27,0)
(38,21,0)
(37,11,0)
(17,27,0)
(24,2,0)
(11,17,0)
(3,26,0)
(2,33,0)
(22,13,0)
(21,38,0)
(5,35,0)
(34,35,0)
(40,17,0)
(41,16,0)
(0,13,0)
(27,5,0)
(6,16,0)
(24,20,1)
(17,40,1)
(38,42,1)
(27,17,1)
(18,31,1)
(13,2,1)
(22,2,1)
(6,16,1)
(28,13,1)
(2,33,1)
(18,2,1)
(28,6,1)
(9,8,1)
(3,10,1)
(21,38,1)
(3,2,1)
(18,26,1)
(10,27,1)
(1,7,1)
(27,2,1)
(33,14,1)
(11,37,1)
(3,26,1)
(11,12,1)
(7,28,1)
(12,1,1)
(19,15,1)
(40,11,1)
(26,19,1)
(16,41,1)
(27,12,1)
(33,30,1)
(13,0,1)
(41,13,1)
(7,20,1)
(32,24,1)
(37,9,1)
(27,26,1)
(31,3,1)
(17,11,1)
(8,12,1)
(42,32,1)
(0,22,1)
(20,26,1)
(25,18,1)
(30,21,1)
(38,20,2)
(33,20,2)
(16,13,2)
(21,38,2)
(6,16,2)
(24,20,2)
(3,2,2)
(30,21,2)
(27,26,2)
(27,12,2)
(33,14,2)
(2,20,2)
(2,33,2)
(17,11,2)
(11,12,2)
(21,20,2)
(18,2,2)
(0,20,2)
(13,20,2)
(6,13,2)
(3,26,2)
(13,2,2)
(33,30,2)
(30,20,2)
(27,17,2)
(18,26,2)
(27,2,2)
(28,20,2)
(22,20,2)
(42,20,2)
(41,13,2)
(32,20,2)
-----------------------------------
(0,NULL)
(1,SRC_STRING)
(2,data = (wchar_t *)
(3,printWLine(data)
(4,source)
(5,)
(6,exit(-1)
(7,source)
(8,data)
(9,source)
(10,data)
(11,wcslen(source)
(12,source[10+1] = SRC_STRING)
(13,data == NULL)
(14,wchar_t *)
(15,data)
(16,-1)
(17,wcslen(source)
(18,free(data)
(19,NULL)
(20,1)
(21,10*sizeof(wchar_t)
(22,data)
(23,)
(24,data)
(25,RET)
(26,data = NULL)
(27,wcsncpy(data, source, wcslen(source)
(28,break;)
(29,)
(30,malloc(10*sizeof(wchar_t)
(31,data)
(32,10)
(33,(wchar_t *)
(34,data)
(35,)
(36,if (data == NULL)
(37,source)
(38,sizeof(wchar_t)
(39,while(1)
(40,1)
(41,1)
(42,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^