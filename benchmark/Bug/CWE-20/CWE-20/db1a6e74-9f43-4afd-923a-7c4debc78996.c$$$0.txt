-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad()
{
    twoIntsStruct * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
64,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
71,73
71,74
74,75
75,76
75,77
76,77
79,80
79,81
79,82
80,81
81,82
81,83
82,83
84,85
84,86
86,87
88,89
88,90
89,90
90,91
90,92
91,92
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
108,110
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
115,116
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
125,126
129,130
129,131
129,132
129,133
130,131
131,132
131,133
132,133
134,135
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
142,143
142,144
143,144
146,147
147,148
149,150
150,151
151,152
151,153
152,153
152,154
153,154
155,156
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
166,167
167,168
167,169
168,169
171,172
172,173
172,174
173,174
175,176
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,48,50,55,57,62,63,65,70,72,73,77,78,83,85,87,92,94,99,100,103,104,107,114,116,117,118,124,126,127,128,133,135,140,141,144,145,148,154,156,159,161,165,169,170,174,176
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
97,98
97,99
101,102
101,103
110,111
110,112
120,121
120,122
138,139
138,140
142,143
142,144
151,152
151,153
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad(){    twoIntsStruct * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);                free(data);            }        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad
{    twoIntsStruct * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);                free(data);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);                free(data);            }        }    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);                free(data);            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    data[i] = source[i];                }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(3,64,0)
(49,23,0)
(19,89,0)
(23,49,0)
(66,34,0)
(45,26,0)
(28,26,0)
(88,84,0)
(17,43,0)
(16,77,0)
(20,55,0)
(71,12,0)
(25,47,0)
(37,12,0)
(1,47,0)
(88,41,0)
(2,89,0)
(73,72,0)
(53,25,0)
(69,72,0)
(83,17,0)
(5,11,0)
(58,47,0)
(68,55,0)
(75,84,0)
(11,55,0)
(60,76,0)
(23,7,0)
(10,79,0)
(76,4,0)
(84,4,0)
(44,89,0)
(84,88,0)
(48,47,0)
(49,82,0)
(87,24,0)
(79,89,0)
(74,23,0)
(61,64,0)
(0,49,0)
(42,11,0)
(24,47,0)
(5,44,0)
(36,59,0)
(64,3,0)
(34,82,0)
(86,77,0)
(7,78,0)
(70,9,0)
(80,17,0)
(63,25,0)
(59,53,0)
(6,87,0)
(44,5,0)
(79,55,0)
(18,53,0)
(77,24,0)
(3,87,0)
(38,48,0)
(37,56,0)
(15,76,0)
(54,7,0)
(22,45,0)
(32,78,0)
(72,4,0)
(21,48,0)
(52,82,0)
(43,47,0)
(8,4,0)
(57,68,0)
(87,6,0)
(26,45,0)
(76,88,0)
(29,50,0)
(12,37,0)
(43,24,0)
(30,65,0)
(40,47,0)
(45,32,0)
(11,5,0)
(51,34,0)
(14,24,0)
(9,4,0)
(35,26,0)
(76,55,0)
(24,87,0)
(27,82,0)
(46,68,0)
(67,4,0)
(64,65,0)
(13,59,0)
(81,11,0)
(55,68,0)
(33,49,0)
(55,25,0)
(39,32,0)
(26,82,0)
(50,82,0)
(89,53,0)
(87,3,0)
(65,64,0)
(85,43,0)
(62,84,0)
(38,21,1)
(26,28,1)
(7,54,1)
(39,45,1)
(15,72,1)
(17,80,1)
(51,66,1)
(55,68,1)
(35,34,1)
(79,10,1)
(49,82,1)
(9,70,1)
(72,69,1)
(33,0,1)
(73,4,1)
(83,77,1)
(49,33,1)
(8,67,1)
(62,75,1)
(48,38,1)
(72,4,1)
(20,43,1)
(57,46,1)
(60,15,1)
(70,88,1)
(81,42,1)
(23,49,1)
(67,34,1)
(43,85,1)
(73,9,1)
(76,55,1)
(80,83,1)
(0,32,1)
(24,87,1)
(27,52,1)
(54,23,1)
(65,30,1)
(68,57,1)
(37,12,1)
(66,82,1)
(84,62,1)
(77,24,1)
(82,27,1)
(34,51,1)
(16,86,1)
(84,4,1)
(44,5,1)
(45,22,1)
(23,74,1)
(85,17,1)
(30,61,1)
(87,3,1)
(45,26,1)
(87,6,1)
(29,7,1)
(88,84,1)
(28,35,1)
(66,50,1)
(86,24,1)
(32,39,1)
(75,76,1)
(3,64,1)
(9,4,1)
(83,37,1)
(11,81,1)
(31,79,1)
(50,29,1)
(61,14,1)
(46,20,1)
(69,73,1)
(76,4,1)
(4,8,1)
(79,55,1)
(76,60,1)
(71,77,1)
(77,16,1)
(34,82,1)
(42,72,1)
(12,71,1)
(52,55,1)
(26,82,1)
(10,44,1)
(50,82,1)
(5,11,1)
(74,49,1)
(22,26,1)
(14,48,1)
(43,24,1)
(64,65,1)
(11,55,1)
(66,34,2)
(72,72,2)
(26,34,2)
(72,4,2)
(87,3,2)
(50,34,2)
(22,34,2)
(84,4,2)
(0,34,2)
(34,82,2)
(35,34,2)
(84,72,2)
(54,34,2)
(7,34,2)
(77,24,2)
(87,6,2)
(37,77,2)
(71,77,2)
(33,34,2)
(49,34,2)
(15,72,2)
(62,72,2)
(73,72,2)
(45,34,2)
(69,72,2)
(24,87,2)
(26,82,2)
(12,77,2)
(76,72,2)
(5,11,2)
(88,84,2)
(50,82,2)
(29,34,2)
(70,72,2)
(11,55,2)
(76,55,2)
(32,34,2)
(64,65,2)
(79,55,2)
(23,34,2)
(76,4,2)
(88,72,2)
(74,34,2)
(3,64,2)
(28,34,2)
(23,49,2)
(37,12,2)
(51,34,2)
(34,34,2)
(44,5,2)
(39,34,2)
(45,26,2)
(49,82,2)
(9,4,2)
(60,72,2)
(55,68,2)
(75,72,2)
(9,72,2)
(43,24,2)
-----------------------------------
(0,source)
(1,myUnion)
(2,i)
(3,malloc(50*sizeof(twoIntsStruct)
(4,i = 0)
(5,&data[0])
(6,twoIntsStruct *)
(7,source[i].intTwo = 0)
(8,0)
(9,i++)
(10,data)
(11,data[0])
(12,-1)
(13,for (i = 0; i < 100; i++)
(14,data)
(15,data)
(16,NULL)
(17,myUnion.unionFirst)
(18,source)
(19,for (i = 0; i < 100; i++)
(20,data)
(21,data)
(22,intOne)
(23,source[i].intTwo)
(24,data = (twoIntsStruct *)
(25,)
(26,source[i])
(27,0)
(28,i)
(29,i)
(30,twoIntsStruct)
(31,RET)
(32,source[i].intOne = 0)
(33,i)
(34,i < 100)
(35,source)
(36,i)
(37,exit(-1)
(38,NULL)
(39,0)
(40,data)
(41,)
(42,data)
(43,myUnion.unionFirst = data)
(44,printStructLine(&data[0])
(45,source[i].intOne)
(46,myUnion)
(47,)
(48,data = NULL)
(49,source[i])
(50,i++)
(51,100)
(52,i)
(53,)
(54,0)
(55,* data = myUnion.unionSecond)
(56,)
(57,unionSecond)
(58,if (data == NULL)
(59,)
(60,i)
(61,50)
(62,i)
(63,data)
(64,50*sizeof(twoIntsStruct)
(65,sizeof(twoIntsStruct)
(66,i)
(67,i)
(68,myUnion.unionSecond)
(69,100)
(70,i)
(71,1)
(72,i < 100)
(73,i)
(74,intTwo)
(75,source)
(76,data[i])
(77,data == NULL)
(78,)
(79,free(data)
(80,unionFirst)
(81,0)
(82,i = 0)
(83,myUnion)
(84,source[i])
(85,data)
(86,data)
(87,(twoIntsStruct *)
(88,data[i] = source[i])
(89,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^