-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
15,18
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,51,52,53,56
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
return data;
data
data
-----joern-----
(9,10,0)
(10,19,0)
(5,24,0)
(5,17,0)
(21,20,0)
(24,5,0)
(7,0,0)
(6,12,0)
(13,17,0)
(16,10,0)
(2,24,0)
(10,17,0)
(16,22,0)
(25,16,0)
(17,5,0)
(0,22,0)
(1,24,0)
(17,10,0)
(6,15,0)
(3,12,0)
(14,16,0)
(4,0,0)
(0,10,0)
(23,2,0)
(16,20,0)
(24,2,0)
(12,6,0)
(17,13,0)
(11,19,0)
(10,22,0)
(8,19,0)
(10,22,1)
(16,22,1)
(7,10,1)
(6,12,1)
(4,7,1)
(12,3,1)
(14,11,1)
(17,5,1)
(16,10,1)
(1,9,1)
(0,4,1)
(23,1,1)
(9,26,1)
(0,22,1)
(14,26,1)
(11,0,1)
(0,10,1)
(5,24,1)
(2,23,1)
(3,0,1)
(16,14,1)
(17,13,1)
(24,2,1)
(11,6,1)
(25,16,1)
(10,17,1)
(16,22,2)
(0,22,2)
(7,26,2)
(10,17,2)
(5,26,2)
(6,12,2)
(10,22,2)
(0,10,2)
(25,16,2)
(23,26,2)
(17,26,2)
(12,0,2)
(16,10,2)
(3,0,2)
(17,5,2)
(0,26,2)
(1,26,2)
(4,26,2)
(24,26,2)
(5,24,2)
(2,26,2)
(24,2,2)
(17,13,2)
(6,0,2)
(11,26,2)
(9,26,2)
(10,26,2)
-----------------------------------
(0,data == NULL)
(1,50)
(2,sizeof(wchar_t)
(3,1)
(4,NULL)
(5,malloc(50*sizeof(wchar_t)
(6,exit(-1)
(7,data)
(8,if (data == NULL)
(9,data)
(10,data = (wchar_t *)
(11,\'\\\\0\')
(12,-1)
(13,wchar_t *)
(14,data)
(15,)
(16,return data;)
(17,(wchar_t *)
(18,'\\\\0')
(19,)
(20,)
(21,if(badStatic)
(22,wchar_t * data)
(23,wchar_t)
(24,50*sizeof(wchar_t)
(25,RET)
(26,badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^