-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
66,67
67,68
67,69
67,70
67,71
67,72
67,73
68,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
79,80
80,81
80,82
81,82
81,83
83,84
85,86
85,87
86,87
88,89
88,90
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
105,106
107,108
107,109
107,110
107,111
108,109
109,110
109,111
110,111
113,114
113,115
114,115
117,118
118,119
120,121
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
129,131
129,132
130,131
130,132
131,132
134,135
134,136
135,136
136,137
136,138
137,138
137,139
138,139
140,141
143,144
143,145
143,146
143,147
144,145
145,146
145,147
146,147
149,150
149,151
150,151
153,154
154,155
156,157
157,158
158,159
158,160
159,160
161,162
161,163
162,163
164,165
166,167
167,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,64,65,70,72,75,77,78,82,84,87,89,92,93,97,99,104,106,111,112,115,116,119,125,127,128,132,133,139,141,142,147,148,151,152,155,160,163,165,170,171,175,177
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
88,89
88,90
95,96
95,97
109,110
109,111
113,114
113,115
122,123
122,124
130,131
130,132
136,137
136,138
145,146
145,147
149,150
149,151
-----guardedBy-----
39,55
132,141
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
5==5
5
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(48,95,0)
(41,67,0)
(35,4,0)
(4,35,0)
(19,83,0)
(53,5,0)
(23,5,0)
(54,41,0)
(98,39,0)
(35,85,0)
(41,9,0)
(6,71,0)
(30,62,0)
(49,18,0)
(12,39,0)
(41,86,0)
(94,27,0)
(18,86,0)
(3,76,0)
(74,68,0)
(39,12,0)
(40,63,0)
(40,6,0)
(37,43,0)
(61,46,0)
(2,27,0)
(5,93,0)
(33,62,0)
(29,81,0)
(55,24,0)
(46,70,0)
(72,10,0)
(4,5,0)
(86,77,0)
(44,4,0)
(65,43,0)
(67,68,0)
(90,76,0)
(13,92,0)
(41,63,0)
(81,9,0)
(14,18,0)
(89,12,0)
(15,63,0)
(99,63,0)
(7,10,0)
(91,80,0)
(4,80,0)
(98,77,0)
(50,75,0)
(38,24,0)
(77,73,0)
(79,39,0)
(27,80,0)
(97,71,0)
(82,9,0)
(57,6,0)
(1,10,0)
(10,6,0)
(51,28,0)
(17,36,0)
(16,48,0)
(71,47,0)
(59,53,0)
(69,76,0)
(84,34,0)
(28,80,0)
(10,34,0)
(9,81,0)
(9,62,0)
(87,67,0)
(76,11,0)
(42,56,0)
(21,80,0)
(86,76,0)
(64,40,0)
(20,4,0)
(39,98,0)
(63,45,0)
(60,15,0)
(77,98,0)
(92,24,0)
(56,100,0)
(88,76,0)
(83,76,0)
(25,62,0)
(0,6,0)
(36,24,0)
(58,61,0)
(4,86,0)
(66,15,0)
(77,86,0)
(34,10,0)
(31,71,0)
(15,9,0)
(83,86,0)
(32,41,0)
(8,75,0)
(46,61,0)
(52,86,0)
(63,40,0)
(53,24,0)
(53,86,0)
(22,92,0)
(26,76,0)
(96,53,0)
(73,77,0)
(87,41,1)
(7,6,1)
(6,0,1)
(53,96,1)
(36,24,1)
(58,18,1)
(22,13,1)
(27,80,1)
(61,58,1)
(56,42,1)
(89,79,1)
(10,1,1)
(37,48,1)
(63,40,1)
(15,63,1)
(2,28,1)
(54,32,1)
(4,80,1)
(66,60,1)
(5,23,1)
(92,22,1)
(86,77,1)
(34,10,1)
(78,43,1)
(28,51,1)
(29,82,1)
(18,86,1)
(4,20,1)
(27,94,1)
(59,92,1)
(41,9,1)
(72,7,1)
(15,9,1)
(34,84,1)
(65,37,1)
(41,63,1)
(13,24,1)
(17,5,1)
(51,35,1)
(16,34,1)
(83,19,1)
(75,50,1)
(96,59,1)
(24,38,1)
(78,83,1)
(14,86,1)
(44,27,1)
(35,4,1)
(53,86,1)
(0,57,1)
(55,18,1)
(46,61,1)
(53,24,1)
(40,6,1)
(28,80,1)
(40,64,1)
(20,44,1)
(37,75,1)
(18,49,1)
(79,52,1)
(36,17,1)
(12,89,1)
(41,86,1)
(13,36,1)
(60,92,1)
(21,67,1)
(77,73,1)
(4,5,1)
(83,86,1)
(4,86,1)
(84,10,1)
(8,9,1)
(23,53,1)
(67,87,1)
(48,16,1)
(2,80,1)
(77,98,1)
(32,15,1)
(10,6,1)
(19,56,1)
(92,24,1)
(50,8,1)
(41,54,1)
(37,63,1)
(42,15,1)
(57,75,1)
(52,43,1)
(19,27,1)
(81,29,1)
(43,65,1)
(99,34,1)
(15,66,1)
(91,21,1)
(64,99,1)
(80,91,1)
(49,14,1)
(98,39,1)
(94,2,1)
(39,12,1)
(55,46,1)
(1,72,1)
(38,55,1)
(9,81,1)
(89,43,2)
(41,15,2)
(56,15,2)
(55,43,2)
(38,43,2)
(46,61,2)
(27,15,2)
(98,39,2)
(83,43,2)
(44,27,2)
(1,75,2)
(28,27,2)
(51,27,2)
(79,43,2)
(86,43,2)
(36,92,2)
(4,86,2)
(34,10,2)
(84,75,2)
(22,92,2)
(35,27,2)
(42,15,2)
(15,43,2)
(13,92,2)
(17,92,2)
(46,18,2)
(52,43,2)
(54,15,2)
(23,92,2)
(35,4,2)
(18,86,2)
(80,15,2)
(63,34,2)
(77,43,2)
(16,34,2)
(20,27,2)
(14,43,2)
(49,43,2)
(57,75,2)
(7,75,2)
(94,15,2)
(66,43,2)
(24,43,2)
(96,92,2)
(0,75,2)
(83,86,2)
(15,63,2)
(21,15,2)
(40,6,2)
(60,43,2)
(61,18,2)
(59,92,2)
(15,9,2)
(2,15,2)
(10,75,2)
(48,34,2)
(32,15,2)
(9,81,2)
(22,43,2)
(41,86,2)
(27,27,2)
(92,92,2)
(67,15,2)
(6,75,2)
(98,43,2)
(64,34,2)
(99,34,2)
(34,75,2)
(72,75,2)
(4,80,2)
(53,92,2)
(28,80,2)
(86,77,2)
(4,27,2)
(40,34,2)
(53,24,2)
(87,15,2)
(5,92,2)
(94,27,2)
(18,43,2)
(10,6,2)
(13,43,2)
(41,9,2)
(2,27,2)
(39,43,2)
(27,80,2)
(91,15,2)
(39,12,2)
(77,98,2)
(53,86,2)
(77,73,2)
(19,43,2)
(92,43,2)
(36,24,2)
(58,18,2)
(41,63,2)
(4,5,2)
(63,40,2)
(92,24,2)
(12,43,2)
-----------------------------------
(0,"")
(1,stdin)
(2,i)
(3,i)
(4,buffer[i])
(5,buffer[i] = 0)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,inputBuffer)
(8,5)
(9,data = -1)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,)
(12,sizeof(int)
(13,i)
(14,buffer)
(15,data >= 0)
(16,"fgets()
(17,i)
(18,buffer == NULL)
(19,buffer)
(20,i)
(21,i)
(22,10)
(23,0)
(24,i = 0)
(25,data)
(26,if (data >= 0)
(27,i < 10)
(28,i++)
(29,1)
(30,if(5==5)
(31,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,buffer)
(33,if(5==5)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,printIntLine(buffer[i])
(36,i++)
(37,5)
(38,0)
(39,10 * sizeof(int)
(40,atoi(inputBuffer)
(41,buffer[data])
(42,"ERROR: Array index is negative.")
(43,5==5)
(44,buffer)
(45,)
(46,exit(-1)
(47,)
(48,printLine("fgets()
(49,NULL)
(50,5)
(51,i)
(52,buffer)
(53,buffer[i])
(54,data)
(55,i)
(56,printLine("ERROR: Array index is negative.")
(57,inputBuffer)
(58,1)
(59,buffer)
(60,data)
(61,-1)
(62,)
(63,data = atoi(inputBuffer)
(64,inputBuffer)
(65,5)
(66,0)
(67,buffer[data] = 1)
(68,)
(69,for (i = 0; i < 10; i++)
(70,)
(71,)
(72,CHAR_ARRAY_SIZE)
(73,int *)
(74,for(i = 0; i < 10; i++)
(75,5==5)
(76,)
(77,(int *)
(78,RET)
(79,10)
(80,i = 0)
(81,-1)
(82,data)
(83,free(buffer)
(84,NULL)
(85,)
(86,* buffer = (int *)
(87,1)
(88,buffer)
(89,int)
(90,if (buffer == NULL)
(91,0)
(92,i < 10)
(93,)
(94,10)
(95,)
(96,i)
(97,inputBuffer)
(98,malloc(10 * sizeof(int)
(99,data)
(100,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^