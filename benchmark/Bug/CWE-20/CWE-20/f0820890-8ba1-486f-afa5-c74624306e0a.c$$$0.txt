-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(twoIntsStruct));
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
53,54
54,55
54,56
55,56
57,58
57,59
57,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
67,70
70,71
71,72
73,74
73,75
73,76
73,77
73,78
74,75
75,76
75,77
76,77
78,79
78,80
80,81
82,83
82,84
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
99,100
100,101
102,103
102,104
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
109,110
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
119,120
123,124
124,125
124,126
124,127
124,128
125,126
127,128
129,130
131,132
131,133
133,134
134,135
134,136
135,136
138,139
139,140
139,141
140,141
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,56,58,59,62,66,68,69,72,77,79,81,86,88,93,94,97,98,101,108,110,111,112,118,120,121,122,126,128,130,132,136,137,141,145,146,150,152
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
91,92
91,93
95,96
95,97
104,105
104,106
114,115
114,116
131,132
131,133
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad(){    twoIntsStruct * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad
{    twoIntsStruct * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(4,69,0)
(25,58,0)
(63,20,0)
(44,15,0)
(62,12,0)
(70,34,0)
(3,5,0)
(52,34,0)
(68,4,0)
(6,58,0)
(35,72,0)
(59,68,0)
(5,64,0)
(12,20,0)
(49,70,0)
(4,68,0)
(39,40,0)
(56,29,0)
(27,71,0)
(58,15,0)
(71,58,0)
(25,65,0)
(24,50,0)
(12,62,0)
(14,30,0)
(45,31,0)
(65,15,0)
(9,40,0)
(37,24,0)
(23,58,0)
(55,62,0)
(34,67,0)
(16,53,0)
(31,56,0)
(44,31,0)
(1,53,0)
(0,65,0)
(53,30,0)
(56,69,0)
(29,56,0)
(54,24,0)
(69,56,0)
(49,30,0)
(71,42,0)
(8,15,0)
(70,49,0)
(10,71,0)
(31,40,0)
(33,42,0)
(22,49,0)
(64,48,0)
(41,70,0)
(28,0,0)
(42,33,0)
(46,15,0)
(38,65,0)
(57,72,0)
(69,4,0)
(17,67,0)
(20,12,0)
(2,4,0)
(13,62,0)
(18,30,0)
(32,17,0)
(60,49,0)
(62,65,0)
(33,65,0)
(56,31,0)
(50,24,0)
(42,71,0)
(72,40,0)
(15,40,0)
(19,11,0)
(7,50,0)
(43,0,0)
(24,30,0)
(61,25,0)
(26,12,0)
(66,44,0)
(62,58,0)
(11,31,0)
(73,30,0)
(47,11,0)
(64,5,0)
(50,17,0)
(58,44,0)
(36,44,0)
(21,18,0)
(58,44,1)
(3,11,1)
(2,45,1)
(62,58,1)
(64,5,1)
(73,14,1)
(23,44,1)
(19,47,1)
(69,4,1)
(72,35,1)
(54,37,1)
(5,3,1)
(68,59,1)
(7,24,1)
(37,34,1)
(34,52,1)
(27,62,1)
(18,21,1)
(49,60,1)
(41,49,1)
(44,66,1)
(35,57,1)
(26,13,1)
(56,29,1)
(50,24,1)
(24,30,1)
(6,23,1)
(16,18,1)
(22,53,1)
(71,58,1)
(52,70,1)
(30,73,1)
(18,30,1)
(62,12,1)
(44,31,1)
(24,54,1)
(4,68,1)
(13,55,1)
(53,30,1)
(70,49,1)
(20,63,1)
(11,19,1)
(56,69,1)
(25,61,1)
(49,30,1)
(51,25,1)
(31,56,1)
(63,26,1)
(36,64,1)
(11,31,1)
(25,58,1)
(36,11,1)
(61,33,1)
(10,27,1)
(33,42,1)
(32,50,1)
(66,36,1)
(42,71,1)
(59,2,1)
(21,17,1)
(47,31,1)
(55,53,1)
(50,7,1)
(16,30,1)
(17,32,1)
(14,58,1)
(58,6,1)
(45,72,1)
(70,41,1)
(60,22,1)
(53,1,1)
(1,16,1)
(12,20,1)
(71,10,1)
(33,42,2)
(21,53,2)
(50,53,2)
(53,30,2)
(4,68,2)
(34,53,2)
(24,53,2)
(62,12,2)
(56,69,2)
(22,53,2)
(25,58,2)
(1,53,2)
(32,53,2)
(41,53,2)
(64,5,2)
(42,71,2)
(17,53,2)
(16,53,2)
(64,11,2)
(52,53,2)
(5,11,2)
(31,56,2)
(58,44,2)
(12,20,2)
(11,31,2)
(62,58,2)
(70,53,2)
(49,53,2)
(53,53,2)
(37,53,2)
(18,53,2)
(7,53,2)
(49,30,2)
(69,4,2)
(3,11,2)
(44,31,2)
(71,58,2)
(24,30,2)
(60,53,2)
(50,24,2)
(70,49,2)
(54,53,2)
(18,30,2)
(56,29,2)
-----------------------------------
(0,)
(1,100)
(2,50)
(3,1)
(4,50*sizeof(twoIntsStruct)
(5,-1)
(6,dataCopy)
(7,intTwo)
(8,dataCopy)
(9,data)
(10,0)
(11,data == NULL)
(12,100*sizeof(twoIntsStruct)
(13,source)
(14,i)
(15,)
(16,i)
(17,source[i].intTwo = 0)
(18,i++)
(19,NULL)
(20,sizeof(twoIntsStruct)
(21,i)
(22,source)
(23,data)
(24,source[i])
(25,free(data)
(26,100)
(27,data)
(28,i)
(29,twoIntsStruct *)
(30,i = 0)
(31,data = (twoIntsStruct *)
(32,0)
(33,printStructLine(&data[0])
(34,source[i].intOne = 0)
(35,NULL)
(36,dataCopy)
(37,source)
(38,source)
(39,if (data == NULL)
(40,)
(41,intOne)
(42,&data[0])
(43,for (i = 0; i < 100; i++)
(44,* dataCopy = data)
(45,data)
(46,data)
(47,data)
(48,)
(49,source[i])
(50,source[i].intTwo)
(51,RET)
(52,0)
(53,i < 100)
(54,i)
(55,data)
(56,(twoIntsStruct *)
(57,data)
(58,* data = dataCopy)
(59,twoIntsStruct)
(60,i)
(61,data)
(62,memmove(data, source, 100*sizeof(twoIntsStruct)
(63,twoIntsStruct)
(64,exit(-1)
(65,)
(66,data)
(67,)
(68,sizeof(twoIntsStruct)
(69,malloc(50*sizeof(twoIntsStruct)
(70,source[i].intOne)
(71,data[0])
(72,data = NULL)
(73,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^