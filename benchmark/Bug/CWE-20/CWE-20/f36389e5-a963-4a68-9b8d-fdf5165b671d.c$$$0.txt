-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_08_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(staticReturnsTrue())
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
81,82
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,76,78,82,87,89
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_08_bad(){    char * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_08_bad()
CWE416_Use_After_Free__malloc_free_char_08_bad
{    char * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(1,42,0)
(46,31,0)
(37,3,0)
(12,14,0)
(6,31,0)
(5,2,0)
(14,33,0)
(49,36,0)
(34,45,0)
(20,41,0)
(33,14,0)
(41,20,0)
(10,32,0)
(22,34,0)
(1,35,0)
(15,20,0)
(41,4,0)
(31,3,0)
(4,26,0)
(20,15,0)
(32,34,0)
(18,1,0)
(47,42,0)
(2,45,0)
(26,4,0)
(36,38,0)
(42,4,0)
(21,15,0)
(0,42,0)
(29,3,0)
(16,32,0)
(36,42,0)
(11,39,0)
(43,20,0)
(1,31,0)
(0,45,0)
(30,38,0)
(23,0,0)
(34,42,0)
(24,38,0)
(42,45,0)
(4,42,0)
(38,36,0)
(7,34,0)
(36,2,0)
(33,8,0)
(40,3,0)
(25,39,0)
(4,41,0)
(34,32,0)
(39,42,0)
(27,45,0)
(0,23,1)
(1,42,1)
(38,30,1)
(23,2,1)
(6,46,1)
(49,34,1)
(34,32,1)
(1,31,1)
(39,42,1)
(13,17,1)
(1,18,1)
(30,24,1)
(32,10,1)
(42,4,1)
(22,39,1)
(20,15,1)
(4,26,1)
(0,42,1)
(14,12,1)
(36,42,1)
(22,33,1)
(15,21,1)
(16,7,1)
(21,43,1)
(2,5,1)
(43,47,1)
(4,41,1)
(17,19,1)
(18,17,1)
(12,39,1)
(19,31,1)
(39,11,1)
(47,19,1)
(13,1,1)
(31,6,1)
(7,22,1)
(17,0,1)
(5,36,1)
(34,42,1)
(25,42,1)
(11,25,1)
(36,38,1)
(24,49,1)
(10,16,1)
(41,20,1)
(33,14,1)
(5,19,2)
(34,42,2)
(42,4,2)
(21,19,2)
(33,14,2)
(41,20,2)
(2,19,2)
(10,19,2)
(42,19,2)
(20,15,2)
(20,19,2)
(12,39,2)
(33,39,2)
(25,19,2)
(15,19,2)
(14,39,2)
(4,41,2)
(11,19,2)
(18,17,2)
(16,19,2)
(49,19,2)
(0,42,2)
(38,19,2)
(1,42,2)
(34,19,2)
(39,19,2)
(43,19,2)
(4,26,2)
(32,19,2)
(34,32,2)
(30,19,2)
(7,19,2)
(23,19,2)
(1,17,2)
(0,19,2)
(39,42,2)
(36,42,2)
(36,19,2)
(4,19,2)
(1,31,2)
(22,19,2)
(41,19,2)
(36,38,2)
(47,19,2)
(24,19,2)
-----------------------------------
(0,free(data)
(1,printLine(data)
(2,data[100-1] = '\\\\0')
(3,)
(4,(char *)
(5,'\\\\0')
(6,NULL)
(7,'A')
(8,)
(9,\'\\\\0\')
(10,1)
(11,NULL)
(12,1)
(13,RET)
(14,-1)
(15,sizeof(char)
(16,100)
(17,staticReturnsTrue()
(18,data)
(19,staticReturnsTrue()
(20,100*sizeof(char)
(21,char)
(22,data)
(23,data)
(24,100)
(25,data)
(26,char *)
(27,if (data == NULL)
(28,\'A\')
(29,if(staticReturnsTrue()
(30,1)
(31,data = NULL)
(32,100-1)
(33,exit(-1)
(34,memset(data, \'A\', 100-1)
(35,)
(36,data[100-1])
(37,if(staticReturnsTrue()
(38,100-1)
(39,data == NULL)
(40,data)
(41,malloc(100*sizeof(char)
(42,data = (char *)
(43,100)
(44,data[100-1] = \'\\\\0\')
(45,)
(46,data)
(47,data)
(48,memset(data, 'A', 100-1)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^