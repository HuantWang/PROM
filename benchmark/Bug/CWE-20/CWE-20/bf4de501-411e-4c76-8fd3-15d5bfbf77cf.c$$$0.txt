-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_loop_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        {
            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (dataBuffer == NULL) {exit(-1);}
            wmemset(dataBuffer, L'A', 100-1);
            dataBuffer[100-1] = L'\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            size_t i;
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with 'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            /* Ensure the destination buffer is null terminated */
            data[100-1] = L'\0';
            printWLine(data);
            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
             * returned by malloc() so can't safely call free() on it */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
109,111
110,111
113,114
114,115
114,116
115,116
116,117
118,119
120,121
120,122
121,122
122,123
122,124
124,125
124,126
124,127
127,128
128,129
129,130
131,132
131,133
131,134
131,135
131,136
131,137
131,138
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
141,142
141,143
143,144
145,146
146,147
146,148
146,149
146,150
147,148
149,150
152,153
152,154
155,156
156,157
156,158
157,158
157,159
158,159
160,161
160,162
164,165
164,166
164,167
164,168
165,166
166,167
166,168
167,168
170,171
170,172
171,172
174,175
175,176
177,178
178,179
179,180
179,181
180,181
180,182
181,182
183,184
185,186
185,187
186,187
188,189
190,191
191,192
191,193
192,193
192,194
193,194
195,196
195,197
199,200
200,201
200,202
201,202
203,204
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,61,63,66,68,71,72,76,78,83,85,89,91,92,94,95,100,102,103,104,108,111,112,117,119,123,125,126,130,135,137,140,142,144,148,150,151,153,154,159,161,162,163,168,169,172,173,176,182,184,187,189,194,196,197,198,202,204
-----computeFrom-----
35,36
35,37
67,68
67,69
74,75
74,76
93,94
93,95
97,98
97,99
101,102
101,103
106,107
106,108
109,110
109,111
114,115
114,116
152,153
152,154
156,157
156,158
160,161
160,162
166,167
166,168
170,171
170,172
179,180
179,181
191,192
191,193
195,196
195,197
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_loop_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            size_t i;            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with 'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            /* Ensure the destination buffer is null terminated */            data[100-1] = L'\0';            printWLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
void
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_32_bad()
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            size_t i;            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with 'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            /* Ensure the destination buffer is null terminated */            data[100-1] = L'\0';            printWLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            size_t i;            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with 'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            /* Ensure the destination buffer is null terminated */            data[100-1] = L'\0';            printWLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            size_t i;            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with 'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            /* Ensure the destination buffer is null terminated */            data[100-1] = L'\0';            printWLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }
size_t i;
size_t i;
size_t
size_t
i
i
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(61,43,0)
(41,43,0)
(14,2,0)
(6,14,0)
(71,67,0)
(78,44,0)
(18,51,0)
(45,53,0)
(51,28,0)
(31,49,0)
(25,69,0)
(71,7,0)
(42,0,0)
(43,49,0)
(4,42,0)
(41,80,0)
(44,0,0)
(8,65,0)
(64,36,0)
(70,71,0)
(53,8,0)
(79,42,0)
(54,22,0)
(16,69,0)
(53,22,0)
(21,67,0)
(40,2,0)
(39,30,0)
(53,2,0)
(52,79,0)
(24,18,0)
(80,37,0)
(1,67,0)
(38,30,0)
(27,42,0)
(80,4,0)
(23,0,0)
(30,39,0)
(30,67,0)
(12,39,0)
(49,43,0)
(29,69,0)
(32,23,0)
(77,42,0)
(34,22,0)
(29,2,0)
(60,66,0)
(13,69,0)
(8,54,0)
(36,22,0)
(2,14,0)
(5,22,0)
(59,53,0)
(78,30,0)
(33,78,0)
(37,80,0)
(74,4,0)
(51,18,0)
(72,22,0)
(44,78,0)
(4,80,0)
(73,66,0)
(2,21,0)
(7,71,0)
(9,44,0)
(20,0,0)
(75,54,0)
(48,69,0)
(19,54,0)
(26,4,0)
(32,30,0)
(80,41,0)
(50,42,0)
(66,67,0)
(10,32,0)
(47,67,0)
(46,74,0)
(0,67,0)
(17,26,0)
(55,29,0)
(79,26,0)
(63,74,0)
(15,26,0)
(23,79,0)
(68,23,0)
(76,4,0)
(54,8,0)
(14,71,0)
(69,21,0)
(57,69,0)
(62,36,0)
(35,21,0)
(58,67,0)
(26,79,0)
(3,5,0)
(56,7,0)
(43,41,0)
(52,77,1)
(36,62,1)
(17,15,1)
(66,73,1)
(77,74,1)
(34,48,1)
(23,68,1)
(8,54,1)
(14,71,1)
(74,4,1)
(53,22,1)
(46,4,1)
(39,12,1)
(49,31,1)
(71,7,1)
(78,33,1)
(18,24,1)
(11,29,1)
(12,38,1)
(78,30,1)
(5,3,1)
(54,22,1)
(53,2,1)
(62,64,1)
(60,71,1)
(9,66,1)
(33,9,1)
(6,40,1)
(64,5,1)
(57,36,1)
(70,30,1)
(4,80,1)
(77,51,1)
(79,26,1)
(26,4,1)
(36,22,1)
(22,72,1)
(30,39,1)
(80,37,1)
(29,55,1)
(72,34,1)
(40,23,1)
(31,61,1)
(55,57,1)
(7,56,1)
(74,63,1)
(54,19,1)
(61,76,1)
(73,60,1)
(68,32,1)
(59,36,1)
(24,74,1)
(15,52,1)
(45,59,1)
(41,43,1)
(32,30,1)
(2,14,1)
(5,22,1)
(14,6,1)
(43,49,1)
(64,22,1)
(51,18,1)
(63,46,1)
(10,79,1)
(26,17,1)
(48,2,1)
(80,41,1)
(53,45,1)
(32,10,1)
(3,8,1)
(75,53,1)
(29,2,1)
(19,75,1)
(23,79,1)
(44,78,1)
(56,70,1)
(76,44,1)
(71,7,2)
(23,79,2)
(4,80,2)
(24,74,2)
(74,4,2)
(45,36,2)
(2,14,2)
(54,22,2)
(36,22,2)
(19,36,2)
(36,36,2)
(29,2,2)
(32,30,2)
(79,26,2)
(80,37,2)
(78,30,2)
(64,36,2)
(51,18,2)
(44,78,2)
(5,22,2)
(30,39,2)
(26,4,2)
(5,36,2)
(62,36,2)
(54,36,2)
(53,2,2)
(3,36,2)
(18,74,2)
(51,74,2)
(59,36,2)
(80,41,2)
(41,43,2)
(53,22,2)
(14,71,2)
(53,36,2)
(8,54,2)
(43,49,2)
(75,36,2)
(8,36,2)
-----------------------------------
(0,)
(1,data)
(2,* data = *dataPtr2)
(3,i)
(4,* dataBuffer = (wchar_t *)
(5,i++)
(6,dataPtr2)
(7,&data)
(8,data[i] = source[i])
(9,data)
(10,dataPtr1)
(11,RET)
(12,data)
(13,i)
(14,*dataPtr2)
(15,dataBuffer)
(16,for (i = 0; i < 100; i++)
(17,8)
(18,-1)
(19,i)
(20,data)
(21,)
(22,i = 0)
(23,*dataPtr1 = data)
(24,1)
(25,source)
(26,dataBuffer - 8)
(27,dataBuffer)
(28,)
(29,printWLine(data)
(30,* *dataPtr1 = &data)
(31,wchar_t)
(32,*dataPtr1)
(33,dataPtr1)
(34,i)
(35,data)
(36,i < 100)
(37,wchar_t *)
(38,dataPtr1)
(39,&data)
(40,data)
(41,malloc(100*sizeof(wchar_t)
(42,)
(43,100*sizeof(wchar_t)
(44,* data = *dataPtr1)
(45,i)
(46,dataBuffer)
(47,dataPtr1)
(48,'\\\\0')
(49,sizeof(wchar_t)
(50,if (dataBuffer == NULL)
(51,exit(-1)
(52,data)
(53,data[i])
(54,source[i])
(55,data)
(56,data)
(57,'\\\\0')
(58,dataPtr2)
(59,data)
(60,data)
(61,100)
(62,100)
(63,NULL)
(64,i)
(65,)
(66,data = NULL)
(67,)
(68,data)
(69,)
(70,dataPtr2)
(71,* *dataPtr2 = &data)
(72,0)
(73,NULL)
(74,dataBuffer == NULL)
(75,source)
(76,dataBuffer)
(77,'\\\\0')
(78,*dataPtr1)
(79,data = dataBuffer - 8)
(80,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^