-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        size_t i;
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
71,72
71,73
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
82,83
82,84
85,86
86,87
86,88
87,88
87,89
88,89
90,91
90,92
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
107,108
108,109
109,110
109,111
110,111
110,112
111,112
113,114
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
122,124
123,124
125,126
125,127
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,65,67,70,72,74,78,80,81,83,84,89,91,92,93,98,99,102,103,106,112,114,117,119,124,126,127,128,132,134,138,140
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
82,83
82,84
86,87
86,88
90,91
90,92
96,97
96,98
100,101
100,102
109,110
109,111
121,122
121,123
125,126
125,127
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,50,0)
(53,40,0)
(23,12,0)
(11,27,0)
(17,7,0)
(35,13,0)
(27,32,0)
(14,40,0)
(6,38,0)
(48,17,0)
(47,26,0)
(31,44,0)
(29,16,0)
(46,38,0)
(33,4,0)
(52,24,0)
(34,12,0)
(45,12,0)
(28,16,0)
(7,17,0)
(30,45,0)
(8,7,0)
(19,38,0)
(36,40,0)
(22,16,0)
(24,45,0)
(18,50,0)
(25,24,0)
(13,35,0)
(43,8,0)
(0,27,0)
(49,40,0)
(11,38,0)
(35,39,0)
(44,40,0)
(40,50,0)
(42,46,0)
(46,45,0)
(4,16,0)
(44,45,0)
(1,13,0)
(5,0,0)
(2,28,0)
(11,16,0)
(3,0,0)
(11,45,0)
(26,17,0)
(8,45,0)
(51,11,0)
(38,50,0)
(7,8,0)
(15,40,0)
(17,26,0)
(21,11,0)
(37,28,0)
(0,16,0)
(46,40,0)
(45,8,0)
(27,0,0)
(8,43,0)
(44,38,0)
(34,35,1)
(45,8,1)
(8,7,1)
(28,16,1)
(10,44,1)
(24,52,1)
(46,38,1)
(51,28,1)
(44,31,1)
(0,3,1)
(19,6,1)
(29,14,1)
(17,26,1)
(4,33,1)
(11,16,1)
(34,24,1)
(3,5,1)
(48,30,1)
(46,45,1)
(2,37,1)
(11,38,1)
(46,42,1)
(42,53,1)
(28,2,1)
(14,9,1)
(27,0,1)
(53,28,1)
(25,45,1)
(38,19,1)
(33,27,1)
(52,25,1)
(16,22,1)
(21,51,1)
(22,29,1)
(1,24,1)
(14,34,1)
(30,9,1)
(26,47,1)
(35,13,1)
(37,4,1)
(47,48,1)
(4,16,1)
(11,45,1)
(0,16,1)
(11,21,1)
(37,16,1)
(31,46,1)
(9,38,1)
(24,45,1)
(13,1,1)
(44,38,1)
(44,45,1)
(8,43,1)
(5,11,1)
(7,17,1)
(28,16,2)
(25,9,2)
(7,17,2)
(17,26,2)
(51,28,2)
(45,8,2)
(1,24,2)
(48,9,2)
(30,9,2)
(35,13,2)
(4,28,2)
(3,28,2)
(26,9,2)
(11,28,2)
(13,24,2)
(4,16,2)
(37,28,2)
(2,28,2)
(44,38,2)
(52,9,2)
(11,38,2)
(8,7,2)
(0,16,2)
(45,9,2)
(34,9,2)
(27,28,2)
(7,9,2)
(8,43,2)
(11,45,2)
(47,9,2)
(27,0,2)
(35,24,2)
(44,45,2)
(0,28,2)
(8,9,2)
(11,16,2)
(28,28,2)
(33,28,2)
(24,45,2)
(21,28,2)
(46,45,2)
(24,9,2)
(17,9,2)
(46,38,2)
(5,28,2)
-----------------------------------
(0,source[i])
(1,1)
(2,100)
(3,i)
(4,i++)
(5,source)
(6,data)
(7,malloc(50*sizeof(wchar_t)
(8,(wchar_t *)
(9,globalReturnsTrue()
(10,RET)
(11,data[i])
(12,)
(13,-1)
(14,'\\\\0')
(15,i)
(16,i = 0)
(17,50*sizeof(wchar_t)
(18,if(globalReturnsTrue()
(19,NULL)
(20,data)
(21,i)
(22,0)
(23,if (data == NULL)
(24,data == NULL)
(25,data)
(26,sizeof(wchar_t)
(27,data[i] = source[i])
(28,i < 100)
(29,i)
(30,data)
(31,data)
(32,)
(33,i)
(34,\'\\\\0\')
(35,exit(-1)
(36,source)
(37,i)
(38,data = NULL)
(39,)
(40,)
(41,'\\\\0')
(42,data)
(43,wchar_t *)
(44,free(data)
(45,data = (wchar_t *)
(46,printWLine(data)
(47,wchar_t)
(48,50)
(49,for (i = 0; i < 100; i++)
(50,)
(51,data)
(52,NULL)
(53,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^