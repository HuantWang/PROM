-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(wchar_t));
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad(){    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad
{    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memmove(data, source, 100*sizeof(wchar_t));
memmove(data, source, 100*sizeof(wchar_t))
memmove
memmove
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,10,0)
(24,7,0)
(42,5,0)
(30,5,0)
(25,10,0)
(14,30,0)
(18,1,0)
(39,7,0)
(7,32,0)
(28,7,0)
(9,4,0)
(6,1,0)
(38,17,0)
(1,6,0)
(40,15,0)
(16,39,0)
(31,32,0)
(19,42,0)
(38,40,0)
(17,38,0)
(2,8,0)
(1,39,0)
(3,15,0)
(39,1,0)
(15,3,0)
(33,3,0)
(10,27,0)
(21,15,0)
(4,32,0)
(36,28,0)
(37,42,0)
(40,38,0)
(5,38,0)
(20,8,0)
(39,4,0)
(0,7,0)
(35,32,0)
(26,6,0)
(15,40,0)
(27,23,0)
(29,5,0)
(22,4,0)
(28,5,0)
(38,5,0)
(30,7,0)
(12,39,0)
(30,4,0)
(28,4,0)
(39,5,0)
(5,8,0)
(11,4,0)
(26,18,1)
(37,5,1)
(5,38,1)
(33,21,1)
(25,42,1)
(1,6,1)
(38,17,1)
(28,7,1)
(39,1,1)
(28,5,1)
(13,7,1)
(15,3,1)
(19,37,1)
(28,36,1)
(9,2,1)
(0,24,1)
(21,29,1)
(40,15,1)
(16,9,1)
(29,13,1)
(42,19,1)
(10,25,1)
(38,40,1)
(18,12,1)
(2,42,1)
(7,0,1)
(30,14,1)
(14,11,1)
(36,30,1)
(41,28,1)
(6,26,1)
(42,5,1)
(12,16,1)
(30,7,1)
(2,27,1)
(30,5,1)
(3,33,1)
(39,5,1)
(39,7,1)
(11,39,1)
(27,10,1)
(9,13,1)
(38,13,2)
(38,17,2)
(30,5,2)
(38,40,2)
(27,42,2)
(42,5,2)
(19,13,2)
(1,6,2)
(39,1,2)
(33,13,2)
(28,5,2)
(21,13,2)
(29,13,2)
(3,13,2)
(5,13,2)
(15,3,2)
(28,7,2)
(27,10,2)
(40,15,2)
(42,13,2)
(37,13,2)
(25,42,2)
(40,13,2)
(5,38,2)
(15,13,2)
(2,13,2)
(10,42,2)
(30,7,2)
(39,7,2)
(39,5,2)
-----------------------------------
(0,NULL)
(1,100*sizeof(wchar_t)
(2,'\\\\0')
(3,sizeof(wchar_t)
(4,)
(5,data = (wchar_t *)
(6,sizeof(wchar_t)
(7,data = NULL)
(8,)
(9,'\\\\0')
(10,-1)
(11,'\\\\0')
(12,source)
(13,globalTrue)
(14,data)
(15,50*sizeof(wchar_t)
(16,data)
(17,wchar_t *)
(18,100)
(19,NULL)
(20,if (data == NULL)
(21,50)
(22,source)
(23,)
(24,data)
(25,1)
(26,wchar_t)
(27,exit(-1)
(28,free(data)
(29,data)
(30,printWLine(data)
(31,data)
(32,)
(33,wchar_t)
(34,\'\\\\0\')
(35,if(globalTrue)
(36,data)
(37,data)
(38,(wchar_t *)
(39,memmove(data, source, 100*sizeof(wchar_t)
(40,malloc(50*sizeof(wchar_t)
(41,RET)
(42,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^