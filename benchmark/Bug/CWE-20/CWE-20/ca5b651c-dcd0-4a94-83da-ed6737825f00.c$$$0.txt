-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
62,63
62,64
62,65
62,66
63,64
64,65
64,66
66,67
66,68
66,69
68,69
69,70
69,71
72,73
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
83,85
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,54,55,59,60,61,65,67,70,71,74,78,80,82,88,90,91,94,95,99,101,105,107
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
69,70
69,71
83,84
83,85
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(28,1,0)
(8,12,0)
(19,21,0)
(29,30,0)
(37,6,0)
(2,39,0)
(21,15,0)
(44,20,0)
(3,45,0)
(47,2,0)
(31,1,0)
(48,47,0)
(24,1,0)
(43,27,0)
(50,27,0)
(19,45,0)
(12,39,0)
(18,30,0)
(45,19,0)
(41,27,0)
(4,45,0)
(21,25,0)
(6,17,0)
(20,6,0)
(12,20,0)
(42,15,0)
(41,6,0)
(5,13,0)
(2,47,0)
(0,15,0)
(46,4,0)
(30,27,0)
(39,2,0)
(41,15,0)
(30,20,0)
(27,17,0)
(42,27,0)
(39,12,0)
(42,6,0)
(15,21,0)
(45,4,0)
(22,1,0)
(5,40,0)
(15,1,0)
(21,19,0)
(34,41,0)
(30,6,0)
(36,42,0)
(49,39,0)
(13,5,0)
(2,30,0)
(16,33,0)
(10,33,0)
(25,21,0)
(23,1,0)
(33,15,0)
(35,1,0)
(38,17,0)
(26,13,0)
(30,15,0)
(14,17,0)
(32,31,0)
(9,20,0)
(30,2,0)
(8,29,1)
(10,15,1)
(44,24,1)
(2,47,1)
(42,15,1)
(30,20,1)
(34,42,1)
(33,16,1)
(41,34,1)
(30,2,1)
(21,25,1)
(31,32,1)
(44,28,1)
(36,30,1)
(12,20,1)
(11,41,1)
(18,20,1)
(3,0,1)
(41,15,1)
(33,15,1)
(19,45,1)
(32,7,1)
(28,31,1)
(39,49,1)
(43,50,1)
(30,27,1)
(42,36,1)
(29,18,1)
(15,21,1)
(4,46,1)
(0,7,1)
(45,4,1)
(47,48,1)
(46,3,1)
(16,10,1)
(20,9,1)
(49,12,1)
(39,12,1)
(2,39,1)
(12,8,1)
(26,33,1)
(21,19,1)
(24,33,1)
(5,13,1)
(24,5,1)
(30,15,1)
(42,27,1)
(9,44,1)
(13,26,1)
(41,27,1)
(48,39,1)
(27,43,1)
(7,27,1)
(32,7,2)
(45,7,2)
(28,7,2)
(30,15,2)
(21,19,2)
(10,7,2)
(24,7,2)
(30,20,2)
(16,7,2)
(41,27,2)
(12,20,2)
(45,4,2)
(33,15,2)
(13,33,2)
(21,25,2)
(15,21,2)
(39,12,2)
(33,7,2)
(2,39,2)
(3,7,2)
(0,7,2)
(42,27,2)
(15,7,2)
(2,47,2)
(26,33,2)
(30,2,2)
(5,33,2)
(42,15,2)
(41,15,2)
(21,7,2)
(4,7,2)
(19,7,2)
(46,7,2)
(19,45,2)
(5,13,2)
(31,7,2)
(30,27,2)
-----------------------------------
(0,data)
(1,)
(2,(wcslen(source)
(3,10)
(4,sizeof(wchar_t)
(5,exit(-1)
(6,)
(7,6)
(8,source)
(9,SRC_STRING)
(10,data)
(11,RET)
(12,wcslen(source)
(13,-1)
(14,data)
(15,data = (wchar_t *)
(16,NULL)
(17,)
(18,data)
(19,malloc(10*sizeof(wchar_t)
(20,source[10+1] = SRC_STRING)
(21,(wchar_t *)
(22,default:)
(23,if (data == NULL)
(24,break;)
(25,wchar_t *)
(26,1)
(27,data = NULL)
(28,break;)
(29,source)
(30,memcpy(data, source, (wcslen(source)
(31,printLine("Benign, fixed string")
(32,"Benign, fixed string")
(33,data == NULL)
(34,data)
(35,case 6:)
(36,data)
(37,source)
(38,switch(6)
(39,wcslen(source)
(40,)
(41,free(data)
(42,printWLine(data)
(43,NULL)
(44,source)
(45,10*sizeof(wchar_t)
(46,wchar_t)
(47,sizeof(wchar_t)
(48,wchar_t)
(49,1)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^