-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int64_t_04_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
87,88
89,90
91,92
91,93
92,93
94,95
95,96
96,97
96,98
97,98
99,100
99,101
100,101
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,67,68,71,72,75,81,83,84,88,90,93,98,101,102
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
65,66
65,67
69,70
69,71
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int64_t_04_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int64_t_04_bad()
CWE416_Use_After_Free__malloc_free_int64_t_04_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5LL;            }
data[i] = 5LL;
data[i] = 5LL
data[i]
data
data
i
i
5LL
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
-----joern-----
(43,23,0)
(25,16,0)
(24,2,0)
(25,8,0)
(28,7,0)
(11,1,0)
(9,2,0)
(21,34,0)
(13,19,0)
(15,39,0)
(5,19,0)
(29,40,0)
(47,36,0)
(25,22,0)
(12,39,0)
(30,40,0)
(24,8,0)
(23,43,0)
(6,8,0)
(16,13,0)
(22,25,0)
(32,13,0)
(31,1,0)
(42,40,0)
(20,39,0)
(3,36,0)
(7,36,0)
(14,7,0)
(8,25,0)
(0,37,0)
(35,20,0)
(18,23,0)
(20,8,0)
(17,4,0)
(44,4,0)
(16,25,0)
(19,13,0)
(4,8,0)
(8,2,0)
(0,20,0)
(1,2,0)
(39,40,0)
(13,16,0)
(38,36,0)
(46,47,0)
(26,24,0)
(20,0,0)
(43,10,0)
(45,20,0)
(4,17,1)
(20,45,1)
(26,7,1)
(8,25,1)
(6,41,1)
(19,5,1)
(27,41,1)
(32,6,1)
(33,27,1)
(47,46,1)
(44,8,1)
(38,3,1)
(41,39,1)
(25,22,1)
(35,27,1)
(16,13,1)
(3,43,1)
(0,20,1)
(47,36,1)
(45,35,1)
(20,8,1)
(36,38,1)
(25,16,1)
(5,32,1)
(24,8,1)
(33,0,1)
(3,4,1)
(4,8,1)
(43,23,1)
(24,26,1)
(14,28,1)
(28,47,1)
(28,36,1)
(23,18,1)
(7,36,1)
(39,15,1)
(27,24,1)
(15,12,1)
(18,4,1)
(20,39,1)
(46,21,1)
(17,44,1)
(7,14,1)
(13,19,1)
(21,7,1)
(21,7,2)
(32,41,2)
(47,36,2)
(8,25,2)
(16,41,2)
(5,41,2)
(4,8,2)
(28,7,2)
(25,22,2)
(17,41,2)
(4,41,2)
(3,41,2)
(13,19,2)
(8,41,2)
(45,27,2)
(25,41,2)
(6,41,2)
(44,41,2)
(23,4,2)
(46,7,2)
(13,41,2)
(26,41,2)
(0,20,2)
(20,39,2)
(18,4,2)
(43,23,2)
(7,36,2)
(25,16,2)
(20,27,2)
(20,8,2)
(0,27,2)
(14,41,2)
(16,13,2)
(14,7,2)
(47,7,2)
(43,4,2)
(7,7,2)
(28,41,2)
(38,41,2)
(19,41,2)
(24,8,2)
(24,41,2)
(36,41,2)
(7,41,2)
(35,27,2)
-----------------------------------
(0,printLongLongLine(data[0])
(1,)
(2,)
(3,i)
(4,data == NULL)
(5,int64_t)
(6,data)
(7,i < 100)
(8,data = (int64_t *)
(9,if (data == NULL)
(10,)
(11,for(i = 0; i < 100; i++)
(12,data)
(13,100*sizeof(int64_t)
(14,100)
(15,NULL)
(16,malloc(100*sizeof(int64_t)
(17,NULL)
(18,1)
(19,sizeof(int64_t)
(20,data[0])
(21,L)
(22,int64_t *)
(23,-1)
(24,free(data)
(25,(int64_t *)
(26,data)
(27,STATIC_CONST_TRUE)
(28,i)
(29,if(STATIC_CONST_TRUE)
(30,data)
(31,i)
(32,100)
(33,RET)
(34,)
(35,data)
(36,i = 0)
(37,)
(38,0)
(39,data = NULL)
(40,)
(41,STATIC_CONST_TRUE)
(42,if(STATIC_CONST_TRUE)
(43,exit(-1)
(44,data)
(45,0)
(46,i)
(47,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^