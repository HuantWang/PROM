-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        size_t i, dataLen;
        dataLen = strlen(data);
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        for (i = 0; i < dataLen; i++)
        {
            dest[i] = data[i];
        }
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
67,73
67,74
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
89,91
90,91
92,93
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
103,104
105,106
106,107
108,109
109,110
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
130,131
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,91,93,98,99,102,104,107,113,115,118,120,125,127,128,129,133,135,139,141
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
86,87
86,88
96,97
96,98
100,101
100,102
110,111
110,112
122,123
122,124
126,127
126,128
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
size_t i, dataLen;
size_t i, dataLen;
size_t
size_t
i
i
dataLen
dataLen
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < dataLen
i
i
dataLen
dataLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,56,0)
(72,61,0)
(44,26,0)
(31,7,0)
(72,3,0)
(54,61,0)
(23,36,0)
(74,36,0)
(3,58,0)
(29,48,0)
(45,3,0)
(26,56,0)
(39,25,0)
(30,66,0)
(26,63,0)
(70,58,0)
(40,3,0)
(62,13,0)
(67,21,0)
(50,58,0)
(51,11,0)
(66,30,0)
(57,10,0)
(71,26,0)
(61,58,0)
(20,7,0)
(60,49,0)
(10,66,0)
(45,63,0)
(2,62,0)
(7,60,0)
(57,60,0)
(36,23,0)
(0,45,0)
(43,58,0)
(21,7,0)
(28,29,0)
(16,49,0)
(73,53,0)
(52,60,0)
(66,10,0)
(46,58,0)
(60,57,0)
(64,35,0)
(7,21,0)
(45,56,0)
(13,73,0)
(65,56,0)
(48,60,0)
(8,56,0)
(25,29,0)
(41,35,0)
(47,62,0)
(15,13,0)
(33,11,0)
(37,58,0)
(57,27,0)
(17,9,0)
(46,60,0)
(48,29,0)
(35,60,0)
(32,66,0)
(27,57,0)
(14,73,0)
(29,58,0)
(26,60,0)
(7,53,0)
(63,5,0)
(69,56,0)
(18,25,0)
(11,72,0)
(63,26,0)
(10,57,0)
(42,21,0)
(55,48,0)
(24,30,0)
(1,65,0)
(59,72,0)
(58,49,0)
(68,49,0)
(34,49,0)
(6,3,0)
(22,46,0)
(23,4,0)
(13,62,0)
(9,60,0)
(9,58,0)
(13,60,0)
(72,11,0)
(38,45,0)
(57,10,1)
(19,9,1)
(35,60,1)
(41,64,1)
(11,33,1)
(62,47,1)
(2,15,1)
(56,8,1)
(30,24,1)
(65,56,1)
(69,29,1)
(38,25,1)
(39,65,1)
(55,28,1)
(26,56,1)
(48,60,1)
(46,60,1)
(72,11,1)
(60,57,1)
(66,30,1)
(6,40,1)
(48,55,1)
(45,56,1)
(47,2,1)
(20,12,1)
(31,20,1)
(3,6,1)
(10,66,1)
(57,27,1)
(73,14,1)
(1,63,1)
(46,22,1)
(54,72,1)
(9,17,1)
(35,41,1)
(74,35,1)
(12,23,1)
(33,51,1)
(65,1,1)
(18,39,1)
(40,73,1)
(7,60,1)
(45,0,1)
(25,18,1)
(25,56,1)
(44,45,1)
(8,69,1)
(0,38,1)
(45,3,1)
(24,32,1)
(40,12,1)
(64,60,1)
(13,62,1)
(9,60,1)
(21,67,1)
(61,54,1)
(36,74,1)
(59,25,1)
(14,13,1)
(15,7,1)
(12,35,1)
(67,42,1)
(72,3,1)
(71,44,1)
(22,61,1)
(39,56,1)
(26,71,1)
(13,60,1)
(7,21,1)
(63,26,1)
(28,3,1)
(29,48,1)
(23,36,1)
(25,29,1)
(51,59,1)
(42,31,1)
(17,46,1)
(32,52,1)
(26,60,1)
(72,11,2)
(13,12,2)
(48,60,2)
(45,25,2)
(23,36,2)
(45,56,2)
(45,3,2)
(60,57,2)
(42,12,2)
(7,21,2)
(0,25,2)
(46,60,2)
(74,35,2)
(25,25,2)
(31,12,2)
(67,12,2)
(13,60,2)
(9,60,2)
(73,12,2)
(65,25,2)
(7,60,2)
(39,25,2)
(57,27,2)
(35,60,2)
(38,25,2)
(26,25,2)
(15,12,2)
(66,30,2)
(25,29,2)
(26,56,2)
(13,62,2)
(57,10,2)
(7,12,2)
(62,12,2)
(29,48,2)
(20,12,2)
(44,25,2)
(10,66,2)
(65,56,2)
(36,35,2)
(18,25,2)
(26,60,2)
(71,25,2)
(25,56,2)
(1,25,2)
(23,35,2)
(72,3,2)
(21,12,2)
(2,12,2)
(47,12,2)
(63,25,2)
(63,26,2)
(14,12,2)
-----------------------------------
(0,i)
(1,i)
(2,100)
(3,dest[50] = "")
(4,)
(5,)
(6,"")
(7,memset(data, \\\'A\\\', 100-1)
(8,0)
(9,free(data)
(10,malloc(100*sizeof(char)
(11,50-1)
(12,globalReturnsTrue()
(13,data[100-1])
(14,\\\'\\\\0\\\')
(15,data)
(16,if(globalReturnsTrue()
(17,data)
(18,dataLen)
(19,RET)
(20,data)
(21,100-1)
(22,data)
(23,exit(-1)
(24,char)
(25,i < dataLen)
(26,data[i])
(27,char *)
(28,dataLen)
(29,dataLen = strlen(data)
(30,sizeof(char)
(31,\\\'A\\\')
(32,100)
(33,1)
(34,data)
(35,data == NULL)
(36,-1)
(37,for (i = 0; i < dataLen; i++)
(38,dest)
(39,i)
(40,dest)
(41,NULL)
(42,100)
(43,dest)
(44,data)
(45,dest[i])
(46,printLine(data)
(47,1)
(48,strlen(data)
(49,)
(50,i)
(51,50)
(52,data)
(53,)
(54,\\\'\\\\0\\\')
(55,data)
(56,i = 0)
(57,(char *)
(58,)
(59,dest)
(60,data = (char *)
(61,dest[50-1] = \\\'\\\\0\\\')
(62,100-1)
(63,dest[i] = data[i])
(64,data)
(65,i++)
(66,100*sizeof(char)
(67,1)
(68,if (data == NULL)
(69,i)
(70,dataLen)
(71,i)
(72,dest[50-1])
(73,data[100-1] = \\\'\\\\0\\\')
(74,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^