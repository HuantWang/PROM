-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,100,102,106,108
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,21,0)
(52,38,0)
(24,40,0)
(40,13,0)
(33,19,0)
(10,4,0)
(53,43,0)
(19,33,0)
(42,20,0)
(15,40,0)
(31,11,0)
(1,30,0)
(23,42,0)
(41,7,0)
(29,38,0)
(44,57,0)
(40,54,0)
(19,13,0)
(17,55,0)
(14,57,0)
(13,11,0)
(20,6,0)
(48,33,0)
(4,13,0)
(0,54,0)
(2,42,0)
(20,42,0)
(47,28,0)
(56,11,0)
(54,11,0)
(4,21,0)
(7,3,0)
(30,1,0)
(39,21,0)
(38,52,0)
(37,55,0)
(0,13,0)
(35,37,0)
(51,1,0)
(30,12,0)
(18,6,0)
(22,19,0)
(21,38,0)
(29,37,0)
(50,33,0)
(7,21,0)
(45,0,0)
(4,54,0)
(3,28,0)
(26,13,0)
(40,21,0)
(46,54,0)
(6,13,0)
(36,43,0)
(8,3,0)
(38,21,0)
(38,29,0)
(37,29,0)
(27,20,0)
(21,28,0)
(49,7,0)
(55,37,0)
(5,54,0)
(0,21,0)
(32,19,0)
(17,35,1)
(4,21,1)
(27,19,1)
(53,36,1)
(30,1,1)
(43,21,1)
(36,21,1)
(15,6,1)
(0,45,1)
(6,18,1)
(7,49,1)
(41,43,1)
(22,3,1)
(40,21,1)
(0,21,1)
(57,14,1)
(48,32,1)
(49,41,1)
(23,27,1)
(3,8,1)
(4,10,1)
(24,15,1)
(51,43,1)
(8,7,1)
(41,30,1)
(39,57,1)
(10,0,1)
(21,38,1)
(37,55,1)
(2,23,1)
(45,40,1)
(9,4,1)
(44,54,1)
(22,57,1)
(0,54,1)
(55,17,1)
(33,50,1)
(7,21,1)
(42,2,1)
(18,20,1)
(32,22,1)
(54,46,1)
(43,53,1)
(4,54,1)
(40,24,1)
(38,29,1)
(1,51,1)
(46,5,1)
(50,48,1)
(40,54,1)
(20,42,1)
(29,37,1)
(19,33,1)
(38,52,1)
(35,39,1)
(14,44,1)
(39,57,2)
(21,57,2)
(35,57,2)
(37,55,2)
(40,54,2)
(38,52,2)
(4,54,2)
(30,43,2)
(30,1,2)
(36,57,2)
(29,37,2)
(41,57,2)
(37,57,2)
(0,21,2)
(4,21,2)
(7,57,2)
(29,57,2)
(21,38,2)
(43,21,2)
(17,57,2)
(38,57,2)
(51,43,2)
(43,57,2)
(55,57,2)
(1,43,2)
(20,42,2)
(3,57,2)
(0,54,2)
(38,29,2)
(49,57,2)
(40,21,2)
(8,57,2)
(7,21,2)
(19,33,2)
(53,57,2)
-----------------------------------
(0,printLine(data)
(1,-1)
(2,1)
(3,data[0] = '\\\\0')
(4,free(data)
(5,data)
(6,source[100-1] = '\\\\0')
(7,data[0])
(8,\'\\\\0\')
(9,RET)
(10,data)
(11,)
(12,)
(13,)
(14,5)
(15,data)
(16,data[0] = \'\\\\0\')
(17,char)
(18,'\\\\0')
(19,memset(source, 'C', 100-1)
(20,source[100-1])
(21,data = (char *)
(22,source)
(23,100)
(24,source)
(25,memset(source, \'C\', 100-1)
(26,source)
(27,source)
(28,)
(29,malloc(50*sizeof(char)
(30,exit(-1)
(31,if(GLOBAL_CONST_FIVE==5)
(32,'C')
(33,100-1)
(34,'\\\\0')
(35,50)
(36,data)
(37,50*sizeof(char)
(38,(char *)
(39,data)
(40,strcpy(data, source)
(41,data)
(42,100-1)
(43,data == NULL)
(44,GLOBAL_CONST_FIVE)
(45,data)
(46,NULL)
(47,if (data == NULL)
(48,100)
(49,0)
(50,1)
(51,1)
(52,char *)
(53,NULL)
(54,data = NULL)
(55,sizeof(char)
(56,data)
(57,GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^