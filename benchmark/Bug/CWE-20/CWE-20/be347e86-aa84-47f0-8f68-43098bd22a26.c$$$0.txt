-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_04_bad()
CWE190_Integer_Overflow__char_rand_preinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,11,0)
(7,3,0)
(22,3,0)
(23,9,0)
(18,5,0)
(11,0,0)
(16,20,0)
(25,26,0)
(20,11,0)
(3,9,0)
(21,17,0)
(4,11,0)
(26,25,0)
(26,13,0)
(26,11,0)
(20,17,0)
(15,24,0)
(12,24,0)
(13,26,0)
(5,17,0)
(17,10,0)
(24,17,0)
(2,9,0)
(20,3,0)
(11,26,0)
(1,9,0)
(24,3,0)
(5,24,0)
(5,18,1)
(4,8,1)
(19,5,1)
(13,4,1)
(24,12,1)
(12,15,1)
(20,3,1)
(3,22,1)
(22,7,1)
(16,14,1)
(26,25,1)
(15,20,1)
(20,16,1)
(24,3,1)
(14,11,1)
(26,13,1)
(11,26,1)
(18,24,1)
(20,11,1)
(24,11,1)
(19,14,1)
(14,8,1)
(8,3,1)
(5,24,1)
(26,13,2)
(5,14,2)
(13,8,2)
(26,8,2)
(16,14,2)
(18,14,2)
(5,24,2)
(11,8,2)
(24,11,2)
(24,14,2)
(12,14,2)
(11,26,2)
(15,14,2)
(20,14,2)
(26,25,2)
(4,8,2)
(20,3,2)
(20,11,2)
(24,3,2)
-----------------------------------
(0,)
(1,if(STATIC_CONST_TRUE)
(2,if(STATIC_CONST_TRUE)
(3,data = \' \')
(4,data)
(5,printHexCharLine(result)
(6,data = ' ')
(7,data)
(8,STATIC_CONST_TRUE)
(9,)
(10,)
(11,data = (char)
(12,data)
(13,RAND32()
(14,STATIC_CONST_TRUE)
(15,result)
(16,data)
(17,)
(18,result)
(19,RET)
(20,++data)
(21,result)
(22,' ')
(23,data)
(24,result = data)
(25,char)
(26,(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^