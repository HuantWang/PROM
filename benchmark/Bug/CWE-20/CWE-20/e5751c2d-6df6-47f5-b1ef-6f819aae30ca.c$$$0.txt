-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_09_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
30,31
32,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
89,91
89,92
90,91
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
106,107
107,108
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,31,36,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,93,95,100,101,104,105,108,114,116,119,121,125,129,130
-----computeFrom-----
34,35
34,36
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
98,99
98,100
102,103
102,104
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_09_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_09_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_09_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(27,16,0)
(12,41,0)
(60,21,0)
(56,6,0)
(61,33,0)
(58,50,0)
(38,51,0)
(42,47,0)
(19,28,0)
(39,53,0)
(25,6,0)
(29,30,0)
(54,47,0)
(26,5,0)
(7,14,0)
(3,41,0)
(46,33,0)
(18,41,0)
(59,42,0)
(16,28,0)
(53,21,0)
(21,53,0)
(47,2,0)
(22,50,0)
(43,5,0)
(13,0,0)
(16,7,0)
(24,41,0)
(52,43,0)
(4,9,0)
(47,42,0)
(49,16,0)
(2,9,0)
(19,43,0)
(36,4,0)
(50,5,0)
(10,12,0)
(0,41,0)
(28,16,0)
(45,2,0)
(48,44,0)
(37,6,0)
(40,6,0)
(3,38,0)
(55,7,0)
(11,62,0)
(38,12,0)
(32,7,0)
(31,43,0)
(8,3,0)
(62,30,0)
(5,6,0)
(17,30,0)
(12,38,0)
(42,30,0)
(53,30,0)
(34,42,0)
(21,4,0)
(44,41,0)
(15,12,0)
(3,7,0)
(28,19,0)
(20,53,0)
(1,3,0)
(35,44,0)
(33,30,0)
(19,28,1)
(47,42,1)
(21,60,1)
(3,1,1)
(35,41,1)
(53,20,1)
(36,21,1)
(53,30,1)
(32,55,1)
(0,41,1)
(39,33,1)
(17,7,1)
(60,53,1)
(4,36,1)
(30,29,1)
(41,18,1)
(27,49,1)
(3,7,1)
(0,13,1)
(28,16,1)
(23,19,1)
(49,44,1)
(44,48,1)
(20,39,1)
(62,11,1)
(17,57,1)
(11,2,1)
(34,59,1)
(42,34,1)
(10,15,1)
(13,38,1)
(42,30,1)
(29,17,1)
(33,30,1)
(3,41,1)
(7,32,1)
(1,8,1)
(44,41,1)
(62,30,1)
(45,47,1)
(54,42,1)
(12,41,1)
(46,30,1)
(61,46,1)
(35,0,1)
(46,62,1)
(8,44,1)
(33,61,1)
(21,53,1)
(2,45,1)
(48,35,1)
(47,54,1)
(16,27,1)
(55,57,1)
(15,3,1)
(12,10,1)
(16,7,1)
(38,12,1)
(59,4,1)
(24,33,1)
(18,24,1)
(32,57,2)
(11,33,2)
(35,44,2)
(10,44,2)
(12,41,2)
(13,44,2)
(39,33,2)
(61,33,2)
(53,30,2)
(8,44,2)
(4,33,2)
(3,41,2)
(44,41,2)
(59,33,2)
(46,33,2)
(16,7,2)
(33,33,2)
(53,33,2)
(3,7,2)
(7,57,2)
(12,44,2)
(19,28,2)
(20,33,2)
(0,44,2)
(55,57,2)
(0,41,2)
(36,33,2)
(45,33,2)
(38,44,2)
(1,44,2)
(2,33,2)
(3,44,2)
(44,44,2)
(21,53,2)
(47,33,2)
(38,12,2)
(47,42,2)
(34,33,2)
(48,44,2)
(21,33,2)
(54,33,2)
(60,33,2)
(62,33,2)
(62,30,2)
(42,30,2)
(15,44,2)
(28,16,2)
(42,33,2)
(33,30,2)
-----------------------------------
(0,i++)
(1,i)
(2,source[i].intTwo = 0)
(3,data[i])
(4,source[i].intOne = 0)
(5,)
(6,)
(7,data = dataBadBuffer)
(8,data)
(9,)
(10,i)
(11,i)
(12,source[i])
(13,i)
(14,)
(15,source)
(16,data[0])
(17,i)
(18,0)
(19,printStructLine(&data[0])
(20,i)
(21,source[i].intOne)
(22,i)
(23,RET)
(24,i)
(25,data)
(26,source)
(27,0)
(28,&data[0])
(29,0)
(30,i = 0)
(31,for (i = 0; i < 100; i++)
(32,dataBadBuffer)
(33,i < 100)
(34,i)
(35,i)
(36,0)
(37,dataBadBuffer)
(38,data[i] = source[i])
(39,source)
(40,if(GLOBAL_CONST_TRUE)
(41,i = 0)
(42,source[i])
(43,)
(44,i < 100)
(45,0)
(46,i)
(47,source[i].intTwo)
(48,100)
(49,data)
(50,)
(51,)
(52,i)
(53,source[i])
(54,intTwo)
(55,data)
(56,dataGoodBuffer)
(57,GLOBAL_CONST_TRUE)
(58,for (i = 0; i < 100; i++)
(59,source)
(60,intOne)
(61,100)
(62,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^