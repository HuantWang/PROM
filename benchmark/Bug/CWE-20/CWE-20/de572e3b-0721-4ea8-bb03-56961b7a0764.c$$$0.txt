-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,80,84,86,90,92
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,30,0)
(0,40,0)
(6,39,0)
(12,23,0)
(26,29,0)
(40,39,0)
(34,11,0)
(19,40,0)
(25,20,0)
(18,32,0)
(22,25,0)
(3,26,0)
(12,22,0)
(25,23,0)
(10,39,0)
(17,29,0)
(8,3,0)
(27,23,0)
(18,17,0)
(11,26,0)
(33,3,0)
(23,20,0)
(1,18,0)
(35,30,0)
(32,18,0)
(31,41,0)
(21,25,0)
(11,40,0)
(41,20,0)
(28,20,0)
(7,26,0)
(16,4,0)
(24,32,0)
(41,26,0)
(9,12,0)
(14,23,0)
(2,16,0)
(13,29,0)
(41,40,0)
(20,39,0)
(22,12,0)
(5,25,0)
(29,13,0)
(16,2,0)
(29,17,0)
(25,40,0)
(17,18,0)
(15,22,0)
(25,22,0)
(37,2,0)
(11,20,0)
(25,26,0)
(29,26,0)
(24,1,1)
(11,26,1)
(21,5,1)
(34,41,1)
(25,23,1)
(41,40,1)
(3,8,1)
(14,38,1)
(8,33,1)
(11,34,1)
(27,14,1)
(14,16,1)
(32,24,1)
(29,17,1)
(25,40,1)
(2,37,1)
(40,19,1)
(7,38,1)
(36,11,1)
(5,23,1)
(22,12,1)
(29,13,1)
(12,9,1)
(16,2,1)
(19,0,1)
(3,26,1)
(9,21,1)
(15,12,1)
(23,27,1)
(25,26,1)
(41,26,1)
(25,22,1)
(37,3,1)
(38,40,1)
(12,23,1)
(18,32,1)
(41,31,1)
(14,3,1)
(11,40,1)
(22,15,1)
(1,7,1)
(26,29,1)
(33,26,1)
(31,25,1)
(17,18,1)
(18,38,2)
(1,38,2)
(25,22,2)
(18,32,2)
(11,26,2)
(16,2,2)
(22,12,2)
(41,40,2)
(25,23,2)
(3,38,2)
(41,26,2)
(7,38,2)
(29,13,2)
(25,40,2)
(29,38,2)
(29,17,2)
(24,38,2)
(25,26,2)
(3,26,2)
(12,23,2)
(16,3,2)
(37,3,2)
(33,38,2)
(17,38,2)
(8,38,2)
(26,29,2)
(32,38,2)
(26,38,2)
(2,3,2)
(11,40,2)
(17,18,2)
-----------------------------------
(0,data)
(1,10)
(2,-1)
(3,data == NULL)
(4,)
(5,data)
(6,data)
(7,data)
(8,NULL)
(9,source)
(10,if(STATIC_CONST_TRUE)
(11,free(data)
(12,wcslen(source)
(13,wchar_t *)
(14,source)
(15,1)
(16,exit(-1)
(17,malloc(10*sizeof(wchar_t)
(18,10*sizeof(wchar_t)
(19,NULL)
(20,)
(21,source)
(22,wcslen(source)
(23,source[10+1] = SRC_STRING)
(24,wchar_t)
(25,wcsncpy(data, source, wcslen(source)
(26,data = (wchar_t *)
(27,SRC_STRING)
(28,source)
(29,(wchar_t *)
(30,)
(31,data)
(32,sizeof(wchar_t)
(33,data)
(34,data)
(35,if (data == NULL)
(36,RET)
(37,1)
(38,STATIC_CONST_TRUE)
(39,)
(40,data = NULL)
(41,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^