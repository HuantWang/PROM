-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        size_t i, destLen;
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        destLen = strlen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
71,74
71,75
71,76
71,77
71,78
71,79
71,80
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
83,84
83,85
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
94,95
94,96
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
115,118
115,119
116,117
117,118
117,119
118,119
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
131,133
132,133
132,134
133,134
135,136
137,138
137,139
138,139
140,141
142,143
143,144
143,145
144,145
144,146
145,146
147,148
147,149
151,152
152,153
152,154
153,154
155,156
157,158
158,159
158,160
159,160
161,162
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,60,61,66,68,69,70,75,77,79,82,84,86,90,92,93,95,96,101,103,104,105,109,112,114,119,120,123,125,128,134,136,139,141,146,148,149,150,154,156,160,162
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
63,64
63,65
67,68
67,69
94,95
94,96
98,99
98,100
102,103
102,104
107,108
107,109
117,118
117,119
121,122
121,123
131,132
131,133
143,144
143,145
147,148
147,149
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_02_bad(){    char * data;    data = NULL;    if(1)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_loop_02_bad()
CWE126_Buffer_Overread__malloc_char_loop_02_bad
{    char * data;    data = NULL;    if(1)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
1
{        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(0,10,0)
(9,61,0)
(2,91,0)
(77,1,0)
(3,37,0)
(28,3,0)
(36,53,0)
(10,0,0)
(15,17,0)
(75,72,0)
(65,45,0)
(37,67,0)
(73,21,0)
(85,40,0)
(41,74,0)
(5,39,0)
(53,82,0)
(89,37,0)
(83,12,0)
(10,72,0)
(3,82,0)
(4,30,0)
(35,73,0)
(39,52,0)
(62,5,0)
(81,39,0)
(12,82,0)
(17,82,0)
(6,37,0)
(38,21,0)
(33,10,0)
(11,27,0)
(69,79,0)
(73,79,0)
(87,17,0)
(39,72,0)
(56,55,0)
(72,56,0)
(84,82,0)
(59,49,0)
(78,73,0)
(16,79,0)
(60,32,0)
(21,26,0)
(39,5,0)
(63,59,0)
(30,20,0)
(82,67,0)
(71,74,0)
(45,17,0)
(55,56,0)
(1,37,0)
(46,61,0)
(14,41,0)
(50,26,0)
(2,1,0)
(41,43,0)
(49,54,0)
(74,41,0)
(29,5,0)
(8,7,0)
(86,67,0)
(19,30,0)
(31,82,0)
(61,72,0)
(58,45,0)
(17,45,0)
(40,32,0)
(32,53,0)
(1,2,0)
(56,43,0)
(70,82,0)
(20,30,0)
(22,0,0)
(24,2,0)
(88,52,0)
(34,24,0)
(3,72,0)
(43,41,0)
(44,1,0)
(13,39,0)
(1,72,0)
(27,52,0)
(76,82,0)
(32,40,0)
(23,82,0)
(43,56,0)
(42,84,0)
(56,72,0)
(49,59,0)
(7,79,0)
(24,79,0)
(26,21,0)
(92,40,0)
(1,79,0)
(20,12,0)
(72,52,0)
(57,0,0)
(51,20,0)
(80,24,0)
(21,82,0)
(47,67,0)
(10,27,0)
(28,84,1)
(39,72,1)
(27,11,1)
(10,72,1)
(61,72,1)
(83,20,1)
(62,13,1)
(2,1,1)
(12,83,1)
(51,73,1)
(20,30,1)
(71,14,1)
(3,37,1)
(56,55,1)
(3,28,1)
(61,9,1)
(63,61,1)
(73,79,1)
(24,80,1)
(78,79,1)
(15,66,1)
(44,77,1)
(85,60,1)
(84,42,1)
(74,71,1)
(5,29,1)
(35,78,1)
(14,75,1)
(49,59,1)
(39,5,1)
(73,21,1)
(1,37,1)
(1,72,1)
(50,38,1)
(3,72,1)
(57,22,1)
(40,92,1)
(48,3,1)
(21,26,1)
(42,12,1)
(0,57,1)
(30,19,1)
(1,79,1)
(36,32,1)
(15,27,1)
(10,0,1)
(32,40,1)
(7,8,1)
(7,79,1)
(59,63,1)
(81,61,1)
(24,79,1)
(80,34,1)
(45,58,1)
(60,17,1)
(53,36,1)
(92,85,1)
(66,37,1)
(65,87,1)
(56,43,1)
(29,62,1)
(19,4,1)
(1,44,1)
(38,53,1)
(9,46,1)
(41,74,1)
(58,65,1)
(17,45,1)
(73,35,1)
(87,15,1)
(46,72,1)
(78,7,1)
(79,69,1)
(4,51,1)
(22,33,1)
(11,10,1)
(77,24,1)
(13,81,1)
(8,2,1)
(37,6,1)
(33,39,1)
(34,73,1)
(72,56,1)
(43,41,1)
(81,49,1)
(16,21,1)
(69,16,1)
(26,50,1)
(75,66,1)
(6,89,1)
(63,61,2)
(44,73,2)
(17,45,2)
(46,66,2)
(34,73,2)
(9,66,2)
(61,66,2)
(80,73,2)
(8,73,2)
(81,66,2)
(72,66,2)
(20,30,2)
(43,66,2)
(27,66,2)
(35,73,2)
(56,43,2)
(59,61,2)
(73,21,2)
(10,66,2)
(49,61,2)
(73,73,2)
(3,37,2)
(29,66,2)
(39,5,2)
(21,26,2)
(56,66,2)
(1,72,2)
(5,66,2)
(24,73,2)
(62,66,2)
(39,72,2)
(33,66,2)
(78,73,2)
(74,66,2)
(73,79,2)
(10,0,2)
(75,66,2)
(7,79,2)
(41,66,2)
(56,55,2)
(72,56,2)
(0,66,2)
(1,79,2)
(2,1,2)
(1,37,2)
(13,66,2)
(1,73,2)
(43,41,2)
(22,66,2)
(32,40,2)
(24,79,2)
(10,72,2)
(11,66,2)
(2,73,2)
(39,66,2)
(3,72,2)
(49,59,2)
(14,66,2)
(77,73,2)
(71,66,2)
(41,74,2)
(57,66,2)
(7,73,2)
(61,72,2)
-----------------------------------
(0,50-1)
(1,data[i])
(2,dest[i] = data[i])
(3,free(data)
(4,100)
(5,50-1)
(6,NULL)
(7,i++)
(8,i)
(9,NULL)
(10,data[50-1])
(11,\'\\\\0\')
(12,dest[100-1] = '\\\\0')
(13,\'A\')
(14,50)
(15,dest)
(16,i)
(17,memset(dest, 'C', 100-1)
(18,'\\\\0')
(19,1)
(20,dest[100-1])
(21,destLen = strlen(dest)
(22,50)
(23,i)
(24,dest[i])
(25,memset(dest, \'C\', 100-1)
(26,strlen(dest)
(27,data[50-1] = \'\\\\0\')
(28,data)
(29,1)
(30,100-1)
(31,dest)
(32,dest[100-1])
(33,data)
(34,dest)
(35,destLen)
(36,'\\\\0')
(37,data = NULL)
(38,destLen)
(39,memset(data, 'A', 50-1)
(40,100-1)
(41,50*sizeof(char)
(42,dest)
(43,malloc(50*sizeof(char)
(44,i)
(45,100-1)
(46,data)
(47,if(1)
(48,RET)
(49,exit(-1)
(50,dest)
(51,dest)
(52,)
(53,dest[100-1] = '\\\\0')
(54,)
(55,char *)
(56,(char *)
(57,1)
(58,1)
(59,-1)
(60,dest)
(61,data == NULL)
(62,50)
(63,1)
(64,'A')
(65,100)
(66,1)
(67,)
(68,memset(data, \'A\', 50-1)
(69,0)
(70,for (i = 0; i < destLen; i++)
(71,char)
(72,data = (char *)
(73,i < destLen)
(74,sizeof(char)
(75,data)
(76,destLen)
(77,data)
(78,i)
(79,i = 0)
(80,i)
(81,data)
(82,)
(83,'\\\\0')
(84,printLine(dest)
(85,100)
(86,data)
(87,'C')
(88,if (data == NULL)
(89,data)
(90,data[50-1] = '\\\\0')
(91,)
(92,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^