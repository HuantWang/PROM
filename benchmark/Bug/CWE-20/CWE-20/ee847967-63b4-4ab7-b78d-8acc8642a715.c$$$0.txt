-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad()
{
    if(staticTrue)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printLine((char *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid->charFirst);
            printLine((char *)structCharVoid->voidSecond);
            free(structCharVoid);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
53,55
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
80,81
82,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
96,97
96,98
97,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
129,130
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,14,16,17,22,24,27,31,32,36,38,43,45,50,51,54,56,58,62,65,67,70,71,75,78,79,81,86,92,93,101,102,105,106,107,108,112,115,117,120,121,125,128,130,133,134,138,140
-----computeFrom-----
34,35
34,36
47,48
47,49
88,89
88,90
94,95
94,96
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad(){    if(staticTrue)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad
{    if(staticTrue)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
if(staticTrue)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
staticTrue
staticTrue
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memcpy
memcpy
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
free(structCharVoid);
free(structCharVoid)
free
free
structCharVoid
structCharVoid
-----joern-----
(55,45,0)
(68,13,0)
(72,49,0)
(28,30,0)
(49,29,0)
(46,51,0)
(55,33,0)
(71,51,0)
(21,17,0)
(44,48,0)
(7,45,0)
(50,45,0)
(11,40,0)
(23,3,0)
(19,2,0)
(34,23,0)
(12,8,0)
(13,34,0)
(56,13,0)
(70,5,0)
(12,58,0)
(29,40,0)
(33,55,0)
(6,56,0)
(59,32,0)
(25,17,0)
(60,67,0)
(26,58,0)
(17,25,0)
(16,13,0)
(34,13,0)
(38,65,0)
(37,68,0)
(3,23,0)
(51,13,0)
(42,16,0)
(35,32,0)
(24,44,0)
(68,38,0)
(29,5,0)
(56,45,0)
(18,13,0)
(62,59,0)
(53,72,0)
(59,55,0)
(10,44,0)
(64,38,0)
(66,45,0)
(32,35,0)
(29,49,0)
(44,13,0)
(67,13,0)
(35,45,0)
(32,59,0)
(30,13,0)
(48,44,0)
(48,63,0)
(39,51,0)
(36,25,0)
(50,48,0)
(28,25,0)
(40,29,0)
(20,67,0)
(65,38,0)
(34,69,0)
(33,52,0)
(72,13,0)
(38,68,0)
(49,72,0)
(58,12,0)
(38,64,0)
(43,3,0)
(13,45,0)
(0,33,0)
(17,13,0)
(39,40,0)
(52,33,0)
(25,28,0)
(14,68,0)
(5,29,0)
(68,55,0)
(23,34,0)
(41,72,0)
(45,15,0)
(61,4,0)
(2,45,0)
(9,32,0)
(40,39,0)
(27,16,0)
(25,45,0)
(57,17,0)
(65,45,0)
(59,13,0)
(39,2,0)
(48,50,0)
(32,9,0)
(31,59,0)
(63,48,0)
(69,34,0)
(30,28,0)
(16,55,0)
(54,30,0)
(51,39,0)
(56,13,1)
(30,54,1)
(17,13,1)
(67,60,1)
(10,24,1)
(24,2,1)
(20,13,1)
(42,27,1)
(51,13,1)
(25,17,1)
(29,5,1)
(58,26,1)
(54,36,1)
(3,43,1)
(55,33,1)
(71,25,1)
(41,51,1)
(36,17,1)
(48,63,1)
(46,71,1)
(40,11,1)
(29,49,1)
(70,49,1)
(0,16,1)
(44,10,1)
(25,28,1)
(72,13,1)
(68,13,1)
(43,18,1)
(19,39,1)
(34,23,1)
(31,55,1)
(17,21,1)
(33,0,1)
(18,47,1)
(5,70,1)
(40,29,1)
(39,40,1)
(68,55,1)
(32,9,1)
(2,19,1)
(13,34,1)
(49,72,1)
(53,41,1)
(30,13,1)
(35,32,1)
(21,57,1)
(11,29,1)
(56,6,1)
(33,52,1)
(72,53,1)
(27,12,1)
(26,67,1)
(16,13,1)
(38,64,1)
(1,56,1)
(6,65,1)
(65,38,1)
(62,31,1)
(57,35,1)
(38,68,1)
(48,44,1)
(16,42,1)
(28,30,1)
(34,69,1)
(59,62,1)
(32,59,1)
(44,13,1)
(23,3,1)
(59,13,1)
(59,55,1)
(60,20,1)
(68,37,1)
(37,14,1)
(51,46,1)
(14,50,1)
(1,47,1)
(39,51,1)
(50,48,1)
(27,67,1)
(67,13,1)
(12,58,1)
(17,13,2)
(16,13,2)
(72,47,2)
(0,47,2)
(43,47,2)
(38,47,2)
(21,47,2)
(20,47,2)
(40,29,2)
(10,47,2)
(37,47,2)
(16,47,2)
(56,13,2)
(54,47,2)
(18,47,2)
(34,23,2)
(48,63,2)
(65,38,2)
(29,47,2)
(32,9,2)
(44,13,2)
(29,49,2)
(5,47,2)
(29,5,2)
(71,47,2)
(25,17,2)
(49,47,2)
(40,47,2)
(72,13,2)
(44,47,2)
(67,47,2)
(23,47,2)
(53,47,2)
(42,47,2)
(12,58,2)
(13,34,2)
(51,13,2)
(59,13,2)
(28,30,2)
(55,47,2)
(56,47,2)
(35,32,2)
(60,47,2)
(68,47,2)
(25,47,2)
(33,52,2)
(59,55,2)
(48,44,2)
(32,59,2)
(48,47,2)
(3,47,2)
(38,68,2)
(58,67,2)
(2,47,2)
(31,47,2)
(25,28,2)
(50,47,2)
(35,47,2)
(55,33,2)
(50,48,2)
(65,47,2)
(46,47,2)
(13,47,2)
(38,64,2)
(17,47,2)
(51,47,2)
(14,47,2)
(33,47,2)
(36,47,2)
(24,47,2)
(23,3,2)
(57,47,2)
(27,47,2)
(11,47,2)
(34,47,2)
(34,69,2)
(30,13,2)
(6,47,2)
(62,47,2)
(39,47,2)
(68,13,2)
(19,47,2)
(32,47,2)
(28,47,2)
(49,72,2)
(39,51,2)
(12,67,2)
(26,67,2)
(41,47,2)
(67,13,2)
(59,47,2)
(70,47,2)
(30,47,2)
(39,40,2)
(68,55,2)
-----------------------------------
(0,SRC_STR)
(1,RET)
(2,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(3,sizeof(charVoid)
(4,)
(5,sizeof(char)
(6,structCharVoid)
(7,if (structCharVoid == NULL)
(8,)
(9,char *)
(10,charFirst)
(11,1)
(12,exit(-1)
(13,* structCharVoid = (charVoid *)
(14,structCharVoid)
(15,)
(16,structCharVoid->voidSecond)
(17,structCharVoid->charFirst)
(18,structCharVoid)
(19,\'\\\\0\')
(20,structCharVoid)
(21,charFirst)
(22,'\\\\0')
(23,malloc(sizeof(charVoid)
(24,structCharVoid)
(25,memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(26,1)
(27,structCharVoid)
(28,sizeof(*structCharVoid)
(29,sizeof(structCharVoid->charFirst)
(30,*structCharVoid)
(31,structCharVoid)
(32,(char *)
(33,(void *)
(34,(charVoid *)
(35,printLine((char *)
(36,SRC_STR)
(37,voidSecond)
(38,(char *)
(39,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(40,(sizeof(structCharVoid->charFirst)
(41,structCharVoid)
(42,voidSecond)
(43,charVoid)
(44,structCharVoid->charFirst)
(45,)
(46,charFirst)
(47,staticTrue)
(48,(char *)
(49,sizeof(structCharVoid->charFirst)
(50,printLine((char *)
(51,structCharVoid->charFirst)
(52,void *)
(53,charFirst)
(54,structCharVoid)
(55,structCharVoid->voidSecond = (void *)
(56,free(structCharVoid)
(57,structCharVoid)
(58,-1)
(59,structCharVoid->voidSecond)
(60,NULL)
(61,if(staticTrue)
(62,voidSecond)
(63,char *)
(64,char *)
(65,printLine((char *)
(66,structCharVoid)
(67,structCharVoid == NULL)
(68,structCharVoid->voidSecond)
(69,charVoid *)
(70,char)
(71,structCharVoid)
(72,structCharVoid->charFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^