-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_42_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
41,82
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_42_bad(){    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_42_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_42_bad
{    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(5,8,0)
(41,38,0)
(4,33,0)
(8,5,0)
(36,33,0)
(2,4,0)
(19,44,0)
(13,20,0)
(11,13,0)
(3,35,0)
(29,1,0)
(26,16,0)
(17,0,0)
(34,12,0)
(12,33,0)
(31,0,0)
(35,44,0)
(23,19,0)
(28,22,0)
(15,7,0)
(9,22,0)
(21,38,0)
(14,44,0)
(25,35,0)
(12,36,0)
(1,36,0)
(0,36,0)
(13,11,0)
(40,41,0)
(38,3,0)
(6,28,0)
(18,11,0)
(38,44,0)
(43,3,0)
(37,33,0)
(22,38,0)
(7,41,0)
(27,4,0)
(3,38,0)
(39,36,0)
(5,22,0)
(30,19,0)
(36,8,0)
(42,35,0)
(4,36,0)
(1,33,0)
(8,32,0)
(22,28,0)
(22,5,0)
(32,8,0)
(41,7,0)
(10,26,0)
(8,36,0)
(21,35,1)
(8,32,1)
(41,38,1)
(13,11,1)
(27,2,1)
(24,26,1)
(26,10,1)
(9,39,1)
(4,27,1)
(5,22,1)
(38,3,1)
(17,36,1)
(35,42,1)
(41,7,1)
(10,41,1)
(43,21,1)
(29,4,1)
(1,36,1)
(8,5,1)
(24,12,1)
(7,15,1)
(2,0,1)
(12,34,1)
(0,31,1)
(18,0,1)
(3,43,1)
(36,8,1)
(6,9,1)
(40,38,1)
(11,18,1)
(31,17,1)
(3,35,1)
(34,1,1)
(28,6,1)
(0,36,1)
(22,28,1)
(12,36,1)
(1,29,1)
(2,13,1)
(15,40,1)
(22,38,1)
(39,41,1)
(4,36,1)
(42,25,1)
(0,36,2)
(41,7,2)
(2,41,2)
(1,41,2)
(29,41,2)
(12,41,2)
(36,8,2)
(34,41,2)
(4,36,2)
(13,11,2)
(27,41,2)
(5,41,2)
(12,36,2)
(11,0,2)
(39,41,2)
(22,38,2)
(4,41,2)
(1,36,2)
(36,41,2)
(13,0,2)
(3,35,2)
(5,22,2)
(38,3,2)
(8,41,2)
(28,41,2)
(22,41,2)
(6,41,2)
(26,41,2)
(0,41,2)
(8,32,2)
(31,41,2)
(10,41,2)
(17,41,2)
(22,28,2)
(8,5,2)
(41,38,2)
(18,0,2)
(9,41,2)
-----------------------------------
(0,myString == NULL)
(1,printWLine(myString)
(2,myString)
(3,badSource(data)
(4,wcscpy(myString, HELLO_STRING)
(5,malloc(data*sizeof(wchar_t)
(6,wchar_t)
(7,wcslen(HELLO_STRING)
(8,(wchar_t *)
(9,data)
(10,"Input is less than the length of the source string")
(11,-1)
(12,free(myString)
(13,exit(-1)
(14,data)
(15,HELLO_STRING)
(16,)
(17,myString)
(18,1)
(19,)
(20,)
(21,data)
(22,data*sizeof(wchar_t)
(23,myString)
(24,RET)
(25,data)
(26,printLine("Input is less than the length of the source string")
(27,HELLO_STRING)
(28,sizeof(wchar_t)
(29,myString)
(30,if (data > wcslen(HELLO_STRING)
(31,NULL)
(32,wchar_t *)
(33,)
(34,myString)
(35,data = 0)
(36,myString = (wchar_t *)
(37,if (myString == NULL)
(38,data = badSource(data)
(39,myString)
(40,data)
(41,data > wcslen(HELLO_STRING)
(42,0)
(43,data)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^