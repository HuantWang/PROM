-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_wchar_t_loop_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a small buffer */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 50-1); /* fill with 'A's */
        data[50-1] = L'\0'; /* null terminate */
    }
    {
        size_t i, destLen;
        wchar_t dest[100];
        wmemset(dest, L'C', 100-1);
        dest[100-1] = L'\0'; /* null terminate */
        destLen = wcslen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = L'\0';
        printWLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
73,76
73,77
73,78
73,79
73,80
73,81
73,82
74,75
75,76
75,77
75,78
76,77
78,79
80,81
82,83
83,84
83,85
85,86
85,87
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
96,97
96,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
117,119
117,120
117,121
118,119
119,120
119,121
120,121
123,124
123,125
124,125
126,127
128,129
129,130
131,132
132,133
133,134
133,135
134,135
134,136
135,136
137,138
139,140
139,141
140,141
142,143
144,145
145,146
145,147
146,147
146,148
147,148
149,150
149,151
153,154
154,155
154,156
155,156
157,158
159,160
160,161
160,162
161,162
163,164
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,77,79,81,84,86,88,92,94,95,97,98,103,105,106,107,111,114,116,121,122,125,127,130,136,138,141,143,148,150,151,152,156,158,162,164
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
96,97
96,98
100,101
100,102
104,105
104,106
109,110
109,111
119,120
119,121
123,124
123,125
133,134
133,135
145,146
145,147
149,150
149,151
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_wchar_t_loop_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_wchar_t_loop_11_bad()
CWE126_Buffer_Overread__malloc_wchar_t_loop_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 50-1);
wmemset(data, L'A', 50-1)
wmemset
wmemset
data
data
L'A'
50-1
50
1
data[50-1] = L'\0';
data[50-1] = L'\0'
data[50-1]
data
data
50-1
50
1
L'\0'
{        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
wchar_t dest[100];
wchar_t dest[100];
wchar_t
dest[100]
dest
[100]
100
wmemset(dest, L'C', 100-1);
wmemset(dest, L'C', 100-1)
wmemset
wmemset
dest
dest
L'C'
100-1
100
1
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
destLen = wcslen(dest);
destLen = wcslen(dest)
destLen
destLen
wcslen(dest)
wcslen
wcslen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(49,21,0)
(22,46,0)
(36,42,0)
(56,42,0)
(9,56,0)
(27,3,0)
(34,3,0)
(55,30,0)
(31,57,0)
(41,3,0)
(17,34,0)
(33,34,0)
(8,24,0)
(50,1,0)
(8,42,0)
(35,11,0)
(24,13,0)
(30,34,0)
(31,35,0)
(32,13,0)
(11,35,0)
(13,42,0)
(44,36,0)
(25,4,0)
(54,42,0)
(13,1,0)
(58,34,0)
(51,34,0)
(12,34,0)
(19,3,0)
(21,25,0)
(37,19,0)
(46,22,0)
(6,2,0)
(40,34,0)
(35,31,0)
(57,31,0)
(1,31,0)
(33,19,0)
(13,24,0)
(24,23,0)
(26,11,0)
(53,33,0)
(39,42,0)
(25,21,0)
(33,1,0)
(7,46,0)
(1,2,0)
(38,50,0)
(0,8,0)
(10,22,0)
(5,13,0)
(11,26,0)
(52,11,0)
(28,1,0)
(18,19,0)
(45,2,0)
(43,36,0)
(14,8,0)
(15,50,0)
(31,1,0)
(46,34,0)
(36,46,0)
(47,34,0)
(29,26,0)
(13,19,0)
(36,43,1)
(13,42,1)
(58,20,1)
(31,35,1)
(26,29,1)
(19,18,1)
(31,57,1)
(39,46,1)
(33,19,1)
(7,58,1)
(12,36,1)
(9,24,1)
(13,19,1)
(49,50,1)
(5,8,1)
(11,26,1)
(54,39,1)
(1,31,1)
(42,54,1)
(8,42,1)
(21,49,1)
(36,46,1)
(18,37,1)
(13,32,1)
(8,14,1)
(56,9,1)
(14,0,1)
(50,15,1)
(15,38,1)
(36,42,1)
(44,42,1)
(22,10,1)
(44,56,1)
(55,12,1)
(32,5,1)
(56,42,1)
(58,6,1)
(6,50,1)
(24,13,1)
(16,33,1)
(25,21,1)
(20,19,1)
(52,28,1)
(29,52,1)
(33,1,1)
(13,1,1)
(46,22,1)
(50,1,1)
(35,11,1)
(10,7,1)
(38,1,1)
(28,20,1)
(30,55,1)
(53,30,1)
(6,25,1)
(33,53,1)
(0,36,1)
(43,44,1)
(28,20,2)
(36,36,2)
(56,36,2)
(35,20,2)
(35,11,2)
(31,35,2)
(25,21,2)
(1,20,2)
(13,1,2)
(26,20,2)
(50,1,2)
(52,20,2)
(15,20,2)
(21,50,2)
(24,36,2)
(14,36,2)
(5,36,2)
(38,20,2)
(43,36,2)
(33,19,2)
(6,20,2)
(25,50,2)
(1,31,2)
(33,1,2)
(11,26,2)
(32,36,2)
(24,13,2)
(13,19,2)
(8,42,2)
(8,36,2)
(0,36,2)
(29,20,2)
(44,36,2)
(9,36,2)
(11,20,2)
(31,20,2)
(13,36,2)
(31,57,2)
(36,46,2)
(49,50,2)
(46,22,2)
(50,20,2)
(56,42,2)
(13,42,2)
(36,42,2)
-----------------------------------
(0,dest)
(1,data = (wchar_t *)
(2,)
(3,)
(4,)
(5,data)
(6,'\\\\0')
(7,destLen)
(8,dest[i])
(9,i)
(10,dest)
(11,50*sizeof(wchar_t)
(12,'\\\\0')
(13,data[i])
(14,i)
(15,NULL)
(16,RET)
(17,for (i = 0; i < destLen; i++)
(18,NULL)
(19,data = NULL)
(20,globalReturnsTrue()
(21,-1)
(22,wcslen(dest)
(23,)
(24,dest[i] = data[i])
(25,exit(-1)
(26,sizeof(wchar_t)
(27,data)
(28,data)
(29,wchar_t)
(30,printWLine(dest)
(31,(wchar_t *)
(32,i)
(33,free(data)
(34,)
(35,malloc(50*sizeof(wchar_t)
(36,i < destLen)
(37,data)
(38,data)
(39,i)
(40,i)
(41,if(globalReturnsTrue()
(42,i = 0)
(43,destLen)
(44,i)
(45,if (data == NULL)
(46,destLen = wcslen(dest)
(47,destLen)
(48,\'\\\\0\')
(49,1)
(50,data == NULL)
(51,dest)
(52,50)
(53,data)
(54,0)
(55,dest)
(56,i++)
(57,wchar_t *)
(58,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^