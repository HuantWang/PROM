-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_connect_socket_execlp_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
29,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
68,71
68,72
68,73
68,74
68,75
68,76
68,77
68,78
68,79
68,80
68,81
68,82
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
95,96
98,99
99,100
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
130,131
132,133
134,135
134,136
135,136
135,137
136,137
136,138
136,139
136,140
137,138
139,140
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
150,151
151,152
152,153
154,155
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
162,167
163,164
165,166
167,168
167,169
168,169
168,170
170,171
172,173
173,174
173,175
174,175
176,177
178,179
178,180
179,180
180,181
180,182
183,184
184,185
184,186
185,186
185,187
187,188
191,192
191,193
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
199,200
202,203
204,205
205,206
205,207
206,207
206,208
207,208
209,210
209,211
210,211
212,213
212,214
213,214
215,216
216,217
216,218
220,221
221,222
221,223
222,223
224,225
224,226
224,227
225,226
227,228
230,231
230,232
231,232
233,234
234,235
235,236
235,237
236,237
237,238
240,241
241,242
241,243
242,243
244,245
244,246
244,247
245,246
247,248
250,251
250,252
251,252
253,254
254,255
255,256
255,257
256,257
257,258
261,262
261,263
262,263
262,264
263,264
265,266
267,268
268,269
269,270
269,271
270,271
272,273
274,275
275,276
275,277
276,277
278,279
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,37,39,42,44,45,49,51,54,58,60,64,66,72,75,77,79,81,85,87,89,93,96,97,101,106,107,109,115,116,117,120,122,127,128,131,133,138,140,144,146,149,153,155,157,161,164,166,169,171,175,177,181,182,186,188,189,190,195,197,200,201,203,208,211,214,217,218,219,223,226,228,229,232,238,239,243,246,248,249,252,258,259,260,264,266,271,273,277,279
-----computeFrom-----
23,24
23,25
70,71
70,72
83,84
83,85
103,104
103,105
111,112
111,113
124,125
124,126
135,136
135,137
159,160
159,161
173,174
173,175
178,179
178,180
184,185
184,186
185,186
185,187
192,193
192,194
193,194
193,195
198,199
198,200
205,206
205,207
209,210
209,211
212,213
212,214
221,222
221,223
235,236
235,237
241,242
241,243
255,256
255,257
262,263
262,264
-----guardedBy-----
264,273
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_connect_socket_execlp_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_bad()
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data);
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data)
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink
CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink
data
data
-----joern-----
(63,4,0)
(34,153,0)
(5,60,0)
(78,89,0)
(168,28,0)
(83,20,0)
(11,56,0)
(18,53,0)
(15,55,0)
(136,177,0)
(150,87,0)
(142,115,0)
(27,98,0)
(138,9,0)
(74,67,0)
(124,180,0)
(111,173,0)
(173,111,0)
(83,137,0)
(133,67,0)
(128,173,0)
(97,134,0)
(3,127,0)
(139,105,0)
(49,40,0)
(17,135,0)
(60,153,0)
(102,130,0)
(161,149,0)
(103,89,0)
(134,170,0)
(105,122,0)
(2,67,0)
(164,89,0)
(62,68,0)
(93,142,0)
(146,153,0)
(159,174,0)
(110,177,0)
(130,102,0)
(175,105,0)
(89,122,0)
(78,106,0)
(22,105,0)
(136,67,0)
(169,145,0)
(68,53,0)
(149,67,0)
(132,89,0)
(30,17,0)
(39,6,0)
(91,162,0)
(97,40,0)
(33,102,0)
(109,111,0)
(87,98,0)
(125,157,0)
(108,26,0)
(162,60,0)
(68,178,0)
(69,105,0)
(82,60,0)
(127,173,0)
(20,83,0)
(58,105,0)
(130,37,0)
(157,7,0)
(37,130,0)
(180,112,0)
(112,132,0)
(177,136,0)
(21,83,0)
(86,67,0)
(68,62,0)
(72,146,0)
(0,157,0)
(54,138,0)
(169,146,0)
(137,83,0)
(6,120,0)
(156,112,0)
(36,59,0)
(59,20,0)
(119,105,0)
(128,113,0)
(165,70,0)
(178,79,0)
(115,67,0)
(35,17,0)
(128,70,0)
(38,83,0)
(101,173,0)
(65,163,0)
(89,28,0)
(178,94,0)
(28,122,0)
(40,97,0)
(98,27,0)
(170,67,0)
(71,111,0)
(85,26,0)
(25,6,0)
(73,104,0)
(92,43,0)
(10,137,0)
(39,106,0)
(148,161,0)
(149,174,0)
(129,126,0)
(40,55,0)
(173,67,0)
(29,102,0)
(81,175,0)
(153,34,0)
(98,56,0)
(17,67,0)
(131,170,0)
(169,83,0)
(77,42,0)
(53,68,0)
(75,94,0)
(146,89,0)
(66,105,0)
(162,20,0)
(20,162,0)
(140,37,0)
(152,135,0)
(134,89,0)
(26,67,0)
(99,111,0)
(70,105,0)
(51,79,0)
(7,136,0)
(104,122,0)
(172,115,0)
(76,122,0)
(97,153,0)
(57,28,0)
(47,39,0)
(46,105,0)
(19,27,0)
(64,67,0)
(41,97,0)
(144,142,0)
(43,173,0)
(32,61,0)
(13,153,0)
(56,98,0)
(94,178,0)
(80,122,0)
(166,105,0)
(7,157,0)
(106,67,0)
(134,97,0)
(180,138,0)
(107,128,0)
(40,137,0)
(155,37,0)
(60,162,0)
(179,105,0)
(1,134,0)
(23,161,0)
(83,173,0)
(112,67,0)
(14,34,0)
(167,132,0)
(153,105,0)
(137,67,0)
(37,137,0)
(55,40,0)
(178,173,0)
(146,169,0)
(127,70,0)
(88,56,0)
(79,178,0)
(84,43,0)
(118,146,0)
(24,132,0)
(104,89,0)
(95,78,0)
(20,59,0)
(98,87,0)
(135,17,0)
(16,35,0)
(178,68,0)
(102,137,0)
(132,112,0)
(158,127,0)
(44,70,0)
(50,7,0)
(17,35,0)
(45,178,0)
(174,149,0)
(145,169,0)
(48,78,0)
(83,169,0)
(100,175,0)
(34,89,0)
(160,105,0)
(12,106,0)
(96,67,0)
(106,78,0)
(40,137,1)
(63,147,1)
(39,47,1)
(37,155,1)
(36,169,1)
(118,21,1)
(155,140,1)
(83,20,1)
(100,81,1)
(55,15,1)
(23,136,1)
(178,68,1)
(21,10,1)
(65,79,1)
(10,79,1)
(146,89,1)
(79,51,1)
(146,72,1)
(68,62,1)
(110,7,1)
(7,50,1)
(159,161,1)
(28,168,1)
(125,115,1)
(92,173,1)
(104,73,1)
(54,180,1)
(88,52,1)
(48,95,1)
(15,49,1)
(101,26,1)
(59,36,1)
(130,37,1)
(97,40,1)
(178,173,1)
(175,100,1)
(147,127,1)
(153,34,1)
(24,167,1)
(73,147,1)
(83,173,1)
(11,88,1)
(127,3,1)
(26,85,1)
(130,102,1)
(102,29,1)
(177,110,1)
(17,135,1)
(165,175,1)
(158,32,1)
(56,11,1)
(78,48,1)
(3,158,1)
(149,174,1)
(170,131,1)
(52,138,1)
(161,148,1)
(20,162,1)
(35,16,1)
(16,43,1)
(72,118,1)
(169,146,1)
(60,153,1)
(147,128,1)
(8,112,1)
(102,137,1)
(128,70,1)
(137,83,1)
(52,8,1)
(47,151,1)
(112,132,1)
(156,151,1)
(77,130,1)
(127,173,1)
(82,91,1)
(34,89,1)
(40,55,1)
(132,89,1)
(68,53,1)
(50,157,1)
(43,173,1)
(178,94,1)
(158,77,1)
(83,169,1)
(129,43,1)
(18,45,1)
(132,24,1)
(6,25,1)
(1,130,1)
(53,18,1)
(87,150,1)
(142,93,1)
(91,59,1)
(124,8,1)
(73,63,1)
(158,52,1)
(38,20,1)
(75,68,1)
(34,14,1)
(27,98,1)
(131,134,1)
(109,99,1)
(89,103,1)
(108,27,1)
(41,1,1)
(32,27,1)
(39,106,1)
(12,170,1)
(180,124,1)
(128,107,1)
(93,144,1)
(83,38,1)
(94,75,1)
(88,153,1)
(151,106,1)
(19,98,1)
(140,102,1)
(85,108,1)
(13,70,1)
(134,89,1)
(79,178,1)
(172,142,1)
(37,137,1)
(107,127,1)
(7,157,1)
(71,101,1)
(30,35,1)
(25,39,1)
(97,153,1)
(167,156,1)
(44,165,1)
(144,17,1)
(134,97,1)
(90,104,1)
(111,109,1)
(174,159,1)
(180,112,1)
(14,13,1)
(135,152,1)
(115,172,1)
(99,71,1)
(106,78,1)
(148,23,1)
(157,0,1)
(20,59,1)
(17,35,1)
(51,178,1)
(136,177,1)
(0,125,1)
(27,19,1)
(49,41,1)
(162,60,1)
(29,33,1)
(45,149,1)
(168,57,1)
(158,129,1)
(169,145,1)
(95,12,1)
(146,153,1)
(103,164,1)
(78,89,1)
(138,54,1)
(173,111,1)
(81,89,1)
(164,28,1)
(156,6,1)
(70,44,1)
(98,87,1)
(128,173,1)
(152,30,1)
(158,65,1)
(5,82,1)
(33,137,1)
(150,56,1)
(43,84,1)
(98,56,1)
(127,70,1)
(104,89,1)
(60,5,1)
(84,92,1)
(89,28,1)
(36,79,2)
(178,173,2)
(157,43,2)
(130,102,2)
(130,79,2)
(49,130,2)
(34,89,2)
(17,35,2)
(52,130,2)
(98,87,2)
(170,130,2)
(12,130,2)
(104,89,2)
(112,132,2)
(37,102,2)
(7,157,2)
(111,27,2)
(85,27,2)
(6,151,2)
(142,43,2)
(51,43,2)
(82,79,2)
(27,98,2)
(125,43,2)
(180,8,2)
(98,52,2)
(128,127,2)
(40,55,2)
(124,8,2)
(60,153,2)
(106,130,2)
(128,70,2)
(98,56,2)
(140,102,2)
(169,79,2)
(132,89,2)
(155,102,2)
(78,89,2)
(79,43,2)
(91,79,2)
(174,43,2)
(169,146,2)
(68,62,2)
(53,43,2)
(20,162,2)
(146,79,2)
(87,52,2)
(25,151,2)
(21,79,2)
(20,79,2)
(138,8,2)
(102,137,2)
(173,111,2)
(83,169,2)
(29,79,2)
(15,130,2)
(146,153,2)
(118,79,2)
(115,43,2)
(135,43,2)
(43,27,2)
(137,83,2)
(178,68,2)
(134,97,2)
(102,79,2)
(33,79,2)
(148,43,2)
(40,130,2)
(132,130,2)
(23,43,2)
(27,52,2)
(129,43,2)
(156,130,2)
(40,137,2)
(161,43,2)
(0,43,2)
(38,79,2)
(45,43,2)
(65,79,2)
(78,130,2)
(162,60,2)
(83,20,2)
(137,79,2)
(48,130,2)
(128,173,2)
(150,52,2)
(32,27,2)
(99,27,2)
(97,130,2)
(178,43,2)
(151,130,2)
(97,153,2)
(19,52,2)
(95,130,2)
(94,43,2)
(68,53,2)
(63,147,2)
(7,43,2)
(110,43,2)
(88,52,2)
(153,34,2)
(134,89,2)
(152,43,2)
(180,112,2)
(41,130,2)
(17,135,2)
(134,130,2)
(71,27,2)
(127,70,2)
(93,43,2)
(59,79,2)
(10,79,2)
(47,151,2)
(72,79,2)
(60,79,2)
(101,27,2)
(55,130,2)
(149,43,2)
(92,27,2)
(146,89,2)
(169,145,2)
(159,43,2)
(11,52,2)
(112,130,2)
(108,27,2)
(178,94,2)
(39,106,2)
(177,43,2)
(39,151,2)
(30,43,2)
(84,27,2)
(24,130,2)
(162,79,2)
(83,79,2)
(127,173,2)
(106,78,2)
(17,43,2)
(172,43,2)
(173,27,2)
(144,43,2)
(83,173,2)
(37,137,2)
(16,43,2)
(35,43,2)
(167,130,2)
(130,37,2)
(68,43,2)
(97,40,2)
(75,43,2)
(109,27,2)
(89,28,2)
(18,43,2)
(107,127,2)
(1,130,2)
(136,177,2)
(54,8,2)
(136,43,2)
(149,174,2)
(50,43,2)
(26,27,2)
(131,130,2)
(77,130,2)
(20,59,2)
(79,178,2)
(8,130,2)
(43,173,2)
(5,79,2)
(56,52,2)
-----------------------------------
(0,sin_addr)
(1,data)
(2,if (replace)
(3,INVALID_SOCKET)
(4,)
(5,1)
(6,*replace = '\\\\0')
(7,service.sin_addr.s_addr)
(8,replace)
(9,)
(10,recvResult)
(11,2)
(12,replace)
(13,dataLen)
(14,data)
(15,char)
(16,service)
(17,memset(&service, 0, sizeof(service)
(18,service)
(19,NO_ERROR)
(20,sizeof(char)
(21,connectSocket)
(22,do)
(23,service)
(24,\'\\\\n\')
(25,\'\\\\0\')
(26,wsaDataInit = 1)
(27,WSAStartup(MAKEWORD(2,2)
(28,dataBuffer[100] = COMMAND_ARG2)
(29,SOCKET_ERROR)
(30,0)
(31,*replace = \'\\\\0\')
(32,break;)
(33,recvResult)
(34,strlen(data)
(35,&service)
(36,char)
(37,recvResult == 0)
(38,0)
(39,*replace)
(40,recvResult / sizeof(char)
(41,dataLen)
(42,)
(43,connectSocket == INVALID_SOCKET)
(44,INVALID_SOCKET)
(45,connectSocket)
(46,wsaDataInit)
(47,replace)
(48,\'\\\\r\')
(49,recvResult)
(50,s_addr)
(51,SOCKET_ERROR)
(52,0)
(53,&service)
(54,\'\\\\0\')
(55,sizeof(char)
(56,MAKEWORD(2,2)
(57,dataBuffer)
(58,service)
(59,sizeof(char)
(60,dataLen - 1)
(61,)
(62,struct sockaddr*)
(63,WSACleanup()
(64,if (connect(connectSocket, (struct sockaddr*)
(65,break;)
(66,wsaData)
(67,)
(68,(struct sockaddr*)
(69,if (connectSocket != INVALID_SOCKET)
(70,connectSocket = INVALID_SOCKET)
(71,AF_INET)
(72,dataLen)
(73,data)
(74,if (recvResult == SOCKET_ERROR || recvResult == 0)
(75,service)
(76,data)
(77,break;)
(78,strchr(data, \'\\\\r\')
(79,connect(connectSocket, (struct sockaddr*)
(80,dataBuffer)
(81,wsaDataInit)
(82,dataLen)
(83,recv(connectSocket, (char *)
(84,INVALID_SOCKET)
(85,1)
(86,if (connectSocket == INVALID_SOCKET)
(87,&wsaData)
(88,2)
(89,data = dataBuffer)
(90,RET)
(91,100)
(92,connectSocket)
(93,sin_family)
(94,sizeof(service)
(95,data)
(96,if (WSAStartup(MAKEWORD(2,2)
(97,dataLen + recvResult / sizeof(char)
(98,WSAStartup(MAKEWORD(2,2)
(99,SOCK_STREAM)
(100,0)
(101,connectSocket)
(102,recvResult == SOCKET_ERROR)
(103,dataBuffer)
(104,CWE78_OS_Command_Injection__char_connect_socket_execlp_41_badSink(data)
(105,)
(106,replace = strchr(data, '\\\\r')
(107,connectSocket)
(108,wsaDataInit)
(109,IPPROTO_TCP)
(110,IP_ADDRESS)
(111,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(112,replace = strchr(data, \'\\\\n\')
(113,)
(114,strchr(data, '\\\\r')
(115,service.sin_family = AF_INET)
(116,replace = strchr(data, \'\\\\r\')
(117,'\\\\r')
(118,data)
(119,recvResult)
(120,)
(121,'\\\\0')
(122,)
(123,replace = strchr(data, '\\\\n')
(124,replace)
(125,service)
(126,)
(127,connectSocket != INVALID_SOCKET)
(128,CLOSE_SOCKET(connectSocket)
(129,break;)
(130,recvResult == SOCKET_ERROR || recvResult == 0)
(131,'\\\\0')
(132,strchr(data, \'\\\\n\')
(133,if (replace)
(134,data[dataLen + recvResult / sizeof(char)
(135,sizeof(service)
(136,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(137,recvResult = recv(connectSocket, (char *)
(138,*replace = \'\\\\0\')
(139,if (wsaDataInit)
(140,recvResult)
(141,'\\\\n')
(142,service.sin_family)
(143,*replace = '\\\\0')
(144,service)
(145,char *)
(146,data + dataLen)
(147,wsaDataInit)
(148,sin_port)
(149,service.sin_port = htons(TCP_PORT)
(150,wsaData)
(151,replace)
(152,service)
(153,dataLen = strlen(data)
(154,strchr(data, '\\\\n')
(155,0)
(156,replace)
(157,service.sin_addr)
(158,connectSocket)
(159,TCP_PORT)
(160,connectSocket)
(161,service.sin_port)
(162,100 - dataLen - 1)
(163,)
(164,data)
(165,connectSocket)
(166,replace)
(167,data)
(168,COMMAND_ARG2)
(169,(char *)
(170,data[dataLen + recvResult / sizeof(char)
(171,'\\\\0')
(172,AF_INET)
(173,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(174,htons(TCP_PORT)
(175,wsaDataInit = 0)
(176,\'\\\\0\')
(177,inet_addr(IP_ADDRESS)
(178,connect(connectSocket, (struct sockaddr*)
(179,dataLen)
(180,*replace)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^