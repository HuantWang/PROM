-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad()
{
    int64_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int64_t));
        printLongLongLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
61,62
61,63
61,64
63,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,64,67,71,73,75,77,81,82,86,89,90,94,96
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad(){    int64_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad
{    int64_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int64_t));
memcpy(data, source, 100*sizeof(int64_t))
memcpy
memcpy
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(7,1,0)
(2,10,0)
(33,6,0)
(34,1,0)
(0,35,0)
(17,24,0)
(6,10,0)
(30,7,0)
(8,13,0)
(42,1,0)
(18,6,0)
(16,38,0)
(6,34,0)
(7,30,0)
(30,10,0)
(6,1,0)
(5,3,0)
(14,34,0)
(27,13,0)
(13,0,0)
(39,26,0)
(6,33,0)
(37,30,0)
(42,10,0)
(4,10,0)
(25,12,0)
(35,28,0)
(21,24,0)
(22,26,0)
(32,12,0)
(9,8,0)
(28,35,0)
(35,10,0)
(6,26,0)
(15,2,0)
(30,26,0)
(33,38,0)
(1,24,0)
(36,42,0)
(35,0,0)
(42,26,0)
(40,33,0)
(13,8,0)
(25,29,0)
(0,13,0)
(10,3,0)
(11,1,0)
(31,30,0)
(38,33,0)
(20,2,0)
(19,6,0)
(12,25,0)
(10,35,0)
(26,24,0)
(31,6,1)
(6,33,1)
(19,34,1)
(12,32,1)
(25,12,1)
(42,36,1)
(41,42,1)
(37,31,1)
(23,26,1)
(34,14,1)
(2,10,1)
(2,15,1)
(8,9,1)
(26,39,1)
(6,34,1)
(40,18,1)
(38,16,1)
(42,26,1)
(14,25,1)
(6,10,1)
(30,37,1)
(9,27,1)
(32,2,1)
(35,28,1)
(20,10,1)
(36,7,1)
(6,26,1)
(42,10,1)
(33,38,1)
(7,30,1)
(30,10,1)
(0,13,1)
(15,20,1)
(14,2,1)
(18,19,1)
(13,8,1)
(39,22,1)
(14,23,1)
(4,23,1)
(30,26,1)
(27,4,1)
(16,40,1)
(35,0,1)
(10,35,1)
(30,26,2)
(32,2,2)
(7,30,2)
(8,23,2)
(6,10,2)
(35,0,2)
(35,23,2)
(0,23,2)
(2,10,2)
(20,23,2)
(2,23,2)
(13,23,2)
(42,10,2)
(27,23,2)
(35,28,2)
(6,34,2)
(12,2,2)
(25,2,2)
(42,26,2)
(10,35,2)
(30,10,2)
(6,26,2)
(25,12,2)
(13,8,2)
(6,33,2)
(15,23,2)
(9,23,2)
(10,23,2)
(0,13,2)
(33,38,2)
(4,23,2)
-----------------------------------
(0,malloc(50*sizeof(int64_t)
(1,)
(2,data == NULL)
(3,)
(4,data)
(5,if (data == NULL)
(6,memcpy(data, source, 100*sizeof(int64_t)
(7,printLongLongLine(data[0])
(8,sizeof(int64_t)
(9,int64_t)
(10,data = (int64_t *)
(11,source)
(12,-1)
(13,50*sizeof(int64_t)
(14,source)
(15,NULL)
(16,int64_t)
(17,if(globalTrue)
(18,source)
(19,data)
(20,data)
(21,data)
(22,data)
(23,globalTrue)
(24,)
(25,exit(-1)
(26,data = NULL)
(27,50)
(28,int64_t *)
(29,)
(30,data[0])
(31,data)
(32,1)
(33,100*sizeof(int64_t)
(34,source[100] = {0})
(35,(int64_t *)
(36,data)
(37,0)
(38,sizeof(int64_t)
(39,NULL)
(40,100)
(41,RET)
(42,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^