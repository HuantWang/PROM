-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,83,85
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,0,0)
(14,0,0)
(1,14,0)
(19,10,0)
(24,26,0)
(17,26,0)
(10,19,0)
(26,20,0)
(24,25,0)
(5,10,0)
(31,25,0)
(2,34,0)
(0,20,0)
(25,3,0)
(7,3,0)
(11,26,0)
(12,10,0)
(34,2,0)
(4,31,0)
(1,26,0)
(15,33,0)
(24,0,0)
(29,24,0)
(37,25,0)
(21,37,0)
(6,33,0)
(18,20,0)
(22,14,0)
(33,15,0)
(28,0,0)
(2,5,0)
(1,0,0)
(2,25,0)
(15,35,0)
(32,19,0)
(30,25,0)
(25,2,0)
(5,2,0)
(9,37,0)
(10,5,0)
(8,20,0)
(1,25,0)
(23,1,0)
(31,26,0)
(13,14,0)
(16,1,0)
(2,5,1)
(22,27,1)
(30,27,1)
(9,21,1)
(16,23,1)
(22,37,1)
(36,24,1)
(23,14,1)
(37,25,1)
(21,25,1)
(11,17,1)
(31,4,1)
(6,37,1)
(12,30,1)
(27,26,1)
(2,34,1)
(33,6,1)
(15,33,1)
(19,32,1)
(32,12,1)
(25,2,1)
(31,26,1)
(37,9,1)
(24,29,1)
(1,26,1)
(26,11,1)
(31,25,1)
(5,10,1)
(1,14,1)
(10,19,1)
(29,31,1)
(14,13,1)
(1,25,1)
(1,16,1)
(22,15,1)
(24,26,1)
(4,1,1)
(24,25,1)
(13,22,1)
(10,19,2)
(2,5,2)
(24,26,2)
(30,27,2)
(15,33,2)
(37,25,2)
(2,34,2)
(2,27,2)
(9,27,2)
(6,37,2)
(10,27,2)
(1,26,2)
(15,37,2)
(5,27,2)
(31,25,2)
(32,27,2)
(25,2,2)
(25,27,2)
(31,26,2)
(19,27,2)
(12,27,2)
(5,10,2)
(33,37,2)
(1,25,2)
(1,14,2)
(24,25,2)
(21,27,2)
(37,27,2)
-----------------------------------
(0,)
(1,wcscpy(data, source)
(2,(wchar_t *)
(3,)
(4,data)
(5,malloc(10*sizeof(wchar_t)
(6,1)
(7,if (data == NULL)
(8,data)
(9,NULL)
(10,10*sizeof(wchar_t)
(11,NULL)
(12,10)
(13,SRC_STRING)
(14,source[10+1] = SRC_STRING)
(15,exit(-1)
(16,source)
(17,data)
(18,if(GLOBAL_CONST_TRUE)
(19,sizeof(wchar_t)
(20,)
(21,data)
(22,source)
(23,data)
(24,free(data)
(25,data = (wchar_t *)
(26,data = NULL)
(27,GLOBAL_CONST_TRUE)
(28,source)
(29,data)
(30,data)
(31,printWLine(data)
(32,wchar_t)
(33,-1)
(34,wchar_t *)
(35,)
(36,RET)
(37,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^