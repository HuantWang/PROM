-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            size_t i;
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
82,89
82,90
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
92,93
92,94
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
103,104
103,105
106,107
107,108
107,109
108,109
108,110
109,110
111,112
111,113
115,116
115,117
115,118
115,119
116,117
117,118
117,119
118,119
121,122
121,123
122,123
125,126
126,127
128,129
129,130
130,131
130,132
131,132
131,133
132,133
134,135
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
146,147
146,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,67,69,73,75,76,80,81,86,88,91,93,95,99,101,102,104,105,110,112,113,114,119,120,123,124,127,133,135,138,140,145,147,148,149,153,155,159,161
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
63,64
63,65
103,104
103,105
107,108
107,109
111,112
111,113
117,118
117,119
121,122
121,123
130,131
130,132
142,143
142,144
146,147
146,148
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(74,52,0)
(28,0,0)
(32,83,0)
(52,12,0)
(83,40,0)
(44,14,0)
(15,84,0)
(70,26,0)
(64,3,0)
(14,27,0)
(77,75,0)
(30,40,0)
(18,27,0)
(65,37,0)
(83,69,0)
(79,41,0)
(20,14,0)
(26,44,0)
(23,84,0)
(56,80,0)
(7,57,0)
(29,14,0)
(81,3,0)
(31,2,0)
(56,12,0)
(6,84,0)
(61,15,0)
(60,2,0)
(34,8,0)
(44,26,0)
(83,32,0)
(0,67,0)
(33,84,0)
(62,54,0)
(22,44,0)
(50,48,0)
(71,16,0)
(46,26,0)
(80,56,0)
(45,29,0)
(11,37,0)
(82,51,0)
(4,30,0)
(85,15,0)
(84,39,0)
(38,54,0)
(44,41,0)
(1,57,0)
(51,37,0)
(69,57,0)
(55,39,0)
(2,84,0)
(13,12,0)
(75,84,0)
(24,76,0)
(27,14,0)
(25,0,0)
(40,37,0)
(57,69,0)
(76,15,0)
(66,60,0)
(72,14,0)
(80,63,0)
(69,83,0)
(21,51,0)
(17,20,0)
(60,16,0)
(0,40,0)
(50,8,0)
(19,52,0)
(30,37,0)
(68,67,0)
(15,76,0)
(49,56,0)
(73,37,0)
(41,84,0)
(39,37,0)
(59,76,0)
(20,12,0)
(40,83,0)
(57,1,0)
(75,14,0)
(8,50,0)
(43,12,0)
(78,16,0)
(14,39,0)
(58,1,0)
(5,40,0)
(54,30,0)
(47,12,0)
(53,56,0)
(9,13,0)
(36,20,0)
(3,40,0)
(10,27,0)
(29,84,0)
(20,80,0)
(67,37,0)
(16,60,0)
(81,40,1)
(46,22,1)
(80,56,1)
(20,12,1)
(28,25,1)
(44,26,1)
(19,12,1)
(20,36,1)
(26,70,1)
(70,46,1)
(71,66,1)
(49,53,1)
(83,32,1)
(27,10,1)
(0,40,1)
(85,14,1)
(24,61,1)
(0,28,1)
(50,8,1)
(12,43,1)
(67,68,1)
(22,52,1)
(29,14,1)
(74,19,1)
(43,47,1)
(66,15,1)
(30,4,1)
(20,14,1)
(3,40,1)
(45,41,1)
(47,2,1)
(57,1,1)
(4,54,1)
(35,75,1)
(15,76,1)
(77,29,1)
(21,82,1)
(17,52,1)
(25,50,1)
(72,30,1)
(36,17,1)
(31,60,1)
(52,12,1)
(25,3,1)
(38,67,1)
(8,34,1)
(40,83,1)
(62,38,1)
(44,14,1)
(52,74,1)
(75,77,1)
(13,12,1)
(13,9,1)
(53,20,1)
(30,40,1)
(75,14,1)
(68,0,1)
(1,58,1)
(9,80,1)
(61,85,1)
(51,21,1)
(64,81,1)
(2,31,1)
(69,57,1)
(16,78,1)
(83,69,1)
(10,18,1)
(3,64,1)
(54,62,1)
(7,5,1)
(29,45,1)
(18,72,1)
(58,7,1)
(56,49,1)
(5,51,1)
(41,79,1)
(34,3,1)
(78,71,1)
(59,24,1)
(14,27,1)
(56,12,1)
(19,13,1)
(60,16,1)
(79,44,1)
(76,59,1)
(50,3,2)
(52,12,2)
(56,12,2)
(20,12,2)
(50,8,2)
(36,52,2)
(60,16,2)
(57,1,2)
(13,52,2)
(20,52,2)
(75,14,2)
(53,52,2)
(40,83,2)
(44,26,2)
(29,14,2)
(34,3,2)
(0,40,2)
(13,12,2)
(15,76,2)
(80,52,2)
(83,69,2)
(8,3,2)
(74,52,2)
(52,52,2)
(44,14,2)
(17,52,2)
(19,52,2)
(69,57,2)
(30,40,2)
(20,14,2)
(80,56,2)
(9,52,2)
(49,52,2)
(56,52,2)
(3,40,2)
(14,27,2)
(83,32,2)
-----------------------------------
(0,data[0])
(1,sizeof(char)
(2,source[100-1] = '\\\\0')
(3,data == NULL)
(4,data)
(5,data)
(6,source)
(7,50)
(8,-1)
(9,i)
(10,unionSecond)
(11,myUnion)
(12,i = 0)
(13,i++)
(14,* data = myUnion.unionSecond)
(15,memset(source, 'C', 100-1)
(16,100-1)
(17,data)
(18,myUnion)
(19,i)
(20,data[i])
(21,NULL)
(22,data)
(23,for (i = 0; i < 100; i++)
(24,100)
(25,data)
(26,100-1)
(27,myUnion.unionSecond)
(28,0)
(29,printLine(data)
(30,myUnion.unionFirst = data)
(31,'\\\\0')
(32,char *)
(33,i)
(34,1)
(35,RET)
(36,i)
(37,)
(38,myUnion)
(39,)
(40,data = (char *)
(41,data[100-1] = '\\\\0')
(42,memset(source, \'C\', 100-1)
(43,0)
(44,data[100-1])
(45,data)
(46,100)
(47,i)
(48,)
(49,i)
(50,exit(-1)
(51,data = NULL)
(52,i < 100)
(53,source)
(54,myUnion.unionFirst)
(55,data)
(56,source[i])
(57,50*sizeof(char)
(58,char)
(59,1)
(60,source[100-1])
(61,'C')
(62,unionFirst)
(63,)
(64,NULL)
(65,if (data == NULL)
(66,source)
(67,data[0] = '\\\\0')
(68,'\\\\0')
(69,malloc(50*sizeof(char)
(70,1)
(71,100)
(72,data)
(73,data)
(74,100)
(75,free(data)
(76,100-1)
(77,data)
(78,1)
(79,'\\\\0')
(80,data[i] = source[i])
(81,data)
(82,data)
(83,(char *)
(84,)
(85,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^