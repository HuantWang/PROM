-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16_bad()
{
    double * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (double *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        *data = 1.7E300;
        break;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printDoubleLine(*data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
53,54
57,58
58,59
58,60
59,60
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,36,40,42,47,49,54,55,56,60,63,67,69
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16_bad(){    double * data;    /* Initialize data */    data = NULL;    while(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;        break;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16_bad
{    double * data;    /* Initialize data */    data = NULL;    while(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;        break;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
double * data;
double * data;
double
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;        break;    }
1
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;        break;    }
data = (double *)malloc(sizeof(data));
data = (double *)malloc(sizeof(data))
data
data
(double *)malloc(sizeof(data))
double *
double
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 1.7E300;
*data = 1.7E300
*data
data
data
1.7E300
break;
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(9,4,0)
(9,3,0)
(17,33,0)
(27,4,0)
(0,22,0)
(33,22,0)
(24,10,0)
(30,23,0)
(26,24,0)
(1,4,0)
(15,33,0)
(3,9,0)
(8,10,0)
(4,14,0)
(21,14,0)
(19,17,0)
(29,22,0)
(7,8,0)
(3,22,0)
(11,14,0)
(8,7,0)
(7,14,0)
(24,33,0)
(10,8,0)
(12,8,0)
(17,22,0)
(5,20,0)
(18,23,0)
(20,5,0)
(25,9,0)
(32,1,0)
(16,20,0)
(10,24,0)
(8,12,0)
(9,33,0)
(17,7,0)
(31,7,0)
(1,7,0)
(23,7,0)
(5,2,0)
(9,7,0)
(6,33,0)
(1,32,1)
(18,30,1)
(8,10,1)
(5,20,1)
(16,23,1)
(28,33,1)
(9,25,1)
(9,4,1)
(23,7,1)
(31,28,1)
(17,19,1)
(26,31,1)
(17,33,1)
(27,1,1)
(32,5,1)
(10,24,1)
(25,21,1)
(24,26,1)
(17,7,1)
(23,18,1)
(1,7,1)
(30,7,1)
(13,17,1)
(3,9,1)
(24,33,1)
(21,4,1)
(9,7,1)
(19,3,1)
(7,8,1)
(8,12,1)
(25,28,1)
(32,23,1)
(33,15,1)
(20,16,1)
(15,6,1)
(4,27,1)
(9,33,1)
(31,28,2)
(10,28,2)
(24,28,2)
(21,28,2)
(17,7,2)
(8,10,2)
(23,28,2)
(9,7,2)
(1,7,2)
(9,33,2)
(27,28,2)
(20,23,2)
(16,23,2)
(4,28,2)
(23,7,2)
(9,4,2)
(26,28,2)
(7,8,2)
(7,28,2)
(30,28,2)
(1,28,2)
(3,9,2)
(5,20,2)
(24,33,2)
(10,24,2)
(17,33,2)
(18,28,2)
(8,28,2)
(5,23,2)
(8,12,2)
(32,28,2)
-----------------------------------
(0,while(1)
(1,*data)
(2,)
(3,printDoubleLine(*data)
(4,*data = 1.7E300)
(5,exit(-1)
(6,data)
(7,data = (double *)
(8,(double *)
(9,*data)
(10,malloc(sizeof(data)
(11,if (data == NULL)
(12,double *)
(13,RET)
(14,)
(15,NULL)
(16,1)
(17,free(data)
(18,NULL)
(19,data)
(20,-1)
(21,break;)
(22,)
(23,data == NULL)
(24,sizeof(data)
(25,data)
(26,data)
(27,1.7E300)
(28,1)
(29,data)
(30,data)
(31,data)
(32,data)
(33,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^