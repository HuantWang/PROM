-----label-----
1
-----code-----
static void badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
12,17
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85,89,91
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
static void
badSink(twoIntsStruct * data)
badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(37,30,0)
(33,38,0)
(1,4,0)
(34,30,0)
(44,25,0)
(13,0,0)
(8,15,0)
(23,24,0)
(29,15,0)
(27,6,0)
(5,43,0)
(22,38,0)
(42,5,0)
(20,5,0)
(32,39,0)
(0,30,0)
(6,43,0)
(12,39,0)
(10,36,0)
(15,19,0)
(7,22,0)
(15,43,0)
(35,20,0)
(31,0,0)
(5,20,0)
(2,4,0)
(36,25,0)
(39,4,0)
(17,38,0)
(6,4,0)
(19,1,0)
(11,36,0)
(38,22,0)
(38,30,0)
(21,16,0)
(5,4,0)
(19,15,0)
(20,18,0)
(28,37,0)
(3,5,0)
(36,30,0)
(22,23,0)
(14,18,0)
(26,30,0)
(25,36,0)
(40,23,0)
(1,19,0)
(25,16,0)
(18,20,0)
(16,24,0)
(4,41,0)
(6,43,1)
(25,44,1)
(0,30,1)
(26,34,1)
(44,36,1)
(30,26,1)
(33,17,1)
(37,30,1)
(40,22,1)
(13,31,1)
(28,16,1)
(31,37,1)
(23,40,1)
(5,20,1)
(8,29,1)
(38,30,1)
(36,10,1)
(27,1,1)
(0,13,1)
(19,15,1)
(36,30,1)
(29,5,1)
(17,0,1)
(21,25,1)
(7,38,1)
(22,7,1)
(6,27,1)
(42,0,1)
(18,14,1)
(5,43,1)
(38,33,1)
(20,18,1)
(1,19,1)
(16,21,1)
(15,43,1)
(31,30,1)
(10,11,1)
(15,8,1)
(25,36,1)
(37,28,1)
(3,42,1)
(9,6,1)
(11,23,1)
(14,35,1)
(22,38,1)
(35,3,1)
(36,30,2)
(1,19,2)
(13,0,2)
(36,0,2)
(17,0,2)
(21,0,2)
(16,0,2)
(15,43,2)
(19,15,2)
(0,30,2)
(37,0,2)
(22,38,2)
(37,30,2)
(33,0,2)
(10,0,2)
(38,30,2)
(40,0,2)
(28,0,2)
(31,0,2)
(20,18,2)
(0,0,2)
(5,43,2)
(6,43,2)
(7,0,2)
(5,20,2)
(22,0,2)
(11,0,2)
(25,0,2)
(25,36,2)
(38,0,2)
(23,0,2)
(44,0,2)
-----------------------------------
(0,i < 100)
(1,printStructLine(&data[0])
(2,source)
(3,source)
(4,)
(5,memcpy(data, source, 100*sizeof(twoIntsStruct)
(6,free(data)
(7,intOne)
(8,0)
(9,RET)
(10,i)
(11,source)
(12,for (i = 0; i < 100; i++)
(13,100)
(14,twoIntsStruct)
(15,data[0])
(16,source[i].intTwo = 0)
(17,source)
(18,sizeof(twoIntsStruct)
(19,&data[0])
(20,100*sizeof(twoIntsStruct)
(21,0)
(22,source[i].intOne)
(23,source[i].intOne = 0)
(24,)
(25,source[i].intTwo)
(26,0)
(27,data)
(28,i)
(29,data)
(30,i = 0)
(31,i)
(32,i)
(33,i)
(34,i)
(35,100)
(36,source[i])
(37,i++)
(38,source[i])
(39,)
(40,0)
(41,)
(42,data)
(43,twoIntsStruct * data)
(44,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^