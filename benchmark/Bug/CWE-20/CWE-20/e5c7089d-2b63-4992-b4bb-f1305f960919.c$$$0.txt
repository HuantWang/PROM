-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        wcsncat(data, source, 100);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,95,99,101,105,107
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10_bad(){    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10_bad
{    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncat(data, source, 100);
wcsncat(data, source, 100)
wcsncat
wcsncat
data
data
source
source
100
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,15,0)
(19,27,0)
(34,18,0)
(3,17,0)
(37,3,0)
(22,29,0)
(10,3,0)
(2,3,0)
(29,17,0)
(25,29,0)
(30,32,0)
(30,14,0)
(6,32,0)
(15,26,0)
(36,22,0)
(20,6,0)
(10,29,0)
(7,18,0)
(7,3,0)
(28,35,0)
(18,35,0)
(38,10,0)
(14,30,0)
(4,32,0)
(14,23,0)
(7,29,0)
(23,14,0)
(32,6,0)
(27,18,0)
(8,7,0)
(18,14,0)
(21,26,0)
(14,18,0)
(32,30,0)
(33,17,0)
(22,3,0)
(5,29,0)
(9,7,0)
(16,7,0)
(13,17,0)
(15,24,0)
(10,18,0)
(0,35,0)
(11,27,0)
(22,18,0)
(31,29,1)
(32,6,1)
(19,18,1)
(27,18,1)
(29,25,1)
(34,31,1)
(0,15,1)
(8,2,1)
(12,22,1)
(20,4,1)
(38,7,1)
(10,29,1)
(9,8,1)
(14,30,1)
(26,21,1)
(15,26,1)
(6,20,1)
(27,11,1)
(7,18,1)
(2,0,1)
(10,38,1)
(10,18,1)
(22,36,1)
(14,23,1)
(22,29,1)
(4,34,1)
(7,16,1)
(11,19,1)
(2,31,1)
(0,27,1)
(25,5,1)
(7,29,1)
(16,9,1)
(22,18,1)
(21,27,1)
(36,10,1)
(18,14,1)
(30,32,1)
(27,18,2)
(7,18,2)
(34,31,2)
(30,32,2)
(30,31,2)
(20,31,2)
(21,27,2)
(27,31,2)
(18,14,2)
(7,29,2)
(14,30,2)
(0,31,2)
(10,18,2)
(32,31,2)
(22,18,2)
(10,29,2)
(6,31,2)
(4,31,2)
(15,26,2)
(19,31,2)
(11,31,2)
(15,27,2)
(22,29,2)
(14,31,2)
(14,23,2)
(32,6,2)
(18,31,2)
(26,27,2)
-----------------------------------
(0,\'\\\\0\')
(1,'\\\\0')
(2,'\\\\0')
(3,)
(4,50)
(5,data)
(6,sizeof(wchar_t)
(7,wcsncat(data, source, 100)
(8,data)
(9,source)
(10,printWLine(data)
(11,NULL)
(12,RET)
(13,if(globalTrue)
(14,(wchar_t *)
(15,exit(-1)
(16,100)
(17,)
(18,data = (wchar_t *)
(19,data)
(20,wchar_t)
(21,1)
(22,free(data)
(23,wchar_t *)
(24,)
(25,NULL)
(26,-1)
(27,data == NULL)
(28,if (data == NULL)
(29,data = NULL)
(30,malloc(50*sizeof(wchar_t)
(31,globalTrue)
(32,50*sizeof(wchar_t)
(33,data)
(34,data)
(35,)
(36,data)
(37,source)
(38,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^