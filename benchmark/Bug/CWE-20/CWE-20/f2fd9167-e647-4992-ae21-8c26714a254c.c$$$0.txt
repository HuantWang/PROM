-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
58,61
58,62
58,63
59,60
60,61
60,62
61,62
63,64
63,65
65,66
67,68
67,69
68,69
69,70
69,71
70,71
72,73
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
87,88
87,89
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
104,105
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
116,118
118,119
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,62,64,66,71,73,78,79,82,83,86,93,95,96,97,103,105,106,107,111,113,115,117,121,122,126,130,131,135,137
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
76,77
76,78
80,81
80,82
89,90
89,91
99,100
99,101
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(19,26,0)
(68,41,0)
(57,41,0)
(42,11,0)
(67,7,0)
(31,32,0)
(1,4,0)
(26,32,0)
(60,38,0)
(15,30,0)
(8,52,0)
(19,51,0)
(19,35,0)
(48,26,0)
(29,32,0)
(13,11,0)
(63,34,0)
(20,19,0)
(16,49,0)
(25,60,0)
(11,29,0)
(47,34,0)
(9,7,0)
(30,35,0)
(21,19,0)
(14,66,0)
(39,27,0)
(56,5,0)
(41,10,0)
(11,35,0)
(28,43,0)
(37,51,0)
(48,33,0)
(55,5,0)
(2,25,0)
(65,35,0)
(51,37,0)
(64,37,0)
(10,41,0)
(25,63,0)
(54,26,0)
(61,18,0)
(19,29,0)
(1,12,0)
(49,66,0)
(18,68,0)
(22,0,0)
(35,18,0)
(6,63,0)
(18,61,0)
(3,66,0)
(52,38,0)
(30,29,0)
(17,10,0)
(59,51,0)
(33,11,0)
(4,1,0)
(66,34,0)
(69,29,0)
(45,63,0)
(63,25,0)
(46,32,0)
(33,48,0)
(58,62,0)
(40,43,0)
(66,49,0)
(51,19,0)
(30,26,0)
(62,26,0)
(44,34,0)
(11,33,0)
(18,35,0)
(68,18,0)
(49,52,0)
(41,68,0)
(23,29,0)
(24,62,0)
(43,34,0)
(50,60,0)
(35,0,0)
(7,35,0)
(53,4,0)
(27,34,0)
(36,30,1)
(37,64,1)
(9,67,1)
(43,34,1)
(14,43,1)
(13,42,1)
(27,34,1)
(52,8,1)
(47,1,1)
(2,63,1)
(19,35,1)
(47,5,1)
(63,34,1)
(66,3,1)
(65,5,1)
(64,59,1)
(29,23,1)
(15,48,1)
(10,17,1)
(48,33,1)
(53,7,1)
(5,56,1)
(39,60,1)
(11,29,1)
(63,6,1)
(28,27,1)
(30,15,1)
(11,35,1)
(49,16,1)
(7,35,1)
(11,13,1)
(18,61,1)
(47,7,1)
(28,34,1)
(3,14,1)
(25,63,1)
(16,66,1)
(18,68,1)
(21,43,1)
(35,18,1)
(23,69,1)
(41,10,1)
(17,57,1)
(43,40,1)
(44,47,1)
(4,53,1)
(66,34,1)
(6,45,1)
(20,21,1)
(7,9,1)
(19,29,1)
(60,50,1)
(55,29,1)
(51,37,1)
(59,20,1)
(34,44,1)
(25,2,1)
(45,52,1)
(40,28,1)
(33,11,1)
(49,66,1)
(67,35,1)
(1,4,1)
(27,39,1)
(30,29,1)
(50,25,1)
(57,65,1)
(56,55,1)
(30,35,1)
(8,49,1)
(42,19,1)
(68,41,1)
(19,51,1)
(1,4,2)
(10,5,2)
(30,35,2)
(48,33,2)
(57,5,2)
(66,43,2)
(19,35,2)
(65,5,2)
(18,61,2)
(25,43,2)
(18,68,2)
(49,43,2)
(1,7,2)
(18,5,2)
(43,34,2)
(67,5,2)
(50,43,2)
(40,43,2)
(19,51,2)
(30,29,2)
(27,34,2)
(51,37,2)
(66,34,2)
(2,43,2)
(35,5,2)
(3,43,2)
(4,7,2)
(19,29,2)
(41,10,2)
(39,43,2)
(53,7,2)
(28,43,2)
(33,11,2)
(17,5,2)
(60,43,2)
(68,5,2)
(11,35,2)
(43,43,2)
(27,43,2)
(8,43,2)
(45,43,2)
(6,43,2)
(7,5,2)
(52,43,2)
(11,29,2)
(9,5,2)
(63,43,2)
(25,63,2)
(41,5,2)
(49,66,2)
(14,43,2)
(16,43,2)
(68,41,2)
(63,34,2)
(35,18,2)
(7,35,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,intTwo)
(3,i)
(4,-1)
(5,staticFive==5)
(6,i)
(7,data == NULL)
(8,0)
(9,NULL)
(10,sizeof(twoIntsStruct)
(11,data[0])
(12,)
(13,0)
(14,source)
(15,data)
(16,intOne)
(17,twoIntsStruct)
(18,(twoIntsStruct *)
(19,memmove(data, source, 100*sizeof(twoIntsStruct)
(20,source)
(21,data)
(22,if (data == NULL)
(23,NULL)
(24,i)
(25,source[i].intTwo)
(26,)
(27,i++)
(28,i)
(29,data = NULL)
(30,free(data)
(31,data)
(32,)
(33,&data[0])
(34,i = 0)
(35,data = (twoIntsStruct *)
(36,RET)
(37,sizeof(twoIntsStruct)
(38,)
(39,i)
(40,100)
(41,50*sizeof(twoIntsStruct)
(42,data)
(43,i < 100)
(44,0)
(45,source)
(46,if(staticFive==5)
(47,i)
(48,printStructLine(&data[0])
(49,source[i].intOne)
(50,0)
(51,100*sizeof(twoIntsStruct)
(52,source[i].intOne = 0)
(53,1)
(54,source)
(55,staticFive)
(56,5)
(57,50)
(58,for (i = 0; i < 100; i++)
(59,100)
(60,source[i].intTwo = 0)
(61,twoIntsStruct *)
(62,)
(63,source[i])
(64,twoIntsStruct)
(65,data)
(66,source[i])
(67,data)
(68,malloc(50*sizeof(twoIntsStruct)
(69,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^