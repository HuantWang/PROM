-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_struct_31_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
58,60
58,61
59,60
60,61
60,62
61,62
63,64
63,65
63,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,55,57,62,64,65,68,72,74,75,78,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_struct_31_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_struct_31_bad()
CWE415_Double_Free__malloc_free_struct_31_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
free(data);
free(data)
free
free
data
data
-----joern-----
(11,5,0)
(20,3,0)
(31,33,0)
(22,33,0)
(15,2,0)
(0,18,0)
(14,18,0)
(10,13,0)
(3,24,0)
(27,18,0)
(7,16,0)
(0,24,0)
(8,11,0)
(7,23,0)
(2,29,0)
(13,5,0)
(34,24,0)
(1,23,0)
(27,29,0)
(26,24,0)
(18,0,0)
(4,21,0)
(5,24,0)
(33,13,0)
(9,24,0)
(13,0,0)
(12,5,0)
(28,21,0)
(6,29,0)
(29,2,0)
(11,33,0)
(29,27,0)
(32,13,0)
(23,7,0)
(21,0,0)
(35,5,0)
(18,27,0)
(33,5,0)
(19,34,0)
(17,0,0)
(25,3,0)
(18,14,0)
(34,0,0)
(33,13,1)
(7,23,1)
(11,8,1)
(19,21,1)
(34,19,1)
(15,6,1)
(23,1,1)
(29,2,1)
(25,20,1)
(13,10,1)
(1,21,1)
(11,33,1)
(34,0,1)
(0,18,1)
(4,0,1)
(3,25,1)
(13,0,1)
(18,14,1)
(2,15,1)
(32,34,1)
(28,4,1)
(19,7,1)
(22,31,1)
(6,17,1)
(30,11,1)
(31,13,1)
(21,0,1)
(17,3,1)
(18,27,1)
(27,29,1)
(10,32,1)
(33,22,1)
(21,28,1)
(8,33,1)
(13,0,2)
(1,21,2)
(29,2,2)
(23,21,2)
(0,18,2)
(18,27,2)
(21,0,2)
(33,13,2)
(27,29,2)
(11,33,2)
(7,23,2)
(7,21,2)
(34,0,2)
(18,14,2)
-----------------------------------
(0,data = (twoIntsStruct *)
(1,1)
(2,sizeof(twoIntsStruct)
(3,data = NULL)
(4,data)
(5,)
(6,100)
(7,exit(-1)
(8,data)
(9,data)
(10,data)
(11,free(data)
(12,dataCopy)
(13,* dataCopy = data)
(14,twoIntsStruct *)
(15,twoIntsStruct)
(16,)
(17,data)
(18,(twoIntsStruct *)
(19,data)
(20,data)
(21,data == NULL)
(22,dataCopy)
(23,-1)
(24,)
(25,NULL)
(26,if (data == NULL)
(27,malloc(100*sizeof(twoIntsStruct)
(28,NULL)
(29,100*sizeof(twoIntsStruct)
(30,RET)
(31,data)
(32,dataCopy)
(33,* data = dataCopy)
(34,free(data)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^