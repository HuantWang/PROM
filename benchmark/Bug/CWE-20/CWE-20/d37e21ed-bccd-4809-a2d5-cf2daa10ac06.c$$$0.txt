-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_preinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
58,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,61,64,66,69,73,75
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_preinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_preinc_17_bad()
CWE190_Integer_Overflow__int_max_preinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,21,0)
(18,16,0)
(22,12,0)
(8,21,0)
(9,21,0)
(33,12,0)
(25,2,0)
(21,39,0)
(3,14,0)
(27,16,0)
(31,14,0)
(6,12,0)
(37,21,0)
(10,29,0)
(11,19,0)
(5,1,0)
(34,12,0)
(38,12,0)
(20,31,0)
(8,9,0)
(35,16,0)
(15,18,0)
(30,2,0)
(29,16,0)
(23,8,0)
(36,6,0)
(0,6,0)
(9,6,0)
(4,14,0)
(9,14,0)
(32,19,0)
(2,19,0)
(24,12,0)
(31,6,0)
(7,9,0)
(13,9,0)
(14,28,0)
(26,18,0)
(1,19,0)
(30,19,1)
(4,18,1)
(7,31,1)
(3,4,1)
(8,23,1)
(5,8,1)
(14,3,1)
(36,0,1)
(27,35,1)
(11,18,1)
(20,2,1)
(15,16,1)
(2,19,1)
(15,29,1)
(8,9,1)
(9,14,1)
(1,19,1)
(31,20,1)
(19,32,1)
(16,27,1)
(2,25,1)
(35,6,1)
(23,9,1)
(1,5,1)
(30,1,1)
(25,30,1)
(29,10,1)
(31,14,1)
(17,2,1)
(31,6,1)
(6,36,1)
(9,6,1)
(26,15,1)
(13,7,1)
(10,14,1)
(18,26,1)
(18,16,1)
(9,13,1)
(32,11,1)
(29,16,1)
(5,2,2)
(9,6,2)
(29,18,2)
(4,18,2)
(31,2,2)
(18,18,2)
(14,18,2)
(25,2,2)
(2,2,2)
(7,2,2)
(15,18,2)
(13,2,2)
(9,2,2)
(31,6,2)
(1,19,2)
(2,19,2)
(8,9,2)
(1,2,2)
(31,14,2)
(20,2,2)
(9,14,2)
(26,18,2)
(10,18,2)
(30,2,2)
(18,16,2)
(8,2,2)
(3,18,2)
(23,2,2)
(29,16,2)
-----------------------------------
(0,data)
(1,j++)
(2,j < 1)
(3,INT_MAX)
(4,data)
(5,j)
(6,data = 0)
(7,result)
(8,printIntLine(result)
(9,result = data)
(10,i)
(11,j)
(12,)
(13,data)
(14,data = INT_MAX)
(15,i)
(16,i = 0)
(17,RET)
(18,i < 1)
(19,j = 0)
(20,data)
(21,)
(22,for(i = 0; i < 1; i++)
(23,result)
(24,data)
(25,1)
(26,1)
(27,0)
(28,)
(29,i++)
(30,j)
(31,++data)
(32,0)
(33,j)
(34,i)
(35,i)
(36,0)
(37,result)
(38,for(j = 0; j < 1; j++)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^