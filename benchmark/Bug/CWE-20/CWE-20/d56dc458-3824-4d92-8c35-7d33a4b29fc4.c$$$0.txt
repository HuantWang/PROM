-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_wchar_t_07_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,64,65,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_wchar_t_07_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_wchar_t_07_bad()
CWE415_Double_Free__malloc_free_wchar_t_07_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(0,3,0)
(12,32,0)
(36,14,0)
(1,3,0)
(26,24,0)
(1,8,0)
(35,31,0)
(28,22,0)
(34,7,0)
(20,7,0)
(1,2,0)
(3,14,0)
(4,29,0)
(17,36,0)
(11,28,0)
(6,24,0)
(33,24,0)
(20,8,0)
(24,29,0)
(21,29,0)
(15,29,0)
(16,31,0)
(25,32,0)
(18,14,0)
(33,9,0)
(3,1,0)
(19,20,0)
(7,20,0)
(22,23,0)
(13,10,0)
(36,3,0)
(32,3,0)
(2,1,0)
(5,10,0)
(8,1,0)
(8,20,0)
(27,33,0)
(22,28,0)
(33,3,0)
(36,17,1)
(5,13,1)
(13,36,1)
(17,22,1)
(3,1,1)
(19,0,1)
(31,16,1)
(33,27,1)
(1,2,1)
(35,24,1)
(34,19,1)
(27,10,1)
(7,34,1)
(0,31,1)
(8,20,1)
(20,7,1)
(10,5,1)
(33,3,1)
(11,32,1)
(33,24,1)
(36,3,1)
(12,25,1)
(30,33,1)
(17,32,1)
(13,31,1)
(26,6,1)
(22,28,1)
(16,35,1)
(1,8,1)
(28,11,1)
(25,3,1)
(24,26,1)
(30,10,1)
(32,12,1)
(32,3,1)
(33,24,2)
(34,31,2)
(36,31,2)
(11,32,2)
(20,31,2)
(0,31,2)
(28,32,2)
(1,2,2)
(33,3,2)
(20,7,2)
(1,8,2)
(7,31,2)
(32,31,2)
(3,31,2)
(17,31,2)
(25,31,2)
(19,31,2)
(27,10,2)
(22,28,2)
(33,10,2)
(22,32,2)
(3,1,2)
(1,31,2)
(32,3,2)
(8,20,2)
(8,31,2)
(12,31,2)
(36,3,2)
-----------------------------------
(0,data)
(1,(wchar_t *)
(2,wchar_t *)
(3,data = (wchar_t *)
(4,if(staticFive==5)
(5,5)
(6,data)
(7,sizeof(wchar_t)
(8,malloc(100*sizeof(wchar_t)
(9,)
(10,staticFive==5)
(11,1)
(12,NULL)
(13,staticFive)
(14,)
(15,data)
(16,5)
(17,data)
(18,if (data == NULL)
(19,100)
(20,100*sizeof(wchar_t)
(21,if(staticFive==5)
(22,exit(-1)
(23,)
(24,data = NULL)
(25,data)
(26,NULL)
(27,data)
(28,-1)
(29,)
(30,RET)
(31,staticFive==5)
(32,data == NULL)
(33,free(data)
(34,wchar_t)
(35,staticFive)
(36,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^