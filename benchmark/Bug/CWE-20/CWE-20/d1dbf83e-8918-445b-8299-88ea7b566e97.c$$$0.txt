-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(3,44,0)
(14,18,0)
(25,29,0)
(44,3,0)
(27,3,0)
(56,24,0)
(33,40,0)
(50,52,0)
(42,58,0)
(52,61,0)
(0,7,0)
(58,45,0)
(41,31,0)
(59,40,0)
(37,18,0)
(62,29,0)
(2,3,0)
(9,14,0)
(25,59,0)
(22,37,0)
(24,29,0)
(19,23,0)
(52,20,0)
(37,45,0)
(48,10,0)
(46,30,0)
(28,4,0)
(3,2,0)
(34,32,0)
(51,2,0)
(65,62,0)
(58,57,0)
(61,52,0)
(5,37,0)
(55,58,0)
(47,15,0)
(40,12,0)
(23,18,0)
(44,45,0)
(43,14,0)
(66,29,0)
(23,45,0)
(10,3,0)
(18,23,0)
(18,32,0)
(24,20,0)
(30,29,0)
(26,7,0)
(4,31,0)
(60,61,0)
(20,52,0)
(35,25,0)
(29,62,0)
(17,32,0)
(1,0,0)
(13,18,0)
(39,26,0)
(61,45,0)
(14,2,0)
(59,45,0)
(37,0,0)
(53,57,0)
(2,51,0)
(6,30,0)
(32,63,0)
(11,4,0)
(20,24,0)
(3,10,0)
(31,4,0)
(2,14,0)
(62,45,0)
(4,18,0)
(16,44,0)
(30,61,0)
(29,15,0)
(61,30,0)
(54,25,0)
(38,8,0)
(59,25,0)
(21,24,0)
(44,18,0)
(64,59,0)
(49,44,0)
(61,45,1)
(43,9,1)
(20,52,1)
(66,10,1)
(29,62,1)
(37,18,1)
(30,29,1)
(46,60,1)
(37,45,1)
(59,45,1)
(19,13,1)
(6,46,1)
(20,24,1)
(59,25,1)
(35,64,1)
(4,18,1)
(16,49,1)
(26,39,1)
(13,36,1)
(25,54,1)
(64,20,1)
(25,29,1)
(39,10,1)
(3,27,1)
(52,61,1)
(24,29,1)
(3,44,1)
(11,28,1)
(41,4,1)
(14,18,1)
(3,2,1)
(2,51,1)
(42,36,1)
(55,58,1)
(4,11,1)
(58,45,1)
(2,14,1)
(42,0,1)
(23,45,1)
(58,42,1)
(44,45,1)
(31,41,1)
(65,66,1)
(31,4,1)
(49,31,1)
(37,22,1)
(42,31,1)
(62,45,1)
(56,29,1)
(60,24,1)
(22,5,1)
(28,18,1)
(27,2,1)
(54,35,1)
(62,65,1)
(23,19,1)
(10,3,1)
(14,43,1)
(42,40,1)
(33,59,1)
(9,44,1)
(10,48,1)
(61,30,1)
(50,61,1)
(30,6,1)
(40,33,1)
(24,21,1)
(21,56,1)
(48,3,1)
(0,1,1)
(42,20,1)
(52,50,1)
(44,18,1)
(44,16,1)
(1,37,1)
(5,26,1)
(18,23,1)
(39,10,2)
(35,20,2)
(13,36,2)
(60,24,2)
(0,10,2)
(1,10,2)
(29,10,2)
(61,24,2)
(3,31,2)
(64,20,2)
(22,10,2)
(31,4,2)
(23,45,2)
(3,44,2)
(2,14,2)
(23,36,2)
(61,45,2)
(52,61,2)
(2,51,2)
(58,45,2)
(46,24,2)
(50,24,2)
(30,29,2)
(20,24,2)
(9,31,2)
(65,10,2)
(6,24,2)
(24,10,2)
(10,3,2)
(40,20,2)
(29,62,2)
(19,36,2)
(2,31,2)
(18,36,2)
(14,31,2)
(37,18,2)
(37,45,2)
(14,18,2)
(11,36,2)
(44,45,2)
(3,2,2)
(25,29,2)
(28,36,2)
(62,45,2)
(4,18,2)
(20,52,2)
(52,24,2)
(5,10,2)
(37,10,2)
(25,20,2)
(62,10,2)
(59,20,2)
(59,25,2)
(26,10,2)
(27,31,2)
(56,10,2)
(54,20,2)
(43,31,2)
(59,45,2)
(33,20,2)
(44,18,2)
(18,23,2)
(55,58,2)
(48,31,2)
(61,30,2)
(21,10,2)
(4,36,2)
(30,24,2)
(10,31,2)
(16,31,2)
(31,36,2)
(24,29,2)
(20,10,2)
(41,36,2)
(44,31,2)
(49,31,2)
(66,10,2)
-----------------------------------
(0,data[dataLen] = \\\'\\\\0\\\')
(1,\\\'\\\\0\\\')
(2,(int)
(3,fgets(data+dataLen, (int)
(4,100-dataLen)
(5,data)
(6,1)
(7,)
(8,)
(9,100)
(10,fgets(data+dataLen, (int)
(11,dataLen)
(12,)
(13,dataLen)
(14,100-dataLen)
(15,)
(16,dataLen)
(17,if (100-dataLen > 1)
(18,dataLen = strlen(data)
(19,data)
(20,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(21,0)
(22,dataLen)
(23,strlen(data)
(24,dataLen > 0)
(25,dataLen-1)
(26,printLine("fgets()
(27,stdin)
(28,100)
(29,dataLen = strlen(data)
(30,dataLen-1)
(31,100-dataLen > 1)
(32,)
(33,\\\'\\\\0\\\')
(34,dataLen)
(35,dataLen)
(36,CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
(37,data[dataLen])
(38,if (fgets(data+dataLen, (int)
(39,"fgets()
(40,data[dataLen-1] = \\\'\\\\0\\\')
(41,1)
(42,data)
(43,dataLen)
(44,data+dataLen)
(45,char * data)
(46,dataLen)
(47,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(48,NULL)
(49,data)
(50,\\\'\\\\n\\\')
(51,int)
(52,data[dataLen-1] == \\\'\\\\n\\\')
(53,if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
(54,1)
(55,RET)
(56,dataLen)
(57,)
(58,return data;)
(59,data[dataLen-1])
(60,data)
(61,data[dataLen-1])
(62,strlen(data)
(63,)
(64,data)
(65,data)
(66,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^