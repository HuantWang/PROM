-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_05_bad()
{
    wchar_t * data;
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    if(staticTrue)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
54,55
54,56
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
71,72
71,73
71,74
71,75
71,76
72,73
73,74
73,75
75,76
75,77
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
99,100
99,101
99,102
99,103
99,104
100,101
102,103
106,107
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,21,23,26,28,31,32,35,37,38,42,44,47,49,52,53,56,61,63,68,69,70,74,76,78,82,84,85,87,88,93,95,96,97,101,103,104,105,107,111,113
-----computeFrom-----
27,28
27,29
48,49
48,50
59,60
59,61
65,66
65,67
86,87
86,88
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_05_bad(){    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_05_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_05_bad
{    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)ALLOCA(50*sizeof(wchar_t))
(wchar_t *)ALLOCA(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(50*sizeof(wchar_t))
ALLOCA
ALLOCA
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
dataGoodBuffer
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if(staticTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(22,23,0)
(32,4,0)
(1,5,0)
(33,22,0)
(10,2,0)
(35,13,0)
(20,13,0)
(27,2,0)
(11,23,0)
(9,13,0)
(3,20,0)
(7,2,0)
(12,1,0)
(21,11,0)
(0,3,0)
(18,11,0)
(1,3,0)
(4,32,0)
(28,13,0)
(21,13,0)
(2,27,0)
(14,33,0)
(31,22,0)
(19,13,0)
(3,15,0)
(2,7,0)
(8,20,0)
(16,5,0)
(6,21,0)
(20,4,0)
(7,4,0)
(17,15,0)
(11,18,0)
(5,13,0)
(4,7,0)
(30,3,0)
(23,11,0)
(29,5,0)
(22,33,0)
(23,22,0)
(26,27,0)
(11,21,0)
(4,20,0)
(27,26,1)
(29,17,1)
(21,11,1)
(25,1,1)
(3,0,1)
(0,30,1)
(10,8,1)
(30,34,1)
(34,21,1)
(1,12,1)
(23,22,1)
(11,23,1)
(14,31,1)
(29,34,1)
(22,33,1)
(20,4,1)
(12,29,1)
(26,10,1)
(4,7,1)
(2,27,1)
(17,3,1)
(11,18,1)
(33,14,1)
(3,20,1)
(4,32,1)
(6,20,1)
(1,3,1)
(31,6,1)
(7,2,1)
(23,22,2)
(21,11,2)
(2,27,2)
(0,34,2)
(17,34,2)
(3,20,2)
(11,23,2)
(4,7,2)
(11,18,2)
(30,34,2)
(3,34,2)
(4,32,2)
(22,33,2)
(7,2,2)
(1,3,2)
(20,4,2)
-----------------------------------
(0,dataBadBuffer)
(1,printWLine(data)
(2,50*sizeof(wchar_t)
(3,data = dataBadBuffer)
(4,(wchar_t *)
(5,)
(6,dataGoodBuffer)
(7,ALLOCA(50*sizeof(wchar_t)
(8,dataBadBuffer)
(9,data)
(10,50)
(11,(wchar_t *)
(12,data)
(13,)
(14,wchar_t)
(15,)
(16,source)
(17,'\\\\0')
(18,wchar_t *)
(19,if(staticTrue)
(20,* dataBadBuffer = (wchar_t *)
(21,* dataGoodBuffer = (wchar_t *)
(22,100*sizeof(wchar_t)
(23,ALLOCA(100*sizeof(wchar_t)
(24,\'\\\\0\')
(25,RET)
(26,wchar_t)
(27,sizeof(wchar_t)
(28,dataGoodBuffer)
(29,'\\\\0')
(30,data)
(31,100)
(32,wchar_t *)
(33,sizeof(wchar_t)
(34,staticTrue)
(35,dataBadBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^