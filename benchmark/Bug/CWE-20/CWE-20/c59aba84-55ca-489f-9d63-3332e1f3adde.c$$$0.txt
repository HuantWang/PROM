-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_10_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,61,62,67,69,70,71,75,77,80,85,87
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
64,65
64,66
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_10_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_10_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_10_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalTrue
globalTrue
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(19,6,0)
(19,3,0)
(16,7,0)
(34,20,0)
(19,21,0)
(13,14,0)
(25,17,0)
(9,24,0)
(3,31,0)
(1,5,0)
(29,14,0)
(2,4,0)
(2,5,0)
(6,26,0)
(31,3,0)
(33,20,0)
(10,14,0)
(22,26,0)
(15,31,0)
(6,19,0)
(21,19,0)
(8,11,0)
(0,26,0)
(11,6,0)
(17,6,0)
(32,16,0)
(12,6,0)
(5,2,0)
(31,24,0)
(20,14,0)
(24,31,0)
(16,6,0)
(16,20,0)
(28,11,0)
(17,26,0)
(3,19,0)
(8,28,1)
(2,5,1)
(22,11,1)
(16,20,1)
(24,9,1)
(23,30,1)
(5,1,1)
(3,31,1)
(19,21,1)
(30,20,1)
(11,6,1)
(22,2,1)
(9,15,1)
(16,6,1)
(11,8,1)
(17,6,1)
(15,12,1)
(19,3,1)
(18,23,1)
(25,22,1)
(31,24,1)
(18,16,1)
(12,30,1)
(16,32,1)
(23,17,1)
(32,23,1)
(20,33,1)
(1,11,1)
(28,6,1)
(17,25,1)
(33,34,1)
(6,19,1)
(2,11,2)
(6,30,2)
(8,30,2)
(16,6,2)
(11,6,2)
(24,30,2)
(3,31,2)
(19,30,2)
(16,23,2)
(19,3,2)
(15,30,2)
(31,30,2)
(17,6,2)
(25,30,2)
(22,30,2)
(12,30,2)
(16,20,2)
(11,30,2)
(1,11,2)
(17,30,2)
(28,30,2)
(3,30,2)
(2,5,2)
(32,23,2)
(6,19,2)
(19,21,2)
(5,11,2)
(9,30,2)
(31,24,2)
-----------------------------------
(0,if (data == NULL)
(1,1)
(2,exit(-1)
(3,malloc(100*sizeof(wchar_t)
(4,)
(5,-1)
(6,data = (wchar_t *)
(7,)
(8,NULL)
(9,wchar_t)
(10,if(globalTrue)
(11,data == NULL)
(12,data)
(13,data)
(14,)
(15,100)
(16,printWLine(data)
(17,free(data)
(18,RET)
(19,(wchar_t *)
(20,data = NULL)
(21,wchar_t *)
(22,'\\\\0')
(23,globalTrue)
(24,sizeof(wchar_t)
(25,data)
(26,)
(27,\'\\\\0\')
(28,data)
(29,if(globalTrue)
(30,globalTrue)
(31,100*sizeof(wchar_t)
(32,data)
(33,NULL)
(34,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^