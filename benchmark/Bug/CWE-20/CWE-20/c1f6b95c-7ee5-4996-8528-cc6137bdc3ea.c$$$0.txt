-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            memcpy(data, source, 100*sizeof(char));
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
82,89
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
110,113
110,114
111,112
113,114
115,116
117,118
117,119
119,120
120,121
120,122
123,124
124,125
124,126
125,126
125,127
126,127
128,129
128,130
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,67,69,73,75,76,80,81,85,87,89,93,95,96,98,99,104,106,107,108,112,114,116,118,121,122,127,129,130,131,135,137,141,143
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
63,64
63,65
97,98
97,99
101,102
101,103
105,106
105,107
117,118
117,119
124,125
124,126
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memcpy(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memcpy(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memcpy(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memcpy(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(29,57,0)
(5,1,0)
(47,66,0)
(26,48,0)
(41,65,0)
(24,17,0)
(12,3,0)
(17,28,0)
(14,8,0)
(0,33,0)
(45,57,0)
(71,53,0)
(36,17,0)
(39,7,0)
(3,42,0)
(44,54,0)
(22,46,0)
(67,3,0)
(25,30,0)
(51,22,0)
(28,31,0)
(2,65,0)
(27,55,0)
(1,5,0)
(67,13,0)
(20,32,0)
(22,30,0)
(54,12,0)
(53,6,0)
(55,30,0)
(41,30,0)
(58,53,0)
(32,14,0)
(52,30,0)
(72,31,0)
(69,12,0)
(13,57,0)
(61,66,0)
(46,38,0)
(50,30,0)
(31,33,0)
(65,41,0)
(56,13,0)
(8,42,0)
(7,57,0)
(70,14,0)
(68,42,0)
(19,67,0)
(3,57,0)
(59,1,0)
(6,25,0)
(35,33,0)
(42,8,0)
(18,38,0)
(43,3,0)
(46,22,0)
(16,28,0)
(15,57,0)
(48,57,0)
(66,3,0)
(28,9,0)
(8,14,0)
(50,31,0)
(28,17,0)
(9,30,0)
(37,48,0)
(31,7,0)
(60,46,0)
(63,9,0)
(38,46,0)
(5,23,0)
(11,67,0)
(21,50,0)
(55,31,0)
(74,41,0)
(10,41,0)
(30,7,0)
(6,53,0)
(22,31,0)
(14,32,0)
(64,54,0)
(42,3,0)
(34,25,0)
(4,65,0)
(42,68,0)
(33,31,0)
(12,57,0)
(40,22,0)
(73,6,0)
(10,31,1)
(27,9,1)
(2,4,1)
(62,50,1)
(69,54,1)
(65,2,1)
(72,12,1)
(64,44,1)
(33,0,1)
(47,61,1)
(41,65,1)
(50,21,1)
(25,34,1)
(43,48,1)
(19,11,1)
(66,3,1)
(35,72,1)
(66,47,1)
(44,13,1)
(28,17,1)
(48,37,1)
(42,68,1)
(12,69,1)
(55,31,1)
(20,70,1)
(0,35,1)
(55,27,1)
(32,20,1)
(74,10,1)
(60,51,1)
(24,16,1)
(6,53,1)
(31,33,1)
(63,28,1)
(54,64,1)
(37,26,1)
(67,19,1)
(22,31,1)
(42,8,1)
(71,58,1)
(22,46,1)
(14,32,1)
(53,71,1)
(21,55,1)
(1,59,1)
(4,74,1)
(11,5,1)
(8,14,1)
(34,6,1)
(73,41,1)
(36,24,1)
(59,66,1)
(3,42,1)
(38,18,1)
(58,73,1)
(11,66,1)
(12,3,1)
(46,38,1)
(67,3,1)
(5,1,1)
(56,67,1)
(17,36,1)
(51,40,1)
(70,43,1)
(13,56,1)
(16,22,1)
(50,31,1)
(9,63,1)
(18,60,1)
(61,3,1)
(40,25,1)
(28,31,1)
(42,68,2)
(67,3,2)
(66,3,2)
(50,31,2)
(1,66,2)
(12,3,2)
(14,32,2)
(55,31,2)
(31,33,2)
(5,1,2)
(5,66,2)
(22,46,2)
(42,8,2)
(46,38,2)
(28,17,2)
(41,65,2)
(8,14,2)
(59,66,2)
(28,31,2)
(6,53,2)
(22,31,2)
(3,42,2)
-----------------------------------
(0,unionSecond)
(1,-1)
(2,1)
(3,data = (char *)
(4,100)
(5,exit(-1)
(6,source[100-1])
(7,)
(8,malloc(50*sizeof(char)
(9,data[100-1] = '\\\\0')
(10,source)
(11,data)
(12,myUnion.unionFirst = data)
(13,data[0] = '\\\\0')
(14,50*sizeof(char)
(15,if (data == NULL)
(16,data)
(17,100-1)
(18,char)
(19,0)
(20,char)
(21,data)
(22,memcpy(data, source, 100*sizeof(char)
(23,)
(24,100)
(25,source[100-1] = '\\\\0')
(26,data)
(27,data)
(28,data[100-1])
(29,myUnion)
(30,)
(31,* data = myUnion.unionSecond)
(32,sizeof(char)
(33,myUnion.unionSecond)
(34,'\\\\0')
(35,myUnion)
(36,1)
(37,NULL)
(38,sizeof(char)
(39,data)
(40,data)
(41,memset(source, 'C', 100-1)
(42,(char *)
(43,data)
(44,myUnion)
(45,data)
(46,100*sizeof(char)
(47,NULL)
(48,data = NULL)
(49,memset(source, \'C\', 100-1)
(50,free(data)
(51,source)
(52,source)
(53,100-1)
(54,myUnion.unionFirst)
(55,printLine(data)
(56,'\\\\0')
(57,)
(58,100)
(59,1)
(60,100)
(61,data)
(62,RET)
(63,'\\\\0')
(64,unionFirst)
(65,100-1)
(66,data == NULL)
(67,data[0])
(68,char *)
(69,data)
(70,50)
(71,1)
(72,data)
(73,source)
(74,'C')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^