-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,4,0)
(24,41,0)
(55,1,0)
(17,48,0)
(5,12,0)
(34,18,0)
(28,42,0)
(19,68,0)
(11,12,0)
(45,42,0)
(42,45,0)
(56,13,0)
(66,25,0)
(58,18,0)
(27,52,0)
(12,13,0)
(13,12,0)
(33,68,0)
(35,63,0)
(51,55,0)
(4,48,0)
(44,7,0)
(21,43,0)
(2,21,0)
(31,68,0)
(6,1,0)
(25,1,0)
(22,6,0)
(14,63,0)
(67,31,0)
(43,28,0)
(10,7,0)
(34,16,0)
(21,1,0)
(41,43,0)
(61,41,0)
(59,28,0)
(41,27,0)
(18,34,0)
(28,43,0)
(62,13,0)
(38,8,0)
(39,27,0)
(21,68,0)
(28,59,0)
(45,0,0)
(54,43,0)
(37,67,0)
(23,6,0)
(55,43,0)
(65,0,0)
(48,4,0)
(42,28,0)
(20,26,0)
(29,48,0)
(0,45,0)
(3,67,0)
(43,52,0)
(36,52,0)
(8,43,0)
(22,26,0)
(31,25,0)
(32,31,0)
(47,26,0)
(26,22,0)
(53,45,0)
(64,8,0)
(12,43,0)
(68,63,0)
(12,68,0)
(12,1,0)
(1,63,0)
(48,1,0)
(55,68,0)
(40,1,0)
(31,43,0)
(30,22,0)
(13,56,0)
(49,56,0)
(31,67,0)
(46,4,0)
(24,61,1)
(0,65,1)
(21,68,1)
(12,13,1)
(17,27,1)
(42,45,1)
(8,43,1)
(28,42,1)
(37,32,1)
(39,41,1)
(22,26,1)
(48,4,1)
(20,47,1)
(33,19,1)
(51,25,1)
(18,58,1)
(8,38,1)
(55,68,1)
(64,43,1)
(28,59,1)
(21,2,1)
(27,39,1)
(54,7,1)
(56,49,1)
(26,20,1)
(13,56,1)
(12,43,1)
(17,7,1)
(23,22,1)
(58,8,1)
(53,54,1)
(61,34,1)
(11,6,1)
(3,37,1)
(55,43,1)
(41,43,1)
(65,53,1)
(44,10,1)
(32,12,1)
(6,23,1)
(61,8,1)
(30,48,1)
(15,29,1)
(29,17,1)
(7,44,1)
(47,30,1)
(41,24,1)
(31,43,1)
(68,33,1)
(21,43,1)
(34,18,1)
(5,11,1)
(49,62,1)
(12,68,1)
(2,55,1)
(46,15,1)
(31,68,1)
(31,67,1)
(10,68,1)
(9,21,1)
(38,64,1)
(45,0,1)
(4,46,1)
(67,3,1)
(55,51,1)
(66,31,1)
(25,66,1)
(62,5,1)
(43,28,1)
(45,7,2)
(28,42,2)
(43,28,2)
(0,7,2)
(34,8,2)
(24,7,2)
(55,68,2)
(12,43,2)
(64,7,2)
(28,59,2)
(41,43,2)
(31,68,2)
(54,7,2)
(39,7,2)
(27,7,2)
(8,7,2)
(41,7,2)
(12,68,2)
(58,8,2)
(43,7,2)
(21,43,2)
(65,7,2)
(8,43,2)
(34,18,2)
(48,4,2)
(12,13,2)
(18,8,2)
(31,67,2)
(22,26,2)
(28,7,2)
(31,43,2)
(55,43,2)
(13,56,2)
(42,45,2)
(45,0,2)
(61,7,2)
(53,7,2)
(38,7,2)
(21,68,2)
(42,7,2)
-----------------------------------
(0,sizeof(char)
(1,)
(2,data)
(3,1)
(4,100-1)
(5,source)
(6,source[100-1] = '\\\\0')
(7,STATIC_CONST_FIVE==5)
(8,data == NULL)
(9,RET)
(10,STATIC_CONST_FIVE)
(11,data)
(12,memcpy(data, source, 100*sizeof(char)
(13,100*sizeof(char)
(14,data)
(15,100)
(16,)
(17,source)
(18,-1)
(19,data)
(20,1)
(21,free(data)
(22,source[100-1])
(23,'\\\\0')
(24,0)
(25,data[100-1] = '\\\\0')
(26,100-1)
(27,data[0] = '\\\\0')
(28,(char *)
(29,'C')
(30,source)
(31,data[100-1])
(32,data)
(33,NULL)
(34,exit(-1)
(35,if(STATIC_CONST_FIVE==5)
(36,if (data == NULL)
(37,100)
(38,NULL)
(39,'\\\\0')
(40,source)
(41,data[0])
(42,malloc(50*sizeof(char)
(43,data = (char *)
(44,5)
(45,50*sizeof(char)
(46,1)
(47,100)
(48,memset(source, 'C', 100-1)
(49,char)
(50,memset(source, \'C\', 100-1)
(51,data)
(52,)
(53,50)
(54,data)
(55,printLine(data)
(56,sizeof(char)
(57,data[0] = \'\\\\0\')
(58,1)
(59,char *)
(60,\'\\\\0\')
(61,data)
(62,100)
(63,)
(64,data)
(65,char)
(66,'\\\\0')
(67,100-1)
(68,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^