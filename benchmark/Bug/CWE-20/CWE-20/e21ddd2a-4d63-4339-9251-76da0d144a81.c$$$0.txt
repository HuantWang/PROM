-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            data++;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_12_bad()
CWE190_Integer_Overflow__char_max_postinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(32,18,0)
(4,36,0)
(33,44,0)
(36,22,0)
(17,25,0)
(8,18,0)
(20,14,0)
(30,33,0)
(2,20,0)
(2,19,0)
(8,5,0)
(10,36,0)
(42,3,0)
(16,5,0)
(3,36,0)
(19,20,0)
(29,23,0)
(31,19,0)
(26,39,0)
(13,3,0)
(8,36,0)
(6,44,0)
(34,36,0)
(0,20,0)
(37,36,0)
(9,10,0)
(3,5,0)
(37,5,0)
(5,28,0)
(10,20,0)
(38,8,0)
(41,5,0)
(24,37,0)
(23,37,0)
(11,33,0)
(1,19,0)
(10,5,0)
(35,44,0)
(37,18,0)
(23,18,0)
(15,17,0)
(27,2,0)
(19,36,0)
(21,37,0)
(43,44,0)
(19,5,0)
(9,40,1)
(17,15,1)
(42,40,1)
(19,31,1)
(3,5,1)
(19,36,1)
(8,36,1)
(37,5,1)
(41,16,1)
(8,38,1)
(34,7,1)
(15,3,1)
(1,10,1)
(37,21,1)
(29,37,1)
(2,19,1)
(16,7,1)
(40,36,1)
(36,4,1)
(10,36,1)
(3,13,1)
(3,36,1)
(19,5,1)
(10,5,1)
(4,34,1)
(23,29,1)
(11,30,1)
(33,11,1)
(10,9,1)
(13,42,1)
(37,36,1)
(7,33,1)
(38,3,1)
(21,24,1)
(31,1,1)
(24,8,1)
(12,23,1)
(12,2,1)
(2,27,1)
(12,17,1)
(40,5,1)
(23,37,1)
(5,41,1)
(27,19,1)
(8,5,1)
(34,7,2)
(3,40,2)
(19,5,2)
(36,7,2)
(38,3,2)
(42,40,2)
(10,36,2)
(37,3,2)
(31,40,2)
(3,36,2)
(4,7,2)
(8,5,2)
(19,40,2)
(29,3,2)
(5,7,2)
(24,3,2)
(8,36,2)
(2,40,2)
(21,3,2)
(10,5,2)
(23,3,2)
(10,40,2)
(37,36,2)
(27,40,2)
(9,40,2)
(19,36,2)
(23,37,2)
(16,7,2)
(37,5,2)
(13,40,2)
(3,5,2)
(8,3,2)
(15,3,2)
(41,7,2)
(2,19,2)
(1,40,2)
(17,3,2)
-----------------------------------
(0,result)
(1,result)
(2,printHexCharLine(result)
(3,data < CHAR_MAX)
(4,CHAR_MAX)
(5,data = 2)
(6,if(globalReturnsTrueOrFalse()
(7,globalReturnsTrueOrFalse()
(8,data++)
(9,data)
(10,data++)
(11,\\\' \\\')
(12,RET)
(13,CHAR_MAX)
(14,)
(15,"data value is too large to perform arithmetic safely.")
(16,data)
(17,printLine("data value is too large to perform arithmetic safely.")
(18,)
(19,result = data)
(20,)
(21,data)
(22,)
(23,printHexCharLine(result)
(24,result)
(25,)
(26,if (data < CHAR_MAX)
(27,result)
(28,)
(29,result)
(30,data)
(31,data)
(32,result)
(33,data = \\\' \\\')
(34,data)
(35,data)
(36,data = CHAR_MAX)
(37,result = data)
(38,data)
(39,)
(40,globalReturnsTrueOrFalse()
(41,2)
(42,data)
(43,if(globalReturnsTrueOrFalse()
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^