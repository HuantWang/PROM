-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFive==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
75,76
76,77
76,78
78,79
78,80
78,81
81,82
82,83
82,84
83,84
83,85
85,86
87,88
87,89
88,89
90,91
90,92
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
107,108
109,110
109,111
109,112
109,113
110,111
111,112
111,113
112,113
115,116
115,117
116,117
119,120
120,121
122,123
123,124
124,125
124,126
125,126
125,127
126,127
128,129
131,132
131,133
131,134
132,133
132,134
133,134
136,137
136,138
137,138
138,139
138,140
139,140
139,141
140,141
142,143
145,146
145,147
145,148
145,149
146,147
147,148
147,149
148,149
151,152
151,153
152,153
155,156
156,157
158,159
159,160
160,161
160,162
161,162
163,164
163,165
164,165
166,167
168,169
169,170
170,171
170,172
171,172
174,175
175,176
175,177
176,177
178,179
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,72,74,77,79,80,84,86,89,91,94,95,99,101,106,108,113,114,117,118,121,127,129,130,134,135,141,143,144,149,150,153,154,157,162,165,167,172,173,177,179
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
90,91
90,92
97,98
97,99
111,112
111,113
115,116
115,117
124,125
124,126
132,133
132,134
138,139
138,140
147,148
147,149
151,152
151,153
-----guardedBy-----
40,56
134,143
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad(){    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad
{    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
globalFive==5
globalFive
globalFive
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(96,93,0)
(12,64,0)
(56,77,0)
(58,3,0)
(25,30,0)
(33,78,0)
(78,35,0)
(57,19,0)
(64,35,0)
(56,84,0)
(29,94,0)
(1,45,0)
(46,64,0)
(40,43,0)
(35,91,0)
(23,86,0)
(82,3,0)
(37,55,0)
(8,64,0)
(78,81,0)
(71,17,0)
(64,55,0)
(79,69,0)
(50,94,0)
(39,78,0)
(86,57,0)
(6,37,0)
(61,11,0)
(91,21,0)
(26,17,0)
(35,3,0)
(81,97,0)
(20,65,0)
(75,3,0)
(67,16,0)
(80,20,0)
(90,16,0)
(16,74,0)
(84,56,0)
(13,98,0)
(92,35,0)
(10,25,0)
(63,77,0)
(46,24,0)
(31,55,0)
(100,17,0)
(60,70,0)
(77,11,0)
(25,10,0)
(15,20,0)
(5,45,0)
(48,70,0)
(4,84,0)
(65,20,0)
(47,97,0)
(27,11,0)
(86,98,0)
(45,55,0)
(67,28,0)
(42,3,0)
(28,17,0)
(54,77,0)
(95,58,0)
(62,63,0)
(36,51,0)
(18,67,0)
(58,35,0)
(69,98,0)
(2,10,0)
(52,96,0)
(89,81,0)
(34,77,0)
(65,91,0)
(59,67,0)
(41,57,0)
(64,57,0)
(66,13,0)
(76,53,0)
(94,35,0)
(86,35,0)
(63,16,0)
(3,88,0)
(64,46,0)
(85,56,0)
(28,43,0)
(22,98,0)
(83,55,0)
(99,80,0)
(78,16,0)
(87,28,0)
(49,3,0)
(78,28,0)
(0,3,0)
(91,35,0)
(14,98,0)
(20,80,0)
(11,68,0)
(9,56,0)
(7,53,0)
(32,86,0)
(21,91,0)
(43,28,0)
(72,36,0)
(38,56,0)
(73,69,0)
(16,63,0)
(91,65,0)
(37,55,1)
(63,77,1)
(41,86,1)
(58,95,1)
(78,16,1)
(34,54,1)
(59,18,1)
(60,48,1)
(81,89,1)
(33,67,1)
(92,53,1)
(29,50,1)
(64,12,1)
(39,33,1)
(45,1,1)
(78,28,1)
(32,69,1)
(57,41,1)
(67,28,1)
(64,35,1)
(18,69,1)
(79,13,1)
(56,77,1)
(94,29,1)
(69,98,1)
(35,91,1)
(38,85,1)
(16,63,1)
(91,65,1)
(86,98,1)
(96,52,1)
(7,76,1)
(2,94,1)
(70,60,1)
(13,66,1)
(73,79,1)
(4,56,1)
(84,56,1)
(94,35,1)
(50,35,1)
(5,55,1)
(89,78,1)
(12,8,1)
(43,40,1)
(15,92,1)
(28,43,1)
(76,70,1)
(54,70,1)
(90,84,1)
(64,55,1)
(31,83,1)
(13,98,1)
(67,59,1)
(79,98,1)
(76,96,1)
(58,35,1)
(72,67,1)
(6,46,1)
(83,81,1)
(46,64,1)
(78,39,1)
(1,5,1)
(36,72,1)
(23,32,1)
(52,84,1)
(77,34,1)
(99,15,1)
(67,16,1)
(10,2,1)
(44,58,1)
(22,94,1)
(80,99,1)
(8,45,1)
(14,22,1)
(37,6,1)
(85,9,1)
(25,10,1)
(63,62,1)
(95,45,1)
(64,57,1)
(45,55,1)
(76,16,1)
(86,23,1)
(95,36,1)
(78,35,1)
(62,90,1)
(66,57,1)
(44,53,1)
(48,28,1)
(91,21,1)
(40,87,1)
(5,37,1)
(20,80,1)
(53,7,1)
(9,77,1)
(98,14,1)
(69,73,1)
(56,38,1)
(65,20,1)
(55,31,1)
(22,25,1)
(84,4,1)
(86,35,1)
(38,70,2)
(69,53,2)
(10,94,2)
(45,45,2)
(34,70,2)
(58,53,2)
(14,53,2)
(65,20,2)
(4,70,2)
(64,55,2)
(63,84,2)
(50,53,2)
(13,69,2)
(36,67,2)
(25,94,2)
(64,35,2)
(90,84,2)
(18,53,2)
(32,69,2)
(91,53,2)
(94,35,2)
(52,84,2)
(37,45,2)
(80,53,2)
(69,69,2)
(92,53,2)
(64,57,2)
(79,53,2)
(99,53,2)
(72,67,2)
(5,67,2)
(86,35,2)
(31,67,2)
(58,35,2)
(69,98,2)
(22,53,2)
(62,84,2)
(66,69,2)
(83,67,2)
(6,45,2)
(56,77,2)
(13,98,2)
(57,69,2)
(67,53,2)
(15,53,2)
(94,53,2)
(20,53,2)
(1,67,2)
(28,43,2)
(35,53,2)
(55,67,2)
(67,28,2)
(86,98,2)
(78,16,2)
(98,53,2)
(1,45,2)
(86,69,2)
(91,65,2)
(65,53,2)
(8,45,2)
(56,70,2)
(37,55,2)
(73,53,2)
(29,53,2)
(78,28,2)
(96,84,2)
(54,70,2)
(9,70,2)
(84,70,2)
(79,69,2)
(46,64,2)
(95,53,2)
(20,80,2)
(16,63,2)
(59,53,2)
(41,69,2)
(35,91,2)
(23,69,2)
(45,67,2)
(16,84,2)
(2,94,2)
(91,21,2)
(63,77,2)
(85,70,2)
(39,67,2)
(89,67,2)
(78,35,2)
(12,45,2)
(25,10,2)
(78,67,2)
(5,45,2)
(67,16,2)
(81,67,2)
(84,56,2)
(77,70,2)
(45,55,2)
(33,67,2)
(46,45,2)
(73,69,2)
(64,45,2)
-----------------------------------
(0,for (i = 0; i < 10; i++)
(1,10)
(2,1)
(3,)
(4,NULL)
(5,i)
(6,i)
(7,5)
(8,buffer)
(9,inputBuffer)
(10,-1)
(11,)
(12,i)
(13,i++)
(14,0)
(15,10)
(16,data = atoi(inputBuffer)
(17,)
(18,data)
(19,)
(20,10 * sizeof(int)
(21,int *)
(22,i)
(23,i)
(24,)
(25,exit(-1)
(26,if(globalFive==5)
(27,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,data = -1)
(29,NULL)
(30,)
(31,0)
(32,buffer)
(33,buffer)
(34,"")
(35,* buffer = (int *)
(36,printLine("ERROR: Array index is negative.")
(37,i++)
(38,stdin)
(39,data)
(40,1)
(41,0)
(42,i)
(43,-1)
(44,RET)
(45,i < 10)
(46,printIntLine(buffer[i])
(47,for(i = 0; i < 10; i++)
(48,globalFive)
(49,if (data >= 0)
(50,buffer)
(51,)
(52,"fgets()
(53,globalFive==5)
(54,inputBuffer)
(55,i = 0)
(56,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(57,buffer[i] = 0)
(58,free(buffer)
(59,0)
(60,5)
(61,inputBuffer)
(62,inputBuffer)
(63,atoi(inputBuffer)
(64,buffer[i])
(65,malloc(10 * sizeof(int)
(66,i)
(67,data >= 0)
(68,)
(69,i < 10)
(70,globalFive==5)
(71,data)
(72,"ERROR: Array index is negative.")
(73,10)
(74,)
(75,buffer)
(76,globalFive)
(77,inputBuffer[CHAR_ARRAY_SIZE] = "")
(78,buffer[data])
(79,i)
(80,sizeof(int)
(81,buffer[data] = 1)
(82,if (buffer == NULL)
(83,i)
(84,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(85,CHAR_ARRAY_SIZE)
(86,buffer[i])
(87,data)
(88,)
(89,1)
(90,data)
(91,(int *)
(92,buffer)
(93,)
(94,buffer == NULL)
(95,buffer)
(96,printLine("fgets()
(97,)
(98,i = 0)
(99,int)
(100,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^