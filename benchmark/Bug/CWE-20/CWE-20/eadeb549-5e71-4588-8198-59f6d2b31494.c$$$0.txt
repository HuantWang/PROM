-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strcat(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
63,64
64,65
64,66
65,66
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,61,62,66,67,68,72,74,76,80,82,83,85,86,91,93,94,95,99,101,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
84,85
84,86
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,23,0)
(11,58,0)
(28,5,0)
(6,12,0)
(5,24,0)
(41,11,0)
(12,6,0)
(50,14,0)
(35,7,0)
(0,5,0)
(36,11,0)
(45,57,0)
(24,5,0)
(21,57,0)
(41,47,0)
(49,14,0)
(54,57,0)
(43,58,0)
(48,14,0)
(7,16,0)
(47,58,0)
(14,49,0)
(4,47,0)
(56,57,0)
(25,48,0)
(23,40,0)
(23,14,0)
(4,11,0)
(34,7,0)
(17,14,0)
(33,41,0)
(31,19,0)
(37,49,0)
(39,12,0)
(24,47,0)
(8,4,0)
(29,38,0)
(3,24,0)
(19,47,0)
(49,37,0)
(51,57,0)
(7,34,0)
(49,16,0)
(2,57,0)
(55,2,0)
(13,58,0)
(16,49,0)
(22,47,0)
(10,48,0)
(30,50,0)
(15,6,0)
(16,7,0)
(20,11,0)
(52,12,0)
(9,24,0)
(42,29,0)
(44,40,0)
(4,14,0)
(29,42,0)
(41,14,0)
(1,50,0)
(50,47,0)
(26,42,0)
(6,19,0)
(32,23,0)
(50,11,0)
(14,57,0)
(40,57,0)
(18,34,0)
(46,4,1)
(48,14,1)
(35,17,1)
(54,40,1)
(25,14,1)
(26,48,1)
(29,42,1)
(50,11,1)
(48,10,1)
(55,53,1)
(41,14,1)
(32,27,1)
(14,49,1)
(49,16,1)
(16,7,1)
(6,12,1)
(34,18,1)
(9,3,1)
(52,39,1)
(7,34,1)
(31,6,1)
(8,41,1)
(30,19,1)
(39,15,1)
(3,51,1)
(3,54,1)
(17,53,1)
(27,48,1)
(41,11,1)
(44,23,1)
(23,32,1)
(53,11,1)
(4,14,1)
(40,44,1)
(24,5,1)
(19,31,1)
(49,37,1)
(0,28,1)
(23,14,1)
(1,30,1)
(28,9,1)
(10,25,1)
(15,24,1)
(41,33,1)
(11,20,1)
(50,1,1)
(4,11,1)
(18,35,1)
(50,14,1)
(27,29,1)
(2,55,1)
(33,50,1)
(51,2,1)
(42,26,1)
(12,52,1)
(5,0,1)
(4,8,1)
(20,36,1)
(27,53,2)
(54,53,2)
(4,11,2)
(17,53,2)
(41,11,2)
(6,12,2)
(14,53,2)
(40,53,2)
(32,53,2)
(34,53,2)
(55,53,2)
(14,49,2)
(48,14,2)
(2,53,2)
(7,34,2)
(23,53,2)
(16,7,2)
(4,14,2)
(35,53,2)
(16,53,2)
(50,11,2)
(49,53,2)
(49,37,2)
(7,53,2)
(42,48,2)
(29,42,2)
(29,48,2)
(10,53,2)
(18,53,2)
(48,53,2)
(24,5,2)
(44,53,2)
(23,14,2)
(51,53,2)
(50,14,2)
(26,48,2)
(49,16,2)
(25,53,2)
(41,14,2)
-----------------------------------
(0,1)
(1,source)
(2,printLine("Benign, fixed string")
(3,source)
(4,free(data)
(5,100-1)
(6,source[100-1])
(7,50*sizeof(char)
(8,data)
(9,\\\'C\\\')
(10,NULL)
(11,data = NULL)
(12,100-1)
(13,switch(6)
(14,data = (char *)
(15,source)
(16,malloc(50*sizeof(char)
(17,data)
(18,char)
(19,source[100-1] = \\\'\\\\0\\\')
(20,NULL)
(21,if (data == NULL)
(22,source)
(23,data[0])
(24,memset(source, \\\'C\\\', 100-1)
(25,data)
(26,1)
(27,data)
(28,100)
(29,exit(-1)
(30,data)
(31,\\\'\\\\0\\\')
(32,0)
(33,data)
(34,sizeof(char)
(35,50)
(36,data)
(37,char *)
(38,)
(39,100)
(40,data[0] = \\\'\\\\0\\\')
(41,printLine(data)
(42,-1)
(43,data)
(44,\\\'\\\\0\\\')
(45,case 6:)
(46,RET)
(47,)
(48,data == NULL)
(49,(char *)
(50,strcat(data, source)
(51,break;)
(52,1)
(53,6)
(54,break;)
(55,"Benign, fixed string")
(56,default:)
(57,)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^