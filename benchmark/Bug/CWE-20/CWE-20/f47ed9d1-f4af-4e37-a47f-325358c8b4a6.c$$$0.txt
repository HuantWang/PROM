-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: using memcpy with the length of the dest where data
         * could be smaller than dest causing buffer overread */
        memcpy(dest, data, strlen(dest)*sizeof(char));
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
26,28
29,30
30,31
30,32
31,32
31,33
32,33
34,35
34,36
38,39
39,40
39,41
39,42
39,43
40,41
42,43
44,45
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,6,8,9,14,16,18,22,24,25,27,28,33,35,36,37,41,43,45,49,51,54,55,60,62,63,64,68,70,74,76
-----computeFrom-----
26,27
26,28
30,31
30,32
34,35
34,36
46,47
46,48
57,58
57,59
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
{        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memcpy(dest, data, strlen(dest)*sizeof(char));
memcpy(dest, data, strlen(dest)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(dest)*sizeof(char)
strlen(dest)
strlen
strlen
dest
dest
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(35,17,0)
(0,5,0)
(25,0,0)
(33,8,0)
(0,25,0)
(29,34,0)
(27,28,0)
(21,4,0)
(19,20,0)
(5,0,0)
(28,26,0)
(9,34,0)
(24,31,0)
(8,34,0)
(36,8,0)
(7,9,0)
(22,34,0)
(3,4,0)
(17,4,0)
(16,25,0)
(13,34,0)
(28,13,0)
(15,19,0)
(32,22,0)
(4,17,0)
(11,30,0)
(30,8,0)
(0,19,0)
(26,28,0)
(14,5,0)
(19,0,0)
(34,2,0)
(31,34,0)
(17,22,0)
(8,30,0)
(19,34,0)
(10,30,0)
(37,26,0)
(6,19,0)
(1,13,0)
(18,26,0)
(9,20,0)
(3,21,1)
(28,26,1)
(5,14,1)
(35,19,1)
(8,30,1)
(7,31,1)
(16,6,1)
(33,36,1)
(17,4,1)
(31,24,1)
(30,11,1)
(4,3,1)
(0,5,1)
(15,13,1)
(19,20,1)
(37,27,1)
(32,17,1)
(22,32,1)
(11,10,1)
(0,25,1)
(26,18,1)
(27,8,1)
(9,20,1)
(24,22,1)
(25,16,1)
(1,28,1)
(6,15,1)
(23,9,1)
(21,35,1)
(19,0,1)
(18,37,1)
(14,25,1)
(13,1,1)
(10,33,1)
(9,7,1)
(8,30,2)
(9,20,2)
(0,25,2)
(17,4,2)
(0,5,2)
(19,0,2)
(28,26,2)
(19,20,2)
-----------------------------------
(0,strlen(dest)
(1,'\\\\0')
(2,)
(3,1)
(4,100-1)
(5,sizeof(char)
(6,data)
(7,data)
(8,memset(dest, 'C', 100-1)
(9,free(data)
(10,100)
(11,1)
(12,memset(dest, \'C\', 100-1)
(13,dest[100-1] = '\\\\0')
(14,char)
(15,dest)
(16,dest)
(17,dest[100-1])
(18,1)
(19,memcpy(dest, data, strlen(dest)
(20,char * data)
(21,100)
(22,dest[100-1] = '\\\\0')
(23,RET)
(24,dest)
(25,strlen(dest)
(26,100-1)
(27,dest)
(28,dest[100-1])
(29,dest)
(30,100-1)
(31,printLine(dest)
(32,'\\\\0')
(33,'C')
(34,)
(35,dest)
(36,dest)
(37,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^