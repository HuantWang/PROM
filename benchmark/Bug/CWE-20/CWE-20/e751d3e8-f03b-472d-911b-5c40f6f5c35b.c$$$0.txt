-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
68,70
70,71
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,67,69,72,73,77,80,81,85,87
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(36,21,0)
(21,27,0)
(10,26,0)
(23,36,0)
(41,33,0)
(32,5,0)
(29,12,0)
(21,36,0)
(11,24,0)
(8,36,0)
(7,5,0)
(36,0,0)
(19,6,0)
(36,33,0)
(12,10,0)
(28,33,0)
(32,1,0)
(24,15,0)
(30,21,0)
(36,15,0)
(27,21,0)
(16,3,0)
(28,24,0)
(3,20,0)
(14,15,0)
(37,0,0)
(20,3,0)
(35,4,0)
(5,32,0)
(38,31,0)
(25,12,0)
(6,10,0)
(20,10,0)
(34,24,0)
(9,4,0)
(6,15,0)
(6,33,0)
(18,31,0)
(40,10,0)
(33,4,0)
(24,10,0)
(24,28,0)
(13,26,0)
(36,10,0)
(10,20,0)
(22,15,0)
(0,33,0)
(15,4,0)
(20,39,0)
(2,27,0)
(39,20,0)
(12,29,1)
(37,12,1)
(6,10,1)
(28,24,1)
(40,31,1)
(20,39,1)
(7,12,1)
(8,23,1)
(32,5,1)
(25,10,1)
(27,2,1)
(12,10,1)
(34,11,1)
(3,16,1)
(24,34,1)
(36,10,1)
(36,21,1)
(16,40,1)
(0,37,1)
(2,30,1)
(31,18,1)
(17,6,1)
(18,38,1)
(38,15,1)
(6,19,1)
(24,15,1)
(36,0,1)
(29,25,1)
(30,8,1)
(15,14,1)
(6,15,1)
(11,36,1)
(37,31,1)
(36,15,1)
(14,22,1)
(21,27,1)
(10,20,1)
(23,0,1)
(5,7,1)
(20,3,1)
(24,10,1)
(37,32,1)
(19,28,1)
(28,24,2)
(36,21,2)
(20,3,2)
(21,27,2)
(3,31,2)
(25,31,2)
(12,10,2)
(24,15,2)
(12,31,2)
(32,12,2)
(40,31,2)
(20,39,2)
(20,31,2)
(6,15,2)
(10,20,2)
(10,31,2)
(36,0,2)
(32,5,2)
(36,10,2)
(5,12,2)
(29,31,2)
(16,31,2)
(7,12,2)
(6,10,2)
(36,15,2)
(24,10,2)
-----------------------------------
(0,source[10] = {0})
(1,)
(2,int)
(3,malloc(10)
(4,)
(5,-1)
(6,free(data)
(7,1)
(8,source)
(9,data)
(10,data = (int *)
(11,data)
(12,data == NULL)
(13,if (data == NULL)
(14,NULL)
(15,data = NULL)
(16,10)
(17,RET)
(18,5)
(19,data)
(20,(int *)
(21,10*sizeof(int)
(22,data)
(23,data)
(24,data[0])
(25,data)
(26,)
(27,sizeof(int)
(28,printIntLine(data[0])
(29,NULL)
(30,10)
(31,5==5)
(32,exit(-1)
(33,)
(34,0)
(35,if(5==5)
(36,memcpy(data, source, 10*sizeof(int)
(37,source)
(38,5)
(39,int *)
(40,data)
(41,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^