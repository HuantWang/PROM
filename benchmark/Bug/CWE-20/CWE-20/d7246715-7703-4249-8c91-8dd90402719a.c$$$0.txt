-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_popen_11_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsTrue())
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
54,56
55,56
55,57
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
92,93
93,94
93,95
95,96
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
121,122
121,123
121,124
122,123
123,124
123,125
124,125
126,127
126,128
129,130
130,131
130,132
131,132
133,134
133,135
133,136
134,135
136,137
139,140
139,141
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
150,151
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,49,51,52,56,58,59,64,67,69,70,74,76,82,85,87,90,91,94,96,98,100,105,106,111,113,114,118,120,125,127,128,132,135,137,138,142,144,149,151
-----computeFrom-----
23,24
23,25
54,55
54,56
55,56
55,57
62,63
62,64
72,73
72,74
79,80
79,81
83,84
83,85
93,94
93,95
108,109
108,110
130,131
130,132
140,141
140,142
-----guardedBy-----
58,113
76,100
74,120
85,111
96,113
142,151
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_popen_11_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_file_popen_11_bad()
CWE78_OS_Command_Injection__char_file_popen_11_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(65,15,0)
(15,53,0)
(10,62,0)
(14,10,0)
(25,71,0)
(33,14,0)
(10,14,0)
(32,63,0)
(23,31,0)
(20,71,0)
(4,10,0)
(53,70,0)
(41,70,0)
(16,32,0)
(62,3,0)
(57,20,0)
(15,70,0)
(31,32,0)
(30,50,0)
(12,62,0)
(13,12,0)
(28,27,0)
(1,62,0)
(61,26,0)
(73,0,0)
(31,52,0)
(19,37,0)
(63,70,0)
(10,49,0)
(32,68,0)
(68,15,0)
(62,22,0)
(44,63,0)
(51,28,0)
(20,15,0)
(27,19,0)
(0,73,0)
(10,0,0)
(36,6,0)
(0,47,0)
(55,12,0)
(1,50,0)
(28,56,0)
(26,15,0)
(18,68,0)
(2,73,0)
(39,28,0)
(29,49,0)
(14,15,0)
(60,68,0)
(67,15,0)
(24,20,0)
(68,32,0)
(7,6,0)
(58,63,0)
(49,10,0)
(56,28,0)
(64,56,0)
(21,53,0)
(45,53,0)
(71,11,0)
(48,62,0)
(38,19,0)
(6,32,0)
(0,10,0)
(14,27,0)
(35,1,0)
(26,27,0)
(17,22,0)
(46,73,0)
(72,22,0)
(73,27,0)
(22,62,0)
(66,3,0)
(54,70,0)
(59,19,0)
(20,27,0)
(27,26,0)
(9,5,0)
(40,14,0)
(8,70,0)
(34,27,0)
(47,0,0)
(5,11,0)
(43,19,0)
(56,28,1)
(26,15,1)
(20,57,1)
(16,12,1)
(21,45,1)
(32,68,1)
(15,53,1)
(72,17,1)
(46,2,1)
(64,28,1)
(10,14,1)
(68,15,1)
(56,64,1)
(14,27,1)
(40,33,1)
(17,48,1)
(25,20,1)
(10,0,1)
(12,62,1)
(67,53,1)
(31,23,1)
(1,35,1)
(16,1,1)
(16,42,1)
(14,15,1)
(49,29,1)
(31,32,1)
(18,60,1)
(51,39,1)
(14,40,1)
(15,65,1)
(62,22,1)
(28,51,1)
(33,12,1)
(42,15,1)
(27,26,1)
(24,5,1)
(73,46,1)
(61,34,1)
(53,21,1)
(1,62,1)
(20,15,1)
(60,16,1)
(10,62,1)
(65,67,1)
(0,73,1)
(39,27,1)
(36,32,1)
(35,49,1)
(5,9,1)
(6,32,1)
(69,31,1)
(34,42,1)
(28,27,1)
(2,14,1)
(9,49,1)
(71,25,1)
(23,6,1)
(4,0,1)
(57,24,1)
(48,56,1)
(7,36,1)
(20,27,1)
(22,72,1)
(13,62,1)
(6,7,1)
(16,56,1)
(35,71,1)
(0,47,1)
(55,13,1)
(69,6,1)
(26,61,1)
(68,18,1)
(12,55,1)
(73,27,1)
(29,10,1)
(49,10,1)
(10,4,1)
(27,26,2)
(27,42,2)
(32,68,2)
(28,42,2)
(51,42,2)
(62,56,2)
(49,12,2)
(0,12,2)
(71,49,2)
(6,32,2)
(12,62,2)
(48,56,2)
(0,73,2)
(10,0,2)
(5,49,2)
(1,62,2)
(29,12,2)
(61,42,2)
(28,27,2)
(68,15,2)
(10,14,2)
(12,56,2)
(14,12,2)
(25,49,2)
(26,15,2)
(0,47,2)
(40,12,2)
(15,53,2)
(73,12,2)
(33,12,2)
(20,27,2)
(62,22,2)
(56,28,2)
(14,27,2)
(39,42,2)
(20,15,2)
(10,62,2)
(57,49,2)
(20,49,2)
(64,42,2)
(9,49,2)
(22,56,2)
(55,56,2)
(56,42,2)
(46,12,2)
(31,32,2)
(31,6,2)
(23,6,2)
(17,56,2)
(4,12,2)
(14,15,2)
(49,10,2)
(10,12,2)
(26,42,2)
(35,12,2)
(1,12,2)
(72,56,2)
(13,56,2)
(73,27,2)
(34,42,2)
(24,49,2)
(2,12,2)
-----------------------------------
(0,(int)
(1,fclose(pFile)
(2,100)
(3,)
(4,pFile)
(5,printLine("fgets()
(6,pipe != NULL)
(7,NULL)
(8,data)
(9,"fgets()
(10,fgets(data+dataLen, (int)
(11,)
(12,pFile != NULL)
(13,pFile)
(14,data+dataLen)
(15,data = data_buf)
(16,pipe)
(17,FILENAME)
(18,"w")
(19,)
(20,data[dataLen])
(21,FULL_COMMAND)
(22,fopen(FILENAME, "r")
(23,pipe)
(24,data)
(25,\\\'\\\\0\\\')
(26,strlen(data)
(27,dataLen = strlen(data)
(28,100-dataLen)
(29,NULL)
(30,if (fgets(data+dataLen, (int)
(31,PCLOSE(pipe)
(32,pipe = POPEN(data, "w")
(33,data)
(34,dataLen)
(35,pFile)
(36,pipe)
(37,)
(38,if (100-dataLen > 1)
(39,100)
(40,dataLen)
(41,data_buf)
(42,globalReturnsTrue()
(43,dataLen)
(44,if (pipe != NULL)
(45,data_buf)
(46,dataLen)
(47,int)
(48,pFile)
(49,fgets(data+dataLen, (int)
(50,)
(51,dataLen)
(52,)
(53,data_buf[100] = FULL_COMMAND)
(54,if(globalReturnsTrue()
(55,NULL)
(56,100-dataLen > 1)
(57,dataLen)
(58,pipe)
(59,pFile)
(60,data)
(61,data)
(62,pFile = fopen(FILENAME, "r")
(63,)
(64,1)
(65,data_buf)
(66,if (pFile != NULL)
(67,data)
(68,POPEN(data, "w")
(69,RET)
(70,)
(71,data[dataLen] = \\\'\\\\0\\\')
(72,"r")
(73,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^