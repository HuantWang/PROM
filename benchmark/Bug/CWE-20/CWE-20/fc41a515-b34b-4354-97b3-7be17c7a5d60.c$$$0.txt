-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_execlp_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal
CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(5,14,0)
(1,32,0)
(33,9,0)
(65,7,0)
(21,18,0)
(40,34,0)
(25,49,0)
(42,31,0)
(44,3,0)
(55,31,0)
(64,41,0)
(63,14,0)
(54,21,0)
(9,38,0)
(41,3,0)
(16,40,0)
(59,44,0)
(48,35,0)
(14,5,0)
(50,14,0)
(2,5,0)
(44,49,0)
(27,15,0)
(46,50,0)
(39,50,0)
(32,1,0)
(34,40,0)
(54,3,0)
(52,48,0)
(1,21,0)
(32,27,0)
(12,21,0)
(38,23,0)
(0,38,0)
(10,60,0)
(9,3,0)
(61,55,0)
(57,29,0)
(9,27,0)
(43,44,0)
(48,3,0)
(1,13,0)
(15,27,0)
(29,37,0)
(52,34,0)
(15,3,0)
(6,9,0)
(8,18,0)
(36,15,0)
(21,1,0)
(55,27,0)
(41,50,0)
(5,3,0)
(21,54,0)
(19,11,0)
(62,52,0)
(54,27,0)
(20,27,0)
(26,40,0)
(24,29,0)
(40,14,0)
(13,1,0)
(11,23,0)
(50,41,0)
(4,55,0)
(30,32,0)
(7,22,0)
(41,7,0)
(35,14,0)
(47,54,0)
(53,35,0)
(18,21,0)
(14,60,0)
(34,52,0)
(28,32,0)
(45,48,0)
(27,29,0)
(66,58,0)
(51,54,0)
(35,48,0)
(17,35,0)
(31,55,0)
(48,52,0)
(19,18,1)
(52,48,1)
(18,8,1)
(36,20,1)
(16,26,1)
(65,41,1)
(32,27,1)
(5,3,1)
(63,18,1)
(21,54,1)
(11,19,1)
(41,3,1)
(33,6,1)
(15,36,1)
(9,33,1)
(45,40,1)
(5,2,1)
(38,0,1)
(61,27,1)
(35,53,1)
(53,17,1)
(44,43,1)
(1,13,1)
(21,12,1)
(54,51,1)
(7,65,1)
(32,30,1)
(55,4,1)
(54,27,1)
(42,55,1)
(31,42,1)
(41,50,1)
(59,44,1)
(9,27,1)
(46,39,1)
(48,35,1)
(20,56,1)
(0,9,1)
(62,48,1)
(43,56,1)
(6,11,1)
(34,40,1)
(28,54,1)
(27,15,1)
(4,61,1)
(17,45,1)
(31,55,1)
(34,52,1)
(8,21,1)
(55,27,1)
(40,16,1)
(12,1,1)
(43,34,1)
(30,28,1)
(1,32,1)
(43,31,1)
(48,3,1)
(51,47,1)
(50,46,1)
(14,5,1)
(9,3,1)
(64,34,1)
(40,14,1)
(26,14,1)
(35,14,1)
(50,14,1)
(43,7,1)
(54,3,1)
(2,63,1)
(18,21,1)
(21,1,1)
(44,3,1)
(52,62,1)
(15,3,1)
(43,38,1)
(39,64,1)
(47,31,1)
(41,34,2)
(11,18,2)
(6,18,2)
(9,3,2)
(19,18,2)
(15,3,2)
(53,40,2)
(1,31,2)
(16,18,2)
(40,14,2)
(34,18,2)
(34,52,2)
(34,40,2)
(5,3,2)
(48,3,2)
(54,31,2)
(14,5,2)
(41,50,2)
(54,27,2)
(17,40,2)
(38,18,2)
(9,27,2)
(9,18,2)
(28,31,2)
(50,34,2)
(5,18,2)
(1,32,2)
(59,44,2)
(55,56,2)
(32,27,2)
(46,34,2)
(27,56,2)
(18,31,2)
(42,56,2)
(2,18,2)
(0,18,2)
(39,34,2)
(64,34,2)
(41,3,2)
(27,15,2)
(40,18,2)
(18,21,2)
(36,56,2)
(7,34,2)
(33,18,2)
(44,3,2)
(63,18,2)
(52,48,2)
(55,27,2)
(45,40,2)
(48,40,2)
(21,31,2)
(48,35,2)
(50,14,2)
(61,56,2)
(35,40,2)
(14,18,2)
(54,3,2)
(35,14,2)
(21,54,2)
(62,40,2)
(47,31,2)
(51,31,2)
(31,55,2)
(8,31,2)
(1,13,2)
(52,40,2)
(15,56,2)
(31,56,2)
(32,31,2)
(21,1,2)
(65,34,2)
(12,31,2)
(20,56,2)
(30,31,2)
(4,56,2)
(26,18,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,(int)
(2,data)
(3,char * data)
(4,dataLen)
(5,strlen(data)
(6,data)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,NULL)
(9,data[dataLen])
(10,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(11,printLine("fgets()
(12,stdin)
(13,int)
(14,dataLen = strlen(data)
(15,strlen(data)
(16,0)
(17,dataLen)
(18,fgets(data+dataLen, (int)
(19,"fgets()
(20,dataLen)
(21,fgets(data+dataLen, (int)
(22,)
(23,)
(24,dataLen)
(25,if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
(26,dataLen)
(27,dataLen = strlen(data)
(28,100)
(29,)
(30,dataLen)
(31,100-dataLen > 1)
(32,100-dataLen)
(33,dataLen)
(34,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(35,dataLen-1)
(36,data)
(37,)
(38,data[dataLen] = \\\'\\\\0\\\')
(39,dataLen)
(40,dataLen > 0)
(41,data[dataLen-1])
(42,1)
(43,data)
(44,return data;)
(45,data)
(46,1)
(47,data)
(48,data[dataLen-1])
(49,)
(50,dataLen-1)
(51,dataLen)
(52,data[dataLen-1] == \\\'\\\\n\\\')
(53,1)
(54,data+dataLen)
(55,100-dataLen)
(56,CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
(57,if (100-dataLen > 1)
(58,)
(59,RET)
(60,)
(61,100)
(62,\\\'\\\\n\\\')
(63,dataLen)
(64,data)
(65,\\\'\\\\0\\\')
(66,if (fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^