-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_memcpy_34_bad()
{
    char * data;
    CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType myUnion;
    data = NULL;
    /* FLAW: Use a small buffer */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    memset(data, 'A', 50-1); /* fill with 'A's */
    data[50-1] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char dest[100];
            memset(dest, 'C', 100-1);
            dest[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: using memcpy with the length of the dest where data
             * could be smaller than dest causing buffer overread */
            memcpy(dest, data, strlen(dest)*sizeof(char));
            dest[100-1] = '\0';
            printLine(dest);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
75,76
75,77
76,77
76,78
77,78
80,81
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
90,92
91,92
94,95
94,96
94,97
94,98
94,99
94,100
94,101
95,96
96,97
96,98
98,99
98,100
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
109,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
136,138
139,140
140,141
140,142
141,142
141,143
142,143
144,145
144,146
148,149
149,150
149,151
150,151
152,153
154,155
155,156
155,157
156,157
158,159
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,78,79,81,85,87,88,92,93,97,99,101,105,107,108,110,111,116,118,119,120,124,126,128,132,134,137,138,143,145,146,147,151,153,157,159
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
75,76
75,77
109,110
109,111
113,114
113,115
117,118
117,119
129,130
129,131
140,141
140,142
144,145
144,146
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_memcpy_34_bad(){    char * data;    CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memcpy with the length of the dest where data             * could be smaller than dest causing buffer overread */            memcpy(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
void
CWE126_Buffer_Overread__malloc_char_memcpy_34_bad()
CWE126_Buffer_Overread__malloc_char_memcpy_34_bad
{    char * data;    CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memcpy with the length of the dest where data             * could be smaller than dest causing buffer overread */            memcpy(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType myUnion;
CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType myUnion;
CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType
CWE126_Buffer_Overread__malloc_char_memcpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memcpy with the length of the dest where data             * could be smaller than dest causing buffer overread */            memcpy(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: using memcpy with the length of the dest where data             * could be smaller than dest causing buffer overread */            memcpy(dest, data, strlen(dest)*sizeof(char));            dest[100-1] = '\0';            printLine(dest);            free(data);        }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memcpy(dest, data, strlen(dest)*sizeof(char));
memcpy(dest, data, strlen(dest)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(dest)*sizeof(char)
strlen(dest)
strlen
strlen
dest
dest
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(5,19,0)
(46,62,0)
(56,2,0)
(6,80,0)
(17,15,0)
(24,37,0)
(77,21,0)
(22,84,0)
(46,50,0)
(78,12,0)
(40,55,0)
(81,14,0)
(79,27,0)
(19,15,0)
(25,80,0)
(32,6,0)
(14,47,0)
(51,4,0)
(18,52,0)
(41,50,0)
(11,15,0)
(67,9,0)
(45,2,0)
(48,83,0)
(6,12,0)
(2,45,0)
(4,12,0)
(6,53,0)
(39,70,0)
(46,53,0)
(1,6,0)
(23,24,0)
(70,17,0)
(47,29,0)
(8,9,0)
(2,56,0)
(83,9,0)
(42,29,0)
(52,18,0)
(36,47,0)
(75,56,0)
(47,14,0)
(62,12,0)
(10,30,0)
(59,83,0)
(11,84,0)
(42,38,0)
(84,11,0)
(73,23,0)
(42,53,0)
(38,42,0)
(65,60,0)
(70,39,0)
(31,46,0)
(61,15,0)
(19,83,0)
(26,17,0)
(21,53,0)
(35,52,0)
(83,27,0)
(74,11,0)
(29,42,0)
(69,12,0)
(28,45,0)
(60,4,0)
(66,61,0)
(53,12,0)
(18,61,0)
(72,30,0)
(2,19,0)
(4,53,0)
(71,21,0)
(27,12,0)
(80,6,0)
(82,80,0)
(58,62,0)
(16,50,0)
(63,84,0)
(53,42,0)
(59,15,0)
(19,2,0)
(64,39,0)
(7,70,0)
(24,23,0)
(34,11,0)
(0,59,0)
(15,27,0)
(3,52,0)
(20,60,0)
(44,12,0)
(76,15,0)
(50,46,0)
(68,53,0)
(55,15,0)
(57,18,0)
(9,83,0)
(33,39,0)
(49,19,0)
(29,47,0)
(30,12,0)
(1,24,1)
(64,7,1)
(59,83,1)
(55,40,1)
(80,82,1)
(50,16,1)
(3,57,1)
(6,80,1)
(49,61,1)
(82,25,1)
(47,14,1)
(23,73,1)
(31,6,1)
(28,5,1)
(40,17,1)
(21,71,1)
(33,64,1)
(63,34,1)
(4,53,1)
(57,11,1)
(41,31,1)
(48,4,1)
(21,53,1)
(60,65,1)
(73,21,1)
(35,3,1)
(70,39,1)
(71,77,1)
(68,30,1)
(8,67,1)
(18,52,1)
(26,70,1)
(61,66,1)
(19,2,1)
(4,51,1)
(20,62,1)
(67,48,1)
(42,29,1)
(45,28,1)
(58,46,1)
(42,38,1)
(83,9,1)
(53,42,1)
(14,81,1)
(30,10,1)
(81,36,1)
(6,53,1)
(5,49,1)
(1,21,1)
(32,1,1)
(36,68,1)
(22,63,1)
(65,20,1)
(2,45,1)
(11,84,1)
(29,47,1)
(46,53,1)
(56,75,1)
(62,58,1)
(16,41,1)
(9,8,1)
(39,33,1)
(7,19,1)
(66,18,1)
(74,83,1)
(19,83,1)
(0,55,1)
(75,45,1)
(2,56,1)
(34,74,1)
(77,53,1)
(51,60,1)
(84,22,1)
(10,72,1)
(24,23,1)
(54,59,1)
(52,35,1)
(17,26,1)
(46,50,1)
(25,32,1)
(59,0,1)
(53,42,2)
(24,21,2)
(46,50,2)
(18,52,2)
(19,2,2)
(6,80,2)
(23,21,2)
(83,9,2)
(46,53,2)
(59,83,2)
(42,38,2)
(21,53,2)
(4,53,2)
(47,14,2)
(70,39,2)
(11,84,2)
(42,29,2)
(2,56,2)
(6,53,2)
(2,45,2)
(19,83,2)
(29,47,2)
(73,21,2)
(24,23,2)
-----------------------------------
(0,data)
(1,data)
(2,strlen(dest)
(3,100)
(4,myUnion.unionFirst = data)
(5,data)
(6,memset(data, 'A', 50-1)
(7,dest)
(8,unionSecond)
(9,myUnion.unionSecond)
(10,NULL)
(11,memset(dest, \'C\', 100-1)
(12,)
(13,memset(data, \'A\', 50-1)
(14,sizeof(char)
(15,)
(16,1)
(17,dest[100-1] = '\\\\0')
(18,dest[100-1])
(19,memcpy(dest, data, strlen(dest)
(20,myUnion)
(21,data == NULL)
(22,1)
(23,-1)
(24,exit(-1)
(25,50)
(26,'\\\\0')
(27,)
(28,dest)
(29,malloc(50*sizeof(char)
(30,data = NULL)
(31,data)
(32,'A')
(33,1)
(34,'C')
(35,1)
(36,50)
(37,)
(38,char *)
(39,100-1)
(40,dest)
(41,50)
(42,(char *)
(43,memset(dest, 'C', 100-1)
(44,myUnion)
(45,strlen(dest)
(46,data[50-1])
(47,50*sizeof(char)
(48,data)
(49,dest)
(50,50-1)
(51,data)
(52,100-1)
(53,data = (char *)
(54,RET)
(55,printLine(dest)
(56,sizeof(char)
(57,dest)
(58,'\\\\0')
(59,free(data)
(60,myUnion.unionFirst)
(61,dest[100-1] = '\\\\0')
(62,data[50-1] = '\\\\0')
(63,100)
(64,100)
(65,unionFirst)
(66,'\\\\0')
(67,myUnion)
(68,data)
(69,if (data == NULL)
(70,dest[100-1])
(71,NULL)
(72,data)
(73,1)
(74,dest)
(75,char)
(76,dest)
(77,data)
(78,data)
(79,data)
(80,50-1)
(81,char)
(82,1)
(83,* data = myUnion.unionSecond)
(84,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^