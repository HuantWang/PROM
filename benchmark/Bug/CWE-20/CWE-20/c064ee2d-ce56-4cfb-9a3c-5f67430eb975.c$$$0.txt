-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_postinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
63,64
64,65
64,66
65,66
69,70
69,71
71,72
71,73
71,74
71,75
71,76
71,77
72,73
74,75
74,76
74,77
75,76
76,77
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
95,96
96,97
96,98
97,98
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,61,62,66,67,68,70,73,78,81,83,86,90,92,93,94,98,99,100
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_postinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fgets_postinc_15_bad()
CWE190_Integer_Overflow__int_fgets_postinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(20,46,0)
(24,31,0)
(32,38,0)
(34,11,0)
(21,7,0)
(30,44,0)
(37,19,0)
(38,11,0)
(6,11,0)
(17,41,0)
(22,13,0)
(10,41,0)
(9,45,0)
(7,19,0)
(18,44,0)
(10,19,0)
(44,45,0)
(8,12,0)
(39,24,0)
(15,10,0)
(52,19,0)
(10,38,0)
(41,3,0)
(44,18,0)
(50,49,0)
(5,25,0)
(23,44,0)
(26,49,0)
(1,46,0)
(7,41,0)
(41,13,0)
(12,46,0)
(2,10,0)
(14,11,0)
(7,38,0)
(43,46,0)
(16,25,0)
(36,38,0)
(35,11,0)
(51,46,0)
(27,35,0)
(40,49,0)
(45,25,0)
(13,41,0)
(33,11,0)
(25,46,0)
(29,32,0)
(32,10,0)
(47,18,0)
(13,45,0)
(48,44,0)
(0,45,0)
(19,49,0)
(51,41,1)
(41,13,1)
(4,19,1)
(7,21,1)
(18,47,1)
(0,9,1)
(28,14,1)
(13,45,1)
(51,24,1)
(19,52,1)
(22,17,1)
(44,45,1)
(35,27,1)
(7,41,1)
(18,44,1)
(42,51,1)
(21,42,1)
(27,42,1)
(30,48,1)
(29,10,1)
(32,29,1)
(10,41,1)
(24,39,1)
(39,18,1)
(10,15,1)
(47,44,1)
(32,10,1)
(10,19,1)
(13,22,1)
(44,30,1)
(52,37,1)
(8,4,1)
(23,45,1)
(14,35,1)
(34,32,1)
(2,7,1)
(12,8,1)
(43,12,1)
(28,34,1)
(42,43,1)
(17,18,1)
(9,4,1)
(15,2,1)
(45,0,1)
(7,19,1)
(48,23,1)
(14,42,2)
(13,18,2)
(17,18,2)
(8,4,2)
(23,4,2)
(15,42,2)
(21,42,2)
(18,44,2)
(41,13,2)
(34,42,2)
(10,41,2)
(10,42,2)
(44,4,2)
(48,4,2)
(0,4,2)
(47,4,2)
(7,19,2)
(43,4,2)
(2,42,2)
(41,18,2)
(44,45,2)
(12,4,2)
(32,10,2)
(9,4,2)
(7,41,2)
(35,42,2)
(22,18,2)
(24,18,2)
(10,19,2)
(39,18,2)
(13,45,2)
(30,4,2)
(32,42,2)
(18,4,2)
(45,4,2)
(27,42,2)
(29,42,2)
(7,42,2)
(51,4,2)
-----------------------------------
(0,"")
(1,case 6:)
(2,result)
(3,)
(4,6)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,default:)
(7,data++)
(8,"Benign, fixed string")
(9,inputBuffer)
(10,result = data)
(11,)
(12,printLine("Benign, fixed string")
(13,atoi(inputBuffer)
(14,break;)
(15,data)
(16,inputBuffer)
(17,data)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,data = 0)
(20,default:)
(21,data)
(22,inputBuffer)
(23,inputBuffer)
(24,printLine("fgets()
(25,)
(26,data)
(27,"Benign, fixed string")
(28,RET)
(29,result)
(30,stdin)
(31,)
(32,printIntLine(result)
(33,case 7:)
(34,break;)
(35,printLine("Benign, fixed string")
(36,result)
(37,data)
(38,)
(39,"fgets()
(40,switch(6)
(41,data = atoi(inputBuffer)
(42,7)
(43,break;)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,inputBuffer[CHAR_ARRAY_SIZE] = "")
(46,)
(47,NULL)
(48,CHAR_ARRAY_SIZE)
(49,)
(50,switch(7)
(51,break;)
(52,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^