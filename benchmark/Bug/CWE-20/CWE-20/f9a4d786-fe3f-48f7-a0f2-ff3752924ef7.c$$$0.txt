-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_14_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(globalFive==5)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
73,74
73,75
73,76
74,75
75,76
75,77
76,77
78,79
78,80
80,81
82,83
82,84
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
99,100
100,101
102,103
102,104
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
109,110
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
119,120
123,124
123,125
123,126
124,125
125,126
125,127
126,127
128,129
130,131
130,132
130,133
130,134
131,132
132,133
132,134
133,134
136,137
136,138
137,138
140,141
141,142
143,144
144,145
145,146
145,147
146,147
146,148
147,148
149,150
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
161,162
161,163
162,163
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,64,65,70,72,77,79,81,86,88,93,94,97,98,101,108,110,111,112,118,120,121,122,127,129,134,135,138,139,142,148,150,153,155,159,163,164
-----computeFrom-----
30,31
30,32
54,55
54,56
62,63
62,64
68,69
68,70
91,92
91,93
95,96
95,97
104,105
104,106
114,115
114,116
132,133
132,134
136,137
136,138
145,146
145,147
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_14_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalFive==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_14_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_14_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalFive==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalFive==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(39,1,0)
(21,3,0)
(43,13,0)
(25,35,0)
(54,82,0)
(26,10,0)
(58,67,0)
(27,63,0)
(19,22,0)
(62,51,0)
(41,30,0)
(3,63,0)
(72,37,0)
(43,17,0)
(77,70,0)
(70,48,0)
(15,62,0)
(26,35,0)
(57,82,0)
(70,14,0)
(6,79,0)
(68,62,0)
(49,46,0)
(35,5,0)
(67,63,0)
(32,63,0)
(68,46,0)
(59,71,0)
(10,26,0)
(26,34,0)
(60,73,0)
(66,22,0)
(35,26,0)
(40,41,0)
(45,63,0)
(73,60,0)
(15,46,0)
(60,13,0)
(74,21,0)
(48,5,0)
(16,67,0)
(56,1,0)
(29,52,0)
(12,65,0)
(13,60,0)
(76,60,0)
(48,43,0)
(82,46,0)
(28,3,0)
(2,44,0)
(1,56,0)
(3,21,0)
(13,43,0)
(7,68,0)
(21,59,0)
(34,56,0)
(69,48,0)
(31,46,0)
(8,73,0)
(11,33,0)
(9,37,0)
(22,44,0)
(23,3,0)
(62,15,0)
(44,5,0)
(53,15,0)
(18,5,0)
(50,5,0)
(80,68,0)
(11,67,0)
(37,63,0)
(4,11,0)
(20,45,0)
(55,59,0)
(30,41,0)
(81,5,0)
(34,26,0)
(78,56,0)
(43,48,0)
(52,46,0)
(66,30,0)
(56,34,0)
(67,11,0)
(33,71,0)
(17,43,0)
(64,79,0)
(42,5,0)
(0,41,0)
(75,22,0)
(24,15,0)
(38,33,0)
(68,70,0)
(61,65,0)
(30,66,0)
(41,70,0)
(36,70,0)
(65,44,0)
(41,0,1)
(72,45,1)
(33,38,1)
(26,34,1)
(11,67,1)
(31,49,1)
(20,59,1)
(53,68,1)
(79,6,1)
(77,36,1)
(43,13,1)
(60,73,1)
(76,69,1)
(68,46,1)
(29,62,1)
(72,63,1)
(54,52,1)
(26,10,1)
(59,55,1)
(28,33,1)
(0,40,1)
(58,16,1)
(25,48,1)
(13,60,1)
(68,70,1)
(32,79,1)
(47,66,1)
(37,9,1)
(15,24,1)
(24,53,1)
(74,3,1)
(52,29,1)
(82,46,1)
(36,79,1)
(7,82,1)
(39,78,1)
(38,11,1)
(30,41,1)
(16,37,1)
(57,54,1)
(67,63,1)
(68,80,1)
(3,23,1)
(8,76,1)
(70,48,1)
(80,7,1)
(78,25,1)
(43,17,1)
(34,56,1)
(1,39,1)
(45,63,1)
(54,46,1)
(66,30,1)
(82,57,1)
(64,35,1)
(52,46,1)
(9,72,1)
(48,43,1)
(40,82,1)
(55,21,1)
(63,27,1)
(56,1,1)
(37,63,1)
(21,74,1)
(67,58,1)
(6,64,1)
(46,31,1)
(15,46,1)
(35,26,1)
(73,8,1)
(62,15,1)
(70,77,1)
(32,70,1)
(27,32,1)
(3,63,1)
(41,70,1)
(49,37,1)
(23,28,1)
(45,20,1)
(21,3,1)
(4,67,1)
(11,4,1)
(68,70,2)
(43,13,2)
(38,37,2)
(26,34,2)
(77,79,2)
(45,63,2)
(56,1,2)
(41,70,2)
(48,43,2)
(13,60,2)
(11,37,2)
(3,63,2)
(58,37,2)
(16,37,2)
(35,26,2)
(55,37,2)
(82,46,2)
(80,82,2)
(15,82,2)
(62,15,2)
(70,79,2)
(30,41,2)
(62,82,2)
(37,63,2)
(45,37,2)
(66,30,2)
(15,46,2)
(52,46,2)
(21,37,2)
(52,82,2)
(23,37,2)
(3,37,2)
(36,79,2)
(72,37,2)
(24,82,2)
(29,82,2)
(11,67,2)
(67,63,2)
(54,82,2)
(59,37,2)
(57,82,2)
(68,46,2)
(82,82,2)
(33,37,2)
(37,37,2)
(28,37,2)
(67,37,2)
(60,73,2)
(20,37,2)
(9,37,2)
(43,17,2)
(68,82,2)
(34,56,2)
(74,37,2)
(53,82,2)
(4,37,2)
(7,82,2)
(70,48,2)
(21,3,2)
(26,10,2)
-----------------------------------
(0,0)
(1,sizeof(twoIntsStruct)
(2,source)
(3,source[i])
(4,intOne)
(5,)
(6,5)
(7,data)
(8,twoIntsStruct)
(9,100)
(10,twoIntsStruct *)
(11,source[i].intOne)
(12,for (i = 0; i < 100; i++)
(13,ALLOCA(50*sizeof(twoIntsStruct)
(14,)
(15,source[i])
(16,source)
(17,twoIntsStruct *)
(18,data)
(19,for (i = 0; i < 100; i++)
(20,i)
(21,source[i].intTwo)
(22,)
(23,i)
(24,i)
(25,dataGoodBuffer)
(26,(twoIntsStruct *)
(27,0)
(28,source)
(29,i)
(30,&data[0])
(31,0)
(32,i)
(33,source[i].intOne = 0)
(34,ALLOCA(100*sizeof(twoIntsStruct)
(35,* dataGoodBuffer = (twoIntsStruct *)
(36,data)
(37,i < 100)
(38,0)
(39,twoIntsStruct)
(40,data)
(41,data[0])
(42,dataBadBuffer)
(43,(twoIntsStruct *)
(44,)
(45,i++)
(46,i = 0)
(47,RET)
(48,* dataBadBuffer = (twoIntsStruct *)
(49,i)
(50,dataGoodBuffer)
(51,)
(52,i++)
(53,source)
(54,i)
(55,0)
(56,100*sizeof(twoIntsStruct)
(57,100)
(58,i)
(59,source[i].intTwo = 0)
(60,50*sizeof(twoIntsStruct)
(61,i)
(62,data[i] = source[i])
(63,i = 0)
(64,globalFive)
(65,)
(66,printStructLine(&data[0])
(67,source[i])
(68,data[i])
(69,dataBadBuffer)
(70,data = dataBadBuffer)
(71,)
(72,i)
(73,sizeof(twoIntsStruct)
(74,intTwo)
(75,i)
(76,50)
(77,dataBadBuffer)
(78,100)
(79,globalFive==5)
(80,i)
(81,if(globalFive==5)
(82,i < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^