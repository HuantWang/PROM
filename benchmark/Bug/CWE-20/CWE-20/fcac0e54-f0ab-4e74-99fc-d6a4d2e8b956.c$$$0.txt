-----label-----
1
-----code-----
void CWE416_Use_After_Free__return_freed_ptr_03_bad()
{
    if(5==5)
    {
        {
            /* Call the bad helper function */
            char * reversedString = helperBad("BadSink");
            printLine(reversedString);
            /* free(reversedString);
             * This call to free() was removed because we want the tool to detect the use after free,
             * but we don't want that function to be free(). Essentially we want to avoid a double free
             */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
-----nextToken-----
2,4,8,9,14,16,17,21,22,26,28
-----computeFrom-----
7,8
7,9
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__return_freed_ptr_03_bad(){    if(5==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
void
CWE416_Use_After_Free__return_freed_ptr_03_bad()
CWE416_Use_After_Free__return_freed_ptr_03_bad
{    if(5==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }}
if(5==5)    {        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
5==5
5
5
{        {            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }    }
{            /* Call the bad helper function */            char * reversedString = helperBad("BadSink");            printLine(reversedString);            /* free(reversedString);             * This call to free() was removed because we want the tool to detect the use after free,             * but we don't want that function to be free(). Essentially we want to avoid a double free             */        }
char * reversedString = helperBad("BadSink");
char * reversedString = helperBad("BadSink");
char
* reversedString = helperBad("BadSink")
*
reversedString
= helperBad("BadSink")
helperBad("BadSink")
helperBad
helperBad
"BadSink"
printLine(reversedString);
printLine(reversedString)
printLine
printLine
reversedString
reversedString
-----joern-----
(7,3,0)
(1,7,0)
(4,12,0)
(11,8,0)
(5,2,0)
(1,3,0)
(7,12,0)
(3,14,0)
(12,7,0)
(13,3,0)
(10,2,0)
(9,7,0)
(6,1,0)
(7,12,1)
(1,7,1)
(2,5,1)
(5,10,1)
(9,2,1)
(6,7,1)
(12,4,1)
(0,2,1)
(0,1,1)
(4,9,1)
(1,6,1)
(1,2,2)
(9,2,2)
(4,2,2)
(6,2,2)
(12,2,2)
(7,2,2)
(7,12,2)
(1,7,2)
-----------------------------------
(0,RET)
(1,printLine(reversedString)
(2,5==5)
(3,)
(4,"BadSink")
(5,5)
(6,reversedString)
(7,* reversedString = helperBad("BadSink")
(8,)
(9,reversedString)
(10,5)
(11,if(5==5)
(12,helperBad("BadSink")
(13,reversedString)
(14,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^