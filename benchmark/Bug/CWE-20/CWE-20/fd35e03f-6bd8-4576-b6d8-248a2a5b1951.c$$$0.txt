-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            memmove(data, source, 100*sizeof(char));
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
56,58
56,59
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
75,76
75,77
75,78
75,79
75,80
75,81
75,82
76,77
77,78
77,79
79,80
79,81
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
110,112
112,113
113,114
113,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
121,123
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,61,62,65,68,70,71,74,78,80,82,86,88,89,91,92,97,99,100,101,105,107,109,111,114,115,120,122,123,124,128,130,134,136
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
90,91
90,92
94,95
94,96
98,99
98,100
110,111
110,112
117,118
117,119
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad(){    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad
{    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(char));            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(52,53,0)
(65,45,0)
(29,33,0)
(49,10,0)
(19,51,0)
(41,11,0)
(48,22,0)
(57,39,0)
(14,26,0)
(32,6,0)
(62,32,0)
(59,4,0)
(36,37,0)
(48,45,0)
(44,61,0)
(30,40,0)
(23,12,0)
(7,69,0)
(60,32,0)
(46,43,0)
(51,19,0)
(27,70,0)
(1,44,0)
(40,30,0)
(37,45,0)
(49,37,0)
(39,45,0)
(12,26,0)
(45,6,0)
(42,43,0)
(10,49,0)
(70,6,0)
(17,51,0)
(11,43,0)
(69,43,0)
(35,6,0)
(33,70,0)
(68,19,0)
(61,44,0)
(56,70,0)
(16,45,0)
(34,33,0)
(70,32,0)
(32,26,0)
(44,1,0)
(37,70,0)
(20,44,0)
(53,59,0)
(47,0,0)
(54,48,0)
(33,0,0)
(12,69,0)
(1,40,0)
(39,70,0)
(66,16,0)
(26,40,0)
(58,51,0)
(24,61,0)
(37,49,0)
(38,12,0)
(0,45,0)
(13,22,0)
(21,34,0)
(15,10,0)
(33,34,0)
(40,1,0)
(18,50,0)
(2,6,0)
(5,45,0)
(31,5,0)
(3,50,0)
(63,22,0)
(50,26,0)
(22,48,0)
(19,16,0)
(28,37,0)
(8,49,0)
(59,53,0)
(55,11,0)
(6,43,0)
(25,34,0)
(40,26,0)
(67,48,0)
(26,43,0)
(5,70,0)
(20,14,1)
(40,1,1)
(33,70,1)
(61,24,1)
(38,59,1)
(24,20,1)
(26,40,1)
(36,16,1)
(67,54,1)
(34,25,1)
(5,70,1)
(60,62,1)
(21,29,1)
(37,49,1)
(69,7,1)
(14,11,1)
(10,15,1)
(8,28,1)
(68,48,1)
(28,36,1)
(63,67,1)
(56,27,1)
(38,50,1)
(25,21,1)
(49,10,1)
(54,70,1)
(39,57,1)
(59,53,1)
(51,17,1)
(3,18,1)
(39,70,1)
(1,44,1)
(23,38,1)
(13,63,1)
(7,12,1)
(66,19,1)
(48,22,1)
(22,13,1)
(57,5,1)
(5,31,1)
(17,58,1)
(27,32,1)
(52,50,1)
(31,0,1)
(70,32,1)
(37,70,1)
(50,26,1)
(32,26,1)
(50,3,1)
(58,68,1)
(16,66,1)
(33,34,1)
(15,8,1)
(32,60,1)
(47,33,1)
(53,52,1)
(40,30,1)
(12,23,1)
(62,69,1)
(29,37,1)
(44,61,1)
(18,26,1)
(0,47,1)
(11,55,1)
(12,26,1)
(70,56,1)
(55,41,1)
(9,39,1)
(19,51,1)
(44,61,2)
(1,44,2)
(70,32,2)
(40,30,2)
(32,26,2)
(52,50,2)
(59,50,2)
(39,70,2)
(50,26,2)
(5,70,2)
(49,10,2)
(19,51,2)
(59,53,2)
(40,1,2)
(12,26,2)
(26,40,2)
(33,70,2)
(33,34,2)
(53,50,2)
(37,49,2)
(37,70,2)
(48,22,2)
-----------------------------------
(0,data[100-1] = '\\\\0')
(1,malloc(50*sizeof(char)
(2,dataCopy)
(3,NULL)
(4,)
(5,printLine(data)
(6,)
(7,'\\\\0')
(8,100)
(9,RET)
(10,sizeof(char)
(11,data = NULL)
(12,data[0])
(13,1)
(14,data)
(15,char)
(16,source[100-1] = '\\\\0')
(17,1)
(18,data)
(19,source[100-1])
(20,50)
(21,100)
(22,100-1)
(23,0)
(24,char)
(25,1)
(26,data = (char *)
(27,data)
(28,source)
(29,data)
(30,char *)
(31,data)
(32,* dataCopy = data)
(33,data[100-1])
(34,100-1)
(35,data)
(36,data)
(37,memmove(data, source, 100*sizeof(char)
(38,data)
(39,free(data)
(40,(char *)
(41,data)
(42,data)
(43,)
(44,50*sizeof(char)
(45,)
(46,if (data == NULL)
(47,'\\\\0')
(48,memset(source, \'C\', 100-1)
(49,100*sizeof(char)
(50,data == NULL)
(51,100-1)
(52,1)
(53,-1)
(54,source)
(55,NULL)
(56,dataCopy)
(57,data)
(58,100)
(59,exit(-1)
(60,data)
(61,sizeof(char)
(62,dataCopy)
(63,100)
(64,memset(source, 'C', 100-1)
(65,source)
(66,'\\\\0')
(67,'C')
(68,source)
(69,data[0] = '\\\\0')
(70,* data = dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^