-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = strlen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
53,59
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,80,82,87,88,91,94,95,98,104,106,109,111,115,117,121,123
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
75,76
75,77
85,86
85,87
89,90
89,91
92,93
92,94
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad(){    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad
{    char * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
staticTrue
staticTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(22,11,0)
(49,45,0)
(46,58,0)
(20,11,0)
(31,2,0)
(56,34,0)
(55,44,0)
(2,53,0)
(37,10,0)
(18,2,0)
(41,47,0)
(17,2,0)
(38,7,0)
(53,24,0)
(20,1,0)
(32,0,0)
(16,29,0)
(24,53,0)
(45,42,0)
(54,38,0)
(30,13,0)
(45,40,0)
(9,4,0)
(23,17,0)
(57,12,0)
(39,40,0)
(29,10,0)
(38,54,0)
(20,13,0)
(47,34,0)
(21,11,0)
(5,20,0)
(8,29,0)
(4,2,0)
(4,13,0)
(51,12,0)
(3,29,0)
(20,2,0)
(58,12,0)
(4,29,0)
(1,21,0)
(12,58,0)
(48,54,0)
(53,52,0)
(1,35,0)
(15,29,0)
(50,20,0)
(31,13,0)
(52,53,0)
(28,42,0)
(31,29,0)
(0,11,0)
(2,44,0)
(42,45,0)
(42,29,0)
(21,1,0)
(6,21,0)
(53,2,0)
(19,13,0)
(12,42,0)
(24,47,0)
(40,29,0)
(43,40,0)
(47,24,0)
(59,31,0)
(21,40,0)
(58,11,0)
(25,10,0)
(36,17,0)
(27,21,0)
(13,10,0)
(34,47,0)
(33,11,0)
(36,2,1)
(20,2,1)
(4,2,1)
(43,14,1)
(20,50,1)
(20,11,1)
(42,45,1)
(9,58,1)
(11,22,1)
(21,27,1)
(30,19,1)
(45,40,1)
(0,11,1)
(51,57,1)
(12,51,1)
(31,2,1)
(54,48,1)
(4,9,1)
(38,54,1)
(32,1,1)
(22,33,1)
(6,20,1)
(40,39,1)
(33,42,1)
(13,30,1)
(26,31,1)
(41,18,1)
(58,12,1)
(43,17,1)
(21,11,1)
(1,21,1)
(46,0,1)
(17,2,1)
(17,23,1)
(47,34,1)
(20,13,1)
(45,49,1)
(28,40,1)
(23,36,1)
(43,38,1)
(24,47,1)
(0,32,1)
(21,40,1)
(4,13,1)
(59,4,1)
(31,59,1)
(49,28,1)
(12,42,1)
(39,43,1)
(34,56,1)
(14,13,1)
(2,53,1)
(5,58,1)
(48,17,1)
(27,6,1)
(58,11,1)
(53,24,1)
(50,5,1)
(53,52,1)
(31,13,1)
(57,46,1)
(46,11,1)
(18,14,1)
(56,41,1)
(34,14,2)
(4,2,2)
(0,11,2)
(21,58,2)
(53,24,2)
(0,58,2)
(47,34,2)
(24,14,2)
(21,11,2)
(48,17,2)
(50,58,2)
(24,47,2)
(12,42,2)
(46,58,2)
(4,13,2)
(58,12,2)
(23,14,2)
(31,2,2)
(41,14,2)
(21,40,2)
(32,58,2)
(1,58,2)
(2,53,2)
(20,13,2)
(6,58,2)
(53,14,2)
(2,14,2)
(17,14,2)
(38,54,2)
(20,2,2)
(1,21,2)
(54,17,2)
(17,2,2)
(57,58,2)
(5,58,2)
(58,58,2)
(53,52,2)
(12,58,2)
(38,17,2)
(20,58,2)
(45,40,2)
(20,11,2)
(18,14,2)
(42,45,2)
(58,11,2)
(27,58,2)
(47,14,2)
(31,13,2)
(36,14,2)
(56,14,2)
(51,58,2)
-----------------------------------
(0,i++)
(1,data[i] = source[i])
(2,data = (char *)
(3,i)
(4,printLine(data)
(5,data)
(6,source)
(7,)
(8,sourceLen)
(9,data)
(10,)
(11,i = 0)
(12,sourceLen + 1)
(13,data = NULL)
(14,staticTrue)
(15,source)
(16,for (i = 0; i < sourceLen + 1; i++)
(17,data == NULL)
(18,data)
(19,data)
(20,data[i])
(21,source[i])
(22,0)
(23,NULL)
(24,malloc(10*sizeof(char)
(25,data)
(26,RET)
(27,i)
(28,sourceLen)
(29,)
(30,NULL)
(31,free(data)
(32,i)
(33,i)
(34,sizeof(char)
(35,)
(36,data)
(37,if(staticTrue)
(38,exit(-1)
(39,SRC_STRING)
(40,source[10+1] = SRC_STRING)
(41,10)
(42,sourceLen = strlen(source)
(43,source)
(44,)
(45,strlen(source)
(46,i)
(47,10*sizeof(char)
(48,1)
(49,source)
(50,i)
(51,1)
(52,char *)
(53,(char *)
(54,-1)
(55,if (data == NULL)
(56,char)
(57,sourceLen)
(58,i < sourceLen + 1)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^