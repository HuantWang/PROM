-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_11_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(globalReturnsTrue())
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
77,78
77,79
79,80
81,82
81,83
82,83
83,84
83,85
84,85
86,87
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
98,99
99,100
101,102
101,103
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
108,109
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
118,119
122,123
123,124
123,125
123,126
123,127
124,125
126,127
128,129
130,131
130,132
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
142,143
142,144
143,144
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,64,69,71,76,78,80,85,87,92,93,96,97,100,107,109,110,111,117,119,120,121,125,127,129,131,135,136,140,144,145
-----computeFrom-----
30,31
30,32
54,55
54,56
67,68
67,69
90,91
90,92
94,95
94,96
103,104
103,105
113,114
113,115
130,131
130,132
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_11_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_11_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_11_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(53,46,0)
(9,57,0)
(1,12,0)
(66,31,0)
(11,57,0)
(33,68,0)
(55,57,0)
(20,11,0)
(56,21,0)
(61,10,0)
(4,21,0)
(11,5,0)
(24,22,0)
(8,63,0)
(48,24,0)
(17,12,0)
(37,57,0)
(47,24,0)
(35,6,0)
(62,21,0)
(41,10,0)
(15,61,0)
(36,6,0)
(5,41,0)
(35,28,0)
(44,11,0)
(2,56,0)
(68,63,0)
(7,6,0)
(0,28,0)
(29,66,0)
(38,23,0)
(3,55,0)
(58,13,0)
(52,9,0)
(64,57,0)
(18,61,0)
(31,48,0)
(38,68,0)
(14,12,0)
(46,12,0)
(26,5,0)
(48,31,0)
(19,22,0)
(24,48,0)
(27,55,0)
(22,24,0)
(45,56,0)
(5,11,0)
(60,57,0)
(37,18,0)
(21,56,0)
(13,46,0)
(54,18,0)
(67,37,0)
(32,12,0)
(16,1,0)
(25,37,0)
(31,66,0)
(6,36,0)
(18,37,0)
(6,35,0)
(24,47,0)
(42,41,0)
(50,2,0)
(43,63,0)
(63,1,0)
(28,35,0)
(56,2,0)
(30,68,0)
(51,13,0)
(23,38,0)
(23,46,0)
(49,31,0)
(28,0,0)
(40,36,0)
(22,12,0)
(68,38,0)
(21,46,0)
(65,12,0)
(1,28,0)
(28,1,0)
(63,59,0)
(21,63,0)
(62,55,1)
(60,64,1)
(52,61,1)
(21,63,1)
(4,62,1)
(57,60,1)
(21,56,1)
(26,11,1)
(64,39,1)
(67,25,1)
(1,28,1)
(37,57,1)
(63,1,1)
(40,7,1)
(49,19,1)
(3,57,1)
(61,15,1)
(56,2,1)
(2,50,1)
(45,4,1)
(55,27,1)
(44,55,1)
(19,1,1)
(3,9,1)
(15,18,1)
(22,24,1)
(5,26,1)
(23,38,1)
(27,3,1)
(7,16,1)
(36,40,1)
(28,35,1)
(6,36,1)
(63,8,1)
(5,11,1)
(24,48,1)
(11,57,1)
(50,45,1)
(11,20,1)
(9,52,1)
(48,31,1)
(43,39,1)
(9,57,1)
(24,47,1)
(25,41,1)
(18,54,1)
(28,0,1)
(8,43,1)
(41,42,1)
(66,29,1)
(37,67,1)
(55,57,1)
(39,22,1)
(35,6,1)
(33,30,1)
(54,37,1)
(68,33,1)
(20,44,1)
(38,68,1)
(30,21,1)
(31,66,1)
(18,37,1)
(68,63,1)
(64,63,1)
(34,23,1)
(42,5,1)
(29,49,1)
(48,31,2)
(11,57,2)
(3,55,2)
(68,63,2)
(5,11,2)
(37,57,2)
(21,56,2)
(55,55,2)
(63,39,2)
(37,55,2)
(18,55,2)
(63,1,2)
(26,55,2)
(28,35,2)
(18,37,2)
(54,55,2)
(41,55,2)
(21,63,2)
(9,55,2)
(15,55,2)
(67,55,2)
(5,55,2)
(38,68,2)
(9,57,2)
(27,55,2)
(61,55,2)
(55,57,2)
(24,47,2)
(28,0,2)
(56,2,2)
(24,48,2)
(31,66,2)
(42,55,2)
(25,55,2)
(22,24,2)
(35,6,2)
(43,39,2)
(23,38,2)
(8,39,2)
(6,36,2)
(44,55,2)
(1,28,2)
(11,55,2)
(52,55,2)
(20,55,2)
-----------------------------------
(0,twoIntsStruct *)
(1,* dataBadBuffer = (twoIntsStruct *)
(2,sizeof(twoIntsStruct)
(3,i)
(4,source)
(5,source[i].intOne)
(6,50*sizeof(twoIntsStruct)
(7,50)
(8,dataBadBuffer)
(9,i++)
(10,)
(11,source[i])
(12,)
(13,)
(14,dataGoodBuffer)
(15,0)
(16,dataBadBuffer)
(17,dataBadBuffer)
(18,source[i].intTwo)
(19,dataGoodBuffer)
(20,i)
(21,memmove(data, source, 100*sizeof(twoIntsStruct)
(22,* dataGoodBuffer = (twoIntsStruct *)
(23,printStructLine(&data[0])
(24,(twoIntsStruct *)
(25,source)
(26,intOne)
(27,100)
(28,(twoIntsStruct *)
(29,twoIntsStruct)
(30,data)
(31,100*sizeof(twoIntsStruct)
(32,data)
(33,0)
(34,RET)
(35,ALLOCA(50*sizeof(twoIntsStruct)
(36,sizeof(twoIntsStruct)
(37,source[i])
(38,&data[0])
(39,globalReturnsTrue()
(40,twoIntsStruct)
(41,source[i].intOne = 0)
(42,0)
(43,data)
(44,source)
(45,100)
(46,)
(47,twoIntsStruct *)
(48,ALLOCA(100*sizeof(twoIntsStruct)
(49,100)
(50,twoIntsStruct)
(51,i)
(52,i)
(53,source)
(54,intTwo)
(55,i < 100)
(56,100*sizeof(twoIntsStruct)
(57,i = 0)
(58,for (i = 0; i < 100; i++)
(59,)
(60,0)
(61,source[i].intTwo = 0)
(62,data)
(63,data = dataBadBuffer)
(64,i)
(65,if(globalReturnsTrue()
(66,sizeof(twoIntsStruct)
(67,i)
(68,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^