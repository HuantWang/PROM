-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int_16_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printIntLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
88,89
88,90
90,91
90,92
91,92
92,93
92,94
93,94
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,58,63,64,67,68,71,77,79,80,84,86,87,89,94,97,98,99
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
61,62
61,63
65,66
65,67
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int_16_bad(){    int * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
void
CWE416_Use_After_Free__malloc_free_int_16_bad()
CWE416_Use_After_Free__malloc_free_int_16_bad
{    int * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
1
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5;            }
data[i] = 5;
data[i] = 5
data[i]
data
data
i
i
5
free(data);
free(data)
free
free
data
data
break;
while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
-----joern-----
(26,24,0)
(31,25,0)
(18,24,0)
(49,2,0)
(47,52,0)
(22,38,0)
(45,21,0)
(53,39,0)
(52,9,0)
(37,52,0)
(27,50,0)
(48,10,0)
(21,36,0)
(13,35,0)
(31,32,0)
(3,4,0)
(10,2,0)
(20,2,0)
(33,31,0)
(4,3,0)
(12,10,0)
(19,22,0)
(50,41,0)
(32,3,0)
(44,34,0)
(5,9,0)
(4,9,0)
(11,21,0)
(3,14,0)
(16,17,0)
(28,36,0)
(32,31,0)
(3,32,0)
(0,34,0)
(40,9,0)
(42,2,0)
(17,4,0)
(46,49,0)
(35,9,0)
(35,4,0)
(10,4,0)
(21,11,0)
(7,17,0)
(50,27,0)
(30,21,0)
(21,4,0)
(10,22,0)
(29,24,0)
(51,27,0)
(34,2,0)
(25,31,0)
(14,3,0)
(15,36,0)
(1,4,0)
(36,24,0)
(11,39,0)
(8,25,0)
(6,23,1)
(21,45,1)
(43,53,1)
(13,34,1)
(5,35,1)
(19,10,1)
(36,15,1)
(49,2,1)
(4,3,1)
(0,49,1)
(50,27,1)
(17,4,1)
(42,50,1)
(48,12,1)
(2,20,1)
(3,32,1)
(46,22,1)
(6,5,1)
(44,0,1)
(20,42,1)
(27,51,1)
(0,2,1)
(33,1,1)
(21,4,1)
(53,11,1)
(43,6,1)
(7,4,1)
(17,16,1)
(11,21,1)
(49,46,1)
(23,36,1)
(30,6,1)
(10,48,1)
(35,4,1)
(22,19,1)
(45,30,1)
(51,17,1)
(15,28,1)
(10,2,1)
(21,36,1)
(34,2,1)
(35,13,1)
(42,17,1)
(12,34,1)
(16,7,1)
(32,31,1)
(10,4,1)
(3,14,1)
(34,44,1)
(31,25,1)
(25,8,1)
(8,33,1)
(1,23,1)
(34,34,2)
(53,6,2)
(30,6,2)
(13,23,2)
(34,2,2)
(0,34,2)
(34,23,2)
(3,23,2)
(50,27,2)
(3,32,2)
(31,25,2)
(21,6,2)
(49,34,2)
(42,23,2)
(11,6,2)
(25,23,2)
(33,23,2)
(2,23,2)
(12,34,2)
(32,23,2)
(4,3,2)
(8,23,2)
(17,23,2)
(44,34,2)
(50,17,2)
(5,23,2)
(21,4,2)
(51,17,2)
(17,4,2)
(31,23,2)
(7,23,2)
(11,21,2)
(1,23,2)
(16,23,2)
(45,6,2)
(10,34,2)
(49,2,2)
(10,4,2)
(32,31,2)
(22,34,2)
(21,36,2)
(0,23,2)
(3,14,2)
(35,4,2)
(35,23,2)
(27,17,2)
(48,34,2)
(10,2,2)
(20,23,2)
(4,23,2)
(46,34,2)
(44,23,2)
(19,34,2)
-----------------------------------
(0,i)
(1,data)
(2,i = 0)
(3,(int *)
(4,data = (int *)
(5,break;)
(6,1)
(7,data)
(8,int)
(9,)
(10,data[i])
(11,printIntLine(data[0])
(12,data)
(13,data)
(14,int *)
(15,NULL)
(16,NULL)
(17,data == NULL)
(18,while(1)
(19,5)
(20,0)
(21,data[0])
(22,data[i] = 5)
(23,1)
(24,)
(25,sizeof(int)
(26,data)
(27,-1)
(28,data)
(29,while(1)
(30,data)
(31,100*sizeof(int)
(32,malloc(100*sizeof(int)
(33,100)
(34,i < 100)
(35,free(data)
(36,data = NULL)
(37,i)
(38,)
(39,)
(40,if (data == NULL)
(41,)
(42,i)
(43,RET)
(44,100)
(45,0)
(46,i)
(47,for(i = 0; i < 100; i++)
(48,i)
(49,i++)
(50,exit(-1)
(51,1)
(52,)
(53,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^