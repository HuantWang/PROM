-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_bad()
{
    wchar_t * data;
    CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType myUnion;
    wchar_t dataBadBuffer[50];
    wchar_t dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    data[0] = L'\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with L'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
            SNPRINTF(data, 100, L"%s", source);
            printWLine(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
40,42
41,42
45,46
46,47
46,48
47,48
47,49
48,49
51,52
53,54
53,55
54,55
55,56
55,57
57,58
57,59
57,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
80,81
80,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
88,90
92,93
93,94
93,95
93,96
93,97
93,98
94,95
96,97
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,29,31,35,37,42,43,44,49,50,52,56,58,59,63,64,68,70,72,76,78,79,81,82,87,89,90,91,95,97,98,99,101,105,107
-----computeFrom-----
33,34
33,35
39,40
39,41
46,47
46,48
80,81
80,82
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_bad(){    wchar_t * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType myUnion;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    data[0] = L'\0'; /* null terminate */    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_bad
{    wchar_t * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType myUnion;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    data[0] = L'\0'; /* null terminate */    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34_unionType
myUnion
myUnion
wchar_t dataBadBuffer[50];
wchar_t dataBadBuffer[50];
wchar_t
dataBadBuffer[50]
dataBadBuffer
[50]
50
wchar_t dataGoodBuffer[100];
wchar_t dataGoodBuffer[100];
wchar_t
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(26,14,0)
(22,14,0)
(21,22,0)
(22,2,0)
(20,18,0)
(2,7,0)
(14,7,0)
(7,18,0)
(6,18,0)
(2,9,0)
(9,2,0)
(10,24,0)
(13,18,0)
(4,10,0)
(24,20,0)
(0,20,0)
(25,24,0)
(8,18,0)
(16,7,0)
(11,9,0)
(3,18,0)
(15,14,0)
(1,9,0)
(5,2,0)
(12,10,0)
(24,18,0)
(17,20,0)
(23,18,0)
(1,11,1)
(22,2,1)
(19,22,1)
(2,9,1)
(21,15,1)
(12,6,1)
(10,4,1)
(24,20,1)
(6,20,1)
(11,5,1)
(24,25,1)
(15,2,1)
(5,24,1)
(22,21,1)
(9,1,1)
(17,0,1)
(4,12,1)
(25,10,1)
(20,17,1)
(22,2,2)
(24,20,2)
(2,9,2)
-----------------------------------
(0,data)
(1,unionSecond)
(2,* data = myUnion.unionSecond)
(3,myUnion)
(4,unionFirst)
(5,data)
(6,'\\\\0')
(7,)
(8,dataGoodBuffer)
(9,myUnion.unionSecond)
(10,myUnion.unionFirst)
(11,myUnion)
(12,myUnion)
(13,data)
(14,)
(15,'\\\\0')
(16,data)
(17,dataBadBuffer)
(18,)
(19,RET)
(20,data = dataBadBuffer)
(21,data)
(22,printWLine(data)
(23,dataBadBuffer)
(24,myUnion.unionFirst = data)
(25,data)
(26,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^