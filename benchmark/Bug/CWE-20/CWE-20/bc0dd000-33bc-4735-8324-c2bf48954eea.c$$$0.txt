-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(wchar_t));
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad(){    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad
{    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memcpy(data, source, 100*sizeof(wchar_t));
memcpy(data, source, 100*sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,3,0)
(43,7,0)
(38,0,0)
(27,2,0)
(7,31,0)
(2,12,0)
(10,3,0)
(15,21,0)
(21,39,0)
(44,12,0)
(11,3,0)
(36,31,0)
(40,30,0)
(29,28,0)
(15,31,0)
(13,7,0)
(16,22,0)
(36,12,0)
(18,33,0)
(25,2,0)
(3,14,0)
(2,31,0)
(11,31,0)
(22,16,0)
(19,18,0)
(0,39,0)
(9,3,0)
(33,34,0)
(42,15,0)
(21,15,0)
(4,11,0)
(5,22,0)
(32,16,0)
(23,36,0)
(26,14,0)
(31,30,0)
(24,28,0)
(11,12,0)
(8,39,0)
(15,42,0)
(6,30,0)
(39,21,0)
(17,31,0)
(1,14,0)
(31,15,0)
(35,3,0)
(22,2,0)
(39,0,0)
(33,18,0)
(2,22,0)
(36,3,0)
(41,12,0)
(12,14,0)
(8,17,1)
(16,32,1)
(27,25,1)
(36,23,1)
(22,16,1)
(11,12,1)
(4,36,1)
(12,41,1)
(24,29,1)
(20,11,1)
(39,0,1)
(9,6,1)
(0,38,1)
(9,28,1)
(38,8,1)
(36,31,1)
(21,39,1)
(33,18,1)
(43,31,1)
(2,31,1)
(13,43,1)
(2,12,1)
(25,9,1)
(29,12,1)
(36,12,1)
(2,22,1)
(6,7,1)
(10,2,1)
(41,44,1)
(5,27,1)
(7,13,1)
(11,4,1)
(31,15,1)
(32,5,1)
(28,24,1)
(19,7,1)
(11,31,1)
(15,42,1)
(18,19,1)
(17,28,1)
(23,10,1)
(15,21,1)
(7,31,1)
(6,33,1)
(43,28,2)
(31,28,2)
(11,12,2)
(33,18,2)
(21,28,2)
(22,16,2)
(7,28,2)
(21,39,2)
(18,7,2)
(17,28,2)
(15,21,2)
(8,28,2)
(36,12,2)
(15,28,2)
(11,31,2)
(31,15,2)
(19,7,2)
(39,28,2)
(2,22,2)
(13,28,2)
(39,0,2)
(7,31,2)
(2,12,2)
(15,42,2)
(6,28,2)
(33,7,2)
(2,31,2)
(36,31,2)
(38,28,2)
(0,28,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,data)
(2,memcpy(data, source, 100*sizeof(wchar_t)
(3,)
(4,data)
(5,100)
(6,'\\\\0')
(7,data == NULL)
(8,50)
(9,'\\\\0')
(10,'\\\\0')
(11,free(data)
(12,data = NULL)
(13,NULL)
(14,)
(15,(wchar_t *)
(16,sizeof(wchar_t)
(17,data)
(18,-1)
(19,1)
(20,RET)
(21,malloc(50*sizeof(wchar_t)
(22,100*sizeof(wchar_t)
(23,data)
(24,5)
(25,data)
(26,if(staticFive==5)
(27,source)
(28,staticFive==5)
(29,staticFive)
(30,)
(31,data = (wchar_t *)
(32,wchar_t)
(33,exit(-1)
(34,)
(35,source)
(36,printWLine(data)
(37,\'\\\\0\')
(38,wchar_t)
(39,50*sizeof(wchar_t)
(40,if (data == NULL)
(41,NULL)
(42,wchar_t *)
(43,data)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^