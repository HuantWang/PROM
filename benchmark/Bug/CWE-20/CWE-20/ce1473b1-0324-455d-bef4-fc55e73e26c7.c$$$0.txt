-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_long_08_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(staticReturnsTrue())
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5L;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
89,90
89,91
90,91
91,92
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,60,65,66,69,70,73,79,81,82,86,88,92,97,100,101
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
63,64
63,65
67,68
67,69
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_long_08_bad(){    long * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_long_08_bad()
CWE416_Use_After_Free__malloc_free_long_08_bad
{    long * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5L;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5L;            }
data[i] = 5L;
data[i] = 5L
data[i]
data
data
i
i
5L
free(data);
free(data)
free
free
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLine(data[0]);
printLongLine(data[0])
printLongLine
printLongLine
data[0]
data
data
0
-----joern-----
(23,35,0)
(21,30,0)
(26,16,0)
(3,51,0)
(1,13,0)
(34,11,0)
(12,30,0)
(49,7,0)
(43,18,0)
(19,28,0)
(26,6,0)
(51,7,0)
(0,51,0)
(29,48,0)
(47,26,0)
(38,42,0)
(46,20,0)
(15,43,0)
(42,9,0)
(22,28,0)
(34,41,0)
(43,20,0)
(45,28,0)
(17,46,0)
(44,26,0)
(50,46,0)
(43,15,0)
(26,20,0)
(16,26,0)
(10,6,0)
(13,28,0)
(8,36,0)
(18,35,0)
(14,19,0)
(37,7,0)
(20,43,0)
(18,43,0)
(35,18,0)
(41,34,0)
(27,48,0)
(48,42,0)
(4,41,0)
(39,20,0)
(8,35,0)
(2,37,0)
(37,20,0)
(20,7,0)
(24,13,0)
(16,5,0)
(35,8,0)
(6,30,0)
(36,8,0)
(31,30,0)
(48,28,0)
(40,6,0)
(48,20,0)
(29,27,1)
(1,24,1)
(26,6,1)
(20,43,1)
(14,42,1)
(48,20,1)
(26,20,1)
(42,38,1)
(34,41,1)
(38,48,1)
(50,17,1)
(19,28,1)
(26,47,1)
(46,50,1)
(43,15,1)
(37,20,1)
(45,34,1)
(13,1,1)
(17,20,1)
(23,39,1)
(35,8,1)
(37,2,1)
(32,16,1)
(33,37,1)
(4,46,1)
(8,23,1)
(43,18,1)
(24,28,1)
(18,35,1)
(22,45,1)
(39,25,1)
(33,25,1)
(16,26,1)
(32,33,1)
(47,44,1)
(19,14,1)
(48,29,1)
(13,28,1)
(48,28,1)
(28,22,1)
(46,20,1)
(6,40,1)
(2,13,1)
(41,4,1)
(25,6,1)
(27,13,1)
(44,33,1)
(8,36,1)
(45,46,1)
(24,19,1)
(40,10,1)
(1,25,2)
(39,25,2)
(46,25,2)
(8,36,2)
(37,25,2)
(24,13,2)
(16,33,2)
(43,25,2)
(2,25,2)
(50,25,2)
(20,43,2)
(13,28,2)
(48,20,2)
(26,20,2)
(8,25,2)
(19,28,2)
(17,25,2)
(37,20,2)
(34,46,2)
(44,33,2)
(29,13,2)
(48,13,2)
(48,28,2)
(18,25,2)
(27,13,2)
(45,25,2)
(19,13,2)
(41,46,2)
(16,26,2)
(38,13,2)
(13,13,2)
(42,13,2)
(34,41,2)
(20,25,2)
(26,33,2)
(26,6,2)
(47,33,2)
(13,25,2)
(1,13,2)
(35,8,2)
(35,25,2)
(43,18,2)
(22,25,2)
(24,25,2)
(14,13,2)
(4,46,2)
(23,25,2)
(18,35,2)
(43,15,2)
(28,25,2)
(46,20,2)
-----------------------------------
(0,i)
(1,100)
(2,data)
(3,for(i = 0; i < 100; i++)
(4,1)
(5,)
(6,data = NULL)
(7,)
(8,sizeof(long)
(9,)
(10,data)
(11,)
(12,data)
(13,i < 100)
(14,i)
(15,long *)
(16,printLongLine(data[0])
(17,data)
(18,malloc(100*sizeof(long)
(19,i++)
(20,data = (long *)
(21,if(staticReturnsTrue()
(22,0)
(23,100)
(24,i)
(25,staticReturnsTrue()
(26,data[0])
(27,data)
(28,i = 0)
(29,i)
(30,)
(31,if(staticReturnsTrue()
(32,RET)
(33,staticReturnsTrue()
(34,exit(-1)
(35,100*sizeof(long)
(36,long)
(37,free(data)
(38,5L)
(39,data)
(40,NULL)
(41,-1)
(42,data[i] = 5L)
(43,(long *)
(44,data)
(45,i)
(46,data == NULL)
(47,0)
(48,data[i])
(49,if (data == NULL)
(50,NULL)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^