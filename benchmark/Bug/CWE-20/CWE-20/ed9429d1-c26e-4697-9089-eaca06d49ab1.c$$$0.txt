-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_long_17_bad()
{
    int i,j;
    long * data;
    /* Initialize data */
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5L;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
119,120
120,121
120,122
121,122
123,124
123,125
124,125
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,74,76,81,82,85,86,89,95,97,98,102,104,109,110,113,114,117,122,125,126
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
79,80
79,81
83,84
83,85
92,93
92,94
107,108
107,109
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_long_17_bad(){    int i,j;    long * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_long_17_bad()
CWE416_Use_After_Free__malloc_free_long_17_bad
{    int i,j;    long * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int i,j;
int i,j;
int
i
i
j
j
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5L;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5L;            }
data[i] = 5L;
data[i] = 5L
data[i]
data
data
i
i
5L
free(data);
free(data)
free
free
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLine(data[0]);
printLongLine(data[0])
printLongLine
printLongLine
data[0]
data
data
0
-----joern-----
(52,31,0)
(4,6,0)
(19,57,0)
(32,18,0)
(36,57,0)
(48,34,0)
(61,20,0)
(21,41,0)
(3,52,0)
(40,5,0)
(16,14,0)
(46,4,0)
(2,18,0)
(29,30,0)
(22,24,0)
(37,32,0)
(58,34,0)
(1,18,0)
(6,8,0)
(67,18,0)
(55,18,0)
(8,12,0)
(33,31,0)
(27,60,0)
(8,6,0)
(9,42,0)
(54,62,0)
(13,25,0)
(12,53,0)
(15,18,0)
(57,6,0)
(26,45,0)
(0,62,0)
(62,14,0)
(65,26,0)
(38,59,0)
(43,24,0)
(4,45,0)
(42,21,0)
(39,31,0)
(57,19,0)
(51,32,0)
(62,6,0)
(35,66,0)
(47,8,0)
(50,45,0)
(30,20,0)
(64,57,0)
(62,38,0)
(21,42,0)
(53,12,0)
(28,66,0)
(49,38,0)
(5,40,0)
(60,6,0)
(8,47,0)
(57,32,0)
(34,31,0)
(53,40,0)
(23,60,0)
(19,56,0)
(25,14,0)
(11,53,0)
(6,45,0)
(66,20,0)
(7,26,0)
(40,53,0)
(17,6,0)
(44,14,0)
(24,14,0)
(63,20,0)
(12,8,0)
(4,46,1)
(11,17,1)
(35,20,1)
(17,66,1)
(62,14,1)
(42,9,1)
(37,51,1)
(14,44,1)
(54,0,1)
(48,31,1)
(0,24,1)
(22,25,1)
(46,24,1)
(8,47,1)
(13,38,1)
(10,34,1)
(19,57,1)
(35,30,1)
(62,54,1)
(30,20,1)
(25,13,1)
(24,14,1)
(16,21,1)
(16,60,1)
(57,32,1)
(4,6,1)
(52,31,1)
(28,35,1)
(66,28,1)
(40,5,1)
(60,6,1)
(31,39,1)
(21,42,1)
(48,52,1)
(60,23,1)
(34,58,1)
(3,19,1)
(39,33,1)
(43,22,1)
(44,16,1)
(58,48,1)
(63,32,1)
(53,40,1)
(32,37,1)
(20,61,1)
(64,34,1)
(49,62,1)
(57,36,1)
(27,6,1)
(30,29,1)
(24,43,1)
(23,27,1)
(36,64,1)
(57,6,1)
(33,66,1)
(8,12,1)
(29,4,1)
(61,63,1)
(25,14,1)
(9,60,1)
(34,31,1)
(6,8,1)
(40,11,1)
(66,20,1)
(22,14,1)
(12,53,1)
(52,3,1)
(62,6,1)
(38,49,1)
(60,66,2)
(19,57,2)
(58,34,2)
(34,34,2)
(44,66,2)
(16,66,2)
(24,24,2)
(14,66,2)
(48,34,2)
(6,8,2)
(12,53,2)
(13,24,2)
(46,66,2)
(28,66,2)
(53,66,2)
(21,60,2)
(64,34,2)
(17,66,2)
(4,66,2)
(8,66,2)
(9,60,2)
(57,6,2)
(38,24,2)
(60,6,2)
(62,14,2)
(66,20,2)
(30,20,2)
(49,24,2)
(57,32,2)
(52,34,2)
(40,66,2)
(66,66,2)
(36,34,2)
(30,66,2)
(24,66,2)
(62,24,2)
(6,66,2)
(21,42,2)
(24,14,2)
(29,66,2)
(27,66,2)
(22,66,2)
(4,6,2)
(40,5,2)
(25,24,2)
(0,24,2)
(8,12,2)
(25,14,2)
(54,24,2)
(57,34,2)
(19,34,2)
(62,6,2)
(42,60,2)
(23,66,2)
(35,66,2)
(8,47,2)
(22,24,2)
(43,66,2)
(34,31,2)
(53,40,2)
(12,66,2)
(3,34,2)
(11,66,2)
(43,24,2)
(52,31,2)
-----------------------------------
(0,data)
(1,for(j = 0; j < 1; j++)
(2,data)
(3,j)
(4,free(data)
(5,long)
(6,data = (long *)
(7,for(i = 0; i < 100; i++)
(8,(long *)
(9,1)
(10,RET)
(11,100)
(12,malloc(100*sizeof(long)
(13,i)
(14,i = 0)
(15,for(i = 0; i < 1; i++)
(16,i)
(17,data)
(18,)
(19,printLongLine(data[0])
(20,i = 0)
(21,exit(-1)
(22,i)
(23,NULL)
(24,i < 100)
(25,i++)
(26,)
(27,data)
(28,1)
(29,i)
(30,i++)
(31,j = 0)
(32,data = NULL)
(33,j)
(34,j < 1)
(35,i)
(36,0)
(37,NULL)
(38,data[i] = 5L)
(39,0)
(40,sizeof(long)
(41,)
(42,-1)
(43,100)
(44,0)
(45,)
(46,data)
(47,long *)
(48,j)
(49,5L)
(50,if (data == NULL)
(51,data)
(52,j++)
(53,100*sizeof(long)
(54,i)
(55,i)
(56,)
(57,data[0])
(58,1)
(59,)
(60,data == NULL)
(61,0)
(62,data[i])
(63,i)
(64,data)
(65,i)
(66,i < 1)
(67,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^