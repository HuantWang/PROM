-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execl_41_bad()
CWE78_OS_Command_Injection__char_console_execl_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);
CWE78_OS_Command_Injection__char_console_execl_41_badSink(data)
CWE78_OS_Command_Injection__char_console_execl_41_badSink
CWE78_OS_Command_Injection__char_console_execl_41_badSink
data
data
-----joern-----
(32,3,0)
(55,17,0)
(36,64,0)
(8,23,0)
(3,67,0)
(38,64,0)
(25,27,0)
(46,50,0)
(18,67,0)
(26,68,0)
(17,55,0)
(68,29,0)
(9,44,0)
(27,55,0)
(20,0,0)
(29,68,0)
(11,3,0)
(12,41,0)
(47,40,0)
(37,28,0)
(14,11,0)
(51,7,0)
(24,29,0)
(56,30,0)
(63,57,0)
(41,57,0)
(50,43,0)
(55,27,0)
(64,57,0)
(63,11,0)
(43,11,0)
(19,2,0)
(39,61,0)
(64,55,0)
(1,0,0)
(68,11,0)
(28,27,0)
(27,25,0)
(0,44,0)
(35,33,0)
(50,0,0)
(40,57,0)
(44,0,0)
(65,57,0)
(2,4,0)
(54,48,0)
(61,5,0)
(43,50,0)
(69,40,0)
(59,28,0)
(48,67,0)
(0,30,0)
(10,20,0)
(52,50,0)
(16,43,0)
(2,68,0)
(13,31,0)
(45,41,0)
(57,63,0)
(33,41,0)
(42,29,0)
(40,11,0)
(11,67,0)
(49,20,0)
(40,51,0)
(22,66,0)
(23,7,0)
(48,11,0)
(53,27,0)
(21,66,0)
(4,20,0)
(27,28,0)
(57,66,0)
(15,11,0)
(28,57,0)
(29,0,0)
(55,64,0)
(20,4,0)
(66,67,0)
(41,33,0)
(62,25,0)
(43,61,0)
(28,11,0)
(60,63,0)
(68,2,0)
(6,67,0)
(58,51,0)
(4,2,0)
(44,11,0)
(70,3,0)
(37,59,1)
(57,63,1)
(68,29,1)
(28,57,1)
(54,33,1)
(40,57,1)
(49,0,1)
(27,55,1)
(9,1,1)
(11,14,1)
(16,4,1)
(33,35,1)
(47,69,1)
(38,28,1)
(63,11,1)
(15,3,1)
(63,60,1)
(4,20,1)
(55,17,1)
(4,2,1)
(45,57,1)
(60,65,1)
(10,49,1)
(61,39,1)
(54,51,1)
(70,32,1)
(43,11,1)
(2,68,1)
(51,58,1)
(2,19,1)
(41,57,1)
(52,46,1)
(36,38,1)
(59,33,1)
(0,44,1)
(65,11,1)
(62,27,1)
(29,24,1)
(27,28,1)
(54,61,1)
(44,11,1)
(19,68,1)
(23,8,1)
(28,11,1)
(48,11,1)
(25,27,1)
(27,53,1)
(46,16,1)
(58,40,1)
(26,20,1)
(69,23,1)
(20,10,1)
(14,15,1)
(53,55,1)
(29,0,1)
(43,50,1)
(28,37,1)
(34,48,1)
(44,9,1)
(33,41,1)
(39,43,1)
(54,4,1)
(12,45,1)
(24,42,1)
(50,52,1)
(1,25,1)
(50,0,1)
(40,47,1)
(64,36,1)
(11,3,1)
(35,41,1)
(8,25,1)
(25,62,1)
(68,11,1)
(64,57,1)
(48,54,1)
(20,0,1)
(41,12,1)
(40,11,1)
(3,70,1)
(55,64,1)
(42,26,1)
(40,57,2)
(27,28,2)
(48,11,2)
(62,33,2)
(68,20,2)
(20,0,2)
(44,25,2)
(26,20,2)
(68,11,2)
(63,11,2)
(20,25,2)
(25,33,2)
(29,0,2)
(8,25,2)
(24,20,2)
(43,11,2)
(19,20,2)
(47,25,2)
(61,4,2)
(2,68,2)
(16,4,2)
(29,20,2)
(57,63,2)
(52,4,2)
(27,55,2)
(10,25,2)
(4,20,2)
(55,64,2)
(44,11,2)
(28,11,2)
(23,25,2)
(43,50,2)
(4,25,2)
(50,0,2)
(42,20,2)
(36,33,2)
(40,25,2)
(46,4,2)
(38,33,2)
(55,17,2)
(0,25,2)
(25,27,2)
(11,3,2)
(59,33,2)
(51,25,2)
(43,4,2)
(9,25,2)
(69,25,2)
(28,57,2)
(64,57,2)
(1,25,2)
(0,44,2)
(27,33,2)
(37,33,2)
(49,25,2)
(50,4,2)
(33,41,2)
(40,11,2)
(4,2,2)
(64,33,2)
(2,20,2)
(28,33,2)
(58,25,2)
(39,4,2)
(68,29,2)
(55,33,2)
(53,33,2)
(41,57,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,dataLen)
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,dataBuffer[100] = COMMAND_ARG2)
(4,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,)
(6,dataBuffer)
(7,)
(8,"fgets()
(9,data)
(10,0)
(11,data = dataBuffer)
(12,dataLen)
(13,if (fgets(data+dataLen, (int)
(14,dataBuffer)
(15,data)
(16,data)
(17,int)
(18,data)
(19,\\\'\\\\n\\\')
(20,dataLen > 0)
(21,if (100-dataLen > 1)
(22,dataLen)
(23,printLine("fgets()
(24,1)
(25,fgets(data+dataLen, (int)
(26,data)
(27,fgets(data+dataLen, (int)
(28,data+dataLen)
(29,dataLen-1)
(30,)
(31,)
(32,dataBuffer)
(33,100-dataLen > 1)
(34,RET)
(35,1)
(36,dataLen)
(37,dataLen)
(38,100)
(39,\\\'\\\\0\\\')
(40,data[dataLen])
(41,100-dataLen)
(42,dataLen)
(43,data[dataLen-1])
(44,strlen(data)
(45,100)
(46,dataLen)
(47,dataLen)
(48,CWE78_OS_Command_Injection__char_console_execl_41_badSink(data)
(49,dataLen)
(50,dataLen-1)
(51,data[dataLen] = \\\'\\\\0\\\')
(52,1)
(53,stdin)
(54,data)
(55,(int)
(56,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(57,dataLen = strlen(data)
(58,\\\'\\\\0\\\')
(59,data)
(60,data)
(61,data[dataLen-1] = \\\'\\\\0\\\')
(62,NULL)
(63,strlen(data)
(64,100-dataLen)
(65,dataLen)
(66,)
(67,)
(68,data[dataLen-1])
(69,data)
(70,COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^