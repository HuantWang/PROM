-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,99,101,105,107
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08_bad(){    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08_bad
{    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,25,0)
(19,5,0)
(0,8,0)
(15,2,0)
(1,13,0)
(25,18,0)
(12,35,0)
(28,29,0)
(27,3,0)
(18,25,0)
(24,37,0)
(20,37,0)
(23,0,0)
(0,24,0)
(32,37,0)
(13,5,0)
(29,20,0)
(5,13,0)
(18,5,0)
(15,14,0)
(21,24,0)
(35,8,0)
(11,3,0)
(5,18,0)
(7,0,0)
(0,20,0)
(17,20,0)
(29,24,0)
(6,24,0)
(4,24,0)
(10,37,0)
(34,20,0)
(29,8,0)
(25,33,0)
(21,20,0)
(21,8,0)
(31,35,0)
(25,8,0)
(8,3,0)
(9,2,0)
(33,25,0)
(22,21,0)
(16,8,0)
(2,15,0)
(25,33,1)
(28,21,1)
(35,8,1)
(4,26,1)
(27,35,1)
(12,8,1)
(5,13,1)
(0,20,1)
(20,34,1)
(22,0,1)
(21,8,1)
(18,5,1)
(21,20,1)
(29,20,1)
(26,20,1)
(27,15,1)
(0,7,1)
(4,27,1)
(29,28,1)
(23,4,1)
(7,23,1)
(9,35,1)
(19,16,1)
(8,25,1)
(13,1,1)
(0,8,1)
(21,22,1)
(34,17,1)
(35,31,1)
(16,26,1)
(25,18,1)
(31,12,1)
(15,2,1)
(1,19,1)
(36,29,1)
(29,8,1)
(2,9,1)
(15,35,2)
(21,8,2)
(13,26,2)
(18,5,2)
(0,8,2)
(5,13,2)
(21,20,2)
(29,20,2)
(25,26,2)
(15,2,2)
(12,26,2)
(31,26,2)
(1,26,2)
(18,26,2)
(9,35,2)
(29,8,2)
(35,26,2)
(25,33,2)
(25,18,2)
(19,26,2)
(8,26,2)
(16,26,2)
(0,20,2)
(2,35,2)
(8,25,2)
(5,26,2)
(35,8,2)
(27,26,2)
-----------------------------------
(0,wcscpy(data, source)
(1,wchar_t)
(2,-1)
(3,)
(4,'\\\\0')
(5,50*sizeof(wchar_t)
(6,source)
(7,source)
(8,data = (wchar_t *)
(9,1)
(10,data)
(11,if (data == NULL)
(12,data)
(13,sizeof(wchar_t)
(14,)
(15,exit(-1)
(16,data)
(17,data)
(18,malloc(50*sizeof(wchar_t)
(19,50)
(20,data = NULL)
(21,printWLine(data)
(22,data)
(23,data)
(24,)
(25,(wchar_t *)
(26,staticReturnsTrue()
(27,'\\\\0')
(28,data)
(29,free(data)
(30,\'\\\\0\')
(31,NULL)
(32,if(staticReturnsTrue()
(33,wchar_t *)
(34,NULL)
(35,data == NULL)
(36,RET)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^