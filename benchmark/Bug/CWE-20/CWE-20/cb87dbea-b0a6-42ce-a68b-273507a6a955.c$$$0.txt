-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printLine((char *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid->charFirst);
            printLine((char *)structCharVoid->voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
53,55
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
80,81
82,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
96,97
96,98
97,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
129,130
131,132
131,133
132,133
-----nextToken-----
2,4,8,14,16,17,22,24,27,31,32,36,38,43,45,50,51,54,56,58,62,65,67,70,71,75,78,79,81,86,92,93,101,102,105,106,107,108,112,115,117,120,121,125,128,130,133,134
-----computeFrom-----
34,35
34,36
47,48
47,49
88,89
88,90
94,95
94,96
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
if(GLOBAL_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(58,8,0)
(16,1,0)
(31,3,0)
(34,9,0)
(21,45,0)
(48,60,0)
(16,54,0)
(25,24,0)
(60,48,0)
(56,9,0)
(43,7,0)
(19,70,0)
(29,45,0)
(70,67,0)
(13,41,0)
(11,36,0)
(43,46,0)
(14,46,0)
(69,64,0)
(34,42,0)
(39,6,0)
(59,9,0)
(65,49,0)
(41,13,0)
(45,8,0)
(64,45,0)
(1,17,0)
(57,36,0)
(47,45,0)
(63,22,0)
(26,45,0)
(52,21,0)
(36,38,0)
(54,16,0)
(1,16,0)
(8,30,0)
(3,37,0)
(48,45,0)
(27,4,0)
(15,47,0)
(68,26,0)
(52,54,0)
(53,21,0)
(36,45,0)
(28,8,0)
(3,31,0)
(38,8,0)
(34,8,0)
(50,21,0)
(49,45,0)
(7,43,0)
(67,8,0)
(0,47,0)
(47,38,0)
(41,38,0)
(22,45,0)
(61,48,0)
(51,8,0)
(9,34,0)
(23,22,0)
(4,12,0)
(9,45,0)
(36,70,0)
(31,8,0)
(24,60,0)
(12,4,0)
(35,17,0)
(44,16,0)
(32,26,0)
(67,70,0)
(64,42,0)
(1,26,0)
(20,41,0)
(12,66,0)
(37,3,0)
(26,1,0)
(54,6,0)
(48,61,0)
(38,41,0)
(28,43,0)
(42,64,0)
(42,34,0)
(45,48,0)
(6,54,0)
(33,34,0)
(17,8,0)
(60,24,0)
(47,3,0)
(70,36,0)
(43,28,0)
(54,52,0)
(21,52,0)
(46,45,0)
(3,47,0)
(22,38,0)
(46,43,0)
(40,49,0)
(2,10,0)
(70,19,0)
(62,46,0)
(53,26,1)
(35,1,1)
(45,48,1)
(15,0,1)
(56,59,1)
(47,38,1)
(54,52,1)
(18,5,1)
(24,25,1)
(26,32,1)
(60,24,1)
(28,43,1)
(52,21,1)
(23,63,1)
(48,60,1)
(4,27,1)
(1,16,1)
(46,45,1)
(22,45,1)
(41,20,1)
(68,34,1)
(31,3,1)
(44,54,1)
(26,45,1)
(11,38,1)
(70,36,1)
(32,68,1)
(49,45,1)
(41,13,1)
(14,17,1)
(17,35,1)
(36,38,1)
(29,5,1)
(21,50,1)
(3,47,1)
(38,41,1)
(25,29,1)
(9,45,1)
(43,7,1)
(16,44,1)
(43,46,1)
(49,65,1)
(65,40,1)
(36,57,1)
(46,62,1)
(47,45,1)
(63,49,1)
(54,6,1)
(70,19,1)
(64,69,1)
(33,9,1)
(18,31,1)
(6,39,1)
(39,52,1)
(16,54,1)
(47,15,1)
(34,42,1)
(57,11,1)
(22,23,1)
(59,67,1)
(20,22,1)
(40,45,1)
(50,53,1)
(1,26,1)
(63,12,1)
(62,14,1)
(48,61,1)
(36,45,1)
(64,45,1)
(67,70,1)
(69,33,1)
(34,9,1)
(9,56,1)
(3,37,1)
(27,49,1)
(0,28,1)
(42,64,1)
(21,45,1)
(12,4,1)
(1,5,2)
(44,5,2)
(36,45,2)
(46,5,2)
(15,5,2)
(60,24,2)
(45,48,2)
(38,41,2)
(47,45,2)
(35,5,2)
(64,45,2)
(67,70,2)
(16,54,2)
(34,5,2)
(34,42,2)
(29,5,2)
(14,5,2)
(21,5,2)
(62,5,2)
(70,36,2)
(45,5,2)
(9,45,2)
(17,5,2)
(68,5,2)
(41,5,2)
(38,5,2)
(54,5,2)
(47,5,2)
(49,5,2)
(46,45,2)
(48,60,2)
(28,43,2)
(41,13,2)
(3,37,2)
(49,45,2)
(34,9,2)
(65,5,2)
(3,5,2)
(60,5,2)
(1,16,2)
(0,5,2)
(63,5,2)
(23,5,2)
(70,5,2)
(28,5,2)
(24,5,2)
(22,45,2)
(59,5,2)
(52,21,2)
(70,19,2)
(39,5,2)
(47,38,2)
(21,45,2)
(56,5,2)
(6,5,2)
(52,5,2)
(26,45,2)
(43,5,2)
(12,49,2)
(40,5,2)
(57,5,2)
(36,5,2)
(12,4,2)
(25,5,2)
(33,5,2)
(50,5,2)
(48,5,2)
(54,52,2)
(64,5,2)
(31,5,2)
(11,5,2)
(27,49,2)
(69,5,2)
(32,5,2)
(3,47,2)
(42,64,2)
(36,38,2)
(54,6,2)
(31,3,2)
(53,5,2)
(1,26,2)
(16,5,2)
(42,5,2)
(43,46,2)
(48,61,2)
(4,49,2)
(9,5,2)
(26,5,2)
(20,5,2)
(22,5,2)
(67,5,2)
(43,7,2)
-----------------------------------
(0,structCharVoid)
(1,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(2,if(GLOBAL_CONST_TRUE)
(3,(char *)
(4,-1)
(5,GLOBAL_CONST_TRUE)
(6,sizeof(char)
(7,char *)
(8,)
(9,structCharVoid->charFirst)
(10,)
(11,structCharVoid)
(12,exit(-1)
(13,void *)
(14,structCharVoid)
(15,voidSecond)
(16,(sizeof(structCharVoid->charFirst)
(17,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(18,RET)
(19,char *)
(20,SRC_STR)
(21,structCharVoid->charFirst)
(22,structCharVoid->voidSecond)
(23,voidSecond)
(24,sizeof(charVoid)
(25,charVoid)
(26,structCharVoid->charFirst)
(27,1)
(28,printLine((char *)
(29,structCharVoid)
(30,)
(31,printLine((char *)
(32,charFirst)
(33,SRC_STR)
(34,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(35,'\\\\0')
(36,structCharVoid->voidSecond)
(37,char *)
(38,structCharVoid->voidSecond = (void *)
(39,char)
(40,structCharVoid)
(41,(void *)
(42,sizeof(*structCharVoid)
(43,(char *)
(44,1)
(45,* structCharVoid = (charVoid *)
(46,structCharVoid->charFirst)
(47,structCharVoid->voidSecond)
(48,(charVoid *)
(49,structCharVoid == NULL)
(50,charFirst)
(51,structCharVoid)
(52,sizeof(structCharVoid->charFirst)
(53,structCharVoid)
(54,sizeof(structCharVoid->charFirst)
(55,\'\\\\0\')
(56,charFirst)
(57,voidSecond)
(58,if (structCharVoid == NULL)
(59,structCharVoid)
(60,malloc(sizeof(charVoid)
(61,charVoid *)
(62,charFirst)
(63,structCharVoid)
(64,*structCharVoid)
(65,NULL)
(66,)
(67,printLine((char *)
(68,structCharVoid)
(69,structCharVoid)
(70,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^