-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
60,61
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
71,73
73,74
74,75
74,76
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,59,62,66,68,70,72,75,76,80,83,84,88,90
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad(){    int * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad
{    int * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(20,30,0)
(1,35,0)
(18,30,0)
(15,33,0)
(23,31,0)
(39,38,0)
(32,35,0)
(34,35,0)
(26,32,0)
(9,31,0)
(7,13,0)
(20,6,0)
(42,6,0)
(33,19,0)
(27,20,0)
(29,22,0)
(16,1,0)
(30,18,0)
(24,21,0)
(32,41,0)
(41,32,0)
(4,33,0)
(1,4,0)
(33,4,0)
(21,4,0)
(10,39,0)
(2,9,0)
(39,10,0)
(35,31,0)
(11,30,0)
(32,4,0)
(7,19,0)
(28,20,0)
(41,9,0)
(12,32,0)
(33,15,0)
(8,13,0)
(1,9,0)
(6,9,0)
(19,7,0)
(0,18,0)
(37,31,0)
(36,35,0)
(30,20,0)
(20,35,0)
(5,21,0)
(20,4,0)
(17,10,0)
(4,22,0)
(19,33,0)
(14,4,0)
(13,7,0)
(25,7,0)
(20,9,0)
(11,27,1)
(41,32,1)
(14,3,1)
(8,25,1)
(33,19,1)
(21,4,1)
(27,28,1)
(20,30,1)
(40,1,1)
(16,41,1)
(32,12,1)
(0,11,1)
(18,0,1)
(1,35,1)
(7,13,1)
(32,35,1)
(34,36,1)
(3,35,1)
(4,33,1)
(10,17,1)
(42,3,1)
(6,42,1)
(13,8,1)
(39,10,1)
(20,35,1)
(33,15,1)
(21,5,1)
(30,18,1)
(32,4,1)
(42,21,1)
(42,39,1)
(20,4,1)
(1,16,1)
(26,20,1)
(35,34,1)
(1,4,1)
(12,26,1)
(25,14,1)
(20,6,1)
(24,4,1)
(28,6,1)
(5,24,1)
(19,7,1)
(17,21,1)
(33,3,2)
(30,18,2)
(1,4,2)
(19,7,2)
(32,4,2)
(19,3,2)
(33,19,2)
(39,21,2)
(13,3,2)
(39,10,2)
(20,6,2)
(4,33,2)
(33,15,2)
(5,3,2)
(21,4,2)
(20,30,2)
(24,3,2)
(20,35,2)
(41,32,2)
(20,4,2)
(32,35,2)
(4,3,2)
(17,21,2)
(10,21,2)
(7,3,2)
(8,3,2)
(21,3,2)
(14,3,2)
(7,13,2)
(25,3,2)
(1,35,2)
-----------------------------------
(0,int)
(1,free(data)
(2,source)
(3,1)
(4,data = (int *)
(5,NULL)
(6,source[100] = {0})
(7,50*sizeof(int)
(8,int)
(9,)
(10,-1)
(11,100)
(12,0)
(13,sizeof(int)
(14,data)
(15,int *)
(16,data)
(17,1)
(18,sizeof(int)
(19,malloc(50*sizeof(int)
(20,memmove(data, source, 100*sizeof(int)
(21,data == NULL)
(22,)
(23,if(1)
(24,data)
(25,50)
(26,data)
(27,source)
(28,data)
(29,if (data == NULL)
(30,100*sizeof(int)
(31,)
(32,data[0])
(33,(int *)
(34,NULL)
(35,data = NULL)
(36,data)
(37,data)
(38,)
(39,exit(-1)
(40,RET)
(41,printIntLine(data[0])
(42,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^