-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(12,30,0)
(1,15,0)
(1,34,0)
(28,9,0)
(28,0,0)
(8,36,0)
(17,34,0)
(27,2,0)
(0,28,0)
(29,36,0)
(23,11,0)
(24,7,0)
(34,7,0)
(28,26,0)
(18,27,0)
(13,27,0)
(36,34,0)
(1,0,0)
(4,21,0)
(33,12,0)
(15,1,0)
(31,20,0)
(3,35,0)
(34,1,0)
(6,14,0)
(35,7,0)
(21,34,0)
(25,21,0)
(10,26,0)
(30,5,0)
(0,1,0)
(11,14,0)
(26,28,0)
(19,7,0)
(14,11,0)
(11,9,0)
(16,28,0)
(20,32,0)
(19,34,0)
(22,19,0)
(35,34,0)
(21,7,0)
(30,12,0)
(21,34,1)
(12,33,1)
(28,26,1)
(8,34,1)
(31,11,1)
(36,29,1)
(28,9,1)
(19,34,1)
(11,14,1)
(25,30,1)
(37,19,1)
(36,34,1)
(21,4,1)
(35,3,1)
(14,6,1)
(11,9,1)
(33,36,1)
(16,17,1)
(20,31,1)
(10,16,1)
(22,35,1)
(19,22,1)
(1,0,1)
(3,21,1)
(26,10,1)
(1,15,1)
(4,25,1)
(29,8,1)
(25,36,1)
(17,11,1)
(34,1,1)
(6,23,1)
(30,12,1)
(37,20,1)
(35,34,1)
(0,28,1)
(1,11,2)
(35,11,2)
(34,11,2)
(35,34,2)
(28,26,2)
(22,11,2)
(31,11,2)
(34,1,2)
(28,9,2)
(21,11,2)
(0,28,2)
(10,11,2)
(19,11,2)
(3,11,2)
(30,36,2)
(33,36,2)
(0,11,2)
(36,11,2)
(19,34,2)
(36,34,2)
(11,14,2)
(28,11,2)
(29,11,2)
(16,11,2)
(1,15,2)
(12,36,2)
(11,9,2)
(1,0,2)
(4,11,2)
(17,11,2)
(21,34,2)
(8,11,2)
(26,11,2)
(30,12,2)
(20,11,2)
(25,11,2)
-----------------------------------
(0,malloc(data*sizeof(char)
(1,(char *)
(2,)
(3,myString)
(4,HELLO_STRING)
(5,)
(6,HELLO_STRING)
(7,)
(8,myString)
(9,size_t data)
(10,char)
(11,data > strlen(HELLO_STRING)
(12,-1)
(13,myString)
(14,strlen(HELLO_STRING)
(15,char *)
(16,data)
(17,myString)
(18,if (data > strlen(HELLO_STRING)
(19,free(myString)
(20,printLine("Input is less than the length of the source string")
(21,strcpy(myString, HELLO_STRING)
(22,myString)
(23,data)
(24,if (myString == NULL)
(25,myString)
(26,sizeof(char)
(27,)
(28,data*sizeof(char)
(29,NULL)
(30,exit(-1)
(31,"Input is less than the length of the source string")
(32,)
(33,1)
(34,myString = (char *)
(35,printLine(myString)
(36,myString == NULL)
(37,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^