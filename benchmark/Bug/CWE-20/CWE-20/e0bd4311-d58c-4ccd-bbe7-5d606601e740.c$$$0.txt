-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad()
{
    if(globalTrue)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
24,26
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
43,44
44,45
44,46
44,47
44,48
45,46
47,48
47,49
48,49
51,52
53,54
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
67,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
-----nextToken-----
2,4,8,14,16,21,22,25,27,29,33,36,38,41,42,46,49,50,52,56,62,63,71,72,75,76,77,78,82,85,87,90,91,95,98,100,103,104
-----computeFrom-----
18,19
18,20
58,59
58,60
64,65
64,66
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad(){    if(globalTrue)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad
{    if(globalTrue)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(globalTrue)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
globalTrue
globalTrue
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memmove
memmove
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(54,34,0)
(47,4,0)
(42,51,0)
(7,18,0)
(0,9,0)
(10,0,0)
(51,42,0)
(41,15,0)
(3,37,0)
(46,22,0)
(53,6,0)
(27,0,0)
(6,53,0)
(20,7,0)
(5,25,0)
(39,51,0)
(24,14,0)
(37,3,0)
(40,36,0)
(52,23,0)
(1,0,0)
(13,4,0)
(15,14,0)
(14,15,0)
(5,36,0)
(6,35,0)
(48,44,0)
(23,42,0)
(4,13,0)
(8,1,0)
(36,5,0)
(42,23,0)
(17,19,0)
(18,34,0)
(37,32,0)
(4,30,0)
(43,24,0)
(31,30,0)
(44,6,0)
(14,24,0)
(49,7,0)
(35,0,0)
(6,44,0)
(38,22,0)
(47,0,0)
(2,44,0)
(37,10,0)
(12,32,0)
(22,25,0)
(42,0,0)
(32,18,0)
(5,24,0)
(28,15,0)
(4,47,0)
(32,37,0)
(18,0,0)
(24,5,0)
(34,18,0)
(35,6,0)
(25,5,0)
(33,23,0)
(14,1,0)
(21,42,0)
(25,22,0)
(11,34,0)
(10,37,0)
(26,32,0)
(34,11,0)
(30,4,0)
(45,30,0)
(44,18,0)
(50,10,1)
(38,46,1)
(40,25,1)
(24,5,1)
(20,49,1)
(31,1,1)
(51,39,1)
(43,5,1)
(21,23,1)
(2,18,1)
(10,37,1)
(1,8,1)
(25,22,1)
(4,30,1)
(14,24,1)
(42,23,1)
(32,26,1)
(6,53,1)
(14,15,1)
(46,15,1)
(36,40,1)
(32,18,1)
(5,25,1)
(26,12,1)
(48,2,1)
(7,20,1)
(4,13,1)
(24,43,1)
(34,11,1)
(44,18,1)
(34,54,1)
(41,42,1)
(18,34,1)
(12,47,1)
(37,32,1)
(39,21,1)
(44,48,1)
(22,38,1)
(50,16,1)
(28,41,1)
(47,4,1)
(45,31,1)
(8,14,1)
(23,33,1)
(5,36,1)
(49,16,1)
(54,7,1)
(35,6,1)
(6,44,1)
(15,28,1)
(42,51,1)
(33,52,1)
(37,3,1)
(52,35,1)
(30,45,1)
(24,5,2)
(52,16,2)
(15,16,2)
(14,16,2)
(6,44,2)
(18,34,2)
(47,16,2)
(39,16,2)
(10,16,2)
(1,16,2)
(4,13,2)
(33,16,2)
(38,16,2)
(28,16,2)
(25,22,2)
(5,16,2)
(5,25,2)
(41,16,2)
(30,16,2)
(42,23,2)
(32,18,2)
(54,16,2)
(32,16,2)
(7,16,2)
(34,11,2)
(48,16,2)
(12,16,2)
(45,16,2)
(26,16,2)
(36,16,2)
(37,16,2)
(10,37,2)
(42,16,2)
(42,51,2)
(37,32,2)
(4,16,2)
(35,6,2)
(43,16,2)
(24,16,2)
(4,30,2)
(6,16,2)
(35,16,2)
(14,24,2)
(20,16,2)
(5,36,2)
(8,16,2)
(37,3,2)
(44,16,2)
(34,16,2)
(25,16,2)
(46,16,2)
(18,16,2)
(22,16,2)
(40,16,2)
(6,53,2)
(23,16,2)
(49,16,2)
(31,16,2)
(2,16,2)
(21,16,2)
(44,18,2)
(47,4,2)
(51,16,2)
(14,15,2)
-----------------------------------
(0,)
(1,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(2,structCharVoid)
(3,char *)
(4,(char *)
(5,sizeof(structCharVoid.charFirst)
(6,(char *)
(7,structCharVoid.voidSecond)
(8,\'\\\\0\')
(9,)
(10,printLine((char *)
(11,void *)
(12,structCharVoid)
(13,char *)
(14,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(15,structCharVoid.charFirst)
(16,globalTrue)
(17,if(globalTrue)
(18,structCharVoid.voidSecond = (void *)
(19,)
(20,voidSecond)
(21,SRC_STR)
(22,structCharVoid.charFirst)
(23,structCharVoid.charFirst)
(24,(sizeof(structCharVoid.charFirst)
(25,sizeof(structCharVoid.charFirst)
(26,voidSecond)
(27,structCharVoid)
(28,charFirst)
(29,'\\\\0')
(30,structCharVoid.charFirst)
(31,structCharVoid)
(32,structCharVoid.voidSecond)
(33,charFirst)
(34,(void *)
(35,printLine((char *)
(36,sizeof(char)
(37,(char *)
(38,charFirst)
(39,structCharVoid)
(40,char)
(41,structCharVoid)
(42,memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(43,1)
(44,structCharVoid.voidSecond)
(45,charFirst)
(46,structCharVoid)
(47,printLine((char *)
(48,voidSecond)
(49,structCharVoid)
(50,RET)
(51,sizeof(structCharVoid)
(52,structCharVoid)
(53,char *)
(54,SRC_STR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^