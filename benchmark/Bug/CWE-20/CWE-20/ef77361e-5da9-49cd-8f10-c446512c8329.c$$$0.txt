-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char dest[50] = "";
            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
            strcpy(dest, data);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
81,82
81,83
81,84
81,85
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,68,71,74,76,77,80,84,86,88,90,94,96,98,102,104,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            strcpy(dest, data);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            strcpy(dest, data);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            strcpy(dest, data);            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            strcpy(dest, data);            printLine(data);            free(data);        }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,43,0)
(32,7,0)
(30,6,0)
(24,11,0)
(52,9,0)
(23,6,0)
(36,9,0)
(27,47,0)
(13,44,0)
(4,7,0)
(42,47,0)
(37,8,0)
(11,7,0)
(32,20,0)
(53,46,0)
(6,46,0)
(26,14,0)
(17,3,0)
(39,34,0)
(18,3,0)
(16,12,0)
(15,35,0)
(6,34,0)
(5,26,0)
(40,22,0)
(45,30,0)
(28,26,0)
(35,15,0)
(32,38,0)
(34,14,0)
(44,14,0)
(33,7,0)
(47,12,0)
(2,30,0)
(43,20,0)
(43,8,0)
(1,29,0)
(31,35,0)
(4,44,0)
(4,3,0)
(22,12,0)
(46,34,0)
(30,47,0)
(22,6,0)
(9,26,0)
(29,6,0)
(48,11,0)
(21,14,0)
(20,43,0)
(49,4,0)
(46,7,0)
(41,14,0)
(51,34,0)
(7,14,0)
(38,32,0)
(26,9,0)
(30,12,0)
(19,6,0)
(8,43,0)
(15,50,0)
(3,4,0)
(29,12,0)
(26,7,0)
(20,32,0)
(12,34,0)
(7,32,0)
(10,46,0)
(46,7,1)
(22,6,1)
(4,7,1)
(9,36,1)
(42,6,1)
(30,6,1)
(36,52,1)
(5,15,1)
(13,4,1)
(24,48,1)
(2,47,1)
(26,7,1)
(6,46,1)
(1,30,1)
(5,11,1)
(28,5,1)
(35,31,1)
(48,7,1)
(43,8,1)
(27,42,1)
(22,40,1)
(30,47,1)
(44,13,1)
(26,9,1)
(17,49,1)
(40,29,1)
(6,19,1)
(30,45,1)
(49,26,1)
(46,10,1)
(0,22,1)
(32,20,1)
(53,44,1)
(45,2,1)
(23,46,1)
(7,32,1)
(32,38,1)
(4,3,1)
(29,6,1)
(15,35,1)
(52,28,1)
(3,18,1)
(11,7,1)
(20,43,1)
(29,1,1)
(25,33,1)
(11,24,1)
(47,27,1)
(10,53,1)
(18,17,1)
(37,25,1)
(19,23,1)
(8,37,1)
(31,11,1)
(30,6,2)
(20,43,2)
(29,6,2)
(35,11,2)
(43,8,2)
(4,7,2)
(15,11,2)
(30,47,2)
(22,6,2)
(26,9,2)
(31,11,2)
(46,7,2)
(32,20,2)
(11,7,2)
(6,46,2)
(7,32,2)
(15,35,2)
(26,7,2)
(32,38,2)
(4,3,2)
-----------------------------------
(0,RET)
(1,data)
(2,dest)
(3,100-1)
(4,data[100-1])
(5,data)
(6,* data = dataCopy)
(7,data = (char *)
(8,sizeof(char)
(9,100-1)
(10,data)
(11,data == NULL)
(12,)
(13,\\\'\\\\0\\\')
(14,)
(15,exit(-1)
(16,dest)
(17,100)
(18,1)
(19,dataCopy)
(20,malloc(100*sizeof(char)
(21,if (data == NULL)
(22,free(data)
(23,data)
(24,NULL)
(25,100)
(26,memset(data, \\\'A\\\', 100-1)
(27,"")
(28,\\\'A\\\')
(29,printLine(data)
(30,strcpy(dest, data)
(31,1)
(32,(char *)
(33,data)
(34,)
(35,-1)
(36,1)
(37,char)
(38,char *)
(39,data)
(40,data)
(41,data)
(42,dest)
(43,100*sizeof(char)
(44,data[100-1] = \\\'\\\\0\\\')
(45,data)
(46,* dataCopy = data)
(47,dest[50] = "")
(48,data)
(49,data)
(50,)
(51,dataCopy)
(52,100)
(53,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^