-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
90,95
91,92
93,94
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,95,96,98,102,104,108,110
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(46,43,0)
(29,13,0)
(38,11,0)
(51,45,0)
(26,25,0)
(13,16,0)
(11,13,0)
(23,33,0)
(49,13,0)
(43,13,0)
(36,33,0)
(51,13,0)
(1,43,0)
(28,11,0)
(7,40,0)
(49,7,0)
(18,35,0)
(55,48,0)
(25,43,0)
(49,45,0)
(41,7,0)
(39,25,0)
(54,8,0)
(8,48,0)
(33,23,0)
(6,40,0)
(3,24,0)
(50,15,0)
(32,16,0)
(43,25,0)
(45,16,0)
(9,23,0)
(15,24,0)
(4,7,0)
(14,11,0)
(11,7,0)
(20,13,0)
(7,24,0)
(35,2,0)
(11,45,0)
(47,45,0)
(21,11,0)
(34,29,0)
(30,44,0)
(27,52,0)
(22,51,0)
(42,4,0)
(40,10,0)
(40,6,0)
(33,10,0)
(0,52,0)
(19,45,0)
(10,40,0)
(10,33,0)
(37,4,0)
(51,7,0)
(48,8,0)
(56,49,0)
(48,29,0)
(40,7,0)
(52,7,0)
(4,15,0)
(12,8,0)
(35,18,0)
(53,16,0)
(5,44,0)
(17,18,0)
(12,55,1)
(34,48,1)
(51,7,1)
(11,7,1)
(38,21,1)
(42,37,1)
(27,7,1)
(28,14,1)
(31,49,1)
(46,15,1)
(51,45,1)
(40,6,1)
(41,44,1)
(0,27,1)
(29,34,1)
(10,33,1)
(44,5,1)
(4,42,1)
(39,1,1)
(5,30,1)
(11,45,1)
(35,18,1)
(51,22,1)
(55,43,1)
(11,38,1)
(4,7,1)
(54,12,1)
(37,35,1)
(52,7,1)
(46,44,1)
(1,46,1)
(14,29,1)
(18,17,1)
(56,51,1)
(9,36,1)
(23,9,1)
(40,10,1)
(49,7,1)
(21,28,1)
(49,56,1)
(45,47,1)
(43,25,1)
(50,4,1)
(52,0,1)
(22,11,1)
(25,26,1)
(36,41,1)
(7,40,1)
(48,8,1)
(15,50,1)
(26,39,1)
(8,54,1)
(49,45,1)
(30,45,1)
(17,52,1)
(37,52,1)
(47,19,1)
(33,23,1)
(42,44,2)
(10,33,2)
(52,7,2)
(43,25,2)
(50,44,2)
(33,44,2)
(0,44,2)
(37,44,2)
(35,52,2)
(51,7,2)
(36,44,2)
(4,44,2)
(18,52,2)
(7,44,2)
(11,7,2)
(33,23,2)
(40,44,2)
(23,44,2)
(49,7,2)
(35,18,2)
(51,45,2)
(27,44,2)
(11,45,2)
(48,8,2)
(40,6,2)
(7,40,2)
(4,7,2)
(9,44,2)
(17,52,2)
(41,44,2)
(40,10,2)
(15,44,2)
(52,44,2)
(49,45,2)
(10,44,2)
-----------------------------------
(0,NULL)
(1,\\\'C\\\')
(2,)
(3,if (data == NULL)
(4,data[0])
(5,5)
(6,char *)
(7,data = (char *)
(8,100-1)
(9,char)
(10,malloc(50*sizeof(char)
(11,SNPRINTF(data, 100, "%s", source)
(12,100)
(13,)
(14,data)
(15,data[0] = \\\'\\\\0\\\')
(16,)
(17,1)
(18,-1)
(19,data)
(20,source)
(21,"%s")
(22,data)
(23,sizeof(char)
(24,)
(25,100-1)
(26,1)
(27,data)
(28,100)
(29,source[100-1] = \\\'\\\\0\\\')
(30,staticFive)
(31,RET)
(32,if(staticFive==5)
(33,50*sizeof(char)
(34,\\\'\\\\0\\\')
(35,exit(-1)
(36,50)
(37,data)
(38,source)
(39,100)
(40,(char *)
(41,data)
(42,0)
(43,memset(source, \\\'C\\\', 100-1)
(44,staticFive==5)
(45,data = NULL)
(46,source)
(47,NULL)
(48,source[100-1])
(49,free(data)
(50,\\\'\\\\0\\\')
(51,printLine(data)
(52,data == NULL)
(53,data)
(54,1)
(55,source)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^