-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char source[10+1] = SRC_STRING;
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            strcpy(data, source);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
104,105
104,106
104,107
106,107
107,108
107,109
110,111
111,112
113,114
114,115
114,116
114,117
115,116
117,118
119,120
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,88,92,94,95,99,103,105,108,109,112,116,118,120,124,126,130,132
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(41,2,0)
(4,43,0)
(45,43,0)
(3,46,0)
(23,43,0)
(0,35,0)
(26,58,0)
(9,30,0)
(25,46,0)
(43,58,0)
(14,27,0)
(11,1,0)
(16,53,0)
(56,47,0)
(24,57,0)
(22,40,0)
(49,27,0)
(1,46,0)
(21,2,0)
(28,55,0)
(14,1,0)
(40,22,0)
(6,9,0)
(60,15,0)
(51,23,0)
(36,1,0)
(13,4,0)
(59,46,0)
(27,49,0)
(37,47,0)
(16,43,0)
(55,49,0)
(2,14,0)
(50,15,0)
(53,57,0)
(35,39,0)
(52,54,0)
(7,3,0)
(12,1,0)
(30,15,0)
(34,46,0)
(42,40,0)
(31,50,0)
(15,46,0)
(15,17,0)
(50,11,0)
(47,43,0)
(57,35,0)
(19,14,0)
(53,58,0)
(33,4,0)
(54,55,0)
(29,11,0)
(27,14,0)
(38,53,0)
(22,20,0)
(4,47,0)
(11,14,0)
(9,1,0)
(55,54,0)
(49,55,0)
(18,3,0)
(4,53,0)
(58,46,0)
(32,39,0)
(23,53,0)
(48,16,0)
(30,9,0)
(44,30,0)
(39,35,0)
(5,27,0)
(17,15,0)
(57,53,0)
(27,5,0)
(10,17,0)
(35,46,0)
(16,53,1)
(53,57,1)
(31,2,1)
(42,2,1)
(0,15,1)
(3,7,1)
(17,10,1)
(57,24,1)
(4,47,1)
(21,14,1)
(4,13,1)
(23,51,1)
(52,28,1)
(41,21,1)
(50,31,1)
(39,32,1)
(22,40,1)
(6,3,1)
(4,53,1)
(37,56,1)
(8,16,1)
(35,39,1)
(38,11,1)
(2,14,1)
(10,60,1)
(19,9,1)
(28,19,1)
(11,14,1)
(24,38,1)
(13,33,1)
(23,53,1)
(2,41,1)
(27,49,1)
(50,15,1)
(49,55,1)
(47,37,1)
(40,42,1)
(9,30,1)
(56,53,1)
(27,5,1)
(29,50,1)
(18,35,1)
(44,6,1)
(14,27,1)
(54,52,1)
(31,22,1)
(16,48,1)
(30,15,1)
(33,47,1)
(57,35,1)
(30,44,1)
(32,0,1)
(51,4,1)
(7,18,1)
(11,29,1)
(15,17,1)
(48,23,1)
(55,54,1)
(4,53,2)
(55,54,2)
(4,47,2)
(57,35,2)
(40,2,2)
(15,17,2)
(27,5,2)
(49,55,2)
(27,49,2)
(11,14,2)
(22,40,2)
(30,15,2)
(14,27,2)
(42,2,2)
(35,39,2)
(22,2,2)
(9,30,2)
(53,57,2)
(2,14,2)
(23,53,2)
(16,53,2)
(50,15,2)
-----------------------------------
(0,dataPtr2)
(1,)
(2,data == NULL)
(3,data = NULL)
(4,strcpy(data, source)
(5,char *)
(6,data)
(7,NULL)
(8,RET)
(9,* data = *dataPtr1)
(10,data)
(11,*dataPtr1 = data)
(12,data)
(13,source)
(14,data = (char *)
(15,* *dataPtr1 = &data)
(16,free(data)
(17,&data)
(18,data)
(19,data)
(20,)
(21,data)
(22,exit(-1)
(23,printLine(data)
(24,dataPtr2)
(25,dataPtr1)
(26,data)
(27,(char *)
(28,10)
(29,data)
(30,*dataPtr1)
(31,dataPtr1)
(32,data)
(33,data)
(34,data)
(35,* *dataPtr2 = &data)
(36,if (data == NULL)
(37,SRC_STRING)
(38,data)
(39,&data)
(40,-1)
(41,NULL)
(42,1)
(43,)
(44,dataPtr1)
(45,source)
(46,)
(47,source[10+1] = SRC_STRING)
(48,data)
(49,malloc(10*sizeof(char)
(50,*dataPtr1)
(51,data)
(52,char)
(53,* data = *dataPtr2)
(54,sizeof(char)
(55,10*sizeof(char)
(56,source)
(57,*dataPtr2)
(58,)
(59,dataPtr2)
(60,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^