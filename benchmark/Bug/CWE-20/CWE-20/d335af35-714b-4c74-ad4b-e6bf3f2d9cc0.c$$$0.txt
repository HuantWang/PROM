-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
58,59
58,60
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
-----nextToken-----
2,4,5,7,9,10,14,19,21,22,26,28,31,33,36,37,41,43,48,50,54,56,57,59,60,65,67,68,69,73,76,77,80
-----computeFrom-----
32,33
32,34
39,40
39,41
58,59
58,60
62,63
62,64
66,67
66,68
71,72
71,73
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
badStatic
badStatic
{        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
return data;
data
data
-----joern-----
(17,25,0)
(4,20,0)
(8,12,0)
(29,25,0)
(1,34,0)
(25,29,0)
(13,22,0)
(40,17,0)
(28,0,0)
(44,29,0)
(21,9,0)
(2,23,0)
(20,23,0)
(22,46,0)
(6,1,0)
(36,6,0)
(30,36,0)
(46,0,0)
(12,8,0)
(24,35,0)
(38,35,0)
(0,9,0)
(17,37,0)
(46,30,0)
(11,9,0)
(16,12,0)
(32,30,0)
(46,22,0)
(8,33,0)
(25,9,0)
(23,20,0)
(17,15,0)
(47,46,0)
(29,30,0)
(36,30,0)
(18,37,0)
(10,23,0)
(19,22,0)
(9,14,0)
(36,5,0)
(7,29,0)
(34,1,0)
(5,36,0)
(39,17,0)
(35,30,0)
(31,34,0)
(30,9,0)
(45,20,0)
(43,25,0)
(1,6,0)
(25,15,0)
(20,30,0)
(6,36,0)
(3,1,0)
(20,9,0)
(44,7,1)
(23,10,1)
(17,25,1)
(10,2,1)
(13,47,1)
(16,35,1)
(31,3,1)
(2,4,1)
(46,30,1)
(38,24,1)
(43,0,1)
(25,29,1)
(0,28,1)
(46,22,1)
(39,17,1)
(47,20,1)
(4,45,1)
(40,41,1)
(17,40,1)
(35,30,1)
(36,6,1)
(20,30,1)
(20,23,1)
(36,5,1)
(29,30,1)
(32,41,1)
(1,34,1)
(12,16,1)
(28,46,1)
(6,1,1)
(45,35,1)
(30,36,1)
(17,15,1)
(34,31,1)
(22,19,1)
(24,30,1)
(25,15,1)
(19,13,1)
(40,25,1)
(45,8,1)
(7,43,1)
(3,32,1)
(35,38,1)
(8,12,1)
(29,44,1)
(1,41,2)
(29,30,2)
(4,41,2)
(30,41,2)
(8,12,2)
(20,41,2)
(29,41,2)
(2,41,2)
(30,36,2)
(25,29,2)
(8,35,2)
(17,15,2)
(35,30,2)
(19,41,2)
(38,41,2)
(10,41,2)
(44,41,2)
(16,35,2)
(3,41,2)
(24,41,2)
(39,17,2)
(35,41,2)
(47,41,2)
(45,41,2)
(20,23,2)
(43,41,2)
(13,41,2)
(6,1,2)
(46,22,2)
(12,35,2)
(7,41,2)
(36,41,2)
(22,41,2)
(1,34,2)
(6,41,2)
(31,41,2)
(20,30,2)
(36,6,2)
(25,15,2)
(25,41,2)
(32,41,2)
(28,41,2)
(46,30,2)
(23,41,2)
(36,5,2)
(46,41,2)
(0,41,2)
(17,25,2)
(34,41,2)
-----------------------------------
(0,dataBuffer[100-1] = \'\\\\0\')
(1,100*sizeof(char)
(2,100)
(3,100)
(4,'A')
(5,char *)
(6,malloc(100*sizeof(char)
(7,dataBuffer)
(8,exit(-1)
(9,)
(10,1)
(11,dataBuffer)
(12,-1)
(13,100)
(14,)
(15,char * data)
(16,1)
(17,return data;)
(18,if(badStatic)
(19,1)
(20,memset(dataBuffer, 'A', 100-1)
(21,if (dataBuffer == NULL)
(22,100-1)
(23,100-1)
(24,dataBuffer)
(25,data = dataBuffer - 8)
(26,\'A\')
(27,memset(dataBuffer, \'A\', 100-1)
(28,'\\\\0')
(29,dataBuffer - 8)
(30,* dataBuffer = (char *)
(31,char)
(32,dataBuffer)
(33,)
(34,sizeof(char)
(35,dataBuffer == NULL)
(36,(char *)
(37,)
(38,NULL)
(39,RET)
(40,data)
(41,badStatic)
(42,dataBuffer[100-1] = '\\\\0')
(43,data)
(44,8)
(45,dataBuffer)
(46,dataBuffer[100-1])
(47,dataBuffer)
(48,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^