-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(36,34,0)
(58,32,0)
(68,39,0)
(50,33,0)
(42,49,0)
(8,55,0)
(47,12,0)
(56,32,0)
(25,43,0)
(65,38,0)
(68,58,0)
(15,56,0)
(54,16,0)
(63,4,0)
(37,26,0)
(22,43,0)
(58,68,0)
(31,28,0)
(48,2,0)
(32,43,0)
(45,4,0)
(50,32,0)
(11,60,0)
(23,60,0)
(5,0,0)
(16,43,0)
(6,58,0)
(67,28,0)
(28,31,0)
(41,16,0)
(70,12,0)
(12,70,0)
(41,60,0)
(11,39,0)
(24,56,0)
(63,37,0)
(39,7,0)
(49,33,0)
(60,43,0)
(44,69,0)
(58,6,0)
(19,41,0)
(41,32,0)
(59,34,0)
(0,69,0)
(46,49,0)
(70,10,0)
(40,41,0)
(4,60,0)
(11,34,0)
(21,38,0)
(3,6,0)
(64,0,0)
(6,34,0)
(27,69,0)
(20,11,0)
(2,34,0)
(56,34,0)
(9,43,0)
(39,68,0)
(52,67,0)
(62,11,0)
(68,33,0)
(53,69,0)
(17,58,0)
(61,55,0)
(31,60,0)
(71,67,0)
(51,50,0)
(28,67,0)
(13,68,0)
(35,31,0)
(14,6,0)
(66,37,0)
(4,43,0)
(30,32,0)
(60,31,0)
(9,60,0)
(31,35,0)
(67,32,0)
(32,50,0)
(1,9,0)
(38,69,0)
(18,69,0)
(55,60,0)
(11,20,1)
(40,19,1)
(61,8,1)
(58,6,1)
(51,30,1)
(49,46,1)
(46,42,1)
(4,45,1)
(39,68,1)
(31,35,1)
(13,11,1)
(71,23,1)
(59,55,1)
(41,60,1)
(41,40,1)
(65,21,1)
(48,39,1)
(31,28,1)
(2,34,1)
(64,38,1)
(4,60,1)
(24,2,1)
(68,33,1)
(30,49,1)
(19,56,1)
(9,60,1)
(24,34,1)
(52,71,1)
(42,0,1)
(11,60,1)
(11,34,1)
(55,61,1)
(36,59,1)
(63,37,1)
(6,3,1)
(54,41,1)
(32,50,1)
(15,24,1)
(3,14,1)
(67,32,1)
(62,56,1)
(5,64,1)
(2,48,1)
(70,12,1)
(1,16,1)
(38,65,1)
(34,36,1)
(49,33,1)
(41,32,1)
(56,34,1)
(14,17,1)
(63,4,1)
(12,47,1)
(23,32,1)
(50,51,1)
(47,55,1)
(20,62,1)
(6,34,1)
(56,15,1)
(28,67,1)
(58,32,1)
(9,1,1)
(55,60,1)
(8,60,1)
(0,5,1)
(68,58,1)
(45,9,1)
(67,52,1)
(56,32,1)
(59,70,1)
(17,13,1)
(66,49,1)
(50,33,1)
(60,31,1)
(37,66,1)
(16,54,1)
(6,56,2)
(51,49,2)
(58,6,2)
(32,50,2)
(36,49,2)
(30,49,2)
(24,49,2)
(15,49,2)
(70,55,2)
(13,56,2)
(56,49,2)
(37,49,2)
(15,56,2)
(41,60,2)
(60,49,2)
(63,4,2)
(58,56,2)
(68,58,2)
(1,49,2)
(55,49,2)
(4,49,2)
(31,28,2)
(41,49,2)
(23,49,2)
(34,49,2)
(67,32,2)
(39,68,2)
(56,32,2)
(28,67,2)
(62,56,2)
(61,49,2)
(17,56,2)
(24,56,2)
(14,56,2)
(3,56,2)
(68,33,2)
(55,60,2)
(47,55,2)
(11,56,2)
(45,49,2)
(19,49,2)
(39,56,2)
(20,56,2)
(67,49,2)
(49,33,2)
(59,49,2)
(54,49,2)
(32,49,2)
(28,49,2)
(6,34,2)
(9,60,2)
(50,49,2)
(8,49,2)
(2,34,2)
(58,32,2)
(56,56,2)
(70,12,2)
(11,34,2)
(11,60,2)
(60,31,2)
(2,56,2)
(52,49,2)
(31,49,2)
(71,49,2)
(68,56,2)
(41,32,2)
(12,55,2)
(48,56,2)
(40,49,2)
(4,60,2)
(66,49,2)
(16,49,2)
(63,37,2)
(50,33,2)
(9,49,2)
(56,34,2)
(31,35,2)
-----------------------------------
(0,* reversedString = NULL)
(1,reversedString)
(2,j++)
(3,1)
(4,return reversedString;)
(5,NULL)
(6,j-1)
(7,)
(8,reversedString)
(9,free(reversedString)
(10,)
(11,reversedString[j])
(12,-1)
(13,aString)
(14,j)
(15,i)
(16,reversedString[i] = \'\\\\0\')
(17,i)
(18,reversedString)
(19,reversedString)
(20,j)
(21,i)
(22,if (reversedString == NULL)
(23,reversedString)
(24,j)
(25,for (j = 0; j < i; j++)
(26,)
(27,i)
(28,malloc(i+1)
(29,reversedString[i] = '\\\\0')
(30,i)
(31,(char *)
(32,i = strlen(aString)
(33,char * aString)
(34,j = 0)
(35,char *)
(36,0)
(37,return NULL;)
(38,i = 0)
(39,reversedString[j] = aString[i-j-1])
(40,i)
(41,reversedString[i])
(42,aString)
(43,)
(44,j)
(45,reversedString)
(46,NULL)
(47,1)
(48,j)
(49,aString != NULL)
(50,strlen(aString)
(51,aString)
(52,1)
(53,if (aString != NULL)
(54,\'\\\\0\')
(55,reversedString == NULL)
(56,j < i)
(57,'\\\\0')
(58,i-j-1)
(59,j)
(60,reversedString = (char *)
(61,NULL)
(62,reversedString)
(63,RET)
(64,reversedString)
(65,0)
(66,NULL)
(67,i+1)
(68,aString[i-j-1])
(69,)
(70,exit(-1)
(71,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^