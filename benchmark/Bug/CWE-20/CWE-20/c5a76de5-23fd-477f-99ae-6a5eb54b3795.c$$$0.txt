-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to
        * access an index of the array in the sink that is out-of-bounds */
        data = 7;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
    else
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* FIX: Properly validate the array index and prevent a buffer overflow */
            if (data >= 0 && data < (10))
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is out-of-bounds");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
61,73
61,74
61,75
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
186,191
187,188
189,190
191,192
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
216,217
219,220
220,221
220,222
221,222
223,224
223,225
224,225
226,227
229,230
229,231
230,231
230,232
231,232
233,234
235,236
236,237
237,238
237,239
238,239
240,241
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
253,254
255,256
256,257
257,258
257,259
258,259
261,262
261,263
261,264
262,263
263,264
265,266
266,267
266,268
266,269
266,270
266,271
266,272
267,268
268,269
268,270
270,271
272,273
273,274
273,275
275,276
275,277
275,278
278,279
279,280
279,281
280,281
280,282
282,283
284,285
284,286
285,286
287,288
287,289
289,290
290,291
290,292
293,294
293,295
294,295
294,296
295,296
297,298
299,300
300,301
301,302
301,303
302,303
304,305
306,307
306,308
306,309
306,310
307,308
308,309
308,310
309,310
312,313
312,314
313,314
316,317
317,318
319,320
320,321
321,322
321,323
322,323
322,324
323,324
325,326
328,329
328,330
328,331
329,330
329,331
330,331
333,334
333,335
334,335
335,336
335,337
336,337
336,338
337,338
339,340
342,343
342,344
342,345
342,346
343,344
344,345
344,346
345,346
348,349
348,350
349,350
352,353
353,354
355,356
356,357
357,358
357,359
358,359
360,361
360,362
361,362
363,364
365,366
366,367
367,368
367,369
368,369
371,372
372,373
372,374
373,374
375,376
377,378
378,379
378,380
378,381
378,382
378,383
378,384
379,380
380,381
380,382
382,383
384,385
385,386
385,387
387,388
387,389
387,390
390,391
391,392
391,393
392,393
392,394
394,395
396,397
396,398
397,398
399,400
399,401
401,402
402,403
402,404
405,406
405,407
406,407
406,408
407,408
409,410
411,412
412,413
413,414
413,415
414,415
416,417
418,419
418,420
418,421
418,422
419,420
420,421
420,422
421,422
424,425
424,426
425,426
428,429
429,430
431,432
432,433
433,434
433,435
434,435
434,436
435,436
437,438
440,441
440,442
440,443
441,442
441,443
442,443
442,444
443,444
446,447
446,448
447,448
449,450
451,452
451,453
452,453
453,454
453,455
454,455
454,456
455,456
457,458
460,461
460,462
460,463
460,464
461,462
462,463
462,464
463,464
466,467
466,468
467,468
470,471
471,472
473,474
474,475
475,476
475,477
476,477
478,479
478,480
479,480
481,482
483,484
484,485
485,486
485,487
486,487
489,490
490,491
490,492
491,492
493,494
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,46,48,51,54,56,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,112,117,118,121,123,128,130,134,136,139,143,145,147,152,154,156,158,160,164,167,169,171,173,177,179,181,185,188,190,192,195,196,197,202,204,207,208,210,215,217,218,222,225,227,228,232,234,239,241,245,247,252,254,259,260,264,269,271,274,276,277,281,283,286,288,291,292,296,298,303,305,310,311,314,315,318,324,326,327,331,332,338,340,341,346,347,350,351,354,359,362,364,369,370,374,376,381,383,386,388,389,393,395,398,400,403,404,408,410,415,417,422,423,426,427,430,436,438,439,444,445,448,450,456,458,459,464,465,468,469,472,477,480,482,487,488,492,494
-----computeFrom-----
12,13
12,14
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
114,115
114,116
125,126
125,127
149,150
149,151
162,163
162,164
175,176
175,177
183,184
183,185
193,194
193,195
199,200
199,201
200,201
200,202
205,206
205,207
212,213
212,214
220,221
220,222
230,231
230,232
243,244
243,245
257,258
257,259
287,288
287,289
294,295
294,296
308,309
308,310
312,313
312,314
321,322
321,323
329,330
329,331
335,336
335,337
344,345
344,346
348,349
348,350
399,400
399,401
406,407
406,408
420,421
420,422
424,425
424,426
433,434
433,435
441,442
441,443
442,443
442,444
446,447
446,448
453,454
453,455
462,463
462,464
466,467
466,468
-----guardedBy-----
232,241
245,254
331,340
448,458
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }    if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }    if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }
data = 7;
data = 7
data
data
7
if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }
data >= 0 && data < (10)
data >= 0
data
data
0
data < (10)
data
data
(10)
10
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is out-of-bounds");            }
printLine("ERROR: Array index is out-of-bounds");
printLine("ERROR: Array index is out-of-bounds")
printLine
printLine
"ERROR: Array index is out-of-bounds"
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(110,15,0)
(271,265,0)
(4,260,0)
(181,220,0)
(113,226,0)
(83,215,0)
(227,226,0)
(59,135,0)
(9,193,0)
(247,10,0)
(187,15,0)
(229,145,0)
(215,21,0)
(88,255,0)
(227,258,0)
(281,234,0)
(201,229,0)
(71,12,0)
(190,241,0)
(69,270,0)
(50,172,0)
(37,192,0)
(257,226,0)
(168,294,0)
(272,68,0)
(140,119,0)
(192,37,0)
(224,180,0)
(44,12,0)
(246,193,0)
(208,40,0)
(36,273,0)
(191,173,0)
(92,193,0)
(19,242,0)
(28,251,0)
(167,99,0)
(229,193,0)
(260,258,0)
(172,82,0)
(152,241,0)
(28,44,0)
(66,107,0)
(119,140,0)
(106,12,0)
(158,10,0)
(110,21,0)
(87,201,0)
(85,147,0)
(48,15,0)
(67,34,0)
(74,54,0)
(107,62,0)
(115,62,0)
(32,112,0)
(154,78,0)
(205,227,0)
(53,271,0)
(218,259,0)
(171,140,0)
(116,188,0)
(162,48,0)
(211,196,0)
(128,158,0)
(292,278,0)
(82,193,0)
(273,80,0)
(14,209,0)
(33,140,0)
(5,295,0)
(130,215,0)
(133,21,0)
(124,146,0)
(262,239,0)
(103,245,0)
(122,68,0)
(179,273,0)
(11,113,0)
(127,238,0)
(84,226,0)
(204,271,0)
(119,9,0)
(136,277,0)
(295,146,0)
(117,292,0)
(260,226,0)
(274,145,0)
(96,94,0)
(19,82,0)
(258,193,0)
(132,19,0)
(177,294,0)
(94,259,0)
(260,74,0)
(172,209,0)
(98,226,0)
(148,10,0)
(78,193,0)
(158,234,0)
(63,146,0)
(22,165,0)
(148,165,0)
(131,39,0)
(8,67,0)
(189,71,0)
(163,12,0)
(215,62,0)
(70,206,0)
(209,271,0)
(202,255,0)
(3,135,0)
(88,146,0)
(194,271,0)
(195,97,0)
(253,44,0)
(223,82,0)
(215,44,0)
(98,44,0)
(26,63,0)
(2,154,0)
(227,288,0)
(6,183,0)
(165,148,0)
(231,97,0)
(37,146,0)
(297,271,0)
(255,149,0)
(129,238,0)
(164,183,0)
(213,150,0)
(168,125,0)
(90,102,0)
(98,249,0)
(25,22,0)
(84,10,0)
(172,293,0)
(52,37,0)
(148,18,0)
(84,258,0)
(241,146,0)
(93,25,0)
(54,74,0)
(17,121,0)
(227,74,0)
(298,261,0)
(79,12,0)
(199,295,0)
(233,193,0)
(13,17,0)
(184,271,0)
(252,37,0)
(284,98,0)
(105,278,0)
(279,6,0)
(188,196,0)
(71,44,0)
(68,146,0)
(10,196,0)
(38,12,0)
(22,25,0)
(46,15,0)
(210,84,0)
(290,9,0)
(200,158,0)
(91,19,0)
(56,156,0)
(149,255,0)
(217,214,0)
(216,98,0)
(113,258,0)
(150,67,0)
(10,148,0)
(151,102,0)
(174,196,0)
(112,108,0)
(157,249,0)
(30,261,0)
(170,226,0)
(156,88,0)
(226,186,0)
(288,113,0)
(168,40,0)
(263,271,0)
(138,292,0)
(146,193,0)
(269,149,0)
(251,28,0)
(74,102,0)
(23,110,0)
(20,22,0)
(120,270,0)
(61,242,0)
(6,24,0)
(35,294,0)
(99,193,0)
(258,147,0)
(29,193,0)
(261,234,0)
(118,278,0)
(142,223,0)
(221,273,0)
(125,168,0)
(34,67,0)
(55,260,0)
(175,234,0)
(84,74,0)
(44,28,0)
(111,141,0)
(255,88,0)
(215,130,0)
(254,215,0)
(236,54,0)
(63,64,0)
(41,271,0)
(287,49,0)
(223,209,0)
(178,229,0)
(176,207,0)
(123,82,0)
(58,161,0)
(214,271,0)
(42,214,0)
(249,239,0)
(243,110,0)
(185,223,0)
(232,253,0)
(225,72,0)
(183,89,0)
(146,68,0)
(67,150,0)
(273,221,0)
(134,84,0)
(108,112,0)
(165,22,0)
(228,193,0)
(238,80,0)
(16,214,0)
(203,154,0)
(110,44,0)
(63,214,0)
(296,29,0)
(98,74,0)
(144,271,0)
(120,286,0)
(34,28,0)
(173,80,0)
(45,39,0)
(285,271,0)
(229,201,0)
(82,295,0)
(145,229,0)
(100,271,0)
(196,126,0)
(72,31,0)
(158,183,0)
(1,113,0)
(43,99,0)
(166,119,0)
(173,221,0)
(294,168,0)
(101,161,0)
(80,193,0)
(139,192,0)
(264,184,0)
(73,109,0)
(80,19,0)
(280,42,0)
(88,156,0)
(24,6,0)
(230,227,0)
(6,278,0)
(276,62,0)
(130,212,0)
(18,148,0)
(197,88,0)
(250,74,0)
(295,82,0)
(237,253,0)
(147,258,0)
(75,42,0)
(21,244,0)
(267,193,0)
(57,125,0)
(288,227,0)
(169,295,0)
(221,173,0)
(159,271,0)
(88,289,0)
(235,46,0)
(7,258,0)
(95,102,0)
(155,15,0)
(219,19,0)
(78,143,0)
(77,271,0)
(40,168,0)
(135,10,0)
(109,278,0)
(160,193,0)
(182,6,0)
(27,48,0)
(143,78,0)
(0,209,0)
(238,141,0)
(47,68,0)
(19,80,0)
(6,10,0)
(248,196,0)
(84,94,0)
(242,19,0)
(113,74,0)
(108,137,0)
(39,62,0)
(42,146,0)
(198,184,0)
(51,44,0)
(256,80,0)
(12,153,0)
(97,29,0)
(161,82,0)
(222,143,0)
(188,10,0)
(24,81,0)
(86,242,0)
(275,196,0)
(114,266,0)
(282,173,0)
(98,258,0)
(206,234,0)
(113,288,0)
(268,289,0)
(289,88,0)
(283,196,0)
(28,34,0)
(141,193,0)
(255,202,0)
(270,120,0)
(104,12,0)
(226,257,1)
(37,252,1)
(76,226,1)
(175,135,1)
(135,59,1)
(118,94,1)
(27,15,1)
(96,84,1)
(98,284,1)
(229,145,1)
(58,101,1)
(35,209,1)
(42,214,1)
(150,213,1)
(255,202,1)
(235,21,1)
(205,113,1)
(142,185,1)
(296,97,1)
(291,258,1)
(276,115,1)
(4,55,1)
(223,209,1)
(84,134,1)
(91,242,1)
(16,184,1)
(113,1,1)
(209,0,1)
(288,227,1)
(294,177,1)
(188,10,1)
(168,125,1)
(260,226,1)
(272,47,1)
(75,287,1)
(197,78,1)
(260,4,1)
(264,198,1)
(232,237,1)
(61,86,1)
(221,273,1)
(37,146,1)
(75,176,1)
(225,288,1)
(88,146,1)
(243,48,1)
(40,168,1)
(110,23,1)
(242,61,1)
(273,36,1)
(71,189,1)
(14,214,1)
(98,226,1)
(114,221,1)
(154,203,1)
(127,221,1)
(183,164,1)
(75,224,1)
(214,217,1)
(227,230,1)
(42,146,1)
(11,48,1)
(78,143,1)
(35,291,1)
(17,13,1)
(42,280,1)
(110,44,1)
(6,278,1)
(192,37,1)
(155,120,1)
(258,147,1)
(6,10,1)
(134,210,1)
(119,140,1)
(237,44,1)
(50,223,1)
(88,255,1)
(138,278,1)
(292,278,1)
(65,188,1)
(247,76,1)
(107,62,1)
(278,105,1)
(224,192,1)
(122,124,1)
(84,258,1)
(141,111,1)
(75,103,1)
(83,39,1)
(94,96,1)
(8,51,1)
(10,148,1)
(40,208,1)
(173,80,1)
(171,29,1)
(130,215,1)
(19,82,1)
(201,87,1)
(98,74,1)
(43,40,1)
(241,146,1)
(46,235,1)
(189,39,1)
(252,52,1)
(158,128,1)
(66,130,1)
(166,140,1)
(229,201,1)
(177,35,1)
(261,30,1)
(192,139,1)
(25,93,1)
(109,73,1)
(128,200,1)
(152,190,1)
(84,10,1)
(48,15,1)
(99,167,1)
(222,154,1)
(123,192,1)
(15,187,1)
(191,80,1)
(280,75,1)
(45,131,1)
(289,268,1)
(131,62,1)
(6,279,1)
(39,45,1)
(26,42,1)
(101,82,1)
(221,173,1)
(48,162,1)
(113,226,1)
(135,10,1)
(138,109,1)
(139,37,1)
(268,88,1)
(33,171,1)
(98,258,1)
(108,112,1)
(119,166,1)
(28,251,1)
(156,56,1)
(273,80,1)
(63,26,1)
(80,19,1)
(213,8,1)
(279,182,1)
(84,74,1)
(82,295,1)
(260,74,1)
(116,17,1)
(112,32,1)
(0,14,1)
(155,253,1)
(131,107,1)
(88,156,1)
(72,225,1)
(54,236,1)
(188,116,1)
(57,294,1)
(55,261,1)
(199,123,1)
(93,20,1)
(238,129,1)
(147,85,1)
(140,33,1)
(146,68,1)
(1,11,1)
(181,240,1)
(24,6,1)
(216,288,1)
(22,25,1)
(230,205,1)
(71,44,1)
(34,67,1)
(6,183,1)
(164,158,1)
(185,63,1)
(253,44,1)
(109,278,1)
(29,296,1)
(217,16,1)
(67,150,1)
(190,146,1)
(32,135,1)
(178,201,1)
(143,222,1)
(125,57,1)
(274,178,1)
(169,199,1)
(215,62,1)
(21,133,1)
(158,10,1)
(28,34,1)
(281,175,1)
(179,173,1)
(70,183,1)
(287,40,1)
(73,24,1)
(238,80,1)
(74,54,1)
(215,44,1)
(158,234,1)
(46,15,1)
(161,58,1)
(111,238,1)
(210,260,1)
(165,22,1)
(47,122,1)
(254,83,1)
(63,214,1)
(75,114,1)
(65,71,1)
(173,282,1)
(19,91,1)
(145,274,1)
(288,113,1)
(39,62,1)
(256,161,1)
(76,181,1)
(231,229,1)
(195,231,1)
(249,157,1)
(132,219,1)
(172,209,1)
(284,216,1)
(168,294,1)
(200,261,1)
(13,260,1)
(98,44,1)
(227,226,1)
(23,243,1)
(176,161,1)
(75,291,1)
(105,118,1)
(257,170,1)
(87,241,1)
(170,60,1)
(187,155,1)
(63,146,1)
(60,74,1)
(241,152,1)
(97,195,1)
(261,234,1)
(236,250,1)
(27,46,1)
(175,108,1)
(270,69,1)
(107,66,1)
(219,256,1)
(5,169,1)
(290,119,1)
(298,234,1)
(36,179,1)
(289,88,1)
(115,249,1)
(185,42,1)
(129,127,1)
(62,276,1)
(161,82,1)
(157,98,1)
(198,60,1)
(215,21,1)
(85,7,1)
(113,74,1)
(223,142,1)
(136,241,1)
(172,50,1)
(133,110,1)
(282,191,1)
(110,15,1)
(223,82,1)
(148,165,1)
(172,82,1)
(44,28,1)
(30,298,1)
(52,289,1)
(203,2,1)
(120,270,1)
(240,223,1)
(184,264,1)
(59,3,1)
(260,258,1)
(103,289,1)
(86,132,1)
(298,206,1)
(234,281,1)
(117,138,1)
(292,117,1)
(295,5,1)
(149,269,1)
(84,226,1)
(7,141,1)
(9,290,1)
(269,197,1)
(167,43,1)
(182,292,1)
(76,240,1)
(124,99,1)
(116,292,1)
(56,255,1)
(162,27,1)
(68,272,1)
(253,232,1)
(51,76,1)
(240,172,1)
(3,10,1)
(215,254,1)
(295,146,1)
(189,72,1)
(20,247,1)
(2,9,1)
(75,136,1)
(206,70,1)
(113,258,1)
(69,253,1)
(19,242,1)
(227,258,1)
(148,18,1)
(255,149,1)
(227,74,1)
(208,168,1)
(206,234,1)
(30,76,2)
(50,223,2)
(59,76,2)
(206,261,2)
(6,278,2)
(238,221,2)
(224,192,2)
(150,76,2)
(134,260,2)
(288,227,2)
(63,42,2)
(101,192,2)
(0,60,2)
(42,146,2)
(94,260,2)
(122,40,2)
(145,241,2)
(177,60,2)
(166,241,2)
(105,260,2)
(161,82,2)
(254,39,2)
(82,295,2)
(255,202,2)
(177,291,2)
(147,221,2)
(84,226,2)
(235,48,2)
(165,76,2)
(176,161,2)
(42,214,2)
(7,221,2)
(140,241,2)
(276,288,2)
(175,76,2)
(36,173,2)
(98,74,2)
(249,288,2)
(14,60,2)
(93,76,2)
(139,289,2)
(51,76,2)
(158,261,2)
(253,44,2)
(91,161,2)
(83,39,2)
(84,258,2)
(88,255,2)
(273,80,2)
(298,76,2)
(158,234,2)
(213,76,2)
(24,6,2)
(11,76,2)
(35,60,2)
(108,112,2)
(82,192,2)
(273,173,2)
(34,67,2)
(28,251,2)
(256,161,2)
(208,60,2)
(98,288,2)
(111,221,2)
(152,40,2)
(110,15,2)
(274,241,2)
(261,261,2)
(253,76,2)
(209,60,2)
(131,39,2)
(292,292,2)
(25,76,2)
(278,260,2)
(279,292,2)
(291,221,2)
(39,39,2)
(172,209,2)
(103,289,2)
(157,288,2)
(280,60,2)
(284,288,2)
(190,40,2)
(6,292,2)
(44,76,2)
(68,40,2)
(243,48,2)
(188,76,2)
(214,60,2)
(84,10,2)
(40,168,2)
(189,76,2)
(98,258,2)
(109,292,2)
(200,261,2)
(3,76,2)
(30,261,2)
(229,241,2)
(113,226,2)
(215,44,2)
(84,74,2)
(296,241,2)
(138,292,2)
(75,60,2)
(206,234,2)
(88,156,2)
(269,241,2)
(182,292,2)
(221,161,2)
(203,241,2)
(129,221,2)
(43,40,2)
(9,241,2)
(110,48,2)
(237,76,2)
(135,76,2)
(130,39,2)
(17,260,2)
(115,288,2)
(52,289,2)
(96,260,2)
(215,21,2)
(120,270,2)
(141,221,2)
(294,291,2)
(108,135,2)
(128,261,2)
(67,150,2)
(252,289,2)
(168,125,2)
(110,44,2)
(148,165,2)
(67,76,2)
(71,76,2)
(216,288,2)
(107,62,2)
(138,260,2)
(232,76,2)
(260,258,2)
(221,273,2)
(172,223,2)
(247,76,2)
(27,76,2)
(173,80,2)
(19,82,2)
(63,214,2)
(133,48,2)
(142,60,2)
(143,241,2)
(295,192,2)
(22,76,2)
(46,48,2)
(148,18,2)
(6,10,2)
(260,74,2)
(73,292,2)
(191,161,2)
(35,291,2)
(71,44,2)
(32,135,2)
(215,39,2)
(6,183,2)
(5,192,2)
(208,291,2)
(260,76,2)
(66,39,2)
(37,289,2)
(44,28,2)
(217,60,2)
(87,241,2)
(149,241,2)
(197,241,2)
(179,173,2)
(28,34,2)
(225,288,2)
(16,60,2)
(114,221,2)
(19,161,2)
(1,76,2)
(192,289,2)
(39,62,2)
(183,261,2)
(155,76,2)
(135,10,2)
(164,261,2)
(156,241,2)
(127,221,2)
(112,135,2)
(258,147,2)
(210,260,2)
(215,62,2)
(98,226,2)
(37,146,2)
(80,161,2)
(97,241,2)
(288,113,2)
(292,278,2)
(88,146,2)
(171,241,2)
(119,241,2)
(168,294,2)
(45,288,2)
(230,113,2)
(222,241,2)
(84,260,2)
(125,291,2)
(33,241,2)
(168,60,2)
(74,54,2)
(46,15,2)
(88,241,2)
(169,192,2)
(29,241,2)
(20,76,2)
(109,278,2)
(131,288,2)
(62,288,2)
(199,192,2)
(2,241,2)
(195,241,2)
(10,148,2)
(154,241,2)
(158,10,2)
(136,241,2)
(238,80,2)
(146,40,2)
(231,241,2)
(240,60,2)
(34,76,2)
(227,258,2)
(264,60,2)
(261,76,2)
(22,25,2)
(170,60,2)
(221,173,2)
(48,15,2)
(45,39,2)
(241,146,2)
(21,48,2)
(85,221,2)
(113,76,2)
(234,76,2)
(165,22,2)
(15,76,2)
(227,74,2)
(298,261,2)
(69,253,2)
(255,241,2)
(205,113,2)
(185,60,2)
(272,40,2)
(70,261,2)
(113,258,2)
(8,76,2)
(289,241,2)
(229,145,2)
(261,234,2)
(162,76,2)
(295,146,2)
(198,60,2)
(178,241,2)
(42,60,2)
(86,161,2)
(241,40,2)
(172,82,2)
(255,149,2)
(192,37,2)
(260,226,2)
(242,161,2)
(130,215,2)
(57,291,2)
(63,146,2)
(116,76,2)
(56,241,2)
(48,48,2)
(78,143,2)
(188,10,2)
(294,60,2)
(288,76,2)
(181,240,2)
(229,201,2)
(226,60,2)
(118,260,2)
(40,291,2)
(290,241,2)
(117,292,2)
(39,288,2)
(19,242,2)
(99,40,2)
(281,76,2)
(148,76,2)
(270,253,2)
(124,40,2)
(72,288,2)
(287,40,2)
(80,19,2)
(47,40,2)
(120,253,2)
(78,241,2)
(258,221,2)
(161,192,2)
(184,60,2)
(113,74,2)
(227,226,2)
(119,140,2)
(23,48,2)
(227,113,2)
(10,76,2)
(40,60,2)
(48,76,2)
(201,241,2)
(223,82,2)
(187,76,2)
(223,209,2)
(289,88,2)
(223,60,2)
(167,40,2)
(132,161,2)
(61,161,2)
(257,60,2)
(268,241,2)
(219,161,2)
(173,161,2)
(282,161,2)
(162,48,2)
(117,260,2)
(123,192,2)
(26,42,2)
(27,48,2)
(125,60,2)
(292,260,2)
(98,44,2)
(168,291,2)
(55,76,2)
(28,76,2)
(4,76,2)
(146,68,2)
(24,292,2)
(58,192,2)
(57,60,2)
(107,39,2)
(13,260,2)
-----------------------------------
(0,INVALID_SOCKET)
(1,0)
(2,service)
(3,buffer)
(4,0)
(5,NULL)
(6,buffer[i])
(7,data)
(8,10)
(9,service.sin_addr.s_addr = INADDR_ANY)
(10,* buffer = (int *)
(11,data)
(12,)
(13,"ERROR: Array index is negative.")
(14,acceptSocket)
(15,i = 0)
(16,listenSocket)
(17,printLine("ERROR: Array index is negative.")
(18,int *)
(19,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(20,10)
(21,buffer[i] = 0)
(22,10 * sizeof(int)
(23,i)
(24,printIntLine(buffer[i])
(25,sizeof(int)
(26,listenSocket)
(27,i)
(28,(int *)
(29,service.sin_family = AF_INET)
(30,10)
(31,)
(32,1)
(33,sin_addr)
(34,malloc(10 * sizeof(int)
(35,2)
(36,0)
(37,listen(listenSocket, LISTEN_BACKLOG)
(38,if (buffer == NULL)
(39,i < 10)
(40,WSAStartup(MAKEWORD(2,2)
(41,wsaDataInit)
(42,listenSocket != INVALID_SOCKET)
(43,wsaDataInit)
(44,* buffer = (int *)
(45,10)
(46,i++)
(47,SOCK_STREAM)
(48,i < 10)
(49,)
(50,acceptSocket)
(51,buffer)
(52,listenSocket)
(53,service)
(54,-1)
(55,data)
(56,service)
(57,wsaData)
(58,SOCKET_ERROR)
(59,NULL)
(60,globalReturnsTrueOrFalse()
(61,1)
(62,i = 0)
(63,CLOSE_SOCKET(listenSocket)
(64,)
(65,RET)
(66,i)
(67,10 * sizeof(int)
(68,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(69,1)
(70,i)
(71,free(buffer)
(72,printLine("ERROR: Array index is out-of-bounds")
(73,i)
(74,data = -1)
(75,listenSocket)
(76,globalReturnsTrueOrFalse()
(77,if (wsaDataInit)
(78,service.sin_port = htons(TCP_PORT)
(79,buffer)
(80,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(81,)
(82,acceptSocket = accept(listenSocket, NULL, NULL)
(83,buffer)
(84,buffer[data])
(85,inputBuffer)
(86,CHAR_ARRAY_SIZE)
(87,service)
(88,bind(listenSocket, (struct sockaddr*)
(89,)
(90,data)
(91,0)
(92,if (bind(listenSocket, (struct sockaddr*)
(93,int)
(94,buffer[data] = 1)
(95,if(globalReturnsTrueOrFalse()
(96,1)
(97,service.sin_family)
(98,buffer[data])
(99,wsaDataInit = 1)
(100,if (listenSocket != INVALID_SOCKET)
(101,acceptSocket)
(102,)
(103,break;)
(104,if (data >= 0 && data < (10)
(105,0)
(106,i)
(107,i++)
(108,exit(-1)
(109,i++)
(110,buffer[i])
(111,\\\'\\\\0\\\')
(112,-1)
(113,data >= 0)
(114,break;)
(115,i)
(116,buffer)
(117,10)
(118,i)
(119,service.sin_addr.s_addr)
(120,exit(-1)
(121,)
(122,AF_INET)
(123,acceptSocket)
(124,listenSocket)
(125,&wsaData)
(126,)
(127,inputBuffer)
(128,i)
(129,recvResult)
(130,printIntLine(buffer[i])
(131,i)
(132,inputBuffer)
(133,0)
(134,data)
(135,buffer == NULL)
(136,break;)
(137,)
(138,i)
(139,SOCKET_ERROR)
(140,service.sin_addr)
(141,inputBuffer[recvResult] = \\\'\\\\0\\\')
(142,INVALID_SOCKET)
(143,htons(TCP_PORT)
(144,recvResult)
(145,sizeof(service)
(146,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(147,atoi(inputBuffer)
(148,(int *)
(149,&service)
(150,sizeof(int)
(151,if(globalReturnsTrueOrFalse()
(152,INVALID_SOCKET)
(153,)
(154,service.sin_port)
(155,i)
(156,sizeof(service)
(157,1)
(158,buffer[i])
(159,listenSocket)
(160,if (recvResult == SOCKET_ERROR || recvResult == 0)
(161,acceptSocket == SOCKET_ERROR)
(162,10)
(163,for (i = 0; i < 10; i++)
(164,0)
(165,malloc(10 * sizeof(int)
(166,s_addr)
(167,1)
(168,WSAStartup(MAKEWORD(2,2)
(169,NULL)
(170,data)
(171,service)
(172,CLOSE_SOCKET(acceptSocket)
(173,recvResult == SOCKET_ERROR)
(174,if (buffer == NULL)
(175,i)
(176,break;)
(177,2)
(178,0)
(179,recvResult)
(180,)
(181,WSACleanup()
(182,buffer)
(183,buffer[i] = 0)
(184,wsaDataInit = 0)
(185,acceptSocket)
(186,)
(187,0)
(188,free(buffer)
(189,buffer)
(190,listenSocket)
(191,recvResult)
(192,listen(listenSocket, LISTEN_BACKLOG)
(193,)
(194,wsaData)
(195,sin_family)
(196,)
(197,listenSocket)
(198,wsaDataInit)
(199,listenSocket)
(200,buffer)
(201,&service)
(202,struct sockaddr*)
(203,sin_port)
(204,do)
(205,data)
(206,i++)
(207,)
(208,NO_ERROR)
(209,acceptSocket = INVALID_SOCKET)
(210,buffer)
(211,for (i = 0; i < 10; i++)
(212,)
(213,int)
(214,listenSocket = INVALID_SOCKET)
(215,buffer[i])
(216,buffer)
(217,INVALID_SOCKET)
(218,for(i = 0; i < 10; i++)
(219,acceptSocket)
(220,)
(221,recvResult == SOCKET_ERROR || recvResult == 0)
(222,TCP_PORT)
(223,acceptSocket != INVALID_SOCKET)
(224,break;)
(225,"ERROR: Array index is out-of-bounds")
(226,data = 7)
(227,data < (10)
(228,if (WSAStartup(MAKEWORD(2,2)
(229,memset(&service, 0, sizeof(service)
(230,10)
(231,service)
(232,NULL)
(233,if (listen(listenSocket, LISTEN_BACKLOG)
(234,i = 0)
(235,i)
(236,1)
(237,buffer)
(238,inputBuffer[recvResult])
(239,)
(240,wsaDataInit)
(241,listenSocket == INVALID_SOCKET)
(242,CHAR_ARRAY_SIZE - 1)
(243,buffer)
(244,)
(245,)
(246,if (acceptSocket == SOCKET_ERROR)
(247,buffer)
(248,buffer)
(249,buffer[data] = 1)
(250,data)
(251,int *)
(252,LISTEN_BACKLOG)
(253,buffer == NULL)
(254,i)
(255,(struct sockaddr*)
(256,recvResult)
(257,7)
(258,data = atoi(inputBuffer)
(259,)
(260,data >= 0)
(261,i < 10)
(262,for(i = 0; i < 10; i++)
(263,if (acceptSocket != INVALID_SOCKET)
(264,0)
(265,)
(266,)
(267,if (listenSocket == INVALID_SOCKET)
(268,SOCKET_ERROR)
(269,service)
(270,-1)
(271,)
(272,IPPROTO_TCP)
(273,recvResult == 0)
(274,service)
(275,if (data >= 0)
(276,0)
(277,)
(278,i = 0)
(279,i)
(280,INVALID_SOCKET)
(281,0)
(282,SOCKET_ERROR)
(283,i)
(284,data)
(285,inputBuffer)
(286,)
(287,break;)
(288,data >= 0 && data < (10)
(289,bind(listenSocket, (struct sockaddr*)
(290,INADDR_ANY)
(291,0)
(292,i < 10)
(293,)
(294,MAKEWORD(2,2)
(295,accept(listenSocket, NULL, NULL)
(296,AF_INET)
(297,acceptSocket)
(298,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^