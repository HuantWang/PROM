-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    {
        wchar_t * data = *dataPtr1;
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t dest[50] = L"";
            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
            memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
            dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
39,40
39,41
41,42
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
113,114
113,115
113,116
113,117
113,118
114,115
115,116
115,117
117,118
117,119
117,120
119,120
121,122
123,124
124,125
124,126
124,127
124,128
125,126
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
138,140
141,142
142,143
142,144
143,144
143,145
144,145
146,147
146,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,40,42,45,47,50,51,55,57,62,64,68,70,71,75,79,81,82,84,85,90,92,93,94,99,101,105,107,108,112,116,118,120,122,126,128,130,134,136,139,140,145,147,148,149,153,155,159,161
-----computeFrom-----
35,36
35,37
46,47
46,48
53,54
53,55
83,84
83,85
87,88
87,89
91,92
91,93
96,97
96,98
131,132
131,133
142,143
142,144
146,147
146,148
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            memcpy(dest, data, wcslen(data)*sizeof(wchar_t));            dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            memcpy(dest, data, wcslen(data)*sizeof(wchar_t));            dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            memcpy(dest, data, wcslen(data)*sizeof(wchar_t));            dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t dest[50] = L"";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */            memcpy(dest, data, wcslen(data)*sizeof(wchar_t));            dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
memcpy(dest, data, wcslen(data)*sizeof(wchar_t))
memcpy
memcpy
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,46,0)
(4,51,0)
(43,47,0)
(14,8,0)
(51,20,0)
(32,43,0)
(52,21,0)
(44,61,0)
(44,58,0)
(55,13,0)
(57,21,0)
(54,3,0)
(47,43,0)
(2,30,0)
(57,30,0)
(42,46,0)
(28,58,0)
(48,30,0)
(25,46,0)
(31,20,0)
(39,53,0)
(20,31,0)
(41,46,0)
(30,42,0)
(10,32,0)
(5,58,0)
(38,43,0)
(1,20,0)
(12,8,0)
(58,5,0)
(5,46,0)
(13,35,0)
(35,13,0)
(60,13,0)
(53,22,0)
(24,3,0)
(34,23,0)
(30,17,0)
(20,1,0)
(33,1,0)
(21,42,0)
(7,57,0)
(11,61,0)
(22,40,0)
(26,17,0)
(49,47,0)
(55,8,0)
(43,46,0)
(18,5,0)
(17,24,0)
(23,61,0)
(37,59,0)
(59,5,0)
(32,55,0)
(58,28,0)
(35,43,0)
(15,1,0)
(50,21,0)
(27,59,0)
(1,30,0)
(20,51,0)
(1,21,0)
(19,24,0)
(22,53,0)
(17,30,0)
(9,46,0)
(0,35,0)
(61,23,0)
(13,8,0)
(6,46,0)
(16,31,0)
(29,55,0)
(36,48,0)
(3,24,0)
(56,42,0)
(48,21,0)
(58,44,0)
(8,46,0)
(31,30,0)
(61,44,0)
(13,35,1)
(29,32,1)
(52,30,1)
(0,60,1)
(61,23,1)
(5,58,1)
(47,49,1)
(57,30,1)
(60,59,1)
(23,34,1)
(59,5,1)
(20,31,1)
(49,38,1)
(50,1,1)
(15,52,1)
(24,3,1)
(55,13,1)
(19,43,1)
(58,44,1)
(4,31,1)
(31,16,1)
(57,7,1)
(45,48,1)
(54,19,1)
(33,15,1)
(18,24,1)
(36,57,1)
(35,43,1)
(59,37,1)
(16,33,1)
(11,18,1)
(2,55,1)
(7,50,1)
(1,20,1)
(60,22,1)
(3,54,1)
(53,39,1)
(39,59,1)
(20,51,1)
(30,17,1)
(37,27,1)
(27,5,1)
(31,30,1)
(43,47,1)
(44,61,1)
(32,10,1)
(55,29,1)
(34,11,1)
(17,24,1)
(17,26,1)
(48,36,1)
(32,43,1)
(58,28,1)
(14,13,1)
(51,4,1)
(48,30,1)
(10,14,1)
(26,2,1)
(22,53,1)
(1,30,1)
(35,0,1)
(22,59,2)
(20,51,2)
(43,47,2)
(61,23,2)
(32,43,2)
(1,30,2)
(24,3,2)
(57,30,2)
(5,58,2)
(30,17,2)
(35,43,2)
(59,5,2)
(31,30,2)
(22,53,2)
(1,20,2)
(13,35,2)
(39,59,2)
(58,44,2)
(53,59,2)
(17,24,2)
(48,30,2)
(58,28,2)
(20,31,2)
(55,13,2)
(44,61,2)
-----------------------------------
(0,dataPtr1)
(1,memcpy(dest, data, wcslen(data)
(2,data)
(3,&data)
(4,wchar_t)
(5,data = (wchar_t *)
(6,data)
(7,data)
(8,)
(9,dataPtr2)
(10,dataPtr1)
(11,100)
(12,data)
(13,* data = *dataPtr1)
(14,\\\'\\\\0\\\')
(15,dest)
(16,data)
(17,*dataPtr2)
(18,data)
(19,dataPtr2)
(20,wcslen(data)
(21,)
(22,exit(-1)
(23,sizeof(wchar_t)
(24,* *dataPtr2 = &data)
(25,dataPtr1)
(26,dataPtr2)
(27,data)
(28,wchar_t *)
(29,data)
(30,* data = *dataPtr2)
(31,wcslen(data)
(32,*dataPtr1)
(33,data)
(34,wchar_t)
(35,*dataPtr1)
(36,data)
(37,NULL)
(38,dataPtr1)
(39,1)
(40,)
(41,if (data == NULL)
(42,)
(43,* *dataPtr1 = &data)
(44,malloc(100*sizeof(wchar_t)
(45,RET)
(46,)
(47,&data)
(48,free(data)
(49,data)
(50,\\\'\\\\0\\\')
(51,sizeof(wchar_t)
(52,"")
(53,-1)
(54,data)
(55,*dataPtr1 = data)
(56,data)
(57,printWLine(data)
(58,(wchar_t *)
(59,data == NULL)
(60,data)
(61,100*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^