-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strncat(data, source, 100);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,97,101,103,107,109
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncat(data, source, 100);
strncat(data, source, 100)
strncat
strncat
data
data
source
source
100
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(49,57,0)
(57,56,0)
(26,22,0)
(12,17,0)
(58,30,0)
(48,17,0)
(11,46,0)
(32,56,0)
(4,49,0)
(3,11,0)
(19,15,0)
(56,34,0)
(11,17,0)
(13,53,0)
(30,32,0)
(24,52,0)
(42,46,0)
(48,57,0)
(37,11,0)
(16,42,0)
(30,58,0)
(2,18,0)
(55,46,0)
(52,53,0)
(31,54,0)
(45,20,0)
(44,49,0)
(27,14,0)
(46,20,0)
(41,11,0)
(51,54,0)
(22,43,0)
(35,57,0)
(6,46,0)
(8,20,0)
(18,15,0)
(57,15,0)
(33,30,0)
(35,17,0)
(39,53,0)
(48,46,0)
(11,57,0)
(35,46,0)
(32,30,0)
(29,6,0)
(1,17,0)
(6,29,0)
(38,6,0)
(5,57,0)
(56,57,0)
(43,47,0)
(14,57,0)
(49,18,0)
(40,14,0)
(43,22,0)
(52,42,0)
(34,56,0)
(25,29,0)
(0,58,0)
(10,29,0)
(56,32,0)
(53,52,0)
(7,48,0)
(9,6,0)
(17,20,0)
(36,35,0)
(39,13,1)
(43,22,1)
(49,57,1)
(27,40,1)
(12,1,1)
(53,39,1)
(38,54,1)
(6,29,1)
(54,51,1)
(37,41,1)
(32,30,1)
(52,53,1)
(14,57,1)
(0,33,1)
(10,9,1)
(22,26,1)
(26,14,1)
(36,48,1)
(29,25,1)
(51,31,1)
(2,49,1)
(11,17,1)
(48,57,1)
(13,24,1)
(48,17,1)
(30,58,1)
(23,35,1)
(4,43,1)
(3,37,1)
(42,16,1)
(18,2,1)
(14,27,1)
(40,57,1)
(31,17,1)
(58,0,1)
(48,7,1)
(9,38,1)
(17,12,1)
(7,11,1)
(33,5,1)
(11,57,1)
(35,36,1)
(44,4,1)
(11,3,1)
(35,17,1)
(4,14,1)
(16,52,1)
(49,44,1)
(35,57,1)
(56,32,1)
(56,34,1)
(25,10,1)
(57,56,1)
(24,6,1)
(5,54,1)
(41,42,1)
(38,18,1)
(0,54,2)
(56,54,2)
(30,58,2)
(52,53,2)
(11,17,2)
(43,14,2)
(5,54,2)
(58,54,2)
(2,54,2)
(40,54,2)
(57,54,2)
(49,54,2)
(56,34,2)
(18,54,2)
(35,17,2)
(11,57,2)
(26,14,2)
(33,54,2)
(6,29,2)
(14,57,2)
(48,57,2)
(22,14,2)
(30,54,2)
(32,30,2)
(57,56,2)
(4,54,2)
(48,17,2)
(44,54,2)
(43,22,2)
(27,54,2)
(35,57,2)
(56,32,2)
(49,57,2)
(32,54,2)
(14,54,2)
-----------------------------------
(0,char)
(1,data)
(2,'\\\\0')
(3,100)
(4,data)
(5,data)
(6,memset(source, 'C', 100-1)
(7,data)
(8,if(globalFive==5)
(9,'C')
(10,100)
(11,strncat(data, source, 100)
(12,NULL)
(13,100)
(14,data == NULL)
(15,)
(16,'\\\\0')
(17,data = NULL)
(18,data[0] = \'\\\\0\')
(19,if (data == NULL)
(20,)
(21,\'\\\\0\')
(22,-1)
(23,RET)
(24,source)
(25,1)
(26,1)
(27,NULL)
(28,data[0] = '\\\\0')
(29,100-1)
(30,50*sizeof(char)
(31,globalFive)
(32,malloc(50*sizeof(char)
(33,50)
(34,char *)
(35,free(data)
(36,data)
(37,source)
(38,source)
(39,1)
(40,data)
(41,data)
(42,source[100-1] = '\\\\0')
(43,exit(-1)
(44,0)
(45,data)
(46,)
(47,)
(48,printLine(data)
(49,data[0])
(50,memset(source, \'C\', 100-1)
(51,5)
(52,source[100-1])
(53,100-1)
(54,globalFive==5)
(55,source)
(56,(char *)
(57,data = (char *)
(58,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^