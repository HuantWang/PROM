-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
55,61
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
94,96
95,96
98,99
99,100
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,82,84,89,90,93,96,97,100,106,108,111,113,117,119,123,125
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
77,78
77,79
87,88
87,89
91,92
91,93
94,95
94,96
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(60,24,0)
(52,13,0)
(9,38,0)
(22,36,0)
(7,48,0)
(47,20,0)
(59,7,0)
(46,32,0)
(39,27,0)
(58,32,0)
(37,7,0)
(3,33,0)
(49,37,0)
(12,19,0)
(42,30,0)
(48,16,0)
(23,18,0)
(0,44,0)
(35,11,0)
(53,33,0)
(44,20,0)
(54,51,0)
(17,14,0)
(15,30,0)
(61,7,0)
(36,13,0)
(61,44,0)
(17,30,0)
(12,18,0)
(21,14,0)
(32,27,0)
(17,58,0)
(1,36,0)
(24,14,0)
(59,30,0)
(30,20,0)
(29,7,0)
(32,14,0)
(61,30,0)
(17,7,0)
(51,40,0)
(7,11,0)
(55,40,0)
(18,12,0)
(41,61,0)
(4,14,0)
(10,17,0)
(25,59,0)
(27,44,0)
(43,37,0)
(36,53,0)
(56,27,0)
(53,44,0)
(57,44,0)
(8,32,0)
(13,14,0)
(13,36,0)
(2,38,0)
(59,44,0)
(31,17,0)
(28,44,0)
(33,27,0)
(51,16,0)
(45,44,0)
(32,58,0)
(40,51,0)
(50,53,0)
(58,26,0)
(48,6,0)
(6,48,0)
(48,7,0)
(16,51,0)
(34,20,0)
(16,48,0)
(33,53,0)
(36,22,1)
(61,7,1)
(24,60,1)
(12,18,1)
(55,54,1)
(56,38,1)
(41,59,1)
(61,41,1)
(4,21,1)
(17,10,1)
(50,27,1)
(2,30,1)
(37,7,1)
(25,13,1)
(22,1,1)
(8,46,1)
(37,43,1)
(60,58,1)
(9,2,1)
(21,53,1)
(58,32,1)
(31,13,1)
(17,7,1)
(32,8,1)
(32,27,1)
(15,42,1)
(46,17,1)
(52,14,1)
(1,52,1)
(40,55,1)
(27,39,1)
(29,38,1)
(18,23,1)
(49,7,1)
(16,51,1)
(39,56,1)
(48,6,1)
(52,24,1)
(59,30,1)
(13,36,1)
(43,49,1)
(33,3,1)
(38,9,1)
(17,30,1)
(51,40,1)
(7,48,1)
(10,31,1)
(24,14,1)
(56,37,1)
(23,37,1)
(32,14,1)
(14,4,1)
(59,25,1)
(30,15,1)
(53,33,1)
(3,50,1)
(36,53,1)
(17,14,1)
(61,30,1)
(59,7,1)
(13,14,1)
(33,27,1)
(5,61,1)
(48,16,1)
(56,12,1)
(54,29,1)
(32,14,2)
(31,13,2)
(24,13,2)
(48,6,2)
(54,38,2)
(46,13,2)
(43,38,2)
(17,13,2)
(60,13,2)
(53,33,2)
(13,36,2)
(1,13,2)
(48,16,2)
(51,40,2)
(61,30,2)
(36,53,2)
(12,37,2)
(52,13,2)
(32,27,2)
(29,38,2)
(18,37,2)
(51,38,2)
(59,30,2)
(58,32,2)
(17,30,2)
(16,51,2)
(13,14,2)
(7,38,2)
(12,18,2)
(37,7,2)
(24,14,2)
(13,13,2)
(32,13,2)
(10,13,2)
(58,13,2)
(8,13,2)
(55,38,2)
(59,7,2)
(61,7,2)
(40,38,2)
(17,7,2)
(7,48,2)
(16,38,2)
(37,38,2)
(33,27,2)
(48,38,2)
(49,38,2)
(22,13,2)
(17,14,2)
(23,37,2)
(36,13,2)
-----------------------------------
(0,sourceLen)
(1,sourceLen)
(2,globalFive)
(3,source)
(4,0)
(5,RET)
(6,wchar_t *)
(7,data = (wchar_t *)
(8,i)
(9,5)
(10,i)
(11,)
(12,exit(-1)
(13,i < sourceLen + 1)
(14,i = 0)
(15,NULL)
(16,malloc(10*sizeof(wchar_t)
(17,data[i])
(18,-1)
(19,)
(20,)
(21,i)
(22,1)
(23,1)
(24,i++)
(25,data)
(26,)
(27,source[10+1] = SRC_STRING)
(28,source)
(29,data)
(30,data = NULL)
(31,data)
(32,source[i])
(33,wcslen(source)
(34,if(globalFive==5)
(35,if (data == NULL)
(36,sourceLen + 1)
(37,data == NULL)
(38,globalFive==5)
(39,SRC_STRING)
(40,sizeof(wchar_t)
(41,data)
(42,data)
(43,NULL)
(44,)
(45,for (i = 0; i < sourceLen + 1; i++)
(46,source)
(47,data)
(48,(wchar_t *)
(49,data)
(50,sourceLen)
(51,10*sizeof(wchar_t)
(52,i)
(53,sourceLen = wcslen(source)
(54,10)
(55,wchar_t)
(56,source)
(57,i)
(58,data[i] = source[i])
(59,printWLine(data)
(60,i)
(61,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^