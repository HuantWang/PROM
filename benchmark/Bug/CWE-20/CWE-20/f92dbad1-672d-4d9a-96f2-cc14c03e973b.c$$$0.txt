-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(64,9,0)
(15,17,0)
(26,5,0)
(10,16,0)
(5,14,0)
(48,32,0)
(9,19,0)
(8,49,0)
(12,9,0)
(37,18,0)
(2,14,0)
(14,63,0)
(13,29,0)
(63,14,0)
(7,41,0)
(59,17,0)
(27,19,0)
(23,17,0)
(35,13,0)
(34,16,0)
(60,5,0)
(40,13,0)
(62,26,0)
(36,0,0)
(26,37,0)
(37,26,0)
(50,43,0)
(26,49,0)
(22,56,0)
(44,17,0)
(14,5,0)
(39,60,0)
(24,7,0)
(61,16,0)
(1,45,0)
(7,24,0)
(45,49,0)
(19,52,0)
(56,5,0)
(54,46,0)
(11,38,0)
(4,29,0)
(20,53,0)
(5,17,0)
(14,2,0)
(46,16,0)
(9,16,0)
(66,38,0)
(58,0,0)
(0,58,0)
(2,0,0)
(57,60,0)
(9,5,0)
(0,2,0)
(38,49,0)
(55,46,0)
(51,5,0)
(30,58,0)
(13,33,0)
(21,24,0)
(56,17,0)
(47,49,0)
(28,26,0)
(43,33,0)
(6,17,0)
(17,65,0)
(26,19,0)
(31,43,0)
(29,32,0)
(42,61,0)
(53,25,0)
(13,5,0)
(61,16,1)
(50,46,1)
(54,61,1)
(45,1,1)
(43,31,1)
(54,16,1)
(47,29,1)
(16,34,1)
(13,35,1)
(37,26,1)
(30,36,1)
(9,64,1)
(40,43,1)
(10,60,1)
(61,42,1)
(66,11,1)
(58,30,1)
(55,54,1)
(11,45,1)
(22,53,1)
(29,4,1)
(10,7,1)
(9,5,1)
(64,12,1)
(38,66,1)
(35,40,1)
(26,62,1)
(36,51,1)
(4,13,1)
(39,57,1)
(9,16,1)
(13,5,1)
(24,21,1)
(26,49,1)
(56,22,1)
(14,2,1)
(26,5,1)
(26,19,1)
(14,63,1)
(11,49,1)
(57,5,1)
(0,58,1)
(12,46,1)
(7,24,1)
(1,37,1)
(34,10,1)
(38,49,1)
(27,9,1)
(43,33,1)
(2,0,1)
(45,49,1)
(8,47,1)
(5,14,1)
(56,5,1)
(22,38,1)
(21,60,1)
(60,5,1)
(19,27,1)
(46,55,1)
(3,56,1)
(62,28,1)
(60,39,1)
(13,33,1)
(20,43,1)
(49,8,1)
(46,16,1)
(31,50,1)
(53,20,1)
(42,19,1)
(28,38,1)
(45,49,2)
(56,5,2)
(45,38,2)
(49,43,2)
(5,14,2)
(8,43,2)
(26,19,2)
(62,38,2)
(27,46,2)
(24,60,2)
(37,26,2)
(9,5,2)
(64,46,2)
(46,16,2)
(55,46,2)
(40,43,2)
(37,38,2)
(53,43,2)
(60,5,2)
(1,38,2)
(38,43,2)
(11,43,2)
(66,43,2)
(38,49,2)
(19,46,2)
(54,46,2)
(26,38,2)
(26,49,2)
(66,38,2)
(13,43,2)
(13,33,2)
(9,16,2)
(7,60,2)
(21,60,2)
(61,16,2)
(38,38,2)
(29,43,2)
(2,0,2)
(46,46,2)
(7,24,2)
(26,5,2)
(20,43,2)
(61,46,2)
(0,58,2)
(11,38,2)
(47,43,2)
(14,63,2)
(42,46,2)
(35,43,2)
(14,2,2)
(4,43,2)
(12,46,2)
(13,5,2)
(9,46,2)
(28,38,2)
(43,33,2)
-----------------------------------
(0,10 * sizeof(int)
(1,i)
(2,malloc(10 * sizeof(int)
(3,RET)
(4,1)
(5,* buffer = (int *)
(6,buffer)
(7,exit(-1)
(8,0)
(9,buffer[i])
(10,i)
(11,i)
(12,buffer)
(13,buffer[data])
(14,(int *)
(15,for (i = 0; i < 10; i++)
(16,i = 0)
(17,)
(18,)
(19,buffer[i] = 0)
(20,"ERROR: Array index is negative.")
(21,1)
(22,buffer)
(23,i)
(24,-1)
(25,)
(26,buffer[i])
(27,0)
(28,buffer)
(29,buffer[data] = 1)
(30,int)
(31,0)
(32,)
(33,int data)
(34,0)
(35,data)
(36,10)
(37,printIntLine(buffer[i])
(38,i < 10)
(39,NULL)
(40,buffer)
(41,)
(42,i)
(43,data >= 0)
(44,if (buffer == NULL)
(45,i++)
(46,i < 10)
(47,i)
(48,for(i = 0; i < 10; i++)
(49,i = 0)
(50,data)
(51,buffer)
(52,)
(53,printLine("ERROR: Array index is negative.")
(54,i)
(55,10)
(56,free(buffer)
(57,buffer)
(58,sizeof(int)
(59,if (data >= 0)
(60,buffer == NULL)
(61,i++)
(62,i)
(63,int *)
(64,i)
(65,)
(66,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^