-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
        strncat(dest, data, strlen(data));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,86,88,93,95,96,97,101,103,107,109
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strncat(dest, data, strlen(data));
strncat(dest, data, strlen(data))
strncat
strncat
dest
dest
data
data
strlen(data)
strlen
strlen
data
data
dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,48,0)
(4,6,0)
(26,11,0)
(27,55,0)
(24,55,0)
(37,42,0)
(19,26,0)
(17,48,0)
(49,48,0)
(14,53,0)
(13,48,0)
(13,9,0)
(22,8,0)
(25,49,0)
(52,26,0)
(33,11,0)
(0,48,0)
(34,24,0)
(28,13,0)
(9,13,0)
(49,4,0)
(15,8,0)
(53,6,0)
(2,43,0)
(47,8,0)
(21,20,0)
(45,24,0)
(56,2,0)
(38,11,0)
(40,21,0)
(23,32,0)
(20,31,0)
(48,49,0)
(32,42,0)
(41,0,0)
(48,8,0)
(44,9,0)
(54,29,0)
(51,12,0)
(10,38,0)
(49,25,0)
(36,1,0)
(13,30,0)
(35,29,0)
(42,30,0)
(43,26,0)
(16,2,0)
(6,4,0)
(43,2,0)
(12,32,0)
(18,43,0)
(29,48,0)
(1,48,0)
(6,53,0)
(7,6,0)
(32,12,0)
(3,12,0)
(55,48,0)
(43,38,0)
(24,11,0)
(0,11,0)
(4,49,0)
(32,48,0)
(1,11,0)
(11,8,0)
(5,13,0)
(46,9,0)
(20,21,0)
(55,24,0)
(24,26,0)
(9,44,1)
(10,43,1)
(3,51,1)
(0,48,1)
(14,7,1)
(43,26,1)
(13,48,1)
(55,48,1)
(39,29,1)
(23,13,1)
(16,18,1)
(7,17,1)
(28,39,1)
(38,10,1)
(53,14,1)
(40,29,1)
(27,34,1)
(49,4,1)
(32,12,1)
(29,35,1)
(50,0,1)
(37,32,1)
(1,48,1)
(19,52,1)
(54,48,1)
(48,49,1)
(46,5,1)
(0,41,1)
(49,25,1)
(12,3,1)
(34,45,1)
(56,16,1)
(44,46,1)
(41,1,1)
(36,38,1)
(45,26,1)
(4,6,1)
(42,37,1)
(43,2,1)
(21,40,1)
(6,53,1)
(26,19,1)
(39,20,1)
(52,42,1)
(13,9,1)
(24,26,1)
(55,27,1)
(51,23,1)
(5,28,1)
(18,24,1)
(24,55,1)
(24,48,1)
(2,56,1)
(20,21,1)
(35,54,1)
(32,48,1)
(29,48,1)
(52,39,1)
(1,36,1)
(13,9,2)
(5,39,2)
(9,39,2)
(1,48,2)
(49,25,2)
(37,39,2)
(32,39,2)
(55,48,2)
(13,39,2)
(46,39,2)
(24,48,2)
(23,39,2)
(0,48,2)
(49,4,2)
(20,21,2)
(24,55,2)
(6,53,2)
(43,2,2)
(4,6,2)
(32,12,2)
(40,29,2)
(24,26,2)
(43,26,2)
(3,39,2)
(13,48,2)
(28,39,2)
(12,39,2)
(20,29,2)
(44,39,2)
(48,49,2)
(29,48,2)
(32,48,2)
(21,29,2)
(51,39,2)
(42,39,2)
-----------------------------------
(0,free(data)
(1,printLine(data)
(2,50-1)
(3,1)
(4,malloc(100*sizeof(char)
(5,\\\'A\\\')
(6,100*sizeof(char)
(7,100)
(8,)
(9,100-1)
(10,\\\'\\\\0\\\')
(11,)
(12,100-1)
(13,memset(data, \\\'A\\\', 100-1)
(14,char)
(15,if (data == NULL)
(16,50)
(17,data)
(18,dest)
(19,"")
(20,exit(-1)
(21,-1)
(22,if(GLOBAL_CONST_TRUE)
(23,data)
(24,strncat(dest, data, strlen(data)
(25,char *)
(26,dest[50] = "")
(27,data)
(28,data)
(29,data == NULL)
(30,)
(31,)
(32,data[100-1])
(33,dest)
(34,data)
(35,NULL)
(36,data)
(37,\\\'\\\\0\\\')
(38,dest[50-1] = \\\'\\\\0\\\')
(39,GLOBAL_CONST_TRUE)
(40,1)
(41,data)
(42,data[100-1] = \\\'\\\\0\\\')
(43,dest[50-1])
(44,1)
(45,dest)
(46,100)
(47,data)
(48,data = (char *)
(49,(char *)
(50,RET)
(51,100)
(52,dest)
(53,sizeof(char)
(54,data)
(55,strlen(data)
(56,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^