-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,81,85,87
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,31,0)
(11,22,0)
(32,29,0)
(35,7,0)
(2,16,0)
(12,32,0)
(33,16,0)
(38,13,0)
(22,11,0)
(22,28,0)
(27,16,0)
(18,32,0)
(5,31,0)
(30,29,0)
(10,11,0)
(9,29,0)
(12,16,0)
(0,5,0)
(28,35,0)
(35,28,0)
(31,29,0)
(16,15,0)
(5,16,0)
(17,32,0)
(21,18,0)
(7,35,0)
(34,31,0)
(13,38,0)
(33,31,0)
(5,32,0)
(37,1,0)
(14,2,0)
(13,6,0)
(4,22,0)
(23,12,0)
(33,32,0)
(36,2,0)
(24,33,0)
(39,31,0)
(28,22,0)
(3,12,0)
(8,15,0)
(16,35,0)
(26,1,0)
(20,18,0)
(35,16,0)
(12,18,0)
(25,38,0)
(31,39,1)
(4,27,1)
(39,34,1)
(28,22,1)
(12,16,1)
(33,31,1)
(27,1,1)
(10,4,1)
(3,18,1)
(21,13,1)
(35,7,1)
(33,24,1)
(18,20,1)
(35,28,1)
(12,31,1)
(2,16,1)
(14,36,1)
(38,25,1)
(5,0,1)
(2,14,1)
(23,3,1)
(37,26,1)
(20,21,1)
(16,35,1)
(21,2,1)
(12,18,1)
(11,10,1)
(5,16,1)
(36,16,1)
(12,23,1)
(5,31,1)
(24,12,1)
(0,33,1)
(26,31,1)
(21,1,1)
(25,2,1)
(1,37,1)
(19,5,1)
(33,16,1)
(13,38,1)
(22,11,1)
(22,1,2)
(11,1,2)
(35,7,2)
(22,11,2)
(35,1,2)
(16,35,2)
(16,1,2)
(27,1,2)
(33,31,2)
(2,1,2)
(36,1,2)
(12,16,2)
(5,31,2)
(28,22,2)
(25,2,2)
(12,31,2)
(28,1,2)
(4,1,2)
(14,1,2)
(12,18,2)
(13,38,2)
(38,2,2)
(35,28,2)
(13,2,2)
(33,16,2)
(10,1,2)
(5,16,2)
(2,16,2)
-----------------------------------
(0,data)
(1,STATIC_CONST_FIVE==5)
(2,data == NULL)
(3,data)
(4,10)
(5,free(data)
(6,)
(7,wchar_t *)
(8,if (data == NULL)
(9,data)
(10,wchar_t)
(11,sizeof(wchar_t)
(12,wcscpy(data, source)
(13,exit(-1)
(14,NULL)
(15,)
(16,data = (wchar_t *)
(17,source)
(18,source[10+1] = SRC_STRING)
(19,RET)
(20,SRC_STRING)
(21,source)
(22,10*sizeof(wchar_t)
(23,source)
(24,data)
(25,1)
(26,STATIC_CONST_FIVE)
(27,data)
(28,malloc(10*sizeof(wchar_t)
(29,)
(30,if(STATIC_CONST_FIVE==5)
(31,data = NULL)
(32,)
(33,printWLine(data)
(34,data)
(35,(wchar_t *)
(36,data)
(37,5)
(38,-1)
(39,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^