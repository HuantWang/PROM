-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
24,26
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
43,44
44,45
44,46
44,47
44,48
45,46
47,48
47,49
48,49
51,52
53,54
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
67,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
-----nextToken-----
2,4,8,14,16,21,22,25,27,29,33,36,38,41,42,46,49,50,52,56,62,63,71,72,75,76,77,78,82,85,87,90,91,95,98,100,103,104
-----computeFrom-----
18,19
18,20
58,59
58,60
64,65
64,66
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad(){    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad
{    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memmove
memmove
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(39,21,0)
(36,16,0)
(28,12,0)
(18,37,0)
(22,14,0)
(9,37,0)
(28,20,0)
(4,21,0)
(20,34,0)
(6,16,0)
(34,20,0)
(5,20,0)
(19,40,0)
(16,25,0)
(27,12,0)
(2,16,0)
(22,36,0)
(12,16,0)
(21,39,0)
(14,22,0)
(0,21,0)
(33,28,0)
(1,16,0)
(37,12,0)
(2,39,0)
(37,9,0)
(36,22,0)
(31,40,0)
(23,14,0)
(19,16,0)
(3,27,0)
(20,5,0)
(40,19,0)
(20,28,0)
(21,12,0)
(19,24,0)
(32,40,0)
(5,16,0)
(11,22,0)
(38,14,0)
(12,37,0)
(13,24,0)
(17,35,0)
(8,19,0)
(24,19,0)
(7,27,0)
(30,39,0)
(39,2,0)
(22,11,0)
(39,30,0)
(26,28,0)
(29,5,1)
(37,18,1)
(37,9,1)
(5,20,1)
(6,19,1)
(4,0,1)
(18,27,1)
(27,7,1)
(29,10,1)
(22,11,1)
(32,31,1)
(0,12,1)
(12,37,1)
(28,12,1)
(31,2,1)
(38,23,1)
(33,36,1)
(39,30,1)
(40,32,1)
(36,22,1)
(20,28,1)
(24,13,1)
(19,24,1)
(7,3,1)
(22,14,1)
(26,33,1)
(20,34,1)
(8,40,1)
(13,8,1)
(2,39,1)
(14,38,1)
(21,12,1)
(19,40,1)
(28,26,1)
(21,4,1)
(3,10,1)
(39,21,1)
(23,6,1)
(0,10,2)
(24,10,2)
(20,28,2)
(28,12,2)
(26,10,2)
(22,14,2)
(14,10,2)
(13,10,2)
(37,9,2)
(5,10,2)
(8,10,2)
(2,10,2)
(19,10,2)
(39,10,2)
(7,10,2)
(33,10,2)
(2,39,2)
(22,10,2)
(23,10,2)
(21,12,2)
(27,10,2)
(32,10,2)
(4,10,2)
(36,22,2)
(5,20,2)
(22,11,2)
(12,37,2)
(21,10,2)
(39,21,2)
(3,10,2)
(28,10,2)
(36,10,2)
(37,10,2)
(18,10,2)
(38,10,2)
(40,10,2)
(20,34,2)
(39,30,2)
(6,10,2)
(12,10,2)
(20,10,2)
(19,24,2)
(31,10,2)
(19,40,2)
-----------------------------------
(0,structCharVoid)
(1,structCharVoid)
(2,printWLine((wchar_t *)
(3,structCharVoid)
(4,voidSecond)
(5,printWLine((wchar_t *)
(6,'\\\\0')
(7,voidSecond)
(8,SRC_STR)
(9,void *)
(10,STATIC_CONST_TRUE)
(11,wchar_t *)
(12,structCharVoid.voidSecond = (void *)
(13,structCharVoid)
(14,structCharVoid.charFirst)
(15,\'\\\\0\')
(16,)
(17,if(STATIC_CONST_TRUE)
(18,SRC_STR)
(19,memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(20,(wchar_t *)
(21,structCharVoid.voidSecond)
(22,(wchar_t *)
(23,structCharVoid)
(24,sizeof(structCharVoid)
(25,)
(26,voidSecond)
(27,structCharVoid.voidSecond)
(28,structCharVoid.voidSecond)
(29,RET)
(30,wchar_t *)
(31,structCharVoid)
(32,charFirst)
(33,structCharVoid)
(34,wchar_t *)
(35,)
(36,printWLine((wchar_t *)
(37,(void *)
(38,charFirst)
(39,(wchar_t *)
(40,structCharVoid.charFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^