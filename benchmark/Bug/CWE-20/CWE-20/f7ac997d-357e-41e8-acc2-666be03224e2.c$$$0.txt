-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate space for a null terminator */
        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
69,70
69,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
93,94
93,95
93,96
95,96
96,97
96,98
99,100
100,101
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,61,63,66,70,71,74,75,79,81,86,88,92,94,97,98,101,105,107,109,113,115,119,121
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
56,57
56,58
67,68
67,69
69,70
69,71
77,78
77,79
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));
data = (wchar_t *)malloc((10+1)*sizeof(wchar_t))
data
data
(wchar_t *)malloc((10+1)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc((10+1)*sizeof(wchar_t))
malloc
malloc
(10+1)*sizeof(wchar_t)
(10+1)
10+1
10
1
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,9,0)
(5,49,0)
(13,50,0)
(29,18,0)
(52,30,0)
(23,45,0)
(7,25,0)
(37,31,0)
(25,5,0)
(15,31,0)
(32,42,0)
(31,49,0)
(15,10,0)
(18,31,0)
(10,30,0)
(39,15,0)
(20,45,0)
(10,40,0)
(25,57,0)
(57,25,0)
(19,10,0)
(28,23,0)
(31,34,0)
(30,13,0)
(53,34,0)
(26,49,0)
(33,18,0)
(36,23,0)
(8,12,0)
(37,23,0)
(4,9,0)
(47,6,0)
(1,57,0)
(49,31,0)
(50,12,0)
(27,6,0)
(12,50,0)
(44,31,0)
(32,35,0)
(41,19,0)
(44,10,0)
(38,45,0)
(56,19,0)
(15,23,0)
(49,26,0)
(46,20,0)
(2,28,0)
(54,20,0)
(17,28,0)
(50,13,0)
(50,6,0)
(0,24,0)
(11,15,0)
(22,45,0)
(13,30,0)
(30,10,0)
(44,23,0)
(49,5,0)
(16,42,0)
(42,32,0)
(55,40,0)
(15,28,0)
(30,52,0)
(3,37,0)
(51,44,0)
(6,50,0)
(37,10,0)
(9,0,0)
(48,10,0)
(5,25,0)
(14,31,0)
(47,48,1)
(5,25,1)
(8,6,1)
(15,11,1)
(29,31,1)
(57,1,1)
(11,39,1)
(44,10,1)
(37,31,1)
(44,51,1)
(48,21,1)
(51,37,1)
(15,28,1)
(25,57,1)
(28,2,1)
(33,29,1)
(15,10,1)
(20,54,1)
(14,21,1)
(19,10,1)
(42,16,1)
(6,27,1)
(17,19,1)
(32,42,1)
(27,47,1)
(17,0,1)
(17,18,1)
(49,26,1)
(13,50,1)
(21,20,1)
(19,56,1)
(2,17,1)
(43,44,1)
(31,49,1)
(50,12,1)
(9,4,1)
(37,3,1)
(1,7,1)
(56,41,1)
(44,31,1)
(54,46,1)
(4,19,1)
(18,31,1)
(15,31,1)
(10,30,1)
(41,10,1)
(49,5,1)
(18,33,1)
(50,6,1)
(0,9,1)
(3,15,1)
(12,8,1)
(39,28,1)
(30,52,1)
(37,10,1)
(7,14,1)
(16,18,1)
(17,32,1)
(30,13,1)
(0,19,2)
(48,21,2)
(32,18,2)
(16,18,2)
(13,50,2)
(18,31,2)
(1,21,2)
(25,57,2)
(37,31,2)
(44,31,2)
(15,28,2)
(31,49,2)
(12,21,2)
(49,26,2)
(47,21,2)
(19,10,2)
(5,21,2)
(29,21,2)
(50,6,2)
(15,10,2)
(9,19,2)
(6,21,2)
(37,10,2)
(41,21,2)
(30,13,2)
(10,30,2)
(42,18,2)
(27,21,2)
(56,21,2)
(57,21,2)
(18,21,2)
(8,21,2)
(50,12,2)
(25,21,2)
(14,21,2)
(44,10,2)
(0,9,2)
(13,21,2)
(50,21,2)
(10,21,2)
(32,42,2)
(7,21,2)
(15,31,2)
(19,21,2)
(49,21,2)
(30,21,2)
(49,5,2)
(4,19,2)
(30,52,2)
(5,25,2)
(33,21,2)
(31,21,2)
-----------------------------------
(0,exit(-1)
(1,wchar_t)
(2,SRC_STRING)
(3,data)
(4,1)
(5,malloc(10*sizeof(wchar_t)
(6,10+1)
(7,10)
(8,wchar_t)
(9,-1)
(10,data = (wchar_t *)
(11,source)
(12,sizeof(wchar_t)
(13,malloc((10+1)
(14,data)
(15,wcscpy(data, source)
(16,1)
(17,source)
(18,data == NULL)
(19,data == NULL)
(20,data = NULL)
(21,globalReturnsTrueOrFalse()
(22,if(globalReturnsTrueOrFalse()
(23,)
(24,)
(25,10*sizeof(wchar_t)
(26,wchar_t *)
(27,1)
(28,source[10+1] = SRC_STRING)
(29,data)
(30,(wchar_t *)
(31,data = (wchar_t *)
(32,exit(-1)
(33,NULL)
(34,)
(35,)
(36,source)
(37,printWLine(data)
(38,data)
(39,data)
(40,)
(41,data)
(42,-1)
(43,RET)
(44,free(data)
(45,)
(46,data)
(47,10)
(48,data)
(49,(wchar_t *)
(50,(10+1)
(51,data)
(52,wchar_t *)
(53,if (data == NULL)
(54,NULL)
(55,if (data == NULL)
(56,NULL)
(57,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^