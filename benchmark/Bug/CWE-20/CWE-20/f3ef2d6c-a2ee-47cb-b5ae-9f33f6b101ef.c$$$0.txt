-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use an invalid index */
        data = 10;
    }
    if(globalTrue)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
80,81
81,82
83,84
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
92,94
92,95
93,94
93,95
94,95
97,98
97,99
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
119,120
120,121
121,122
121,123
122,123
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,33,35,38,40,41,45,47,50,52,55,56,60,62,67,69,74,75,78,79,82,88,90,91,95,96,102,104,105,110,111,114,115,118,123,126,128,133,134,138,140
-----computeFrom-----
12,13
12,14
22,23
22,24
51,52
51,53
58,59
58,60
72,73
72,74
76,77
76,78
85,86
85,87
93,94
93,95
99,100
99,101
108,109
108,110
112,113
112,114
-----guardedBy-----
95,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(globalTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(globalTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
data = 10;
data = 10
data
data
10
if(globalTrue)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
globalTrue
globalTrue
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(40,43,0)
(79,14,0)
(3,35,0)
(31,24,0)
(11,43,0)
(42,35,0)
(32,55,0)
(74,20,0)
(65,77,0)
(51,74,0)
(18,33,0)
(6,70,0)
(71,60,0)
(36,45,0)
(14,79,0)
(27,75,0)
(23,78,0)
(72,71,0)
(29,71,0)
(48,33,0)
(70,41,0)
(5,27,0)
(63,55,0)
(13,54,0)
(55,49,0)
(68,41,0)
(22,71,0)
(70,30,0)
(46,11,0)
(40,33,0)
(0,77,0)
(69,75,0)
(30,71,0)
(50,39,0)
(15,25,0)
(37,54,0)
(79,55,0)
(62,34,0)
(79,54,0)
(79,30,0)
(70,6,0)
(76,50,0)
(77,33,0)
(35,54,0)
(1,71,0)
(12,79,0)
(10,75,0)
(38,67,0)
(2,32,0)
(7,79,0)
(43,45,0)
(43,11,0)
(77,74,0)
(67,71,0)
(24,30,0)
(47,27,0)
(17,40,0)
(41,68,0)
(33,58,0)
(28,40,0)
(34,75,0)
(56,45,0)
(32,30,0)
(67,30,0)
(9,54,0)
(39,59,0)
(77,30,0)
(25,66,0)
(21,13,0)
(64,30,0)
(39,50,0)
(16,45,0)
(77,43,0)
(41,70,0)
(26,32,0)
(73,43,0)
(14,4,0)
(68,78,0)
(44,68,0)
(8,24,0)
(32,75,0)
(52,71,0)
(78,68,0)
(30,70,0)
(19,20,0)
(77,43,1)
(10,39,1)
(61,57,1)
(57,33,1)
(17,27,1)
(9,37,1)
(75,69,1)
(63,32,1)
(46,73,1)
(24,30,1)
(65,0,1)
(51,77,1)
(77,65,1)
(11,46,1)
(32,75,1)
(27,5,1)
(33,18,1)
(25,15,1)
(76,24,1)
(13,21,1)
(38,35,1)
(14,79,1)
(42,13,1)
(3,42,1)
(77,33,1)
(54,9,1)
(40,43,1)
(12,7,1)
(61,67,1)
(32,26,1)
(47,75,1)
(48,53,1)
(35,54,1)
(77,30,1)
(40,28,1)
(38,25,1)
(68,78,1)
(78,23,1)
(41,68,1)
(67,30,1)
(2,27,1)
(27,75,1)
(32,30,1)
(18,48,1)
(39,50,1)
(28,17,1)
(13,54,1)
(55,63,1)
(23,44,1)
(0,40,1)
(7,35,1)
(24,31,1)
(47,34,1)
(26,2,1)
(70,6,1)
(21,14,1)
(79,12,1)
(30,70,1)
(67,38,1)
(5,47,1)
(15,40,1)
(74,51,1)
(53,43,1)
(8,30,1)
(79,55,1)
(40,33,1)
(42,54,1)
(37,74,1)
(79,54,1)
(70,41,1)
(69,10,1)
(43,11,1)
(57,53,1)
(64,57,1)
(62,55,1)
(79,30,1)
(10,24,1)
(50,76,1)
(35,3,1)
(34,75,1)
(34,62,1)
(31,8,1)
(44,64,1)
(64,57,2)
(77,33,2)
(70,41,2)
(14,35,2)
(47,27,2)
(54,40,2)
(79,55,2)
(25,40,2)
(17,57,2)
(79,35,2)
(32,27,2)
(75,57,2)
(41,57,2)
(9,40,2)
(77,43,2)
(5,27,2)
(69,57,2)
(35,54,2)
(27,75,2)
(74,40,2)
(28,57,2)
(26,27,2)
(63,27,2)
(44,57,2)
(24,57,2)
(32,75,2)
(65,40,2)
(33,53,2)
(13,35,2)
(2,27,2)
(43,11,2)
(40,43,2)
(34,27,2)
(79,54,2)
(50,24,2)
(67,57,2)
(40,33,2)
(79,30,2)
(7,35,2)
(3,40,2)
(30,57,2)
(47,57,2)
(14,79,2)
(35,40,2)
(8,57,2)
(38,57,2)
(24,30,2)
(68,78,2)
(40,57,2)
(0,40,2)
(5,57,2)
(42,40,2)
(23,57,2)
(12,35,2)
(37,40,2)
(48,53,2)
(55,27,2)
(42,35,2)
(51,40,2)
(34,75,2)
(30,70,2)
(77,40,2)
(3,35,2)
(21,35,2)
(41,68,2)
(10,57,2)
(32,30,2)
(27,57,2)
(35,35,2)
(62,27,2)
(31,57,2)
(70,57,2)
(13,54,2)
(78,57,2)
(39,50,2)
(27,27,2)
(68,57,2)
(76,24,2)
(70,6,2)
(67,30,2)
(15,40,2)
(39,24,2)
(18,53,2)
(77,30,2)
-----------------------------------
(0,buffer)
(1,for (i = 0; i < 10; i++)
(2,buffer)
(3,10)
(4,)
(5,10)
(6,int *)
(7,buffer)
(8,buffer)
(9,0)
(10,i)
(11,-1)
(12,i)
(13,i++)
(14,printIntLine(buffer[i])
(15,"ERROR: Array index is negative.")
(16,if(globalTrue)
(17,data)
(18,10)
(19,for(i = 0; i < 10; i++)
(20,)
(21,i)
(22,i)
(23,int)
(24,buffer == NULL)
(25,printLine("ERROR: Array index is negative.")
(26,i)
(27,i < 10)
(28,0)
(29,if (data >= 0)
(30,* buffer = (int *)
(31,NULL)
(32,buffer[i])
(33,data = 10)
(34,i++)
(35,i < 10)
(36,if(globalTrue)
(37,i)
(38,buffer)
(39,exit(-1)
(40,data >= 0)
(41,malloc(10 * sizeof(int)
(42,i)
(43,data = -1)
(44,10)
(45,)
(46,1)
(47,i)
(48,data)
(49,)
(50,-1)
(51,1)
(52,if (buffer == NULL)
(53,globalTrue)
(54,i = 0)
(55,buffer[i] = 0)
(56,data)
(57,globalTrue)
(58,)
(59,)
(60,)
(61,RET)
(62,i)
(63,0)
(64,buffer)
(65,data)
(66,)
(67,free(buffer)
(68,10 * sizeof(int)
(69,0)
(70,(int *)
(71,)
(72,buffer)
(73,data)
(74,buffer[data] = 1)
(75,i = 0)
(76,1)
(77,buffer[data])
(78,sizeof(int)
(79,buffer[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^