-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
    else
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
25,27
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
52,53
54,55
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
87,88
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
106,107
107,108
107,109
107,110
107,111
107,112
107,113
107,114
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
121,123
123,124
125,126
127,128
128,129
128,130
129,130
131,132
131,133
132,133
132,134
134,135
136,137
136,138
137,138
140,141
141,142
141,143
141,144
141,145
142,143
144,145
144,146
145,146
148,149
150,151
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
158,160
159,160
159,161
160,161
163,164
163,165
164,165
165,166
165,167
166,167
167,168
168,169
168,170
169,170
172,173
173,174
173,175
178,179
179,180
179,181
180,181
182,183
182,184
183,184
183,185
185,186
187,188
187,189
188,189
191,192
192,193
192,194
193,194
195,196
195,197
196,197
196,198
198,199
200,201
200,202
201,202
-----nextToken-----
2,4,9,15,17,22,23,26,28,30,34,37,39,42,43,47,50,51,53,57,63,64,72,73,76,77,78,79,83,86,88,91,92,96,99,101,104,105,111,113,118,119,122,124,126,130,133,135,138,139,143,146,147,149,154,155,161,162,170,171,174,175,176,177,181,184,186,189,190,194,197,199,202,203
-----computeFrom-----
19,20
19,21
59,60
59,61
65,66
65,67
67,68
67,69
115,116
115,117
157,158
157,159
163,164
163,165
165,166
165,167
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }    else    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }    else    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(globalReturnsTrueOrFalse())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }    else    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FIX: Use sizeof(structCharVoid.charFirst) to avoid overwriting the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(45,29,0)
(75,90,0)
(91,43,0)
(34,38,0)
(59,98,0)
(10,23,0)
(19,28,0)
(67,1,0)
(46,56,0)
(58,82,0)
(43,91,0)
(35,80,0)
(79,91,0)
(51,75,0)
(42,83,0)
(78,48,0)
(24,37,0)
(94,35,0)
(52,2,0)
(15,1,0)
(26,43,0)
(1,15,0)
(38,16,0)
(4,38,0)
(75,51,0)
(85,107,0)
(35,94,0)
(29,33,0)
(28,38,0)
(64,78,0)
(36,32,0)
(27,93,0)
(99,18,0)
(70,32,0)
(76,24,0)
(35,66,0)
(3,38,0)
(107,85,0)
(99,55,0)
(101,28,0)
(70,38,0)
(32,104,0)
(13,19,0)
(33,29,0)
(53,33,0)
(44,62,0)
(18,106,0)
(25,15,0)
(94,99,0)
(54,5,0)
(84,37,0)
(41,94,0)
(12,2,0)
(69,25,0)
(28,2,0)
(24,99,0)
(95,63,0)
(104,32,0)
(56,85,0)
(83,63,0)
(62,3,0)
(39,18,0)
(62,44,0)
(86,94,0)
(78,56,0)
(63,83,0)
(71,104,0)
(91,21,0)
(73,83,0)
(61,34,0)
(81,85,0)
(8,53,0)
(50,5,0)
(32,36,0)
(28,19,0)
(93,107,0)
(49,64,0)
(43,15,0)
(57,23,0)
(83,42,0)
(47,55,0)
(88,104,0)
(23,73,0)
(103,34,0)
(96,62,0)
(21,38,0)
(105,93,0)
(18,99,0)
(82,99,0)
(63,103,0)
(37,47,0)
(73,23,0)
(37,24,0)
(2,28,0)
(85,56,0)
(91,79,0)
(83,73,0)
(5,103,0)
(103,63,0)
(66,35,0)
(107,93,0)
(90,55,0)
(55,9,0)
(100,24,0)
(37,84,0)
(68,55,0)
(78,64,0)
(90,75,0)
(21,91,0)
(3,62,0)
(77,64,0)
(92,22,0)
(103,5,0)
(1,67,0)
(6,82,0)
(32,70,0)
(0,25,0)
(44,15,0)
(40,20,0)
(74,20,0)
(85,81,0)
(75,20,0)
(53,22,0)
(72,81,0)
(17,48,0)
(62,96,0)
(87,22,0)
(22,53,0)
(47,37,0)
(7,43,0)
(66,55,0)
(31,1,0)
(80,35,0)
(30,44,0)
(48,55,0)
(106,18,0)
(33,53,0)
(97,29,0)
(14,42,0)
(53,55,0)
(20,75,0)
(102,44,0)
(56,78,0)
(15,38,0)
(49,53,1)
(12,21,1)
(104,71,1)
(50,28,1)
(62,44,1)
(85,81,1)
(105,27,1)
(24,76,1)
(24,99,1)
(26,15,1)
(43,15,1)
(19,13,1)
(60,47,1)
(1,67,1)
(93,105,1)
(78,56,1)
(75,20,1)
(14,73,1)
(48,17,1)
(31,25,1)
(27,64,1)
(47,37,1)
(52,12,1)
(28,19,1)
(77,49,1)
(86,99,1)
(37,24,1)
(71,88,1)
(32,104,1)
(37,84,1)
(10,57,1)
(21,91,1)
(61,103,1)
(81,72,1)
(87,66,1)
(74,40,1)
(1,31,1)
(76,100,1)
(42,14,1)
(56,85,1)
(39,82,1)
(45,97,1)
(75,51,1)
(28,2,1)
(85,107,1)
(20,74,1)
(32,36,1)
(30,102,1)
(13,101,1)
(53,22,1)
(102,70,1)
(90,75,1)
(44,15,1)
(72,107,1)
(97,8,1)
(91,79,1)
(54,50,1)
(62,96,1)
(23,10,1)
(29,45,1)
(60,3,1)
(103,63,1)
(0,11,1)
(40,48,1)
(82,6,1)
(78,64,1)
(101,2,1)
(35,94,1)
(18,106,1)
(83,42,1)
(88,34,1)
(5,54,1)
(3,62,1)
(33,29,1)
(6,58,1)
(56,46,1)
(66,35,1)
(107,93,1)
(64,77,1)
(94,41,1)
(8,22,1)
(17,78,1)
(92,87,1)
(95,83,1)
(73,23,1)
(63,95,1)
(34,61,1)
(35,80,1)
(63,83,1)
(7,26,1)
(41,86,1)
(94,99,1)
(57,5,1)
(83,73,1)
(44,30,1)
(91,43,1)
(103,5,1)
(69,0,1)
(22,92,1)
(2,52,1)
(70,32,1)
(99,18,1)
(43,7,1)
(46,85,1)
(25,69,1)
(53,33,1)
(100,90,1)
(58,11,1)
(15,1,1)
(18,39,1)
(75,51,2)
(29,11,2)
(56,85,2)
(30,11,2)
(37,24,2)
(90,75,2)
(99,11,2)
(70,11,2)
(1,67,2)
(45,11,2)
(26,11,2)
(99,18,2)
(88,11,2)
(70,32,2)
(62,11,2)
(53,33,2)
(37,84,2)
(44,15,2)
(72,11,2)
(91,43,2)
(18,11,2)
(21,91,2)
(83,73,2)
(94,99,2)
(43,15,2)
(71,11,2)
(86,11,2)
(39,11,2)
(15,1,2)
(69,11,2)
(6,11,2)
(0,11,2)
(24,11,2)
(31,11,2)
(93,11,2)
(87,11,2)
(92,11,2)
(8,11,2)
(47,37,2)
(19,11,2)
(33,11,2)
(75,11,2)
(105,11,2)
(3,11,2)
(35,11,2)
(102,11,2)
(52,11,2)
(33,29,2)
(48,11,2)
(1,11,2)
(97,11,2)
(32,36,2)
(5,11,2)
(22,11,2)
(82,11,2)
(61,11,2)
(14,11,2)
(64,11,2)
(43,11,2)
(18,106,2)
(10,11,2)
(32,11,2)
(85,81,2)
(78,56,2)
(21,11,2)
(63,83,2)
(54,11,2)
(53,22,2)
(3,62,2)
(7,11,2)
(83,42,2)
(41,11,2)
(40,11,2)
(104,11,2)
(103,11,2)
(15,11,2)
(85,11,2)
(27,11,2)
(46,11,2)
(73,11,2)
(56,11,2)
(62,44,2)
(17,11,2)
(50,11,2)
(44,11,2)
(23,11,2)
(13,11,2)
(42,11,2)
(28,2,2)
(103,63,2)
(94,11,2)
(32,104,2)
(20,11,2)
(107,11,2)
(62,96,2)
(75,20,2)
(100,11,2)
(24,99,2)
(53,11,2)
(49,11,2)
(66,11,2)
(28,11,2)
(107,93,2)
(85,107,2)
(91,79,2)
(2,11,2)
(78,11,2)
(34,11,2)
(63,11,2)
(95,11,2)
(83,11,2)
(25,11,2)
(74,11,2)
(101,11,2)
(35,80,2)
(58,11,2)
(77,11,2)
(37,11,2)
(73,23,2)
(81,11,2)
(28,19,2)
(57,11,2)
(66,35,2)
(90,11,2)
(47,11,2)
(103,5,2)
(35,94,2)
(78,64,2)
(12,11,2)
(76,11,2)
(91,11,2)
-----------------------------------
(0,structCharVoid)
(1,(void *)
(2,structCharVoid.charFirst)
(3,printLine((char *)
(4,structCharVoid)
(5,structCharVoid.charFirst)
(6,voidSecond)
(7,voidSecond)
(8,SRC_STR)
(9,)
(10,charFirst)
(11,globalReturnsTrueOrFalse()
(12,structCharVoid)
(13,structCharVoid)
(14,char)
(15,structCharVoid.voidSecond = (void *)
(16,)
(17,\'\\\\0\')
(18,(void *)
(19,sizeof(structCharVoid)
(20,structCharVoid.charFirst)
(21,printLine((char *)
(22,structCharVoid.charFirst)
(23,structCharVoid.charFirst)
(24,structCharVoid.voidSecond)
(25,structCharVoid.voidSecond)
(26,structCharVoid)
(27,structCharVoid)
(28,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(29,structCharVoid.charFirst)
(30,voidSecond)
(31,SRC_STR)
(32,(char *)
(33,sizeof(structCharVoid.charFirst)
(34,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(35,(char *)
(36,char *)
(37,(char *)
(38,)
(39,SRC_STR)
(40,structCharVoid)
(41,voidSecond)
(42,sizeof(char)
(43,structCharVoid.voidSecond)
(44,structCharVoid.voidSecond)
(45,charFirst)
(46,1)
(47,printLine((char *)
(48,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(49,structCharVoid)
(50,structCharVoid)
(51,char *)
(52,charFirst)
(53,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst)
(54,charFirst)
(55,)
(56,(sizeof(structCharVoid.charFirst)
(57,structCharVoid)
(58,structCharVoid)
(59,if(globalReturnsTrueOrFalse()
(60,RET)
(61,'\\\\0')
(62,(char *)
(63,(sizeof(structCharVoid.charFirst)
(64,structCharVoid.charFirst)
(65,'\\\\0')
(66,printLine((char *)
(67,void *)
(68,structCharVoid)
(69,voidSecond)
(70,printLine((char *)
(71,charFirst)
(72,char)
(73,sizeof(structCharVoid.charFirst)
(74,charFirst)
(75,(char *)
(76,voidSecond)
(77,charFirst)
(78,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(79,char *)
(80,char *)
(81,sizeof(char)
(82,structCharVoid.voidSecond)
(83,sizeof(structCharVoid.charFirst)
(84,char *)
(85,sizeof(structCharVoid.charFirst)
(86,structCharVoid)
(87,structCharVoid)
(88,structCharVoid)
(89,\'\\\\0\')
(90,printLine((char *)
(91,(char *)
(92,charFirst)
(93,structCharVoid.charFirst)
(94,structCharVoid.voidSecond)
(95,1)
(96,char *)
(97,structCharVoid)
(98,)
(99,structCharVoid.voidSecond = (void *)
(100,structCharVoid)
(101,SRC_STR)
(102,structCharVoid)
(103,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(104,structCharVoid.charFirst)
(105,charFirst)
(106,void *)
(107,sizeof(structCharVoid.charFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^