-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char source[10+1] = SRC_STRING;
            size_t i, sourceLen;
            sourceLen = strlen(source);
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            for (i = 0; i < sourceLen + 1; i++)
            {
                data[i] = source[i];
            }
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
66,67
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
74,75
75,76
75,77
78,79
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
93,95
94,95
96,97
98,99
98,100
98,101
98,102
99,100
100,101
100,102
101,102
104,105
104,106
105,106
107,108
107,109
108,109
111,112
112,113
114,115
115,116
116,117
116,118
117,118
117,119
118,119
120,121
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,58,61,63,64,67,71,73,76,77,80,84,86,88,92,95,97,102,103,106,109,110,113,119,121,124,126,130,132,136,138
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
75,76
75,77
90,91
90,92
100,101
100,102
104,105
104,106
107,108
107,109
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad(){    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            size_t i, sourceLen;            sourceLen = strlen(source);            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            for (i = 0; i < sourceLen + 1; i++)            {                data[i] = source[i];            }            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad
{    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            size_t i, sourceLen;            sourceLen = strlen(source);            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            for (i = 0; i < sourceLen + 1; i++)            {                data[i] = source[i];            }            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            size_t i, sourceLen;            sourceLen = strlen(source);            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            for (i = 0; i < sourceLen + 1; i++)            {                data[i] = source[i];            }            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char source[10+1] = SRC_STRING;            size_t i, sourceLen;            sourceLen = strlen(source);            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            for (i = 0; i < sourceLen + 1; i++)            {                data[i] = source[i];            }            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
for (i = 0; i < sourceLen + 1; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(59,10,0)
(10,43,0)
(64,10,0)
(8,38,0)
(62,53,0)
(63,38,0)
(37,38,0)
(2,38,0)
(25,59,0)
(15,56,0)
(56,40,0)
(17,45,0)
(4,13,0)
(20,58,0)
(5,32,0)
(0,45,0)
(35,4,0)
(61,9,0)
(63,29,0)
(56,32,0)
(48,32,0)
(41,51,0)
(51,10,0)
(3,29,0)
(51,52,0)
(24,51,0)
(19,54,0)
(44,2,0)
(13,4,0)
(58,40,0)
(62,46,0)
(4,10,0)
(50,63,0)
(26,45,0)
(33,29,0)
(1,40,0)
(10,4,0)
(14,29,0)
(38,52,0)
(23,34,0)
(58,16,0)
(54,34,0)
(21,29,0)
(60,52,0)
(14,38,0)
(22,40,0)
(9,43,0)
(34,54,0)
(21,26,0)
(38,51,0)
(27,22,0)
(28,2,0)
(35,34,0)
(32,21,0)
(55,52,0)
(49,26,0)
(34,35,0)
(16,58,0)
(45,29,0)
(52,43,0)
(11,59,0)
(26,21,0)
(16,36,0)
(57,58,0)
(2,16,0)
(32,56,0)
(18,29,0)
(30,9,0)
(39,14,0)
(58,45,0)
(29,52,0)
(2,40,0)
(4,35,0)
(42,29,0)
(7,21,0)
(12,53,0)
(65,43,0)
(47,43,0)
(53,62,0)
(6,40,0)
(6,1,1)
(15,40,1)
(4,13,1)
(45,17,1)
(38,8,1)
(23,64,1)
(54,19,1)
(9,61,1)
(8,37,1)
(48,5,1)
(41,24,1)
(12,59,1)
(14,39,1)
(64,9,1)
(16,58,1)
(11,10,1)
(57,20,1)
(2,44,1)
(50,14,1)
(53,12,1)
(44,28,1)
(61,30,1)
(58,45,1)
(17,0,1)
(20,2,1)
(59,10,1)
(63,50,1)
(58,57,1)
(26,49,1)
(24,59,1)
(59,25,1)
(49,7,1)
(1,21,1)
(0,38,1)
(40,6,1)
(22,27,1)
(24,62,1)
(37,51,1)
(39,56,1)
(22,40,1)
(15,22,1)
(56,40,1)
(4,35,1)
(27,16,1)
(51,10,1)
(56,32,1)
(32,21,1)
(31,63,1)
(35,34,1)
(5,15,1)
(62,53,1)
(2,38,1)
(7,45,1)
(32,48,1)
(21,26,1)
(38,51,1)
(10,4,1)
(63,38,1)
(25,11,1)
(28,56,1)
(2,40,1)
(51,41,1)
(34,54,1)
(14,38,1)
(19,23,1)
(26,45,1)
(58,40,1)
(56,40,2)
(38,51,2)
(5,56,2)
(32,56,2)
(15,56,2)
(58,40,2)
(34,54,2)
(62,59,2)
(10,4,2)
(22,40,2)
(44,56,2)
(22,56,2)
(35,34,2)
(16,56,2)
(32,21,2)
(26,45,2)
(2,56,2)
(58,45,2)
(4,13,2)
(53,59,2)
(2,38,2)
(4,35,2)
(2,40,2)
(56,32,2)
(28,56,2)
(51,10,2)
(16,58,2)
(12,59,2)
(20,56,2)
(59,10,2)
(21,26,2)
(57,56,2)
(56,56,2)
(63,38,2)
(62,53,2)
(58,56,2)
(27,56,2)
(14,38,2)
(48,56,2)
-----------------------------------
(0,source)
(1,i)
(2,data[i])
(3,for (i = 0; i < sourceLen + 1; i++)
(4,(char *)
(5,sourceLen)
(6,0)
(7,sourceLen)
(8,dataCopy)
(9,data = NULL)
(10,data = (char *)
(11,data)
(12,1)
(13,char *)
(14,printLine(data)
(15,i)
(16,data[i] = source[i])
(17,SRC_STRING)
(18,source)
(19,char)
(20,source)
(21,sourceLen = strlen(source)
(22,i++)
(23,10)
(24,dataCopy)
(25,NULL)
(26,strlen(source)
(27,i)
(28,data)
(29,)
(30,data)
(31,RET)
(32,sourceLen + 1)
(33,i)
(34,10*sizeof(char)
(35,malloc(10*sizeof(char)
(36,)
(37,data)
(38,* data = dataCopy)
(39,data)
(40,i = 0)
(41,data)
(42,sourceLen)
(43,)
(44,i)
(45,source[10+1] = SRC_STRING)
(46,)
(47,data)
(48,1)
(49,source)
(50,data)
(51,* dataCopy = data)
(52,)
(53,-1)
(54,sizeof(char)
(55,dataCopy)
(56,i < sourceLen + 1)
(57,i)
(58,source[i])
(59,data == NULL)
(60,data)
(61,NULL)
(62,exit(-1)
(63,free(data)
(64,data)
(65,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^