-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_wchar_t_loop_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Use a small buffer */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 50-1); /* fill with 'A's */
        data[50-1] = L'\0'; /* null terminate */
    }
    {
        size_t i, destLen;
        wchar_t dest[100];
        wmemset(dest, L'C', 100-1);
        dest[100-1] = L'\0'; /* null terminate */
        destLen = wcslen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = L'\0';
        printWLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
74,76
74,77
74,78
74,79
74,80
74,81
74,82
74,83
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
118,119
118,120
118,121
118,122
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
134,136
135,136
135,137
136,137
138,139
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
147,149
148,149
150,151
150,152
154,155
155,156
155,157
156,157
158,159
160,161
161,162
161,163
162,163
164,165
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,78,80,82,85,87,89,93,95,96,98,99,104,106,107,108,112,115,117,122,123,126,128,131,137,139,142,144,149,151,152,153,157,159,163,165
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
97,98
97,99
101,102
101,103
105,106
105,107
110,111
110,112
120,121
120,122
124,125
124,126
134,135
134,136
146,147
146,148
150,151
150,152
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_wchar_t_loop_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_wchar_t_loop_14_bad()
CWE126_Buffer_Overread__malloc_wchar_t_loop_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 50-1);
wmemset(data, L'A', 50-1)
wmemset
wmemset
data
data
L'A'
50-1
50
1
data[50-1] = L'\0';
data[50-1] = L'\0'
data[50-1]
data
data
50-1
50
1
L'\0'
{        size_t i, destLen;        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        destLen = wcslen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
wchar_t dest[100];
wchar_t dest[100];
wchar_t
dest[100]
dest
[100]
100
wmemset(dest, L'C', 100-1);
wmemset(dest, L'C', 100-1)
wmemset
wmemset
dest
dest
L'C'
100-1
100
1
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
destLen = wcslen(dest);
destLen = wcslen(dest)
destLen
destLen
wcslen(dest)
wcslen
wcslen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(10,34,0)
(1,12,0)
(21,9,0)
(22,17,0)
(3,51,0)
(0,33,0)
(43,58,0)
(52,8,0)
(40,12,0)
(48,15,0)
(16,58,0)
(6,18,0)
(31,6,0)
(25,1,0)
(39,21,0)
(24,34,0)
(4,30,0)
(42,4,0)
(15,18,0)
(2,51,0)
(41,2,0)
(57,56,0)
(12,9,0)
(53,33,0)
(36,33,0)
(49,18,0)
(6,29,0)
(17,52,0)
(17,2,0)
(21,2,0)
(9,12,0)
(2,21,0)
(26,44,0)
(34,38,0)
(33,38,0)
(20,29,0)
(60,33,0)
(29,33,0)
(9,21,0)
(17,18,0)
(32,38,0)
(47,23,0)
(23,33,0)
(35,6,0)
(14,51,0)
(17,34,0)
(55,28,0)
(59,18,0)
(44,33,0)
(12,1,0)
(49,52,0)
(30,4,0)
(44,34,0)
(27,17,0)
(19,33,0)
(50,56,0)
(46,38,0)
(56,2,0)
(29,28,0)
(30,5,0)
(11,18,0)
(28,29,0)
(52,17,0)
(37,33,0)
(7,49,0)
(44,2,0)
(21,39,0)
(13,49,0)
(43,16,1)
(10,24,1)
(44,26,1)
(4,42,1)
(17,27,1)
(2,21,1)
(26,23,1)
(14,30,1)
(48,52,1)
(15,18,1)
(53,58,1)
(58,43,1)
(42,56,1)
(17,18,1)
(1,25,1)
(14,56,1)
(36,6,1)
(29,28,1)
(6,29,1)
(56,50,1)
(22,49,1)
(31,15,1)
(47,36,1)
(17,34,1)
(49,7,1)
(15,48,1)
(34,10,1)
(44,34,1)
(28,55,1)
(23,47,1)
(21,39,1)
(27,22,1)
(20,53,1)
(7,13,1)
(55,20,1)
(50,57,1)
(6,18,1)
(49,18,1)
(17,2,1)
(44,2,1)
(59,11,1)
(57,2,1)
(21,9,1)
(54,44,1)
(30,4,1)
(31,18,1)
(13,6,1)
(9,12,1)
(35,31,1)
(25,40,1)
(18,59,1)
(6,35,1)
(40,41,1)
(12,1,1)
(56,2,1)
(53,14,1)
(16,34,1)
(41,58,1)
(11,29,1)
(52,17,1)
(57,58,2)
(15,6,2)
(9,58,2)
(42,56,2)
(15,18,2)
(30,4,2)
(35,6,2)
(21,58,2)
(6,18,2)
(1,58,2)
(17,34,2)
(12,58,2)
(56,2,2)
(40,58,2)
(25,58,2)
(49,18,2)
(6,6,2)
(21,9,2)
(49,6,2)
(12,1,2)
(56,58,2)
(31,6,2)
(2,21,2)
(29,28,2)
(21,39,2)
(52,6,2)
(50,58,2)
(22,6,2)
(4,56,2)
(9,12,2)
(17,6,2)
(41,58,2)
(44,2,2)
(14,58,2)
(27,6,2)
(17,2,2)
(52,17,2)
(7,6,2)
(6,29,2)
(48,6,2)
(17,18,2)
(2,58,2)
(44,34,2)
(13,6,2)
(30,56,2)
-----------------------------------
(0,dest)
(1,sizeof(wchar_t)
(2,data = (wchar_t *)
(3,if (data == NULL)
(4,-1)
(5,)
(6,i < destLen)
(7,i)
(8,)
(9,malloc(50*sizeof(wchar_t)
(10,NULL)
(11,i)
(12,50*sizeof(wchar_t)
(13,dest)
(14,\'\\\\0\')
(15,i++)
(16,globalFive)
(17,data[i])
(18,i = 0)
(19,i)
(20,destLen)
(21,(wchar_t *)
(22,data)
(23,printWLine(dest)
(24,data)
(25,wchar_t)
(26,data)
(27,i)
(28,wcslen(dest)
(29,destLen = wcslen(dest)
(30,exit(-1)
(31,i)
(32,data)
(33,)
(34,data = NULL)
(35,destLen)
(36,'\\\\0')
(37,for (i = 0; i < destLen; i++)
(38,)
(39,wchar_t *)
(40,50)
(41,data)
(42,1)
(43,5)
(44,free(data)
(45,'\\\\0')
(46,if(globalFive==5)
(47,dest)
(48,i)
(49,dest[i])
(50,NULL)
(51,)
(52,dest[i] = data[i])
(53,'\\\\0')
(54,RET)
(55,dest)
(56,data == NULL)
(57,data)
(58,globalFive==5)
(59,0)
(60,destLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^