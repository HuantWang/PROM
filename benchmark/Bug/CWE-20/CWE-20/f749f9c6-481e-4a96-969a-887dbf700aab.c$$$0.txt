-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_09_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,61,62,67,69,70,71,75,77,80,85,87
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
64,65
64,66
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_09_bad(){    char * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_09_bad()
CWE416_Use_After_Free__malloc_free_char_09_bad
{    char * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(40,8,0)
(30,39,0)
(30,6,0)
(32,1,0)
(3,39,0)
(3,31,0)
(35,48,0)
(45,3,0)
(7,19,0)
(40,12,0)
(5,48,0)
(26,6,0)
(39,6,0)
(15,11,0)
(37,27,0)
(23,13,0)
(23,27,0)
(34,46,0)
(1,29,0)
(5,36,0)
(22,46,0)
(13,6,0)
(11,8,0)
(8,11,0)
(19,39,0)
(31,3,0)
(24,0,0)
(49,31,0)
(42,5,0)
(25,27,0)
(41,23,0)
(0,11,0)
(4,3,0)
(17,30,0)
(43,32,0)
(14,46,0)
(27,23,0)
(11,0,0)
(12,40,0)
(33,19,0)
(5,39,0)
(47,39,0)
(8,40,0)
(48,46,0)
(21,13,0)
(39,40,0)
(3,6,0)
(40,39,0)
(1,32,0)
(18,48,0)
(16,31,0)
(23,39,0)
(35,18,1)
(8,11,1)
(47,38,1)
(5,42,1)
(7,39,1)
(0,24,1)
(49,4,1)
(16,49,1)
(21,23,1)
(37,41,1)
(48,35,1)
(17,13,1)
(40,8,1)
(2,38,1)
(4,45,1)
(2,30,1)
(9,5,1)
(45,1,1)
(11,0,1)
(19,39,1)
(1,32,1)
(3,31,1)
(42,2,1)
(33,7,1)
(38,48,1)
(5,39,1)
(43,19,1)
(40,12,1)
(23,27,1)
(32,43,1)
(45,19,1)
(13,21,1)
(27,25,1)
(23,39,1)
(3,39,1)
(5,48,1)
(41,3,1)
(31,16,1)
(19,33,1)
(25,37,1)
(24,15,1)
(15,47,1)
(30,39,1)
(9,2,1)
(30,17,1)
(39,40,1)
(21,38,2)
(5,39,2)
(32,19,2)
(5,2,2)
(3,39,2)
(4,38,2)
(49,38,2)
(43,19,2)
(30,39,2)
(8,11,2)
(8,38,2)
(1,32,2)
(16,38,2)
(11,0,2)
(47,38,2)
(24,38,2)
(40,12,2)
(42,2,2)
(19,38,2)
(3,38,2)
(39,40,2)
(41,38,2)
(23,27,2)
(0,38,2)
(17,38,2)
(40,38,2)
(23,38,2)
(27,38,2)
(7,38,2)
(23,39,2)
(39,38,2)
(13,38,2)
(30,38,2)
(31,38,2)
(3,31,2)
(1,19,2)
(33,38,2)
(45,38,2)
(5,48,2)
(25,38,2)
(11,38,2)
(15,38,2)
(40,8,2)
(37,38,2)
(19,39,2)
-----------------------------------
(0,sizeof(char)
(1,exit(-1)
(2,GLOBAL_CONST_TRUE)
(3,memset(data, 'A', 100-1)
(4,'A')
(5,printLine(data)
(6,)
(7,data)
(8,malloc(100*sizeof(char)
(9,RET)
(10,memset(data, \'A\', 100-1)
(11,100*sizeof(char)
(12,char *)
(13,data[100-1] = '\\\\0')
(14,data)
(15,100)
(16,1)
(17,data)
(18,data)
(19,data == NULL)
(20,\'A\')
(21,\'\\\\0\')
(22,if(GLOBAL_CONST_TRUE)
(23,data[100-1])
(24,char)
(25,1)
(26,if (data == NULL)
(27,100-1)
(28,data[100-1] = \'\\\\0\')
(29,)
(30,free(data)
(31,100-1)
(32,-1)
(33,NULL)
(34,if(GLOBAL_CONST_TRUE)
(35,NULL)
(36,)
(37,100)
(38,GLOBAL_CONST_TRUE)
(39,data = (char *)
(40,(char *)
(41,data)
(42,data)
(43,1)
(44,'\\\\0')
(45,data)
(46,)
(47,data)
(48,data = NULL)
(49,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^