-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        wcsncat(data, source, 100);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
63,64
64,65
64,66
65,66
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
97,98
97,99
97,100
97,101
98,99
100,101
102,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,61,62,66,67,68,72,74,76,80,82,83,85,86,91,93,94,95,99,101,103,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
84,85
84,86
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcsncat(data, source, 100);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncat(data, source, 100);
wcsncat(data, source, 100)
wcsncat
wcsncat
data
data
source
source
100
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,1,0)
(27,11,0)
(0,18,0)
(25,30,0)
(29,12,0)
(13,3,0)
(34,30,0)
(20,18,0)
(13,2,0)
(40,29,0)
(2,13,0)
(1,11,0)
(7,36,0)
(26,42,0)
(5,11,0)
(13,28,0)
(6,12,0)
(9,11,0)
(28,11,0)
(32,38,0)
(35,30,0)
(14,12,0)
(24,12,0)
(22,11,0)
(21,37,0)
(8,11,0)
(15,42,0)
(23,6,0)
(10,32,0)
(4,28,0)
(12,42,0)
(38,41,0)
(3,13,0)
(18,28,0)
(29,28,0)
(36,37,0)
(3,37,0)
(34,28,0)
(33,34,0)
(16,34,0)
(37,36,0)
(6,30,0)
(6,28,0)
(28,13,0)
(29,30,0)
(34,12,0)
(30,42,0)
(39,11,0)
(38,32,0)
(37,3,0)
(17,34,0)
(40,34,1)
(21,4,1)
(18,28,1)
(19,6,1)
(34,30,1)
(30,35,1)
(24,27,1)
(27,9,1)
(29,28,1)
(34,16,1)
(13,2,1)
(37,36,1)
(9,18,1)
(6,30,1)
(31,30,1)
(38,32,1)
(17,24,1)
(28,13,1)
(7,21,1)
(43,31,1)
(13,3,1)
(24,39,1)
(6,23,1)
(0,28,1)
(18,20,1)
(29,40,1)
(39,1,1)
(10,18,1)
(32,10,1)
(34,28,1)
(29,30,1)
(35,25,1)
(9,38,1)
(4,31,1)
(1,43,1)
(36,7,1)
(3,37,1)
(16,33,1)
(6,28,1)
(23,29,1)
(33,17,1)
(20,0,1)
(38,32,2)
(28,31,2)
(10,18,2)
(0,31,2)
(39,31,2)
(7,31,2)
(43,31,2)
(28,13,2)
(21,31,2)
(13,3,2)
(18,28,2)
(6,28,2)
(18,31,2)
(20,31,2)
(1,31,2)
(37,36,2)
(29,28,2)
(37,31,2)
(4,31,2)
(6,30,2)
(38,18,2)
(3,31,2)
(32,18,2)
(34,28,2)
(34,30,2)
(9,31,2)
(13,2,2)
(3,37,2)
(13,31,2)
(27,31,2)
(36,31,2)
(29,30,2)
-----------------------------------
(0,data)
(1,printLine("Benign, fixed string")
(2,wchar_t *)
(3,malloc(50*sizeof(wchar_t)
(4,data)
(5,if (data == NULL)
(6,free(data)
(7,wchar_t)
(8,case 6:)
(9,\\\'\\\\0\\\')
(10,1)
(11,)
(12,)
(13,(wchar_t *)
(14,source)
(15,switch(6)
(16,100)
(17,data)
(18,data == NULL)
(19,RET)
(20,NULL)
(21,50)
(22,default:)
(23,data)
(24,\\\'\\\\0\\\')
(25,data)
(26,data)
(27,break;)
(28,data = (wchar_t *)
(29,printWLine(data)
(30,data = NULL)
(31,6)
(32,-1)
(33,source)
(34,wcsncat(data, source, 100)
(35,NULL)
(36,sizeof(wchar_t)
(37,50*sizeof(wchar_t)
(38,exit(-1)
(39,break;)
(40,data)
(41,)
(42,)
(43,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^