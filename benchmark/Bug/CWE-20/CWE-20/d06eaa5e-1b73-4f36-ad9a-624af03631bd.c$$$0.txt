-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
84,85
84,86
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(17,44,0)
(28,20,0)
(20,30,0)
(40,29,0)
(13,40,0)
(8,36,0)
(51,47,0)
(41,25,0)
(5,22,0)
(38,46,0)
(24,1,0)
(12,52,0)
(15,42,0)
(37,36,0)
(40,1,0)
(43,2,0)
(33,1,0)
(54,42,0)
(14,22,0)
(7,31,0)
(52,12,0)
(16,25,0)
(54,2,0)
(9,33,0)
(55,33,0)
(42,15,0)
(17,40,0)
(56,28,0)
(0,29,0)
(40,17,0)
(58,52,0)
(48,54,0)
(1,15,0)
(22,3,0)
(59,15,0)
(35,12,0)
(21,1,0)
(1,31,0)
(47,25,0)
(42,54,0)
(17,46,0)
(34,1,0)
(24,7,0)
(46,17,0)
(25,47,0)
(49,21,0)
(10,24,0)
(15,59,0)
(29,7,0)
(2,54,0)
(25,1,0)
(20,28,0)
(32,40,0)
(6,31,0)
(14,1,0)
(50,7,0)
(52,39,0)
(39,7,0)
(14,36,0)
(52,29,0)
(46,1,0)
(25,3,0)
(18,39,0)
(57,12,0)
(40,7,0)
(44,17,0)
(45,31,0)
(21,7,0)
(11,44,0)
(53,47,0)
(36,14,0)
(23,14,0)
(27,31,0)
(19,29,0)
(15,1,0)
(14,36,1)
(8,23,1)
(46,38,1)
(57,35,1)
(4,20,1)
(54,2,1)
(5,14,1)
(21,1,1)
(33,1,1)
(4,33,1)
(40,29,1)
(36,37,1)
(20,28,1)
(10,39,1)
(24,10,1)
(51,53,1)
(25,47,1)
(9,55,1)
(1,15,1)
(58,40,1)
(22,5,1)
(52,12,1)
(24,1,1)
(35,58,1)
(17,46,1)
(11,46,1)
(40,1,1)
(32,13,1)
(41,16,1)
(16,4,1)
(37,8,1)
(53,41,1)
(0,19,1)
(55,1,1)
(39,18,1)
(43,48,1)
(17,44,1)
(48,34,1)
(33,9,1)
(15,59,1)
(40,17,1)
(13,29,1)
(38,32,1)
(15,42,1)
(42,54,1)
(2,43,1)
(23,25,1)
(28,56,1)
(18,52,1)
(49,24,1)
(46,1,1)
(29,0,1)
(19,22,1)
(25,1,1)
(47,51,1)
(26,21,1)
(19,4,1)
(12,57,1)
(44,11,1)
(21,49,1)
(56,33,1)
(14,1,1)
(52,29,1)
(20,28,2)
(22,4,2)
(47,4,2)
(15,59,2)
(25,47,2)
(24,1,2)
(52,12,2)
(33,1,2)
(40,1,2)
(42,54,2)
(54,2,2)
(51,4,2)
(8,4,2)
(25,1,2)
(21,1,2)
(20,33,2)
(16,4,2)
(25,4,2)
(15,42,2)
(53,4,2)
(5,4,2)
(14,1,2)
(28,33,2)
(14,4,2)
(17,44,2)
(41,4,2)
(40,29,2)
(14,36,2)
(17,46,2)
(40,17,2)
(1,15,2)
(52,29,2)
(36,4,2)
(23,4,2)
(56,33,2)
(46,1,2)
(37,4,2)
-----------------------------------
(0,"")
(1,data = (char *)
(2,sizeof(char)
(3,)
(4,STATIC_CONST_TRUE)
(5,\\\'\\\\0\\\')
(6,if(STATIC_CONST_TRUE)
(7,)
(8,100)
(9,NULL)
(10,data)
(11,char)
(12,50-1)
(13,dest)
(14,data[100-1])
(15,(char *)
(16,data)
(17,strlen(data)
(18,\\\'\\\\0\\\')
(19,dest)
(20,exit(-1)
(21,free(data)
(22,data[100-1] = \\\'\\\\0\\\')
(23,data)
(24,printLine(data)
(25,memset(data, \\\'A\\\', 100-1)
(26,RET)
(27,data)
(28,-1)
(29,dest[50] = "")
(30,)
(31,)
(32,data)
(33,data == NULL)
(34,data)
(35,50)
(36,100-1)
(37,1)
(38,data)
(39,dest[50-1] = \\\'\\\\0\\\')
(40,memcpy(dest, data, strlen(data)
(41,\\\'A\\\')
(42,malloc(100*sizeof(char)
(43,char)
(44,sizeof(char)
(45,if (data == NULL)
(46,strlen(data)
(47,100-1)
(48,100)
(49,data)
(50,dest)
(51,1)
(52,dest[50-1])
(53,100)
(54,100*sizeof(char)
(55,data)
(56,1)
(57,1)
(58,dest)
(59,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^