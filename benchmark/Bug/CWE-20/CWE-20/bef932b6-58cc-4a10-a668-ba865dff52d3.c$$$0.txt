-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_07_bad()
CWE190_Integer_Overflow__char_max_postinc_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,6,0)
(24,10,0)
(26,18,0)
(23,27,0)
(15,11,0)
(26,10,0)
(6,16,0)
(22,9,0)
(25,18,0)
(18,8,0)
(3,27,0)
(9,18,0)
(9,10,0)
(12,26,0)
(5,2,0)
(10,27,0)
(7,27,0)
(28,6,0)
(19,10,0)
(21,11,0)
(17,6,0)
(13,26,0)
(4,0,0)
(1,2,0)
(26,6,0)
(0,26,0)
(0,18,0)
(1,6,1)
(1,11,1)
(26,12,1)
(22,2,1)
(21,10,1)
(9,22,1)
(12,13,1)
(0,26,1)
(5,1,1)
(9,10,1)
(13,9,1)
(0,4,1)
(6,28,1)
(15,21,1)
(2,5,1)
(26,10,1)
(9,6,1)
(10,19,1)
(26,6,1)
(11,15,1)
(19,24,1)
(4,26,1)
(17,11,1)
(28,17,1)
(14,2,1)
(14,0,1)
(26,2,2)
(6,11,2)
(4,2,2)
(9,6,2)
(0,26,2)
(26,6,2)
(22,2,2)
(0,2,2)
(12,2,2)
(9,10,2)
(28,11,2)
(17,11,2)
(26,10,2)
(9,2,2)
(13,2,2)
-----------------------------------
(0,printHexCharLine(result)
(1,staticFive)
(2,staticFive==5)
(3,data)
(4,result)
(5,5)
(6,data = CHAR_MAX)
(7,if(staticFive==5)
(8,)
(9,data++)
(10,data = ' ')
(11,staticFive==5)
(12,data)
(13,result)
(14,RET)
(15,5)
(16,)
(17,data)
(18,)
(19,' ')
(20,data = \' \')
(21,staticFive)
(22,data)
(23,if(staticFive==5)
(24,data)
(25,result)
(26,result = data)
(27,)
(28,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^