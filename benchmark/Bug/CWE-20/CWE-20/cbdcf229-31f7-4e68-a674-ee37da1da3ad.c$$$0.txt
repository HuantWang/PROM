-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int64_t));
        printLongLongLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
61,62
61,63
61,64
63,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,55,60,62,64,67,71,73,75,77,81,82,86,89,90,94,96
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad(){    int64_t * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad
{    int64_t * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    }    {        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        break;    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        int64_t source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int64_t));        printLongLongLine(data[0]);        free(data);    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int64_t));
memcpy(data, source, 100*sizeof(int64_t))
memcpy
memcpy
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(22,34,0)
(34,9,0)
(38,28,0)
(9,34,0)
(12,19,0)
(28,4,0)
(25,36,0)
(40,11,0)
(21,16,0)
(41,37,0)
(39,12,0)
(27,16,0)
(4,28,0)
(36,11,0)
(33,37,0)
(42,30,0)
(1,28,0)
(17,25,0)
(16,21,0)
(35,11,0)
(5,11,0)
(9,24,0)
(8,21,0)
(14,42,0)
(4,13,0)
(25,11,0)
(31,6,0)
(25,21,0)
(25,42,0)
(10,4,0)
(25,28,0)
(2,6,0)
(32,30,0)
(6,28,0)
(13,4,0)
(43,42,0)
(21,25,0)
(11,30,0)
(4,10,0)
(26,25,0)
(23,30,0)
(1,35,0)
(35,1,0)
(19,12,0)
(5,42,0)
(28,37,0)
(0,5,0)
(5,28,0)
(7,1,0)
(12,13,0)
(1,42,0)
(29,36,0)
(13,12,0)
(18,1,0)
(20,19,0)
(27,8,1)
(36,29,1)
(41,6,1)
(13,12,1)
(25,21,1)
(5,0,1)
(1,42,1)
(12,19,1)
(28,4,1)
(3,5,1)
(31,2,1)
(25,36,1)
(29,41,1)
(39,38,1)
(1,28,1)
(22,6,1)
(0,35,1)
(43,14,1)
(4,13,1)
(5,42,1)
(6,28,1)
(7,18,1)
(18,25,1)
(4,10,1)
(1,7,1)
(41,9,1)
(35,1,1)
(25,42,1)
(15,42,1)
(25,28,1)
(38,15,1)
(21,16,1)
(8,17,1)
(29,15,1)
(16,27,1)
(5,28,1)
(26,36,1)
(2,28,1)
(17,26,1)
(9,34,1)
(34,22,1)
(19,20,1)
(6,31,1)
(20,39,1)
(42,43,1)
(25,36,2)
(6,15,2)
(25,21,2)
(12,15,2)
(9,34,2)
(38,15,2)
(1,42,2)
(12,19,2)
(39,15,2)
(4,10,2)
(5,42,2)
(2,15,2)
(21,16,2)
(35,1,2)
(9,6,2)
(5,28,2)
(4,13,2)
(22,6,2)
(28,4,2)
(19,15,2)
(1,28,2)
(4,15,2)
(13,12,2)
(6,28,2)
(31,15,2)
(25,42,2)
(41,15,2)
(34,6,2)
(28,15,2)
(25,28,2)
(13,15,2)
(20,15,2)
-----------------------------------
(0,data)
(1,data[0])
(2,data)
(3,RET)
(4,(int64_t *)
(5,free(data)
(6,data == NULL)
(7,0)
(8,100)
(9,exit(-1)
(10,int64_t *)
(11,)
(12,50*sizeof(int64_t)
(13,malloc(50*sizeof(int64_t)
(14,data)
(15,1)
(16,sizeof(int64_t)
(17,source)
(18,data)
(19,sizeof(int64_t)
(20,int64_t)
(21,100*sizeof(int64_t)
(22,1)
(23,while(1)
(24,)
(25,memcpy(data, source, 100*sizeof(int64_t)
(26,data)
(27,int64_t)
(28,data = (int64_t *)
(29,source)
(30,)
(31,NULL)
(32,data)
(33,if (data == NULL)
(34,-1)
(35,printLongLongLine(data[0])
(36,source[100] = {0})
(37,)
(38,data)
(39,50)
(40,source)
(41,break;)
(42,data = NULL)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^