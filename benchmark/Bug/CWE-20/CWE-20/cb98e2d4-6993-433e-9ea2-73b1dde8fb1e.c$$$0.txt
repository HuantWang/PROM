-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(29,8,0)
(4,27,0)
(34,0,0)
(35,33,0)
(0,10,0)
(16,14,0)
(25,13,0)
(19,8,0)
(1,29,0)
(29,14,0)
(7,3,0)
(33,14,0)
(2,3,0)
(36,18,0)
(13,14,0)
(4,37,0)
(28,11,0)
(11,28,0)
(31,13,0)
(14,8,0)
(5,20,0)
(6,24,0)
(7,28,0)
(9,4,0)
(26,5,0)
(24,3,0)
(21,12,0)
(14,28,0)
(5,26,0)
(3,7,0)
(13,8,0)
(23,33,0)
(18,14,0)
(12,32,0)
(28,14,0)
(3,37,0)
(27,4,0)
(28,7,0)
(18,8,0)
(30,27,0)
(17,0,0)
(22,26,0)
(3,24,0)
(18,14,1)
(25,33,1)
(12,21,1)
(7,3,1)
(5,26,1)
(35,14,1)
(15,29,1)
(30,9,1)
(4,27,1)
(3,37,1)
(22,33,1)
(18,36,1)
(13,14,1)
(29,1,1)
(1,18,1)
(31,25,1)
(36,13,1)
(33,23,1)
(27,30,1)
(25,5,1)
(28,11,1)
(2,16,1)
(14,28,1)
(21,4,1)
(3,24,1)
(23,35,1)
(24,6,1)
(29,14,1)
(16,4,1)
(15,12,1)
(26,22,1)
(6,2,1)
(13,31,1)
(4,37,1)
(33,14,1)
(28,7,1)
(28,7,2)
(25,4,2)
(5,33,2)
(33,4,2)
(18,14,2)
(3,37,2)
(28,11,2)
(16,4,2)
(21,4,2)
(36,4,2)
(23,4,2)
(6,4,2)
(35,4,2)
(14,4,2)
(33,14,2)
(26,33,2)
(24,4,2)
(7,3,2)
(13,4,2)
(14,28,2)
(13,14,2)
(3,24,2)
(5,26,2)
(22,33,2)
(7,4,2)
(3,4,2)
(18,4,2)
(12,4,2)
(31,4,2)
(29,4,2)
(4,37,2)
(29,14,2)
(1,4,2)
(2,4,2)
(4,27,2)
(28,4,2)
-----------------------------------
(0,)
(1,myString)
(2,data)
(3,data*sizeof(char)
(4,data > strlen(HELLO_STRING)
(5,exit(-1)
(6,char)
(7,malloc(data*sizeof(char)
(8,)
(9,data)
(10,)
(11,char *)
(12,printLine("Input is less than the length of the source string")
(13,strcpy(myString, HELLO_STRING)
(14,myString = (char *)
(15,RET)
(16,myString)
(17,if (data > strlen(HELLO_STRING)
(18,printLine(myString)
(19,if (myString == NULL)
(20,)
(21,"Input is less than the length of the source string")
(22,1)
(23,NULL)
(24,sizeof(char)
(25,myString)
(26,-1)
(27,strlen(HELLO_STRING)
(28,(char *)
(29,free(myString)
(30,HELLO_STRING)
(31,HELLO_STRING)
(32,)
(33,myString == NULL)
(34,myString)
(35,myString)
(36,myString)
(37,size_t data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^