-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31_bad()
{
    int64_t * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (int64_t *)malloc(50*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    {
        int64_t * dataCopy = data;
        int64_t * data = dataCopy;
        {
            int64_t source[100] = {0}; /* fill with 0's */
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printLongLongLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
53,54
54,55
54,56
55,56
57,58
57,59
57,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
67,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
76,77
78,79
78,80
78,81
80,81
82,83
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
106,107
107,108
107,109
108,109
108,110
109,110
111,112
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,56,58,59,62,66,68,69,72,77,79,81,84,89,91,96,97,100,101,104,110,112,115,117,121,124,125,129,131
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
94,95
94,96
98,99
98,100
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31_bad(){    int64_t * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int64_t *)malloc(50*sizeof(int64_t));    if (data == NULL) {exit(-1);}    {        int64_t * dataCopy = data;        int64_t * data = dataCopy;        {            int64_t source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printLongLongLine(data[0]);                free(data);            }        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31_bad
{    int64_t * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int64_t *)malloc(50*sizeof(int64_t));    if (data == NULL) {exit(-1);}    {        int64_t * dataCopy = data;        int64_t * data = dataCopy;        {            int64_t source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printLongLongLine(data[0]);                free(data);            }        }    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t * dataCopy = data;        int64_t * data = dataCopy;        {            int64_t source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printLongLongLine(data[0]);                free(data);            }        }    }
int64_t * dataCopy = data;
int64_t * dataCopy = data;
int64_t
int64_t
* dataCopy = data
*
dataCopy
= data
data
data
int64_t * data = dataCopy;
int64_t * data = dataCopy;
int64_t
int64_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            int64_t source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printLongLongLine(data[0]);                free(data);            }        }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printLongLongLine(data[0]);                free(data);            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    data[i] = source[i];                }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(46,17,0)
(3,27,0)
(38,27,0)
(25,35,0)
(55,3,0)
(46,35,0)
(0,41,0)
(3,57,0)
(35,24,0)
(13,57,0)
(36,2,0)
(7,31,0)
(21,39,0)
(8,3,0)
(45,37,0)
(32,46,0)
(28,10,0)
(58,57,0)
(20,28,0)
(30,33,0)
(52,11,0)
(41,14,0)
(47,57,0)
(48,20,0)
(31,36,0)
(36,31,0)
(44,47,0)
(6,46,0)
(2,36,0)
(9,14,0)
(17,24,0)
(23,47,0)
(3,8,0)
(42,20,0)
(1,35,0)
(20,14,0)
(14,35,0)
(49,14,0)
(10,1,0)
(33,30,0)
(2,17,0)
(56,37,0)
(8,15,0)
(39,24,0)
(14,46,0)
(12,1,0)
(34,57,0)
(5,39,0)
(17,2,0)
(18,10,0)
(41,10,0)
(51,7,0)
(50,24,0)
(4,31,0)
(26,30,0)
(27,1,0)
(22,17,0)
(29,10,0)
(40,11,0)
(47,8,0)
(11,17,0)
(47,14,0)
(28,20,0)
(33,59,0)
(2,54,0)
(19,58,0)
(37,57,0)
(16,35,0)
(43,3,0)
(31,7,0)
(53,24,0)
(54,2,0)
(32,11,1)
(11,17,1)
(58,57,1)
(30,26,1)
(52,40,1)
(7,51,1)
(20,14,1)
(47,23,1)
(14,49,1)
(19,8,1)
(57,13,1)
(20,42,1)
(23,44,1)
(43,47,1)
(21,5,1)
(38,14,1)
(2,36,1)
(14,46,1)
(60,41,1)
(37,45,1)
(13,34,1)
(33,30,1)
(3,27,1)
(48,37,1)
(22,39,1)
(31,7,1)
(56,57,1)
(28,20,1)
(46,6,1)
(27,38,1)
(44,37,1)
(55,43,1)
(42,48,1)
(11,52,1)
(47,14,1)
(47,57,1)
(3,57,1)
(9,46,1)
(37,57,1)
(4,22,1)
(0,28,1)
(56,58,1)
(41,0,1)
(49,9,1)
(46,17,1)
(26,11,1)
(3,55,1)
(2,54,1)
(58,19,1)
(34,27,1)
(41,14,1)
(36,31,1)
(45,56,1)
(39,21,1)
(51,4,1)
(8,3,1)
(40,17,1)
(17,2,1)
(32,33,1)
(6,32,1)
(58,37,2)
(17,2,2)
(30,11,2)
(11,17,2)
(3,37,2)
(56,37,2)
(43,37,2)
(33,11,2)
(41,14,2)
(47,57,2)
(37,37,2)
(46,17,2)
(31,7,2)
(28,20,2)
(8,3,2)
(45,37,2)
(20,14,2)
(44,37,2)
(47,37,2)
(36,31,2)
(58,57,2)
(47,14,2)
(33,30,2)
(26,11,2)
(19,37,2)
(8,37,2)
(2,36,2)
(55,37,2)
(2,54,2)
(3,57,2)
(37,57,2)
(23,37,2)
(14,46,2)
(3,27,2)
-----------------------------------
(0,data)
(1,)
(2,(int64_t *)
(3,source[i])
(4,50)
(5,data)
(6,data)
(7,sizeof(int64_t)
(8,data[i] = source[i])
(9,data)
(10,)
(11,data == NULL)
(12,source)
(13,0)
(14,* data = dataCopy)
(15,)
(16,data)
(17,data = (int64_t *)
(18,for (i = 0; i < 100; i++)
(19,i)
(20,data[0])
(21,NULL)
(22,data)
(23,i)
(24,)
(25,dataCopy)
(26,1)
(27,source[100] = {0})
(28,printLongLongLine(data[0])
(29,i)
(30,-1)
(31,50*sizeof(int64_t)
(32,dataCopy)
(33,exit(-1)
(34,i)
(35,)
(36,malloc(50*sizeof(int64_t)
(37,i < 100)
(38,source)
(39,data = NULL)
(40,data)
(41,free(data)
(42,0)
(43,source)
(44,data)
(45,100)
(46,* dataCopy = data)
(47,data[i])
(48,data)
(49,dataCopy)
(50,if (data == NULL)
(51,int64_t)
(52,NULL)
(53,data)
(54,int64_t *)
(55,i)
(56,i)
(57,i = 0)
(58,i++)
(59,)
(60,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^