-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(1,44,0)
(47,18,0)
(39,18,0)
(38,51,0)
(56,28,0)
(61,45,0)
(51,17,0)
(15,61,0)
(4,16,0)
(44,45,0)
(24,45,0)
(49,45,0)
(33,20,0)
(31,4,0)
(60,14,0)
(44,61,0)
(43,35,0)
(51,38,0)
(52,53,0)
(11,34,0)
(46,14,0)
(6,20,0)
(36,41,0)
(34,59,0)
(48,45,0)
(51,14,0)
(62,12,0)
(19,11,0)
(30,41,0)
(18,39,0)
(10,45,0)
(58,51,0)
(66,36,0)
(59,32,0)
(65,30,0)
(8,59,0)
(0,52,0)
(50,46,0)
(20,61,0)
(26,41,0)
(29,41,0)
(20,16,0)
(21,14,0)
(11,19,0)
(39,54,0)
(34,11,0)
(7,30,0)
(32,59,0)
(23,45,0)
(20,35,0)
(35,3,0)
(57,41,0)
(11,61,0)
(25,3,0)
(30,61,0)
(17,22,0)
(51,61,0)
(38,40,0)
(13,36,0)
(45,9,0)
(59,34,0)
(12,14,0)
(64,4,0)
(28,61,0)
(37,32,0)
(55,26,0)
(42,17,0)
(30,17,0)
(63,28,0)
(61,11,0)
(2,12,0)
(5,51,0)
(26,55,1)
(28,56,1)
(42,30,1)
(20,33,1)
(58,12,1)
(63,61,1)
(51,5,1)
(17,42,1)
(62,14,1)
(7,36,1)
(29,39,1)
(36,41,1)
(12,2,1)
(30,41,1)
(46,50,1)
(57,29,1)
(18,47,1)
(1,12,1)
(32,37,1)
(30,65,1)
(62,46,1)
(61,11,1)
(60,35,1)
(20,16,1)
(56,63,1)
(37,8,1)
(4,64,1)
(44,61,1)
(33,6,1)
(21,60,1)
(11,19,1)
(66,41,1)
(2,62,1)
(29,28,1)
(12,14,1)
(66,26,1)
(38,51,1)
(41,57,1)
(28,61,1)
(35,43,1)
(44,1,1)
(30,61,1)
(26,41,1)
(31,36,1)
(65,7,1)
(43,20,1)
(1,52,1)
(39,18,1)
(11,34,1)
(0,4,1)
(64,31,1)
(46,14,1)
(4,16,1)
(55,17,1)
(59,32,1)
(51,17,1)
(6,4,1)
(27,44,1)
(36,13,1)
(13,66,1)
(34,59,1)
(47,28,1)
(51,61,1)
(8,15,1)
(5,58,1)
(14,21,1)
(52,0,1)
(51,14,1)
(20,61,1)
(50,38,1)
(14,4,2)
(18,28,2)
(55,36,2)
(5,12,2)
(51,12,2)
(11,34,2)
(33,4,2)
(12,12,2)
(51,17,2)
(58,12,2)
(62,12,2)
(59,32,2)
(39,18,2)
(4,16,2)
(34,59,2)
(44,61,2)
(20,4,2)
(39,28,2)
(42,36,2)
(35,4,2)
(30,61,2)
(43,4,2)
(38,12,2)
(11,19,2)
(0,4,2)
(6,4,2)
(2,4,2)
(47,28,2)
(20,61,2)
(12,4,2)
(62,4,2)
(12,14,2)
(36,41,2)
(38,51,2)
(61,11,2)
(21,4,2)
(65,36,2)
(60,4,2)
(7,36,2)
(26,41,2)
(28,61,2)
(26,36,2)
(52,4,2)
(2,12,2)
(20,16,2)
(30,36,2)
(46,12,2)
(50,12,2)
(13,36,2)
(46,14,2)
(30,41,2)
(17,36,2)
(51,61,2)
(66,36,2)
(51,14,2)
(36,36,2)
-----------------------------------
(0,"ERROR: Array index is negative.")
(1,buffer)
(2,10)
(3,)
(4,data >= 0)
(5,i)
(6,buffer)
(7,buffer)
(8,10)
(9,)
(10,for (i = 0; i < 10; i++)
(11,(int *)
(12,i < 10)
(13,10)
(14,i = 0)
(15,buffer)
(16,int data)
(17,buffer[i] = 0)
(18,-1)
(19,int *)
(20,buffer[data])
(21,0)
(22,)
(23,if (data >= 0)
(24,i)
(25,for(i = 0; i < 10; i++)
(26,i++)
(27,RET)
(28,buffer == NULL)
(29,i)
(30,buffer[i])
(31,data)
(32,sizeof(int)
(33,data)
(34,malloc(10 * sizeof(int)
(35,buffer[data] = 1)
(36,i < 10)
(37,int)
(38,printIntLine(buffer[i])
(39,exit(-1)
(40,)
(41,i = 0)
(42,0)
(43,1)
(44,free(buffer)
(45,)
(46,i++)
(47,1)
(48,if (buffer == NULL)
(49,buffer)
(50,i)
(51,buffer[i])
(52,printLine("ERROR: Array index is negative.")
(53,)
(54,)
(55,i)
(56,NULL)
(57,0)
(58,buffer)
(59,10 * sizeof(int)
(60,i)
(61,* buffer = (int *)
(62,i)
(63,buffer)
(64,0)
(65,i)
(66,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^