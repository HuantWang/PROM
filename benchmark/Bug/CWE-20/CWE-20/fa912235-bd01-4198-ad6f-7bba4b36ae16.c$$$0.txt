-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_wchar_t_16_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
59,60
59,61
61,62
61,63
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,60,65,67,68
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE415_Double_Free__malloc_free_wchar_t_16_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    }}
void
CWE415_Double_Free__malloc_free_wchar_t_16_bad()
CWE415_Double_Free__malloc_free_wchar_t_16_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    }
1
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
break;
while(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    }
1
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    }
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(3,32,0)
(21,32,0)
(15,31,0)
(7,14,0)
(24,14,0)
(24,1,0)
(9,14,0)
(2,24,0)
(20,11,0)
(14,24,0)
(6,16,0)
(24,2,0)
(30,9,0)
(26,10,0)
(1,24,0)
(2,32,0)
(14,10,0)
(7,16,0)
(27,14,0)
(5,11,0)
(31,25,0)
(16,11,0)
(13,15,0)
(32,21,0)
(29,21,0)
(17,7,0)
(28,11,0)
(18,10,0)
(33,14,0)
(33,10,0)
(12,33,0)
(31,15,0)
(7,34,0)
(23,34,0)
(8,9,0)
(4,16,0)
(32,2,0)
(7,17,1)
(22,23,1)
(16,6,1)
(17,0,1)
(6,4,1)
(8,30,1)
(2,32,1)
(7,14,1)
(12,9,1)
(19,16,1)
(23,7,1)
(12,31,1)
(26,33,1)
(3,27,1)
(14,24,1)
(9,8,1)
(29,3,1)
(13,9,1)
(0,19,1)
(33,12,1)
(32,21,1)
(27,19,1)
(0,26,1)
(22,0,1)
(33,14,1)
(24,1,1)
(24,2,1)
(31,15,1)
(9,14,1)
(15,13,1)
(7,16,1)
(21,29,1)
(30,14,1)
(3,19,2)
(24,1,2)
(13,9,2)
(21,19,2)
(31,15,2)
(31,9,2)
(33,19,2)
(23,0,2)
(33,14,2)
(32,21,2)
(24,19,2)
(2,19,2)
(7,16,2)
(7,14,2)
(29,19,2)
(30,19,2)
(2,32,2)
(32,19,2)
(24,2,2)
(8,19,2)
(9,19,2)
(7,0,2)
(12,19,2)
(14,24,2)
(27,19,2)
(9,14,2)
(14,19,2)
(15,9,2)
(17,0,2)
(26,19,2)
-----------------------------------
(0,1)
(1,wchar_t *)
(2,malloc(100*sizeof(wchar_t)
(3,100)
(4,data)
(5,data)
(6,NULL)
(7,free(data)
(8,NULL)
(9,data == NULL)
(10,)
(11,)
(12,data)
(13,1)
(14,data = (wchar_t *)
(15,-1)
(16,data = NULL)
(17,data)
(18,if (data == NULL)
(19,1)
(20,while(1)
(21,sizeof(wchar_t)
(22,RET)
(23,break;)
(24,(wchar_t *)
(25,)
(26,break;)
(27,data)
(28,while(1)
(29,wchar_t)
(30,data)
(31,exit(-1)
(32,100*sizeof(wchar_t)
(33,free(data)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^