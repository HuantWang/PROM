-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
63,64
64,65
64,66
65,66
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
97,98
97,99
97,100
97,101
97,102
98,99
100,101
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,61,62,66,67,68,72,74,76,80,82,83,85,86,91,93,94,95,99,101,102,103,105,109,111,115,117
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
84,85
84,86
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,49,0)
(48,35,0)
(33,43,0)
(17,18,0)
(6,48,0)
(48,6,0)
(50,33,0)
(40,18,0)
(10,27,0)
(39,51,0)
(54,57,0)
(58,56,0)
(15,48,0)
(49,32,0)
(47,6,0)
(1,2,0)
(9,56,0)
(19,27,0)
(37,27,0)
(2,60,0)
(11,37,0)
(23,54,0)
(22,32,0)
(59,18,0)
(32,49,0)
(24,27,0)
(0,37,0)
(17,43,0)
(6,27,0)
(54,35,0)
(8,33,0)
(45,33,0)
(3,47,0)
(25,47,0)
(43,16,0)
(57,54,0)
(44,16,0)
(59,43,0)
(33,18,0)
(32,18,0)
(17,6,0)
(7,59,0)
(30,18,0)
(31,6,0)
(42,11,0)
(55,33,0)
(18,16,0)
(13,49,0)
(34,43,0)
(38,27,0)
(51,27,0)
(14,40,0)
(29,16,0)
(36,9,0)
(5,17,0)
(21,32,0)
(41,56,0)
(20,11,0)
(60,2,0)
(11,6,0)
(9,40,0)
(28,57,0)
(60,46,0)
(26,43,0)
(56,9,0)
(35,54,0)
(35,48,0)
(59,6,0)
(53,27,0)
(48,15,0)
(33,6,0)
(4,59,1)
(0,11,1)
(7,17,1)
(35,54,1)
(58,41,1)
(51,39,1)
(11,42,1)
(40,14,1)
(21,24,1)
(28,23,1)
(1,47,1)
(6,48,1)
(12,22,1)
(42,20,1)
(52,43,1)
(43,26,1)
(50,40,1)
(17,6,1)
(9,56,1)
(20,47,1)
(26,34,1)
(17,43,1)
(39,52,1)
(22,21,1)
(2,1,1)
(36,32,1)
(24,37,1)
(5,33,1)
(23,31,1)
(59,6,1)
(25,6,1)
(54,57,1)
(56,58,1)
(48,15,1)
(59,7,1)
(31,52,1)
(32,49,1)
(37,0,1)
(33,6,1)
(47,6,1)
(33,43,1)
(17,5,1)
(41,36,1)
(59,43,1)
(8,55,1)
(33,45,1)
(3,25,1)
(21,10,1)
(57,28,1)
(47,3,1)
(55,50,1)
(48,35,1)
(60,2,1)
(13,12,1)
(10,51,1)
(11,6,1)
(14,9,1)
(45,8,1)
(49,13,1)
(20,60,1)
(37,52,2)
(11,52,2)
(28,52,2)
(11,6,2)
(32,49,2)
(59,6,2)
(42,52,2)
(6,48,2)
(35,54,2)
(3,52,2)
(25,52,2)
(60,2,2)
(24,52,2)
(39,52,2)
(54,52,2)
(10,52,2)
(47,6,2)
(6,52,2)
(57,52,2)
(60,47,2)
(33,43,2)
(35,52,2)
(47,52,2)
(48,35,2)
(9,56,2)
(1,47,2)
(2,47,2)
(0,52,2)
(59,43,2)
(23,52,2)
(33,6,2)
(17,6,2)
(20,52,2)
(51,52,2)
(17,43,2)
(54,57,2)
(48,52,2)
(48,15,2)
(31,52,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,1)
(2,-1)
(3,NULL)
(4,RET)
(5,data)
(6,data = (char *)
(7,data)
(8,"%s")
(9,source[100-1])
(10,break;)
(11,data[0])
(12,100)
(13,1)
(14,\\\'\\\\0\\\')
(15,char *)
(16,)
(17,printLine(data)
(18,)
(19,default:)
(20,data)
(21,source)
(22,\\\'C\\\')
(23,50)
(24,break;)
(25,data)
(26,NULL)
(27,)
(28,char)
(29,data)
(30,source)
(31,data)
(32,memset(source, \\\'C\\\', 100-1)
(33,SNPRINTF(data, 100, "%s", source)
(34,data)
(35,malloc(50*sizeof(char)
(36,source)
(37,data[0] = \\\'\\\\0\\\')
(38,case 6:)
(39,"Benign, fixed string")
(40,source[100-1] = \\\'\\\\0\\\')
(41,100)
(42,0)
(43,data = NULL)
(44,switch(6)
(45,source)
(46,)
(47,data == NULL)
(48,(char *)
(49,100-1)
(50,data)
(51,printLine("Benign, fixed string")
(52,6)
(53,if (data == NULL)
(54,50*sizeof(char)
(55,100)
(56,100-1)
(57,sizeof(char)
(58,1)
(59,free(data)
(60,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^