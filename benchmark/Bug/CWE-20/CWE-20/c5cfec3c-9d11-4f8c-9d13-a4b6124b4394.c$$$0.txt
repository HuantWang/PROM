-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use an invalid index */
        data = 10;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
57,58
58,59
58,60
61,62
61,63
62,63
62,64
63,64
65,66
67,68
68,69
69,70
69,71
70,71
72,73
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
87,88
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
96,98
96,99
97,98
97,99
98,99
101,102
101,103
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
110,112
110,113
110,114
111,112
112,113
112,114
113,114
116,117
116,118
117,118
120,121
121,122
123,124
124,125
125,126
125,127
126,127
128,129
128,130
129,130
131,132
133,134
134,135
135,136
135,137
136,137
139,140
140,141
140,142
141,142
143,144
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,31,32,37,39,42,44,45,49,51,54,56,59,60,64,66,71,73,78,79,82,83,86,92,94,95,99,100,106,108,109,114,115,118,119,122,127,130,132,137,138,142,144
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
29,30
29,31
55,56
55,57
62,63
62,64
76,77
76,78
80,81
80,82
89,90
89,91
97,98
97,99
103,104
103,105
112,113
112,114
116,117
116,118
-----guardedBy-----
99,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
data = 10;
data = 10
data
data
10
if(STATIC_CONST_FIVE==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(70,27,0)
(2,61,0)
(4,11,0)
(15,34,0)
(33,69,0)
(13,69,0)
(60,57,0)
(57,80,0)
(1,0,0)
(21,33,0)
(54,7,0)
(65,21,0)
(41,80,0)
(21,11,0)
(53,17,0)
(17,58,0)
(47,26,0)
(74,41,0)
(41,33,0)
(52,37,0)
(44,61,0)
(14,59,0)
(20,69,0)
(17,33,0)
(76,41,0)
(0,58,0)
(26,58,0)
(6,69,0)
(54,43,0)
(63,4,0)
(82,43,0)
(71,69,0)
(32,51,0)
(45,11,0)
(83,17,0)
(80,27,0)
(43,54,0)
(49,69,0)
(21,5,0)
(67,33,0)
(7,35,0)
(56,5,0)
(22,42,0)
(43,31,0)
(35,7,0)
(17,16,0)
(17,5,0)
(64,29,0)
(31,43,0)
(19,57,0)
(38,10,0)
(9,11,0)
(69,8,0)
(7,33,0)
(16,17,0)
(57,59,0)
(62,26,0)
(25,11,0)
(28,67,0)
(80,10,0)
(71,33,0)
(24,33,0)
(12,69,0)
(41,51,0)
(81,64,0)
(7,54,0)
(3,27,0)
(68,45,0)
(40,80,0)
(78,50,0)
(75,31,0)
(41,59,0)
(51,50,0)
(10,80,0)
(36,58,0)
(30,4,0)
(39,67,0)
(79,59,0)
(59,48,0)
(33,7,0)
(73,71,0)
(5,66,0)
(77,27,0)
(16,46,0)
(18,21,0)
(55,34,0)
(23,58,0)
(52,42,0)
(42,52,0)
(41,76,1)
(17,5,1)
(0,58,1)
(11,9,1)
(57,80,1)
(62,58,1)
(17,53,1)
(61,2,1)
(21,33,1)
(5,56,1)
(68,5,1)
(82,24,1)
(41,80,1)
(59,79,1)
(30,63,1)
(72,71,1)
(0,1,1)
(1,16,1)
(31,75,1)
(10,38,1)
(22,67,1)
(7,54,1)
(63,45,1)
(42,22,1)
(83,26,1)
(9,25,1)
(51,32,1)
(80,10,1)
(17,58,1)
(4,30,1)
(16,17,1)
(33,7,1)
(81,57,1)
(45,11,1)
(75,82,1)
(7,35,1)
(63,11,1)
(26,58,1)
(67,28,1)
(60,19,1)
(14,61,1)
(73,26,1)
(26,47,1)
(34,55,1)
(2,44,1)
(32,41,1)
(36,23,1)
(54,43,1)
(43,31,1)
(17,33,1)
(28,39,1)
(15,59,1)
(45,68,1)
(57,60,1)
(44,80,1)
(4,11,1)
(65,4,1)
(39,33,1)
(62,0,1)
(72,34,1)
(19,4,1)
(73,64,1)
(41,33,1)
(53,83,1)
(25,67,1)
(76,74,1)
(71,33,1)
(71,73,1)
(79,14,1)
(56,21,1)
(41,59,1)
(38,40,1)
(15,61,1)
(25,52,1)
(67,33,1)
(64,81,1)
(21,18,1)
(55,15,1)
(57,59,1)
(58,36,1)
(74,57,1)
(18,65,1)
(52,42,1)
(23,51,1)
(24,34,1)
(47,62,1)
(21,11,1)
(79,61,2)
(81,57,2)
(7,34,2)
(42,67,2)
(31,34,2)
(56,4,2)
(43,31,2)
(60,34,2)
(82,34,2)
(76,57,2)
(43,34,2)
(41,33,2)
(41,57,2)
(47,57,2)
(22,67,2)
(57,34,2)
(75,34,2)
(21,33,2)
(67,34,2)
(26,57,2)
(45,4,2)
(57,59,2)
(17,5,2)
(5,4,2)
(4,34,2)
(14,61,2)
(73,34,2)
(17,58,2)
(36,57,2)
(41,80,2)
(0,58,2)
(11,34,2)
(16,17,2)
(52,67,2)
(39,34,2)
(67,33,2)
(4,11,2)
(19,34,2)
(33,34,2)
(21,11,2)
(68,4,2)
(23,57,2)
(28,34,2)
(24,34,2)
(7,35,2)
(26,26,2)
(54,43,2)
(83,26,2)
(64,57,2)
(30,34,2)
(45,11,2)
(62,57,2)
(63,34,2)
(18,4,2)
(21,4,2)
(4,4,2)
(71,33,2)
(47,26,2)
(41,59,2)
(80,10,2)
(26,58,2)
(63,4,2)
(52,42,2)
(0,26,2)
(58,57,2)
(25,34,2)
(62,26,2)
(17,33,2)
(59,61,2)
(7,54,2)
(57,80,2)
(74,57,2)
(65,4,2)
(1,26,2)
(9,34,2)
(30,4,2)
(33,7,2)
(32,57,2)
(53,26,2)
(54,34,2)
(16,26,2)
(51,57,2)
(71,34,2)
(17,26,2)
-----------------------------------
(0,i++)
(1,i)
(2,5)
(3,if(STATIC_CONST_FIVE==5)
(4,i < 10)
(5,buffer[i] = 0)
(6,i)
(7,(int *)
(8,)
(9,0)
(10,-1)
(11,i = 0)
(12,buffer)
(13,if (data >= 0)
(14,data)
(15,STATIC_CONST_FIVE)
(16,printIntLine(buffer[i])
(17,buffer[i])
(18,i)
(19,data)
(20,if (buffer == NULL)
(21,buffer[i])
(22,1)
(23,i)
(24,buffer)
(25,i)
(26,i < 10)
(27,)
(28,NULL)
(29,)
(30,10)
(31,sizeof(int)
(32,1)
(33,* buffer = (int *)
(34,STATIC_CONST_FIVE==5)
(35,int *)
(36,0)
(37,)
(38,1)
(39,buffer)
(40,data)
(41,buffer[data])
(42,-1)
(43,10 * sizeof(int)
(44,STATIC_CONST_FIVE)
(45,i++)
(46,)
(47,10)
(48,)
(49,for (i = 0; i < 10; i++)
(50,)
(51,buffer[data] = 1)
(52,exit(-1)
(53,i)
(54,malloc(10 * sizeof(int)
(55,5)
(56,0)
(57,data >= 0)
(58,i = 0)
(59,data = 10)
(60,0)
(61,STATIC_CONST_FIVE==5)
(62,i)
(63,i)
(64,printLine("ERROR: Array index is negative.")
(65,buffer)
(66,)
(67,buffer == NULL)
(68,i)
(69,)
(70,data)
(71,free(buffer)
(72,RET)
(73,buffer)
(74,buffer)
(75,int)
(76,data)
(77,if(STATIC_CONST_FIVE==5)
(78,for(i = 0; i < 10; i++)
(79,10)
(80,data = -1)
(81,"ERROR: Array index is negative.")
(82,10)
(83,buffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^