-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,38,42,44,48,50,51
-----computeFrom-----
12,13
12,14
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_square_16_bad()
CWE190_Integer_Overflow__int_fscanf_square_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(17,22,0)
(1,27,0)
(5,14,0)
(27,22,0)
(20,12,0)
(25,22,0)
(13,1,0)
(26,14,0)
(11,15,0)
(23,26,0)
(3,14,0)
(12,15,0)
(8,9,0)
(19,15,0)
(22,6,0)
(1,12,0)
(14,9,0)
(21,6,0)
(25,27,0)
(27,1,0)
(2,25,0)
(0,12,0)
(24,1,0)
(14,26,0)
(4,27,0)
(26,12,0)
(16,15,0)
(1,24,1)
(5,7,1)
(10,18,1)
(21,25,1)
(7,12,1)
(27,1,1)
(25,27,1)
(26,12,1)
(10,21,1)
(14,26,1)
(18,8,1)
(20,0,1)
(25,2,1)
(18,7,1)
(23,3,1)
(24,13,1)
(2,27,1)
(12,20,1)
(13,4,1)
(4,18,1)
(1,12,1)
(3,5,1)
(8,14,1)
(26,23,1)
(26,12,2)
(27,18,2)
(14,26,2)
(26,7,2)
(5,7,2)
(25,18,2)
(25,27,2)
(3,7,2)
(1,18,2)
(4,18,2)
(21,18,2)
(8,7,2)
(14,7,2)
(1,12,2)
(27,1,2)
(2,18,2)
(24,18,2)
(23,7,2)
(13,18,2)
-----------------------------------
(0,data)
(1,data * data)
(2,result)
(3,"%d")
(4,result)
(5,stdin)
(6,)
(7,1)
(8,break;)
(9,)
(10,RET)
(11,data)
(12,data = 0)
(13,data)
(14,fscanf(stdin, "%d", &data)
(15,)
(16,while(1)
(17,result)
(18,1)
(19,while(1)
(20,0)
(21,break;)
(22,)
(23,data)
(24,data)
(25,printIntLine(result)
(26,&data)
(27,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^