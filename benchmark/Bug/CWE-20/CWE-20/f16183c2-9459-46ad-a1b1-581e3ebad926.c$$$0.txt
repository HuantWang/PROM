-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strcat(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,99,101,105,107
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(52,24,0)
(37,22,0)
(32,55,0)
(49,50,0)
(40,2,0)
(55,52,0)
(43,55,0)
(48,43,0)
(32,26,0)
(39,28,0)
(18,55,0)
(43,19,0)
(0,22,0)
(22,2,0)
(8,53,0)
(42,9,0)
(39,55,0)
(24,52,0)
(44,9,0)
(52,33,0)
(24,21,0)
(26,14,0)
(22,28,0)
(50,19,0)
(43,28,0)
(15,50,0)
(45,28,0)
(5,3,0)
(55,14,0)
(1,11,0)
(47,10,0)
(9,30,0)
(52,55,0)
(33,52,0)
(50,55,0)
(47,3,0)
(51,42,0)
(4,32,0)
(16,11,0)
(3,47,0)
(36,2,0)
(12,19,0)
(31,30,0)
(20,39,0)
(9,42,0)
(19,41,0)
(13,32,0)
(23,41,0)
(2,22,0)
(50,28,0)
(54,21,0)
(34,14,0)
(21,53,0)
(35,41,0)
(11,55,0)
(30,28,0)
(17,42,0)
(25,19,0)
(7,26,0)
(28,41,0)
(39,19,0)
(53,21,0)
(21,24,0)
(11,55,1)
(24,21,1)
(39,20,1)
(2,36,1)
(13,47,1)
(19,25,1)
(53,8,1)
(4,13,1)
(7,32,1)
(18,6,1)
(11,1,1)
(44,22,1)
(52,33,1)
(50,55,1)
(40,37,1)
(36,40,1)
(38,43,1)
(15,30,1)
(0,6,1)
(30,31,1)
(6,19,1)
(55,52,1)
(50,19,1)
(37,0,1)
(43,48,1)
(43,19,1)
(25,12,1)
(42,51,1)
(13,11,1)
(52,24,1)
(49,15,1)
(21,53,1)
(32,55,1)
(43,55,1)
(51,17,1)
(1,16,1)
(26,7,1)
(16,55,1)
(47,3,1)
(20,50,1)
(22,2,1)
(8,54,1)
(48,39,1)
(32,4,1)
(9,42,1)
(5,11,1)
(17,44,1)
(0,26,1)
(50,49,1)
(54,18,1)
(3,5,1)
(39,55,1)
(31,9,1)
(39,19,1)
(43,55,2)
(55,52,2)
(50,19,2)
(13,6,2)
(5,11,2)
(39,19,2)
(47,3,2)
(32,6,2)
(9,42,2)
(26,6,2)
(47,11,2)
(4,6,2)
(52,6,2)
(7,6,2)
(32,55,2)
(11,55,2)
(8,6,2)
(50,55,2)
(39,55,2)
(53,6,2)
(43,19,2)
(24,6,2)
(24,21,2)
(3,11,2)
(22,2,2)
(52,24,2)
(21,6,2)
(52,33,2)
(55,6,2)
(18,6,2)
(16,6,2)
(11,6,2)
(54,6,2)
(21,53,2)
(1,6,2)
-----------------------------------
(0,source)
(1,NULL)
(2,100-1)
(3,-1)
(4,0)
(5,1)
(6,staticReturnsTrue()
(7,\'\\\\0\')
(8,char)
(9,source[100-1])
(10,)
(11,data == NULL)
(12,data)
(13,data)
(14,)
(15,data)
(16,data)
(17,100)
(18,data)
(19,data = NULL)
(20,data)
(21,50*sizeof(char)
(22,memset(source, \'C\', 100-1)
(23,data)
(24,malloc(50*sizeof(char)
(25,NULL)
(26,data[0] = '\\\\0')
(27,memset(source, 'C', 100-1)
(28,)
(29,data[0] = \'\\\\0\')
(30,source[100-1] = '\\\\0')
(31,'\\\\0')
(32,data[0])
(33,char *)
(34,if (data == NULL)
(35,if(staticReturnsTrue()
(36,1)
(37,'C')
(38,RET)
(39,printLine(data)
(40,100)
(41,)
(42,100-1)
(43,free(data)
(44,source)
(45,source)
(46,'\\\\0')
(47,exit(-1)
(48,data)
(49,source)
(50,strcat(data, source)
(51,1)
(52,(char *)
(53,sizeof(char)
(54,50)
(55,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^