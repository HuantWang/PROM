-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,81,82,86,88,92,94
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,6,0)
(41,34,0)
(24,16,0)
(40,41,0)
(2,14,0)
(36,32,0)
(42,7,0)
(32,14,0)
(32,29,0)
(41,29,0)
(13,39,0)
(0,7,0)
(2,1,0)
(24,35,0)
(35,24,0)
(15,33,0)
(2,6,0)
(11,22,0)
(15,22,0)
(38,9,0)
(29,17,0)
(43,35,0)
(2,34,0)
(22,15,0)
(29,15,0)
(1,10,0)
(33,15,0)
(12,14,0)
(1,2,0)
(23,39,0)
(18,2,0)
(37,17,0)
(34,7,0)
(15,29,0)
(4,34,0)
(10,1,0)
(21,11,0)
(14,7,0)
(31,2,0)
(32,34,0)
(3,28,0)
(11,28,0)
(6,34,0)
(39,29,0)
(22,11,0)
(2,29,0)
(19,6,0)
(28,11,0)
(10,6,0)
(5,14,0)
(41,14,0)
(30,10,0)
(27,9,0)
(20,1,0)
(25,29,0)
(38,27,1)
(2,14,1)
(3,21,1)
(32,14,1)
(18,31,1)
(26,9,1)
(29,15,1)
(15,22,1)
(26,39,1)
(23,13,1)
(32,29,1)
(28,3,1)
(6,19,1)
(2,6,1)
(19,26,1)
(14,5,1)
(10,30,1)
(39,23,1)
(30,18,1)
(1,20,1)
(21,25,1)
(5,12,1)
(10,6,1)
(35,43,1)
(22,11,1)
(36,41,1)
(41,14,1)
(15,33,1)
(40,2,1)
(11,28,1)
(24,35,1)
(41,29,1)
(2,1,1)
(1,10,1)
(32,36,1)
(41,40,1)
(8,32,1)
(27,14,1)
(13,29,1)
(9,38,1)
(43,39,1)
(2,29,1)
(39,29,1)
(20,10,1)
(25,9,1)
(31,6,1)
(26,24,1)
(11,28,2)
(23,9,2)
(32,14,2)
(28,9,2)
(29,15,2)
(10,6,2)
(39,29,2)
(24,39,2)
(1,10,2)
(2,6,2)
(15,33,2)
(43,39,2)
(41,14,2)
(39,9,2)
(2,29,2)
(3,9,2)
(21,9,2)
(22,9,2)
(15,9,2)
(35,39,2)
(11,9,2)
(22,11,2)
(15,22,2)
(25,9,2)
(13,9,2)
(24,35,2)
(2,14,2)
(32,29,2)
(29,9,2)
(41,29,2)
(2,1,2)
-----------------------------------
(0,data)
(1,wcslen(source)
(2,wcsncpy(data, source, wcslen(source)
(3,wchar_t)
(4,source)
(5,NULL)
(6,source[10+1] = SRC_STRING)
(7,)
(8,RET)
(9,globalFive==5)
(10,wcslen(source)
(11,10*sizeof(wchar_t)
(12,data)
(13,data)
(14,data = NULL)
(15,(wchar_t *)
(16,)
(17,)
(18,source)
(19,SRC_STRING)
(20,1)
(21,10)
(22,malloc(10*sizeof(wchar_t)
(23,NULL)
(24,exit(-1)
(25,data)
(26,source)
(27,globalFive)
(28,sizeof(wchar_t)
(29,data = (wchar_t *)
(30,source)
(31,data)
(32,free(data)
(33,wchar_t *)
(34,)
(35,-1)
(36,data)
(37,if (data == NULL)
(38,5)
(39,data == NULL)
(40,data)
(41,printWLine(data)
(42,if(globalFive==5)
(43,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^