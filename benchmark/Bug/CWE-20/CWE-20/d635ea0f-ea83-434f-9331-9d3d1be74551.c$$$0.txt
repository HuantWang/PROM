-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_01_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    /* wspawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
117,121
117,122
117,123
117,124
118,119
120,121
122,123
124,125
126,127
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,123,125,127,129,131
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_01_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_01_bad()
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_01_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnlp
_wspawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(2,50,0)
(36,47,0)
(3,20,0)
(2,30,0)
(50,24,0)
(48,44,0)
(9,20,0)
(0,56,0)
(57,39,0)
(47,36,0)
(28,46,0)
(26,41,0)
(53,44,0)
(21,0,0)
(42,36,0)
(35,14,0)
(31,47,0)
(15,14,0)
(8,2,0)
(9,22,0)
(46,36,0)
(25,14,0)
(7,46,0)
(58,23,0)
(44,34,0)
(34,39,0)
(23,20,0)
(29,34,0)
(20,6,0)
(40,34,0)
(12,13,0)
(38,0,0)
(44,36,0)
(16,6,0)
(59,9,0)
(54,30,0)
(44,50,0)
(41,46,0)
(27,14,0)
(51,13,0)
(1,50,0)
(52,22,0)
(4,30,0)
(49,23,0)
(24,50,0)
(36,0,0)
(30,36,0)
(46,41,0)
(5,14,0)
(2,8,0)
(20,10,0)
(45,56,0)
(33,24,0)
(32,14,0)
(34,56,0)
(39,56,0)
(43,10,0)
(50,2,0)
(47,34,0)
(18,6,0)
(37,0,0)
(14,56,0)
(19,12,0)
(6,20,0)
(50,44,0)
(30,2,0)
(50,20,0)
(17,39,0)
(11,56,0)
(24,33,1)
(14,32,1)
(59,24,1)
(19,24,1)
(1,2,1)
(30,54,1)
(50,44,1)
(27,9,1)
(2,8,1)
(27,23,1)
(30,36,1)
(53,48,1)
(41,26,1)
(23,20,1)
(39,17,1)
(50,20,1)
(36,47,1)
(7,28,1)
(23,49,1)
(58,20,1)
(59,51,1)
(55,14,1)
(44,53,1)
(5,27,1)
(32,25,1)
(47,31,1)
(15,35,1)
(18,3,1)
(46,7,1)
(16,18,1)
(50,1,1)
(47,34,1)
(34,39,1)
(31,42,1)
(25,15,1)
(40,29,1)
(17,57,1)
(6,16,1)
(48,23,1)
(2,30,1)
(54,4,1)
(51,12,1)
(9,20,1)
(20,6,1)
(50,2,1)
(9,59,1)
(28,36,1)
(35,5,1)
(12,19,1)
(44,34,1)
(42,34,1)
(3,41,1)
(49,58,1)
(34,40,1)
(27,41,1)
(44,36,1)
(26,46,1)
(33,50,1)
(24,50,1)
(29,39,1)
(4,44,1)
(46,36,1)
(41,46,1)
(50,44,2)
(50,23,2)
(44,23,2)
(51,24,2)
(23,41,2)
(59,23,2)
(50,2,2)
(48,23,2)
(30,23,2)
(2,30,2)
(23,20,2)
(2,23,2)
(54,23,2)
(36,47,2)
(49,41,2)
(58,41,2)
(16,41,2)
(2,8,2)
(46,36,2)
(20,6,2)
(44,36,2)
(3,41,2)
(1,23,2)
(24,23,2)
(6,41,2)
(4,23,2)
(41,46,2)
(50,20,2)
(18,41,2)
(44,34,2)
(24,50,2)
(53,23,2)
(34,39,2)
(19,24,2)
(47,34,2)
(9,20,2)
(9,23,2)
(33,23,2)
(20,41,2)
(12,24,2)
(30,36,2)
-----------------------------------
(0,)
(1,pFile)
(2,(int)
(3,pFile)
(4,100)
(5,COMMAND_INT)
(6,fopen(FILENAME, "r")
(7,dataLen)
(8,int)
(9,fclose(pFile)
(10,)
(11,data)
(12,printLine("fgetws()
(13,)
(14,_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(15,COMMAND_ARG1)
(16,"r")
(17,COMMAND_ARG2)
(18,FILENAME)
(19,"fgetws()
(20,pFile = fopen(FILENAME, "r")
(21,if (100-dataLen > 1)
(22,)
(23,pFile != NULL)
(24,fgetws(data+dataLen, (int)
(25,COMMAND_ARG3)
(26,1)
(27,_P_WAIT)
(28,100)
(29,data)
(30,100-dataLen)
(31,data)
(32,NULL)
(33,NULL)
(34,data = dataBuffer)
(35,COMMAND_INT)
(36,dataLen = wcslen(data)
(37,pFile)
(38,dataLen)
(39,dataBuffer[100] = COMMAND_ARG2)
(40,dataBuffer)
(41,100-dataLen > 1)
(42,dataLen)
(43,if (pFile != NULL)
(44,data+dataLen)
(45,dataBuffer)
(46,100-dataLen)
(47,wcslen(data)
(48,data)
(49,NULL)
(50,fgetws(data+dataLen, (int)
(51,\\\'\\\\0\\\')
(52,if (fgetws(data+dataLen, (int)
(53,dataLen)
(54,dataLen)
(55,RET)
(56,)
(57,dataBuffer)
(58,pFile)
(59,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^