-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
48,49
48,50
48,51
48,52
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
67,69
69,70
70,71
70,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,37,39,44,46,47,51,53,55,58,62,64,66,68,71,72,76,79,80,84,86
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad(){    int * data;    data = NULL;    while(1)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad
{    int * data;    data = NULL;    while(1)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(21,5,0)
(30,14,0)
(26,21,0)
(13,8,0)
(11,31,0)
(4,37,0)
(32,14,0)
(23,13,0)
(21,15,0)
(28,5,0)
(19,14,0)
(21,31,0)
(0,11,0)
(11,0,0)
(36,30,0)
(22,11,0)
(5,30,0)
(1,31,0)
(20,10,0)
(31,38,0)
(16,37,0)
(10,3,0)
(24,20,0)
(34,38,0)
(15,21,0)
(25,15,0)
(27,19,0)
(3,10,0)
(8,13,0)
(21,19,0)
(10,31,0)
(35,11,0)
(0,30,0)
(18,15,0)
(31,10,0)
(11,19,0)
(21,30,0)
(12,9,0)
(8,6,0)
(9,31,0)
(2,19,0)
(7,38,0)
(17,21,0)
(10,20,0)
(40,14,0)
(9,19,0)
(33,18,0)
(37,31,0)
(15,18,0)
(9,30,0)
(21,19,1)
(37,4,1)
(17,5,1)
(37,31,1)
(13,23,1)
(28,34,1)
(21,15,1)
(21,5,1)
(33,25,1)
(29,9,1)
(39,19,1)
(28,39,1)
(19,27,1)
(23,37,1)
(12,0,1)
(10,3,1)
(22,35,1)
(11,22,1)
(26,17,1)
(35,21,1)
(9,19,1)
(20,24,1)
(9,12,1)
(34,37,1)
(31,10,1)
(10,20,1)
(1,39,1)
(24,1,1)
(11,19,1)
(16,31,1)
(8,13,1)
(34,8,1)
(21,31,1)
(15,18,1)
(0,11,1)
(18,33,1)
(9,31,1)
(5,28,1)
(27,2,1)
(11,31,1)
(25,26,1)
(4,16,1)
(34,39,2)
(31,39,2)
(16,39,2)
(0,11,2)
(21,5,2)
(15,18,2)
(21,31,2)
(9,19,2)
(31,10,2)
(1,39,2)
(10,20,2)
(21,15,2)
(8,37,2)
(9,31,2)
(37,31,2)
(24,39,2)
(10,3,2)
(21,19,2)
(10,39,2)
(13,37,2)
(11,31,2)
(8,13,2)
(11,19,2)
(23,37,2)
(4,39,2)
(37,39,2)
(20,39,2)
-----------------------------------
(0,printIntLine(data[0])
(1,data)
(2,data)
(3,int *)
(4,NULL)
(5,source[10] = {0})
(6,)
(7,if (data == NULL)
(8,exit(-1)
(9,free(data)
(10,(int *)
(11,data[0])
(12,data)
(13,-1)
(14,)
(15,10*sizeof(int)
(16,data)
(17,data)
(18,sizeof(int)
(19,data = NULL)
(20,malloc(10)
(21,memmove(data, source, 10*sizeof(int)
(22,0)
(23,1)
(24,10)
(25,10)
(26,source)
(27,NULL)
(28,source)
(29,RET)
(30,)
(31,data = (int *)
(32,while(1)
(33,int)
(34,break;)
(35,data)
(36,source)
(37,data == NULL)
(38,)
(39,1)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^