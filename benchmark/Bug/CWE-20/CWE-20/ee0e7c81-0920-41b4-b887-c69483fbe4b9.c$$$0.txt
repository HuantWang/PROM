-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
26,29
26,30
27,28
29,30
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
40,41
40,42
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,6,8,9,15,17,20,22,24,28,30,31,33,34,39,41,42,43,48,49,52,53,56,62,64,67,69,74,76,77,78,82,84,88,90
-----computeFrom-----
32,33
32,34
36,37
36,38
40,41
40,42
46,47
46,48
50,51
50,52
59,60
59,61
71,72
71,73
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,29,0)
(28,9,0)
(45,26,0)
(0,34,0)
(20,14,0)
(41,31,0)
(47,27,0)
(5,26,0)
(34,31,0)
(7,13,0)
(14,24,0)
(29,17,0)
(39,34,0)
(12,24,0)
(8,2,0)
(27,41,0)
(34,36,0)
(19,29,0)
(22,35,0)
(15,17,0)
(30,9,0)
(26,44,0)
(13,26,0)
(41,27,0)
(3,24,0)
(21,26,0)
(42,21,0)
(17,29,0)
(33,5,0)
(9,30,0)
(37,14,0)
(35,26,0)
(14,36,0)
(41,35,0)
(2,24,0)
(36,32,0)
(23,41,0)
(4,27,0)
(40,26,0)
(43,6,0)
(36,14,0)
(34,24,0)
(1,26,0)
(21,31,0)
(16,9,0)
(6,24,0)
(17,5,0)
(10,2,0)
(9,26,0)
(13,31,0)
(11,30,0)
(38,30,0)
(34,31,1)
(21,31,1)
(4,47,1)
(15,9,1)
(2,24,1)
(8,24,1)
(30,38,1)
(6,24,1)
(14,37,1)
(42,35,1)
(24,3,1)
(33,17,1)
(28,16,1)
(6,43,1)
(37,20,1)
(9,30,1)
(21,42,1)
(41,31,1)
(17,29,1)
(0,2,1)
(39,0,1)
(14,24,1)
(38,11,1)
(23,2,1)
(20,34,1)
(12,5,1)
(36,14,1)
(35,22,1)
(8,6,1)
(10,8,1)
(19,15,1)
(11,28,1)
(2,10,1)
(43,36,1)
(7,21,1)
(34,24,1)
(34,39,1)
(13,7,1)
(41,27,1)
(18,19,1)
(5,33,1)
(29,18,1)
(3,12,1)
(22,41,1)
(27,4,1)
(46,13,1)
(47,23,1)
(13,31,1)
(17,29,2)
(20,2,2)
(37,2,2)
(41,27,2)
(8,2,2)
(6,2,2)
(14,24,2)
(43,2,2)
(36,14,2)
(34,31,2)
(39,2,2)
(13,31,2)
(21,31,2)
(2,2,2)
(9,30,2)
(41,31,2)
(10,2,2)
(34,2,2)
(0,2,2)
(36,2,2)
(14,2,2)
(6,24,2)
(34,24,2)
(2,24,2)
-----------------------------------
(0,data)
(1,i)
(2,i < 100)
(3,0)
(4,1)
(5,source[100-1] = '\\\\0')
(6,i++)
(7,data)
(8,i)
(9,memset(source, \'C\', 100-1)
(10,100)
(11,100)
(12,i)
(13,free(data)
(14,source[i])
(15,source)
(16,source)
(17,source[100-1])
(18,1)
(19,100)
(20,source)
(21,printLine(data)
(22,'\\\\0')
(23,data)
(24,i = 0)
(25,memset(source, 'C', 100-1)
(26,)
(27,100-1)
(28,'C')
(29,100-1)
(30,100-1)
(31,char * data)
(32,)
(33,'\\\\0')
(34,data[i])
(35,data[100-1] = '\\\\0')
(36,data[i] = source[i])
(37,i)
(38,1)
(39,i)
(40,for (i = 0; i < 100; i++)
(41,data[100-1])
(42,data)
(43,i)
(44,)
(45,source)
(46,RET)
(47,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^