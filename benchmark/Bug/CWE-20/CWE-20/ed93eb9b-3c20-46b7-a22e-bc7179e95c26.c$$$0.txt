-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,80,82,83,86,87,91,93,97,99
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
75,76
75,77
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (strlen(source) + 1) * sizeof(char));
memmove(data, source, (strlen(source) + 1) * sizeof(char))
memmove
memmove
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(5,11,0)
(4,10,0)
(11,31,0)
(20,24,0)
(23,30,0)
(3,8,0)
(0,36,0)
(35,18,0)
(37,25,0)
(43,36,0)
(22,31,0)
(45,11,0)
(43,25,0)
(30,20,0)
(7,6,0)
(33,8,0)
(42,0,0)
(11,24,0)
(41,0,0)
(19,43,0)
(2,13,0)
(34,33,0)
(15,4,0)
(14,36,0)
(37,13,0)
(11,10,0)
(9,8,0)
(32,10,0)
(11,36,0)
(29,46,0)
(12,36,0)
(17,20,0)
(25,37,0)
(18,35,0)
(36,46,0)
(25,43,0)
(12,10,0)
(38,35,0)
(27,6,0)
(26,37,0)
(28,44,0)
(31,33,0)
(4,36,0)
(21,10,0)
(16,12,0)
(39,31,0)
(12,33,0)
(24,11,0)
(13,37,0)
(4,33,0)
(20,30,0)
(30,31,0)
(43,19,0)
(11,33,0)
(24,20,0)
(18,1,0)
(10,8,0)
(44,24,0)
(36,43,0)
(24,44,0)
(12,36,1)
(35,38,1)
(16,4,1)
(6,27,1)
(0,36,1)
(30,23,1)
(37,13,1)
(11,36,1)
(36,43,1)
(43,19,1)
(38,0,1)
(15,11,1)
(28,20,1)
(11,24,1)
(22,18,1)
(4,36,1)
(14,6,1)
(11,10,1)
(18,35,1)
(31,39,1)
(2,26,1)
(25,37,1)
(22,6,1)
(45,31,1)
(24,44,1)
(43,25,1)
(26,14,1)
(24,20,1)
(20,17,1)
(5,45,1)
(22,0,1)
(44,28,1)
(42,36,1)
(30,31,1)
(12,16,1)
(12,10,1)
(41,42,1)
(21,32,1)
(20,30,1)
(17,30,1)
(4,10,1)
(11,31,1)
(40,12,1)
(10,21,1)
(13,2,1)
(0,41,1)
(7,10,1)
(4,15,1)
(27,7,1)
(23,5,1)
(39,22,1)
(35,0,2)
(14,6,2)
(36,43,2)
(26,6,2)
(25,37,2)
(43,25,2)
(18,35,2)
(0,36,2)
(36,6,2)
(25,6,2)
(4,36,2)
(13,6,2)
(37,13,2)
(12,10,2)
(11,36,2)
(24,44,2)
(18,0,2)
(11,10,2)
(38,0,2)
(11,24,2)
(37,6,2)
(43,19,2)
(20,30,2)
(11,31,2)
(2,6,2)
(43,6,2)
(42,6,2)
(0,6,2)
(41,6,2)
(30,31,2)
(24,20,2)
(4,10,2)
(12,36,2)
-----------------------------------
(0,data == NULL)
(1,)
(2,char)
(3,if(5==5)
(4,printLine(data)
(5,source)
(6,5==5)
(7,5)
(8,)
(9,data)
(10,data = NULL)
(11,memmove(data, source, (strlen(source)
(12,free(data)
(13,sizeof(char)
(14,data)
(15,data)
(16,data)
(17,1)
(18,exit(-1)
(19,char *)
(20,strlen(source)
(21,NULL)
(22,source)
(23,source)
(24,(strlen(source)
(25,malloc(10*sizeof(char)
(26,10)
(27,5)
(28,char)
(29,if (data == NULL)
(30,strlen(source)
(31,source[10+1] = SRC_STRING)
(32,data)
(33,)
(34,source)
(35,-1)
(36,data = (char *)
(37,10*sizeof(char)
(38,1)
(39,SRC_STRING)
(40,RET)
(41,NULL)
(42,data)
(43,(char *)
(44,sizeof(char)
(45,data)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^