-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcsncat(dest, data, wcslen(data));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
45,49
45,50
45,51
45,52
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
69,70
70,71
70,72
71,72
75,76
75,77
75,78
75,79
75,80
76,77
77,78
77,79
79,80
79,81
79,82
81,82
83,84
85,86
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,47,51,53,54,56,57,62,64,65,66,67,68,72,73,74,78,80,82,84,88,90,92,95,97,102,104,105,106,110,112,116,118
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
99,100
99,101
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcsncat(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcsncat(dest, data, wcslen(data));
wcsncat(dest, data, wcslen(data))
wcsncat
wcsncat
dest
dest
data
data
wcslen(data)
wcslen
wcslen
data
data
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,31,0)
(21,39,0)
(22,11,0)
(34,40,0)
(30,21,0)
(11,39,0)
(21,1,0)
(27,9,0)
(39,11,0)
(33,12,0)
(1,39,0)
(17,39,0)
(7,39,0)
(1,21,0)
(29,32,0)
(36,5,0)
(6,3,0)
(18,31,0)
(32,39,0)
(31,3,0)
(11,22,0)
(28,7,0)
(14,26,0)
(12,39,0)
(19,9,0)
(35,1,0)
(12,31,0)
(15,34,0)
(41,9,0)
(36,26,0)
(39,3,0)
(40,34,0)
(25,9,0)
(20,25,0)
(38,31,0)
(26,36,0)
(37,21,0)
(10,34,0)
(2,3,0)
(16,3,0)
(21,31,0)
(13,32,0)
(0,15,0)
(40,11,0)
(23,9,0)
(8,9,0)
(11,40,0)
(34,15,0)
(1,35,1)
(0,10,1)
(24,7,1)
(35,37,1)
(39,11,1)
(25,20,1)
(26,14,1)
(21,1,1)
(4,32,1)
(32,13,1)
(18,41,1)
(34,15,1)
(14,32,1)
(1,39,1)
(40,34,1)
(36,26,1)
(33,38,1)
(11,22,1)
(12,39,1)
(8,19,1)
(18,8,1)
(19,4,1)
(7,39,1)
(21,39,1)
(28,12,1)
(13,29,1)
(11,40,1)
(32,39,1)
(30,18,1)
(4,36,1)
(7,28,1)
(12,33,1)
(10,17,1)
(38,21,1)
(15,0,1)
(20,4,1)
(41,25,1)
(37,30,1)
(29,39,1)
(8,4,2)
(21,1,2)
(34,15,2)
(36,26,2)
(39,11,2)
(25,4,2)
(11,22,2)
(21,39,2)
(41,4,2)
(11,40,2)
(20,4,2)
(19,4,2)
(26,32,2)
(32,39,2)
(40,34,2)
(12,39,2)
(1,39,2)
(36,32,2)
(14,32,2)
(7,39,2)
-----------------------------------
(0,wchar_t)
(1,wcslen(data)
(2,if (data == NULL)
(3,)
(4,6)
(5,)
(6,data)
(7,free(data)
(8,break;)
(9,)
(10,100)
(11,(wchar_t *)
(12,printWLine(data)
(13,NULL)
(14,1)
(15,sizeof(wchar_t)
(16,switch(6)
(17,data)
(18,"")
(19,\\\'\\\\0\\\')
(20,"Benign, fixed string")
(21,wcsncat(dest, data, wcslen(data)
(22,wchar_t *)
(23,default:)
(24,RET)
(25,printLine("Benign, fixed string")
(26,-1)
(27,case 6:)
(28,data)
(29,data)
(30,dest)
(31,)
(32,data == NULL)
(33,data)
(34,100*sizeof(wchar_t)
(35,data)
(36,exit(-1)
(37,data)
(38,\\\'\\\\0\\\')
(39,data = (wchar_t *)
(40,malloc(100*sizeof(wchar_t)
(41,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^