-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strncpy(data, source, strlen(source) + 1);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,78,80,81,85,87,91,93
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(36,37,0)
(15,27,0)
(23,12,0)
(11,6,0)
(19,13,0)
(12,14,0)
(2,6,0)
(14,7,0)
(32,29,0)
(17,31,0)
(19,28,0)
(35,28,0)
(18,9,0)
(14,28,0)
(29,7,0)
(15,28,0)
(27,3,0)
(0,7,0)
(4,19,0)
(7,28,0)
(12,29,0)
(14,27,0)
(14,13,0)
(1,26,0)
(25,3,0)
(40,14,0)
(9,18,0)
(19,27,0)
(30,31,0)
(22,21,0)
(29,12,0)
(13,37,0)
(28,37,0)
(14,12,0)
(24,15,0)
(26,22,0)
(10,13,0)
(15,13,0)
(34,13,0)
(20,14,0)
(27,18,0)
(6,27,0)
(22,26,0)
(16,5,0)
(31,30,0)
(30,18,0)
(31,5,0)
(41,27,0)
(33,37,0)
(18,27,0)
(38,7,0)
(5,31,0)
(18,30,0)
(12,29,1)
(0,39,1)
(1,6,1)
(15,13,1)
(13,34,1)
(30,31,1)
(6,11,1)
(24,14,1)
(12,23,1)
(0,6,1)
(6,27,1)
(29,32,1)
(2,27,1)
(26,1,1)
(27,18,1)
(11,2,1)
(18,9,1)
(29,7,1)
(14,13,1)
(15,24,1)
(8,19,1)
(18,30,1)
(38,0,1)
(32,40,1)
(22,26,1)
(41,39,1)
(23,29,1)
(16,17,1)
(39,13,1)
(14,12,1)
(5,16,1)
(14,27,1)
(20,7,1)
(4,15,1)
(14,7,1)
(19,13,1)
(34,10,1)
(19,27,1)
(0,22,1)
(19,4,1)
(31,5,1)
(7,38,1)
(40,20,1)
(15,27,1)
(17,41,1)
(16,39,2)
(15,13,2)
(14,13,2)
(12,29,2)
(19,13,2)
(6,39,2)
(31,5,2)
(27,39,2)
(29,7,2)
(19,27,2)
(17,39,2)
(14,7,2)
(18,30,2)
(18,39,2)
(14,27,2)
(11,39,2)
(5,39,2)
(30,31,2)
(22,26,2)
(2,39,2)
(14,12,2)
(18,9,2)
(1,6,2)
(31,39,2)
(30,39,2)
(26,6,2)
(15,27,2)
(41,39,2)
(6,27,2)
(27,18,2)
(22,6,2)
-----------------------------------
(0,source)
(1,1)
(2,data)
(3,)
(4,data)
(5,sizeof(char)
(6,data == NULL)
(7,source[10+1] = SRC_STRING)
(8,RET)
(9,char *)
(10,data)
(11,NULL)
(12,strlen(source)
(13,data = NULL)
(14,strncpy(data, source, strlen(source)
(15,printLine(data)
(16,char)
(17,10)
(18,(char *)
(19,free(data)
(20,data)
(21,)
(22,exit(-1)
(23,1)
(24,data)
(25,if (data == NULL)
(26,-1)
(27,data = (char *)
(28,)
(29,strlen(source)
(30,malloc(10*sizeof(char)
(31,10*sizeof(char)
(32,source)
(33,data)
(34,NULL)
(35,source)
(36,if(globalReturnsTrue()
(37,)
(38,SRC_STRING)
(39,globalReturnsTrue()
(40,source)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^