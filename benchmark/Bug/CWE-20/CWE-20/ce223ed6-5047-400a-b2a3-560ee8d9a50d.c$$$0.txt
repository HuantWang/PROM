-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
25,27
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
52,53
54,55
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
87,88
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
-----nextToken-----
2,4,9,15,17,22,23,26,28,30,34,37,39,42,43,47,50,51,53,57,63,64,72,73,76,77,78,79,83,86,88,91,92,96,99,101,104,105
-----computeFrom-----
19,20
19,21
59,60
59,61
65,66
65,67
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad(){    if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad
{    if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(staticReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(42,27,0)
(54,3,0)
(25,21,0)
(23,3,0)
(51,37,0)
(12,13,0)
(34,53,0)
(34,32,0)
(3,37,0)
(1,47,0)
(23,45,0)
(40,23,0)
(1,37,0)
(36,17,0)
(21,51,0)
(9,13,0)
(22,37,0)
(42,17,0)
(53,39,0)
(6,54,0)
(27,37,0)
(3,23,0)
(34,28,0)
(45,23,0)
(14,37,0)
(47,1,0)
(43,37,0)
(50,22,0)
(50,54,0)
(37,18,0)
(53,34,0)
(39,53,0)
(31,2,0)
(22,50,0)
(13,3,0)
(20,47,0)
(26,39,0)
(10,1,0)
(42,32,0)
(15,50,0)
(43,31,0)
(31,43,0)
(2,31,0)
(41,5,0)
(31,13,0)
(32,42,0)
(49,1,0)
(52,3,0)
(7,39,0)
(33,28,0)
(1,10,0)
(38,17,0)
(54,50,0)
(24,11,0)
(0,27,0)
(46,10,0)
(28,34,0)
(16,32,0)
(21,25,0)
(30,54,0)
(8,52,0)
(51,21,0)
(5,21,0)
(4,10,0)
(32,34,0)
(21,5,0)
(50,15,0)
(35,52,0)
(48,5,0)
(13,31,0)
(17,42,0)
(44,22,1)
(31,13,1)
(38,1,1)
(32,34,1)
(26,17,1)
(42,32,1)
(23,45,1)
(28,33,1)
(54,6,1)
(21,5,1)
(35,8,1)
(33,53,1)
(20,49,1)
(32,16,1)
(48,41,1)
(36,38,1)
(30,51,1)
(7,26,1)
(54,3,1)
(4,46,1)
(42,17,1)
(50,15,1)
(6,30,1)
(1,47,1)
(21,25,1)
(5,48,1)
(8,19,1)
(23,40,1)
(34,28,1)
(34,53,1)
(44,19,1)
(22,50,1)
(9,3,1)
(1,10,1)
(39,7,1)
(53,39,1)
(27,0,1)
(31,2,1)
(0,42,1)
(10,4,1)
(43,31,1)
(49,10,1)
(3,23,1)
(16,34,1)
(50,54,1)
(46,43,1)
(41,27,1)
(17,36,1)
(40,52,1)
(51,21,1)
(47,20,1)
(52,35,1)
(13,3,1)
(12,9,1)
(13,12,1)
(8,19,2)
(1,19,2)
(3,23,2)
(3,19,2)
(39,19,2)
(12,19,2)
(38,19,2)
(41,19,2)
(47,19,2)
(1,47,2)
(31,2,2)
(26,19,2)
(33,19,2)
(13,3,2)
(51,21,2)
(23,19,2)
(31,19,2)
(50,19,2)
(21,19,2)
(50,15,2)
(16,19,2)
(54,19,2)
(49,19,2)
(42,32,2)
(1,10,2)
(42,17,2)
(43,31,2)
(0,19,2)
(13,19,2)
(30,19,2)
(35,19,2)
(48,19,2)
(42,19,2)
(51,19,2)
(10,19,2)
(17,19,2)
(20,19,2)
(7,19,2)
(28,19,2)
(53,19,2)
(9,19,2)
(34,19,2)
(53,39,2)
(52,19,2)
(46,19,2)
(36,19,2)
(6,19,2)
(21,5,2)
(43,19,2)
(32,19,2)
(22,19,2)
(27,19,2)
(21,25,2)
(34,28,2)
(50,54,2)
(32,34,2)
(40,19,2)
(4,19,2)
(22,50,2)
(34,53,2)
(31,13,2)
(54,3,2)
(23,45,2)
(5,19,2)
-----------------------------------
(0,'\\\\0')
(1,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(2,char *)
(3,structCharVoid.voidSecond = (void *)
(4,charFirst)
(5,structCharVoid.charFirst)
(6,voidSecond)
(7,charFirst)
(8,structCharVoid)
(9,structCharVoid)
(10,structCharVoid.charFirst)
(11,)
(12,voidSecond)
(13,structCharVoid.voidSecond)
(14,structCharVoid)
(15,char *)
(16,1)
(17,structCharVoid.charFirst)
(18,)
(19,staticReturnsTrue()
(20,structCharVoid)
(21,(char *)
(22,printLine((char *)
(23,(void *)
(24,if(staticReturnsTrue()
(25,char *)
(26,structCharVoid)
(27,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(28,sizeof(char)
(29,\'\\\\0\')
(30,structCharVoid)
(31,(char *)
(32,(sizeof(structCharVoid.charFirst)
(33,char)
(34,sizeof(structCharVoid.charFirst)
(35,voidSecond)
(36,charFirst)
(37,)
(38,structCharVoid)
(39,structCharVoid.charFirst)
(40,SRC_STR)
(41,structCharVoid)
(42,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(43,printLine((char *)
(44,RET)
(45,void *)
(46,structCharVoid)
(47,sizeof(structCharVoid)
(48,charFirst)
(49,SRC_STR)
(50,(char *)
(51,printLine((char *)
(52,structCharVoid.voidSecond)
(53,sizeof(structCharVoid.charFirst)
(54,structCharVoid.voidSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^