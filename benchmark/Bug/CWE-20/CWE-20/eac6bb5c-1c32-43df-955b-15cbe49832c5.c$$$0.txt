-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad()
{
    void * data;
    /* define a function pointer */
    void (*funcPtr) (void *) = badSink;
    data = NULL;
    {
        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (dataBadBuffer == NULL) {exit(-1);}
        wmemset(dataBadBuffer, L'A', 50-1);
        dataBadBuffer[50-1] = L'\0';
        /* POTENTIAL FLAW: Set data to point to a wide string */
        data = (void *)dataBadBuffer;
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
33,38
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,38,39,43,45,48,50,53,54,58,60,65,67,71,73,74,76,77,82,84,85,86,90,93,95,97,101,103
-----computeFrom-----
28,29
28,30
49,50
49,51
56,57
56,58
75,76
75,77
79,80
79,81
83,84
83,85
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad(){    void * data;    /* define a function pointer */    void (*funcPtr) (void *) = badSink;    data = NULL;    {        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));        if (dataBadBuffer == NULL) {exit(-1);}        wmemset(dataBadBuffer, L'A', 50-1);        dataBadBuffer[50-1] = L'\0';        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)dataBadBuffer;    }    /* use the function pointer */    funcPtr(data);}
void
CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad
{    void * data;    /* define a function pointer */    void (*funcPtr) (void *) = badSink;    data = NULL;    {        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));        if (dataBadBuffer == NULL) {exit(-1);}        wmemset(dataBadBuffer, L'A', 50-1);        dataBadBuffer[50-1] = L'\0';        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)dataBadBuffer;    }    /* use the function pointer */    funcPtr(data);}
void * data;
void * data;
void
* data
*
data
void (*funcPtr) (void *) = badSink;
void (*funcPtr) (void *) = badSink;
void
(*funcPtr) (void *) = badSink
*funcPtr
*
funcPtr
void *
void
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));        if (dataBadBuffer == NULL) {exit(-1);}        wmemset(dataBadBuffer, L'A', 50-1);        dataBadBuffer[50-1] = L'\0';        /* POTENTIAL FLAW: Set data to point to a wide string */        data = (void *)dataBadBuffer;    }
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)malloc(50*sizeof(wchar_t))
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBadBuffer == NULL) {exit(-1);}
dataBadBuffer == NULL
dataBadBuffer
dataBadBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBadBuffer, L'A', 50-1);
wmemset(dataBadBuffer, L'A', 50-1)
wmemset
wmemset
dataBadBuffer
dataBadBuffer
L'A'
50-1
50
1
dataBadBuffer[50-1] = L'\0';
dataBadBuffer[50-1] = L'\0'
dataBadBuffer[50-1]
dataBadBuffer
dataBadBuffer
50-1
50
1
L'\0'
data = (void *)dataBadBuffer;
data = (void *)dataBadBuffer
data
data
(void *)dataBadBuffer
void *
void
*
*
dataBadBuffer
dataBadBuffer
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(3,22,0)
(15,22,0)
(13,5,0)
(17,1,0)
(6,15,0)
(18,29,0)
(0,22,0)
(31,2,0)
(26,25,0)
(23,16,0)
(16,29,0)
(36,4,0)
(4,8,0)
(8,22,0)
(21,10,0)
(13,8,0)
(34,1,0)
(4,15,0)
(13,34,0)
(16,15,0)
(28,14,0)
(34,13,0)
(4,9,0)
(19,18,0)
(1,10,0)
(14,8,0)
(12,25,0)
(30,31,0)
(15,4,0)
(32,29,0)
(5,13,0)
(2,31,0)
(35,8,0)
(10,1,0)
(20,14,0)
(33,22,0)
(11,18,0)
(25,29,0)
(9,4,0)
(7,29,0)
(1,34,0)
(8,13,0)
(2,24,0)
(22,29,0)
(15,4,1)
(13,34,1)
(18,19,1)
(13,5,1)
(23,15,1)
(12,26,1)
(36,6,1)
(16,23,1)
(30,14,1)
(6,3,1)
(4,9,1)
(31,30,1)
(3,2,1)
(14,8,1)
(19,11,1)
(10,21,1)
(4,36,1)
(16,15,1)
(34,1,1)
(21,17,1)
(28,20,1)
(27,16,1)
(4,8,1)
(2,31,1)
(14,28,1)
(25,12,1)
(17,35,1)
(8,13,1)
(20,8,1)
(26,18,1)
(1,10,1)
(35,25,1)
(3,14,1)
(1,10,2)
(14,8,2)
(34,1,2)
(16,15,2)
(13,34,2)
(2,31,2)
(30,14,2)
(31,14,2)
(4,9,2)
(13,5,2)
(8,13,2)
(2,14,2)
(4,8,2)
(15,4,2)
-----------------------------------
(0,if (dataBadBuffer == NULL)
(1,50*sizeof(wchar_t)
(2,exit(-1)
(3,'\\\\0')
(4,(void *)
(5,wchar_t *)
(6,data)
(7,funcPtr)
(8,* dataBadBuffer = (wchar_t *)
(9,void *)
(10,sizeof(wchar_t)
(11,funcPtr)
(12,NULL)
(13,(wchar_t *)
(14,dataBadBuffer == NULL)
(15,data = (void *)
(16,funcPtr(data)
(17,50)
(18,(*funcPtr)
(19,badSink)
(20,dataBadBuffer)
(21,wchar_t)
(22,)
(23,data)
(24,)
(25,data = NULL)
(26,data)
(27,RET)
(28,NULL)
(29,)
(30,1)
(31,-1)
(32,data)
(33,dataBadBuffer)
(34,malloc(50*sizeof(wchar_t)
(35,dataBadBuffer)
(36,dataBadBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^