-----label-----
1
-----code-----
static void badSink(wchar_t * data)
{
    if(badStatic)
    {
        {
            wchar_t dest[100] = L"";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printWLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
26,29
26,30
27,28
29,30
31,32
31,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,13,18,20,22,24,28,30,32,33,35,39,41
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(wchar_t * data){    if(badStatic)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
static void
badSink(wchar_t * data)
badSink
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
if(badStatic)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
badStatic
badStatic
{        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
{            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(0,2,0)
(9,2,0)
(2,5,0)
(0,6,0)
(0,10,0)
(4,2,0)
(14,4,0)
(7,10,0)
(8,0,0)
(3,0,0)
(10,0,0)
(13,10,0)
(15,1,0)
(9,12,1)
(14,0,1)
(0,6,1)
(10,13,1)
(11,12,1)
(4,14,1)
(13,7,1)
(7,3,1)
(0,8,1)
(0,10,1)
(11,4,1)
(3,9,1)
(8,10,1)
(3,12,2)
(0,10,2)
(4,12,2)
(0,12,2)
(13,12,2)
(10,12,2)
(14,12,2)
(7,12,2)
(9,12,2)
(0,6,2)
(8,12,2)
-----------------------------------
(0,SNPRINTF(dest, 100-1, data)
(1,)
(2,)
(3,dest)
(4,printWLine(dest)
(5,)
(6,wchar_t * data)
(7,100)
(8,data)
(9,"")
(10,100-1)
(11,RET)
(12,badStatic)
(13,1)
(14,dest)
(15,if(badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^