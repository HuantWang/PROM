-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,93,94,99,101,102,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
85,86
85,87
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,30,0)
(55,23,0)
(12,6,0)
(49,59,0)
(59,57,0)
(1,6,0)
(53,49,0)
(51,12,0)
(12,10,0)
(22,25,0)
(1,44,0)
(19,32,0)
(29,6,0)
(45,4,0)
(47,25,0)
(48,33,0)
(25,22,0)
(33,58,0)
(25,47,0)
(16,33,0)
(41,29,0)
(9,10,0)
(30,18,0)
(27,6,0)
(1,26,0)
(9,24,0)
(23,33,0)
(5,44,0)
(32,4,0)
(37,58,0)
(36,27,0)
(42,30,0)
(12,33,0)
(13,3,0)
(4,32,0)
(52,48,0)
(12,30,0)
(10,33,0)
(9,48,0)
(2,58,0)
(25,6,0)
(44,1,0)
(46,10,0)
(14,12,0)
(7,40,0)
(22,4,0)
(27,33,0)
(30,12,0)
(35,26,0)
(26,0,0)
(6,58,0)
(24,9,0)
(15,40,0)
(30,42,0)
(59,49,0)
(29,0,0)
(54,29,0)
(6,25,0)
(31,24,0)
(3,6,0)
(34,10,0)
(29,40,0)
(23,6,0)
(38,18,0)
(18,6,0)
(17,44,0)
(8,3,0)
(50,24,0)
(40,29,0)
(20,42,0)
(4,22,0)
(28,6,0)
(21,58,0)
(43,9,0)
(11,1,0)
(29,40,1)
(10,34,1)
(25,47,1)
(45,28,1)
(12,10,1)
(44,5,1)
(27,36,1)
(17,11,1)
(59,49,1)
(6,25,1)
(30,18,1)
(50,31,1)
(7,15,1)
(36,23,1)
(23,6,1)
(40,7,1)
(27,6,1)
(49,53,1)
(22,4,1)
(43,12,1)
(51,14,1)
(25,22,1)
(42,20,1)
(46,26,1)
(14,10,1)
(15,54,1)
(3,8,1)
(55,48,1)
(1,6,1)
(13,6,1)
(31,43,1)
(9,24,1)
(26,35,1)
(39,27,1)
(23,55,1)
(46,56,1)
(18,6,1)
(1,44,1)
(34,46,1)
(32,19,1)
(52,9,1)
(11,29,1)
(8,13,1)
(56,59,1)
(12,6,1)
(30,42,1)
(35,1,1)
(4,32,1)
(12,30,1)
(19,45,1)
(24,50,1)
(54,41,1)
(18,38,1)
(41,56,1)
(9,10,1)
(20,18,1)
(56,3,1)
(38,51,1)
(53,3,1)
(3,6,1)
(48,52,1)
(29,6,1)
(5,17,1)
(9,10,2)
(4,32,2)
(29,6,2)
(29,56,2)
(22,4,2)
(53,3,2)
(11,56,2)
(17,56,2)
(23,6,2)
(12,10,2)
(54,56,2)
(18,6,2)
(12,30,2)
(25,47,2)
(30,18,2)
(26,56,2)
(6,25,2)
(15,56,2)
(40,56,2)
(59,3,2)
(35,56,2)
(1,6,2)
(49,3,2)
(9,24,2)
(7,56,2)
(59,49,2)
(3,6,2)
(5,56,2)
(1,44,2)
(41,56,2)
(29,40,2)
(25,22,2)
(44,56,2)
(12,6,2)
(27,6,2)
(30,42,2)
(1,56,2)
-----------------------------------
(0,)
(1,data[100-1])
(2,if (data == NULL)
(3,data == NULL)
(4,100*sizeof(char)
(5,1)
(6,data = (char *)
(7,1)
(8,NULL)
(9,dest[50-1])
(10,dest[50] = "")
(11,data)
(12,memcpy(dest, data, strlen(data)
(13,data)
(14,dest)
(15,100)
(16,dest)
(17,100)
(18,strlen(data)
(19,char)
(20,char)
(21,data)
(22,malloc(100*sizeof(char)
(23,printLine(data)
(24,50-1)
(25,(char *)
(26,data[100-1] = \\\'\\\\0\\\')
(27,free(data)
(28,data)
(29,memset(data, \\\'A\\\', 100-1)
(30,strlen(data)
(31,50)
(32,sizeof(char)
(33,)
(34,"")
(35,\\\'\\\\0\\\')
(36,data)
(37,if(staticReturnsTrue()
(38,data)
(39,RET)
(40,100-1)
(41,data)
(42,sizeof(char)
(43,dest)
(44,100-1)
(45,100)
(46,dest)
(47,char *)
(48,dest[50-1] = \\\'\\\\0\\\')
(49,-1)
(50,1)
(51,data)
(52,\\\'\\\\0\\\')
(53,1)
(54,\\\'A\\\')
(55,data)
(56,staticReturnsTrue()
(57,)
(58,)
(59,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^