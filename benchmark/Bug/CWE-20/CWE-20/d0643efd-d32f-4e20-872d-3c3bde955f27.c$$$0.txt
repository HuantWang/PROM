-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(1)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        size_t i, dataLen;
        dataLen = wcslen(data);
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        for (i = 0; i < dataLen; i++)
        {
            dest[i] = data[i];
        }
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
65,67
65,68
65,69
65,70
65,71
65,72
66,67
67,68
67,69
69,70
69,71
69,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
101,102
103,104
104,105
106,107
107,108
108,109
108,110
109,110
109,111
110,111
112,113
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
121,123
122,123
124,125
124,126
128,129
129,130
129,131
130,131
132,133
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,52,54,55,60,62,63,64,68,70,72,74,78,80,82,86,89,91,96,97,100,102,105,111,113,116,118,123,125,126,127,131,133,137,139
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
53,54
53,55
57,58
57,59
61,62
61,63
84,85
84,86
94,95
94,96
98,99
98,100
108,109
108,110
120,121
120,122
124,125
124,126
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
1
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        size_t i, dataLen;        dataLen = wcslen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
size_t i, dataLen;
size_t i, dataLen;
size_t
size_t
i
i
dataLen
dataLen
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < dataLen
i
i
dataLen
dataLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,2,0)
(39,9,0)
(49,15,0)
(10,19,0)
(21,30,0)
(42,35,0)
(0,15,0)
(31,14,0)
(7,30,0)
(54,34,0)
(51,34,0)
(19,10,0)
(1,35,0)
(53,50,0)
(52,35,0)
(40,22,0)
(28,40,0)
(11,45,0)
(9,2,0)
(30,2,0)
(6,14,0)
(8,33,0)
(0,14,0)
(14,35,0)
(16,2,0)
(30,7,0)
(27,43,0)
(47,14,0)
(15,0,0)
(3,14,0)
(10,32,0)
(20,43,0)
(12,14,0)
(33,34,0)
(24,30,0)
(43,0,0)
(47,34,0)
(5,45,0)
(18,2,0)
(46,50,0)
(45,5,0)
(34,35,0)
(32,10,0)
(7,17,0)
(4,14,0)
(5,19,0)
(22,40,0)
(10,34,0)
(50,7,0)
(15,34,0)
(29,13,0)
(37,47,0)
(51,14,0)
(34,10,0)
(22,23,0)
(44,33,0)
(25,5,0)
(30,34,0)
(26,51,0)
(36,0,0)
(50,2,0)
(19,5,0)
(43,2,1)
(10,32,1)
(48,22,1)
(20,9,1)
(30,34,1)
(2,18,1)
(11,25,1)
(12,48,1)
(36,12,1)
(49,36,1)
(27,20,1)
(40,28,1)
(18,16,1)
(25,54,1)
(47,34,1)
(50,2,1)
(33,34,1)
(20,2,1)
(30,24,1)
(19,5,1)
(30,2,1)
(34,10,1)
(24,21,1)
(50,46,1)
(46,53,1)
(9,2,1)
(8,44,1)
(51,34,1)
(43,27,1)
(29,48,1)
(48,33,1)
(33,8,1)
(7,30,1)
(16,0,1)
(43,0,1)
(15,34,1)
(45,11,1)
(53,43,1)
(12,29,1)
(37,6,1)
(47,37,1)
(10,19,1)
(41,51,1)
(9,39,1)
(15,49,1)
(44,34,1)
(22,40,1)
(28,33,1)
(6,43,1)
(0,15,1)
(51,26,1)
(21,50,1)
(5,45,1)
(39,7,1)
(26,47,1)
(47,34,2)
(0,15,2)
(30,2,2)
(29,48,2)
(10,32,2)
(9,2,2)
(39,43,2)
(30,43,2)
(43,43,2)
(15,34,2)
(43,2,2)
(50,2,2)
(51,34,2)
(28,33,2)
(5,45,2)
(34,10,2)
(50,43,2)
(21,43,2)
(22,40,2)
(20,43,2)
(30,34,2)
(53,43,2)
(43,0,2)
(22,33,2)
(10,19,2)
(24,43,2)
(19,5,2)
(7,30,2)
(46,43,2)
(7,43,2)
(40,33,2)
(33,34,2)
(9,43,2)
(27,43,2)
-----------------------------------
(0,dataLen = wcslen(data)
(1,if (data == NULL)
(2,i = 0)
(3,for (i = 0; i < dataLen; i++)
(4,i)
(5,100*sizeof(wchar_t)
(6,\\\'\\\\0\\\')
(7,dest[i] = data[i])
(8,NULL)
(9,i++)
(10,(wchar_t *)
(11,wchar_t)
(12,"")
(13,)
(14,)
(15,wcslen(data)
(16,i)
(17,)
(18,0)
(19,malloc(100*sizeof(wchar_t)
(20,i)
(21,data)
(22,exit(-1)
(23,)
(24,i)
(25,100)
(26,data)
(27,dataLen)
(28,1)
(29,\\\'\\\\0\\\')
(30,data[i])
(31,dataLen)
(32,wchar_t *)
(33,data == NULL)
(34,data = (wchar_t *)
(35,)
(36,dataLen)
(37,data)
(38,\\'\\\\0\\')
(39,i)
(40,-1)
(41,RET)
(42,data)
(43,i < dataLen)
(44,data)
(45,sizeof(wchar_t)
(46,i)
(47,printWLine(data)
(48,1)
(49,data)
(50,dest[i])
(51,free(data)
(52,if(1)
(53,dest)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^