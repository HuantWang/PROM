-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_04_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,61,62,67,69,70,71,75,77,80,85,87
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
64,65
64,66
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_04_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_04_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_04_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(19,10,0)
(30,22,0)
(7,25,0)
(28,4,0)
(30,13,0)
(21,12,0)
(20,31,0)
(13,30,0)
(17,13,0)
(14,17,0)
(24,3,0)
(6,17,0)
(23,17,0)
(6,10,0)
(2,33,0)
(5,13,0)
(22,30,0)
(15,14,0)
(9,25,0)
(33,17,0)
(29,31,0)
(26,33,0)
(13,17,0)
(13,5,0)
(8,10,0)
(22,4,0)
(6,27,0)
(18,22,0)
(10,25,0)
(1,6,0)
(32,25,0)
(4,22,0)
(17,31,0)
(21,3,0)
(3,21,0)
(14,31,0)
(16,10,1)
(1,0,1)
(6,1,1)
(26,17,1)
(3,24,1)
(15,29,1)
(6,10,1)
(23,16,1)
(8,19,1)
(10,8,1)
(13,5,1)
(11,0,1)
(14,17,1)
(28,18,1)
(6,17,1)
(29,33,1)
(14,15,1)
(17,13,1)
(33,2,1)
(29,21,1)
(0,14,1)
(2,26,1)
(21,3,1)
(13,30,1)
(11,6,1)
(24,33,1)
(33,17,1)
(18,23,1)
(30,22,1)
(4,28,1)
(22,4,1)
(0,16,1)
(23,16,2)
(29,16,2)
(14,17,2)
(30,16,2)
(17,13,2)
(13,5,2)
(13,30,2)
(3,33,2)
(22,4,2)
(1,0,2)
(17,16,2)
(18,16,2)
(28,16,2)
(21,3,2)
(30,22,2)
(6,17,2)
(6,0,2)
(33,17,2)
(6,10,2)
(22,16,2)
(2,16,2)
(21,33,2)
(14,16,2)
(24,33,2)
(33,16,2)
(26,16,2)
(13,16,2)
(4,16,2)
(15,16,2)
-----------------------------------
(0,STATIC_CONST_TRUE)
(1,data)
(2,NULL)
(3,-1)
(4,sizeof(wchar_t)
(5,wchar_t *)
(6,printWLine(data)
(7,if(STATIC_CONST_TRUE)
(8,NULL)
(9,if(STATIC_CONST_TRUE)
(10,data = NULL)
(11,RET)
(12,)
(13,(wchar_t *)
(14,free(data)
(15,data)
(16,STATIC_CONST_TRUE)
(17,data = (wchar_t *)
(18,100)
(19,data)
(20,if (data == NULL)
(21,exit(-1)
(22,100*sizeof(wchar_t)
(23,data)
(24,1)
(25,)
(26,data)
(27,)
(28,wchar_t)
(29,\'\\\\0\')
(30,malloc(100*sizeof(wchar_t)
(31,)
(32,data)
(33,data == NULL)
(34,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^