-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
data
data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
-----joern-----
(51,66,0)
(8,50,0)
(15,69,0)
(41,46,0)
(28,0,0)
(43,63,0)
(19,57,0)
(27,28,0)
(55,16,0)
(58,53,0)
(26,16,0)
(47,0,0)
(18,43,0)
(32,21,0)
(19,28,0)
(29,28,0)
(39,58,0)
(59,29,0)
(24,27,0)
(19,50,0)
(23,27,0)
(46,0,0)
(65,58,0)
(2,9,0)
(27,9,0)
(35,65,0)
(10,47,0)
(68,33,0)
(12,34,0)
(62,66,0)
(66,33,0)
(33,48,0)
(52,19,0)
(21,49,0)
(67,38,0)
(57,19,0)
(39,13,0)
(25,4,0)
(39,66,0)
(69,28,0)
(13,39,0)
(53,58,0)
(14,50,0)
(29,43,0)
(50,19,0)
(42,4,0)
(66,39,0)
(70,53,0)
(61,69,0)
(28,47,0)
(8,38,0)
(54,40,0)
(11,34,0)
(42,36,0)
(7,47,0)
(53,33,0)
(45,46,0)
(57,42,0)
(6,0,0)
(29,34,0)
(9,49,0)
(16,31,0)
(36,28,0)
(17,57,0)
(5,0,0)
(38,42,0)
(69,0,0)
(53,28,0)
(38,8,0)
(48,28,0)
(31,16,0)
(72,0,0)
(33,46,0)
(58,39,0)
(44,38,0)
(34,29,0)
(22,53,0)
(48,33,0)
(1,31,0)
(36,42,0)
(60,36,0)
(16,33,0)
(20,57,0)
(71,28,0)
(34,42,0)
(27,33,0)
(64,42,0)
(37,58,0)
(56,28,0)
(50,8,0)
(58,65,0)
(30,48,0)
(29,28,1)
(61,15,1)
(11,59,1)
(28,47,1)
(22,31,1)
(15,8,1)
(39,13,1)
(50,19,1)
(3,72,1)
(27,28,1)
(15,31,1)
(65,58,1)
(39,66,1)
(68,28,1)
(70,22,1)
(31,1,1)
(53,70,1)
(67,42,1)
(53,28,1)
(15,9,1)
(7,10,1)
(58,53,1)
(18,29,1)
(36,28,1)
(66,51,1)
(24,21,1)
(71,56,1)
(23,24,1)
(69,28,1)
(35,58,1)
(44,67,1)
(66,33,1)
(34,42,1)
(56,47,1)
(58,37,1)
(38,44,1)
(33,48,1)
(37,39,1)
(59,8,1)
(47,7,1)
(20,52,1)
(1,16,1)
(48,30,1)
(60,64,1)
(55,26,1)
(34,12,1)
(21,32,1)
(31,16,1)
(62,53,1)
(27,23,1)
(57,42,1)
(72,69,1)
(53,33,1)
(43,18,1)
(65,35,1)
(51,62,1)
(48,28,1)
(9,2,1)
(28,71,1)
(2,27,1)
(36,60,1)
(16,55,1)
(38,42,1)
(29,34,1)
(19,57,1)
(8,38,1)
(17,20,1)
(8,50,1)
(69,61,1)
(19,28,1)
(27,33,1)
(50,14,1)
(16,33,1)
(57,17,1)
(58,39,1)
(32,65,1)
(14,19,1)
(30,68,1)
(52,38,1)
(15,43,1)
(42,36,1)
(26,33,1)
(64,65,1)
(12,11,1)
(69,28,2)
(12,8,2)
(57,42,2)
(27,65,2)
(2,65,2)
(22,31,2)
(33,48,2)
(57,38,2)
(17,38,2)
(29,28,2)
(31,16,2)
(21,65,2)
(50,38,2)
(19,57,2)
(20,38,2)
(8,65,2)
(43,8,2)
(53,31,2)
(58,31,2)
(58,53,2)
(66,31,2)
(37,31,2)
(34,42,2)
(60,65,2)
(67,65,2)
(51,31,2)
(39,66,2)
(48,28,2)
(58,39,2)
(52,38,2)
(9,65,2)
(42,36,2)
(38,65,2)
(27,33,2)
(36,65,2)
(35,31,2)
(62,31,2)
(64,65,2)
(8,38,2)
(39,13,2)
(44,65,2)
(19,28,2)
(14,38,2)
(65,31,2)
(59,8,2)
(65,58,2)
(42,65,2)
(39,31,2)
(53,33,2)
(70,31,2)
(66,33,2)
(23,65,2)
(19,38,2)
(34,8,2)
(28,47,2)
(16,33,2)
(36,28,2)
(24,65,2)
(27,28,2)
(8,50,2)
(38,42,2)
(50,19,2)
(11,8,2)
(18,8,2)
(29,8,2)
(53,28,2)
(32,65,2)
(29,34,2)
-----------------------------------
(0,)
(1,1)
(2,\\\'\\\\0\\\')
(3,RET)
(4,)
(5,dataBuffer)
(6,data)
(7,COMMAND_ARG2)
(8,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(9,data[dataLen] = \\\'\\\\0\\\')
(10,dataBuffer)
(11,dataLen)
(12,1)
(13,int)
(14,\\\'\\\\n\\\')
(15,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData)
(16,100-dataLen)
(17,1)
(18,\\\'\\\\0\\\')
(19,data[dataLen-1])
(20,dataLen)
(21,printLine("fgets()
(22,data)
(23,dataLen)
(24,data)
(25,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(26,100)
(27,data[dataLen])
(28,data = dataBuffer)
(29,data[dataLen-1])
(30,data)
(31,100-dataLen > 1)
(32,"fgets()
(33,dataLen = strlen(data)
(34,dataLen-1)
(35,NULL)
(36,strlen(data)
(37,stdin)
(38,dataLen > 0)
(39,(int)
(40,)
(41,if (100-dataLen > 1)
(42,dataLen = strlen(data)
(43,data[dataLen-1] = \\\'\\\\0\\\')
(44,0)
(45,dataLen)
(46,)
(47,dataBuffer[100] = COMMAND_ARG2)
(48,strlen(data)
(49,)
(50,data[dataLen-1] == \\\'\\\\n\\\')
(51,dataLen)
(52,data)
(53,data+dataLen)
(54,if (fgets(data+dataLen, (int)
(55,dataLen)
(56,data)
(57,dataLen-1)
(58,fgets(data+dataLen, (int)
(59,data)
(60,data)
(61,data)
(62,100)
(63,)
(64,dataLen)
(65,fgets(data+dataLen, (int)
(66,100-dataLen)
(67,dataLen)
(68,dataLen)
(69,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data)
(70,dataLen)
(71,dataBuffer)
(72,CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^