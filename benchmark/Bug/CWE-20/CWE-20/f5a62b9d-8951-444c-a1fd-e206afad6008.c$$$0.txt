-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_05_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(staticTrue)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
126,128
126,129
127,128
128,129
128,130
129,130
131,132
131,133
134,135
135,136
135,137
136,137
138,139
138,140
138,141
139,140
141,142
144,145
144,146
145,146
145,147
146,147
148,149
150,151
151,152
152,153
152,154
153,154
155,156
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,130,132,133,137,140,142,143,147,149,154,156
-----computeFrom-----
23,24
23,25
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
135,136
135,137
145,146
145,147
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
147,156
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_05_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_05_bad()
CWE78_OS_Command_Injection__char_console_popen_05_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
staticTrue
staticTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(76,70,0)
(36,42,0)
(37,8,0)
(77,11,0)
(72,58,0)
(83,46,0)
(1,71,0)
(44,8,0)
(11,12,0)
(30,19,0)
(38,11,0)
(36,20,0)
(6,50,0)
(33,38,0)
(26,20,0)
(85,70,0)
(19,60,0)
(43,60,0)
(8,37,0)
(10,11,0)
(20,9,0)
(81,60,0)
(62,12,0)
(17,48,0)
(29,37,0)
(27,48,0)
(78,32,0)
(55,42,0)
(63,12,0)
(40,70,0)
(12,21,0)
(69,83,0)
(25,27,0)
(57,60,0)
(84,38,0)
(50,84,0)
(14,75,0)
(47,48,0)
(75,84,0)
(76,15,0)
(42,36,0)
(5,46,0)
(80,51,0)
(49,46,0)
(0,46,0)
(46,19,0)
(59,10,0)
(0,11,0)
(69,37,0)
(70,37,0)
(50,6,0)
(35,72,0)
(45,77,0)
(83,69,0)
(15,83,0)
(72,48,0)
(24,22,0)
(84,50,0)
(51,10,0)
(18,38,0)
(23,15,0)
(61,67,0)
(17,46,0)
(11,49,0)
(10,51,0)
(8,46,0)
(68,46,0)
(82,36,0)
(36,46,0)
(67,60,0)
(0,22,0)
(74,69,0)
(66,10,0)
(38,46,0)
(50,77,0)
(38,84,0)
(84,75,0)
(34,56,0)
(28,11,0)
(7,17,0)
(83,15,0)
(4,49,0)
(65,0,0)
(42,37,0)
(49,11,0)
(16,67,0)
(13,84,0)
(79,19,0)
(3,77,0)
(48,17,0)
(37,32,0)
(77,50,0)
(41,42,0)
(46,60,0)
(31,27,0)
(22,64,0)
(39,17,0)
(48,67,0)
(73,83,0)
(70,76,0)
(15,76,0)
(54,69,0)
(71,64,0)
(2,0,0)
(51,80,1)
(82,76,1)
(18,33,1)
(39,47,1)
(80,10,1)
(73,70,1)
(3,38,1)
(55,41,1)
(68,19,1)
(0,11,1)
(27,31,1)
(41,82,1)
(77,11,1)
(47,53,1)
(66,59,1)
(50,6,1)
(17,46,1)
(28,53,1)
(26,36,1)
(69,74,1)
(77,45,1)
(20,26,1)
(38,11,1)
(76,70,1)
(84,38,1)
(15,23,1)
(0,46,1)
(70,37,1)
(54,73,1)
(52,27,1)
(42,37,1)
(10,66,1)
(50,77,1)
(49,4,1)
(44,29,1)
(65,2,1)
(49,46,1)
(4,28,1)
(84,50,1)
(72,48,1)
(47,20,1)
(10,11,1)
(36,42,1)
(8,46,1)
(47,76,1)
(45,3,1)
(42,55,1)
(15,83,1)
(25,48,1)
(79,30,1)
(47,22,1)
(38,46,1)
(22,24,1)
(51,10,1)
(7,39,1)
(1,75,1)
(72,35,1)
(52,72,1)
(38,18,1)
(69,37,1)
(23,83,1)
(53,46,1)
(37,8,1)
(29,75,1)
(13,50,1)
(14,84,1)
(31,25,1)
(27,48,1)
(76,15,1)
(74,54,1)
(5,68,1)
(83,46,1)
(75,84,1)
(11,49,1)
(46,5,1)
(47,51,1)
(8,44,1)
(35,27,1)
(2,71,1)
(59,11,1)
(40,37,1)
(24,0,1)
(0,65,1)
(70,85,1)
(17,7,1)
(84,13,1)
(19,79,1)
(85,40,1)
(36,46,1)
(48,17,1)
(33,51,1)
(75,14,1)
(83,69,1)
(71,1,1)
(46,19,1)
(83,70,2)
(36,42,2)
(0,46,2)
(38,11,2)
(50,77,2)
(76,75,2)
(35,27,2)
(4,53,2)
(84,51,2)
(8,46,2)
(83,69,2)
(46,19,2)
(0,75,2)
(2,75,2)
(54,70,2)
(44,75,2)
(17,46,2)
(36,76,2)
(65,75,2)
(83,46,2)
(37,8,2)
(45,51,2)
(13,51,2)
(14,51,2)
(49,46,2)
(77,11,2)
(42,76,2)
(85,75,2)
(27,48,2)
(66,53,2)
(77,51,2)
(15,83,2)
(0,11,2)
(70,75,2)
(71,75,2)
(75,84,2)
(76,70,2)
(24,75,2)
(76,15,2)
(1,75,2)
(18,51,2)
(3,51,2)
(72,27,2)
(10,53,2)
(23,70,2)
(69,37,2)
(82,76,2)
(8,75,2)
(51,53,2)
(10,11,2)
(38,51,2)
(41,76,2)
(84,38,2)
(29,75,2)
(38,46,2)
(40,75,2)
(50,6,2)
(72,48,2)
(59,53,2)
(22,75,2)
(36,46,2)
(33,51,2)
(55,76,2)
(48,17,2)
(15,70,2)
(50,51,2)
(75,51,2)
(11,53,2)
(51,10,2)
(28,53,2)
(11,49,2)
(37,75,2)
(74,70,2)
(69,70,2)
(80,53,2)
(73,70,2)
(20,76,2)
(42,37,2)
(70,37,2)
(49,53,2)
(84,50,2)
(26,76,2)
-----------------------------------
(0,data[dataLen])
(1,"fgets()
(2,data)
(3,100)
(4,data)
(5,data_buf)
(6,int)
(7,"w")
(8,strlen(data)
(9,)
(10,100-dataLen)
(11,dataLen = strlen(data)
(12,)
(13,stdin)
(14,NULL)
(15,data[dataLen-1] == \\\'\\\\n\\\')
(16,if (pipe != NULL)
(17,POPEN(data, "w")
(18,dataLen)
(19,data_buf[100] = FULL_COMMAND)
(20,data[dataLen-1] = \\\'\\\\0\\\')
(21,)
(22,data[dataLen] = \\\'\\\\0\\\')
(23,\\\'\\\\n\\\')
(24,\\\'\\\\0\\\')
(25,pipe)
(26,\\\'\\\\0\\\')
(27,pipe != NULL)
(28,dataLen)
(29,dataLen)
(30,data_buf)
(31,NULL)
(32,)
(33,data)
(34,if (fgets(data+dataLen, (int)
(35,pipe)
(36,data[dataLen-1])
(37,dataLen = strlen(data)
(38,data+dataLen)
(39,data)
(40,dataLen)
(41,dataLen)
(42,dataLen-1)
(43,data_buf)
(44,data)
(45,dataLen)
(46,data = data_buf)
(47,pipe)
(48,pipe = POPEN(data, "w")
(49,strlen(data)
(50,(int)
(51,100-dataLen > 1)
(52,RET)
(53,staticTrue)
(54,dataLen)
(55,1)
(56,)
(57,if(staticTrue)
(58,)
(59,100)
(60,)
(61,pipe)
(62,dataLen)
(63,if (100-dataLen > 1)
(64,)
(65,dataLen)
(66,dataLen)
(67,)
(68,data)
(69,dataLen-1)
(70,dataLen > 0)
(71,printLine("fgets()
(72,PCLOSE(pipe)
(73,data)
(74,1)
(75,fgets(data+dataLen, (int)
(76,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(77,100-dataLen)
(78,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(79,FULL_COMMAND)
(80,1)
(81,data)
(82,data)
(83,data[dataLen-1])
(84,fgets(data+dataLen, (int)
(85,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^