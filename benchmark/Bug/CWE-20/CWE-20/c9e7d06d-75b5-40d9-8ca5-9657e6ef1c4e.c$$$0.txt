-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66_bad()
{
    wchar_t * data;
    wchar_t * dataArray[5];
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
36,38
36,39
36,40
36,41
36,42
36,43
36,44
36,45
37,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
78,79
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
85,94
85,95
85,96
85,97
85,98
85,99
85,100
85,101
85,102
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
107,108
108,109
108,110
108,111
108,112
109,110
111,112
112,113
115,116
116,117
117,118
119,120
120,121
120,122
121,122
121,123
122,123
125,126
127,128
128,129
128,130
129,130
129,131
130,131
130,132
131,132
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
150,154
151,152
153,154
155,156
155,157
156,157
156,158
157,158
159,160
161,162
162,163
164,165
165,166
166,167
168,169
170,171
172,173
172,174
173,174
173,175
174,175
174,176
174,177
175,176
177,178
179,180
181,182
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
189,193
190,191
192,193
194,195
196,197
198,199
198,200
199,200
199,201
200,201
202,203
204,205
206,207
207,208
207,209
208,209
210,211
210,212
210,213
210,214
210,215
211,212
213,214
215,216
215,217
216,217
216,218
218,219
220,221
221,222
221,223
222,223
224,225
226,227
226,228
227,228
228,229
228,230
231,232
232,233
232,234
233,234
233,235
235,236
239,240
239,241
240,241
240,242
241,242
241,243
242,243
244,245
246,247
246,248
247,248
250,251
252,253
253,254
253,255
254,255
254,256
255,256
257,258
257,259
258,259
260,261
260,262
261,262
263,264
264,265
264,266
268,269
269,270
269,271
270,271
272,273
272,274
272,275
273,274
275,276
278,279
278,280
279,280
281,282
282,283
283,284
283,285
284,285
285,286
288,289
289,290
289,291
290,291
292,293
292,294
292,295
293,294
295,296
298,299
298,300
299,300
301,302
302,303
303,304
303,305
304,305
305,306
309,310
309,311
310,311
310,312
311,312
313,314
315,316
316,317
317,318
317,319
318,319
320,321
322,323
322,324
323,324
323,325
324,325
326,327
328,329
329,330
330,331
330,332
331,332
333,334
335,336
336,337
336,338
337,338
337,339
338,339
341,342
343,344
344,345
344,346
345,346
347,348
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,29,33,35,39,41,45,47,50,52,53,57,59,62,66,68,71,75,77,81,83,89,92,94,96,98,102,104,106,110,113,114,118,123,124,126,132,133,134,136,141,142,145,147,152,154,158,160,163,167,169,171,176,178,180,182,184,188,191,193,195,197,201,203,205,209,212,214,217,219,223,225,229,230,234,236,237,238,243,245,248,249,251,256,259,262,265,266,267,271,274,276,277,280,286,287,291,294,296,297,300,306,307,308,312,314,319,321,325,327,332,334,339,340,342,346,348
-----computeFrom-----
31,32
31,33
87,88
87,89
100,101
100,102
120,121
120,122
128,129
128,130
138,139
138,140
149,150
149,151
173,174
173,175
186,187
186,188
199,200
199,201
207,208
207,209
221,222
221,223
226,227
226,228
232,233
232,234
233,234
233,235
240,241
240,242
241,242
241,243
246,247
246,248
253,254
253,255
257,258
257,259
260,261
260,262
269,270
269,271
283,284
283,285
289,290
289,291
303,304
303,305
310,311
310,312
323,324
323,325
336,337
336,338
-----guardedBy-----
312,321
325,334
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66_bad(){    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray);}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66_bad
{    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataArray[5];
wchar_t * dataArray[5];
wchar_t
* dataArray[5]
*
dataArray
[5]
5
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray);
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray)
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink
dataArray
dataArray
-----joern-----
(141,137,0)
(140,96,0)
(65,132,0)
(8,166,0)
(104,165,0)
(24,154,0)
(178,16,0)
(152,64,0)
(169,152,0)
(51,64,0)
(18,22,0)
(166,91,0)
(33,48,0)
(119,160,0)
(49,108,0)
(127,64,0)
(102,137,0)
(25,123,0)
(168,71,0)
(91,122,0)
(88,67,0)
(82,154,0)
(123,79,0)
(150,108,0)
(12,116,0)
(45,117,0)
(105,122,0)
(67,64,0)
(76,61,0)
(108,49,0)
(110,154,0)
(158,48,0)
(160,108,0)
(1,122,0)
(72,17,0)
(113,64,0)
(90,138,0)
(160,119,0)
(77,85,0)
(85,67,0)
(146,28,0)
(153,12,0)
(50,161,0)
(111,102,0)
(112,1,0)
(129,70,0)
(47,64,0)
(22,102,0)
(41,64,0)
(17,101,0)
(31,90,0)
(89,16,0)
(162,138,0)
(173,146,0)
(142,129,0)
(79,103,0)
(149,89,0)
(53,167,0)
(29,64,0)
(97,91,0)
(0,28,0)
(85,138,0)
(155,154,0)
(66,140,0)
(145,62,0)
(5,152,0)
(86,39,0)
(124,1,0)
(144,156,0)
(171,12,0)
(122,71,0)
(93,64,0)
(101,17,0)
(40,49,0)
(157,154,0)
(64,165,0)
(17,49,0)
(2,70,0)
(100,70,0)
(106,182,0)
(164,0,0)
(174,177,0)
(60,105,0)
(91,166,0)
(108,149,0)
(116,154,0)
(11,29,0)
(182,106,0)
(13,96,0)
(56,4,0)
(130,105,0)
(114,154,0)
(38,167,0)
(163,101,0)
(19,85,0)
(70,100,0)
(15,123,0)
(148,165,0)
(107,48,0)
(147,163,0)
(105,182,0)
(14,17,0)
(180,122,0)
(70,129,0)
(33,121,0)
(78,64,0)
(30,182,0)
(163,49,0)
(36,4,0)
(37,100,0)
(132,122,0)
(63,83,0)
(182,105,0)
(96,154,0)
(103,154,0)
(149,108,0)
(138,154,0)
(61,138,0)
(80,6,0)
(69,132,0)
(32,140,0)
(137,165,0)
(146,160,0)
(28,0,0)
(71,122,0)
(146,137,0)
(167,122,0)
(0,137,0)
(167,152,0)
(3,118,0)
(59,99,0)
(122,154,0)
(172,28,0)
(128,152,0)
(16,89,0)
(182,30,0)
(5,122,0)
(137,148,0)
(95,34,0)
(79,123,0)
(89,149,0)
(62,105,0)
(70,154,0)
(55,71,0)
(4,154,0)
(179,79,0)
(61,67,0)
(181,64,0)
(81,130,0)
(143,64,0)
(183,71,0)
(5,159,0)
(94,108,0)
(57,91,0)
(98,151,0)
(73,154,0)
(44,103,0)
(160,146,0)
(87,64,0)
(10,146,0)
(52,89,0)
(83,165,0)
(115,137,0)
(102,165,0)
(161,33,0)
(105,130,0)
(149,156,0)
(46,22,0)
(108,160,0)
(42,67,0)
(156,149,0)
(49,154,0)
(75,1,0)
(125,16,0)
(1,138,0)
(23,165,0)
(121,33,0)
(9,106,0)
(109,5,0)
(105,62,0)
(48,33,0)
(133,165,0)
(16,28,0)
(126,90,0)
(138,1,0)
(28,64,0)
(7,64,0)
(101,163,0)
(170,29,0)
(21,20,0)
(118,116,0)
(134,148,0)
(68,64,0)
(26,154,0)
(116,118,0)
(33,161,0)
(35,135,0)
(84,148,0)
(61,136,0)
(92,154,0)
(131,121,0)
(74,163,0)
(108,138,0)
(130,105,1)
(171,153,1)
(43,21,1)
(44,79,1)
(108,138,1)
(54,59,1)
(182,30,1)
(112,75,1)
(163,49,1)
(81,105,1)
(97,57,1)
(3,12,1)
(60,116,1)
(149,156,1)
(79,179,1)
(145,182,1)
(19,5,1)
(105,122,1)
(105,182,1)
(5,152,1)
(106,9,1)
(100,37,1)
(130,81,1)
(129,142,1)
(176,61,1)
(45,130,1)
(80,166,1)
(43,54,1)
(123,25,1)
(38,174,1)
(148,84,1)
(55,180,1)
(42,152,1)
(180,4,1)
(161,50,1)
(48,107,1)
(85,77,1)
(160,146,1)
(172,67,1)
(85,67,1)
(105,62,1)
(72,163,1)
(31,126,1)
(101,163,1)
(167,122,1)
(103,44,1)
(89,16,1)
(174,101,1)
(85,138,1)
(132,69,1)
(57,130,1)
(71,168,1)
(166,8,1)
(1,124,1)
(144,160,1)
(168,183,1)
(32,70,1)
(84,134,1)
(131,33,1)
(91,122,1)
(90,138,1)
(163,147,1)
(40,90,1)
(96,13,1)
(37,2,1)
(61,76,1)
(17,49,1)
(166,91,1)
(142,132,1)
(124,112,1)
(183,55,1)
(38,43,1)
(102,137,1)
(14,72,1)
(38,95,1)
(18,86,1)
(146,28,1)
(70,129,1)
(16,28,1)
(169,29,1)
(19,167,1)
(150,149,1)
(8,91,1)
(13,140,1)
(138,1,1)
(33,161,1)
(160,119,1)
(170,137,1)
(167,53,1)
(173,10,1)
(76,85,1)
(140,66,1)
(122,71,1)
(167,152,1)
(108,149,1)
(38,45,1)
(10,94,1)
(121,33,1)
(178,52,1)
(79,123,1)
(15,96,1)
(18,176,1)
(139,73,1)
(52,156,1)
(11,170,1)
(156,144,1)
(116,118,1)
(53,38,1)
(56,36,1)
(5,122,1)
(164,172,1)
(62,145,1)
(137,148,1)
(59,139,1)
(146,137,1)
(94,40,1)
(179,123,1)
(49,108,1)
(28,0,1)
(91,97,1)
(158,43,1)
(90,31,1)
(118,3,1)
(137,115,1)
(182,106,1)
(35,121,1)
(12,171,1)
(33,48,1)
(158,28,1)
(67,88,1)
(63,102,1)
(149,89,1)
(108,160,1)
(128,169,1)
(65,122,1)
(153,103,1)
(132,122,1)
(17,14,1)
(29,11,1)
(27,83,1)
(162,166,1)
(83,63,1)
(74,49,1)
(101,17,1)
(38,98,1)
(16,125,1)
(111,22,1)
(73,101,1)
(0,164,1)
(38,80,1)
(146,173,1)
(86,176,1)
(61,67,1)
(69,65,1)
(98,90,1)
(5,109,1)
(126,138,1)
(108,150,1)
(77,19,1)
(25,15,1)
(152,128,1)
(46,18,1)
(147,74,1)
(88,42,1)
(22,46,1)
(0,137,1)
(75,162,1)
(109,167,1)
(61,138,1)
(9,60,1)
(2,129,1)
(1,122,1)
(54,139,1)
(125,178,1)
(36,121,1)
(50,48,1)
(107,158,1)
(4,56,1)
(141,148,1)
(66,32,1)
(21,54,1)
(95,132,1)
(38,35,1)
(115,141,1)
(121,131,1)
(176,85,1)
(70,100,1)
(102,111,1)
(60,132,2)
(85,138,2)
(118,132,2)
(45,130,2)
(28,0,2)
(49,90,2)
(3,132,2)
(132,121,2)
(94,90,2)
(132,122,2)
(54,101,2)
(122,71,2)
(66,132,2)
(97,130,2)
(73,101,2)
(122,121,2)
(156,90,2)
(139,101,2)
(149,156,2)
(146,28,2)
(33,161,2)
(158,43,2)
(101,90,2)
(171,132,2)
(106,132,2)
(125,90,2)
(90,166,2)
(116,118,2)
(81,132,2)
(10,90,2)
(108,138,2)
(146,137,2)
(8,130,2)
(48,43,2)
(25,132,2)
(178,90,2)
(182,106,2)
(12,132,2)
(1,122,2)
(86,176,2)
(167,122,2)
(162,166,2)
(33,48,2)
(80,166,2)
(138,166,2)
(167,152,2)
(61,85,2)
(76,85,2)
(17,163,2)
(16,28,2)
(70,100,2)
(101,17,2)
(142,132,2)
(102,137,2)
(1,166,2)
(89,16,2)
(121,43,2)
(5,152,2)
(95,132,2)
(121,33,2)
(89,90,2)
(52,90,2)
(179,132,2)
(130,132,2)
(90,138,2)
(43,101,2)
(101,163,2)
(124,166,2)
(130,105,2)
(49,108,2)
(2,132,2)
(145,132,2)
(61,67,2)
(37,132,2)
(116,132,2)
(4,121,2)
(137,148,2)
(100,132,2)
(126,166,2)
(70,129,2)
(57,130,2)
(69,121,2)
(21,54,2)
(153,132,2)
(166,130,2)
(166,91,2)
(31,166,2)
(147,90,2)
(98,90,2)
(0,137,2)
(70,132,2)
(160,119,2)
(131,43,2)
(50,43,2)
(146,90,2)
(160,146,2)
(79,123,2)
(56,121,2)
(182,30,2)
(5,167,2)
(103,132,2)
(105,182,2)
(144,90,2)
(61,138,2)
(107,43,2)
(55,121,2)
(15,132,2)
(105,62,2)
(108,160,2)
(44,132,2)
(9,132,2)
(182,132,2)
(161,43,2)
(108,149,2)
(91,122,2)
(180,121,2)
(160,90,2)
(62,132,2)
(59,139,2)
(17,49,2)
(112,166,2)
(16,90,2)
(149,90,2)
(65,121,2)
(109,167,2)
(32,132,2)
(183,121,2)
(123,132,2)
(105,132,2)
(108,90,2)
(71,121,2)
(140,132,2)
(105,122,2)
(35,121,2)
(96,132,2)
(13,132,2)
(138,1,2)
(40,90,2)
(85,67,2)
(91,130,2)
(14,163,2)
(174,101,2)
(129,132,2)
(5,122,2)
(33,43,2)
(150,90,2)
(36,121,2)
(163,49,2)
(163,90,2)
(149,89,2)
(72,163,2)
(79,132,2)
(74,90,2)
(168,121,2)
(75,166,2)
(173,90,2)
-----------------------------------
(0,wcslen(data)
(1,accept(listenSocket, NULL, NULL)
(2,0)
(3,TCP_PORT)
(4,wsaDataInit = 1)
(5,CLOSE_SOCKET(listenSocket)
(6,)
(7,wsaDataInit)
(8,SOCKET_ERROR)
(9,service)
(10,data)
(11,0)
(12,service.sin_port)
(13,AF_INET)
(14,0)
(15,service)
(16,dataLen - 1)
(17,recvResult == 0)
(18,dataArray)
(19,acceptSocket)
(20,)
(21,\'\\\\0\')
(22,dataArray[2])
(23,data)
(24,if (recvResult == SOCKET_ERROR || recvResult == 0)
(25,sin_addr)
(26,if (bind(listenSocket, (struct sockaddr*)
(27,RET)
(28,dataLen = wcslen(data)
(29,wsaDataInit = 0)
(30,struct sockaddr*)
(31,SOCKET_ERROR)
(32,service)
(33,WSAStartup(MAKEWORD(2,2)
(34,)
(35,break;)
(36,wsaDataInit)
(37,service)
(38,listenSocket)
(39,)
(40,recvResult)
(41,service)
(42,acceptSocket)
(43,0)
(44,INADDR_ANY)
(45,break;)
(46,2)
(47,do)
(48,MAKEWORD(2,2)
(49,recvResult = recv(acceptSocket, (char *)
(50,wsaData)
(51,dataLen)
(52,100)
(53,INVALID_SOCKET)
(54,replace)
(55,AF_INET)
(56,1)
(57,listenSocket)
(58,'\\\\0')
(59,'\\\\0')
(60,listenSocket)
(61,CLOSE_SOCKET(acceptSocket)
(62,sizeof(service)
(63,dataArray)
(64,)
(65,listenSocket)
(66,sin_family)
(67,acceptSocket = INVALID_SOCKET)
(68,listenSocket)
(69,INVALID_SOCKET)
(70,memset(&service, 0, sizeof(service)
(71,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(72,recvResult)
(73,\'\\\\0\')
(74,recvResult)
(75,listenSocket)
(76,acceptSocket)
(77,INVALID_SOCKET)
(78,recvResult)
(79,service.sin_addr.s_addr)
(80,break;)
(81,SOCKET_ERROR)
(82,if (listen(listenSocket, LISTEN_BACKLOG)
(83,CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_66b_badSink(dataArray)
(84,COMMAND_ARG2)
(85,acceptSocket != INVALID_SOCKET)
(86,WSACleanup()
(87,if (acceptSocket != INVALID_SOCKET)
(88,INVALID_SOCKET)
(89,100 - dataLen - 1)
(90,acceptSocket == SOCKET_ERROR)
(91,listen(listenSocket, LISTEN_BACKLOG)
(92,if (listenSocket == INVALID_SOCKET)
(93,wsaData)
(94,acceptSocket)
(95,break;)
(96,service.sin_family = AF_INET)
(97,LISTEN_BACKLOG)
(98,break;)
(99,)
(100,sizeof(service)
(101,recvResult == SOCKET_ERROR || recvResult == 0)
(102,dataArray[2] = data)
(103,service.sin_addr.s_addr = INADDR_ANY)
(104,dataBuffer)
(105,bind(listenSocket, (struct sockaddr*)
(106,&service)
(107,2)
(108,recv(acceptSocket, (char *)
(109,listenSocket)
(110,if (replace)
(111,data)
(112,NULL)
(113,if (listenSocket != INVALID_SOCKET)
(114,if (acceptSocket == SOCKET_ERROR)
(115,dataBuffer)
(116,service.sin_port = htons(TCP_PORT)
(117,)
(118,htons(TCP_PORT)
(119,char *)
(120,\'\\\\0\')
(121,WSAStartup(MAKEWORD(2,2)
(122,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(123,service.sin_addr)
(124,NULL)
(125,1)
(126,acceptSocket)
(127,if (wsaDataInit)
(128,INVALID_SOCKET)
(129,&service)
(130,bind(listenSocket, (struct sockaddr*)
(131,NO_ERROR)
(132,listenSocket == INVALID_SOCKET)
(133,dataArray)
(134,dataBuffer)
(135,)
(136,)
(137,data = dataBuffer)
(138,acceptSocket = accept(listenSocket, NULL, NULL)
(139,replace)
(140,service.sin_family)
(141,data)
(142,service)
(143,acceptSocket)
(144,wchar_t)
(145,service)
(146,data + dataLen)
(147,SOCKET_ERROR)
(148,dataBuffer[100] = COMMAND_ARG2)
(149,sizeof(wchar_t)
(150,0)
(151,)
(152,listenSocket = INVALID_SOCKET)
(153,service)
(154,)
(155,if (replace)
(156,sizeof(wchar_t)
(157,if (WSAStartup(MAKEWORD(2,2)
(158,2)
(159,)
(160,(char *)
(161,&wsaData)
(162,acceptSocket)
(163,recvResult == SOCKET_ERROR)
(164,data)
(165,)
(166,listen(listenSocket, LISTEN_BACKLOG)
(167,listenSocket != INVALID_SOCKET)
(168,IPPROTO_TCP)
(169,listenSocket)
(170,wsaDataInit)
(171,sin_port)
(172,dataLen)
(173,dataLen)
(174,break;)
(175,'\\\\0')
(176,wsaDataInit)
(177,)
(178,dataLen)
(179,s_addr)
(180,listenSocket)
(181,replace)
(182,(struct sockaddr*)
(183,SOCK_STREAM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^