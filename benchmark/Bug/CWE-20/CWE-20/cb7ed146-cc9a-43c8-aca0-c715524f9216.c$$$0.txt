-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
15,18
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,51,52,53,56
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
return data;
data
data
-----joern-----
(20,6,0)
(24,5,0)
(9,4,0)
(18,10,0)
(8,17,0)
(12,6,0)
(4,14,0)
(7,4,0)
(5,25,0)
(8,0,0)
(5,14,0)
(25,0,0)
(15,16,0)
(25,5,0)
(3,8,0)
(4,7,0)
(14,4,0)
(2,25,0)
(5,24,0)
(1,17,0)
(13,10,0)
(19,22,0)
(21,8,0)
(14,5,0)
(11,7,0)
(10,0,0)
(10,25,0)
(8,25,0)
(15,22,0)
(25,6,0)
(22,15,0)
(25,5,1)
(7,11,1)
(4,7,1)
(13,18,1)
(5,14,1)
(20,15,1)
(8,0,1)
(18,25,1)
(21,8,1)
(11,9,1)
(14,4,1)
(3,20,1)
(10,13,1)
(10,25,1)
(8,25,1)
(10,0,1)
(5,24,1)
(9,2,1)
(2,26,1)
(19,10,1)
(15,22,1)
(3,26,1)
(22,19,1)
(20,10,1)
(8,3,1)
(25,0,1)
(10,25,2)
(22,10,2)
(25,0,2)
(25,26,2)
(7,26,2)
(2,26,2)
(19,10,2)
(5,24,2)
(25,5,2)
(15,22,2)
(20,26,2)
(13,26,2)
(11,26,2)
(14,26,2)
(4,7,2)
(9,26,2)
(4,26,2)
(21,8,2)
(10,26,2)
(15,10,2)
(18,26,2)
(8,0,2)
(5,26,2)
(14,4,2)
(8,25,2)
(5,14,2)
(10,0,2)
-----------------------------------
(0,wchar_t * data)
(1,if(badStatic)
(2,data)
(3,data)
(4,50*sizeof(wchar_t)
(5,(wchar_t *)
(6,)
(7,sizeof(wchar_t)
(8,return data;)
(9,50)
(10,data == NULL)
(11,wchar_t)
(12,if (data == NULL)
(13,NULL)
(14,malloc(50*sizeof(wchar_t)
(15,exit(-1)
(16,)
(17,)
(18,data)
(19,1)
(20,'\\\\0')
(21,RET)
(22,-1)
(23,\'\\\\0\')
(24,wchar_t *)
(25,data = (wchar_t *)
(26,badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^