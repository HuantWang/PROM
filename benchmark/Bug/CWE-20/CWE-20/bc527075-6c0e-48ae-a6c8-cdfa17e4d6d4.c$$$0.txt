-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_bad()
{
    double * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (double *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        *data = 1.7E300;
    }
    else
    {
        /* FIX: Using sizeof the data type in malloc() */
        data = (double *)malloc(sizeof(*data));
        if (data == NULL) {exit(-1);}
        *data = 1.7E300;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printDoubleLine(*data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
58,59
58,60
58,61
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
71,72
72,73
73,74
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
92,93
95,96
96,97
96,98
97,98
99,100
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,38,42,44,49,51,56,57,62,65,67,70,75,79,81,86,88,93,94,98,101,105,107
-----computeFrom-----
13,14
13,15
24,25
24,26
40,41
40,42
53,54
53,55
60,61
60,62
77,78
77,79
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_bad(){    double * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    else    {        /* FIX: Using sizeof the data type in malloc() */        data = (double *)malloc(sizeof(*data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_bad
{    double * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    else    {        /* FIX: Using sizeof the data type in malloc() */        data = (double *)malloc(sizeof(*data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printDoubleLine(*data);    free(data);}
double * data;
double * data;
double
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }    else    {        /* FIX: Using sizeof the data type in malloc() */        data = (double *)malloc(sizeof(*data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (double *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
data = (double *)malloc(sizeof(data));
data = (double *)malloc(sizeof(data))
data
data
(double *)malloc(sizeof(data))
double *
double
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 1.7E300;
*data = 1.7E300
*data
data
data
1.7E300
{        /* FIX: Using sizeof the data type in malloc() */        data = (double *)malloc(sizeof(*data));        if (data == NULL) {exit(-1);}        *data = 1.7E300;    }
data = (double *)malloc(sizeof(*data));
data = (double *)malloc(sizeof(*data))
data
data
(double *)malloc(sizeof(*data))
double *
double
*
*
malloc(sizeof(*data))
malloc
malloc
sizeof(*data)
(*data)
*data
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 1.7E300;
*data = 1.7E300
*data
data
data
1.7E300
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(49,7,0)
(47,53,0)
(41,3,0)
(30,28,0)
(37,14,0)
(42,20,0)
(2,35,0)
(47,14,0)
(43,14,0)
(6,53,0)
(35,2,0)
(46,15,0)
(14,3,0)
(18,47,0)
(28,10,0)
(5,32,0)
(27,10,0)
(53,35,0)
(36,9,0)
(1,12,0)
(35,44,0)
(47,18,0)
(48,25,0)
(33,53,0)
(33,7,0)
(50,15,0)
(45,36,0)
(8,28,0)
(9,20,0)
(32,4,0)
(38,10,0)
(29,37,0)
(18,10,0)
(31,44,0)
(13,21,0)
(26,21,0)
(51,49,0)
(25,28,0)
(31,25,0)
(50,16,0)
(40,47,0)
(44,31,0)
(47,9,0)
(21,28,0)
(13,12,0)
(12,13,0)
(35,53,0)
(24,9,0)
(23,53,0)
(47,7,0)
(12,1,0)
(53,20,0)
(44,35,0)
(36,53,0)
(25,31,0)
(33,10,0)
(12,7,0)
(0,33,0)
(37,7,0)
(32,5,0)
(7,12,0)
(21,13,0)
(7,3,0)
(39,7,0)
(15,50,0)
(17,5,0)
(11,23,0)
(19,49,0)
(34,23,0)
(48,6,1)
(47,40,1)
(53,35,1)
(37,7,1)
(36,53,1)
(11,34,1)
(26,39,1)
(21,28,1)
(19,7,1)
(47,9,1)
(15,46,1)
(31,25,1)
(40,14,1)
(47,14,1)
(49,51,1)
(29,49,1)
(24,36,1)
(14,43,1)
(23,11,1)
(39,52,1)
(45,50,1)
(12,1,1)
(47,7,1)
(21,26,1)
(32,5,1)
(12,13,1)
(18,47,1)
(51,19,1)
(36,45,1)
(45,23,1)
(47,53,1)
(0,18,1)
(52,28,1)
(33,0,1)
(25,48,1)
(17,49,1)
(35,44,1)
(13,21,1)
(35,2,1)
(8,30,1)
(37,29,1)
(25,28,1)
(23,53,1)
(44,31,1)
(40,9,1)
(5,17,1)
(22,33,1)
(50,15,1)
(6,52,1)
(7,12,1)
(49,7,1)
(9,24,1)
(43,37,1)
(33,7,1)
(34,53,1)
(33,53,1)
(28,8,1)
(29,32,1)
(46,23,1)
(36,52,2)
(53,35,2)
(37,7,2)
(33,7,2)
(45,52,2)
(49,52,2)
(14,52,2)
(13,52,2)
(43,52,2)
(32,49,2)
(35,52,2)
(29,52,2)
(21,52,2)
(47,14,2)
(23,52,2)
(33,53,2)
(39,52,2)
(7,52,2)
(12,13,2)
(49,7,2)
(25,28,2)
(32,5,2)
(50,15,2)
(15,23,2)
(51,52,2)
(25,52,2)
(31,25,2)
(13,21,2)
(50,23,2)
(47,53,2)
(12,52,2)
(18,47,2)
(24,52,2)
(34,52,2)
(5,49,2)
(44,52,2)
(19,52,2)
(23,53,2)
(6,52,2)
(31,52,2)
(35,2,2)
(11,52,2)
(26,52,2)
(53,52,2)
(47,9,2)
(12,1,2)
(17,49,2)
(46,23,2)
(44,31,2)
(9,52,2)
(37,52,2)
(35,44,2)
(21,28,2)
(36,53,2)
(47,7,2)
(48,52,2)
(7,12,2)
-----------------------------------
(0,data)
(1,double *)
(2,double *)
(3,)
(4,)
(5,-1)
(6,data)
(7,data = (double *)
(8,NULL)
(9,*data = 1.7E300)
(10,)
(11,NULL)
(12,(double *)
(13,malloc(sizeof(data)
(14,*data = 1.7E300)
(15,-1)
(16,)
(17,1)
(18,printDoubleLine(*data)
(19,data)
(20,)
(21,sizeof(data)
(22,RET)
(23,data == NULL)
(24,1.7E300)
(25,*data)
(26,data)
(27,if(globalReturnsTrueOrFalse()
(28,data = NULL)
(29,data)
(30,data)
(31,sizeof(*data)
(32,exit(-1)
(33,free(data)
(34,data)
(35,(double *)
(36,*data)
(37,*data)
(38,data)
(39,data)
(40,data)
(41,if (data == NULL)
(42,if (data == NULL)
(43,1.7E300)
(44,malloc(sizeof(*data)
(45,data)
(46,1)
(47,*data)
(48,data)
(49,data == NULL)
(50,exit(-1)
(51,NULL)
(52,globalReturnsTrueOrFalse()
(53,data = (double *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^