-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printLine((char *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid->charFirst);
            printLine((char *)structCharVoid->voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
53,55
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
80,81
82,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
96,97
96,98
97,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
129,130
131,132
131,133
132,133
-----nextToken-----
2,4,8,14,16,17,22,24,27,31,32,36,38,43,45,50,51,54,56,58,62,65,67,70,71,75,78,79,81,86,92,93,101,102,105,106,107,108,112,115,117,120,121,125,128,130,133,134
-----computeFrom-----
34,35
34,36
47,48
47,49
88,89
88,90
94,95
94,96
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad(){    if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad
{    if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(3,20,0)
(53,61,0)
(51,16,0)
(45,29,0)
(55,16,0)
(50,16,0)
(28,34,0)
(28,14,0)
(56,58,0)
(69,14,0)
(20,1,0)
(22,45,0)
(44,69,0)
(48,70,0)
(70,48,0)
(70,4,0)
(64,59,0)
(16,20,0)
(25,14,0)
(53,9,0)
(22,20,0)
(36,11,0)
(48,20,0)
(30,24,0)
(65,24,0)
(30,20,0)
(67,51,0)
(60,30,0)
(32,52,0)
(43,17,0)
(59,64,0)
(24,30,0)
(19,18,0)
(30,15,0)
(4,70,0)
(12,15,0)
(37,25,0)
(10,4,0)
(65,16,0)
(9,58,0)
(18,61,0)
(14,28,0)
(23,65,0)
(63,9,0)
(66,69,0)
(40,20,0)
(5,20,0)
(0,5,0)
(70,26,0)
(46,53,0)
(33,52,0)
(29,45,0)
(49,21,0)
(11,36,0)
(25,45,0)
(58,9,0)
(68,52,0)
(61,53,0)
(26,70,0)
(13,15,0)
(27,51,0)
(39,20,0)
(43,64,0)
(31,4,0)
(39,68,0)
(7,17,0)
(9,63,0)
(68,39,0)
(8,55,0)
(62,28,0)
(64,16,0)
(52,16,0)
(42,68,0)
(61,5,0)
(18,16,0)
(45,25,0)
(63,55,0)
(15,30,0)
(16,64,0)
(54,55,0)
(24,65,0)
(11,2,0)
(69,16,0)
(14,20,0)
(47,36,0)
(61,18,0)
(34,28,0)
(17,43,0)
(64,43,0)
(25,16,0)
(55,63,0)
(15,16,0)
(4,16,0)
(9,53,0)
(4,14,0)
(41,25,0)
(6,18,0)
(52,68,0)
(68,42,0)
(45,22,0)
(16,64,1)
(69,44,1)
(51,67,1)
(66,11,1)
(9,63,1)
(39,68,1)
(7,50,1)
(6,19,1)
(63,55,1)
(13,12,1)
(64,59,1)
(25,41,1)
(68,42,1)
(52,33,1)
(30,24,1)
(45,29,1)
(61,53,1)
(14,28,1)
(31,10,1)
(62,69,1)
(66,51,1)
(55,16,1)
(56,63,1)
(10,14,1)
(24,65,1)
(43,17,1)
(70,4,1)
(69,16,1)
(60,15,1)
(50,57,1)
(17,7,1)
(54,8,1)
(0,61,1)
(12,48,1)
(52,16,1)
(23,60,1)
(25,16,1)
(28,62,1)
(53,9,1)
(18,6,1)
(33,32,1)
(35,22,1)
(58,56,1)
(4,31,1)
(35,57,1)
(18,16,1)
(45,25,1)
(47,51,1)
(48,70,1)
(41,37,1)
(37,39,1)
(4,16,1)
(15,13,1)
(44,66,1)
(27,16,1)
(5,0,1)
(9,58,1)
(64,43,1)
(67,27,1)
(68,52,1)
(65,23,1)
(11,36,1)
(28,34,1)
(19,30,1)
(4,14,1)
(61,18,1)
(30,15,1)
(51,16,1)
(36,47,1)
(55,54,1)
(70,26,1)
(8,18,1)
(22,45,1)
(25,14,1)
(32,5,1)
(53,46,1)
(65,16,1)
(46,9,1)
(15,16,1)
(60,57,2)
(68,57,2)
(48,57,2)
(18,57,2)
(64,43,2)
(25,14,2)
(24,65,2)
(10,57,2)
(37,57,2)
(45,25,2)
(4,57,2)
(66,57,2)
(55,57,2)
(52,57,2)
(67,57,2)
(46,57,2)
(70,4,2)
(69,57,2)
(43,17,2)
(52,16,2)
(64,57,2)
(22,45,2)
(18,16,2)
(54,57,2)
(53,57,2)
(28,34,2)
(65,16,2)
(17,57,2)
(15,16,2)
(4,14,2)
(11,36,2)
(45,57,2)
(9,63,2)
(11,51,2)
(27,57,2)
(14,57,2)
(30,15,2)
(12,57,2)
(53,9,2)
(7,57,2)
(24,57,2)
(30,57,2)
(33,57,2)
(61,53,2)
(0,57,2)
(9,58,2)
(15,57,2)
(13,57,2)
(65,57,2)
(63,55,2)
(19,57,2)
(30,24,2)
(70,57,2)
(62,57,2)
(61,57,2)
(22,57,2)
(8,57,2)
(56,57,2)
(23,57,2)
(68,52,2)
(55,16,2)
(5,57,2)
(14,28,2)
(47,51,2)
(25,57,2)
(6,57,2)
(25,16,2)
(61,18,2)
(70,26,2)
(63,57,2)
(32,57,2)
(48,70,2)
(51,16,2)
(51,57,2)
(41,57,2)
(58,57,2)
(39,68,2)
(45,29,2)
(36,51,2)
(68,42,2)
(39,57,2)
(9,57,2)
(28,57,2)
(44,57,2)
(64,59,2)
(4,16,2)
(50,57,2)
(43,57,2)
(69,16,2)
(31,57,2)
(16,57,2)
(16,64,2)
-----------------------------------
(0,\'\\\\0\')
(1,)
(2,)
(3,if (structCharVoid == NULL)
(4,structCharVoid->voidSecond)
(5,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(6,charFirst)
(7,charVoid)
(8,structCharVoid)
(9,sizeof(structCharVoid->charFirst)
(10,structCharVoid)
(11,exit(-1)
(12,structCharVoid)
(13,charFirst)
(14,structCharVoid->voidSecond = (void *)
(15,structCharVoid->charFirst)
(16,* structCharVoid = (charVoid *)
(17,sizeof(charVoid)
(18,structCharVoid->charFirst)
(19,structCharVoid)
(20,)
(21,)
(22,printLine((char *)
(23,structCharVoid)
(24,sizeof(*structCharVoid)
(25,structCharVoid->voidSecond)
(26,char *)
(27,structCharVoid)
(28,(void *)
(29,char *)
(30,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(31,voidSecond)
(32,structCharVoid)
(33,charFirst)
(34,void *)
(35,RET)
(36,-1)
(37,structCharVoid)
(38,'\\\\0')
(39,printLine((char *)
(40,structCharVoid)
(41,voidSecond)
(42,char *)
(43,malloc(sizeof(charVoid)
(44,voidSecond)
(45,(char *)
(46,1)
(47,1)
(48,printLine((char *)
(49,if(STATIC_CONST_TRUE)
(50,structCharVoid)
(51,structCharVoid == NULL)
(52,structCharVoid->charFirst)
(53,(sizeof(structCharVoid->charFirst)
(54,charFirst)
(55,structCharVoid->charFirst)
(56,char)
(57,STATIC_CONST_TRUE)
(58,sizeof(char)
(59,charVoid *)
(60,SRC_STR)
(61,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(62,SRC_STR)
(63,sizeof(structCharVoid->charFirst)
(64,(charVoid *)
(65,*structCharVoid)
(66,structCharVoid)
(67,NULL)
(68,(char *)
(69,structCharVoid->voidSecond)
(70,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^