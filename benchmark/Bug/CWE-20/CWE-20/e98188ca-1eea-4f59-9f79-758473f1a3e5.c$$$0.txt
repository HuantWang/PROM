-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_16_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    while(1)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        break;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,35,37,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,92,94,96,98,102,103,107,111,112
-----computeFrom-----
33,34
33,35
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_16_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    while(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_16_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_16_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    while(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
while(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    }
1
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        break;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
break;
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(29,26,0)
(10,0,0)
(43,9,0)
(0,24,0)
(12,33,0)
(23,48,0)
(47,22,0)
(38,44,0)
(11,27,0)
(22,24,0)
(13,39,0)
(9,36,0)
(15,34,0)
(1,4,0)
(21,24,0)
(5,9,0)
(43,27,0)
(3,36,0)
(37,44,0)
(46,45,0)
(50,48,0)
(6,24,0)
(34,15,0)
(9,43,0)
(39,27,0)
(51,33,0)
(39,26,0)
(4,49,0)
(31,27,0)
(17,39,0)
(41,22,0)
(0,48,0)
(44,27,0)
(45,48,0)
(30,35,0)
(26,39,0)
(7,50,0)
(48,33,0)
(50,7,0)
(36,49,0)
(0,34,0)
(8,33,0)
(28,33,0)
(40,0,0)
(14,45,0)
(2,27,0)
(20,2,0)
(26,4,0)
(34,0,0)
(25,34,0)
(22,7,0)
(19,15,0)
(24,35,0)
(7,22,0)
(42,43,0)
(32,43,0)
(9,5,1)
(10,44,1)
(44,38,1)
(11,31,1)
(27,11,1)
(31,16,1)
(43,27,1)
(4,1,1)
(15,19,1)
(7,22,1)
(6,16,1)
(38,37,1)
(20,4,1)
(17,13,1)
(9,43,1)
(18,50,1)
(3,9,1)
(37,2,1)
(47,0,1)
(24,21,1)
(22,24,1)
(37,27,1)
(31,30,1)
(1,26,1)
(19,25,1)
(26,29,1)
(26,39,1)
(25,40,1)
(32,42,1)
(13,36,1)
(2,27,1)
(21,6,1)
(40,10,1)
(39,27,1)
(41,47,1)
(22,41,1)
(30,24,1)
(39,17,1)
(2,20,1)
(42,44,1)
(29,39,1)
(5,43,1)
(0,24,1)
(36,3,1)
(44,27,1)
(34,15,1)
(50,7,1)
(43,32,1)
(0,34,1)
(7,22,2)
(5,44,2)
(21,16,2)
(44,27,2)
(44,44,2)
(30,16,2)
(36,44,2)
(9,43,2)
(37,44,2)
(38,44,2)
(3,44,2)
(32,44,2)
(29,44,2)
(24,16,2)
(20,44,2)
(17,44,2)
(42,44,2)
(39,44,2)
(43,44,2)
(26,44,2)
(39,27,2)
(6,16,2)
(43,27,2)
(50,7,2)
(13,44,2)
(22,24,2)
(34,15,2)
(9,44,2)
(4,44,2)
(26,39,2)
(2,27,2)
(0,34,2)
(1,44,2)
(2,44,2)
(0,24,2)
-----------------------------------
(0,memmove(data, source, 100*sizeof(twoIntsStruct)
(1,0)
(2,i++)
(3,0)
(4,source[i].intTwo = 0)
(5,intOne)
(6,data)
(7,&data[0])
(8,dataGoodBuffer)
(9,source[i].intOne)
(10,data)
(11,0)
(12,while(1)
(13,source)
(14,i)
(15,sizeof(twoIntsStruct)
(16,1)
(17,i)
(18,RET)
(19,twoIntsStruct)
(20,i)
(21,dataBadBuffer)
(22,data[0])
(23,source)
(24,data = dataBadBuffer)
(25,100)
(26,source[i].intTwo)
(27,i = 0)
(28,dataBadBuffer)
(29,intTwo)
(30,break;)
(31,i)
(32,i)
(33,)
(34,100*sizeof(twoIntsStruct)
(35,)
(36,source[i].intOne = 0)
(37,i)
(38,100)
(39,source[i])
(40,source)
(41,0)
(42,source)
(43,source[i])
(44,i < 100)
(45,)
(46,for (i = 0; i < 100; i++)
(47,data)
(48,)
(49,)
(50,printStructLine(&data[0])
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^