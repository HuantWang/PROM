-----label-----
1
-----code-----
static void badSink()
{
    twoIntsStruct * data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
10,13
13,14
14,15
16,17
16,18
16,19
16,20
17,18
18,19
18,20
19,20
21,22
21,23
23,24
25,26
25,27
26,27
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
35,36
38,39
38,40
39,40
42,43
43,44
45,46
45,47
46,47
47,48
47,49
48,49
48,50
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
62,63
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,12,15,20,22,24,29,31,36,37,40,41,44,51,53,54,55,61,63,64,65,69,71,73,75,79,80,84,88,89
-----computeFrom-----
34,35
34,36
38,39
38,40
47,48
47,49
57,58
57,59
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    twoIntsStruct * data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
static void
badSink()
badSink
{    twoIntsStruct * data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData;
twoIntsStruct * data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData;
twoIntsStruct
twoIntsStruct
* data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData
*
data
= CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(34,21,0)
(14,1,0)
(37,4,0)
(5,11,0)
(9,40,0)
(10,37,0)
(26,4,0)
(21,14,0)
(36,39,0)
(0,21,0)
(3,45,0)
(17,8,0)
(2,35,0)
(4,37,0)
(23,9,0)
(43,23,0)
(7,36,0)
(1,14,0)
(16,12,0)
(28,29,0)
(39,36,0)
(24,1,0)
(39,45,0)
(38,23,0)
(12,8,0)
(44,39,0)
(21,8,0)
(37,31,0)
(33,36,0)
(45,20,0)
(22,20,0)
(6,22,0)
(40,8,0)
(29,31,0)
(40,9,0)
(36,31,0)
(18,12,0)
(4,22,0)
(42,14,0)
(27,37,0)
(9,23,0)
(23,11,0)
(21,11,0)
(14,21,0)
(32,19,0)
(13,11,0)
(25,31,0)
(11,19,0)
(30,35,0)
(35,31,0)
(41,31,0)
(8,19,0)
(35,30,1)
(21,14,1)
(39,36,1)
(26,37,1)
(10,45,1)
(6,4,1)
(38,21,1)
(44,36,1)
(2,29,1)
(23,43,1)
(11,13,1)
(29,28,1)
(28,22,1)
(2,31,1)
(41,25,1)
(29,31,1)
(37,31,1)
(39,44,1)
(31,41,1)
(1,24,1)
(21,11,1)
(36,33,1)
(25,11,1)
(33,7,1)
(7,35,1)
(40,9,1)
(22,6,1)
(34,0,1)
(27,10,1)
(43,38,1)
(3,39,1)
(35,31,1)
(14,1,1)
(30,2,1)
(15,40,1)
(23,11,1)
(45,3,1)
(4,37,1)
(4,26,1)
(42,34,1)
(0,35,1)
(13,5,1)
(37,27,1)
(9,23,1)
(24,42,1)
(36,31,1)
(37,35,2)
(21,11,2)
(40,9,2)
(4,37,2)
(22,35,2)
(30,35,2)
(37,31,2)
(10,35,2)
(9,23,2)
(21,14,2)
(29,35,2)
(36,35,2)
(45,35,2)
(23,11,2)
(39,36,2)
(36,31,2)
(4,35,2)
(35,31,2)
(28,35,2)
(29,31,2)
(2,35,2)
(14,1,2)
(6,35,2)
(39,35,2)
(33,35,2)
(3,35,2)
(44,35,2)
(7,35,2)
(35,35,2)
(26,35,2)
(27,35,2)
-----------------------------------
(0,data)
(1,sizeof(twoIntsStruct)
(2,i)
(3,0)
(4,source[i].intTwo)
(5,data)
(6,0)
(7,source)
(8,)
(9,&data[0])
(10,source)
(11,* data = CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData)
(12,)
(13,CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45_badData)
(14,100*sizeof(twoIntsStruct)
(15,RET)
(16,for (i = 0; i < 100; i++)
(17,source)
(18,i)
(19,)
(20,)
(21,memcpy(data, source, 100*sizeof(twoIntsStruct)
(22,source[i].intTwo = 0)
(23,data[0])
(24,twoIntsStruct)
(25,i)
(26,intTwo)
(27,i)
(28,i)
(29,i++)
(30,100)
(31,i = 0)
(32,data)
(33,i)
(34,source)
(35,i < 100)
(36,source[i])
(37,source[i])
(38,data)
(39,source[i].intOne)
(40,printStructLine(&data[0])
(41,0)
(42,100)
(43,0)
(44,intOne)
(45,source[i].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^