-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
57,62
58,59
59,60
59,61
61,62
61,63
61,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
82,84
85,86
86,87
86,88
87,88
87,89
88,89
90,91
90,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,51,54,56,60,62,64,66,70,72,74,78,80,83,84,89,91,92,93,97,99,103,105
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
49,50
49,51
75,76
75,77
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    badStatic = 1; /* true */    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    badStatic = 1; /* true */    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,23,0)
(25,12,0)
(21,10,0)
(28,44,0)
(49,23,0)
(17,19,0)
(46,6,0)
(45,32,0)
(30,38,0)
(13,47,0)
(20,32,0)
(5,20,0)
(47,12,0)
(37,45,0)
(14,6,0)
(8,28,0)
(28,20,0)
(29,6,0)
(48,32,0)
(43,12,0)
(38,26,0)
(38,20,0)
(11,32,0)
(28,24,0)
(26,38,0)
(4,16,0)
(9,26,0)
(26,9,0)
(44,32,0)
(22,24,0)
(46,23,0)
(24,28,0)
(2,43,0)
(34,38,0)
(39,9,0)
(38,32,0)
(50,44,0)
(1,23,0)
(43,26,0)
(0,24,0)
(6,46,0)
(35,17,0)
(3,11,0)
(17,14,0)
(18,49,0)
(36,16,0)
(45,12,0)
(6,29,0)
(32,23,0)
(14,17,0)
(15,21,0)
(26,43,0)
(16,46,0)
(42,23,0)
(38,12,0)
(40,46,0)
(10,7,0)
(12,47,0)
(6,14,0)
(19,17,0)
(11,12,0)
(47,46,0)
(10,21,0)
(33,19,0)
(31,49,0)
(41,20,0)
(39,43,1)
(27,11,1)
(43,2,1)
(26,9,1)
(11,3,1)
(8,38,1)
(44,50,1)
(20,41,1)
(4,36,1)
(33,35,1)
(38,12,1)
(10,21,1)
(26,43,1)
(50,28,1)
(49,31,1)
(9,39,1)
(5,12,1)
(37,44,1)
(47,13,1)
(21,15,1)
(45,12,1)
(24,0,1)
(0,22,1)
(3,45,1)
(28,20,1)
(25,49,1)
(15,16,1)
(6,29,1)
(47,46,1)
(28,24,1)
(31,18,1)
(22,8,1)
(2,30,1)
(18,10,1)
(38,26,1)
(17,19,1)
(34,20,1)
(14,17,1)
(46,6,1)
(13,25,1)
(19,33,1)
(16,46,1)
(35,40,1)
(41,5,1)
(43,12,1)
(16,4,1)
(18,16,1)
(12,47,1)
(38,20,1)
(45,37,1)
(36,46,1)
(30,34,1)
(6,14,1)
(11,12,1)
(38,26,2)
(16,46,2)
(10,16,2)
(46,6,2)
(10,21,2)
(43,12,2)
(28,24,2)
(6,29,2)
(15,16,2)
(17,19,2)
(38,12,2)
(26,43,2)
(26,9,2)
(21,16,2)
(38,20,2)
(12,47,2)
(28,20,2)
(14,17,2)
(47,46,2)
(45,12,2)
(11,12,2)
(6,14,2)
-----------------------------------
(0,1)
(1,data)
(2,data)
(3,data)
(4,NULL)
(5,dest)
(6,(char *)
(7,)
(8,dest)
(9,sizeof(char)
(10,exit(-1)
(11,free(data)
(12,data = badSource(data)
(13,data)
(14,malloc(100*sizeof(char)
(15,1)
(16,data == NULL)
(17,100*sizeof(char)
(18,badStatic)
(19,sizeof(char)
(20,dest[50] = "")
(21,-1)
(22,50)
(23,)
(24,50-1)
(25,data)
(26,strlen(data)
(27,RET)
(28,dest[50-1])
(29,char *)
(30,data)
(31,1)
(32,)
(33,char)
(34,dest)
(35,100)
(36,data)
(37,data)
(38,memcpy(dest, data, strlen(data)
(39,char)
(40,data)
(41,"")
(42,if (data == NULL)
(43,strlen(data)
(44,dest[50-1] = \\\'\\\\0\\\')
(45,printLine(data)
(46,data = (char *)
(47,badSource(data)
(48,dest)
(49,badStatic = 1)
(50,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^