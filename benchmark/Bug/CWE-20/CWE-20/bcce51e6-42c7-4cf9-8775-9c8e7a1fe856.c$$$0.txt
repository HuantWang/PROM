-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printWLine((wchar_t *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid->charFirst);
            printWLine((wchar_t *)structCharVoid->voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
53,55
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
80,81
82,83
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
96,97
96,98
97,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
129,130
131,132
131,133
132,133
-----nextToken-----
2,4,8,14,16,17,22,24,27,31,32,36,38,43,45,50,51,54,56,58,62,65,67,70,71,75,78,79,81,86,92,93,101,102,105,106,107,108,112,115,117,120,121,125,128,130,133,134
-----computeFrom-----
34,35
34,36
47,48
47,49
88,89
88,90
94,95
94,96
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad(){    if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad()
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04_bad
{    if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }    }}
if(STATIC_CONST_TRUE)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))
sizeof(structCharVoid->charFirst)/sizeof(wchar_t)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid->charFirst);
printWLine((wchar_t *)structCharVoid->charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid->charFirst
wchar_t *
wchar_t
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(9,30,0)
(54,9,0)
(37,7,0)
(2,9,0)
(49,55,0)
(48,18,0)
(23,9,0)
(7,4,0)
(11,47,0)
(50,40,0)
(55,3,0)
(16,39,0)
(18,24,0)
(4,30,0)
(36,12,0)
(14,9,0)
(48,30,0)
(20,4,0)
(12,8,0)
(46,54,0)
(38,25,0)
(28,7,0)
(56,44,0)
(24,18,0)
(44,56,0)
(4,50,0)
(31,30,0)
(5,47,0)
(32,30,0)
(52,31,0)
(21,56,0)
(39,16,0)
(6,20,0)
(42,30,0)
(16,54,0)
(25,9,0)
(16,10,0)
(5,31,0)
(8,12,0)
(18,48,0)
(9,21,0)
(7,18,0)
(12,14,0)
(34,54,0)
(7,9,0)
(12,36,0)
(21,9,0)
(43,25,0)
(10,16,0)
(29,23,0)
(35,49,0)
(54,16,0)
(8,30,0)
(33,44,0)
(47,9,0)
(21,19,0)
(55,49,0)
(1,14,0)
(31,5,0)
(45,30,0)
(15,23,0)
(13,14,0)
(31,23,0)
(53,0,0)
(20,9,0)
(10,30,0)
(50,4,0)
(56,21,0)
(23,31,0)
(14,12,0)
(54,4,0)
(17,50,0)
(18,7,0)
(40,50,0)
(47,5,0)
(30,27,0)
(22,20,0)
(19,21,0)
(43,38,1)
(12,14,1)
(17,20,1)
(23,29,1)
(48,18,1)
(16,54,1)
(20,9,1)
(50,40,1)
(8,12,1)
(37,8,1)
(47,9,1)
(12,36,1)
(33,2,1)
(44,33,1)
(11,52,1)
(51,48,1)
(49,35,1)
(16,39,1)
(7,4,1)
(1,13,1)
(38,9,1)
(31,5,1)
(14,1,1)
(34,46,1)
(6,55,1)
(29,15,1)
(13,32,1)
(22,6,1)
(7,9,1)
(54,4,1)
(25,9,1)
(21,56,1)
(15,10,1)
(18,7,1)
(56,44,1)
(10,16,1)
(46,4,1)
(2,26,1)
(25,43,1)
(52,23,1)
(4,50,1)
(54,9,1)
(32,31,1)
(18,24,1)
(28,37,1)
(20,22,1)
(9,21,1)
(35,25,1)
(47,11,1)
(7,28,1)
(31,23,1)
(54,34,1)
(55,49,1)
(6,25,1)
(5,47,1)
(23,9,1)
(50,17,1)
(14,9,1)
(51,26,1)
(21,19,1)
(18,24,2)
(5,26,2)
(25,26,2)
(32,26,2)
(4,26,2)
(55,49,2)
(1,26,2)
(18,26,2)
(34,26,2)
(16,39,2)
(18,7,2)
(50,26,2)
(28,26,2)
(50,40,2)
(6,26,2)
(56,44,2)
(38,26,2)
(9,21,2)
(31,23,2)
(10,26,2)
(7,4,2)
(23,26,2)
(54,4,2)
(56,26,2)
(20,26,2)
(2,26,2)
(55,25,2)
(15,26,2)
(37,26,2)
(10,16,2)
(21,19,2)
(16,54,2)
(9,26,2)
(44,26,2)
(49,25,2)
(13,26,2)
(25,9,2)
(48,18,2)
(11,26,2)
(52,26,2)
(8,12,2)
(21,26,2)
(14,9,2)
(54,26,2)
(33,26,2)
(12,26,2)
(35,25,2)
(54,9,2)
(12,36,2)
(8,26,2)
(14,26,2)
(7,9,2)
(20,9,2)
(16,26,2)
(17,26,2)
(47,26,2)
(31,5,2)
(31,26,2)
(48,26,2)
(7,26,2)
(5,47,2)
(29,26,2)
(23,9,2)
(4,50,2)
(43,26,2)
(47,9,2)
(22,26,2)
(46,26,2)
(21,56,2)
(12,14,2)
-----------------------------------
(0,)
(1,charFirst)
(2,structCharVoid)
(3,)
(4,structCharVoid->voidSecond = (void *)
(5,sizeof(*structCharVoid)
(6,structCharVoid)
(7,structCharVoid->voidSecond)
(8,printWLine((wchar_t *)
(9,* structCharVoid = (charVoid *)
(10,printWLine((wchar_t *)
(11,structCharVoid)
(12,(wchar_t *)
(13,structCharVoid)
(14,structCharVoid->charFirst)
(15,structCharVoid)
(16,(wchar_t *)
(17,SRC_STR)
(18,(wchar_t *)
(19,charVoid *)
(20,structCharVoid->voidSecond)
(21,(charVoid *)
(22,voidSecond)
(23,structCharVoid->charFirst)
(24,wchar_t *)
(25,structCharVoid == NULL)
(26,STATIC_CONST_TRUE)
(27,)
(28,voidSecond)
(29,charFirst)
(30,)
(31,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(32,\'\\\\0\')
(33,charVoid)
(34,voidSecond)
(35,1)
(36,wchar_t *)
(37,structCharVoid)
(38,structCharVoid)
(39,wchar_t *)
(40,void *)
(41,'\\\\0')
(42,structCharVoid)
(43,NULL)
(44,sizeof(charVoid)
(45,if (structCharVoid == NULL)
(46,structCharVoid)
(47,*structCharVoid)
(48,printWLine((wchar_t *)
(49,-1)
(50,(void *)
(51,RET)
(52,SRC_STR)
(53,if(STATIC_CONST_TRUE)
(54,structCharVoid->voidSecond)
(55,exit(-1)
(56,malloc(sizeof(charVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^