-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
47,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,45,46,49,54,55,58,59,62,68,70,74,76,80,82
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
52,53
52,54
56,57
56,58
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_17_bad()
CWE190_Integer_Overflow__int64_t_rand_square_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(13,24,0)
(0,21,0)
(17,14,0)
(35,32,0)
(6,36,0)
(20,3,0)
(9,17,0)
(21,28,0)
(12,31,0)
(2,3,0)
(18,24,0)
(27,36,0)
(26,22,0)
(10,3,0)
(7,13,0)
(31,12,0)
(29,39,0)
(32,11,0)
(33,14,0)
(22,11,0)
(4,39,0)
(21,31,0)
(14,16,0)
(39,33,0)
(8,11,0)
(15,3,0)
(19,33,0)
(17,33,0)
(31,1,0)
(33,39,0)
(1,31,0)
(34,11,0)
(36,24,0)
(30,3,0)
(38,14,0)
(39,21,0)
(23,22,0)
(25,24,0)
(37,3,0)
(31,21,0)
(19,22,1)
(25,20,1)
(26,32,1)
(5,22,1)
(34,8,1)
(4,29,1)
(32,11,1)
(33,39,1)
(21,31,1)
(9,33,1)
(39,21,1)
(39,4,1)
(13,24,1)
(17,9,1)
(12,0,1)
(24,18,1)
(36,27,1)
(6,24,1)
(0,36,1)
(32,35,1)
(27,6,1)
(17,33,1)
(31,12,1)
(7,21,1)
(31,1,1)
(18,25,1)
(23,26,1)
(26,11,1)
(36,24,1)
(13,7,1)
(35,17,1)
(29,19,1)
(6,13,1)
(11,34,1)
(22,11,1)
(8,36,1)
(22,23,1)
(19,22,2)
(33,22,2)
(6,36,2)
(39,21,2)
(0,36,2)
(31,1,2)
(17,33,2)
(33,39,2)
(4,22,2)
(36,36,2)
(35,22,2)
(13,24,2)
(22,22,2)
(21,36,2)
(21,31,2)
(31,12,2)
(39,22,2)
(23,22,2)
(32,22,2)
(32,11,2)
(13,36,2)
(27,36,2)
(31,36,2)
(7,36,2)
(17,22,2)
(12,36,2)
(26,22,2)
(9,22,2)
(36,24,2)
(22,11,2)
(29,22,2)
-----------------------------------
(0,data)
(1,int64_t)
(2,for(j = 0; j < 1; j++)
(3,)
(4,data)
(5,RET)
(6,i)
(7,i)
(8,j)
(9,result)
(10,i)
(11,j = 0)
(12,RAND64()
(13,i++)
(14,)
(15,j)
(16,)
(17,printLongLongLine(result)
(18,0)
(19,result)
(20,L)
(21,data = (int64_t)
(22,j < 1)
(23,1)
(24,i = 0)
(25,i)
(26,j)
(27,1)
(28,)
(29,data)
(30,data)
(31,(int64_t)
(32,j++)
(33,result = data * data)
(34,0)
(35,j)
(36,i < 1)
(37,for(i = 0; i < 1; i++)
(38,result)
(39,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^