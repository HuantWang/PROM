-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink(char * data)
{
    {
        char dest[50] = "";
        size_t i, dataLen;
        dataLen = strlen(data);
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        for (i = 0; i < dataLen; i++)
        {
            dest[i] = data[i];
        }
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
22,25
23,24
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
44,45
44,46
45,46
47,48
49,50
50,51
52,53
53,54
54,55
54,56
55,56
55,57
56,57
58,59
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,6,8,9,14,16,18,20,24,26,28,32,35,37,42,43,46,48,51,57,59,62,64,69,71,72,73,77,79,83,85
-----computeFrom-----
30,31
30,32
40,41
40,42
44,45
44,46
54,55
54,56
66,67
66,68
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink(char * data){    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink(char * data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink
char * data
char
* data
*
data
{    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
{        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
size_t i, dataLen;
size_t i, dataLen;
size_t
size_t
i
i
dataLen
dataLen
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < dataLen
i
i
dataLen
dataLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,6,0)
(33,10,0)
(17,22,0)
(29,3,0)
(30,2,0)
(32,14,0)
(35,12,0)
(20,31,0)
(34,10,0)
(26,29,0)
(33,6,0)
(40,10,0)
(40,29,0)
(2,29,0)
(31,12,0)
(36,39,0)
(33,25,0)
(28,1,0)
(38,15,0)
(14,25,0)
(34,29,0)
(22,6,0)
(12,39,0)
(14,2,0)
(12,31,0)
(25,33,0)
(23,14,0)
(4,6,0)
(5,33,0)
(12,2,0)
(37,29,0)
(1,13,0)
(41,29,0)
(7,29,0)
(27,33,0)
(18,34,0)
(19,40,0)
(25,16,0)
(11,6,0)
(13,29,0)
(13,1,0)
(22,13,0)
(39,29,0)
(1,10,0)
(14,6,0)
(8,13,0)
(0,2,0)
(9,22,0)
(21,31,0)
(36,12,1)
(30,0,1)
(13,1,1)
(33,6,1)
(15,6,1)
(22,9,1)
(12,2,1)
(27,14,1)
(38,25,1)
(1,28,1)
(21,20,1)
(23,22,1)
(19,34,1)
(40,19,1)
(34,18,1)
(15,38,1)
(35,22,1)
(17,6,1)
(22,13,1)
(33,5,1)
(24,40,1)
(12,31,1)
(14,32,1)
(11,4,1)
(5,27,1)
(32,23,1)
(40,10,1)
(14,6,1)
(33,10,1)
(39,36,1)
(28,8,1)
(18,39,1)
(31,21,1)
(1,10,1)
(25,33,1)
(9,17,1)
(14,2,1)
(6,11,1)
(2,30,1)
(8,2,1)
(34,10,1)
(22,6,1)
(17,15,1)
(20,35,1)
(4,13,1)
(17,22,2)
(33,22,2)
(22,13,2)
(1,10,2)
(22,22,2)
(40,10,2)
(5,22,2)
(33,6,2)
(12,31,2)
(34,10,2)
(15,6,2)
(14,22,2)
(22,6,2)
(12,2,2)
(38,22,2)
(9,22,2)
(25,33,2)
(23,22,2)
(32,22,2)
(15,22,2)
(25,22,2)
(33,10,2)
(13,1,2)
(14,2,2)
(27,22,2)
(14,6,2)
-----------------------------------
(0,dest)
(1,strlen(data)
(2,dest[50] = "")
(3,)
(4,i)
(5,i)
(6,i = 0)
(7,dataLen)
(8,dataLen)
(9,dataLen)
(10,char * data)
(11,0)
(12,dest[50-1])
(13,dataLen = strlen(data)
(14,dest[i])
(15,i++)
(16,)
(17,i)
(18,data)
(19,data)
(20,50)
(21,1)
(22,i < dataLen)
(23,dest)
(24,RET)
(25,dest[i] = data[i])
(26,i)
(27,data)
(28,data)
(29,)
(30,"")
(31,50-1)
(32,i)
(33,data[i])
(34,printLine(data)
(35,dest)
(36,\\\'\\\\0\\\')
(37,for (i = 0; i < dataLen; i++)
(38,i)
(39,dest[50-1] = \\\'\\\\0\\\')
(40,free(data)
(41,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^