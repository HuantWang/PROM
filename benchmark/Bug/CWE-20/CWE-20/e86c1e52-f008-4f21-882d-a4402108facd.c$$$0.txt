-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
54,60
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
93,94
93,95
94,95
97,98
98,99
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,78,81,83,88,89,92,95,96,99,105,107,110,112,116,118,122,124
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
76,77
76,78
86,87
86,88
90,91
90,92
93,94
93,95
102,103
102,104
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,10,0)
(45,5,0)
(5,17,0)
(27,59,0)
(14,21,0)
(49,17,0)
(58,0,0)
(4,24,0)
(61,46,0)
(9,17,0)
(51,26,0)
(42,37,0)
(33,44,0)
(53,0,0)
(0,11,0)
(20,59,0)
(56,19,0)
(23,26,0)
(46,21,0)
(59,11,0)
(46,53,0)
(18,36,0)
(41,19,0)
(44,33,0)
(55,59,0)
(25,24,0)
(25,53,0)
(3,25,0)
(21,46,0)
(25,19,0)
(32,31,0)
(49,37,0)
(17,5,0)
(30,35,0)
(27,0,0)
(29,25,0)
(40,11,0)
(17,49,0)
(60,4,0)
(57,11,0)
(4,59,0)
(39,51,0)
(37,26,0)
(26,16,0)
(13,53,0)
(35,19,0)
(6,33,0)
(28,31,0)
(22,53,0)
(24,25,0)
(7,35,0)
(43,0,0)
(1,27,0)
(4,19,0)
(48,30,0)
(15,30,0)
(50,0,0)
(52,4,0)
(30,21,0)
(38,16,0)
(55,26,0)
(34,59,0)
(44,12,0)
(37,49,0)
(37,42,0)
(21,0,0)
(36,19,0)
(8,51,0)
(26,37,0)
(4,26,0)
(35,30,0)
(55,0,0)
(2,0,0)
(27,26,0)
(47,55,0)
(35,30,1)
(17,5,1)
(21,46,1)
(22,31,1)
(22,44,1)
(46,53,1)
(59,20,1)
(36,19,1)
(33,6,1)
(60,35,1)
(37,49,1)
(37,42,1)
(35,19,1)
(13,22,1)
(27,26,1)
(41,56,1)
(48,7,1)
(25,3,1)
(47,35,1)
(1,55,1)
(4,19,1)
(4,52,1)
(7,19,1)
(39,8,1)
(25,53,1)
(19,41,1)
(51,26,1)
(36,18,1)
(55,47,1)
(7,36,1)
(8,26,1)
(22,51,1)
(25,19,1)
(24,25,1)
(45,9,1)
(52,60,1)
(20,34,1)
(53,13,1)
(55,26,1)
(56,21,1)
(31,28,1)
(54,27,1)
(46,61,1)
(27,1,1)
(29,4,1)
(30,15,1)
(44,33,1)
(55,59,1)
(4,59,1)
(26,37,1)
(15,48,1)
(28,32,1)
(51,39,1)
(27,59,1)
(3,29,1)
(61,14,1)
(30,21,1)
(23,31,1)
(32,59,1)
(5,45,1)
(14,53,1)
(49,17,1)
(9,23,1)
(4,26,1)
(18,24,1)
(6,51,1)
(37,31,2)
(35,35,2)
(44,51,2)
(46,53,2)
(30,35,2)
(4,35,2)
(36,35,2)
(55,59,2)
(33,51,2)
(3,35,2)
(48,35,2)
(37,42,2)
(27,26,2)
(30,21,2)
(18,35,2)
(8,31,2)
(23,31,2)
(49,31,2)
(25,19,2)
(9,31,2)
(21,46,2)
(7,35,2)
(26,31,2)
(25,35,2)
(49,17,2)
(51,31,2)
(15,35,2)
(25,53,2)
(4,26,2)
(55,26,2)
(51,26,2)
(4,19,2)
(36,19,2)
(39,31,2)
(29,35,2)
(60,35,2)
(52,35,2)
(35,30,2)
(17,31,2)
(4,59,2)
(37,49,2)
(24,25,2)
(44,33,2)
(35,19,2)
(6,51,2)
(26,37,2)
(17,5,2)
(45,31,2)
(24,35,2)
(5,31,2)
(27,59,2)
-----------------------------------
(0,)
(1,data)
(2,sourceLen)
(3,i)
(4,data[i])
(5,sizeof(wchar_t)
(6,1)
(7,i)
(8,data)
(9,10)
(10,)
(11,)
(12,)
(13,SRC_STRING)
(14,sourceLen)
(15,1)
(16,)
(17,10*sizeof(wchar_t)
(18,i)
(19,i = 0)
(20,NULL)
(21,sourceLen = wcslen(source)
(22,source)
(23,data)
(24,data[i] = source[i])
(25,source[i])
(26,data = (wchar_t *)
(27,free(data)
(28,5)
(29,source)
(30,sourceLen + 1)
(31,5==5)
(32,5)
(33,-1)
(34,data)
(35,i < sourceLen + 1)
(36,i++)
(37,(wchar_t *)
(38,if (data == NULL)
(39,NULL)
(40,if(5==5)
(41,0)
(42,wchar_t *)
(43,for (i = 0; i < sourceLen + 1; i++)
(44,exit(-1)
(45,wchar_t)
(46,wcslen(source)
(47,data)
(48,sourceLen)
(49,malloc(10*sizeof(wchar_t)
(50,i)
(51,data == NULL)
(52,i)
(53,source[10+1] = SRC_STRING)
(54,RET)
(55,printWLine(data)
(56,i)
(57,data)
(58,source)
(59,data = NULL)
(60,data)
(61,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^