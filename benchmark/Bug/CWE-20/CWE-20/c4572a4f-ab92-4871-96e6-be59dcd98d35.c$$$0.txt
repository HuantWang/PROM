-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_17_bad()
{
    int i;
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
15,17
18,19
19,20
19,21
20,21
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
32,33
34,35
34,36
34,37
34,38
35,36
36,37
36,38
37,38
40,41
40,42
41,42
44,45
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
59,60
59,61
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
80,81
81,82
83,84
83,85
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
90,91
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
100,101
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
112,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
124,125
124,126
125,126
-----nextToken-----
2,4,8,10,14,16,17,21,23,25,29,31,33,38,39,42,43,46,51,53,58,60,62,67,69,74,75,78,79,82,89,91,92,93,99,101,102,103,107,109,111,113,117,118,122,126,127
-----computeFrom-----
36,37
36,38
40,41
40,42
49,50
49,51
72,73
72,74
76,77
76,78
85,86
85,87
95,96
95,97
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_17_bad(){    int i;    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    for(i = 0; i < 1; i++)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_17_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_17_bad
{    int i;    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    for(i = 0; i < 1; i++)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
int i;
int i;
int
i
i
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
for(i = 0; i < 1; i++)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(19,43,0)
(46,2,0)
(53,49,0)
(49,29,0)
(0,2,0)
(7,34,0)
(20,29,0)
(8,45,0)
(24,18,0)
(35,27,0)
(45,39,0)
(5,39,0)
(22,7,0)
(2,50,0)
(8,34,0)
(22,40,0)
(25,50,0)
(12,57,0)
(7,22,0)
(40,22,0)
(33,17,0)
(56,8,0)
(1,8,0)
(8,16,0)
(58,32,0)
(16,42,0)
(11,40,0)
(30,20,0)
(15,18,0)
(38,43,0)
(24,49,0)
(6,24,0)
(27,50,0)
(30,27,0)
(26,57,0)
(3,16,0)
(45,8,0)
(27,30,0)
(48,34,0)
(37,45,0)
(13,18,0)
(31,27,0)
(4,57,0)
(17,50,0)
(55,34,0)
(21,30,0)
(34,57,0)
(52,28,0)
(51,57,0)
(54,50,0)
(44,57,0)
(23,20,0)
(39,45,0)
(41,48,0)
(18,50,0)
(32,28,0)
(40,16,0)
(9,48,0)
(10,40,0)
(36,28,0)
(43,28,0)
(14,16,0)
(18,24,0)
(24,6,1)
(32,28,1)
(21,27,1)
(45,39,1)
(35,31,1)
(22,40,1)
(31,49,1)
(50,54,1)
(43,19,1)
(53,24,1)
(19,38,1)
(40,11,1)
(32,58,1)
(18,15,1)
(20,23,1)
(25,43,1)
(13,2,1)
(0,46,1)
(28,36,1)
(33,20,1)
(10,8,1)
(36,52,1)
(2,50,1)
(38,28,1)
(17,50,1)
(27,50,1)
(7,22,1)
(37,1,1)
(6,18,1)
(56,2,1)
(38,32,1)
(1,56,1)
(46,17,1)
(15,13,1)
(17,33,1)
(49,53,1)
(3,43,1)
(11,10,1)
(46,50,1)
(43,28,1)
(8,45,1)
(30,27,1)
(2,0,1)
(8,16,1)
(39,5,1)
(58,16,1)
(27,35,1)
(54,25,1)
(24,18,1)
(40,16,1)
(14,3,1)
(16,14,1)
(30,21,1)
(18,50,1)
(5,37,1)
(47,7,1)
(23,30,1)
(13,2,2)
(58,43,2)
(45,39,2)
(40,16,2)
(27,2,2)
(8,16,2)
(33,2,2)
(43,28,2)
(46,2,2)
(16,43,2)
(21,2,2)
(32,43,2)
(38,43,2)
(17,50,2)
(19,43,2)
(3,43,2)
(0,2,2)
(18,50,2)
(30,2,2)
(7,22,2)
(22,40,2)
(17,2,2)
(53,2,2)
(23,2,2)
(24,18,2)
(14,43,2)
(20,2,2)
(35,2,2)
(2,50,2)
(18,2,2)
(27,50,2)
(49,2,2)
(15,2,2)
(2,2,2)
(32,28,2)
(24,2,2)
(43,43,2)
(31,2,2)
(8,45,2)
(30,27,2)
(6,2,2)
-----------------------------------
(0,100)
(1,source)
(2,i < 100)
(3,data)
(4,i)
(5,twoIntsStruct)
(6,intOne)
(7,printStructLine(&data[0])
(8,memmove(data, source, 100*sizeof(twoIntsStruct)
(9,i)
(10,data)
(11,0)
(12,dataBadBuffer)
(13,source)
(14,dataBadBuffer)
(15,i)
(16,data = dataBadBuffer)
(17,i++)
(18,source[i])
(19,1)
(20,source[i].intTwo = 0)
(21,intTwo)
(22,&data[0])
(23,0)
(24,source[i].intOne)
(25,i)
(26,data)
(27,source[i])
(28,i = 0)
(29,)
(30,source[i].intTwo)
(31,source)
(32,i++)
(33,i)
(34,)
(35,i)
(36,0)
(37,100)
(38,i)
(39,sizeof(twoIntsStruct)
(40,data[0])
(41,for (i = 0; i < 100; i++)
(42,)
(43,i < 1)
(44,dataGoodBuffer)
(45,100*sizeof(twoIntsStruct)
(46,i)
(47,RET)
(48,)
(49,source[i].intOne = 0)
(50,i = 0)
(51,for(i = 0; i < 1; i++)
(52,i)
(53,0)
(54,0)
(55,source)
(56,data)
(57,)
(58,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^