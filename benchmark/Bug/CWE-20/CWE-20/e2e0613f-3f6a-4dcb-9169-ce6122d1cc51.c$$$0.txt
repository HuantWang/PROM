-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int64_t_16_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
75,76
76,77
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
86,87
88,89
91,92
91,93
93,94
93,95
94,95
95,96
95,97
96,97
98,99
98,100
99,100
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,61,66,67,70,71,74,80,82,83,87,89,90,92,97,100,101,102
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
64,65
64,66
68,69
68,70
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int64_t_16_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
void
CWE416_Use_After_Free__malloc_free_int64_t_16_bad()
CWE416_Use_After_Free__malloc_free_int64_t_16_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
1
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5LL;            }
data[i] = 5LL;
data[i] = 5LL
data[i]
data
data
i
i
5LL
free(data);
free(data)
free
free
data
data
break;
while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
-----joern-----
(13,12,0)
(15,12,0)
(12,48,0)
(29,15,0)
(3,14,0)
(16,35,0)
(35,48,0)
(47,8,0)
(44,0,0)
(25,46,0)
(39,49,0)
(28,45,0)
(7,10,0)
(46,25,0)
(3,12,0)
(31,28,0)
(41,46,0)
(2,21,0)
(15,48,0)
(34,35,0)
(19,25,0)
(14,25,0)
(37,45,0)
(44,17,0)
(8,12,0)
(21,12,0)
(5,21,0)
(25,14,0)
(12,3,0)
(38,26,0)
(8,43,0)
(3,9,0)
(22,48,0)
(14,3,0)
(24,45,0)
(40,17,0)
(27,1,0)
(4,37,0)
(17,44,0)
(11,28,0)
(32,10,0)
(20,10,0)
(6,48,0)
(9,3,0)
(18,45,0)
(26,10,0)
(42,26,0)
(8,26,0)
(23,8,0)
(43,8,0)
(43,1,0)
(31,11,1)
(28,31,1)
(8,23,1)
(4,39,1)
(6,15,1)
(25,46,1)
(11,45,1)
(23,47,1)
(12,3,1)
(36,27,1)
(46,41,1)
(27,43,1)
(8,26,1)
(18,21,1)
(24,18,1)
(13,30,1)
(43,8,1)
(17,40,1)
(44,17,1)
(3,9,1)
(11,37,1)
(41,19,1)
(29,28,1)
(37,4,1)
(36,33,1)
(3,14,1)
(19,13,1)
(45,24,1)
(30,26,1)
(8,12,1)
(40,21,1)
(15,12,1)
(21,2,1)
(33,6,1)
(5,12,1)
(18,44,1)
(14,25,1)
(28,45,1)
(33,30,1)
(2,5,1)
(26,42,1)
(37,45,1)
(47,33,1)
(15,29,1)
(42,38,1)
(39,28,1)
(21,12,1)
(29,30,2)
(14,30,2)
(27,33,2)
(45,30,2)
(25,30,2)
(31,30,2)
(31,28,2)
(3,14,2)
(43,8,2)
(28,28,2)
(41,30,2)
(3,9,2)
(15,12,2)
(12,3,2)
(11,30,2)
(28,45,2)
(8,33,2)
(8,12,2)
(39,28,2)
(37,45,2)
(3,30,2)
(23,33,2)
(8,26,2)
(12,30,2)
(28,30,2)
(46,30,2)
(21,30,2)
(40,21,2)
(5,30,2)
(2,30,2)
(14,25,2)
(4,28,2)
(47,33,2)
(44,17,2)
(6,30,2)
(18,30,2)
(11,28,2)
(44,21,2)
(15,30,2)
(17,21,2)
(25,46,2)
(13,30,2)
(24,30,2)
(43,33,2)
(19,30,2)
(37,28,2)
(21,12,2)
-----------------------------------
(0,)
(1,)
(2,NULL)
(3,(int64_t *)
(4,i)
(5,data)
(6,break;)
(7,while(1)
(8,data[0])
(9,int64_t *)
(10,)
(11,i)
(12,data = (int64_t *)
(13,data)
(14,malloc(100*sizeof(int64_t)
(15,free(data)
(16,for(i = 0; i < 100; i++)
(17,-1)
(18,i)
(19,100)
(20,while(1)
(21,data == NULL)
(22,if (data == NULL)
(23,0)
(24,0)
(25,100*sizeof(int64_t)
(26,data = NULL)
(27,break;)
(28,i < 100)
(29,data)
(30,1)
(31,100)
(32,data)
(33,1)
(34,i)
(35,)
(36,RET)
(37,i++)
(38,data)
(39,L)
(40,1)
(41,int64_t)
(42,NULL)
(43,printLongLongLine(data[0])
(44,exit(-1)
(45,i = 0)
(46,sizeof(int64_t)
(47,data)
(48,)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^