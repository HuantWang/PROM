-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to
        * access an index of the array in the sink that is out-of-bounds */
        data = 7;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
    else
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* FIX: Properly validate the array index and prevent a buffer overflow */
            if (data >= 0 && data < (10))
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is out-of-bounds");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
197,198
197,199
198,199
200,201
202,203
203,204
204,205
204,206
205,206
208,209
208,210
208,211
209,210
210,211
212,213
213,214
213,215
213,216
213,217
213,218
213,219
214,215
215,216
215,217
217,218
219,220
220,221
220,222
222,223
222,224
222,225
225,226
226,227
226,228
227,228
227,229
229,230
231,232
231,233
232,233
234,235
234,236
236,237
237,238
237,239
240,241
240,242
241,242
241,243
242,243
244,245
246,247
247,248
248,249
248,250
249,250
251,252
253,254
253,255
253,256
253,257
254,255
255,256
255,257
256,257
259,260
259,261
260,261
263,264
264,265
266,267
267,268
268,269
268,270
269,270
269,271
270,271
272,273
275,276
275,277
275,278
276,277
276,278
277,278
280,281
280,282
281,282
282,283
282,284
283,284
283,285
284,285
286,287
289,290
289,291
289,292
289,293
290,291
291,292
291,293
292,293
295,296
295,297
296,297
299,300
300,301
302,303
303,304
304,305
304,306
305,306
307,308
307,309
308,309
310,311
312,313
313,314
314,315
314,316
315,316
318,319
319,320
319,321
320,321
322,323
324,325
325,326
325,327
325,328
325,329
325,330
325,331
326,327
327,328
327,329
329,330
331,332
332,333
332,334
334,335
334,336
334,337
337,338
338,339
338,340
339,340
339,341
341,342
343,344
343,345
344,345
346,347
346,348
348,349
349,350
349,351
352,353
352,354
353,354
353,355
354,355
356,357
358,359
359,360
360,361
360,362
361,362
363,364
365,366
365,367
365,368
365,369
366,367
367,368
367,369
368,369
371,372
371,373
372,373
375,376
376,377
378,379
379,380
380,381
380,382
381,382
381,383
382,383
384,385
387,388
387,389
387,390
388,389
388,390
389,390
389,391
390,391
393,394
393,395
394,395
396,397
398,399
398,400
399,400
400,401
400,402
401,402
401,403
402,403
404,405
407,408
407,409
407,410
407,411
408,409
409,410
409,411
410,411
413,414
413,415
414,415
417,418
418,419
420,421
421,422
422,423
422,424
423,424
425,426
425,427
426,427
428,429
430,431
431,432
432,433
432,434
433,434
436,437
437,438
437,439
438,439
440,441
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,188,192,194,199,201,206,207,211,216,218,221,223,224,228,230,233,235,238,239,243,245,250,252,257,258,261,262,265,271,273,274,278,279,285,287,288,293,294,297,298,301,306,309,311,316,317,321,323,328,330,333,335,336,340,342,345,347,350,351,355,357,362,364,369,370,373,374,377,383,385,386,391,392,395,397,403,405,406,411,412,415,416,419,424,427,429,434,435,439,441
-----computeFrom-----
12,13
12,14
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
190,191
190,192
204,205
204,206
234,235
234,236
241,242
241,243
255,256
255,257
259,260
259,261
268,269
268,270
276,277
276,278
282,283
282,284
291,292
291,293
295,296
295,297
346,347
346,348
353,354
353,355
367,368
367,369
371,372
371,373
380,381
380,382
388,389
388,390
389,390
389,391
393,394
393,395
400,401
400,402
409,410
409,411
413,414
413,415
-----guardedBy-----
192,201
278,287
395,405
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }    if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }    if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        /* FIX: Use a value greater than 0, but less than 10 to avoid attempting to        * access an index of the array in the sink that is out-of-bounds */        data = 7;    }
data = 7;
data = 7
data
data
7
if(globalReturnsTrueOrFalse())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }    else    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* FIX: Properly validate the array index and prevent a buffer overflow */            if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0 && data < (10))            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is out-of-bounds");            }
data >= 0 && data < (10)
data >= 0
data
data
0
data < (10)
data
data
(10)
10
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is out-of-bounds");            }
printLine("ERROR: Array index is out-of-bounds");
printLine("ERROR: Array index is out-of-bounds")
printLine
printLine
"ERROR: Array index is out-of-bounds"
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(106,110,0)
(72,239,0)
(140,72,0)
(144,138,0)
(95,215,0)
(144,233,0)
(211,161,0)
(189,232,0)
(37,191,0)
(64,262,0)
(195,233,0)
(83,62,0)
(59,142,0)
(176,53,0)
(52,191,0)
(66,224,0)
(263,25,0)
(226,145,0)
(177,148,0)
(181,12,0)
(1,232,0)
(73,116,0)
(114,78,0)
(88,240,0)
(206,191,0)
(249,64,0)
(153,105,0)
(195,192,0)
(25,110,0)
(157,56,0)
(63,162,0)
(55,206,0)
(191,142,0)
(78,48,0)
(250,110,0)
(208,192,0)
(137,154,0)
(167,253,0)
(120,64,0)
(159,59,0)
(145,244,0)
(110,10,0)
(5,27,0)
(204,163,0)
(2,198,0)
(74,120,0)
(232,189,0)
(58,161,0)
(75,19,0)
(161,142,0)
(173,142,0)
(171,174,0)
(258,208,0)
(174,171,0)
(207,52,0)
(241,263,0)
(228,174,0)
(210,142,0)
(70,80,0)
(6,158,0)
(186,40,0)
(17,231,0)
(12,71,0)
(84,96,0)
(238,234,0)
(149,107,0)
(187,112,0)
(42,48,0)
(251,240,0)
(132,19,0)
(135,239,0)
(51,253,0)
(185,202,0)
(192,208,0)
(216,195,0)
(95,251,0)
(155,38,0)
(80,70,0)
(96,116,0)
(45,179,0)
(97,260,0)
(163,94,0)
(144,48,0)
(66,129,0)
(96,111,0)
(260,253,0)
(46,245,0)
(63,89,0)
(175,142,0)
(9,166,0)
(209,253,0)
(242,70,0)
(19,132,0)
(68,47,0)
(170,108,0)
(76,154,0)
(3,144,0)
(22,179,0)
(248,159,0)
(98,43,0)
(197,130,0)
(175,53,0)
(41,244,0)
(23,179,0)
(43,232,0)
(264,33,0)
(7,89,0)
(267,95,0)
(148,36,0)
(87,71,0)
(244,41,0)
(179,168,0)
(104,129,0)
(192,195,0)
(11,245,0)
(43,98,0)
(215,265,0)
(138,230,0)
(79,249,0)
(66,33,0)
(110,25,0)
(224,66,0)
(100,134,0)
(19,75,0)
(38,154,0)
(162,63,0)
(63,138,0)
(131,44,0)
(169,105,0)
(12,215,0)
(268,75,0)
(115,63,0)
(60,171,0)
(44,131,0)
(160,47,0)
(113,215,0)
(26,40,0)
(221,180,0)
(38,148,0)
(14,137,0)
(54,96,0)
(63,233,0)
(147,132,0)
(130,0,0)
(249,262,0)
(158,154,0)
(12,64,0)
(266,253,0)
(231,142,0)
(252,98,0)
(217,75,0)
(152,138,0)
(235,262,0)
(200,255,0)
(53,175,0)
(8,211,0)
(253,199,0)
(111,96,0)
(95,244,0)
(32,59,0)
(234,220,0)
(229,12,0)
(151,89,0)
(34,246,0)
(29,179,0)
(233,195,0)
(39,2,0)
(50,102,0)
(146,144,0)
(134,116,0)
(211,10,0)
(205,234,0)
(163,204,0)
(234,205,0)
(212,4,0)
(165,228,0)
(111,259,0)
(131,191,0)
(125,38,0)
(69,81,0)
(71,56,0)
(85,86,0)
(172,262,0)
(119,171,0)
(108,89,0)
(38,64,0)
(141,224,0)
(96,64,0)
(263,10,0)
(164,95,0)
(86,233,0)
(121,244,0)
(64,98,0)
(96,148,0)
(255,142,0)
(19,112,0)
(191,245,0)
(30,255,0)
(254,253,0)
(174,228,0)
(118,64,0)
(162,236,0)
(244,142,0)
(194,145,0)
(99,137,0)
(98,252,0)
(180,233,0)
(222,48,0)
(15,120,0)
(180,179,0)
(202,59,0)
(213,220,0)
(49,253,0)
(4,129,0)
(228,215,0)
(103,253,0)
(21,188,0)
(203,204,0)
(245,191,0)
(262,136,0)
(28,215,0)
(232,43,0)
(183,63,0)
(228,244,0)
(123,131,0)
(59,159,0)
(139,133,0)
(195,216,0)
(228,251,0)
(225,213,0)
(237,262,0)
(90,206,0)
(27,251,0)
(16,253,0)
(145,233,0)
(13,52,0)
(256,154,0)
(178,228,0)
(261,44,0)
(220,213,0)
(40,231,0)
(12,251,0)
(112,19,0)
(31,245,0)
(243,262,0)
(233,179,0)
(166,65,0)
(18,131,0)
(171,244,0)
(145,72,0)
(182,263,0)
(150,189,0)
(129,4,0)
(171,251,0)
(220,142,0)
(227,89,0)
(101,142,0)
(184,131,0)
(52,260,0)
(20,142,0)
(12,244,0)
(117,86,0)
(57,44,0)
(61,260,0)
(98,64,0)
(251,27,0)
(129,66,0)
(35,66,0)
(10,142,0)
(67,211,0)
(130,260,0)
(247,179,0)
(102,175,0)
(124,102,0)
(196,10,0)
(10,131,0)
(33,66,0)
(126,78,0)
(193,233,0)
(130,191,0)
(66,191,0)
(131,10,0)
(190,116,0)
(188,208,0)
(257,240,0)
(80,109,0)
(214,42,0)
(24,205,0)
(105,253,0)
(201,251,0)
(77,253,0)
(59,202,0)
(219,262,0)
(156,205,0)
(171,215,0)
(91,227,0)
(25,263,0)
(208,188,0)
(218,41,0)
(82,227,0)
(47,116,0)
(129,104,0)
(128,48,0)
(92,240,0)
(145,215,0)
(145,251,0)
(144,48,1)
(67,25,1)
(25,263,1)
(145,233,1)
(234,238,1)
(160,68,1)
(33,264,1)
(42,48,1)
(55,90,1)
(206,55,1)
(52,191,1)
(127,249,1)
(174,171,1)
(214,138,1)
(263,241,1)
(207,13,1)
(190,71,1)
(99,154,1)
(149,33,1)
(85,233,1)
(115,183,1)
(204,203,1)
(72,140,1)
(19,75,1)
(131,191,1)
(114,126,1)
(96,116,1)
(69,25,1)
(215,113,1)
(50,220,1)
(108,89,1)
(194,95,1)
(13,83,1)
(234,205,1)
(27,5,1)
(105,153,1)
(258,193,1)
(63,138,1)
(31,46,1)
(61,97,1)
(151,72,1)
(185,32,1)
(124,50,1)
(91,82,1)
(222,86,1)
(256,120,1)
(208,188,1)
(232,189,1)
(42,214,1)
(13,69,1)
(213,225,1)
(52,260,1)
(75,217,1)
(188,21,1)
(113,28,1)
(171,244,1)
(143,244,1)
(255,30,1)
(158,154,1)
(130,197,1)
(193,122,1)
(96,84,1)
(120,74,1)
(4,212,1)
(74,15,1)
(86,117,1)
(131,123,1)
(13,139,1)
(145,215,1)
(162,63,1)
(226,194,1)
(82,89,1)
(217,268,1)
(47,160,1)
(64,98,1)
(155,137,1)
(131,44,1)
(70,242,1)
(220,213,1)
(228,215,1)
(95,164,1)
(144,233,1)
(122,34,1)
(228,251,1)
(24,231,1)
(263,10,1)
(159,248,1)
(225,234,1)
(202,185,1)
(116,73,1)
(166,9,1)
(8,67,1)
(171,251,1)
(32,159,1)
(13,149,1)
(86,233,1)
(52,207,1)
(82,108,1)
(2,39,1)
(156,24,1)
(138,152,1)
(7,151,1)
(58,211,1)
(19,132,1)
(79,2,1)
(191,245,1)
(177,38,1)
(18,196,1)
(54,47,1)
(33,66,1)
(10,131,1)
(139,112,1)
(111,96,1)
(221,227,1)
(189,150,1)
(268,260,1)
(134,116,1)
(242,120,1)
(79,47,1)
(28,223,1)
(71,87,1)
(87,12,1)
(212,35,1)
(73,190,1)
(137,14,1)
(100,111,1)
(154,76,1)
(34,93,1)
(83,206,1)
(44,261,1)
(66,224,1)
(98,252,1)
(13,143,1)
(203,86,1)
(197,52,1)
(41,218,1)
(153,169,1)
(59,159,1)
(60,119,1)
(121,161,1)
(227,91,1)
(15,64,1)
(211,8,1)
(129,4,1)
(38,64,1)
(183,227,1)
(126,48,1)
(102,124,1)
(99,158,1)
(39,174,1)
(148,177,1)
(145,226,1)
(223,251,1)
(6,148,1)
(261,57,1)
(249,64,1)
(66,191,1)
(25,110,1)
(206,191,1)
(192,208,1)
(96,64,1)
(95,251,1)
(127,180,1)
(112,187,1)
(126,42,1)
(141,129,1)
(89,7,1)
(170,162,1)
(222,163,1)
(122,93,1)
(122,215,1)
(38,154,1)
(228,244,1)
(165,178,1)
(264,66,1)
(132,147,1)
(181,229,1)
(145,251,1)
(175,53,1)
(178,171,1)
(5,201,1)
(130,191,1)
(63,89,1)
(14,99,1)
(163,204,1)
(248,206,1)
(46,11,1)
(26,59,1)
(106,250,1)
(117,85,1)
(176,102,1)
(233,195,1)
(90,191,1)
(35,175,1)
(97,105,1)
(63,115,1)
(267,78,1)
(180,233,1)
(169,223,1)
(68,116,1)
(11,37,1)
(63,233,1)
(196,33,1)
(9,95,1)
(260,61,1)
(152,144,1)
(221,166,1)
(250,10,1)
(95,244,1)
(12,251,1)
(76,256,1)
(118,122,1)
(57,184,1)
(195,216,1)
(43,232,1)
(53,176,1)
(145,244,1)
(12,64,1)
(128,222,1)
(48,128,1)
(227,89,1)
(66,129,1)
(182,110,1)
(211,10,1)
(12,244,1)
(96,148,1)
(256,80,1)
(93,130,1)
(195,192,1)
(1,118,1)
(180,221,1)
(38,125,1)
(59,202,1)
(144,146,1)
(229,174,1)
(186,26,1)
(158,6,1)
(187,19,1)
(84,54,1)
(137,154,1)
(249,79,1)
(12,215,1)
(80,70,1)
(146,3,1)
(21,258,1)
(174,228,1)
(40,186,1)
(268,143,1)
(205,156,1)
(78,48,1)
(134,100,1)
(245,31,1)
(251,27,1)
(147,75,1)
(241,182,1)
(244,41,1)
(161,58,1)
(37,255,1)
(228,165,1)
(140,145,1)
(110,106,1)
(3,78,1)
(218,121,1)
(30,200,1)
(130,260,1)
(47,116,1)
(125,155,1)
(112,19,1)
(119,137,1)
(129,104,1)
(171,215,1)
(108,170,1)
(17,40,1)
(95,215,1)
(224,141,1)
(123,44,1)
(200,112,1)
(68,134,1)
(238,205,1)
(164,267,1)
(150,1,1)
(171,60,1)
(98,43,1)
(110,10,1)
(184,18,1)
(93,52,1)
(231,17,1)
(120,64,1)
(12,181,1)
(78,114,1)
(227,89,2)
(120,64,2)
(74,122,2)
(155,137,2)
(146,78,2)
(100,47,2)
(169,223,2)
(221,122,2)
(48,122,2)
(192,122,2)
(114,78,2)
(87,174,2)
(137,137,2)
(117,122,2)
(123,33,2)
(116,174,2)
(47,47,2)
(195,122,2)
(96,64,2)
(206,191,2)
(33,206,2)
(208,122,2)
(19,132,2)
(110,33,2)
(203,86,2)
(154,122,2)
(91,95,2)
(164,122,2)
(249,122,2)
(43,232,2)
(82,227,2)
(178,171,2)
(187,223,2)
(31,112,2)
(196,33,2)
(177,137,2)
(144,233,2)
(80,120,2)
(145,95,2)
(228,251,2)
(193,122,2)
(44,33,2)
(268,143,2)
(129,4,2)
(10,131,2)
(160,47,2)
(202,206,2)
(79,122,2)
(264,206,2)
(126,122,2)
(95,122,2)
(208,188,2)
(212,206,2)
(171,244,2)
(110,10,2)
(12,174,2)
(17,206,2)
(102,206,2)
(249,64,2)
(195,192,2)
(176,206,2)
(188,122,2)
(106,33,2)
(174,228,2)
(69,25,2)
(217,223,2)
(185,206,2)
(174,122,2)
(182,110,2)
(40,206,2)
(258,122,2)
(96,148,2)
(119,122,2)
(10,33,2)
(147,143,2)
(207,223,2)
(82,95,2)
(194,95,2)
(33,66,2)
(225,206,2)
(152,78,2)
(211,25,2)
(175,206,2)
(35,206,2)
(25,33,2)
(71,174,2)
(187,143,2)
(261,33,2)
(163,86,2)
(98,252,2)
(158,154,2)
(18,33,2)
(42,78,2)
(41,25,2)
(59,159,2)
(47,116,2)
(19,223,2)
(52,260,2)
(95,215,2)
(238,206,2)
(113,223,2)
(256,122,2)
(126,78,2)
(26,206,2)
(12,64,2)
(215,223,2)
(129,104,2)
(144,78,2)
(91,227,2)
(186,206,2)
(1,122,2)
(98,43,2)
(2,174,2)
(21,122,2)
(99,137,2)
(34,93,2)
(231,206,2)
(76,122,2)
(268,223,2)
(195,216,2)
(150,122,2)
(83,206,2)
(19,143,2)
(171,122,2)
(86,122,2)
(130,260,2)
(156,206,2)
(25,110,2)
(30,112,2)
(86,233,2)
(145,244,2)
(52,191,2)
(38,137,2)
(241,110,2)
(4,206,2)
(70,120,2)
(161,25,2)
(66,224,2)
(244,25,2)
(141,206,2)
(224,206,2)
(263,110,2)
(192,208,2)
(234,206,2)
(12,215,2)
(73,174,2)
(267,122,2)
(217,143,2)
(11,112,2)
(211,10,2)
(131,44,2)
(134,47,2)
(66,191,2)
(63,138,2)
(50,206,2)
(114,122,2)
(38,64,2)
(137,154,2)
(63,233,2)
(55,112,2)
(132,223,2)
(250,33,2)
(38,154,2)
(85,122,2)
(93,223,2)
(145,233,2)
(128,122,2)
(75,143,2)
(112,223,2)
(12,244,2)
(59,202,2)
(90,112,2)
(222,122,2)
(153,223,2)
(228,244,2)
(145,215,2)
(227,95,2)
(134,116,2)
(32,206,2)
(227,227,2)
(205,206,2)
(137,122,2)
(46,112,2)
(131,191,2)
(228,215,2)
(183,227,2)
(37,112,2)
(14,137,2)
(64,122,2)
(140,95,2)
(7,95,2)
(89,95,2)
(190,174,2)
(245,112,2)
(115,227,2)
(244,41,2)
(111,47,2)
(67,25,2)
(158,137,2)
(197,52,2)
(171,215,2)
(191,245,2)
(260,223,2)
(80,70,2)
(139,112,2)
(170,227,2)
(112,143,2)
(66,206,2)
(108,89,2)
(68,47,2)
(125,137,2)
(220,206,2)
(248,206,2)
(68,174,2)
(108,227,2)
(149,33,2)
(19,75,2)
(112,19,2)
(233,122,2)
(95,251,2)
(96,47,2)
(14,122,2)
(145,251,2)
(233,195,2)
(43,122,2)
(200,112,2)
(98,122,2)
(232,189,2)
(220,213,2)
(132,143,2)
(60,122,2)
(15,122,2)
(121,25,2)
(228,171,2)
(214,78,2)
(99,122,2)
(78,122,2)
(78,78,2)
(3,78,2)
(129,206,2)
(24,206,2)
(162,63,2)
(147,223,2)
(162,227,2)
(57,33,2)
(234,205,2)
(206,112,2)
(165,171,2)
(184,33,2)
(189,122,2)
(75,223,2)
(13,223,2)
(8,25,2)
(226,95,2)
(138,78,2)
(151,95,2)
(111,96,2)
(144,48,2)
(118,122,2)
(130,191,2)
(229,174,2)
(61,223,2)
(163,204,2)
(47,174,2)
(59,206,2)
(174,171,2)
(42,48,2)
(12,251,2)
(97,223,2)
(72,95,2)
(180,233,2)
(84,47,2)
(52,223,2)
(148,137,2)
(218,25,2)
(204,86,2)
(124,206,2)
(251,27,2)
(143,25,2)
(25,263,2)
(166,95,2)
(181,174,2)
(39,174,2)
(191,112,2)
(78,48,2)
(63,89,2)
(160,174,2)
(63,227,2)
(213,206,2)
(263,10,2)
(95,244,2)
(130,52,2)
(242,120,2)
(96,116,2)
(105,223,2)
(232,122,2)
(175,53,2)
(171,251,2)
(6,137,2)
(66,129,2)
(159,206,2)
(28,223,2)
(9,95,2)
(58,25,2)
(120,122,2)
(255,112,2)
(131,33,2)
(54,47,2)
(64,98,2)
(53,206,2)
(180,122,2)
-----------------------------------
(0,)
(1,10)
(2,printLine("ERROR: Array index is out-of-bounds")
(3,buffer)
(4,&service)
(5,1)
(6,i)
(7,0)
(8,recvResult)
(9,"ERROR: Array index is negative.")
(10,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(11,AF_INET)
(12,buffer[data])
(13,connectSocket)
(14,10)
(15,buffer)
(16,recvResult)
(17,AF_INET)
(18,connectSocket)
(19,WSAStartup(MAKEWORD(2,2)
(20,if (connect(connectSocket, (struct sockaddr*)
(21,int)
(22,buffer)
(23,if (buffer == NULL)
(24,service)
(25,recvResult == SOCKET_ERROR || recvResult == 0)
(26,service)
(27,-1)
(28,data)
(29,for (i = 0; i < 10; i++)
(30,1)
(31,IPPROTO_TCP)
(32,0)
(33,connect(connectSocket, (struct sockaddr*)
(34,WSACleanup()
(35,connectSocket)
(36,)
(37,connectSocket)
(38,buffer[i])
(39,"ERROR: Array index is out-of-bounds")
(40,service.sin_family)
(41,atoi(inputBuffer)
(42,i++)
(43,malloc(10 * sizeof(int)
(44,CHAR_ARRAY_SIZE - 1)
(45,i)
(46,SOCK_STREAM)
(47,i < 10)
(48,i = 0)
(49,do)
(50,service)
(51,if (connectSocket != INVALID_SOCKET)
(52,connectSocket != INVALID_SOCKET)
(53,htons(TCP_PORT)
(54,buffer)
(55,INVALID_SOCKET)
(56,)
(57,CHAR_ARRAY_SIZE)
(58,\\\'\\\\0\\\')
(59,memset(&service, 0, sizeof(service)
(60,0)
(61,INVALID_SOCKET)
(62,)
(63,buffer[i])
(64,* buffer = (int *)
(65,)
(66,connect(connectSocket, (struct sockaddr*)
(67,inputBuffer)
(68,i)
(69,break;)
(70,-1)
(71,buffer[data] = 1)
(72,buffer[data] = 1)
(73,0)
(74,NULL)
(75,MAKEWORD(2,2)
(76,0)
(77,inputBuffer)
(78,i < 10)
(79,buffer)
(80,exit(-1)
(81,)
(82,i)
(83,break;)
(84,i)
(85,buffer)
(86,buffer == NULL)
(87,1)
(88,if(globalReturnsTrueOrFalse()
(89,i = 0)
(90,connectSocket)
(91,10)
(92,data)
(93,wsaDataInit)
(94,)
(95,data >= 0)
(96,buffer[i])
(97,connectSocket)
(98,(int *)
(99,i)
(100,i)
(101,if (recvResult == SOCKET_ERROR || recvResult == 0)
(102,service.sin_port)
(103,wsaDataInit)
(104,struct sockaddr*)
(105,wsaDataInit = 0)
(106,SOCKET_ERROR)
(107,)
(108,i++)
(109,)
(110,recvResult == SOCKET_ERROR)
(111,printIntLine(buffer[i])
(112,WSAStartup(MAKEWORD(2,2)
(113,7)
(114,10)
(115,i)
(116,i = 0)
(117,NULL)
(118,buffer)
(119,data)
(120,buffer == NULL)
(121,data)
(122,globalReturnsTrueOrFalse()
(123,0)
(124,sin_port)
(125,i)
(126,i)
(127,RET)
(128,0)
(129,(struct sockaddr*)
(130,CLOSE_SOCKET(connectSocket)
(131,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(132,&wsaData)
(133,)
(134,i++)
(135,for(i = 0; i < 10; i++)
(136,)
(137,i < 10)
(138,buffer[i] = 0)
(139,break;)
(140,1)
(141,service)
(142,)
(143,0)
(144,buffer[i])
(145,buffer[data])
(146,i)
(147,wsaData)
(148,buffer[i] = 0)
(149,break;)
(150,int)
(151,i)
(152,0)
(153,0)
(154,i = 0)
(155,buffer)
(156,sin_addr)
(157,for(i = 0; i < 10; i++)
(158,i++)
(159,&service)
(160,10)
(161,inputBuffer[recvResult] = \\\'\\\\0\\\')
(162,printIntLine(buffer[i])
(163,exit(-1)
(164,0)
(165,10)
(166,printLine("ERROR: Array index is negative.")
(167,if (wsaDataInit)
(168,)
(169,wsaDataInit)
(170,i)
(171,data >= 0)
(172,for (i = 0; i < 10; i++)
(173,if (WSAStartup(MAKEWORD(2,2)
(174,data >= 0 && data < (10)
(175,service.sin_port = htons(TCP_PORT)
(176,TCP_PORT)
(177,0)
(178,data)
(179,)
(180,free(buffer)
(181,data)
(182,recvResult)
(183,buffer)
(184,inputBuffer)
(185,service)
(186,sin_family)
(187,NO_ERROR)
(188,sizeof(int)
(189,sizeof(int)
(190,i)
(191,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(192,malloc(10 * sizeof(int)
(193,buffer)
(194,buffer)
(195,(int *)
(196,recvResult)
(197,connectSocket)
(198,)
(199,)
(200,wsaDataInit)
(201,data)
(202,sizeof(service)
(203,1)
(204,-1)
(205,service.sin_addr)
(206,connectSocket == INVALID_SOCKET)
(207,INVALID_SOCKET)
(208,10 * sizeof(int)
(209,connectSocket)
(210,if (connectSocket == INVALID_SOCKET)
(211,inputBuffer[recvResult])
(212,service)
(213,inet_addr(IP_ADDRESS)
(214,i)
(215,data = 7)
(216,int *)
(217,2)
(218,inputBuffer)
(219,i)
(220,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(221,buffer)
(222,i)
(223,globalReturnsTrueOrFalse()
(224,sizeof(service)
(225,IP_ADDRESS)
(226,data)
(227,i < 10)
(228,data < (10)
(229,buffer)
(230,)
(231,service.sin_family = AF_INET)
(232,10 * sizeof(int)
(233,* buffer = (int *)
(234,service.sin_addr.s_addr)
(235,buffer)
(236,)
(237,if (data >= 0 && data < (10)
(238,s_addr)
(239,)
(240,)
(241,0)
(242,1)
(243,if (buffer == NULL)
(244,data = atoi(inputBuffer)
(245,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(246,)
(247,if (data >= 0)
(248,service)
(249,free(buffer)
(250,recvResult)
(251,data = -1)
(252,int *)
(253,)
(254,wsaData)
(255,wsaDataInit = 1)
(256,i)
(257,if(globalReturnsTrueOrFalse()
(258,10)
(259,)
(260,connectSocket = INVALID_SOCKET)
(261,1)
(262,)
(263,recvResult == 0)
(264,SOCKET_ERROR)
(265,)
(266,service)
(267,data)
(268,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^