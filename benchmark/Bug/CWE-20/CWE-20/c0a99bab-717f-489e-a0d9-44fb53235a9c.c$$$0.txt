-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
26,28
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
45,46
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
55,56
56,57
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
-----nextToken-----
2,4,9,10,16,18,23,24,27,29,31,35,38,40,43,44,48,51,52,54,58,64,65,73,74,77,78,79,80,84,87,89,92,93,97,100,102,105,106
-----computeFrom-----
7,8
7,9
20,21
20,22
60,61
60,62
66,67
66,68
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(43,46,0)
(37,1,0)
(46,43,0)
(24,2,0)
(9,49,0)
(55,48,0)
(48,41,0)
(55,11,0)
(26,2,0)
(20,37,0)
(47,33,0)
(32,9,0)
(43,32,0)
(46,14,0)
(5,13,0)
(19,1,0)
(40,50,0)
(10,36,0)
(45,48,0)
(9,32,0)
(14,48,0)
(10,37,0)
(30,22,0)
(38,49,0)
(33,48,0)
(27,1,0)
(31,48,0)
(46,13,0)
(22,55,0)
(2,47,0)
(53,16,0)
(36,10,0)
(15,55,0)
(11,55,0)
(28,11,0)
(45,50,0)
(23,19,0)
(42,29,0)
(50,45,0)
(21,47,0)
(50,40,0)
(37,10,0)
(32,43,0)
(18,27,0)
(47,2,0)
(3,52,0)
(27,50,0)
(17,37,0)
(55,22,0)
(51,43,0)
(8,10,0)
(34,13,0)
(52,3,0)
(0,19,0)
(1,52,0)
(8,48,0)
(16,32,0)
(1,48,0)
(50,27,0)
(39,52,0)
(56,22,0)
(33,47,0)
(32,16,0)
(10,8,0)
(47,21,0)
(49,9,0)
(7,12,0)
(54,49,0)
(13,46,0)
(52,1,0)
(4,29,0)
(35,27,0)
(6,14,0)
(8,10,1)
(47,21,1)
(37,17,1)
(13,34,1)
(10,37,1)
(23,0,1)
(16,53,1)
(26,14,1)
(53,9,1)
(32,9,1)
(24,26,1)
(49,38,1)
(2,24,1)
(55,11,1)
(47,2,1)
(54,13,1)
(28,15,1)
(52,39,1)
(5,55,1)
(0,29,1)
(34,5,1)
(39,19,1)
(18,33,1)
(19,23,1)
(30,56,1)
(35,18,1)
(42,4,1)
(6,46,1)
(38,54,1)
(46,13,1)
(52,3,1)
(44,45,1)
(33,47,1)
(9,49,1)
(32,16,1)
(44,29,1)
(15,22,1)
(1,52,1)
(43,32,1)
(50,40,1)
(29,42,1)
(56,8,1)
(14,6,1)
(11,28,1)
(27,35,1)
(50,27,1)
(51,32,1)
(27,1,1)
(37,1,1)
(20,1,1)
(22,30,1)
(55,22,1)
(17,20,1)
(45,50,1)
(10,36,1)
(46,43,1)
(43,51,1)
(37,1,2)
(55,11,2)
(50,27,2)
(46,43,2)
(24,29,2)
(56,29,2)
(33,29,2)
(55,22,2)
(47,29,2)
(5,29,2)
(32,29,2)
(10,29,2)
(27,1,2)
(14,29,2)
(43,32,2)
(27,29,2)
(46,29,2)
(30,29,2)
(33,47,2)
(1,29,2)
(47,2,2)
(32,16,2)
(1,52,2)
(19,29,2)
(52,29,2)
(6,29,2)
(9,49,2)
(38,29,2)
(20,29,2)
(54,29,2)
(16,29,2)
(52,3,2)
(10,37,2)
(8,29,2)
(22,29,2)
(45,29,2)
(26,29,2)
(50,29,2)
(2,29,2)
(11,29,2)
(13,29,2)
(43,29,2)
(17,29,2)
(28,29,2)
(46,13,2)
(15,29,2)
(55,29,2)
(0,29,2)
(18,29,2)
(53,29,2)
(8,10,2)
(39,29,2)
(34,29,2)
(47,21,2)
(37,29,2)
(45,50,2)
(35,29,2)
(49,29,2)
(9,29,2)
(32,9,2)
(23,29,2)
(10,36,2)
(51,29,2)
(50,40,2)
-----------------------------------
(0,structCharVoid)
(1,structCharVoid.voidSecond = (void *)
(2,structCharVoid.charFirst)
(3,void *)
(4,GLOBAL_CONST_FIVE)
(5,structCharVoid)
(6,\'\\\\0\')
(7,if(GLOBAL_CONST_FIVE==5)
(8,printLine((char *)
(9,sizeof(structCharVoid.charFirst)
(10,(char *)
(11,sizeof(structCharVoid)
(12,)
(13,structCharVoid.charFirst)
(14,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(15,SRC_STR)
(16,sizeof(char)
(17,voidSecond)
(18,structCharVoid)
(19,structCharVoid.voidSecond)
(20,structCharVoid)
(21,char *)
(22,structCharVoid.charFirst)
(23,voidSecond)
(24,charFirst)
(25,'\\\\0')
(26,structCharVoid)
(27,structCharVoid.voidSecond)
(28,structCharVoid)
(29,GLOBAL_CONST_FIVE==5)
(30,charFirst)
(31,structCharVoid)
(32,sizeof(structCharVoid.charFirst)
(33,printLine((char *)
(34,charFirst)
(35,voidSecond)
(36,char *)
(37,structCharVoid.voidSecond)
(38,charFirst)
(39,SRC_STR)
(40,char *)
(41,)
(42,5)
(43,(sizeof(structCharVoid.charFirst)
(44,RET)
(45,printLine((char *)
(46,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(47,(char *)
(48,)
(49,structCharVoid.charFirst)
(50,(char *)
(51,1)
(52,(void *)
(53,char)
(54,structCharVoid)
(55,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(56,structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^