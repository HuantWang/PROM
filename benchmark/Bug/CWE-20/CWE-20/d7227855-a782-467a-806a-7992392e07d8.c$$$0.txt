-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
32,35
33,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,36,39,41,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_03_bad()
CWE190_Integer_Overflow__char_max_postinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,6,0)
(14,2,0)
(16,0,0)
(18,0,0)
(9,22,0)
(12,5,0)
(2,24,0)
(6,23,0)
(15,14,0)
(11,14,0)
(28,13,0)
(10,17,0)
(21,20,0)
(14,6,0)
(14,0,0)
(8,2,0)
(5,0,0)
(19,13,0)
(27,2,0)
(5,2,0)
(3,13,0)
(26,17,0)
(22,6,0)
(1,20,0)
(22,14,0)
(5,6,0)
(0,13,0)
(10,2,1)
(16,18,1)
(12,17,1)
(21,0,1)
(8,20,1)
(22,14,1)
(1,21,1)
(5,2,1)
(5,0,1)
(10,20,1)
(22,9,1)
(26,10,1)
(14,0,1)
(9,14,1)
(20,1,1)
(15,11,1)
(2,27,1)
(14,2,1)
(27,8,1)
(14,15,1)
(4,22,1)
(4,17,1)
(5,12,1)
(11,5,1)
(0,16,1)
(17,26,1)
(14,2,2)
(5,2,2)
(12,17,2)
(9,17,2)
(5,0,2)
(5,17,2)
(22,17,2)
(14,0,2)
(14,17,2)
(8,20,2)
(27,20,2)
(11,17,2)
(15,17,2)
(22,14,2)
(2,20,2)
-----------------------------------
(0,data = ' ')
(1,5)
(2,data = CHAR_MAX)
(3,data)
(4,RET)
(5,data++)
(6,)
(7,result)
(8,data)
(9,result)
(10,5)
(11,result)
(12,data)
(13,)
(14,result = data)
(15,data)
(16,' ')
(17,5==5)
(18,data)
(19,if(5==5)
(20,5==5)
(21,5)
(22,printHexCharLine(result)
(23,)
(24,)
(25,data = \' \')
(26,5)
(27,CHAR_MAX)
(28,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^