-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
85,86
86,87
88,89
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
97,99
97,100
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
105,106
105,107
106,107
108,109
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
117,118
117,119
118,119
121,122
122,123
124,125
125,126
126,127
126,128
127,128
129,130
129,131
130,131
132,133
134,135
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,43,45,46,50,52,55,57,60,61,65,67,72,74,79,80,83,84,87,93,95,96,100,101,107,109,110,115,116,119,120,123,128,131,133,138,139,143,145
-----computeFrom-----
56,57
56,58
63,64
63,65
77,78
77,79
81,82
81,83
90,91
90,92
98,99
98,100
104,105
104,106
113,114
113,115
117,118
117,119
-----guardedBy-----
100,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(void * dataVoidPtr)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(25,65,0)
(19,13,0)
(72,65,0)
(16,62,0)
(41,9,0)
(43,55,0)
(34,72,0)
(66,72,0)
(11,8,0)
(15,61,0)
(74,42,0)
(45,44,0)
(74,50,0)
(0,69,0)
(22,67,0)
(47,67,0)
(37,23,0)
(0,2,0)
(4,35,0)
(62,61,0)
(62,19,0)
(24,26,0)
(11,19,0)
(70,26,0)
(14,62,0)
(38,8,0)
(48,67,0)
(73,15,0)
(58,0,0)
(40,55,0)
(61,37,0)
(21,8,0)
(71,9,0)
(0,31,0)
(54,67,0)
(3,77,0)
(75,28,0)
(47,61,0)
(28,75,0)
(35,65,0)
(49,71,0)
(53,8,0)
(6,36,0)
(30,8,0)
(31,0,0)
(33,9,0)
(57,11,0)
(18,67,0)
(42,74,0)
(44,77,0)
(9,71,0)
(11,6,0)
(60,74,0)
(27,11,0)
(2,0,0)
(71,2,0)
(37,61,0)
(7,61,0)
(20,2,0)
(17,42,0)
(1,28,0)
(32,33,0)
(50,37,0)
(12,47,0)
(15,44,0)
(68,30,0)
(26,61,0)
(37,50,0)
(67,55,0)
(76,15,0)
(62,65,0)
(64,19,0)
(6,11,0)
(15,9,0)
(10,63,0)
(23,37,0)
(29,10,0)
(39,67,0)
(50,74,0)
(11,61,0)
(56,53,0)
(46,33,0)
(59,65,0)
(61,67,0)
(2,55,0)
(52,30,0)
(9,55,0)
(75,51,0)
(76,73,1)
(44,45,1)
(11,57,1)
(0,69,1)
(15,9,1)
(4,19,1)
(71,49,1)
(33,32,1)
(47,12,1)
(26,70,1)
(75,28,1)
(29,33,1)
(12,10,1)
(73,33,1)
(70,24,1)
(68,53,1)
(11,8,1)
(19,64,1)
(25,26,1)
(66,34,1)
(59,25,1)
(30,52,1)
(37,50,1)
(35,65,1)
(8,38,1)
(68,8,1)
(2,0,1)
(46,72,1)
(62,61,1)
(50,74,1)
(34,65,1)
(42,17,1)
(32,46,1)
(28,1,1)
(5,47,1)
(6,11,1)
(33,9,1)
(56,6,1)
(53,56,1)
(58,20,1)
(64,62,1)
(1,26,1)
(62,16,1)
(26,61,1)
(57,27,1)
(38,21,1)
(65,59,1)
(61,37,1)
(35,4,1)
(37,23,1)
(27,30,1)
(0,31,1)
(21,44,1)
(9,71,1)
(74,42,1)
(7,9,1)
(30,8,1)
(24,61,1)
(49,41,1)
(10,29,1)
(25,75,1)
(62,65,1)
(72,66,1)
(16,14,1)
(15,76,1)
(14,72,1)
(11,19,1)
(47,61,1)
(52,68,1)
(41,2,1)
(53,8,1)
(60,7,1)
(15,61,1)
(17,60,1)
(11,61,1)
(45,15,1)
(72,65,1)
(12,30,1)
(71,2,1)
(0,58,1)
(34,35,1)
(47,61,2)
(76,33,2)
(26,61,2)
(52,30,2)
(57,30,2)
(9,71,2)
(0,31,2)
(6,30,2)
(44,33,2)
(14,72,2)
(53,8,2)
(68,30,2)
(10,33,2)
(73,33,2)
(37,23,2)
(34,72,2)
(37,50,2)
(29,33,2)
(45,33,2)
(30,8,2)
(61,37,2)
(52,33,2)
(11,8,2)
(30,30,2)
(0,69,2)
(56,30,2)
(66,72,2)
(71,2,2)
(28,26,2)
(35,65,2)
(15,61,2)
(30,33,2)
(11,30,2)
(1,26,2)
(62,65,2)
(33,9,2)
(11,61,2)
(64,72,2)
(35,72,2)
(75,26,2)
(27,30,2)
(2,0,2)
(50,74,2)
(68,33,2)
(6,11,2)
(53,30,2)
(75,28,2)
(74,42,2)
(15,33,2)
(11,19,2)
(15,9,2)
(8,33,2)
(62,72,2)
(19,72,2)
(38,33,2)
(21,33,2)
(16,72,2)
(62,61,2)
(72,65,2)
(4,72,2)
(72,72,2)
-----------------------------------
(0,(int *)
(1,1)
(2,* dataPtr = (int *)
(3,for(i = 0; i < 10; i++)
(4,i)
(5,RET)
(6,printIntLine(buffer[i])
(7,buffer)
(8,i = 0)
(9,data = (*dataPtr)
(10,printLine("ERROR: Array index is negative.")
(11,buffer[i])
(12,buffer)
(13,)
(14,buffer)
(15,buffer[data])
(16,i)
(17,int)
(18,if (data >= 0)
(19,buffer[i] = 0)
(20,dataPtr)
(21,i)
(22,for (i = 0; i < 10; i++)
(23,int *)
(24,buffer)
(25,i)
(26,buffer == NULL)
(27,buffer)
(28,-1)
(29,"ERROR: Array index is negative.")
(30,i < 10)
(31,int *)
(32,0)
(33,data >= 0)
(34,i)
(35,i++)
(36,)
(37,(int *)
(38,0)
(39,i)
(40,data)
(41,data)
(42,sizeof(int)
(43,dataPtr)
(44,buffer[data] = 1)
(45,1)
(46,data)
(47,free(buffer)
(48,buffer)
(49,dataPtr)
(50,malloc(10 * sizeof(int)
(51,)
(52,10)
(53,i++)
(54,if (buffer == NULL)
(55,)
(56,i)
(57,i)
(58,dataVoidPtr)
(59,0)
(60,10)
(61,* buffer = (int *)
(62,buffer[i])
(63,)
(64,0)
(65,i = 0)
(66,10)
(67,)
(68,i)
(69,void * dataVoidPtr)
(70,NULL)
(71,*dataPtr)
(72,i < 10)
(73,buffer)
(74,10 * sizeof(int)
(75,exit(-1)
(76,data)
(77,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^