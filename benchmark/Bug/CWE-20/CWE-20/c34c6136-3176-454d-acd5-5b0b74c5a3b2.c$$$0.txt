-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,23,26,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(33,19,0)
(44,21,0)
(44,4,0)
(23,14,0)
(20,4,0)
(10,17,0)
(48,36,0)
(1,2,0)
(9,32,0)
(11,30,0)
(35,45,0)
(41,36,0)
(29,10,0)
(13,14,0)
(34,17,0)
(47,36,0)
(28,20,0)
(10,48,0)
(12,30,0)
(31,4,0)
(2,7,0)
(14,23,0)
(25,17,0)
(37,9,0)
(19,30,0)
(16,10,0)
(29,44,0)
(19,4,0)
(4,44,0)
(40,6,0)
(43,40,0)
(7,2,0)
(49,36,0)
(10,16,0)
(45,30,0)
(5,48,0)
(27,45,0)
(21,44,0)
(23,17,0)
(24,11,0)
(17,15,0)
(42,16,0)
(10,29,0)
(46,23,0)
(7,3,0)
(23,48,0)
(0,20,0)
(4,30,0)
(17,25,0)
(45,4,0)
(18,48,0)
(39,10,0)
(44,29,0)
(11,4,0)
(8,9,0)
(43,23,1)
(0,4,1)
(39,31,1)
(11,4,1)
(34,38,1)
(19,33,1)
(10,48,1)
(14,13,1)
(48,5,1)
(38,48,1)
(42,39,1)
(46,22,1)
(33,11,1)
(20,4,1)
(4,44,1)
(17,25,1)
(5,18,1)
(20,28,1)
(35,27,1)
(23,17,1)
(22,38,1)
(45,35,1)
(10,17,1)
(7,2,1)
(23,14,1)
(25,34,1)
(27,7,1)
(29,10,1)
(26,22,1)
(23,48,1)
(19,4,1)
(10,16,1)
(27,20,1)
(31,23,1)
(28,0,1)
(2,1,1)
(45,4,1)
(16,42,1)
(26,40,1)
(13,46,1)
(44,29,1)
(26,19,1)
(1,20,1)
(24,45,1)
(40,43,1)
(22,17,1)
(11,24,1)
(44,21,1)
(23,14,2)
(0,23,2)
(44,23,2)
(19,4,2)
(29,23,2)
(4,23,2)
(34,38,2)
(23,17,2)
(20,23,2)
(44,21,2)
(25,38,2)
(7,20,2)
(1,20,2)
(11,23,2)
(2,20,2)
(29,10,2)
(27,23,2)
(17,25,2)
(17,38,2)
(31,23,2)
(23,48,2)
(13,22,2)
(46,22,2)
(10,48,2)
(23,22,2)
(39,23,2)
(43,23,2)
(45,4,2)
(40,23,2)
(24,23,2)
(19,23,2)
(16,23,2)
(42,23,2)
(35,23,2)
(20,4,2)
(28,23,2)
(10,16,2)
(11,4,2)
(10,17,2)
(4,44,2)
(14,22,2)
(33,23,2)
(10,23,2)
(45,23,2)
(44,29,2)
(7,2,2)
-----------------------------------
(0,myString)
(1,1)
(2,-1)
(3,)
(4,myString = (char *)
(5,0)
(6,)
(7,exit(-1)
(8,if (data > strlen(HELLO_STRING)
(9,)
(10,data*sizeof(char)
(11,printLine(myString)
(12,if (myString == NULL)
(13,HELLO_STRING)
(14,strlen(HELLO_STRING)
(15,)
(16,sizeof(char)
(17,data = rand()
(18,data)
(19,free(myString)
(20,myString == NULL)
(21,char *)
(22,1)
(23,data > strlen(HELLO_STRING)
(24,myString)
(25,rand()
(26,RET)
(27,myString)
(28,NULL)
(29,malloc(data*sizeof(char)
(30,)
(31,myString)
(32,)
(33,myString)
(34,data)
(35,HELLO_STRING)
(36,)
(37,myString)
(38,1)
(39,data)
(40,printLine("Input is less than the length of the source string")
(41,if(1)
(42,char)
(43,"Input is less than the length of the source string")
(44,(char *)
(45,strcpy(myString, HELLO_STRING)
(46,data)
(47,if(1)
(48,data = 0)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^