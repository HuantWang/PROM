-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_bad()
{
    int * data;
    data = NULL;
    data = badSource(data);
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,30,32,34,37,41,43,48,49,52,53,56,62,64,67,69,73,76,77,81,83
-----computeFrom-----
13,14
13,15
19,20
19,21
46,47
46,48
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_bad(){    int * data;    data = NULL;    data = badSource(data);    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_bad
{    int * data;    data = NULL;    data = badSource(data);    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,12,0)
(8,10,0)
(32,10,0)
(17,18,0)
(16,10,0)
(23,32,0)
(18,24,0)
(1,5,0)
(22,10,0)
(31,5,0)
(37,3,0)
(21,16,0)
(29,22,0)
(13,7,0)
(32,27,0)
(5,12,0)
(3,24,0)
(14,22,0)
(9,22,0)
(24,0,0)
(2,18,0)
(28,27,0)
(6,12,0)
(35,32,0)
(14,32,0)
(3,12,0)
(24,3,0)
(18,32,0)
(4,22,0)
(23,11,0)
(25,23,0)
(30,12,0)
(11,22,0)
(15,23,0)
(7,22,0)
(27,16,0)
(26,33,0)
(27,32,0)
(36,3,0)
(33,12,0)
(3,7,0)
(11,23,0)
(34,16,0)
(19,14,0)
(15,25,1)
(31,12,1)
(26,24,1)
(16,34,1)
(18,17,1)
(5,1,1)
(20,14,1)
(36,37,1)
(6,30,1)
(17,2,1)
(2,5,1)
(1,31,1)
(14,32,1)
(24,3,1)
(37,18,1)
(28,35,1)
(33,26,1)
(3,7,1)
(3,12,1)
(25,5,1)
(13,32,1)
(32,27,1)
(23,15,1)
(19,11,1)
(14,19,1)
(33,12,1)
(5,12,1)
(3,36,1)
(18,12,1)
(27,28,1)
(34,21,1)
(35,16,1)
(27,16,1)
(7,13,1)
(18,32,1)
(31,33,1)
(12,6,1)
(11,23,1)
(30,7,1)
(23,32,1)
(3,5,2)
(23,32,2)
(5,12,2)
(18,12,2)
(27,16,2)
(31,5,2)
(3,7,2)
(33,12,2)
(18,5,2)
(18,32,2)
(32,27,2)
(24,3,2)
(11,23,2)
(2,5,2)
(1,5,2)
(14,32,2)
(33,5,2)
(36,5,2)
(37,5,2)
(26,5,2)
(17,5,2)
(24,5,2)
(5,5,2)
(3,12,2)
-----------------------------------
(0,)
(1,10)
(2,data)
(3,source[i])
(4,for (i = 0; i < 10; i++)
(5,i < 10)
(6,0)
(7,source[10] = {0})
(8,data)
(9,source)
(10,)
(11,printIntLine(data[0])
(12,i = 0)
(13,source)
(14,free(data)
(15,0)
(16,data = NULL)
(17,i)
(18,data[i])
(19,data)
(20,RET)
(21,data)
(22,)
(23,data[0])
(24,data[i] = source[i])
(25,data)
(26,i)
(27,badSource(data)
(28,data)
(29,i)
(30,i)
(31,i)
(32,data = badSource(data)
(33,i++)
(34,NULL)
(35,data)
(36,i)
(37,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^