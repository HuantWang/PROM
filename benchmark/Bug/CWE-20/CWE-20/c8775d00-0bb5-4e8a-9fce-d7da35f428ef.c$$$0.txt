-----label-----
1
-----code-----
static void badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(27,60,0)
(38,17,0)
(41,40,0)
(3,10,0)
(16,7,0)
(18,38,0)
(34,17,0)
(0,23,0)
(32,22,0)
(63,26,0)
(9,58,0)
(60,6,0)
(51,53,0)
(64,56,0)
(56,7,0)
(49,60,0)
(23,2,0)
(40,42,0)
(52,10,0)
(56,64,0)
(18,2,0)
(30,61,0)
(60,32,0)
(17,38,0)
(31,61,0)
(64,20,0)
(43,33,0)
(11,12,0)
(19,22,0)
(2,18,0)
(10,2,0)
(56,2,0)
(47,12,0)
(8,37,0)
(59,40,0)
(60,2,0)
(15,40,0)
(13,40,0)
(55,25,0)
(48,65,0)
(39,32,0)
(44,18,0)
(25,2,0)
(50,12,0)
(2,40,0)
(38,18,0)
(26,12,0)
(23,7,0)
(29,53,0)
(66,9,0)
(62,33,0)
(21,48,0)
(24,2,0)
(1,47,0)
(18,44,0)
(54,34,0)
(9,66,0)
(28,40,0)
(33,6,0)
(37,53,0)
(57,56,0)
(36,17,0)
(5,56,0)
(17,34,0)
(25,40,0)
(4,23,0)
(46,66,0)
(23,53,0)
(7,14,0)
(61,53,0)
(35,26,0)
(56,12,0)
(33,62,1)
(31,53,1)
(8,7,1)
(4,61,1)
(60,2,1)
(17,34,1)
(64,56,1)
(38,17,1)
(57,5,1)
(39,60,1)
(51,29,1)
(18,44,1)
(30,31,1)
(43,61,1)
(2,18,1)
(37,53,1)
(60,27,1)
(31,37,1)
(61,30,1)
(9,66,1)
(62,43,1)
(50,32,1)
(23,0,1)
(26,12,1)
(48,21,1)
(34,54,1)
(56,7,1)
(61,53,1)
(49,33,1)
(53,51,1)
(0,4,1)
(23,53,1)
(47,1,1)
(1,64,1)
(5,26,1)
(55,48,1)
(11,50,1)
(26,63,1)
(54,36,1)
(32,39,1)
(27,49,1)
(36,24,1)
(37,8,1)
(16,23,1)
(66,46,1)
(29,9,1)
(23,2,1)
(12,11,1)
(47,12,1)
(56,57,1)
(56,2,1)
(10,52,1)
(18,38,1)
(52,3,1)
(29,10,1)
(60,6,1)
(46,10,1)
(7,16,1)
(45,25,1)
(25,2,1)
(21,33,1)
(63,35,1)
(10,2,1)
(3,2,1)
(35,47,1)
(35,12,1)
(33,6,1)
(25,55,1)
(56,12,1)
(55,26,1)
(31,61,2)
(60,2,2)
(21,33,2)
(26,26,2)
(10,2,2)
(35,26,2)
(64,26,2)
(61,61,2)
(26,33,2)
(2,18,2)
(23,53,2)
(4,61,2)
(23,61,2)
(56,26,2)
(37,61,2)
(27,33,2)
(60,6,2)
(56,7,2)
(16,61,2)
(56,12,2)
(48,33,2)
(1,26,2)
(17,34,2)
(39,33,2)
(11,33,2)
(0,61,2)
(61,53,2)
(32,33,2)
(35,33,2)
(63,33,2)
(33,6,2)
(9,66,2)
(18,44,2)
(30,61,2)
(64,56,2)
(37,53,2)
(26,12,2)
(66,10,2)
(38,17,2)
(12,33,2)
(7,61,2)
(46,10,2)
(5,26,2)
(50,33,2)
(47,12,2)
(23,2,2)
(57,26,2)
(18,38,2)
(47,26,2)
(56,2,2)
(49,33,2)
(8,61,2)
(9,10,2)
(60,33,2)
(63,26,2)
(25,2,2)
-----------------------------------
(0,i)
(1,i)
(2,* buffer = (int *)
(3,buffer)
(4,buffer)
(5,buffer)
(6,int data)
(7,buffer[i] = 0)
(8,i)
(9,exit(-1)
(10,buffer == NULL)
(11,0)
(12,i = 0)
(13,buffer)
(14,)
(15,for (i = 0; i < 10; i++)
(16,0)
(17,10 * sizeof(int)
(18,(int *)
(19,for(i = 0; i < 10; i++)
(20,)
(21,"ERROR: Array index is negative.")
(22,)
(23,buffer[i])
(24,buffer)
(25,free(buffer)
(26,i < 10)
(27,data)
(28,if (buffer == NULL)
(29,i)
(30,10)
(31,i)
(32,buffer[data] = 1)
(33,data >= 0)
(34,sizeof(int)
(35,i)
(36,10)
(37,i++)
(38,malloc(10 * sizeof(int)
(39,1)
(40,)
(41,i)
(42,)
(43,data)
(44,int *)
(45,RET)
(46,1)
(47,i++)
(48,printLine("ERROR: Array index is negative.")
(49,buffer)
(50,i)
(51,0)
(52,NULL)
(53,i = 0)
(54,int)
(55,buffer)
(56,buffer[i])
(57,i)
(58,)
(59,if (data >= 0)
(60,buffer[data])
(61,i < 10)
(62,0)
(63,10)
(64,printIntLine(buffer[i])
(65,)
(66,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^