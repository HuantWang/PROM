-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_04_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
62,63
62,64
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,59,61,64,69,71
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_04_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_04_bad()
CWE415_Double_Free__malloc_free_int64_t_04_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(16,22,0)
(26,6,0)
(22,31,0)
(31,24,0)
(10,9,0)
(14,13,0)
(24,17,0)
(10,12,0)
(7,17,0)
(31,22,0)
(28,16,0)
(17,6,0)
(3,15,0)
(30,10,0)
(18,12,0)
(2,13,0)
(24,4,0)
(11,7,0)
(4,24,0)
(5,7,0)
(25,12,0)
(15,3,0)
(29,0,0)
(32,17,0)
(8,22,0)
(21,3,0)
(15,27,0)
(24,31,0)
(22,16,0)
(10,17,0)
(12,13,0)
(17,24,0)
(0,17,0)
(19,13,0)
(0,6,0)
(28,8,1)
(21,7,1)
(1,20,1)
(11,5,1)
(10,30,1)
(30,20,1)
(29,7,1)
(8,32,1)
(7,11,1)
(24,4,1)
(20,23,1)
(18,25,1)
(24,31,1)
(16,28,1)
(15,3,1)
(7,17,1)
(10,17,1)
(23,12,1)
(31,22,1)
(0,17,1)
(5,17,1)
(22,16,1)
(1,10,1)
(32,23,1)
(20,0,1)
(0,29,1)
(12,18,1)
(10,12,1)
(3,21,1)
(29,15,1)
(17,24,1)
(15,7,2)
(24,23,2)
(17,24,2)
(22,16,2)
(29,23,2)
(17,23,2)
(10,20,2)
(31,22,2)
(24,31,2)
(0,17,2)
(30,20,2)
(10,12,2)
(24,4,2)
(21,7,2)
(31,23,2)
(15,3,2)
(8,23,2)
(28,23,2)
(7,23,2)
(11,23,2)
(3,7,2)
(5,23,2)
(0,23,2)
(32,23,2)
(22,23,2)
(10,17,2)
(16,23,2)
(7,17,2)
-----------------------------------
(0,free(data)
(1,RET)
(2,data)
(3,-1)
(4,int64_t *)
(5,data)
(6,)
(7,data == NULL)
(8,100)
(9,)
(10,free(data)
(11,NULL)
(12,data = NULL)
(13,)
(14,if(STATIC_CONST_TRUE)
(15,exit(-1)
(16,sizeof(int64_t)
(17,data = (int64_t *)
(18,NULL)
(19,if(STATIC_CONST_TRUE)
(20,STATIC_CONST_TRUE)
(21,1)
(22,100*sizeof(int64_t)
(23,STATIC_CONST_TRUE)
(24,(int64_t *)
(25,data)
(26,if (data == NULL)
(27,)
(28,int64_t)
(29,data)
(30,data)
(31,malloc(100*sizeof(int64_t)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^