-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        wcsncpy(data, source, 100-1);
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
61,68
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,97,98,103,105,106,107,111,113,117,119
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
96,97
96,98
100,101
100,102
104,105
104,106
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncpy(data, source, 100-1);
wcsncpy(data, source, 100-1)
wcsncpy
wcsncpy
data
data
source
source
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(19,5,0)
(40,19,0)
(25,32,0)
(16,2,0)
(8,41,0)
(18,4,0)
(31,9,0)
(35,30,0)
(34,32,0)
(7,5,0)
(35,1,0)
(6,3,0)
(24,18,0)
(15,32,0)
(20,2,0)
(30,3,0)
(27,21,0)
(17,4,0)
(0,2,0)
(37,18,0)
(23,35,0)
(5,18,0)
(27,9,0)
(32,4,0)
(1,35,0)
(10,34,0)
(3,30,0)
(33,18,0)
(34,0,0)
(41,18,0)
(5,0,0)
(28,5,0)
(39,1,0)
(34,18,0)
(5,19,0)
(30,35,0)
(41,0,0)
(0,3,0)
(3,6,0)
(26,4,0)
(36,0,0)
(3,0,0)
(11,0,0)
(5,32,0)
(14,19,0)
(9,27,0)
(12,11,0)
(41,32,0)
(13,11,0)
(10,41,1)
(29,34,1)
(16,27,1)
(13,12,1)
(34,10,1)
(8,37,1)
(14,40,1)
(23,36,1)
(5,0,1)
(3,30,1)
(28,24,1)
(39,23,1)
(0,3,1)
(31,11,1)
(24,38,1)
(41,32,1)
(35,1,1)
(11,13,1)
(27,9,1)
(34,32,1)
(1,39,1)
(5,32,1)
(12,0,1)
(3,6,1)
(41,8,1)
(32,15,1)
(11,0,1)
(9,31,1)
(38,32,1)
(37,5,1)
(5,19,1)
(19,14,1)
(7,28,1)
(16,11,1)
(40,7,1)
(24,16,1)
(15,25,1)
(36,38,1)
(34,0,1)
(41,0,1)
(30,35,1)
(5,19,2)
(39,38,2)
(3,6,2)
(12,38,2)
(9,11,2)
(3,30,2)
(35,38,2)
(27,11,2)
(35,1,2)
(11,38,2)
(41,0,2)
(27,9,2)
(30,38,2)
(3,38,2)
(0,38,2)
(13,38,2)
(11,0,2)
(34,0,2)
(31,11,2)
(0,3,2)
(16,38,2)
(5,32,2)
(30,35,2)
(41,32,2)
(23,38,2)
(36,38,2)
(5,0,2)
(34,32,2)
(1,38,2)
-----------------------------------
(0,data = (wchar_t *)
(1,sizeof(wchar_t)
(2,)
(3,(wchar_t *)
(4,)
(5,wcsncpy(data, source, 100-1)
(6,wchar_t *)
(7,source)
(8,data)
(9,-1)
(10,data)
(11,data == NULL)
(12,data)
(13,NULL)
(14,1)
(15,NULL)
(16,\'\\\\0\')
(17,data)
(18,)
(19,100-1)
(20,if (data == NULL)
(21,)
(22,'\\\\0')
(23,50)
(24,'\\\\0')
(25,data)
(26,if(globalReturnsTrue()
(27,exit(-1)
(28,data)
(29,RET)
(30,malloc(50*sizeof(wchar_t)
(31,1)
(32,data = NULL)
(33,source)
(34,free(data)
(35,50*sizeof(wchar_t)
(36,data)
(37,'\\\\0')
(38,globalReturnsTrue()
(39,wchar_t)
(40,100)
(41,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^