-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_02_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    if(1)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
31,32
32,33
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
47,49
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
67,68
67,69
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
74,75
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
84,85
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
98,99
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,35,37,42,44,46,51,53,58,59,62,63,66,73,75,76,77,83,85,86,87,91,93,95,97,101,102,106,110,111
-----computeFrom-----
33,34
33,35
56,57
56,58
60,61
60,62
69,70
69,71
79,80
79,81
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_02_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_02_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_02_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
1
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(5,21,0)
(23,24,0)
(24,6,0)
(34,18,0)
(31,20,0)
(7,24,0)
(42,8,0)
(4,47,0)
(42,25,0)
(33,46,0)
(32,35,0)
(29,21,0)
(46,12,0)
(19,23,0)
(18,49,0)
(20,33,0)
(33,20,0)
(28,19,0)
(17,47,0)
(49,35,0)
(20,21,0)
(39,47,0)
(25,12,0)
(8,21,0)
(11,8,0)
(2,20,0)
(1,37,0)
(8,42,0)
(30,25,0)
(48,16,0)
(38,23,0)
(13,46,0)
(28,4,0)
(18,4,0)
(3,42,0)
(15,23,0)
(49,18,0)
(9,4,0)
(45,21,0)
(22,47,0)
(41,24,0)
(36,8,0)
(10,37,0)
(37,21,0)
(16,4,0)
(18,24,0)
(27,45,0)
(43,47,0)
(35,49,0)
(0,49,0)
(40,33,0)
(50,16,0)
(44,18,0)
(23,19,0)
(19,28,0)
(23,24,1)
(8,21,1)
(33,40,1)
(29,24,1)
(37,10,1)
(36,46,1)
(20,21,1)
(29,26,1)
(11,36,1)
(24,41,1)
(42,8,1)
(18,24,1)
(41,7,1)
(20,31,1)
(5,29,1)
(42,3,1)
(1,21,1)
(21,5,1)
(37,21,1)
(46,13,1)
(31,2,1)
(0,44,1)
(49,35,1)
(8,11,1)
(2,37,1)
(45,27,1)
(38,15,1)
(19,23,1)
(1,45,1)
(27,25,1)
(35,32,1)
(40,20,1)
(3,8,1)
(25,30,1)
(15,18,1)
(18,49,1)
(23,38,1)
(10,1,1)
(7,26,1)
(32,0,1)
(28,19,1)
(34,37,1)
(44,34,1)
(33,20,1)
(30,42,1)
(14,28,1)
(45,21,1)
(13,33,1)
(28,19,2)
(37,21,2)
(18,49,2)
(33,37,2)
(30,37,2)
(49,35,2)
(20,21,2)
(36,37,2)
(23,24,2)
(31,37,2)
(45,21,2)
(45,37,2)
(3,37,2)
(40,37,2)
(41,26,2)
(37,37,2)
(11,37,2)
(27,37,2)
(20,37,2)
(19,23,2)
(46,37,2)
(18,24,2)
(13,37,2)
(42,8,2)
(2,37,2)
(8,21,2)
(10,37,2)
(25,37,2)
(24,26,2)
(1,37,2)
(8,37,2)
(42,37,2)
(7,26,2)
(33,20,2)
-----------------------------------
(0,100)
(1,i)
(2,source)
(3,intTwo)
(4,)
(5,0)
(6,)
(7,data)
(8,source[i])
(9,source)
(10,100)
(11,i)
(12,)
(13,0)
(14,RET)
(15,data)
(16,)
(17,if(1)
(18,memmove(data, source, 100*sizeof(twoIntsStruct)
(19,&data[0])
(20,source[i])
(21,i = 0)
(22,data)
(23,data[0])
(24,data = dataBadBuffer)
(25,source[i].intTwo = 0)
(26,1)
(27,i)
(28,printStructLine(&data[0])
(29,i)
(30,0)
(31,i)
(32,twoIntsStruct)
(33,source[i].intOne)
(34,data)
(35,sizeof(twoIntsStruct)
(36,source)
(37,i < 100)
(38,0)
(39,dataGoodBuffer)
(40,intOne)
(41,dataBadBuffer)
(42,source[i].intTwo)
(43,dataBadBuffer)
(44,source)
(45,i++)
(46,source[i].intOne = 0)
(47,)
(48,for (i = 0; i < 100; i++)
(49,100*sizeof(twoIntsStruct)
(50,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^