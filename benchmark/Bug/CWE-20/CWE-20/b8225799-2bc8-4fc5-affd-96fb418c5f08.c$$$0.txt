-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_memmove_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: using memmove with the length of the dest where data
         * could be smaller than dest causing buffer overread */
        memmove(dest, data, strlen(dest)*sizeof(char));
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
73,76
73,77
73,78
73,79
73,80
74,75
75,76
75,77
77,78
77,79
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
101,102
101,103
101,104
101,105
102,103
104,105
106,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
115,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,76,78,80,84,86,87,89,90,95,97,98,99,103,105,107,111,113,116,117,122,124,125,126,130,132,136,138
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
88,89
88,90
92,93
92,94
96,97
96,98
108,109
108,110
119,120
119,121
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_memmove_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memmove with the length of the dest where data         * could be smaller than dest causing buffer overread */        memmove(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_memmove_03_bad()
CWE126_Buffer_Overread__malloc_char_memmove_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memmove with the length of the dest where data         * could be smaller than dest causing buffer overread */        memmove(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: using memmove with the length of the dest where data         * could be smaller than dest causing buffer overread */        memmove(dest, data, strlen(dest)*sizeof(char));        dest[100-1] = '\0';        printLine(dest);        free(data);    }
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
memmove(dest, data, strlen(dest)*sizeof(char));
memmove(dest, data, strlen(dest)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(dest)*sizeof(char)
strlen(dest)
strlen
strlen
dest
dest
sizeof(char)
char
char

dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(0,1,0)
(49,13,0)
(30,18,0)
(65,38,0)
(36,1,0)
(3,63,0)
(35,18,0)
(69,8,0)
(11,69,0)
(22,36,0)
(14,77,0)
(38,10,0)
(27,8,0)
(46,0,0)
(37,11,0)
(23,56,0)
(73,6,0)
(11,0,0)
(41,68,0)
(20,45,0)
(46,69,0)
(61,69,0)
(43,47,0)
(47,69,0)
(12,1,0)
(10,38,0)
(53,10,0)
(38,46,0)
(66,27,0)
(43,77,0)
(47,57,0)
(32,46,0)
(11,36,0)
(50,0,0)
(45,69,0)
(27,6,0)
(61,16,0)
(63,39,0)
(78,6,0)
(48,60,0)
(27,69,0)
(24,77,0)
(15,52,0)
(5,45,0)
(57,47,0)
(76,68,0)
(77,43,0)
(28,52,0)
(16,8,0)
(25,27,0)
(62,65,0)
(7,63,0)
(34,1,0)
(46,36,0)
(46,38,0)
(77,14,0)
(44,56,0)
(47,43,0)
(67,46,0)
(17,16,0)
(19,13,0)
(30,2,0)
(72,31,0)
(63,0,0)
(6,27,0)
(4,39,0)
(79,36,0)
(54,69,0)
(51,39,0)
(13,60,0)
(9,14,0)
(60,13,0)
(75,44,0)
(61,52,0)
(38,65,0)
(69,47,0)
(64,0,0)
(56,44,0)
(18,30,0)
(70,0,0)
(55,70,0)
(52,61,0)
(74,64,0)
(60,31,0)
(33,8,0)
(31,0,0)
(42,44,0)
(59,61,0)
(39,63,0)
(56,64,0)
(19,48,1)
(76,41,1)
(18,35,1)
(11,37,1)
(3,7,1)
(64,74,1)
(14,9,1)
(62,10,1)
(4,51,1)
(63,39,1)
(75,42,1)
(27,69,1)
(47,43,1)
(59,27,1)
(13,49,1)
(61,52,1)
(45,20,1)
(61,69,1)
(52,15,1)
(47,57,1)
(7,68,1)
(36,22,1)
(7,16,1)
(15,28,1)
(23,46,1)
(16,17,1)
(42,23,1)
(66,45,1)
(46,69,1)
(32,31,1)
(66,30,1)
(38,10,1)
(51,3,1)
(53,67,1)
(60,13,1)
(9,24,1)
(44,75,1)
(54,68,1)
(6,78,1)
(39,4,1)
(31,72,1)
(45,69,1)
(11,36,1)
(10,53,1)
(17,61,1)
(69,47,1)
(26,11,1)
(5,69,1)
(72,60,1)
(11,69,1)
(43,77,1)
(73,25,1)
(30,18,1)
(55,64,1)
(24,54,1)
(68,76,1)
(67,32,1)
(20,5,1)
(41,36,1)
(22,79,1)
(25,66,1)
(49,19,1)
(28,59,1)
(77,14,1)
(27,6,1)
(56,44,1)
(78,73,1)
(48,63,1)
(37,70,1)
(70,55,1)
(46,38,1)
(65,62,1)
(74,56,1)
(46,36,1)
(38,65,1)
(35,45,1)
(43,77,2)
(28,68,2)
(52,68,2)
(11,36,2)
(25,68,2)
(60,13,2)
(27,69,2)
(47,57,2)
(38,10,2)
(27,68,2)
(69,68,2)
(43,68,2)
(18,45,2)
(11,69,2)
(47,68,2)
(77,68,2)
(78,68,2)
(15,68,2)
(14,68,2)
(66,68,2)
(61,68,2)
(16,68,2)
(6,68,2)
(63,39,2)
(47,43,2)
(38,65,2)
(20,68,2)
(17,68,2)
(73,68,2)
(77,14,2)
(54,68,2)
(30,18,2)
(46,36,2)
(61,52,2)
(24,68,2)
(45,69,2)
(30,45,2)
(35,45,2)
(61,69,2)
(69,47,2)
(5,68,2)
(46,69,2)
(59,68,2)
(9,68,2)
(45,68,2)
(27,6,2)
(56,44,2)
(46,38,2)
-----------------------------------
(0,)
(1,)
(2,)
(3,'C')
(4,1)
(5,data)
(6,50-1)
(7,dest)
(8,)
(9,char)
(10,strlen(dest)
(11,free(data)
(12,if(5==5)
(13,100-1)
(14,sizeof(char)
(15,1)
(16,data[50-1] = \'\\\\0\')
(17,\'\\\\0\')
(18,-1)
(19,100)
(20,NULL)
(21,'\\\\0')
(22,NULL)
(23,dest)
(24,50)
(25,'A')
(26,RET)
(27,memset(data, \'A\', 50-1)
(28,50)
(29,\'A\')
(30,exit(-1)
(31,dest[100-1] = '\\\\0')
(32,dest)
(33,if (data == NULL)
(34,data)
(35,1)
(36,data = NULL)
(37,data)
(38,strlen(dest)
(39,100-1)
(40,data[50-1] = '\\\\0')
(41,5)
(42,100)
(43,malloc(50*sizeof(char)
(44,100-1)
(45,data == NULL)
(46,memmove(dest, data, strlen(dest)
(47,(char *)
(48,dest)
(49,1)
(50,dest)
(51,100)
(52,50-1)
(53,dest)
(54,data)
(55,dest)
(56,dest[100-1])
(57,char *)
(58,memset(data, 'A', 50-1)
(59,data)
(60,dest[100-1])
(61,data[50-1])
(62,char)
(63,memset(dest, \'C\', 100-1)
(64,dest[100-1] = '\\\\0')
(65,sizeof(char)
(66,data)
(67,data)
(68,5==5)
(69,data = (char *)
(70,printLine(dest)
(71,memset(dest, 'C', 100-1)
(72,'\\\\0')
(73,50)
(74,'\\\\0')
(75,1)
(76,5)
(77,50*sizeof(char)
(78,1)
(79,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^