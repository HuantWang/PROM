-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad()
{
    int i;
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, wcslen(data)*sizeof(wchar_t));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
77,79
81,82
81,83
81,84
81,85
81,86
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
106,107
106,108
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,28,30,33,34,38,40,45,47,52,53,56,57,60,65,67,68,70,71,76,78,79,80,84,86,88,90,94,96,98,102,104,107,108,113,115,116,117,121,123,127,129
-----computeFrom-----
18,19
18,20
29,30
29,31
36,37
36,38
50,51
50,52
54,55
54,56
69,70
69,71
73,74
73,75
77,78
77,79
99,100
99,101
110,111
110,112
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad(){    int i;    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad
{    int i;    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memmove(dest, data, wcslen(data)*sizeof(wchar_t));
memmove(dest, data, wcslen(data)*sizeof(wchar_t))
memmove
memmove
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(21,7,0)
(18,11,0)
(20,27,0)
(44,12,0)
(35,16,0)
(31,12,0)
(19,33,0)
(22,10,0)
(34,37,0)
(32,7,0)
(7,2,0)
(36,27,0)
(28,2,0)
(9,33,0)
(23,18,0)
(40,43,0)
(30,20,0)
(1,43,0)
(37,22,0)
(38,2,0)
(16,12,0)
(13,14,0)
(14,47,0)
(18,23,0)
(5,19,0)
(33,19,0)
(6,29,0)
(46,43,0)
(2,43,0)
(0,25,0)
(41,44,0)
(39,16,0)
(38,12,0)
(14,7,0)
(4,27,0)
(18,12,0)
(7,12,0)
(3,2,0)
(26,43,0)
(12,43,0)
(17,13,0)
(44,2,0)
(42,47,0)
(15,29,0)
(33,23,0)
(47,14,0)
(14,13,0)
(7,14,0)
(23,33,0)
(11,18,0)
(45,38,0)
(13,12,0)
(29,27,0)
(12,18,0)
(22,37,0)
(4,22,1)
(7,14,1)
(20,27,1)
(14,47,1)
(28,7,1)
(21,32,1)
(22,37,1)
(3,29,1)
(34,16,1)
(29,6,1)
(16,12,1)
(7,12,1)
(13,17,1)
(35,39,1)
(15,27,1)
(32,3,1)
(24,44,1)
(44,12,1)
(23,33,1)
(15,20,1)
(29,27,1)
(19,5,1)
(13,12,1)
(5,9,1)
(18,23,1)
(20,30,1)
(38,45,1)
(17,21,1)
(36,4,1)
(18,11,1)
(6,15,1)
(4,16,1)
(42,13,1)
(30,0,1)
(0,29,1)
(27,36,1)
(37,34,1)
(47,42,1)
(14,13,1)
(38,12,1)
(9,31,1)
(12,18,1)
(45,28,1)
(41,38,1)
(44,41,1)
(33,19,1)
(39,12,1)
(16,35,1)
(30,29,2)
(6,29,2)
(18,23,2)
(29,29,2)
(14,47,2)
(12,18,2)
(34,16,2)
(15,29,2)
(13,12,2)
(7,14,2)
(18,11,2)
(7,12,2)
(0,29,2)
(22,37,2)
(16,12,2)
(22,16,2)
(38,12,2)
(20,27,2)
(37,16,2)
(33,19,2)
(44,12,2)
(20,29,2)
(14,13,2)
(23,33,2)
(29,27,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,data)
(2,)
(3,"")
(4,i)
(5,wchar_t)
(6,1)
(7,memmove(dest, data, wcslen(data)
(8,\\'\\\\0\\')
(9,100)
(10,)
(11,wchar_t *)
(12,data = (wchar_t *)
(13,wcslen(data)
(14,wcslen(data)
(15,i)
(16,data == NULL)
(17,data)
(18,(wchar_t *)
(19,sizeof(wchar_t)
(20,i++)
(21,data)
(22,exit(-1)
(23,malloc(100*sizeof(wchar_t)
(24,RET)
(25,)
(26,if (data == NULL)
(27,i = 0)
(28,\\\'\\\\0\\\')
(29,i < 1)
(30,i)
(31,data)
(32,dest)
(33,100*sizeof(wchar_t)
(34,1)
(35,NULL)
(36,0)
(37,-1)
(38,printWLine(data)
(39,data)
(40,i)
(41,data)
(42,wchar_t)
(43,)
(44,free(data)
(45,data)
(46,for(i = 0; i < 1; i++)
(47,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^