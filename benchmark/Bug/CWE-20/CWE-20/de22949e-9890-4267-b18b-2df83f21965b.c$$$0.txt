-----label-----
1
-----code-----
static void badSink(int data)
{
    if(badStatic)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
15,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
67,68
68,69
69,70
69,71
70,71
70,72
71,72
73,74
76,77
76,78
76,79
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,6,8,12,17,19,22,24,25,29,31,34,36,39,40,44,46,51,53,58,59,62,63,66,72,74,75,79,80,86,88,89,94,95,98,99,102,107,110,112,117,118,122,124
-----computeFrom-----
35,36
35,37
42,43
42,44
56,57
56,58
60,61
60,62
69,70
69,71
77,78
77,79
83,84
83,85
92,93
92,94
96,97
96,98
-----guardedBy-----
79,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    if(badStatic)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    if(badStatic)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
if(badStatic)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
badStatic
badStatic
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(17,50,0)
(68,45,0)
(35,54,0)
(31,45,0)
(50,0,0)
(66,18,0)
(28,7,0)
(52,16,0)
(21,20,0)
(30,7,0)
(14,43,0)
(56,24,0)
(23,2,0)
(60,28,0)
(27,44,0)
(7,2,0)
(15,50,0)
(9,62,0)
(54,24,0)
(40,67,0)
(69,54,0)
(18,66,0)
(4,8,0)
(41,46,0)
(13,40,0)
(49,2,0)
(42,68,0)
(1,11,0)
(25,24,0)
(10,16,0)
(11,65,0)
(32,24,0)
(66,59,0)
(26,30,0)
(36,10,0)
(62,7,0)
(3,7,0)
(10,27,0)
(43,16,0)
(64,28,0)
(50,46,0)
(28,40,0)
(55,10,0)
(45,31,0)
(45,68,0)
(10,40,0)
(39,45,0)
(57,2,0)
(6,2,0)
(30,31,0)
(50,7,0)
(5,29,0)
(46,29,0)
(30,26,0)
(7,30,0)
(10,7,0)
(27,10,0)
(12,56,0)
(28,24,0)
(47,2,0)
(48,18,0)
(2,53,0)
(19,52,0)
(37,16,0)
(31,30,0)
(61,34,0)
(8,7,0)
(58,62,0)
(51,20,0)
(22,52,0)
(20,0,0)
(38,16,0)
(8,2,0)
(69,56,1)
(10,16,1)
(11,1,1)
(35,69,1)
(56,12,1)
(31,45,1)
(21,51,1)
(42,39,1)
(36,55,1)
(39,3,1)
(12,40,1)
(32,66,1)
(50,17,1)
(41,50,1)
(37,46,1)
(69,24,1)
(19,22,1)
(9,58,1)
(1,20,1)
(30,31,1)
(63,8,1)
(10,40,1)
(62,7,1)
(68,42,1)
(10,36,1)
(64,54,1)
(27,10,1)
(63,33,1)
(43,16,1)
(22,16,1)
(3,33,1)
(38,37,1)
(54,24,1)
(40,13,1)
(4,52,1)
(8,7,1)
(22,43,1)
(14,27,1)
(46,41,1)
(55,52,1)
(10,7,1)
(28,24,1)
(17,15,1)
(32,62,1)
(25,32,1)
(15,20,1)
(66,18,1)
(62,9,1)
(56,24,1)
(58,7,1)
(16,38,1)
(13,28,1)
(28,7,1)
(30,26,1)
(28,60,1)
(50,7,1)
(20,21,1)
(60,64,1)
(48,62,1)
(45,68,1)
(52,16,1)
(4,11,1)
(20,0,1)
(43,14,1)
(54,35,1)
(52,19,1)
(50,0,1)
(18,48,1)
(8,4,1)
(7,30,1)
(24,25,1)
(51,54,1)
(62,7,2)
(38,20,2)
(69,33,2)
(45,33,2)
(39,33,2)
(43,16,2)
(12,54,2)
(20,33,2)
(54,33,2)
(28,24,2)
(66,18,2)
(21,33,2)
(37,20,2)
(54,54,2)
(19,20,2)
(30,31,2)
(50,20,2)
(56,24,2)
(20,0,2)
(66,62,2)
(69,54,2)
(14,52,2)
(46,20,2)
(10,52,2)
(30,26,2)
(52,52,2)
(3,33,2)
(62,33,2)
(30,33,2)
(50,0,2)
(27,52,2)
(17,20,2)
(54,24,2)
(4,33,2)
(15,20,2)
(7,30,2)
(31,33,2)
(19,52,2)
(52,20,2)
(31,45,2)
(22,52,2)
(18,62,2)
(9,33,2)
(41,20,2)
(52,16,2)
(28,7,2)
(8,7,2)
(45,68,2)
(16,20,2)
(56,54,2)
(40,54,2)
(10,16,2)
(58,33,2)
(36,52,2)
(35,54,2)
(10,7,2)
(7,33,2)
(43,52,2)
(55,52,2)
(35,33,2)
(13,54,2)
(64,54,2)
(10,40,2)
(24,33,2)
(1,20,2)
(28,54,2)
(50,7,2)
(51,33,2)
(60,54,2)
(8,33,2)
(68,33,2)
(11,20,2)
(27,10,2)
(42,33,2)
(25,33,2)
(48,62,2)
(22,20,2)
(32,33,2)
-----------------------------------
(0,int data)
(1,"ERROR: Array index is negative.")
(2,)
(3,buffer)
(4,buffer)
(5,for(i = 0; i < 10; i++)
(6,for (i = 0; i < 10; i++)
(7,* buffer = (int *)
(8,free(buffer)
(9,NULL)
(10,buffer[i])
(11,printLine("ERROR: Array index is negative.")
(12,i)
(13,0)
(14,i)
(15,buffer)
(16,i = 0)
(17,data)
(18,-1)
(19,10)
(20,data >= 0)
(21,0)
(22,i)
(23,if (buffer == NULL)
(24,i = 0)
(25,0)
(26,int *)
(27,printIntLine(buffer[i])
(28,buffer[i])
(29,)
(30,(int *)
(31,malloc(10 * sizeof(int)
(32,i)
(33,badStatic)
(34,)
(35,10)
(36,i)
(37,i)
(38,0)
(39,10)
(40,buffer[i] = 0)
(41,1)
(42,int)
(43,i++)
(44,)
(45,10 * sizeof(int)
(46,buffer[data] = 1)
(47,i)
(48,1)
(49,buffer)
(50,buffer[data])
(51,data)
(52,i < 10)
(53,)
(54,i < 10)
(55,buffer)
(56,i++)
(57,if (data >= 0)
(58,buffer)
(59,)
(60,i)
(61,if(badStatic)
(62,buffer == NULL)
(63,RET)
(64,buffer)
(65,)
(66,exit(-1)
(67,)
(68,sizeof(int)
(69,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^