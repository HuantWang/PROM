-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
70,71
70,72
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
81,82
81,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
89,91
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
103,104
104,105
106,107
107,108
108,109
108,110
109,110
109,111
110,111
112,113
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
121,123
122,123
124,125
124,126
128,129
129,130
129,131
130,131
132,133
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,64,66,69,71,73,77,79,80,82,83,88,90,91,92,97,98,101,102,105,111,113,116,118,123,125,126,127,131,133,137,139
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
81,82
81,83
85,86
85,87
89,90
89,91
95,96
95,97
99,100
99,101
108,109
108,110
120,121
120,122
124,125
124,126
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,9,0)
(58,22,0)
(39,13,0)
(63,22,0)
(37,21,0)
(43,22,0)
(71,11,0)
(57,22,0)
(66,37,0)
(23,58,0)
(11,37,0)
(15,45,0)
(9,0,0)
(28,17,0)
(38,39,0)
(69,22,0)
(30,64,0)
(34,39,0)
(68,45,0)
(31,10,0)
(69,64,0)
(49,37,0)
(59,70,0)
(52,65,0)
(2,30,0)
(8,37,0)
(11,45,0)
(74,70,0)
(19,45,0)
(70,59,0)
(53,66,0)
(51,66,0)
(38,64,0)
(62,45,0)
(36,9,0)
(25,55,0)
(26,22,0)
(14,11,0)
(20,55,0)
(18,53,0)
(15,42,0)
(66,64,0)
(44,15,0)
(69,37,0)
(64,10,0)
(60,37,0)
(64,13,0)
(61,59,0)
(8,64,0)
(10,31,0)
(5,64,0)
(11,64,0)
(3,8,0)
(48,15,0)
(4,59,0)
(46,30,0)
(29,62,0)
(8,22,0)
(41,17,0)
(7,38,0)
(10,4,0)
(16,38,0)
(55,32,0)
(50,26,0)
(27,13,0)
(24,21,0)
(66,26,0)
(10,64,0)
(35,32,0)
(73,12,0)
(65,17,0)
(17,22,0)
(42,15,0)
(32,55,0)
(0,6,0)
(72,62,0)
(40,53,0)
(66,53,0)
(42,33,0)
(11,42,0)
(4,10,0)
(76,69,0)
(77,65,0)
(17,65,0)
(32,58,0)
(22,21,0)
(12,45,0)
(67,21,0)
(59,4,0)
(53,18,1)
(68,19,1)
(7,30,1)
(29,12,1)
(64,10,1)
(0,9,1)
(51,62,1)
(11,37,1)
(62,72,1)
(48,11,1)
(44,48,1)
(9,36,1)
(12,45,1)
(15,44,1)
(7,0,1)
(34,38,1)
(76,26,1)
(36,30,1)
(52,77,1)
(66,64,1)
(19,58,1)
(42,15,1)
(11,45,1)
(29,45,1)
(41,1,1)
(26,50,1)
(38,16,1)
(71,62,1)
(2,46,1)
(30,64,1)
(11,14,1)
(20,35,1)
(4,59,1)
(38,64,1)
(32,55,1)
(39,34,1)
(45,68,1)
(61,5,1)
(69,37,1)
(10,31,1)
(8,64,1)
(77,28,1)
(30,2,1)
(59,70,1)
(3,69,1)
(8,3,1)
(5,1,1)
(66,53,1)
(74,61,1)
(8,37,1)
(23,32,1)
(15,45,1)
(17,65,1)
(50,66,1)
(25,20,1)
(62,45,1)
(28,41,1)
(66,37,1)
(12,73,1)
(18,40,1)
(54,8,1)
(37,49,1)
(40,51,1)
(73,42,1)
(55,25,1)
(35,17,1)
(65,52,1)
(69,76,1)
(14,71,1)
(58,23,1)
(49,60,1)
(46,64,1)
(1,37,1)
(11,64,1)
(16,7,1)
(69,64,1)
(70,74,1)
(41,39,1)
(10,4,1)
(72,29,1)
(15,45,2)
(48,62,2)
(69,64,2)
(42,62,2)
(42,15,2)
(17,65,2)
(11,62,2)
(44,62,2)
(69,37,2)
(4,1,2)
(29,62,2)
(34,1,2)
(4,59,2)
(62,62,2)
(74,1,2)
(11,64,2)
(8,37,2)
(0,9,2)
(62,45,2)
(70,1,2)
(32,55,2)
(10,4,2)
(5,1,2)
(2,1,2)
(0,30,2)
(8,64,2)
(11,37,2)
(30,1,2)
(9,30,2)
(61,1,2)
(7,1,2)
(46,1,2)
(59,1,2)
(12,45,2)
(10,1,2)
(11,45,2)
(64,10,2)
(12,62,2)
(64,1,2)
(36,30,2)
(73,62,2)
(66,37,2)
(16,1,2)
(39,1,2)
(30,64,2)
(72,62,2)
(14,62,2)
(15,62,2)
(66,64,2)
(10,31,2)
(71,62,2)
(66,53,2)
(59,70,2)
(38,64,2)
(38,1,2)
-----------------------------------
(0,exit(-1)
(1,STATIC_CONST_TRUE)
(2,NULL)
(3,data)
(4,malloc(50*sizeof(char)
(5,data)
(6,)
(7,data)
(8,free(data)
(9,-1)
(10,(char *)
(11,data[i])
(12,i++)
(13,)
(14,i)
(15,source[i])
(16,0)
(17,memset(source, 'C', 100-1)
(18,1)
(19,i)
(20,100)
(21,)
(22,)
(23,'\\\\0')
(24,data)
(25,1)
(26,data[100-1] = '\\\\0')
(27,if (data == NULL)
(28,'C')
(29,i)
(30,data == NULL)
(31,char *)
(32,source[100-1])
(33,)
(34,\'\\\\0\')
(35,source)
(36,1)
(37,data = NULL)
(38,data[0])
(39,data[0] = '\\\\0')
(40,100)
(41,source)
(42,data[i] = source[i])
(43,i)
(44,i)
(45,i = 0)
(46,data)
(47,memset(source, \'C\', 100-1)
(48,source)
(49,NULL)
(50,'\\\\0')
(51,data)
(52,1)
(53,100-1)
(54,RET)
(55,100-1)
(56,'\\\\0')
(57,for (i = 0; i < 100; i++)
(58,source[100-1] = '\\\\0')
(59,50*sizeof(char)
(60,data)
(61,50)
(62,i < 100)
(63,source)
(64,data = (char *)
(65,100-1)
(66,data[100-1])
(67,if(STATIC_CONST_TRUE)
(68,0)
(69,printLine(data)
(70,sizeof(char)
(71,data)
(72,100)
(73,i)
(74,char)
(75,data[0] = \'\\\\0\')
(76,data)
(77,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^