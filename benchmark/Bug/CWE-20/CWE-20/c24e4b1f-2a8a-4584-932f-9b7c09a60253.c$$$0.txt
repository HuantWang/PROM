-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink(int * data)
{
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
42,43
43,44
43,45
44,45
44,46
45,46
47,48
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,6,8,9,14,16,18,21,25,27,32,33,36,37,40,46,48,51,53,57,60,61,65,67
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink(int * data){    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink(int * data)
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink
int * data
int
* data
*
data
{    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(12,23,0)
(3,26,0)
(25,23,0)
(2,6,0)
(22,21,0)
(14,19,0)
(15,28,0)
(0,21,0)
(7,26,0)
(29,23,0)
(6,21,0)
(0,27,0)
(6,27,0)
(19,28,0)
(6,25,0)
(27,6,0)
(5,25,0)
(17,19,0)
(13,0,0)
(8,21,0)
(9,0,0)
(14,23,0)
(0,28,0)
(4,19,0)
(1,21,0)
(10,23,0)
(11,15,0)
(27,24,0)
(30,8,0)
(26,21,0)
(18,6,0)
(19,14,0)
(15,23,0)
(23,20,0)
(2,0,1)
(15,28,1)
(13,26,1)
(0,21,1)
(1,22,1)
(16,15,1)
(0,9,1)
(22,25,1)
(9,13,1)
(30,27,1)
(19,4,1)
(6,18,1)
(8,30,1)
(7,3,1)
(15,11,1)
(6,25,1)
(18,2,1)
(21,1,1)
(17,26,1)
(0,28,1)
(25,5,1)
(26,21,1)
(14,19,1)
(26,7,1)
(3,21,1)
(3,8,1)
(8,21,1)
(6,21,1)
(4,17,1)
(27,6,1)
(19,28,1)
(11,14,1)
(6,26,2)
(8,26,2)
(9,26,2)
(2,26,2)
(0,28,2)
(6,21,2)
(15,28,2)
(3,26,2)
(6,25,2)
(27,6,2)
(8,21,2)
(26,26,2)
(14,19,2)
(0,26,2)
(13,26,2)
(0,21,2)
(26,21,2)
(27,26,2)
(7,26,2)
(30,26,2)
(19,28,2)
(18,26,2)
-----------------------------------
(0,data[i])
(1,0)
(2,source)
(3,i)
(4,0)
(5,source)
(6,source[i])
(7,10)
(8,i++)
(9,i)
(10,i)
(11,data)
(12,source)
(13,data)
(14,printIntLine(data[0])
(15,free(data)
(16,RET)
(17,data)
(18,i)
(19,data[0])
(20,)
(21,i = 0)
(22,i)
(23,)
(24,)
(25,source[10] = {0})
(26,i < 10)
(27,data[i] = source[i])
(28,int * data)
(29,for (i = 0; i < 10; i++)
(30,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^