-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate space for a null terminator */
        data = (char *)malloc((10+1)*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strncpy(data, source, strlen(source) + 1);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
69,70
69,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
93,94
93,95
93,96
95,96
96,97
96,98
99,100
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,61,63,66,70,71,74,75,79,81,86,88,92,94,97,98,101,105,107,109,113,115,116,120,122,126,128
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
56,57
56,58
67,68
67,69
69,70
69,71
77,78
77,79
96,97
96,98
110,111
110,112
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc((10+1)*sizeof(char));
data = (char *)malloc((10+1)*sizeof(char))
data
data
(char *)malloc((10+1)*sizeof(char))
char *
char
*
*
malloc((10+1)*sizeof(char))
malloc
malloc
(10+1)*sizeof(char)
(10+1)
10+1
10
1
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,14,0)
(54,50,0)
(37,56,0)
(43,13,0)
(41,45,0)
(57,41,0)
(15,29,0)
(25,50,0)
(8,32,0)
(10,51,0)
(51,17,0)
(27,14,0)
(32,0,0)
(23,43,0)
(10,13,0)
(0,32,0)
(35,4,0)
(32,44,0)
(14,29,0)
(51,14,0)
(42,4,0)
(16,33,0)
(4,33,0)
(47,41,0)
(44,32,0)
(13,10,0)
(52,46,0)
(41,53,0)
(2,45,0)
(1,20,0)
(3,53,0)
(26,38,0)
(46,14,0)
(33,16,0)
(13,43,0)
(18,38,0)
(9,36,0)
(39,0,0)
(34,16,0)
(48,33,0)
(4,56,0)
(31,18,0)
(51,10,0)
(36,38,0)
(21,27,0)
(16,56,0)
(12,57,0)
(56,18,0)
(27,41,0)
(45,2,0)
(45,41,0)
(7,30,0)
(55,13,0)
(24,8,0)
(40,56,0)
(6,59,0)
(27,18,0)
(14,51,0)
(46,18,0)
(32,8,0)
(46,41,0)
(4,41,0)
(28,57,0)
(30,7,0)
(60,36,0)
(6,20,0)
(33,4,0)
(5,14,0)
(17,51,0)
(50,14,0)
(22,30,0)
(4,18,0)
(19,8,0)
(11,38,0)
(45,44,0)
(44,45,0)
(7,49,0)
(20,6,0)
(6,20,1)
(22,57,1)
(51,10,1)
(9,60,1)
(16,34,1)
(46,14,1)
(27,21,1)
(25,14,1)
(34,42,1)
(10,13,1)
(57,12,1)
(4,56,1)
(61,36,1)
(30,22,1)
(27,41,1)
(32,0,1)
(46,52,1)
(44,32,1)
(20,1,1)
(37,7,1)
(0,39,1)
(32,8,1)
(57,41,1)
(55,5,1)
(7,30,1)
(24,19,1)
(14,51,1)
(41,45,1)
(45,44,1)
(54,25,1)
(33,16,1)
(39,8,1)
(4,14,1)
(19,47,1)
(4,41,1)
(52,27,1)
(35,56,1)
(45,2,1)
(1,50,1)
(42,35,1)
(58,46,1)
(12,28,1)
(47,61,1)
(13,43,1)
(4,33,1)
(50,54,1)
(50,14,1)
(43,23,1)
(28,41,1)
(56,40,1)
(27,14,1)
(37,50,1)
(21,4,1)
(16,56,1)
(37,57,1)
(51,17,1)
(40,37,1)
(5,61,1)
(8,24,1)
(37,6,1)
(48,16,1)
(46,41,1)
(23,55,1)
(33,48,1)
(36,9,1)
(47,61,2)
(4,41,2)
(16,56,2)
(51,61,2)
(6,50,2)
(43,61,2)
(27,14,2)
(45,61,2)
(44,61,2)
(13,61,2)
(46,41,2)
(50,61,2)
(14,61,2)
(45,2,2)
(33,16,2)
(44,32,2)
(14,51,2)
(8,61,2)
(1,50,2)
(22,57,2)
(32,8,2)
(4,14,2)
(46,14,2)
(27,41,2)
(25,61,2)
(51,10,2)
(41,61,2)
(13,43,2)
(10,13,2)
(23,61,2)
(4,33,2)
(50,14,2)
(45,44,2)
(20,50,2)
(10,61,2)
(57,41,2)
(0,61,2)
(32,0,2)
(4,56,2)
(28,61,2)
(7,30,2)
(30,57,2)
(55,61,2)
(19,61,2)
(5,61,2)
(24,61,2)
(12,61,2)
(41,45,2)
(54,61,2)
(57,61,2)
(7,57,2)
(32,61,2)
(51,17,2)
(39,61,2)
(6,20,2)
-----------------------------------
(0,sizeof(char)
(1,1)
(2,char *)
(3,if (data == NULL)
(4,strncpy(data, source, strlen(source)
(5,data)
(6,exit(-1)
(7,exit(-1)
(8,10+1)
(9,NULL)
(10,malloc(10*sizeof(char)
(11,data)
(12,NULL)
(13,10*sizeof(char)
(14,data = (char *)
(15,if (data == NULL)
(16,strlen(source)
(17,char *)
(18,)
(19,10)
(20,-1)
(21,data)
(22,1)
(23,char)
(24,1)
(25,data)
(26,if(globalReturnsTrueOrFalse()
(27,printLine(data)
(28,data)
(29,)
(30,-1)
(31,source)
(32,(10+1)
(33,strlen(source)
(34,source)
(35,data)
(36,data = NULL)
(37,source)
(38,)
(39,char)
(40,SRC_STRING)
(41,data = (char *)
(42,source)
(43,sizeof(char)
(44,malloc((10+1)
(45,(char *)
(46,free(data)
(47,data)
(48,1)
(49,)
(50,data == NULL)
(51,(char *)
(52,data)
(53,)
(54,NULL)
(55,10)
(56,source[10+1] = SRC_STRING)
(57,data == NULL)
(58,RET)
(59,)
(60,data)
(61,globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^