-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad()
{
    void * data;
    data = NULL;
    if(staticTrue)
    {
        {
            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
            if (dataBadBuffer == NULL) {exit(-1);}
            wmemset(dataBadBuffer, L'A', 50-1);
            dataBadBuffer[50-1] = L'\0';
            /* POTENTIAL FLAW: Set data to point to a wide string */
            data = (void *)dataBadBuffer;
        }
    }
    if(staticTrue)
    {
        {
            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
            size_t dataLen = strlen((char *)data);
            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
            if (dest == NULL) {exit(-1);}
            (void)wcscpy(dest, data);
            printLine((char *)dest);
            free(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
26,27
26,28
26,29
29,30
30,31
30,32
31,32
31,33
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
91,94
91,95
91,96
91,97
92,93
93,94
93,95
94,95
96,97
96,98
98,99
99,100
99,101
100,101
102,103
102,104
103,104
103,105
105,106
107,108
109,110
110,111
110,112
112,113
112,114
112,115
115,116
116,117
116,118
117,118
117,119
119,120
121,122
121,123
121,124
122,123
124,125
124,126
125,126
128,129
129,130
129,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
147,149
150,151
150,152
150,153
151,152
153,154
155,156
157,158
158,159
158,160
159,160
161,162
161,163
162,163
162,164
164,165
166,167
168,169
169,170
169,171
170,171
172,173
-----nextToken-----
2,4,8,10,11,15,17,20,25,27,28,32,34,37,39,42,43,47,49,54,56,60,62,63,65,66,71,73,74,75,79,82,84,86,89,95,97,101,104,106,108,111,113,114,118,120,123,126,127,130,131,135,137,142,144,148,149,152,154,156,160,163,165,167,171,173
-----computeFrom-----
13,14
13,15
38,39
38,40
45,46
45,47
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
124,125
124,126
133,134
133,135
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad(){    void * data;    data = NULL;    if(staticTrue)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad
{    void * data;    data = NULL;    if(staticTrue)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }    }}
void * data;
void * data;
void
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }    }
staticTrue
staticTrue
{        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }    }
{            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)malloc(50*sizeof(wchar_t))
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBadBuffer == NULL) {exit(-1);}
dataBadBuffer == NULL
dataBadBuffer
dataBadBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBadBuffer, L'A', 50-1);
wmemset(dataBadBuffer, L'A', 50-1)
wmemset
wmemset
dataBadBuffer
dataBadBuffer
L'A'
50-1
50
1
dataBadBuffer[50-1] = L'\0';
dataBadBuffer[50-1] = L'\0'
dataBadBuffer[50-1]
dataBadBuffer
dataBadBuffer
50-1
50
1
L'\0'
data = (void *)dataBadBuffer;
data = (void *)dataBadBuffer
data
data
(void *)dataBadBuffer
void *
void
*
*
dataBadBuffer
dataBadBuffer
if(staticTrue)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }    }
staticTrue
staticTrue
{        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }    }
{            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void
* dest = (void *)calloc(dataLen+1, sizeof(wchar_t))
*
dest
= (void *)calloc(dataLen+1, sizeof(wchar_t))
(void *)calloc(dataLen+1, sizeof(wchar_t))
void *
void
*
*
calloc(dataLen+1, sizeof(wchar_t))
calloc
calloc
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

if (dest == NULL) {exit(-1);}
dest == NULL
dest
dest
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
free(dest);
free(dest)
free
free
dest
dest
-----joern-----
(18,74,0)
(49,74,0)
(62,14,0)
(32,11,0)
(35,74,0)
(8,70,0)
(22,31,0)
(56,72,0)
(24,11,0)
(17,65,0)
(11,24,0)
(50,74,0)
(62,74,0)
(15,63,0)
(49,46,0)
(45,63,0)
(34,54,0)
(9,69,0)
(21,72,0)
(27,43,0)
(63,40,0)
(27,3,0)
(33,49,0)
(74,64,0)
(43,65,0)
(54,34,0)
(4,54,0)
(69,9,0)
(19,27,0)
(30,72,0)
(8,40,0)
(14,18,0)
(39,18,0)
(12,3,0)
(57,27,0)
(13,18,0)
(15,74,0)
(27,57,0)
(26,31,0)
(18,54,0)
(14,48,0)
(67,33,0)
(15,16,0)
(1,66,0)
(51,68,0)
(66,31,0)
(6,44,0)
(41,43,0)
(43,68,0)
(54,18,0)
(69,59,0)
(20,14,0)
(29,39,0)
(70,8,0)
(31,66,0)
(28,65,0)
(7,65,0)
(8,3,0)
(63,18,0)
(61,44,0)
(10,49,0)
(68,51,0)
(3,65,0)
(71,74,0)
(16,15,0)
(54,4,0)
(60,18,0)
(31,22,0)
(8,46,0)
(0,33,0)
(60,74,0)
(46,8,0)
(63,15,0)
(68,22,0)
(22,68,0)
(46,49,0)
(24,36,0)
(42,40,0)
(44,43,0)
(23,4,0)
(73,39,0)
(52,63,0)
(40,72,0)
(14,62,0)
(68,43,0)
(33,4,0)
(63,3,0)
(4,33,0)
(58,60,0)
(4,23,0)
(5,23,0)
(75,9,0)
(48,14,0)
(55,8,0)
(53,40,0)
(3,27,0)
(65,47,0)
(19,12,1)
(40,53,1)
(73,29,1)
(10,25,1)
(20,15,1)
(27,19,1)
(8,70,1)
(43,68,1)
(13,49,1)
(3,27,1)
(54,34,1)
(49,46,1)
(24,11,1)
(5,33,1)
(39,18,1)
(39,73,1)
(8,55,1)
(14,20,1)
(53,42,1)
(15,63,1)
(26,41,1)
(12,28,1)
(52,45,1)
(14,18,1)
(41,2,1)
(0,13,1)
(63,52,1)
(61,6,1)
(69,9,1)
(66,1,1)
(28,69,1)
(37,25,1)
(4,23,1)
(46,8,1)
(32,39,1)
(33,67,1)
(54,4,1)
(68,22,1)
(45,39,1)
(14,48,1)
(8,40,1)
(58,62,1)
(9,75,1)
(18,54,1)
(27,43,1)
(63,40,1)
(60,18,1)
(60,58,1)
(37,60,1)
(45,24,1)
(2,40,1)
(63,18,1)
(8,3,1)
(33,49,1)
(44,61,1)
(6,43,1)
(31,66,1)
(28,44,1)
(75,44,1)
(44,43,1)
(29,18,1)
(68,51,1)
(25,3,1)
(4,33,1)
(23,5,1)
(55,10,1)
(22,31,1)
(25,2,1)
(62,14,1)
(27,57,1)
(11,32,1)
(1,26,1)
(63,3,1)
(15,16,1)
(67,0,1)
(9,44,2)
(8,70,2)
(24,11,2)
(61,2,2)
(55,25,2)
(12,2,2)
(6,2,2)
(8,40,2)
(63,3,2)
(10,25,2)
(45,25,2)
(3,2,2)
(14,25,2)
(58,25,2)
(43,68,2)
(39,25,2)
(18,54,2)
(8,25,2)
(66,2,2)
(4,25,2)
(23,25,2)
(49,46,2)
(41,2,2)
(68,2,2)
(73,25,2)
(26,2,2)
(68,22,2)
(39,18,2)
(5,25,2)
(14,48,2)
(60,25,2)
(68,51,2)
(63,25,2)
(18,25,2)
(15,25,2)
(29,25,2)
(75,44,2)
(27,2,2)
(19,2,2)
(62,25,2)
(62,14,2)
(13,25,2)
(20,25,2)
(14,18,2)
(22,31,2)
(33,25,2)
(1,2,2)
(4,23,2)
(63,40,2)
(52,25,2)
(4,33,2)
(46,8,2)
(67,25,2)
(8,3,2)
(54,4,2)
(49,25,2)
(54,25,2)
(69,44,2)
(27,43,2)
(32,39,2)
(54,34,2)
(24,39,2)
(60,18,2)
(3,27,2)
(44,43,2)
(63,18,2)
(11,39,2)
(15,16,2)
(27,57,2)
(33,49,2)
(43,2,2)
(28,2,2)
(31,66,2)
(0,25,2)
(44,2,2)
(69,9,2)
(46,25,2)
(15,63,2)
(22,2,2)
(31,2,2)
-----------------------------------
(0,dataLen)
(1,wchar_t)
(2,staticTrue)
(3,data = (void *)
(4,calloc(dataLen+1, sizeof(wchar_t)
(5,wchar_t)
(6,dataBadBuffer)
(7,if (dataBadBuffer == NULL)
(8,(char *)
(9,-1)
(10,dataLen)
(11,-1)
(12,data)
(13,dest)
(14,(char *)
(15,(void)
(16,void)
(17,dataBadBuffer)
(18,* dest = (void *)
(19,dataBadBuffer)
(20,dest)
(21,data)
(22,malloc(50*sizeof(wchar_t)
(23,sizeof(wchar_t)
(24,exit(-1)
(25,staticTrue)
(26,50)
(27,(void *)
(28,'\\\\0')
(29,dest)
(30,if(staticTrue)
(31,50*sizeof(wchar_t)
(32,1)
(33,dataLen+1)
(34,void *)
(35,if (dest == NULL)
(36,)
(37,RET)
(38,\'\\\\0\')
(39,dest == NULL)
(40,data = NULL)
(41,dataBadBuffer)
(42,data)
(43,* dataBadBuffer = (wchar_t *)
(44,dataBadBuffer == NULL)
(45,dest)
(46,strlen((char *)
(47,)
(48,char *)
(49,dataLen = strlen((char *)
(50,dest)
(51,wchar_t *)
(52,data)
(53,NULL)
(54,(void *)
(55,data)
(56,if(staticTrue)
(57,void *)
(58,dest)
(59,)
(60,free(dest)
(61,NULL)
(62,printLine((char *)
(63,wcscpy(dest, data)
(64,)
(65,)
(66,sizeof(wchar_t)
(67,1)
(68,(wchar_t *)
(69,exit(-1)
(70,char *)
(71,dataLen)
(72,)
(73,NULL)
(74,)
(75,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^