-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_struct_11_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrue())
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
64,68
65,66
66,67
66,68
67,68
70,71
70,72
71,72
74,75
75,76
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
84,85
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
98,99
99,100
99,101
100,101
102,103
104,105
104,106
105,106
106,107
108,109
109,110
110,111
110,112
111,112
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,63,68,69,72,73,76,83,85,86,87,93,95,96,97,101,103,107,112,116,117
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
66,67
66,68
70,71
70,72
79,80
79,81
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_struct_11_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_struct_11_bad()
CWE416_Use_After_Free__malloc_free_struct_11_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i].intOne = 1;                data[i].intTwo = 2;            }
data[i].intOne = 1;
data[i].intOne = 1
data[i].intOne
data[i]
data
data
i
i
intOne
1
data[i].intTwo = 2;
data[i].intTwo = 2
data[i].intTwo
data[i]
data
data
i
i
intTwo
2
free(data);
free(data)
free
free
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(24,2,0)
(46,39,0)
(51,30,0)
(56,34,0)
(16,50,0)
(61,3,0)
(14,11,0)
(33,52,0)
(10,59,0)
(45,50,0)
(25,29,0)
(32,11,0)
(56,23,0)
(44,32,0)
(59,31,0)
(35,2,0)
(53,49,0)
(5,60,0)
(33,54,0)
(20,51,0)
(11,40,0)
(19,51,0)
(22,30,0)
(58,35,0)
(38,60,0)
(48,29,0)
(1,39,0)
(57,55,0)
(3,61,0)
(32,27,0)
(18,55,0)
(49,53,0)
(55,30,0)
(0,3,0)
(36,34,0)
(51,50,0)
(49,30,0)
(52,51,0)
(60,43,0)
(34,56,0)
(37,13,0)
(30,43,0)
(8,15,0)
(30,49,0)
(52,33,0)
(21,43,0)
(27,30,0)
(26,27,0)
(31,40,0)
(49,7,0)
(6,29,0)
(13,30,0)
(9,2,0)
(3,7,0)
(35,30,0)
(15,2,0)
(13,43,0)
(27,32,0)
(17,31,0)
(59,35,0)
(35,59,0)
(51,52,0)
(4,27,0)
(27,2,0)
(7,49,0)
(50,29,0)
(7,3,0)
(39,2,0)
(12,61,0)
(28,35,0)
(16,45,1)
(30,49,1)
(13,30,1)
(41,47,1)
(47,42,1)
(9,56,1)
(39,2,1)
(2,24,1)
(27,30,1)
(34,36,1)
(4,31,1)
(27,26,1)
(26,4,1)
(24,9,1)
(49,53,1)
(44,27,1)
(57,30,1)
(9,55,1)
(12,0,1)
(35,58,1)
(61,12,1)
(15,8,1)
(0,22,1)
(37,39,1)
(39,1,1)
(51,19,1)
(8,11,1)
(58,28,1)
(17,59,1)
(51,50,1)
(27,2,1)
(22,42,1)
(7,3,1)
(55,30,1)
(49,7,1)
(42,50,1)
(15,2,1)
(10,35,1)
(32,27,1)
(33,52,1)
(35,2,1)
(59,35,1)
(11,14,1)
(31,17,1)
(36,55,1)
(28,39,1)
(3,61,1)
(13,37,1)
(59,10,1)
(51,30,1)
(18,57,1)
(56,34,1)
(20,47,1)
(50,16,1)
(47,13,1)
(52,51,1)
(55,18,1)
(41,33,1)
(35,30,1)
(32,44,1)
(46,2,1)
(46,15,1)
(1,46,1)
(19,20,1)
(14,32,1)
(19,47,2)
(1,39,2)
(0,42,2)
(32,39,2)
(56,55,2)
(39,42,2)
(15,39,2)
(37,42,2)
(13,30,2)
(8,39,2)
(51,50,2)
(3,61,2)
(39,39,2)
(11,39,2)
(1,42,2)
(51,47,2)
(34,55,2)
(30,49,2)
(17,39,2)
(46,39,2)
(57,42,2)
(15,2,2)
(13,42,2)
(56,34,2)
(30,42,2)
(2,42,2)
(35,30,2)
(51,30,2)
(27,39,2)
(32,27,2)
(12,42,2)
(39,2,2)
(31,39,2)
(59,39,2)
(7,3,2)
(27,30,2)
(10,39,2)
(58,39,2)
(24,42,2)
(55,42,2)
(59,35,2)
(49,7,2)
(14,39,2)
(52,51,2)
(61,42,2)
(49,53,2)
(55,30,2)
(49,42,2)
(35,39,2)
(28,39,2)
(3,42,2)
(4,39,2)
(44,39,2)
(27,2,2)
(33,47,2)
(33,52,2)
(20,47,2)
(22,42,2)
(9,42,2)
(26,39,2)
(7,42,2)
(52,47,2)
(35,2,2)
(36,55,2)
(18,42,2)
(46,42,2)
-----------------------------------
(0,100)
(1,100)
(2,i = 0)
(3,100*sizeof(twoIntsStruct)
(4,data)
(5,for(i = 0; i < 100; i++)
(6,data)
(7,malloc(100*sizeof(twoIntsStruct)
(8,i)
(9,i)
(10,intOne)
(11,data[i].intTwo = 2)
(12,twoIntsStruct)
(13,free(data)
(14,2)
(15,i++)
(16,NULL)
(17,1)
(18,NULL)
(19,0)
(20,data)
(21,if (data == NULL)
(22,data)
(23,)
(24,0)
(25,if(globalReturnsTrue()
(26,i)
(27,data[i])
(28,data)
(29,)
(30,data = (twoIntsStruct *)
(31,data[i].intOne = 1)
(32,data[i].intTwo)
(33,printStructLine(&data[0])
(34,-1)
(35,data[i])
(36,1)
(37,data)
(38,i)
(39,i < 100)
(40,)
(41,RET)
(42,globalReturnsTrue()
(43,)
(44,intTwo)
(45,data)
(46,i)
(47,globalReturnsTrue()
(48,if(globalReturnsTrue()
(49,(twoIntsStruct *)
(50,data = NULL)
(51,data[0])
(52,&data[0])
(53,twoIntsStruct *)
(54,)
(55,data == NULL)
(56,exit(-1)
(57,data)
(58,i)
(59,data[i].intOne)
(60,)
(61,sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^