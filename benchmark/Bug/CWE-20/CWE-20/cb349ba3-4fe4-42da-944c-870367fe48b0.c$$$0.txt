-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(64,23,0)
(62,7,0)
(57,14,0)
(41,59,0)
(21,41,0)
(50,48,0)
(8,55,0)
(71,62,0)
(64,14,0)
(43,7,0)
(69,38,0)
(4,70,0)
(0,30,0)
(58,45,0)
(61,5,0)
(43,23,0)
(15,7,0)
(13,59,0)
(67,26,0)
(27,34,0)
(63,56,0)
(58,60,0)
(66,56,0)
(56,23,0)
(37,64,0)
(5,46,0)
(34,23,0)
(17,2,0)
(34,7,0)
(41,62,0)
(51,11,0)
(26,2,0)
(29,40,0)
(42,13,0)
(55,62,0)
(70,48,0)
(38,57,0)
(64,48,0)
(57,59,0)
(19,48,0)
(9,2,0)
(38,62,0)
(12,23,0)
(3,36,0)
(1,43,0)
(65,2,0)
(32,2,0)
(35,26,0)
(36,23,0)
(11,2,0)
(28,48,0)
(55,45,0)
(62,41,0)
(45,58,0)
(45,55,0)
(24,43,0)
(53,36,0)
(60,58,0)
(18,55,0)
(40,7,0)
(6,25,0)
(1,5,0)
(30,48,0)
(14,57,0)
(33,39,0)
(20,57,0)
(58,23,0)
(23,7,0)
(70,62,0)
(47,30,0)
(16,70,0)
(68,19,0)
(39,6,0)
(23,58,0)
(52,7,0)
(30,38,0)
(56,40,0)
(38,30,0)
(54,13,0)
(57,38,0)
(22,64,0)
(14,49,0)
(56,62,0)
(6,39,0)
(10,11,0)
(41,21,1)
(36,23,1)
(56,66,1)
(34,23,1)
(63,70,1)
(41,59,1)
(4,19,1)
(30,48,1)
(38,62,1)
(0,69,1)
(50,28,1)
(16,4,1)
(43,23,1)
(38,30,1)
(8,12,1)
(21,71,1)
(71,13,1)
(5,61,1)
(56,23,1)
(13,59,1)
(43,24,1)
(64,48,1)
(28,36,1)
(19,68,1)
(35,67,1)
(23,58,1)
(54,11,1)
(10,51,1)
(47,0,1)
(29,56,1)
(3,23,1)
(64,37,1)
(20,64,1)
(22,70,1)
(70,48,1)
(45,55,1)
(62,41,1)
(69,20,1)
(12,62,1)
(11,10,1)
(13,42,1)
(56,62,1)
(55,18,1)
(19,48,1)
(14,57,1)
(58,60,1)
(42,54,1)
(18,8,1)
(39,33,1)
(1,5,1)
(58,45,1)
(6,39,1)
(37,22,1)
(68,14,1)
(55,62,1)
(40,29,1)
(34,27,1)
(57,38,1)
(30,47,1)
(4,48,1)
(53,3,1)
(26,35,1)
(57,59,1)
(51,26,1)
(24,34,1)
(61,13,1)
(36,53,1)
(1,43,1)
(66,63,1)
(33,36,1)
(64,23,1)
(70,62,1)
(27,40,1)
(48,50,1)
(28,6,1)
(70,16,1)
(57,59,2)
(50,13,2)
(57,38,2)
(70,62,2)
(55,62,2)
(70,13,2)
(34,23,2)
(70,70,2)
(56,13,2)
(41,59,2)
(14,57,2)
(5,13,2)
(58,13,2)
(6,36,2)
(64,48,2)
(69,70,2)
(63,13,2)
(47,70,2)
(33,36,2)
(1,43,2)
(57,70,2)
(56,23,2)
(16,13,2)
(70,48,2)
(21,13,2)
(38,62,2)
(23,13,2)
(58,45,2)
(43,23,2)
(40,13,2)
(45,13,2)
(61,13,2)
(38,30,2)
(0,70,2)
(8,13,2)
(23,58,2)
(19,48,2)
(4,13,2)
(30,48,2)
(37,70,2)
(64,70,2)
(55,13,2)
(45,55,2)
(53,13,2)
(12,13,2)
(71,13,2)
(66,13,2)
(22,70,2)
(24,13,2)
(29,13,2)
(28,13,2)
(43,13,2)
(4,70,2)
(56,62,2)
(19,70,2)
(38,70,2)
(16,70,2)
(1,5,2)
(48,13,2)
(64,23,2)
(36,23,2)
(3,13,2)
(58,60,2)
(39,36,2)
(27,13,2)
(18,13,2)
(62,41,2)
(34,13,2)
(36,13,2)
(68,70,2)
(13,59,2)
(6,39,2)
(20,70,2)
(62,13,2)
(14,70,2)
(30,70,2)
(41,13,2)
-----------------------------------
(0,j)
(1,RET)
(2,)
(3,reversedString)
(4,j)
(5,return NULL;)
(6,exit(-1)
(7,)
(8,i)
(9,j)
(10,NULL)
(11,* reversedString = NULL)
(12,reversedString)
(13,aString != NULL)
(14,reversedString[j] = aString[i-j-1])
(15,for (j = 0; j < i; j++)
(16,i)
(17,i)
(18,1)
(19,j++)
(20,aString)
(21,aString)
(22,reversedString)
(23,reversedString = (char *)
(24,reversedString)
(25,)
(26,i = 0)
(27,reversedString)
(28,j)
(29,\'\\\\0\')
(30,j-1)
(31,'\\\\0')
(32,if (aString != NULL)
(33,1)
(34,free(reversedString)
(35,0)
(36,reversedString == NULL)
(37,j)
(38,i-j-1)
(39,-1)
(40,reversedString[i] = \'\\\\0\')
(41,strlen(aString)
(42,NULL)
(43,return reversedString;)
(44,reversedString[i] = '\\\\0')
(45,malloc(i+1)
(46,)
(47,1)
(48,j = 0)
(49,)
(50,0)
(51,reversedString)
(52,if (reversedString == NULL)
(53,NULL)
(54,aString)
(55,i+1)
(56,reversedString[i])
(57,aString[i-j-1])
(58,(char *)
(59,char * aString)
(60,char *)
(61,NULL)
(62,i = strlen(aString)
(63,reversedString)
(64,reversedString[j])
(65,reversedString)
(66,i)
(67,i)
(68,j)
(69,i)
(70,j < i)
(71,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^