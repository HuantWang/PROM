-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_loop_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (dataBuffer == NULL) {exit(-1);}
        wmemset(dataBuffer, L'A', 100-1);
        dataBuffer[100-1] = L'\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        size_t i;
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with 'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        /* Ensure the destination buffer is null terminated */
        data[100-1] = L'\0';
        printWLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
87,88
88,89
88,90
89,90
93,94
93,95
93,96
93,97
93,98
93,99
93,100
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
103,104
103,105
105,106
107,108
108,109
108,110
108,111
108,112
109,110
111,112
114,115
114,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
122,124
126,127
126,128
126,129
126,130
127,128
128,129
128,130
129,130
132,133
132,134
133,134
136,137
137,138
139,140
140,141
141,142
141,143
142,143
142,144
143,144
145,146
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
154,156
155,156
157,158
157,159
161,162
162,163
162,164
163,164
165,166
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,85,86,90,91,92,97,99,102,104,106,110,112,113,115,116,121,123,124,125,130,131,134,135,138,144,146,149,151,156,158,159,160,164,166
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
114,115
114,116
118,119
118,120
122,123
122,124
128,129
128,130
132,133
132,134
141,142
141,143
153,154
153,155
157,158
157,159
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_loop_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_15_bad()
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
size_t i;
size_t i;
size_t
size_t
i
i
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(0,6,0)
(6,51,0)
(1,23,0)
(9,7,0)
(38,18,0)
(56,18,0)
(3,24,0)
(53,42,0)
(25,44,0)
(19,38,0)
(45,60,0)
(31,46,0)
(42,18,0)
(7,18,0)
(27,60,0)
(42,22,0)
(10,60,0)
(3,23,0)
(58,51,0)
(18,44,0)
(63,24,0)
(22,42,0)
(15,26,0)
(17,63,0)
(42,53,0)
(2,23,0)
(48,11,0)
(40,51,0)
(18,42,0)
(46,31,0)
(33,40,0)
(43,1,0)
(57,60,0)
(52,20,0)
(35,38,0)
(16,11,0)
(54,63,0)
(26,44,0)
(22,16,0)
(63,23,0)
(16,22,0)
(62,40,0)
(55,31,0)
(49,2,0)
(3,40,0)
(26,38,0)
(21,6,0)
(44,60,0)
(13,44,0)
(14,23,0)
(39,7,0)
(37,6,0)
(34,3,0)
(11,16,0)
(33,26,0)
(32,3,0)
(30,6,0)
(36,33,0)
(46,4,0)
(24,63,0)
(24,8,0)
(28,6,0)
(41,40,0)
(12,2,0)
(20,60,0)
(29,51,0)
(5,23,0)
(3,26,0)
(33,6,0)
(47,44,0)
(38,26,0)
(61,16,0)
(20,52,1)
(24,63,1)
(38,19,1)
(42,53,1)
(31,55,1)
(61,56,1)
(3,40,1)
(1,23,1)
(16,11,1)
(48,61,1)
(7,9,1)
(27,26,1)
(33,26,1)
(23,14,1)
(10,20,1)
(56,50,1)
(17,54,1)
(46,31,1)
(3,23,1)
(33,36,1)
(32,2,1)
(39,18,1)
(42,22,1)
(63,23,1)
(36,30,1)
(49,23,1)
(18,42,1)
(43,24,1)
(7,18,1)
(21,27,1)
(1,43,1)
(26,38,1)
(38,18,1)
(19,35,1)
(54,3,1)
(49,1,1)
(30,2,1)
(63,17,1)
(12,49,1)
(22,16,1)
(50,40,1)
(5,21,1)
(52,50,1)
(47,46,1)
(2,12,1)
(59,33,1)
(14,5,1)
(3,34,1)
(40,41,1)
(11,48,1)
(2,23,1)
(35,15,1)
(15,47,1)
(47,7,1)
(34,32,1)
(3,26,1)
(9,39,1)
(55,7,1)
(41,62,1)
(33,40,1)
(21,10,1)
(10,50,2)
(20,50,2)
(46,31,2)
(12,2,2)
(49,2,2)
(9,50,2)
(34,2,2)
(43,2,2)
(26,50,2)
(48,50,2)
(7,18,2)
(42,22,2)
(26,38,2)
(55,7,2)
(33,26,2)
(2,2,2)
(32,2,2)
(33,40,2)
(3,40,2)
(54,2,2)
(24,2,2)
(39,50,2)
(3,26,2)
(18,42,2)
(24,63,2)
(42,50,2)
(22,50,2)
(35,50,2)
(42,53,2)
(56,50,2)
(1,23,2)
(7,50,2)
(11,50,2)
(38,50,2)
(63,23,2)
(15,50,2)
(3,2,2)
(2,23,2)
(22,16,2)
(19,50,2)
(3,23,2)
(38,18,2)
(46,7,2)
(47,50,2)
(17,2,2)
(16,50,2)
(52,50,2)
(31,7,2)
(63,2,2)
(27,50,2)
(61,50,2)
(18,50,2)
(16,11,2)
(1,2,2)
-----------------------------------
(0,for (i = 0; i < 100; i++)
(1,i++)
(2,i < 100)
(3,data[i])
(4,)
(5,i)
(6,)
(7,dataBuffer == NULL)
(8,)
(9,NULL)
(10,break;)
(11,sizeof(wchar_t)
(12,100)
(13,if (dataBuffer == NULL)
(14,0)
(15,data)
(16,100*sizeof(wchar_t)
(17,i)
(18,* dataBuffer = (wchar_t *)
(19,8)
(20,printLine("Benign, fixed string")
(21,\\\'\\\\0\\\')
(22,malloc(100*sizeof(wchar_t)
(23,i = 0)
(24,data[i] = source[i])
(25,dataBuffer)
(26,data = dataBuffer - 8)
(27,break;)
(28,source)
(29,data)
(30,\\\'\\\\0\\\')
(31,-1)
(32,data)
(33,printWLine(data)
(34,i)
(35,dataBuffer)
(36,data)
(37,i)
(38,dataBuffer - 8)
(39,dataBuffer)
(40,data = NULL)
(41,NULL)
(42,(wchar_t *)
(43,i)
(44,)
(45,default:)
(46,exit(-1)
(47,\\\'\\\\0\\\')
(48,wchar_t)
(49,i)
(50,6)
(51,)
(52,"Benign, fixed string")
(53,wchar_t *)
(54,source)
(55,1)
(56,dataBuffer)
(57,case 6:)
(58,switch(6)
(59,RET)
(60,)
(61,100)
(62,data)
(63,source[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^