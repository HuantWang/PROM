-----label-----
1
-----code-----
static void badSink(int * data)
{
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,6,8,9,14,16,18,21,25,27,29,31,34,35,39,42,43,47,49
-----computeFrom-----
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int * data){    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
static void
badSink(int * data)
badSink
int * data
int
* data
*
data
{    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(9,19,0)
(16,15,0)
(16,2,0)
(11,9,0)
(15,4,0)
(3,15,0)
(13,10,0)
(16,10,0)
(14,4,0)
(8,9,0)
(6,17,0)
(17,8,0)
(12,16,0)
(4,15,0)
(5,16,0)
(8,17,0)
(11,2,0)
(10,9,0)
(18,17,0)
(0,9,0)
(15,16,0)
(16,9,0)
(17,2,0)
(1,11,0)
(11,2,1)
(5,12,1)
(12,10,1)
(3,5,1)
(14,3,1)
(11,1,1)
(7,11,1)
(17,2,1)
(16,10,1)
(18,6,1)
(15,4,1)
(16,15,1)
(4,14,1)
(17,18,1)
(16,2,1)
(8,17,1)
(10,13,1)
(6,16,1)
(1,8,1)
(17,2,2)
(16,15,2)
(16,2,2)
(11,2,2)
(16,10,2)
(8,17,2)
(15,4,2)
-----------------------------------
(0,source)
(1,data)
(2,int * data)
(3,10)
(4,sizeof(int)
(5,source)
(6,data)
(7,RET)
(8,printIntLine(data[0])
(9,)
(10,source[10] = {0})
(11,free(data)
(12,data)
(13,source)
(14,int)
(15,10*sizeof(int)
(16,memcpy(data, source, 10*sizeof(int)
(17,data[0])
(18,0)
(19,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^