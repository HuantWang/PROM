-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(64,53,0)
(43,38,0)
(13,54,0)
(5,16,0)
(60,5,0)
(45,65,0)
(16,5,0)
(64,17,0)
(27,17,0)
(46,62,0)
(61,64,0)
(57,49,0)
(58,7,0)
(44,32,0)
(41,57,0)
(28,50,0)
(26,45,0)
(41,34,0)
(0,34,0)
(35,17,0)
(65,45,0)
(45,5,0)
(53,51,0)
(27,63,0)
(0,51,0)
(32,34,0)
(7,30,0)
(23,57,0)
(8,20,0)
(62,41,0)
(45,31,0)
(56,0,0)
(29,59,0)
(48,43,0)
(59,34,0)
(21,24,0)
(6,63,0)
(53,64,0)
(7,34,0)
(42,3,0)
(40,53,0)
(5,45,0)
(17,64,0)
(12,51,0)
(30,7,0)
(18,65,0)
(37,36,0)
(9,53,0)
(52,43,0)
(36,54,0)
(17,27,0)
(10,41,0)
(63,27,0)
(50,39,0)
(32,50,0)
(30,43,0)
(33,59,0)
(2,63,0)
(32,30,0)
(63,51,0)
(31,34,0)
(51,0,0)
(19,16,0)
(64,34,0)
(55,31,0)
(47,62,0)
(54,36,0)
(54,30,0)
(59,25,0)
(1,16,0)
(11,30,0)
(15,32,0)
(14,31,0)
(51,24,0)
(62,51,0)
(31,45,0)
(20,39,0)
(22,25,0)
(16,30,0)
(4,54,0)
(41,62,0)
(5,60,0)
(31,30,0)
(65,45,1)
(53,51,1)
(58,11,1)
(27,63,1)
(33,50,1)
(55,36,1)
(37,54,1)
(47,10,1)
(45,31,1)
(33,57,1)
(6,2,1)
(32,30,1)
(11,66,1)
(10,27,1)
(59,34,1)
(44,20,1)
(15,44,1)
(41,34,1)
(33,36,1)
(29,59,1)
(64,34,1)
(63,51,1)
(20,8,1)
(7,58,1)
(63,6,1)
(5,16,1)
(33,66,1)
(28,32,1)
(31,14,1)
(14,55,1)
(13,30,1)
(18,45,1)
(33,27,1)
(5,60,1)
(32,15,1)
(61,63,1)
(17,64,1)
(1,31,1)
(30,7,1)
(31,34,1)
(31,30,1)
(16,19,1)
(53,40,1)
(64,53,1)
(8,65,1)
(59,33,1)
(16,30,1)
(36,54,1)
(0,34,1)
(27,17,1)
(32,34,1)
(9,61,1)
(45,5,1)
(62,51,1)
(0,56,1)
(2,51,1)
(19,1,1)
(40,9,1)
(62,46,1)
(12,65,1)
(50,28,1)
(41,62,1)
(4,13,1)
(23,41,1)
(45,26,1)
(51,0,1)
(54,30,1)
(36,37,1)
(17,35,1)
(56,12,1)
(26,5,1)
(35,64,1)
(57,23,1)
(46,47,1)
(65,18,1)
(54,4,1)
(7,34,1)
(12,65,2)
(0,34,2)
(36,54,2)
(5,16,2)
(47,27,2)
(63,51,2)
(31,34,2)
(62,51,2)
(45,5,2)
(45,36,2)
(56,65,2)
(20,65,2)
(5,36,2)
(64,63,2)
(23,27,2)
(35,63,2)
(17,64,2)
(63,65,2)
(5,60,2)
(53,51,2)
(31,36,2)
(16,36,2)
(44,65,2)
(55,36,2)
(51,0,2)
(29,59,2)
(45,31,2)
(7,34,2)
(11,66,2)
(51,65,2)
(64,53,2)
(0,65,2)
(41,27,2)
(54,30,2)
(30,66,2)
(4,66,2)
(53,63,2)
(50,65,2)
(8,65,2)
(9,63,2)
(16,30,2)
(13,66,2)
(61,63,2)
(58,66,2)
(36,66,2)
(32,34,2)
(59,34,2)
(26,36,2)
(65,36,2)
(28,65,2)
(37,66,2)
(41,62,2)
(27,65,2)
(31,30,2)
(17,63,2)
(15,65,2)
(18,36,2)
(27,63,2)
(10,27,2)
(32,30,2)
(7,66,2)
(1,36,2)
(32,65,2)
(46,27,2)
(65,45,2)
(2,65,2)
(30,7,2)
(27,17,2)
(54,66,2)
(62,27,2)
(41,34,2)
(64,34,2)
(14,36,2)
(19,36,2)
(40,63,2)
(6,65,2)
(57,27,2)
-----------------------------------
(0,strlen(data)
(1,100)
(2,dataLen)
(3,)
(4,dataLen)
(5,(int)
(6,0)
(7,strlen(data)
(8,"fgets()
(9,dataLen)
(10,data)
(11,dataLen)
(12,dataLen)
(13,100)
(14,dataLen)
(15,dataLen)
(16,100-dataLen)
(17,data[dataLen-1] == \\\'\\\\n\\\')
(18,NULL)
(19,dataLen)
(20,printLine("fgets()
(21,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(22,if(badStatic)
(23,\\\'\\\\0\\\')
(24,)
(25,)
(26,stdin)
(27,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(28,\\\'\\\\0\\\')
(29,RET)
(30,dataLen = strlen(data)
(31,data+dataLen)
(32,data[dataLen])
(33,data)
(34,char * data)
(35,\\\'\\\\n\\\')
(36,100-dataLen > 1)
(37,1)
(38,)
(39,)
(40,1)
(41,data[dataLen-1])
(42,if (fgets(data+dataLen, (int)
(43,)
(44,data)
(45,fgets(data+dataLen, (int)
(46,1)
(47,dataLen)
(48,if (100-dataLen > 1)
(49,)
(50,data[dataLen] = \\\'\\\\0\\\')
(51,dataLen = strlen(data)
(52,dataLen)
(53,dataLen-1)
(54,100-dataLen)
(55,data)
(56,data)
(57,data[dataLen-1] = \\\'\\\\0\\\')
(58,data)
(59,return data;)
(60,int)
(61,data)
(62,dataLen-1)
(63,dataLen > 0)
(64,data[dataLen-1])
(65,fgets(data+dataLen, (int)
(66,badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^