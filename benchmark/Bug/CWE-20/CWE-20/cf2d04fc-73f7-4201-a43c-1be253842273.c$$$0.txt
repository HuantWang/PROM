-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(wchar_t));
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(wchar_t));        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memmove(data, source, 100*sizeof(wchar_t));
memmove(data, source, 100*sizeof(wchar_t))
memmove
memmove
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,15,0)
(17,18,0)
(28,31,0)
(40,41,0)
(38,28,0)
(11,22,0)
(24,39,0)
(5,31,0)
(4,23,0)
(18,39,0)
(15,37,0)
(28,32,0)
(4,33,0)
(2,19,0)
(38,19,0)
(28,18,0)
(29,18,0)
(20,5,0)
(33,4,0)
(32,42,0)
(16,28,0)
(37,15,0)
(14,32,0)
(22,41,0)
(35,39,0)
(27,28,0)
(22,9,0)
(21,32,0)
(19,38,0)
(12,17,0)
(5,18,0)
(15,9,0)
(8,18,0)
(7,42,0)
(0,29,0)
(9,15,0)
(15,18,0)
(26,31,0)
(6,17,0)
(30,38,0)
(9,22,0)
(10,32,0)
(31,42,0)
(5,32,0)
(29,32,0)
(25,42,0)
(41,22,0)
(1,33,0)
(34,31,0)
(28,38,0)
(29,31,0)
(3,31,1)
(5,18,1)
(11,8,1)
(5,20,1)
(1,17,1)
(19,2,1)
(8,3,1)
(20,21,1)
(0,5,1)
(21,28,1)
(33,1,1)
(29,0,1)
(22,41,1)
(29,31,1)
(13,29,1)
(35,4,1)
(40,11,1)
(29,18,1)
(17,12,1)
(28,18,1)
(35,17,1)
(16,27,1)
(18,15,1)
(5,31,1)
(4,33,1)
(28,38,1)
(17,18,1)
(15,9,1)
(9,22,1)
(41,40,1)
(2,30,1)
(31,34,1)
(15,37,1)
(6,18,1)
(38,19,1)
(27,14,1)
(12,6,1)
(30,16,1)
(28,31,1)
(34,26,1)
(14,35,1)
(14,3,1)
(11,3,2)
(9,3,2)
(12,3,2)
(41,3,2)
(17,3,2)
(28,31,2)
(28,18,2)
(15,3,2)
(6,3,2)
(22,41,2)
(17,18,2)
(15,37,2)
(5,31,2)
(18,15,2)
(5,18,2)
(15,9,2)
(8,3,2)
(4,33,2)
(40,3,2)
(9,22,2)
(1,17,2)
(29,31,2)
(35,3,2)
(33,17,2)
(28,38,2)
(18,3,2)
(22,3,2)
(29,18,2)
(38,19,2)
(4,17,2)
-----------------------------------
(0,data)
(1,1)
(2,wchar_t)
(3,GLOBAL_CONST_TRUE)
(4,exit(-1)
(5,printWLine(data)
(6,data)
(7,if(GLOBAL_CONST_TRUE)
(8,data)
(9,malloc(50*sizeof(wchar_t)
(10,source)
(11,50)
(12,NULL)
(13,RET)
(14,'\\\\0')
(15,(wchar_t *)
(16,source)
(17,data == NULL)
(18,data = (wchar_t *)
(19,sizeof(wchar_t)
(20,data)
(21,'\\\\0')
(22,50*sizeof(wchar_t)
(23,)
(24,if (data == NULL)
(25,data)
(26,data)
(27,data)
(28,memmove(data, source, 100*sizeof(wchar_t)
(29,free(data)
(30,100)
(31,data = NULL)
(32,)
(33,-1)
(34,NULL)
(35,'\\\\0')
(36,\'\\\\0\')
(37,wchar_t *)
(38,100*sizeof(wchar_t)
(39,)
(40,wchar_t)
(41,sizeof(wchar_t)
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^