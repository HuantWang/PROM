-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51b_badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51b_badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51b_badSink(twoIntsStruct * data)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51b_badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(28,24,0)
(27,38,0)
(33,35,0)
(19,31,0)
(38,9,0)
(15,17,0)
(7,10,0)
(11,41,0)
(30,34,0)
(17,34,0)
(24,16,0)
(42,7,0)
(17,15,0)
(40,30,0)
(12,9,0)
(1,10,0)
(39,9,0)
(3,19,0)
(19,16,0)
(4,22,0)
(2,16,0)
(8,34,0)
(31,19,0)
(6,35,0)
(35,34,0)
(36,41,0)
(22,26,0)
(22,35,0)
(35,22,0)
(29,30,0)
(21,1,0)
(13,19,0)
(9,38,0)
(23,31,0)
(37,14,0)
(32,26,0)
(31,7,0)
(34,18,0)
(41,16,0)
(26,22,0)
(15,14,0)
(14,15,0)
(38,1,0)
(35,5,0)
(14,5,0)
(9,16,0)
(25,14,0)
(0,16,0)
(15,14,1)
(16,2,1)
(27,9,1)
(36,24,1)
(36,16,1)
(7,42,1)
(22,26,1)
(32,4,1)
(25,35,1)
(4,33,1)
(17,15,1)
(24,16,1)
(12,7,1)
(23,19,1)
(13,3,1)
(6,41,1)
(35,5,1)
(31,23,1)
(19,16,1)
(19,13,1)
(38,9,1)
(31,19,1)
(41,11,1)
(9,39,1)
(24,28,1)
(1,21,1)
(33,6,1)
(38,27,1)
(2,0,1)
(39,12,1)
(3,41,1)
(21,38,1)
(35,22,1)
(42,31,1)
(26,32,1)
(14,5,1)
(20,17,1)
(28,1,1)
(11,36,1)
(41,16,1)
(9,16,1)
(37,25,1)
(14,37,1)
(15,14,2)
(41,41,2)
(38,9,2)
(31,41,2)
(35,5,2)
(17,15,2)
(11,41,2)
(24,16,2)
(42,41,2)
(23,41,2)
(24,41,2)
(28,41,2)
(21,41,2)
(19,16,2)
(22,26,2)
(9,16,2)
(13,41,2)
(14,5,2)
(36,41,2)
(9,41,2)
(39,41,2)
(41,16,2)
(38,41,2)
(7,41,2)
(19,41,2)
(12,41,2)
(3,41,2)
(35,22,2)
(27,41,2)
(1,41,2)
(31,19,2)
-----------------------------------
(0,i)
(1,source[i].intTwo = 0)
(2,0)
(3,source)
(4,100)
(5,twoIntsStruct * data)
(6,data)
(7,source[i].intOne = 0)
(8,source)
(9,source[i])
(10,)
(11,100)
(12,source)
(13,i)
(14,data[0])
(15,&data[0])
(16,i = 0)
(17,printStructLine(&data[0])
(18,)
(19,source[i])
(20,RET)
(21,0)
(22,100*sizeof(twoIntsStruct)
(23,intOne)
(24,i++)
(25,data)
(26,sizeof(twoIntsStruct)
(27,intTwo)
(28,i)
(29,i)
(30,)
(31,source[i].intOne)
(32,twoIntsStruct)
(33,source)
(34,)
(35,memmove(data, source, 100*sizeof(twoIntsStruct)
(36,i)
(37,0)
(38,source[i].intTwo)
(39,i)
(40,for (i = 0; i < 100; i++)
(41,i < 100)
(42,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^