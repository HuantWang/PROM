-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
58,59
58,60
58,61
60,61
62,63
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
102,104
103,104
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,61,64,69,71,76,77,80,81,84,90,92,95,97,101,104,105,109,111
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
74,75
74,76
78,79
78,80
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(52,22,0)
(37,27,0)
(19,0,0)
(38,14,0)
(11,22,0)
(0,46,0)
(10,35,0)
(28,38,0)
(35,12,0)
(25,38,0)
(6,12,0)
(4,11,0)
(13,18,0)
(5,19,0)
(11,48,0)
(18,25,0)
(53,19,0)
(40,3,0)
(5,3,0)
(25,18,0)
(19,5,0)
(45,11,0)
(27,48,0)
(3,40,0)
(32,38,0)
(42,29,0)
(7,46,0)
(21,48,0)
(50,35,0)
(52,48,0)
(1,27,0)
(23,21,0)
(30,14,0)
(22,52,0)
(43,31,0)
(10,38,0)
(29,42,0)
(47,12,0)
(39,0,0)
(14,12,0)
(34,0,0)
(18,35,0)
(10,0,0)
(54,29,0)
(3,5,0)
(42,49,0)
(11,0,0)
(11,35,0)
(17,3,0)
(18,0,0)
(26,48,0)
(22,51,0)
(0,19,0)
(16,39,0)
(15,40,0)
(41,35,0)
(44,39,0)
(2,10,0)
(33,48,0)
(36,52,0)
(20,52,0)
(52,31,0)
(24,18,0)
(19,53,0)
(31,14,0)
(13,27,1)
(24,13,1)
(8,10,1)
(10,0,1)
(52,48,1)
(37,1,1)
(52,31,1)
(9,35,1)
(10,2,1)
(25,18,1)
(41,50,1)
(33,31,1)
(43,42,1)
(19,53,1)
(48,26,1)
(1,48,1)
(26,33,1)
(34,9,1)
(43,9,1)
(44,0,1)
(21,48,1)
(18,24,1)
(39,0,1)
(2,25,1)
(29,54,1)
(17,34,1)
(11,35,1)
(23,22,1)
(27,37,1)
(43,39,1)
(16,44,1)
(11,48,1)
(0,19,1)
(54,39,1)
(35,41,1)
(45,4,1)
(4,27,1)
(1,21,1)
(5,3,1)
(18,35,1)
(20,36,1)
(36,11,1)
(19,5,1)
(27,48,1)
(15,17,1)
(11,0,1)
(10,35,1)
(18,0,1)
(11,45,1)
(22,52,1)
(39,16,1)
(52,20,1)
(3,40,1)
(42,29,1)
(31,43,1)
(40,15,1)
(21,23,1)
(18,0,2)
(19,53,2)
(11,35,2)
(27,27,2)
(27,48,2)
(3,40,2)
(54,39,2)
(45,27,2)
(19,5,2)
(21,27,2)
(42,29,2)
(5,9,2)
(39,9,2)
(37,27,2)
(11,27,2)
(52,48,2)
(16,9,2)
(29,39,2)
(10,0,2)
(23,27,2)
(3,9,2)
(20,27,2)
(34,9,2)
(52,27,2)
(10,35,2)
(25,18,2)
(4,27,2)
(19,9,2)
(11,0,2)
(18,35,2)
(17,9,2)
(21,48,2)
(36,27,2)
(22,52,2)
(0,9,2)
(39,0,2)
(1,27,2)
(44,9,2)
(5,3,2)
(40,9,2)
(15,9,2)
(0,19,2)
(52,31,2)
(22,27,2)
(42,39,2)
(11,48,2)
-----------------------------------
(0,data = (int *)
(1,i)
(2,data)
(3,50*sizeof(int)
(4,data)
(5,malloc(50*sizeof(int)
(6,if(staticReturnsTrue()
(7,if (data == NULL)
(8,RET)
(9,staticReturnsTrue()
(10,free(data)
(11,data[i])
(12,)
(13,data)
(14,)
(15,int)
(16,NULL)
(17,50)
(18,data[0])
(19,(int *)
(20,i)
(21,i++)
(22,data[i] = source[i])
(23,i)
(24,0)
(25,printIntLine(data[0])
(26,0)
(27,i < 100)
(28,for (i = 0; i < 100; i++)
(29,-1)
(30,source)
(31,source[100] = {0})
(32,i)
(33,i)
(34,data)
(35,data = NULL)
(36,source)
(37,100)
(38,)
(39,data == NULL)
(40,sizeof(int)
(41,NULL)
(42,exit(-1)
(43,source)
(44,data)
(45,i)
(46,)
(47,data)
(48,i = 0)
(49,)
(50,data)
(51,)
(52,source[i])
(53,int *)
(54,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^