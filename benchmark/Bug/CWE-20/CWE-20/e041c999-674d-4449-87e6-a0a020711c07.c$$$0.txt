-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate space for a null terminator */
        data = (char *)malloc((10+1)*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
69,70
69,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
93,94
93,95
93,96
95,96
96,97
96,98
99,100
100,101
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,61,63,66,70,71,74,75,79,81,86,88,92,94,97,98,101,105,107,109,113,115,119,121
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
56,57
56,58
67,68
67,69
69,70
69,71
77,78
77,79
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate space for a null terminator */        data = (char *)malloc((10+1)*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc((10+1)*sizeof(char));
data = (char *)malloc((10+1)*sizeof(char))
data
data
(char *)malloc((10+1)*sizeof(char))
char *
char
*
*
malloc((10+1)*sizeof(char))
malloc
malloc
(10+1)*sizeof(char)
(10+1)
10+1
10
1
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(0,23,0)
(2,11,0)
(22,29,0)
(45,51,0)
(48,30,0)
(4,38,0)
(54,40,0)
(38,3,0)
(21,47,0)
(20,55,0)
(51,45,0)
(44,50,0)
(25,40,0)
(33,40,0)
(46,42,0)
(18,49,0)
(29,22,0)
(19,4,0)
(31,44,0)
(42,7,0)
(23,0,0)
(41,0,0)
(22,40,0)
(32,25,0)
(55,40,0)
(17,3,0)
(34,11,0)
(8,45,0)
(55,38,0)
(51,30,0)
(36,48,0)
(16,17,0)
(54,38,0)
(45,8,0)
(30,49,0)
(55,47,0)
(26,21,0)
(43,38,0)
(5,23,0)
(24,22,0)
(53,21,0)
(35,56,0)
(7,42,0)
(29,23,0)
(52,47,0)
(40,56,0)
(11,47,0)
(12,3,0)
(50,44,0)
(47,45,0)
(21,40,0)
(49,30,0)
(54,47,0)
(22,24,0)
(57,3,0)
(10,25,0)
(13,4,0)
(45,47,0)
(50,28,0)
(21,38,0)
(21,4,0)
(40,22,0)
(30,48,0)
(23,29,0)
(39,17,0)
(30,51,0)
(7,15,0)
(47,37,0)
(27,48,0)
(14,54,0)
(1,37,0)
(53,4,1)
(33,9,1)
(19,11,1)
(45,51,1)
(31,11,1)
(22,24,1)
(19,25,1)
(41,5,1)
(40,22,1)
(4,13,1)
(34,47,1)
(27,52,1)
(19,7,1)
(29,23,1)
(39,16,1)
(11,2,1)
(20,21,1)
(14,55,1)
(52,9,1)
(55,40,1)
(55,20,1)
(25,10,1)
(26,53,1)
(11,47,1)
(55,47,1)
(23,0,1)
(47,45,1)
(10,32,1)
(30,49,1)
(9,17,1)
(22,29,1)
(21,40,1)
(30,48,1)
(21,26,1)
(48,36,1)
(50,44,1)
(49,18,1)
(44,31,1)
(21,47,1)
(21,4,1)
(19,50,1)
(13,19,1)
(54,47,1)
(51,30,1)
(25,40,1)
(6,54,1)
(42,46,1)
(36,27,1)
(32,40,1)
(5,33,1)
(54,40,1)
(45,8,1)
(18,48,1)
(46,25,1)
(17,39,1)
(54,14,1)
(7,42,1)
(2,34,1)
(0,41,1)
(11,47,2)
(55,40,2)
(18,9,2)
(21,4,2)
(7,42,2)
(25,40,2)
(2,9,2)
(27,9,2)
(52,9,2)
(45,9,2)
(33,9,2)
(23,0,2)
(32,9,2)
(45,8,2)
(48,9,2)
(34,9,2)
(54,47,2)
(49,9,2)
(47,45,2)
(36,9,2)
(45,51,2)
(40,22,2)
(51,9,2)
(31,11,2)
(23,9,2)
(29,23,2)
(21,47,2)
(40,9,2)
(10,9,2)
(30,48,2)
(54,40,2)
(30,49,2)
(47,9,2)
(51,30,2)
(50,44,2)
(25,9,2)
(22,24,2)
(55,47,2)
(11,9,2)
(22,9,2)
(30,9,2)
(46,25,2)
(21,40,2)
(42,25,2)
(44,11,2)
(0,9,2)
(22,29,2)
(50,11,2)
(41,9,2)
(7,25,2)
(5,9,2)
(29,9,2)
-----------------------------------
(0,sizeof(char)
(1,if (data == NULL)
(2,NULL)
(3,)
(4,source[10+1] = SRC_STRING)
(5,10)
(6,RET)
(7,exit(-1)
(8,char *)
(9,globalReturnsTrueOrFalse()
(10,NULL)
(11,data == NULL)
(12,data)
(13,SRC_STRING)
(14,data)
(15,)
(16,data)
(17,data = NULL)
(18,char)
(19,source)
(20,data)
(21,strcpy(data, source)
(22,(char *)
(23,10*sizeof(char)
(24,char *)
(25,data == NULL)
(26,source)
(27,10)
(28,)
(29,malloc(10*sizeof(char)
(30,(10+1)
(31,1)
(32,data)
(33,data)
(34,data)
(35,if (data == NULL)
(36,1)
(37,)
(38,)
(39,NULL)
(40,data = (char *)
(41,char)
(42,-1)
(43,source)
(44,-1)
(45,(char *)
(46,1)
(47,data = (char *)
(48,10+1)
(49,sizeof(char)
(50,exit(-1)
(51,malloc((10+1)
(52,data)
(53,data)
(54,free(data)
(55,printLine(data)
(56,)
(57,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^