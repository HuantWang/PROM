-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad()
{
    char * data;
    char * dataArray[5];
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
36,38
36,39
36,40
36,41
36,42
36,43
37,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
76,88
76,89
76,90
77,78
78,79
78,80
79,80
81,82
81,83
81,84
81,85
82,83
84,85
86,87
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
142,144
143,144
143,145
144,145
144,146
144,147
144,148
145,146
147,148
149,150
149,151
150,151
150,152
151,152
153,154
155,156
156,157
158,159
159,160
160,161
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
170,175
171,172
173,174
175,176
175,177
176,177
176,178
178,179
180,181
181,182
181,183
182,183
184,185
186,187
186,188
187,188
188,189
188,190
191,192
192,193
192,194
193,194
193,195
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
217,219
218,219
220,221
220,222
221,222
223,224
224,225
224,226
228,229
229,230
229,231
230,231
232,233
232,234
232,235
233,234
235,236
238,239
238,240
239,240
241,242
242,243
243,244
243,245
244,245
245,246
248,249
249,250
249,251
250,251
252,253
252,254
252,255
253,254
255,256
258,259
258,260
259,260
261,262
262,263
263,264
263,265
264,265
265,266
269,270
269,271
270,271
270,272
271,272
273,274
275,276
276,277
277,278
277,279
278,279
280,281
282,283
283,284
283,285
284,285
284,286
285,286
288,289
290,291
291,292
291,293
292,293
294,295
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,29,33,35,39,41,45,47,50,52,53,57,59,62,66,68,72,74,80,83,85,87,89,93,95,97,101,104,105,109,114,115,117,123,124,125,128,130,135,136,139,141,146,148,152,154,157,161,163,165,169,172,174,177,179,183,185,189,190,194,196,197,198,203,205,208,209,211,216,219,222,225,226,227,231,234,236,237,240,246,247,251,254,256,257,260,266,267,268,272,274,279,281,286,287,289,293,295
-----computeFrom-----
31,32
31,33
78,79
78,80
91,92
91,93
111,112
111,113
119,120
119,121
132,133
132,134
143,144
143,145
167,168
167,169
181,182
181,183
186,187
186,188
192,193
192,194
193,194
193,195
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
217,218
217,219
220,221
220,222
229,230
229,231
243,244
243,245
249,250
249,251
263,264
263,265
270,271
270,272
283,284
283,285
-----guardedBy-----
272,281
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad(){    char * data;    char * dataArray[5];    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray);}
void
CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad()
CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad
{    char * data;    char * dataArray[5];    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray);}
char * data;
char * data;
char
* data
*
data
char * dataArray[5];
char * dataArray[5];
char
* dataArray[5]
*
dataArray
[5]
5
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray);
CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray)
CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink
CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink
dataArray
dataArray
-----joern-----
(130,81,0)
(135,81,0)
(124,68,0)
(46,184,0)
(109,19,0)
(114,68,0)
(161,27,0)
(103,146,0)
(37,94,0)
(140,98,0)
(138,9,0)
(10,28,0)
(9,184,0)
(132,117,0)
(173,135,0)
(67,35,0)
(19,94,0)
(180,165,0)
(84,175,0)
(141,165,0)
(69,65,0)
(174,14,0)
(175,124,0)
(13,147,0)
(159,43,0)
(118,73,0)
(119,38,0)
(102,165,0)
(74,146,0)
(44,184,0)
(184,142,0)
(78,3,0)
(106,1,0)
(59,152,0)
(57,58,0)
(90,184,0)
(79,17,0)
(94,127,0)
(129,88,0)
(19,109,0)
(121,165,0)
(167,124,0)
(94,37,0)
(85,73,0)
(40,144,0)
(168,73,0)
(41,148,0)
(184,82,0)
(127,94,0)
(104,165,0)
(93,146,0)
(177,16,0)
(0,28,0)
(151,58,0)
(75,78,0)
(175,184,0)
(137,162,0)
(101,73,0)
(88,63,0)
(47,82,0)
(54,27,0)
(146,74,0)
(6,9,0)
(129,127,0)
(124,175,0)
(179,129,0)
(87,159,0)
(125,129,0)
(45,113,0)
(131,59,0)
(30,152,0)
(152,146,0)
(33,104,0)
(105,73,0)
(94,81,0)
(90,68,0)
(22,63,0)
(114,19,0)
(158,93,0)
(28,0,0)
(27,161,0)
(8,132,0)
(4,73,0)
(61,1,0)
(147,80,0)
(26,73,0)
(107,142,0)
(127,165,0)
(147,13,0)
(148,165,0)
(115,63,0)
(73,142,0)
(48,80,0)
(56,165,0)
(60,151,0)
(186,49,0)
(63,88,0)
(32,121,0)
(162,148,0)
(116,73,0)
(146,152,0)
(134,165,0)
(55,138,0)
(86,134,0)
(63,127,0)
(81,1,0)
(11,65,0)
(80,147,0)
(16,37,0)
(68,73,0)
(58,151,0)
(65,11,0)
(0,134,0)
(88,129,0)
(124,65,0)
(58,57,0)
(117,142,0)
(169,94,0)
(94,19,0)
(154,165,0)
(31,164,0)
(81,165,0)
(175,121,0)
(146,81,0)
(172,81,0)
(166,58,0)
(65,127,0)
(113,165,0)
(52,49,0)
(92,68,0)
(65,124,0)
(104,17,0)
(12,13,0)
(55,119,0)
(126,82,0)
(68,90,0)
(37,161,0)
(77,132,0)
(114,184,0)
(83,0,0)
(139,127,0)
(64,117,0)
(3,165,0)
(9,138,0)
(143,142,0)
(152,30,0)
(49,26,0)
(171,55,0)
(95,71,0)
(18,28,0)
(150,90,0)
(5,1,0)
(1,81,0)
(108,26,0)
(146,93,0)
(120,111,0)
(149,172,0)
(49,81,0)
(62,142,0)
(24,14,0)
(133,17,0)
(138,165,0)
(152,59,0)
(2,26,0)
(99,73,0)
(82,142,0)
(161,37,0)
(43,100,0)
(66,162,0)
(185,101,0)
(27,68,0)
(21,114,0)
(39,172,0)
(14,3,0)
(50,113,0)
(53,161,0)
(34,43,0)
(145,164,0)
(163,74,0)
(183,142,0)
(70,73,0)
(3,78,0)
(135,26,0)
(36,107,0)
(112,138,0)
(110,94,0)
(76,165,0)
(135,178,0)
(17,104,0)
(17,184,0)
(15,9,0)
(160,57,0)
(117,184,0)
(37,16,0)
(20,73,0)
(96,101,0)
(159,104,0)
(19,114,0)
(58,165,0)
(23,114,0)
(147,164,0)
(156,73,0)
(134,86,0)
(153,11,0)
(7,86,0)
(164,147,0)
(123,119,0)
(89,27,0)
(179,125,1)
(11,153,1)
(37,16,1)
(17,79,1)
(129,127,1)
(61,5,1)
(27,68,1)
(12,164,1)
(94,81,1)
(50,80,1)
(52,140,1)
(6,112,1)
(135,81,1)
(152,30,1)
(19,109,1)
(83,28,1)
(90,184,1)
(1,106,1)
(137,66,1)
(146,93,1)
(121,32,1)
(79,133,1)
(95,80,1)
(3,78,1)
(114,21,1)
(147,164,1)
(112,121,1)
(10,148,1)
(55,138,1)
(17,184,1)
(146,81,1)
(22,115,1)
(185,96,1)
(94,169,1)
(8,176,1)
(55,171,1)
(68,90,1)
(33,25,1)
(74,163,1)
(67,176,1)
(15,6,1)
(172,39,1)
(159,104,1)
(124,65,1)
(172,81,1)
(92,26,1)
(18,10,1)
(88,63,1)
(14,174,1)
(151,60,1)
(113,45,1)
(65,11,1)
(138,9,1)
(158,152,1)
(63,127,1)
(49,26,1)
(2,108,1)
(33,119,1)
(159,87,1)
(101,185,1)
(46,44,1)
(175,124,1)
(107,36,1)
(16,177,1)
(58,151,1)
(115,129,1)
(133,33,1)
(24,134,1)
(9,184,1)
(176,135,1)
(152,59,1)
(89,53,1)
(123,55,1)
(171,25,1)
(161,27,1)
(80,147,1)
(48,147,1)
(110,139,1)
(147,13,1)
(8,67,1)
(74,146,1)
(59,131,1)
(134,86,1)
(174,24,1)
(27,54,1)
(52,120,1)
(164,31,1)
(90,150,1)
(145,170,1)
(25,138,1)
(54,89,1)
(94,37,1)
(104,17,1)
(167,84,1)
(7,0,1)
(78,75,1)
(150,92,1)
(160,166,1)
(124,68,1)
(173,49,1)
(184,82,1)
(186,52,1)
(120,172,1)
(176,49,1)
(52,170,1)
(153,69,1)
(13,12,1)
(149,81,1)
(184,46,1)
(145,68,1)
(23,110,1)
(84,88,1)
(31,145,1)
(132,77,1)
(170,43,1)
(49,186,1)
(0,83,1)
(129,179,1)
(77,8,1)
(169,37,1)
(28,18,1)
(52,40,1)
(65,127,1)
(80,48,1)
(114,68,1)
(127,94,1)
(135,26,1)
(64,132,1)
(66,58,1)
(58,57,1)
(41,162,1)
(93,158,1)
(94,19,1)
(52,95,1)
(53,16,1)
(57,160,1)
(148,41,1)
(177,19,1)
(19,114,1)
(163,146,1)
(60,172,1)
(130,113,1)
(86,7,1)
(9,15,1)
(140,88,1)
(49,81,1)
(39,149,1)
(34,159,1)
(106,61,1)
(170,182,1)
(162,137,1)
(36,117,1)
(103,3,1)
(40,74,1)
(182,104,1)
(42,107,1)
(126,47,1)
(119,123,1)
(43,34,1)
(139,74,1)
(63,22,1)
(166,151,1)
(96,184,1)
(114,184,1)
(37,161,1)
(69,167,1)
(5,130,1)
(146,152,1)
(45,50,1)
(26,2,1)
(32,175,1)
(75,14,1)
(108,101,1)
(125,127,1)
(117,64,1)
(21,23,1)
(0,28,1)
(131,103,1)
(175,184,1)
(117,184,1)
(88,129,1)
(81,1,1)
(44,82,1)
(82,126,1)
(135,173,1)
(87,182,1)
(88,74,2)
(21,74,2)
(184,82,2)
(49,81,2)
(153,88,2)
(18,172,2)
(25,88,2)
(125,74,2)
(81,80,2)
(0,28,2)
(55,25,2)
(162,172,2)
(40,74,2)
(74,146,2)
(146,81,2)
(164,170,2)
(179,74,2)
(131,172,2)
(134,172,2)
(124,65,2)
(45,80,2)
(88,63,2)
(37,161,2)
(135,49,2)
(11,88,2)
(61,80,2)
(151,172,2)
(48,170,2)
(147,170,2)
(74,172,2)
(12,170,2)
(3,78,2)
(172,80,2)
(27,74,2)
(3,172,2)
(161,74,2)
(6,88,2)
(78,172,2)
(83,172,2)
(152,172,2)
(94,19,2)
(147,164,2)
(80,170,2)
(33,88,2)
(149,80,2)
(174,172,2)
(9,184,2)
(28,172,2)
(138,9,2)
(57,172,2)
(15,88,2)
(177,74,2)
(160,172,2)
(89,74,2)
(148,172,2)
(7,172,2)
(169,74,2)
(119,25,2)
(137,172,2)
(68,90,2)
(175,124,2)
(13,170,2)
(114,184,2)
(135,26,2)
(0,172,2)
(158,172,2)
(171,25,2)
(1,80,2)
(94,37,2)
(37,74,2)
(139,74,2)
(167,88,2)
(16,74,2)
(152,30,2)
(159,182,2)
(88,129,2)
(175,184,2)
(133,88,2)
(163,172,2)
(87,182,2)
(19,74,2)
(134,86,2)
(114,74,2)
(50,80,2)
(120,172,2)
(146,93,2)
(110,74,2)
(65,11,2)
(130,80,2)
(27,68,2)
(59,172,2)
(9,88,2)
(80,147,2)
(166,172,2)
(94,81,2)
(23,74,2)
(138,88,2)
(58,151,2)
(79,88,2)
(115,129,2)
(147,13,2)
(65,127,2)
(124,88,2)
(112,88,2)
(124,68,2)
(145,170,2)
(49,26,2)
(173,49,2)
(17,184,2)
(95,80,2)
(86,172,2)
(67,176,2)
(146,172,2)
(39,80,2)
(75,172,2)
(113,80,2)
(32,88,2)
(127,94,2)
(159,104,2)
(65,88,2)
(106,80,2)
(90,184,2)
(170,88,2)
(135,81,2)
(63,127,2)
(5,80,2)
(140,88,2)
(94,74,2)
(69,88,2)
(117,184,2)
(66,172,2)
(17,88,2)
(55,138,2)
(22,129,2)
(10,172,2)
(127,74,2)
(19,109,2)
(114,68,2)
(182,88,2)
(43,182,2)
(37,16,2)
(104,88,2)
(53,74,2)
(175,88,2)
(63,129,2)
(172,81,2)
(58,57,2)
(161,27,2)
(14,172,2)
(146,152,2)
(24,172,2)
(31,170,2)
(103,172,2)
(19,114,2)
(41,172,2)
(123,25,2)
(58,172,2)
(60,172,2)
(121,88,2)
(84,88,2)
(104,17,2)
(93,172,2)
(129,127,2)
(129,74,2)
(152,59,2)
(54,74,2)
(34,182,2)
(81,1,2)
-----------------------------------
(0,service.sin_addr.s_addr)
(1,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(2,INVALID_SOCKET)
(3,service.sin_port = htons(TCP_PORT)
(4,do)
(5,AF_INET)
(6,data)
(7,IP_ADDRESS)
(8,dataArray)
(9,strchr(data, \'\\\\r\')
(10,service)
(11,sizeof(char)
(12,wsaData)
(13,&wsaData)
(14,service.sin_port)
(15,'\\\\r')
(16,sizeof(char)
(17,strchr(data, \'\\\\n\')
(18,sin_addr)
(19,(char *)
(20,wsaDataInit)
(21,dataLen)
(22,0)
(23,data)
(24,service)
(25,replace)
(26,connectSocket = INVALID_SOCKET)
(27,dataLen - 1)
(28,service.sin_addr)
(29,strchr(data, '\\\\r')
(30,struct sockaddr*)
(31,2)
(32,\'\\\\0\')
(33,replace)
(34,\'\\\\0\')
(35,)
(36,dataArray)
(37,sizeof(char)
(38,)
(39,INVALID_SOCKET)
(40,break;)
(41,AF_INET)
(42,RET)
(43,*replace = \'\\\\0\')
(44,data)
(45,1)
(46,dataBuffer)
(47,dataBuffer)
(48,NO_ERROR)
(49,connectSocket != INVALID_SOCKET)
(50,wsaDataInit)
(51,'\\\\0')
(52,connectSocket)
(53,100)
(54,1)
(55,*replace)
(56,if (WSAStartup(MAKEWORD(2,2)
(57,sizeof(service)
(58,memset(&service, 0, sizeof(service)
(59,&service)
(60,service)
(61,SOCK_STREAM)
(62,dataArray)
(63,recvResult == 0)
(64,data)
(65,recvResult / sizeof(char)
(66,service)
(67,WSACleanup()
(68,dataLen = strlen(data)
(69,recvResult)
(70,recvResult)
(71,)
(72,*replace = '\\\\0')
(73,)
(74,connect(connectSocket, (struct sockaddr*)
(75,TCP_PORT)
(76,if (replace)
(77,2)
(78,htons(TCP_PORT)
(79,\'\\\\n\')
(80,WSAStartup(MAKEWORD(2,2)
(81,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(82,dataBuffer[100] = COMMAND_ARG2)
(83,s_addr)
(84,data)
(85,dataLen)
(86,inet_addr(IP_ADDRESS)
(87,replace)
(88,recvResult == SOCKET_ERROR || recvResult == 0)
(89,dataLen)
(90,strlen(data)
(91,\'\\\\r\')
(92,dataLen)
(93,sizeof(service)
(94,recv(connectSocket, (char *)
(95,break;)
(96,wsaDataInit)
(97,strchr(data, '\\\\n')
(98,)
(99,if (connectSocket != INVALID_SOCKET)
(100,)
(101,wsaDataInit = 0)
(102,if (connectSocket == INVALID_SOCKET)
(103,connectSocket)
(104,replace = strchr(data, '\\\\n')
(105,service)
(106,IPPROTO_TCP)
(107,CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(dataArray)
(108,connectSocket)
(109,char *)
(110,connectSocket)
(111,)
(112,replace)
(113,wsaDataInit = 1)
(114,data + dataLen)
(115,recvResult)
(116,if (wsaDataInit)
(117,dataArray[2] = data)
(118,wsaData)
(119,*replace = \'\\\\0\')
(120,break;)
(121,data[dataLen + recvResult / sizeof(char)
(122,*replace = '\\\\0')
(123,\'\\\\0\')
(124,dataLen + recvResult / sizeof(char)
(125,recvResult)
(126,COMMAND_ARG2)
(127,recvResult = recv(connectSocket, (char *)
(128,replace = strchr(data, \'\\\\n\')
(129,recvResult == SOCKET_ERROR)
(130,connectSocket)
(131,service)
(132,dataArray[2])
(133,data)
(134,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(135,CLOSE_SOCKET(connectSocket)
(136,'\\\\n')
(137,sin_family)
(138,replace = strchr(data, \'\\\\r\')
(139,recvResult)
(140,break;)
(141,if (connect(connectSocket, (struct sockaddr*)
(142,)
(143,data)
(144,)
(145,2)
(146,connect(connectSocket, (struct sockaddr*)
(147,WSAStartup(MAKEWORD(2,2)
(148,service.sin_family = AF_INET)
(149,connectSocket)
(150,data)
(151,&service)
(152,(struct sockaddr*)
(153,char)
(154,if (replace)
(155,'\\\\0')
(156,connectSocket)
(157,'\\\\0')
(158,service)
(159,*replace)
(160,service)
(161,100 - dataLen - 1)
(162,service.sin_family)
(163,SOCKET_ERROR)
(164,MAKEWORD(2,2)
(165,)
(166,0)
(167,dataLen)
(168,replace)
(169,0)
(170,0)
(171,replace)
(172,connectSocket == INVALID_SOCKET)
(173,connectSocket)
(174,sin_port)
(175,data[dataLen + recvResult / sizeof(char)
(176,wsaDataInit)
(177,char)
(178,)
(179,SOCKET_ERROR)
(180,if (recvResult == SOCKET_ERROR || recvResult == 0)
(181,replace = strchr(data, '\\\\r')
(182,replace)
(183,dataBuffer)
(184,data = dataBuffer)
(185,0)
(186,INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^