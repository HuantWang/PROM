-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_11_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            char *replace;
            SOCKET connectSocket = INVALID_SOCKET;
            size_t dataLen = strlen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* Abort on error or the connection was closed */
                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(char)] = '\0';
                /* Eliminate CRLF */
                replace = strchr(data, '\r');
                if (replace)
                {
                    *replace = '\0';
                }
                replace = strchr(data, '\n');
                if (replace)
                {
                    *replace = '\0';
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
33,36
33,37
33,38
33,39
33,40
34,35
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
73,76
73,77
73,78
73,79
73,80
73,81
73,82
73,83
73,84
73,85
73,86
73,87
74,75
75,76
75,77
76,77
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
95,96
96,97
96,98
96,99
96,100
97,98
99,100
100,101
103,104
104,105
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
141,143
141,144
141,145
142,143
144,145
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
155,156
156,157
157,158
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
167,170
167,171
167,172
168,169
170,171
172,173
172,174
173,174
173,175
175,176
177,178
178,179
178,180
179,180
181,182
183,184
183,185
184,185
185,186
185,187
188,189
189,190
189,191
190,191
190,192
192,193
196,197
196,198
197,198
197,199
198,199
198,200
199,200
201,202
203,204
203,205
204,205
207,208
209,210
210,211
210,212
211,212
211,213
212,213
214,215
214,216
215,216
217,218
217,219
218,219
220,221
221,222
221,223
225,226
226,227
226,228
227,228
229,230
229,231
229,232
230,231
232,233
235,236
235,237
236,237
238,239
239,240
240,241
240,242
241,242
242,243
245,246
246,247
246,248
247,248
249,250
249,251
249,252
250,251
252,253
255,256
255,257
256,257
258,259
259,260
260,261
260,262
261,262
262,263
266,267
266,268
267,268
267,269
268,269
270,271
272,273
273,274
274,275
274,276
275,276
277,278
279,280
279,281
280,281
281,282
281,283
283,284
283,285
283,286
283,287
287,288
288,289
288,290
288,291
288,292
289,290
291,292
293,294
295,296
297,298
298,299
298,300
298,301
298,302
299,300
301,302
303,304
305,306
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,42,44,47,49,50,54,56,59,63,65,69,71,77,80,82,84,86,90,92,94,98,101,102,106,111,112,114,120,121,122,125,127,132,133,136,138,143,145,149,151,154,158,160,162,166,169,171,174,176,180,182,186,187,191,193,194,195,200,202,205,206,208,213,216,219,222,223,224,228,231,233,234,237,243,244,248,251,253,254,257,263,264,265,269,271,276,278,282,284,285,286,290,292,294,296,300,302,304,306
-----computeFrom-----
23,24
23,25
75,76
75,77
88,89
88,90
108,109
108,110
116,117
116,118
129,130
129,131
140,141
140,142
164,165
164,166
178,179
178,180
183,184
183,185
189,190
189,191
190,191
190,192
197,198
197,199
198,199
198,200
203,204
203,205
210,211
210,212
214,215
214,216
217,218
217,219
226,227
226,228
240,241
240,242
246,247
246,248
260,261
260,262
267,268
267,269
-----guardedBy-----
269,278
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_11_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_11_bad()
CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_11_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(55,174,0)
(106,103,0)
(90,21,0)
(85,116,0)
(24,133,0)
(154,81,0)
(68,183,0)
(63,125,0)
(126,54,0)
(56,189,0)
(111,164,0)
(163,174,0)
(117,115,0)
(189,174,0)
(145,88,0)
(21,90,0)
(148,54,0)
(165,111,0)
(97,146,0)
(15,164,0)
(26,151,0)
(154,76,0)
(96,37,0)
(133,161,0)
(160,81,0)
(2,110,0)
(170,23,0)
(18,54,0)
(162,42,0)
(166,26,0)
(40,133,0)
(153,154,0)
(97,174,0)
(61,0,0)
(0,112,0)
(187,12,0)
(107,164,0)
(62,54,0)
(53,21,0)
(150,143,0)
(127,189,0)
(173,37,0)
(130,11,0)
(171,144,0)
(20,137,0)
(154,153,0)
(144,164,0)
(146,97,0)
(116,12,0)
(50,161,0)
(38,145,0)
(9,115,0)
(33,137,0)
(188,189,0)
(36,104,0)
(71,0,0)
(6,54,0)
(25,1,0)
(146,23,0)
(137,111,0)
(52,183,0)
(41,120,0)
(142,12,0)
(88,68,0)
(166,31,0)
(57,12,0)
(130,115,0)
(132,54,0)
(120,115,0)
(68,88,0)
(44,31,0)
(84,54,0)
(39,130,0)
(128,147,0)
(161,50,0)
(99,9,0)
(94,153,0)
(72,135,0)
(121,117,0)
(103,144,0)
(145,125,0)
(22,118,0)
(80,117,0)
(113,123,0)
(146,124,0)
(125,12,0)
(184,14,0)
(17,90,0)
(51,145,0)
(8,186,0)
(137,20,0)
(138,9,0)
(114,86,0)
(180,12,0)
(136,40,0)
(23,146,0)
(104,184,0)
(156,12,0)
(34,103,0)
(133,40,0)
(166,98,0)
(182,50,0)
(29,166,0)
(31,166,0)
(64,47,0)
(4,153,0)
(76,154,0)
(168,63,0)
(183,68,0)
(125,63,0)
(155,104,0)
(37,96,0)
(135,144,0)
(87,151,0)
(20,54,0)
(1,2,0)
(147,118,0)
(42,37,0)
(158,66,0)
(174,54,0)
(185,134,0)
(68,97,0)
(143,18,0)
(79,164,0)
(120,11,0)
(174,97,0)
(48,23,0)
(71,20,0)
(108,14,0)
(21,54,0)
(35,120,0)
(93,54,0)
(23,125,0)
(97,68,0)
(14,184,0)
(130,30,0)
(122,26,0)
(92,12,0)
(10,11,0)
(59,116,0)
(172,55,0)
(149,123,0)
(115,9,0)
(63,111,0)
(37,42,0)
(123,164,0)
(177,12,0)
(118,148,0)
(161,54,0)
(67,54,0)
(169,97,0)
(60,18,0)
(139,12,0)
(91,103,0)
(11,12,0)
(175,9,0)
(26,166,0)
(89,90,0)
(74,115,0)
(167,11,0)
(65,96,0)
(111,123,0)
(90,111,0)
(32,97,0)
(69,98,0)
(151,26,0)
(166,115,0)
(115,54,0)
(147,125,0)
(118,147,0)
(49,137,0)
(189,56,0)
(19,88,0)
(23,111,0)
(58,125,0)
(186,174,0)
(27,126,0)
(179,71,0)
(77,157,0)
(26,122,0)
(81,154,0)
(88,145,0)
(82,143,0)
(13,55,0)
(98,166,0)
(1,21,0)
(186,47,0)
(56,55,0)
(147,186,0)
(119,148,0)
(184,54,0)
(16,2,0)
(186,147,0)
(55,56,0)
(101,40,0)
(78,76,0)
(118,111,0)
(12,45,0)
(102,111,0)
(103,135,0)
(181,20,0)
(47,186,0)
(46,12,0)
(97,115,0)
(73,126,0)
(176,12,0)
(124,146,0)
(37,54,0)
(140,83,0)
(104,36,1)
(82,37,1)
(126,27,1)
(147,125,1)
(0,61,1)
(102,123,1)
(26,151,1)
(133,40,1)
(76,78,1)
(58,11,1)
(90,111,1)
(1,25,1)
(20,137,1)
(186,47,1)
(56,189,1)
(133,24,1)
(9,138,1)
(97,115,1)
(145,38,1)
(74,126,1)
(49,33,1)
(152,75,1)
(35,152,1)
(69,26,1)
(166,115,1)
(29,184,1)
(52,146,1)
(168,58,1)
(189,174,1)
(120,41,1)
(60,143,1)
(146,124,1)
(160,153,1)
(136,18,1)
(5,103,1)
(117,121,1)
(3,111,1)
(4,152,1)
(17,89,1)
(158,56,1)
(150,82,1)
(10,116,1)
(76,154,1)
(71,179,1)
(21,90,1)
(188,174,1)
(155,161,1)
(96,65,1)
(183,52,1)
(116,85,1)
(72,105,1)
(39,120,1)
(119,118,1)
(55,174,1)
(121,80,1)
(59,3,1)
(182,133,1)
(63,111,1)
(91,34,1)
(166,26,1)
(51,19,1)
(73,76,1)
(151,87,1)
(148,119,1)
(75,20,1)
(152,0,1)
(127,188,1)
(145,125,1)
(35,185,1)
(113,149,1)
(170,32,1)
(18,60,1)
(64,8,1)
(68,183,1)
(2,16,1)
(97,169,1)
(41,35,1)
(105,120,1)
(154,153,1)
(181,7,1)
(161,50,1)
(14,108,1)
(37,96,1)
(16,1,1)
(63,168,1)
(137,111,1)
(85,59,1)
(47,64,1)
(140,76,1)
(130,115,1)
(7,21,1)
(65,117,1)
(179,75,1)
(72,114,1)
(185,31,1)
(25,7,1)
(101,136,1)
(189,127,1)
(1,21,1)
(35,140,1)
(68,88,1)
(34,106,1)
(106,135,1)
(137,49,1)
(50,182,1)
(8,128,1)
(111,123,1)
(99,175,1)
(166,98,1)
(22,56,1)
(97,146,1)
(162,173,1)
(36,155,1)
(13,189,1)
(154,81,1)
(55,172,1)
(31,166,1)
(184,14,1)
(90,17,1)
(98,69,1)
(147,186,1)
(38,51,1)
(165,102,1)
(53,148,1)
(115,9,1)
(138,99,1)
(117,115,1)
(103,135,1)
(33,181,1)
(169,68,1)
(186,174,1)
(19,183,1)
(37,42,1)
(163,31,1)
(40,101,1)
(94,4,1)
(56,55,1)
(172,13,1)
(125,63,1)
(72,3,1)
(26,122,1)
(23,48,1)
(23,125,1)
(118,111,1)
(89,53,1)
(143,150,1)
(71,20,1)
(97,68,1)
(24,40,1)
(31,44,1)
(80,115,1)
(118,147,1)
(48,170,1)
(11,167,1)
(32,163,1)
(105,130,1)
(61,71,1)
(153,94,1)
(103,91,1)
(78,154,1)
(167,10,1)
(120,11,1)
(27,73,1)
(44,166,1)
(35,158,1)
(175,74,1)
(87,29,1)
(174,97,1)
(81,160,1)
(130,11,1)
(146,23,1)
(181,2,1)
(130,39,1)
(120,115,1)
(23,111,1)
(42,162,1)
(123,113,1)
(173,96,1)
(108,104,1)
(77,117,1)
(114,105,1)
(35,77,1)
(128,22,1)
(135,72,1)
(4,125,1)
(111,165,1)
(88,145,1)
(183,31,2)
(8,56,2)
(40,117,2)
(36,117,2)
(17,56,2)
(0,75,2)
(96,117,2)
(37,42,2)
(175,76,2)
(138,76,2)
(146,124,2)
(97,31,2)
(56,31,2)
(55,174,2)
(44,117,2)
(4,3,2)
(14,117,2)
(56,55,2)
(117,76,2)
(26,122,2)
(63,111,2)
(126,76,2)
(10,3,2)
(81,152,2)
(186,47,2)
(120,11,2)
(161,50,2)
(68,31,2)
(60,117,2)
(116,3,2)
(41,3,2)
(76,3,2)
(76,152,2)
(29,117,2)
(42,117,2)
(61,75,2)
(160,152,2)
(51,31,2)
(33,56,2)
(140,76,2)
(90,111,2)
(153,3,2)
(130,115,2)
(146,31,2)
(101,117,2)
(48,31,2)
(108,117,2)
(26,117,2)
(21,90,2)
(167,3,2)
(186,174,2)
(78,3,2)
(75,56,2)
(121,76,2)
(23,125,2)
(133,117,2)
(53,56,2)
(166,98,2)
(118,56,2)
(32,31,2)
(87,117,2)
(145,125,2)
(117,115,2)
(184,14,2)
(182,117,2)
(31,117,2)
(155,117,2)
(137,56,2)
(94,152,2)
(68,183,2)
(174,97,2)
(160,3,2)
(146,23,2)
(166,115,2)
(152,56,2)
(151,117,2)
(161,117,2)
(89,56,2)
(88,145,2)
(22,56,2)
(137,111,2)
(37,96,2)
(94,3,2)
(179,75,2)
(77,117,2)
(4,152,2)
(64,56,2)
(97,115,2)
(162,117,2)
(103,135,2)
(127,31,2)
(19,31,2)
(31,166,2)
(147,125,2)
(150,117,2)
(118,147,2)
(120,3,2)
(26,151,2)
(143,117,2)
(11,3,2)
(147,56,2)
(82,117,2)
(174,31,2)
(188,31,2)
(168,3,2)
(9,76,2)
(99,76,2)
(21,56,2)
(18,117,2)
(20,56,2)
(115,76,2)
(119,56,2)
(76,154,2)
(185,31,2)
(80,76,2)
(118,111,2)
(125,3,2)
(73,76,2)
(111,123,2)
(25,7,2)
(166,117,2)
(71,75,2)
(59,3,2)
(125,63,2)
(23,111,2)
(136,117,2)
(39,120,2)
(128,56,2)
(163,31,2)
(104,117,2)
(181,56,2)
(114,105,2)
(154,3,2)
(154,81,2)
(13,189,2)
(63,3,2)
(1,7,2)
(50,117,2)
(58,3,2)
(115,9,2)
(184,117,2)
(71,20,2)
(154,153,2)
(186,56,2)
(189,174,2)
(173,117,2)
(169,31,2)
(68,88,2)
(130,11,2)
(147,186,2)
(2,7,2)
(172,189,2)
(98,117,2)
(20,137,2)
(97,68,2)
(7,56,2)
(153,152,2)
(69,117,2)
(130,120,2)
(189,31,2)
(154,152,2)
(90,56,2)
(23,31,2)
(81,3,2)
(49,56,2)
(97,146,2)
(105,3,2)
(16,7,2)
(74,76,2)
(145,31,2)
(56,189,2)
(52,31,2)
(148,56,2)
(1,21,2)
(158,56,2)
(27,76,2)
(47,56,2)
(37,117,2)
(170,31,2)
(35,3,2)
(38,31,2)
(85,3,2)
(65,117,2)
(88,31,2)
(120,115,2)
(166,26,2)
(55,189,2)
(133,40,2)
(24,117,2)
(78,152,2)
-----------------------------------
(0,*replace = \'\\\\0\')
(1,*replace)
(2,*replace = '\\\\0')
(3,globalReturnsTrue()
(4,2)
(5,RET)
(6,if (replace)
(7,replace)
(8,recvResult)
(9,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(10,connectSocket)
(11,connectSocket = INVALID_SOCKET)
(12,)
(13,recvResult)
(14,htons(TCP_PORT)
(15,data)
(16,\'\\\\0\')
(17,'\\\\r')
(18,service.sin_family = AF_INET)
(19,100)
(20,replace = strchr(data, \'\\\\n\')
(21,replace = strchr(data, \'\\\\r\')
(22,data)
(23,data + dataLen)
(24,s_addr)
(25,replace)
(26,(struct sockaddr*)
(27,1)
(28,'\\\\0')
(29,connectSocket)
(30,)
(31,connect(connectSocket, (struct sockaddr*)
(32,connectSocket)
(33,data)
(34,COMMAND_INT_PATH)
(35,connectSocket)
(36,sin_port)
(37,memset(&service, 0, sizeof(service)
(38,1)
(39,connectSocket)
(40,service.sin_addr)
(41,INVALID_SOCKET)
(42,sizeof(service)
(43,\'\\\\r\')
(44,SOCKET_ERROR)
(45,)
(46,wsaDataInit)
(47,sizeof(char)
(48,dataLen)
(49,'\\\\n')
(50,inet_addr(IP_ADDRESS)
(51,dataLen)
(52,char)
(53,replace)
(54,)
(55,recvResult == 0)
(56,recvResult == SOCKET_ERROR || recvResult == 0)
(57,service)
(58,dataLen)
(59,wsaDataInit)
(60,AF_INET)
(61,\'\\\\0\')
(62,if (WSAStartup(MAKEWORD(2,2)
(63,strlen(data)
(64,char)
(65,service)
(66,)
(67,if (replace)
(68,sizeof(char)
(69,service)
(70,'\\\\0')
(71,*replace)
(72,args)
(73,wsaDataInit)
(74,connectSocket)
(75,replace)
(76,WSAStartup(MAKEWORD(2,2)
(77,break;)
(78,NO_ERROR)
(79,if(globalReturnsTrue()
(80,connectSocket)
(81,&wsaData)
(82,service)
(83,)
(84,if (recvResult == SOCKET_ERROR || recvResult == 0)
(85,0)
(86,)
(87,service)
(88,100 - dataLen - 1)
(89,data)
(90,strchr(data, '\\\\r')
(91,args)
(92,do)
(93,if (connect(connectSocket, (struct sockaddr*)
(94,2)
(95,*replace = \'\\\\0\')
(96,&service)
(97,recv(connectSocket, (char *)
(98,sizeof(service)
(99,SOCK_STREAM)
(100,strchr(data, \'\\\\r\')
(101,sin_addr)
(102,data)
(103,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(104,service.sin_port)
(105,wsaDataInit)
(106,_P_WAIT)
(107,dataBuffer)
(108,TCP_PORT)
(109,*replace = '\\\\0')
(110,)
(111,data = dataBuffer)
(112,)
(113,COMMAND_ARG2)
(114,WSACleanup()
(115,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(116,wsaDataInit = 0)
(117,connectSocket == INVALID_SOCKET)
(118,data[dataLen + recvResult / sizeof(char)
(119,'\\\\0')
(120,connectSocket != INVALID_SOCKET)
(121,INVALID_SOCKET)
(122,struct sockaddr*)
(123,dataBuffer[100] = COMMAND_ARG2)
(124,char *)
(125,dataLen = strlen(data)
(126,wsaDataInit = 1)
(127,SOCKET_ERROR)
(128,dataLen)
(129,replace = strchr(data, '\\\\r')
(130,CLOSE_SOCKET(connectSocket)
(131,\'\\\\n\')
(132,if (connectSocket == INVALID_SOCKET)
(133,service.sin_addr.s_addr)
(134,)
(135,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(136,service)
(137,strchr(data, \'\\\\n\')
(138,IPPROTO_TCP)
(139,connectSocket)
(140,break;)
(141,replace = strchr(data, '\\\\n')
(142,replace)
(143,service.sin_family)
(144,)
(145,dataLen - 1)
(146,(char *)
(147,dataLen + recvResult / sizeof(char)
(148,data[dataLen + recvResult / sizeof(char)
(149,dataBuffer)
(150,sin_family)
(151,&service)
(152,0)
(153,MAKEWORD(2,2)
(154,WSAStartup(MAKEWORD(2,2)
(155,service)
(156,recvResult)
(157,)
(158,break;)
(159,strchr(data, '\\\\n')
(160,wsaData)
(161,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(162,service)
(163,recvResult)
(164,)
(165,dataBuffer)
(166,connect(connectSocket, (struct sockaddr*)
(167,INVALID_SOCKET)
(168,data)
(169,0)
(170,data)
(171,args)
(172,0)
(173,0)
(174,recvResult = recv(connectSocket, (char *)
(175,AF_INET)
(176,if (wsaDataInit)
(177,dataLen)
(178,\'\\\\0\')
(179,replace)
(180,wsaData)
(181,replace)
(182,IP_ADDRESS)
(183,sizeof(char)
(184,service.sin_port = htons(TCP_PORT)
(185,break;)
(186,recvResult / sizeof(char)
(187,if (connectSocket != INVALID_SOCKET)
(188,recvResult)
(189,recvResult == SOCKET_ERROR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^