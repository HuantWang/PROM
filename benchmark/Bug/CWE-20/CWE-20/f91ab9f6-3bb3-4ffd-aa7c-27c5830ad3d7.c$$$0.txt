-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
        strcat(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,94,96
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcat(dest, data);
strcat(dest, data)
strcat
strcat
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(6,2,0)
(30,5,0)
(41,14,0)
(2,6,0)
(38,19,0)
(6,47,0)
(0,28,0)
(11,1,0)
(2,27,0)
(4,39,0)
(25,27,0)
(36,31,0)
(31,17,0)
(21,20,0)
(34,37,0)
(20,21,0)
(35,6,0)
(19,8,0)
(10,5,0)
(9,37,0)
(47,40,0)
(41,2,0)
(20,2,0)
(13,2,0)
(33,27,0)
(18,2,0)
(47,6,0)
(45,20,0)
(37,2,0)
(14,27,0)
(16,41,0)
(43,2,0)
(3,21,0)
(5,19,0)
(19,5,0)
(26,19,0)
(15,43,0)
(17,31,0)
(22,14,0)
(43,39,0)
(46,43,0)
(29,39,0)
(20,1,0)
(12,40,0)
(39,14,0)
(1,8,0)
(24,27,0)
(18,14,0)
(42,21,0)
(40,47,0)
(17,44,0)
(6,35,0)
(28,40,0)
(19,2,0)
(7,18,0)
(43,14,0)
(40,28,0)
(5,30,1)
(47,40,1)
(15,46,1)
(2,6,1)
(23,17,1)
(17,31,1)
(23,37,1)
(12,13,1)
(4,1,1)
(32,18,1)
(4,23,1)
(43,15,1)
(20,2,1)
(41,2,1)
(46,39,1)
(26,38,1)
(28,0,1)
(1,11,1)
(34,2,1)
(3,42,1)
(43,2,1)
(0,12,1)
(36,37,1)
(11,20,1)
(37,9,1)
(18,7,1)
(29,4,1)
(6,35,1)
(18,2,1)
(16,43,1)
(10,26,1)
(39,29,1)
(43,39,1)
(41,16,1)
(42,45,1)
(7,41,1)
(31,36,1)
(40,28,1)
(21,3,1)
(45,19,1)
(30,10,1)
(20,21,1)
(19,2,1)
(9,34,1)
(19,5,1)
(37,2,1)
(38,23,1)
(6,47,1)
(6,35,2)
(20,21,2)
(5,23,2)
(30,23,2)
(26,23,2)
(6,47,2)
(21,23,2)
(42,23,2)
(20,2,2)
(31,37,2)
(40,28,2)
(43,2,2)
(3,23,2)
(41,2,2)
(18,2,2)
(37,2,2)
(38,23,2)
(19,5,2)
(19,2,2)
(47,40,2)
(43,39,2)
(36,37,2)
(19,23,2)
(45,23,2)
(11,23,2)
(17,37,2)
(17,31,2)
(1,23,2)
(2,6,2)
(10,23,2)
(20,23,2)
-----------------------------------
(0,char)
(1,data[100-1] = \\\'\\\\0\\\')
(2,data = (char *)
(3,1)
(4,dest)
(5,100-1)
(6,(char *)
(7,data)
(8,)
(9,NULL)
(10,100)
(11,\\\'\\\\0\\\')
(12,100)
(13,data)
(14,)
(15,data)
(16,data)
(17,exit(-1)
(18,free(data)
(19,memset(data, \\\'A\\\', 100-1)
(20,data[100-1])
(21,100-1)
(22,dest)
(23,globalReturnsTrue()
(24,if (data == NULL)
(25,if(globalReturnsTrue()
(26,\\\'A\\\')
(27,)
(28,sizeof(char)
(29,"")
(30,1)
(31,-1)
(32,RET)
(33,data)
(34,data)
(35,char *)
(36,1)
(37,data == NULL)
(38,data)
(39,dest[50] = "")
(40,100*sizeof(char)
(41,printLine(data)
(42,100)
(43,strcat(dest, data)
(44,)
(45,data)
(46,dest)
(47,malloc(100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^