-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_12_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
30,33
31,32
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
71,72
72,73
72,74
73,74
74,75
74,76
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
92,93
93,94
93,95
94,95
94,96
95,96
97,98
99,100
99,101
100,101
100,102
103,104
105,106
105,107
105,108
106,107
107,108
109,110
110,111
110,112
111,112
112,113
112,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
126,127
127,128
129,130
130,131
131,132
131,133
132,133
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
142,143
142,144
144,145
146,147
146,148
146,149
146,150
147,148
148,149
148,150
149,150
152,153
152,154
153,154
156,157
157,158
159,160
160,161
161,162
161,163
162,163
162,164
163,164
165,166
167,168
167,169
168,169
168,170
171,172
173,174
173,175
174,175
175,176
175,177
177,178
179,180
179,181
179,182
179,183
180,181
181,182
181,183
182,183
185,186
185,187
186,187
189,190
190,191
192,193
193,194
194,195
194,196
195,196
197,198
197,199
198,199
200,201
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,38,40,45,46,49,52,53,56,62,64,67,68,70,75,77,82,83,86,87,90,96,98,101,102,104,108,113,115,120,121,124,125,128,133,136,138,143,145,150,151,154,155,158,164,166,169,170,172,176,178,183,184,187,188,191,196,199,201
-----computeFrom-----
13,14
13,15
24,25
24,26
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
80,81
80,82
84,85
84,86
93,94
93,95
118,119
118,120
122,123
122,124
148,149
148,150
152,153
152,154
161,162
161,163
181,182
181,183
185,186
185,187
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_12_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_12_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(105,51,0)
(62,10,0)
(11,94,0)
(90,61,0)
(34,56,0)
(32,61,0)
(56,78,0)
(55,99,0)
(63,29,0)
(32,55,0)
(38,63,0)
(53,61,0)
(71,36,0)
(38,74,0)
(43,3,0)
(54,75,0)
(15,74,0)
(72,109,0)
(101,31,0)
(88,74,0)
(109,8,0)
(73,72,0)
(63,38,0)
(67,97,0)
(32,109,0)
(51,105,0)
(59,94,0)
(14,3,0)
(68,36,0)
(77,31,0)
(49,72,0)
(4,31,0)
(88,63,0)
(22,59,0)
(107,37,0)
(86,74,0)
(104,86,0)
(88,55,0)
(99,110,0)
(28,61,0)
(35,86,0)
(52,95,0)
(55,95,0)
(77,50,0)
(83,77,0)
(0,21,0)
(72,55,0)
(45,102,0)
(51,50,0)
(60,88,0)
(48,44,0)
(99,33,0)
(70,32,0)
(75,107,0)
(77,55,0)
(9,71,0)
(25,94,0)
(33,58,0)
(96,32,0)
(75,50,0)
(5,38,0)
(90,65,0)
(72,97,0)
(24,74,0)
(33,99,0)
(79,38,0)
(26,76,0)
(87,51,0)
(58,1,0)
(50,51,0)
(58,33,0)
(23,106,0)
(27,58,0)
(36,71,0)
(44,93,0)
(69,76,0)
(109,90,0)
(72,50,0)
(81,10,0)
(39,95,0)
(6,97,0)
(75,94,0)
(90,109,0)
(99,55,0)
(38,79,0)
(13,6,0)
(3,64,0)
(75,109,0)
(98,92,0)
(75,55,0)
(16,55,0)
(18,53,0)
(17,36,0)
(107,75,0)
(100,25,0)
(75,63,0)
(7,77,0)
(76,78,0)
(50,42,0)
(1,58,0)
(57,6,0)
(12,24,0)
(40,59,0)
(66,94,0)
(41,44,0)
(21,31,0)
(45,72,0)
(110,99,0)
(84,75,0)
(10,31,0)
(103,61,0)
(91,106,0)
(82,90,0)
(47,56,0)
(20,1,0)
(72,45,0)
(108,74,0)
(85,88,0)
(106,89,0)
(65,90,0)
(80,97,0)
(19,95,0)
(92,97,0)
(51,31,0)
(71,61,0)
(75,63,1)
(54,84,1)
(59,94,1)
(86,104,1)
(75,55,1)
(75,109,1)
(2,55,1)
(32,61,1)
(72,50,1)
(59,40,1)
(13,97,1)
(27,16,1)
(72,97,1)
(32,55,1)
(71,36,1)
(72,55,1)
(94,66,1)
(50,51,1)
(15,30,1)
(21,0,1)
(62,81,1)
(33,58,1)
(31,101,1)
(99,33,1)
(66,11,1)
(21,31,1)
(53,18,1)
(46,6,1)
(83,7,1)
(30,10,1)
(7,10,1)
(51,87,1)
(49,6,1)
(72,109,1)
(53,61,1)
(38,74,1)
(6,57,1)
(68,9,1)
(30,71,1)
(80,67,1)
(40,22,1)
(92,97,1)
(38,5,1)
(88,74,1)
(97,80,1)
(17,68,1)
(99,110,1)
(75,54,1)
(20,27,1)
(88,60,1)
(35,74,1)
(25,94,1)
(100,107,1)
(72,73,1)
(81,21,1)
(18,109,1)
(108,15,1)
(86,74,1)
(4,2,1)
(90,61,1)
(24,74,1)
(51,105,1)
(77,55,1)
(10,31,1)
(10,62,1)
(75,50,1)
(70,96,1)
(74,108,1)
(24,12,1)
(63,38,1)
(9,61,1)
(92,98,1)
(87,77,1)
(13,92,1)
(36,17,1)
(45,72,1)
(9,53,1)
(82,32,1)
(109,90,1)
(11,86,1)
(32,70,1)
(46,59,1)
(25,100,1)
(90,65,1)
(58,1,1)
(77,83,1)
(51,31,1)
(22,94,1)
(104,35,1)
(12,63,1)
(6,97,1)
(98,45,1)
(0,50,1)
(57,13,1)
(60,85,1)
(1,20,1)
(88,55,1)
(90,82,1)
(103,2,1)
(77,31,1)
(75,94,1)
(28,103,1)
(101,4,1)
(55,99,1)
(107,75,1)
(22,25,1)
(61,28,1)
(5,88,1)
(85,86,1)
(81,31,1)
(96,71,1)
(67,30,1)
(38,79,1)
(84,59,1)
(73,49,1)
(71,61,1)
(35,24,1)
(68,2,2)
(17,2,2)
(22,30,2)
(71,36,2)
(25,59,2)
(10,10,2)
(72,50,2)
(59,30,2)
(71,2,2)
(13,6,2)
(96,71,2)
(99,33,2)
(25,94,2)
(59,59,2)
(72,109,2)
(32,61,2)
(67,30,2)
(31,2,2)
(22,59,2)
(74,30,2)
(45,6,2)
(28,2,2)
(101,2,2)
(11,30,2)
(75,94,2)
(107,75,2)
(6,97,2)
(82,71,2)
(75,55,2)
(72,97,2)
(51,105,2)
(66,30,2)
(92,97,2)
(86,30,2)
(9,71,2)
(17,71,2)
(90,61,2)
(98,6,2)
(90,65,2)
(109,71,2)
(81,10,2)
(88,86,2)
(36,71,2)
(73,6,2)
(84,59,2)
(63,38,2)
(83,10,2)
(90,71,2)
(92,6,2)
(97,30,2)
(38,79,2)
(85,86,2)
(77,10,2)
(77,55,2)
(109,90,2)
(6,30,2)
(36,2,2)
(35,86,2)
(32,55,2)
(57,30,2)
(71,61,2)
(77,31,2)
(108,30,2)
(35,30,2)
(71,71,2)
(104,86,2)
(33,58,2)
(6,6,2)
(40,30,2)
(75,50,2)
(60,86,2)
(53,61,2)
(4,2,2)
(75,59,2)
(10,31,2)
(40,59,2)
(104,30,2)
(13,30,2)
(80,30,2)
(75,63,2)
(81,2,2)
(68,71,2)
(45,72,2)
(63,86,2)
(88,55,2)
(32,71,2)
(18,71,2)
(75,109,2)
(70,71,2)
(58,1,2)
(86,86,2)
(51,10,2)
(0,10,2)
(5,86,2)
(86,74,2)
(99,110,2)
(24,86,2)
(87,10,2)
(50,10,2)
(7,10,2)
(107,59,2)
(61,2,2)
(53,71,2)
(88,74,2)
(54,59,2)
(15,30,2)
(21,31,2)
(62,10,2)
(9,2,2)
(94,30,2)
(50,51,2)
(10,2,2)
(72,6,2)
(21,10,2)
(103,2,2)
(38,74,2)
(100,59,2)
(51,31,2)
(57,6,2)
(72,55,2)
(24,74,2)
(62,2,2)
(38,86,2)
(59,94,2)
(49,6,2)
(12,86,2)
(55,99,2)
-----------------------------------
(0,i)
(1,sizeof(double)
(2,globalReturnsTrueOrFalse()
(3,)
(4,i)
(5,i)
(6,i<10)
(7,data)
(8,)
(9,i)
(10,i<10)
(11,i)
(12,i)
(13,i)
(14,i)
(15,i)
(16,data)
(17,2)
(18,i)
(19,if(globalReturnsTrueOrFalse()
(20,double)
(21,i++)
(22,i)
(23,i)
(24,i++)
(25,i++)
(26,for(i=0; i<10; i++)
(27,10)
(28,0)
(29,)
(30,globalReturnsTrueOrFalse()
(31,i=0)
(32,data[i])
(33,ALLOCA(10*sizeof(double)
(34,i)
(35,i)
(36,10/2)
(37,)
(38,(double)
(39,data)
(40,10)
(41,for(i=0; i<10; i++)
(42,)
(43,for(i=0; i<10; i++)
(44,)
(45,printDoubleLine(data[i])
(46,RET)
(47,for(i=0; i<10; i++)
(48,i)
(49,data)
(50,data[i] = (double)
(51,(double)
(52,if(globalReturnsTrueOrFalse()
(53,i++)
(54,i)
(55,data = (double *)
(56,)
(57,10)
(58,10*sizeof(double)
(59,i<10)
(60,i)
(61,i=0)
(62,10)
(63,data[i] = (double)
(64,)
(65,double)
(66,0)
(67,i)
(68,10)
(69,i)
(70,i)
(71,i<(10/2)
(72,data[i])
(73,i)
(74,i=0)
(75,data[i])
(76,)
(77,data[i])
(78,)
(79,double)
(80,0)
(81,i)
(82,i)
(83,i)
(84,data)
(85,data)
(86,i<10)
(87,i)
(88,data[i])
(89,)
(90,(double)
(91,for(i=0; i<(10/2)
(92,i++)
(93,)
(94,i=0)
(95,)
(96,data)
(97,i=0)
(98,i)
(99,(double *)
(100,i)
(101,0)
(102,)
(103,i)
(104,10)
(105,double)
(106,)
(107,printDoubleLine(data[i])
(108,0)
(109,data[i] = (double)
(110,double *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^