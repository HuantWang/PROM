-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_17_bad()
{
    int i,j;
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
80,81
80,82
83,84
84,85
86,87
87,88
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
95,97
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
103,104
106,107
106,108
107,108
110,111
111,112
113,114
114,115
114,116
115,116
116,117
116,118
118,119
120,121
120,122
120,123
120,124
121,122
122,123
122,124
123,124
126,127
126,128
127,128
130,131
131,132
133,134
134,135
135,136
135,137
136,137
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,12,15,17,18,22,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,67,69,74,75,78,81,82,85,91,93,96,97,99,104,105,108,109,112,117,119,124,125,128,129,132,137,140,142
-----computeFrom-----
20,21
20,22
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
72,73
72,74
76,77
76,78
80,81
80,82
88,89
88,90
102,103
102,104
106,107
106,108
122,123
122,124
126,127
126,128
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_17_bad(){    int i,j;    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_17_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_17_bad
{    int i,j;    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(44,67,0)
(35,9,0)
(57,67,0)
(16,71,0)
(49,74,0)
(48,76,0)
(70,34,0)
(68,26,0)
(56,54,0)
(39,54,0)
(5,37,0)
(38,34,0)
(31,67,0)
(30,63,0)
(76,32,0)
(75,45,0)
(66,51,0)
(7,55,0)
(13,34,0)
(45,8,0)
(72,26,0)
(25,34,0)
(20,55,0)
(59,12,0)
(2,67,0)
(29,34,0)
(9,8,0)
(10,48,0)
(3,2,0)
(57,33,0)
(48,63,0)
(41,39,0)
(53,57,0)
(51,37,0)
(50,54,0)
(45,63,0)
(2,63,0)
(45,75,0)
(65,62,0)
(69,23,0)
(48,12,0)
(11,12,0)
(63,45,0)
(27,43,0)
(77,34,0)
(28,67,0)
(0,60,0)
(23,40,0)
(2,76,0)
(8,45,0)
(63,34,0)
(19,14,0)
(9,35,0)
(54,39,0)
(33,57,0)
(39,67,0)
(58,43,0)
(48,49,0)
(8,9,0)
(55,21,0)
(49,48,0)
(52,2,0)
(71,43,0)
(1,44,0)
(64,43,0)
(4,18,0)
(14,12,0)
(17,60,0)
(78,35,0)
(76,57,0)
(26,63,0)
(73,48,0)
(60,42,0)
(15,18,0)
(18,12,0)
(6,27,0)
(61,62,0)
(57,76,0)
(47,69,0)
(36,9,0)
(24,71,0)
(46,37,0)
(23,69,0)
(62,37,0)
(64,62,1)
(10,73,1)
(56,41,1)
(51,37,1)
(65,61,1)
(78,36,1)
(36,30,1)
(61,37,1)
(3,39,1)
(43,58,1)
(14,12,1)
(53,2,1)
(61,51,1)
(68,63,1)
(49,48,1)
(39,67,1)
(47,26,1)
(59,11,1)
(24,43,1)
(63,45,1)
(66,39,1)
(51,66,1)
(44,1,1)
(2,52,1)
(11,71,1)
(39,54,1)
(12,59,1)
(27,43,1)
(4,12,1)
(57,33,1)
(58,64,1)
(2,67,1)
(72,68,1)
(31,28,1)
(57,53,1)
(37,46,1)
(69,47,1)
(2,63,1)
(5,26,1)
(35,78,1)
(52,3,1)
(44,67,1)
(5,23,1)
(24,27,1)
(18,12,1)
(18,15,1)
(45,75,1)
(15,4,1)
(48,76,1)
(67,31,1)
(8,9,1)
(73,18,1)
(76,57,1)
(27,6,1)
(48,12,1)
(71,43,1)
(16,24,1)
(1,76,1)
(9,35,1)
(14,19,1)
(50,56,1)
(71,16,1)
(6,18,1)
(57,67,1)
(54,50,1)
(4,14,1)
(46,5,1)
(41,67,1)
(28,62,1)
(26,63,1)
(48,63,1)
(48,10,1)
(23,69,1)
(26,72,1)
(62,65,1)
(22,71,1)
(19,49,1)
(62,37,1)
(45,8,1)
(41,44,1)
(45,8,2)
(71,71,2)
(18,12,2)
(57,39,2)
(12,71,2)
(50,62,2)
(4,18,2)
(9,35,2)
(8,9,2)
(19,18,2)
(57,33,2)
(18,71,2)
(53,39,2)
(39,62,2)
(27,43,2)
(3,39,2)
(15,18,2)
(56,39,2)
(48,12,2)
(14,12,2)
(51,62,2)
(47,26,2)
(41,39,2)
(11,71,2)
(2,39,2)
(45,75,2)
(44,67,2)
(49,48,2)
(50,39,2)
(66,62,2)
(15,71,2)
(39,54,2)
(76,39,2)
(73,18,2)
(62,62,2)
(69,26,2)
(57,67,2)
(31,62,2)
(52,39,2)
(28,62,2)
(10,18,2)
(63,45,2)
(48,76,2)
(2,63,2)
(56,62,2)
(65,62,2)
(44,39,2)
(4,71,2)
(18,18,2)
(23,69,2)
(39,67,2)
(51,37,2)
(48,18,2)
(23,26,2)
(76,57,2)
(16,71,2)
(27,71,2)
(49,18,2)
(67,62,2)
(39,39,2)
(1,39,2)
(6,71,2)
(62,37,2)
(26,63,2)
(59,71,2)
(2,67,2)
(54,62,2)
(14,18,2)
(71,43,2)
(48,63,2)
(24,71,2)
(54,39,2)
(61,62,2)
(41,62,2)
-----------------------------------
(0,i)
(1,i)
(2,data[i])
(3,data)
(4,i)
(5,i)
(6,j)
(7,for(i=0; i<(10/2)
(8,malloc(10*sizeof(double)
(9,10*sizeof(double)
(10,i)
(11,i)
(12,i=0)
(13,if (data == NULL)
(14,i++)
(15,10)
(16,1)
(17,for(i=0; i<10; i++)
(18,i<10)
(19,i)
(20,i)
(21,)
(22,RET)
(23,exit(-1)
(24,j)
(25,for(j = 0; j < 1; j++)
(26,data == NULL)
(27,j++)
(28,i)
(29,j)
(30,data)
(31,0)
(32,)
(33,double)
(34,)
(35,sizeof(double)
(36,10)
(37,i = 0)
(38,for(i = 0; i < 1; i++)
(39,i<(10/2)
(40,)
(41,i)
(42,)
(43,j = 0)
(44,i++)
(45,(double *)
(46,0)
(47,1)
(48,data[i])
(49,printDoubleLine(data[i])
(50,2)
(51,i++)
(52,i)
(53,i)
(54,10/2)
(55,)
(56,10)
(57,(double)
(58,0)
(59,0)
(60,)
(61,i)
(62,i < 1)
(63,data = (double *)
(64,j)
(65,1)
(66,i)
(67,i=0)
(68,data)
(69,-1)
(70,data)
(71,j < 1)
(72,NULL)
(73,data)
(74,)
(75,double *)
(76,data[i] = (double)
(77,i)
(78,double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^