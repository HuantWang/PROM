-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_pointer_12_bad()
{
    int * data;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Initialize data */
        /* initialize both the pointer and the data pointed to */
        data = (int *)malloc(sizeof(int));
        if (data == NULL) {exit(-1);}
        *data = 5;
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        printIntLine(*data);
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        /* initialize both the pointer and the data pointed to */
        data = (int *)malloc(sizeof(int));
        if (data == NULL) {exit(-1);}
        *data = 5;
        printIntLine(*data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
6,7
7,8
7,9
9,10
9,11
12,13
12,14
12,15
13,14
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
51,52
54,55
54,56
54,57
55,56
56,57
58,59
59,60
60,61
60,62
61,62
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
99,100
102,103
103,104
103,105
104,105
106,107
107,108
-----nextToken-----
2,4,8,10,11,15,17,22,25,27,30,33,34,38,40,45,47,52,53,57,62,65,70,73,75,78,81,82,86,88,93,95,100,101,105,108
-----computeFrom-----
20,21
20,22
36,37
36,38
49,50
49,51
68,69
68,70
84,85
84,86
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_pointer_12_bad(){    int * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;        printIntLine(*data);    }}
void
CWE457_Use_of_Uninitialized_Variable__int_pointer_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_pointer_12_bad
{    int * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;        printIntLine(*data);    }}
int * data;
int * data;
int
* data
*
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;    }
data = (int *)malloc(sizeof(int));
data = (int *)malloc(sizeof(int))
data
data
(int *)malloc(sizeof(int))
int *
int
*
*
malloc(sizeof(int))
malloc
malloc
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 5;
*data = 5
*data
data
data
5
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;        printIntLine(*data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(*data);    }
printIntLine(*data);
printIntLine(*data)
printIntLine
printIntLine
*data
data
data
{        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (int *)malloc(sizeof(int));        if (data == NULL) {exit(-1);}        *data = 5;        printIntLine(*data);    }
data = (int *)malloc(sizeof(int));
data = (int *)malloc(sizeof(int))
data
data
(int *)malloc(sizeof(int))
int *
int
*
*
malloc(sizeof(int))
malloc
malloc
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 5;
*data = 5
*data
data
data
5
printIntLine(*data);
printIntLine(*data)
printIntLine
printIntLine
*data
data
data
-----joern-----
(3,18,0)
(32,18,0)
(12,40,0)
(53,24,0)
(14,35,0)
(26,35,0)
(29,20,0)
(27,30,0)
(6,33,0)
(27,44,0)
(9,0,0)
(24,33,0)
(17,44,0)
(18,32,0)
(31,8,0)
(31,16,0)
(10,47,0)
(22,50,0)
(32,10,0)
(50,20,0)
(46,39,0)
(44,20,0)
(48,22,0)
(30,21,0)
(17,0,0)
(41,7,0)
(17,1,0)
(37,45,0)
(23,40,0)
(52,17,0)
(2,5,0)
(10,50,0)
(33,45,0)
(35,14,0)
(1,17,0)
(25,33,0)
(39,46,0)
(47,10,0)
(33,24,0)
(11,44,0)
(13,5,0)
(51,50,0)
(4,22,0)
(49,27,0)
(14,28,0)
(39,24,0)
(24,53,0)
(7,50,0)
(8,31,0)
(27,50,0)
(10,32,0)
(15,5,0)
(0,45,0)
(42,25,0)
(40,33,0)
(1,45,0)
(38,8,0)
(24,39,0)
(17,33,0)
(25,0,0)
(19,46,0)
(50,10,0)
(30,27,0)
(7,44,0)
(52,0,1)
(30,27,1)
(27,50,1)
(10,47,1)
(40,12,1)
(18,3,1)
(14,35,1)
(0,9,1)
(17,33,1)
(26,22,1)
(50,10,1)
(39,46,1)
(17,52,1)
(9,25,1)
(32,18,1)
(6,34,1)
(42,31,1)
(38,40,1)
(17,44,1)
(31,8,1)
(22,50,1)
(27,44,1)
(40,33,1)
(51,36,1)
(12,23,1)
(25,33,1)
(4,48,1)
(3,51,1)
(35,26,1)
(44,11,1)
(7,50,1)
(24,53,1)
(33,24,1)
(49,34,1)
(41,22,1)
(48,50,1)
(46,19,1)
(7,41,1)
(11,7,1)
(22,4,1)
(41,14,1)
(42,40,1)
(34,44,1)
(19,6,1)
(43,30,1)
(8,38,1)
(43,1,1)
(25,42,1)
(10,32,1)
(27,49,1)
(17,0,1)
(34,36,1)
(1,17,1)
(24,39,1)
(23,33,1)
(33,34,2)
(32,36,2)
(25,33,2)
(33,24,2)
(35,22,2)
(14,22,2)
(24,34,2)
(4,36,2)
(51,36,2)
(31,40,2)
(38,40,2)
(48,36,2)
(18,36,2)
(26,22,2)
(40,34,2)
(8,40,2)
(49,34,2)
(1,17,2)
(6,34,2)
(0,34,2)
(32,18,2)
(17,0,2)
(25,34,2)
(24,39,2)
(46,34,2)
(10,47,2)
(17,44,2)
(11,36,2)
(23,34,2)
(19,34,2)
(27,34,2)
(24,53,2)
(27,44,2)
(12,34,2)
(39,46,2)
(1,34,2)
(50,36,2)
(17,33,2)
(41,36,2)
(10,36,2)
(22,50,2)
(27,50,2)
(39,34,2)
(30,27,2)
(40,33,2)
(50,10,2)
(17,34,2)
(22,36,2)
(52,34,2)
(7,36,2)
(3,36,2)
(30,34,2)
(31,8,2)
(10,32,2)
(44,36,2)
(14,35,2)
(9,34,2)
(7,50,2)
(42,34,2)
-----------------------------------
(0,*data = 5)
(1,printIntLine(*data)
(2,data)
(3,int)
(4,NULL)
(5,)
(6,data)
(7,*data)
(8,-1)
(9,5)
(10,(int *)
(11,5)
(12,NULL)
(13,if(globalReturnsTrueOrFalse()
(14,exit(-1)
(15,if(globalReturnsTrueOrFalse()
(16,)
(17,*data)
(18,sizeof(int)
(19,int)
(20,)
(21,)
(22,data == NULL)
(23,data)
(24,(int *)
(25,*data)
(26,1)
(27,*data)
(28,)
(29,if (data == NULL)
(30,printIntLine(*data)
(31,exit(-1)
(32,malloc(sizeof(int)
(33,data = (int *)
(34,globalReturnsTrueOrFalse()
(35,-1)
(36,globalReturnsTrueOrFalse()
(37,if (data == NULL)
(38,1)
(39,malloc(sizeof(int)
(40,data == NULL)
(41,data)
(42,data)
(43,RET)
(44,*data = 5)
(45,)
(46,sizeof(int)
(47,int *)
(48,data)
(49,data)
(50,data = (int *)
(51,data)
(52,data)
(53,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^