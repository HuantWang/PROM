-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_04_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
47,48
47,49
48,49
49,50
49,51
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
56,57
59,60
59,61
60,61
62,63
63,64
63,65
66,67
67,68
69,70
70,71
71,72
71,73
72,73
72,74
73,74
75,76
77,78
79,80
79,81
80,81
82,83
83,84
83,85
84,85
85,86
85,87
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
99,100
100,101
102,103
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,57,58,61,64,65,68,74,76,78,81,86,88,93,94,97,98,101,106,109,111
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
71,72
71,73
91,92
91,93
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_04_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_04_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(60,15,0)
(12,13,0)
(32,33,0)
(51,18,0)
(41,17,0)
(5,16,0)
(56,24,0)
(31,53,0)
(22,30,0)
(11,30,0)
(23,9,0)
(33,45,0)
(28,59,0)
(27,10,0)
(36,24,0)
(34,24,0)
(44,42,0)
(6,16,0)
(46,11,0)
(27,11,0)
(40,5,0)
(18,9,0)
(24,34,0)
(19,8,0)
(2,57,0)
(24,56,0)
(3,13,0)
(53,18,0)
(25,42,0)
(43,18,0)
(57,13,0)
(20,33,0)
(5,29,0)
(54,29,0)
(7,53,0)
(11,27,0)
(35,9,0)
(11,13,0)
(37,12,0)
(56,51,0)
(38,9,0)
(51,56,0)
(0,16,0)
(15,16,0)
(29,5,0)
(30,16,0)
(15,30,0)
(30,1,0)
(18,51,0)
(50,13,0)
(19,17,0)
(49,29,0)
(52,11,0)
(48,34,0)
(11,18,0)
(17,19,0)
(21,51,0)
(14,57,0)
(4,15,0)
(55,9,0)
(51,21,0)
(42,47,0)
(15,18,0)
(59,16,0)
(37,27,1)
(31,18,1)
(30,22,1)
(46,57,1)
(15,18,1)
(51,56,1)
(5,29,1)
(59,16,1)
(40,59,1)
(50,58,1)
(12,13,1)
(30,16,1)
(11,30,1)
(57,2,1)
(34,48,1)
(4,60,1)
(41,53,1)
(2,14,1)
(28,30,1)
(39,57,1)
(29,49,1)
(3,50,1)
(58,26,1)
(58,5,1)
(11,18,1)
(11,13,1)
(26,19,1)
(0,26,1)
(19,17,1)
(16,6,1)
(14,12,1)
(15,16,1)
(17,41,1)
(60,5,1)
(56,24,1)
(5,16,1)
(24,34,1)
(12,37,1)
(6,0,1)
(18,51,1)
(15,4,1)
(22,15,1)
(57,13,1)
(49,54,1)
(27,11,1)
(59,28,1)
(40,16,1)
(36,43,1)
(26,53,1)
(53,18,1)
(39,58,1)
(51,21,1)
(54,40,1)
(53,7,1)
(14,13,1)
(52,46,1)
(7,31,1)
(13,3,1)
(48,36,1)
(11,52,1)
(56,24,2)
(5,29,2)
(0,26,2)
(41,53,2)
(5,26,2)
(57,57,2)
(37,57,2)
(11,57,2)
(27,11,2)
(28,5,2)
(53,18,2)
(54,5,2)
(57,58,2)
(30,16,2)
(51,21,2)
(22,5,2)
(14,57,2)
(5,16,2)
(16,26,2)
(3,58,2)
(19,17,2)
(29,26,2)
(2,57,2)
(2,58,2)
(12,57,2)
(14,58,2)
(17,53,2)
(59,16,2)
(11,13,2)
(49,5,2)
(27,57,2)
(19,53,2)
(52,57,2)
(6,26,2)
(59,5,2)
(29,5,2)
(30,5,2)
(60,5,2)
(40,26,2)
(15,18,2)
(49,26,2)
(15,16,2)
(13,58,2)
(24,34,2)
(50,58,2)
(15,5,2)
(51,56,2)
(18,51,2)
(57,13,2)
(11,30,2)
(46,57,2)
(54,26,2)
(40,5,2)
(4,5,2)
(5,5,2)
(12,13,2)
(11,18,2)
-----------------------------------
(0,i)
(1,)
(2,10)
(3,0)
(4,i)
(5,i<(10/2)
(6,0)
(7,NULL)
(8,)
(9,)
(10,)
(11,data[i])
(12,i++)
(13,i=0)
(14,i)
(15,data[i])
(16,i=0)
(17,-1)
(18,data = (int *)
(19,exit(-1)
(20,for(i=0; i<(10/2)
(21,int *)
(22,i)
(23,data)
(24,10*sizeof(int)
(25,for(i=0; i<10; i++)
(26,STATIC_CONST_TRUE)
(27,printIntLine(data[i])
(28,i)
(29,10/2)
(30,data[i] = i)
(31,data)
(32,i)
(33,)
(34,sizeof(int)
(35,if(STATIC_CONST_TRUE)
(36,10)
(37,i)
(38,if (data == NULL)
(39,RET)
(40,i)
(41,1)
(42,)
(43,data)
(44,i)
(45,)
(46,data)
(47,)
(48,int)
(49,2)
(50,i)
(51,(int *)
(52,i)
(53,data == NULL)
(54,10)
(55,if(STATIC_CONST_TRUE)
(56,malloc(10*sizeof(int)
(57,i<10)
(58,STATIC_CONST_TRUE)
(59,i++)
(60,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^