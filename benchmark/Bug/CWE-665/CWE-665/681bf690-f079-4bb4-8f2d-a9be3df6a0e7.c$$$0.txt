-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_badSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(21,14,0)
(13,28,0)
(31,32,0)
(26,37,0)
(37,5,0)
(3,13,0)
(1,28,0)
(4,40,0)
(1,13,0)
(2,32,0)
(22,34,0)
(34,28,0)
(33,35,0)
(14,21,0)
(34,13,0)
(23,30,0)
(17,30,0)
(21,35,0)
(7,20,0)
(32,35,0)
(25,21,0)
(10,3,0)
(27,1,0)
(18,13,0)
(9,35,0)
(40,13,0)
(3,8,0)
(36,14,0)
(21,10,0)
(20,13,0)
(32,2,0)
(10,21,0)
(15,40,0)
(20,28,0)
(8,3,0)
(39,28,0)
(19,23,0)
(29,11,0)
(13,3,0)
(24,2,0)
(12,23,0)
(3,10,0)
(11,0,0)
(35,30,0)
(38,1,0)
(37,26,0)
(6,26,0)
(27,38,1)
(13,3,1)
(38,40,1)
(14,36,1)
(35,9,1)
(25,18,1)
(34,13,1)
(16,20,1)
(18,32,1)
(34,22,1)
(21,35,1)
(26,6,1)
(32,35,1)
(21,14,1)
(11,29,1)
(40,13,1)
(32,2,1)
(20,13,1)
(20,7,1)
(6,40,1)
(15,4,1)
(9,33,1)
(10,21,1)
(2,24,1)
(4,13,1)
(3,10,1)
(24,31,1)
(38,37,1)
(40,15,1)
(37,26,1)
(31,35,1)
(7,34,1)
(1,27,1)
(3,8,1)
(29,32,1)
(16,11,1)
(36,25,1)
(22,1,1)
(1,13,1)
(29,32,2)
(1,13,2)
(14,32,2)
(3,8,2)
(6,40,2)
(10,21,2)
(4,32,2)
(18,32,2)
(32,2,2)
(37,40,2)
(32,35,2)
(1,32,2)
(26,40,2)
(21,32,2)
(21,14,2)
(37,26,2)
(10,32,2)
(34,32,2)
(3,10,2)
(38,32,2)
(27,32,2)
(21,35,2)
(7,32,2)
(13,32,2)
(40,13,2)
(36,32,2)
(40,32,2)
(3,32,2)
(22,32,2)
(20,13,2)
(20,32,2)
(34,13,2)
(15,32,2)
(25,32,2)
(13,3,2)
(11,32,2)
-----------------------------------
(0,)
(1,wcscpy(myString, HELLO_STRING)
(2,wcslen(HELLO_STRING)
(3,(wchar_t *)
(4,myString)
(5,)
(6,1)
(7,myString)
(8,wchar_t *)
(9,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData)
(10,malloc(data*sizeof(wchar_t)
(11,printLine("Input is less than the length of the source string")
(12,myString)
(13,myString = (wchar_t *)
(14,sizeof(wchar_t)
(15,NULL)
(16,RET)
(17,data)
(18,myString)
(19,if (data > wcslen(HELLO_STRING)
(20,free(myString)
(21,data*sizeof(wchar_t)
(22,myString)
(23,)
(24,HELLO_STRING)
(25,data)
(26,-1)
(27,HELLO_STRING)
(28,)
(29,"Input is less than the length of the source string")
(30,)
(31,data)
(32,data > wcslen(HELLO_STRING)
(33,data)
(34,printWLine(myString)
(35,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_badData)
(36,wchar_t)
(37,exit(-1)
(38,myString)
(39,if (myString == NULL)
(40,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^