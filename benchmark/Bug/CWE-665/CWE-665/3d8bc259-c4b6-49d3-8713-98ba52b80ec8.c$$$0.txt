-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink(int * * dataPtr)
{
    int * data = *dataPtr;
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
7,10
11,12
11,13
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,6,8,9,10,14,16,17,21,25,27,32,33,36,37,40,45,48,50
-----computeFrom-----
30,31
30,32
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink(int * * dataPtr){    int * data = *dataPtr;    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink(int * * dataPtr)
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink
int * * dataPtr
int
* * dataPtr
*
*
dataPtr
{    int * data = *dataPtr;    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
int * data = *dataPtr;
int * data = *dataPtr;
int
* data = *dataPtr
*
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(12,8,0)
(6,12,0)
(6,14,0)
(8,12,0)
(3,6,0)
(13,14,0)
(18,21,0)
(16,9,0)
(6,5,0)
(5,6,0)
(2,8,0)
(15,6,0)
(1,12,0)
(8,20,0)
(9,14,0)
(10,23,0)
(23,14,0)
(12,21,0)
(17,21,0)
(19,18,0)
(22,14,0)
(11,23,0)
(5,0,0)
(4,18,0)
(12,8,1)
(23,11,1)
(16,5,1)
(6,14,1)
(10,9,1)
(22,12,1)
(3,23,1)
(8,20,1)
(2,1,1)
(6,12,1)
(9,16,1)
(14,13,1)
(10,14,1)
(7,23,1)
(11,10,1)
(6,15,1)
(13,22,1)
(15,3,1)
(23,14,1)
(5,6,1)
(8,2,1)
(9,14,1)
(23,14,2)
(8,20,2)
(6,12,2)
(23,23,2)
(15,23,2)
(5,6,2)
(9,14,2)
(6,23,2)
(11,23,2)
(16,23,2)
(3,23,2)
(5,23,2)
(10,23,2)
(9,23,2)
(6,14,2)
(12,8,2)
-----------------------------------
(0,)
(1,data)
(2,dataPtr)
(3,data)
(4,i)
(5,printIntLine(data[i])
(6,data[i])
(7,RET)
(8,*dataPtr)
(9,i++)
(10,i)
(11,10)
(12,* data = *dataPtr)
(13,0)
(14,i=0)
(15,i)
(16,i)
(17,data)
(18,)
(19,for(i=0; i<10; i++)
(20,int * * dataPtr)
(21,)
(22,i)
(23,i<10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^