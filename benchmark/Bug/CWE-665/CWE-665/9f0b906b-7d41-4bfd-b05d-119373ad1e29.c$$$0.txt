-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(19,8,0)
(0,21,0)
(11,9,0)
(18,43,0)
(47,14,0)
(36,21,0)
(47,41,0)
(13,41,0)
(35,17,0)
(40,14,0)
(26,21,0)
(3,24,0)
(45,30,0)
(30,39,0)
(48,47,0)
(0,14,0)
(9,3,0)
(3,9,0)
(14,0,0)
(14,47,0)
(33,29,0)
(30,45,0)
(8,47,0)
(12,8,0)
(21,3,0)
(4,48,0)
(43,47,0)
(6,16,0)
(22,3,0)
(34,3,0)
(10,24,0)
(25,41,0)
(37,45,0)
(16,1,0)
(25,47,0)
(32,16,0)
(27,24,0)
(46,2,0)
(16,32,0)
(14,40,0)
(16,10,0)
(48,41,0)
(20,25,0)
(7,47,0)
(34,29,0)
(2,24,0)
(15,34,0)
(21,26,0)
(21,0,0)
(10,16,0)
(38,35,0)
(5,24,0)
(29,34,0)
(28,2,0)
(44,43,0)
(23,26,0)
(42,10,0)
(43,41,0)
(9,10,0)
(8,19,1)
(26,23,1)
(10,16,1)
(48,47,1)
(18,30,1)
(25,20,1)
(37,8,1)
(21,3,1)
(47,14,1)
(25,47,1)
(33,15,1)
(16,6,1)
(43,44,1)
(6,42,1)
(16,1,1)
(20,43,1)
(31,35,1)
(18,8,1)
(44,18,1)
(34,29,1)
(9,10,1)
(38,34,1)
(4,25,1)
(16,32,1)
(12,47,1)
(14,0,1)
(36,7,1)
(35,38,1)
(31,48,1)
(19,12,1)
(48,4,1)
(0,21,1)
(8,47,1)
(11,22,1)
(3,9,1)
(30,45,1)
(15,3,1)
(29,33,1)
(9,11,1)
(7,34,1)
(43,47,1)
(21,26,1)
(45,37,1)
(22,10,1)
(14,40,1)
(23,36,1)
(34,3,1)
(38,34,2)
(30,45,2)
(8,34,2)
(3,9,2)
(14,34,2)
(35,34,2)
(0,34,2)
(0,21,2)
(43,47,2)
(44,34,2)
(48,34,2)
(14,40,2)
(26,34,2)
(19,34,2)
(7,34,2)
(47,34,2)
(37,8,2)
(47,14,2)
(18,34,2)
(43,34,2)
(21,34,2)
(21,26,2)
(25,34,2)
(45,8,2)
(9,10,2)
(30,8,2)
(48,47,2)
(23,34,2)
(21,3,2)
(34,29,2)
(25,47,2)
(16,1,2)
(16,32,2)
(8,47,2)
(36,34,2)
(20,34,2)
(34,3,2)
(10,16,2)
(12,34,2)
(14,0,2)
(4,34,2)
-----------------------------------
(0,malloc(data*sizeof(char)
(1,void * dataVoidPtr)
(2,)
(3,data = (*dataPtr)
(4,myString)
(5,data)
(6,dataVoidPtr)
(7,myString)
(8,myString == NULL)
(9,*dataPtr)
(10,* dataPtr = (size_t *)
(11,dataPtr)
(12,myString)
(13,if (myString == NULL)
(14,(char *)
(15,data)
(16,(size_t *)
(17,)
(18,myString)
(19,NULL)
(20,myString)
(21,data*sizeof(char)
(22,data)
(23,char)
(24,)
(25,printLine(myString)
(26,sizeof(char)
(27,dataPtr)
(28,myString)
(29,strlen(HELLO_STRING)
(30,exit(-1)
(31,RET)
(32,size_t *)
(33,HELLO_STRING)
(34,data > strlen(HELLO_STRING)
(35,printLine("Input is less than the length of the source string")
(36,data)
(37,1)
(38,"Input is less than the length of the source string")
(39,)
(40,char *)
(41,)
(42,dataPtr)
(43,strcpy(myString, HELLO_STRING)
(44,HELLO_STRING)
(45,-1)
(46,if (data > strlen(HELLO_STRING)
(47,myString = (char *)
(48,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^