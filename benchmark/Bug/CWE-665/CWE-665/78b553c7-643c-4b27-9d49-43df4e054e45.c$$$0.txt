-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_12_bad()
{
    double * data;
    double dataUninitArray[10];
    data = dataUninitArray;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
26,27
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
46,47
46,48
49,50
50,51
52,53
53,54
54,55
54,56
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
64,65
66,67
67,68
67,69
68,69
69,70
69,71
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
86,87
87,88
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
95,97
98,99
100,101
100,102
100,103
101,102
102,103
104,105
105,106
105,107
106,107
107,108
107,109
109,110
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
117,118
117,119
118,119
121,122
122,123
124,125
125,126
126,127
126,128
127,128
129,130
129,131
130,131
132,133
134,135
134,136
135,136
135,137
136,137
137,138
137,139
139,140
141,142
141,143
141,144
141,145
142,143
143,144
143,145
144,145
147,148
147,149
148,149
151,152
152,153
154,155
155,156
156,157
156,158
157,158
157,159
158,159
160,161
162,163
162,164
163,164
163,165
166,167
168,169
168,170
169,170
170,171
170,172
172,173
174,175
174,176
174,177
174,178
175,176
176,177
176,178
177,178
180,181
180,182
181,182
184,185
185,186
187,188
188,189
189,190
189,191
190,191
192,193
192,194
193,194
195,196
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,33,35,40,41,44,47,48,51,57,59,62,63,65,70,72,77,78,81,82,85,91,93,96,97,99,103,108,110,115,116,119,120,123,128,131,133,138,140,145,146,149,150,153,159,161,164,165,167,171,173,178,179,182,183,186,191,194,196
-----computeFrom-----
20,21
20,22
38,39
38,40
42,43
42,44
46,47
46,48
54,55
54,56
75,76
75,77
79,80
79,81
88,89
88,90
113,114
113,115
117,118
117,119
143,144
143,145
147,148
147,149
156,157
156,158
176,177
176,178
180,181
180,182
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_12_bad(){    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_declare_partial_init_12_bad
{    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
double dataUninitArray[10];
double dataUninitArray[10];
double
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(49,39,0)
(95,101,0)
(16,105,0)
(70,28,0)
(25,97,0)
(45,9,0)
(95,39,0)
(90,11,0)
(4,65,0)
(30,16,0)
(0,19,0)
(40,68,0)
(76,67,0)
(19,105,0)
(104,105,0)
(40,48,0)
(90,48,0)
(68,71,0)
(65,4,0)
(18,15,0)
(59,95,0)
(94,75,0)
(42,66,0)
(90,28,0)
(43,1,0)
(48,65,0)
(55,83,0)
(90,5,0)
(24,65,0)
(28,83,0)
(50,101,0)
(10,102,0)
(86,56,0)
(20,89,0)
(88,51,0)
(65,48,0)
(16,48,0)
(5,63,0)
(40,56,0)
(12,69,0)
(80,28,0)
(46,105,0)
(5,79,0)
(14,95,0)
(69,56,0)
(34,51,0)
(85,104,0)
(61,90,0)
(89,28,0)
(37,1,0)
(96,39,0)
(65,105,0)
(73,93,0)
(98,58,0)
(68,40,0)
(84,83,0)
(101,95,0)
(53,94,0)
(89,1,0)
(40,28,0)
(48,3,0)
(50,39,0)
(64,94,0)
(87,89,0)
(52,63,0)
(57,90,0)
(63,1,0)
(100,56,0)
(13,16,0)
(90,101,0)
(41,11,0)
(67,7,0)
(36,50,0)
(9,39,0)
(32,25,0)
(54,69,0)
(97,1,0)
(74,67,0)
(89,5,0)
(31,83,0)
(17,83,0)
(63,52,0)
(35,40,0)
(15,77,0)
(38,25,0)
(47,93,0)
(97,25,0)
(44,39,0)
(33,50,0)
(72,15,0)
(50,28,0)
(22,40,0)
(40,5,0)
(93,102,0)
(6,19,0)
(81,96,0)
(92,10,0)
(57,29,0)
(90,57,0)
(23,105,0)
(2,9,0)
(60,1,0)
(95,14,0)
(66,11,0)
(58,56,0)
(91,37,0)
(78,63,0)
(26,97,0)
(51,11,0)
(101,8,0)
(82,11,0)
(103,10,0)
(16,28,0)
(99,90,0)
(63,5,0)
(50,39,1)
(86,100,1)
(58,98,1)
(66,42,1)
(43,60,1)
(69,12,1)
(38,32,1)
(26,1,1)
(2,45,1)
(95,14,1)
(9,39,1)
(51,34,1)
(89,87,1)
(40,5,1)
(65,24,1)
(90,5,1)
(62,19,1)
(19,0,1)
(95,59,1)
(100,62,1)
(16,30,1)
(33,36,1)
(63,1,1)
(65,105,1)
(19,105,1)
(88,11,1)
(40,56,1)
(49,62,1)
(20,97,1)
(44,49,1)
(85,48,1)
(16,105,1)
(95,39,1)
(90,48,1)
(96,81,1)
(6,105,1)
(34,88,1)
(63,78,1)
(12,54,1)
(70,80,1)
(37,1,1)
(96,39,1)
(60,27,1)
(23,27,1)
(24,16,1)
(6,104,1)
(28,70,1)
(54,58,1)
(82,41,1)
(97,1,1)
(30,13,1)
(90,28,1)
(87,20,1)
(61,51,1)
(78,89,1)
(104,105,1)
(25,38,1)
(54,56,1)
(37,91,1)
(22,69,1)
(56,86,1)
(91,5,1)
(89,28,1)
(99,61,1)
(101,95,1)
(97,25,1)
(5,63,1)
(26,37,1)
(21,51,1)
(35,22,1)
(9,2,1)
(40,28,1)
(57,90,1)
(48,65,1)
(21,69,1)
(90,101,1)
(42,57,1)
(50,28,1)
(39,44,1)
(90,11,1)
(66,11,1)
(62,97,1)
(45,39,1)
(13,19,1)
(58,56,1)
(36,9,1)
(11,82,1)
(81,101,1)
(50,33,1)
(51,11,1)
(40,48,1)
(88,66,1)
(27,28,1)
(0,6,1)
(40,35,1)
(63,52,1)
(32,26,1)
(45,96,1)
(59,50,1)
(65,4,1)
(98,68,1)
(69,56,1)
(90,99,1)
(104,85,1)
(68,40,1)
(1,43,1)
(16,28,1)
(89,1,1)
(105,46,1)
(41,9,1)
(46,23,1)
(30,19,2)
(9,9,2)
(61,51,2)
(50,39,2)
(54,69,2)
(40,48,2)
(85,19,2)
(40,56,2)
(32,27,2)
(95,14,2)
(97,25,2)
(78,97,2)
(5,97,2)
(24,19,2)
(46,27,2)
(25,97,2)
(101,95,2)
(13,19,2)
(5,63,2)
(36,9,2)
(88,62,2)
(98,69,2)
(66,11,2)
(90,51,2)
(41,62,2)
(20,97,2)
(104,105,2)
(54,62,2)
(57,51,2)
(40,69,2)
(40,28,2)
(90,101,2)
(50,9,2)
(12,62,2)
(90,48,2)
(38,97,2)
(97,27,2)
(91,97,2)
(69,69,2)
(48,19,2)
(40,5,2)
(96,9,2)
(51,51,2)
(2,9,2)
(89,97,2)
(68,40,2)
(16,19,2)
(25,27,2)
(42,51,2)
(69,62,2)
(65,4,2)
(34,51,2)
(0,27,2)
(65,105,2)
(43,27,2)
(68,69,2)
(66,51,2)
(51,11,2)
(95,9,2)
(104,19,2)
(63,52,2)
(90,5,2)
(49,62,2)
(57,90,2)
(81,9,2)
(51,62,2)
(37,1,2)
(19,27,2)
(45,9,2)
(56,62,2)
(38,27,2)
(99,51,2)
(39,62,2)
(22,69,2)
(32,97,2)
(9,62,2)
(100,62,2)
(58,69,2)
(59,9,2)
(63,1,2)
(105,27,2)
(12,69,2)
(33,9,2)
(44,62,2)
(6,27,2)
(37,97,2)
(95,39,2)
(2,62,2)
(96,39,2)
(97,1,2)
(9,39,2)
(50,28,2)
(65,19,2)
(87,97,2)
(26,27,2)
(35,69,2)
(58,56,2)
(0,19,2)
(86,62,2)
(19,19,2)
(16,105,2)
(101,9,2)
(89,1,2)
(82,62,2)
(34,62,2)
(90,28,2)
(45,62,2)
(26,97,2)
(6,19,2)
(16,28,2)
(90,11,2)
(19,105,2)
(97,97,2)
(89,28,2)
(63,97,2)
(48,65,2)
(88,51,2)
(1,27,2)
(69,56,2)
(11,62,2)
(60,27,2)
(23,27,2)
-----------------------------------
(0,10)
(1,i=0)
(2,10)
(3,)
(4,double)
(5,data[i] = (double)
(6,i)
(7,)
(8,)
(9,i<10)
(10,)
(11,i=0)
(12,10)
(13,data)
(14,double)
(15,)
(16,data[i])
(17,if(globalReturnsTrueOrFalse()
(18,for(i=0; i<10; i++)
(19,i<10)
(20,data)
(21,RET)
(22,data)
(23,i)
(24,i)
(25,10/2)
(26,i)
(27,globalReturnsTrueOrFalse()
(28,data = dataUninitArray)
(29,)
(30,i)
(31,dataUninitArray)
(32,10)
(33,i)
(34,10)
(35,i)
(36,data)
(37,i++)
(38,2)
(39,i=0)
(40,data[i])
(41,i)
(42,i)
(43,0)
(44,0)
(45,i)
(46,0)
(47,i)
(48,data[i] = (double)
(49,i)
(50,data[i])
(51,i<10)
(52,double)
(53,for(i=0; i<(10/2)
(54,i)
(55,data)
(56,i=0)
(57,printDoubleLine(data[i])
(58,i++)
(59,i)
(60,i)
(61,data)
(62,globalReturnsTrueOrFalse()
(63,(double)
(64,i)
(65,(double)
(66,i++)
(67,)
(68,printDoubleLine(data[i])
(69,i<10)
(70,dataUninitArray)
(71,)
(72,i)
(73,for(i=0; i<10; i++)
(74,for(i=0; i<10; i++)
(75,)
(76,i)
(77,)
(78,i)
(79,)
(80,data)
(81,i)
(82,0)
(83,)
(84,if(globalReturnsTrueOrFalse()
(85,i)
(86,0)
(87,i)
(88,i)
(89,data[i])
(90,data[i])
(91,i)
(92,for(i=0; i<10; i++)
(93,)
(94,)
(95,(double)
(96,i++)
(97,i<(10/2)
(98,i)
(99,i)
(100,i)
(101,data[i] = (double)
(102,)
(103,i)
(104,i++)
(105,i=0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^