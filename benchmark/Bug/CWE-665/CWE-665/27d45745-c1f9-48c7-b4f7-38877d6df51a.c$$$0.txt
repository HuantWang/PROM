-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_06_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
52,53
52,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
74,75
77,78
78,79
78,80
79,80
80,81
80,82
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
97,98
98,99
99,100
99,101
100,101
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,34,39,41,46,47,50,53,54,57,63,65,68,69,71,75,76,81,83,88,89,92,93,96,101,104,106
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
48,49
48,50
52,53
52,54
60,61
60,62
73,74
73,75
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_06_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_06_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_06_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(45,48,0)
(22,17,0)
(6,29,0)
(51,43,0)
(16,24,0)
(37,48,0)
(38,27,0)
(23,57,0)
(13,38,0)
(32,19,0)
(33,8,0)
(21,57,0)
(47,52,0)
(58,29,0)
(54,27,0)
(26,54,0)
(28,39,0)
(30,29,0)
(6,21,0)
(54,29,0)
(33,38,0)
(19,29,0)
(36,55,0)
(12,44,0)
(0,24,0)
(2,52,0)
(9,57,0)
(43,24,0)
(15,24,0)
(52,2,0)
(3,21,0)
(50,6,0)
(36,40,0)
(40,36,0)
(20,2,0)
(27,54,0)
(25,57,0)
(39,41,0)
(55,36,0)
(17,55,0)
(11,0,0)
(38,24,0)
(38,33,0)
(56,39,0)
(49,52,0)
(14,54,0)
(54,14,0)
(48,4,0)
(38,21,0)
(5,34,0)
(1,22,0)
(46,0,0)
(55,17,0)
(17,22,0)
(18,17,0)
(36,21,0)
(53,44,0)
(7,34,0)
(27,42,0)
(31,38,0)
(6,27,0)
(21,36,0)
(2,29,0)
(10,6,0)
(30,34,1)
(55,17,1)
(0,11,1)
(44,53,1)
(36,40,1)
(35,0,1)
(2,52,1)
(6,29,1)
(21,36,1)
(52,49,1)
(47,20,1)
(50,10,1)
(12,34,1)
(43,51,1)
(34,5,1)
(1,18,1)
(20,29,1)
(20,19,1)
(12,2,1)
(2,29,1)
(18,3,1)
(54,26,1)
(46,24,1)
(38,27,1)
(38,21,1)
(49,47,1)
(29,58,1)
(0,24,1)
(43,24,1)
(22,1,1)
(53,12,1)
(35,44,1)
(54,14,1)
(38,24,1)
(32,27,1)
(15,16,1)
(54,29,1)
(38,13,1)
(19,32,1)
(7,21,1)
(46,43,1)
(58,30,1)
(36,55,1)
(6,50,1)
(13,31,1)
(51,33,1)
(26,6,1)
(33,38,1)
(11,46,1)
(17,22,1)
(6,21,1)
(31,0,1)
(16,44,1)
(27,54,1)
(19,29,1)
(24,15,1)
(10,2,1)
(5,7,1)
(19,29,2)
(17,22,2)
(55,17,2)
(46,0,2)
(20,2,2)
(38,21,2)
(32,2,2)
(15,44,2)
(13,0,2)
(27,54,2)
(27,2,2)
(0,24,2)
(2,2,2)
(36,55,2)
(2,52,2)
(24,44,2)
(49,34,2)
(38,0,2)
(11,44,2)
(47,34,2)
(20,34,2)
(47,2,2)
(31,0,2)
(2,29,2)
(49,2,2)
(51,0,2)
(54,14,2)
(36,40,2)
(19,2,2)
(52,34,2)
(6,2,2)
(58,34,2)
(50,2,2)
(26,2,2)
(52,2,2)
(21,36,2)
(11,0,2)
(33,38,2)
(43,0,2)
(38,24,2)
(46,44,2)
(33,0,2)
(16,44,2)
(54,2,2)
(0,44,2)
(6,21,2)
(54,29,2)
(0,0,2)
(29,34,2)
(43,24,2)
(6,29,2)
(38,27,2)
(10,2,2)
(2,34,2)
(30,34,2)
-----------------------------------
(0,i<10)
(1,double)
(2,i<(10/2)
(3,data)
(4,)
(5,5)
(6,data[i])
(7,STATIC_CONST_FIVE)
(8,)
(9,if(STATIC_CONST_FIVE==5)
(10,data)
(11,10)
(12,STATIC_CONST_FIVE)
(13,i)
(14,double)
(15,0)
(16,i)
(17,10*sizeof(double)
(18,10)
(19,i++)
(20,i)
(21,data = (double *)
(22,sizeof(double)
(23,data)
(24,i=0)
(25,if(STATIC_CONST_FIVE==5)
(26,i)
(27,data[i] = (double)
(28,i)
(29,i=0)
(30,i)
(31,data)
(32,i)
(33,printDoubleLine(data[i])
(34,STATIC_CONST_FIVE==5)
(35,RET)
(36,(double *)
(37,for(i=0; i<10; i++)
(38,data[i])
(39,)
(40,double *)
(41,)
(42,)
(43,i++)
(44,STATIC_CONST_FIVE==5)
(45,i)
(46,i)
(47,10)
(48,)
(49,2)
(50,i)
(51,i)
(52,10/2)
(53,5)
(54,(double)
(55,ALLOCA(10*sizeof(double)
(56,for(i=0; i<(10/2)
(57,)
(58,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^