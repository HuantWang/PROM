-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_06_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,49,52,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
54,95
49,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_06_bad(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_06_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_06_bad
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(7,35,0)
(53,22,0)
(13,42,0)
(38,52,0)
(44,5,0)
(29,6,0)
(15,52,0)
(30,33,0)
(45,6,0)
(39,53,0)
(9,43,0)
(10,6,0)
(26,52,0)
(21,40,0)
(36,48,0)
(50,48,0)
(4,7,0)
(44,24,0)
(29,31,0)
(37,10,0)
(20,42,0)
(30,9,0)
(5,44,0)
(10,40,0)
(54,10,0)
(31,29,0)
(51,9,0)
(33,52,0)
(35,7,0)
(2,11,0)
(25,33,0)
(23,37,0)
(0,5,0)
(55,40,0)
(18,10,0)
(17,35,0)
(3,21,0)
(28,33,0)
(14,30,0)
(6,10,0)
(6,29,0)
(7,33,0)
(31,33,0)
(8,54,0)
(31,41,0)
(42,34,0)
(6,45,0)
(32,55,0)
(1,40,0)
(21,10,0)
(49,55,0)
(12,37,0)
(55,10,0)
(46,11,0)
(9,30,0)
(47,31,0)
(41,31,0)
(54,40,0)
(27,9,0)
(19,41,0)
(5,0,1)
(36,50,1)
(19,47,1)
(9,30,1)
(12,10,1)
(48,36,1)
(29,31,1)
(44,5,1)
(32,37,1)
(46,2,1)
(53,39,1)
(25,28,1)
(49,32,1)
(3,54,1)
(27,11,1)
(7,35,1)
(30,14,1)
(11,46,1)
(31,33,1)
(21,3,1)
(37,10,1)
(39,7,1)
(4,48,1)
(23,12,1)
(10,6,1)
(6,29,1)
(47,18,1)
(33,25,1)
(35,17,1)
(7,33,1)
(50,9,1)
(16,21,1)
(32,44,1)
(54,8,1)
(14,51,1)
(16,48,1)
(37,23,1)
(8,55,1)
(30,33,1)
(21,10,1)
(2,33,1)
(55,10,1)
(50,11,1)
(31,41,1)
(17,4,1)
(18,7,1)
(6,45,1)
(55,49,1)
(41,19,1)
(16,53,1)
(54,10,1)
(51,27,1)
(0,37,1)
(21,10,2)
(19,7,2)
(54,10,2)
(37,10,2)
(23,7,2)
(44,5,2)
(9,11,2)
(3,7,2)
(54,7,2)
(31,7,2)
(14,11,2)
(7,35,2)
(12,7,2)
(31,41,2)
(18,7,2)
(8,7,2)
(47,7,2)
(30,33,2)
(32,7,2)
(0,37,2)
(10,7,2)
(10,6,2)
(27,11,2)
(55,7,2)
(21,7,2)
(29,31,2)
(7,33,2)
(6,29,2)
(35,48,2)
(55,10,2)
(31,33,2)
(44,37,2)
(39,7,2)
(51,11,2)
(9,30,2)
(5,37,2)
(53,7,2)
(7,48,2)
(41,7,2)
(4,48,2)
(37,7,2)
(17,48,2)
(6,7,2)
(6,45,2)
(30,11,2)
(49,7,2)
(29,7,2)
-----------------------------------
(0,1)
(1,if (myString == NULL)
(2,STATIC_CONST_FIVE)
(3,myString)
(4,data)
(5,-1)
(6,(wchar_t *)
(7,data > wcslen(HELLO_STRING)
(8,myString)
(9,fscanf(stdin, "%zu", &data)
(10,myString = (wchar_t *)
(11,STATIC_CONST_FIVE==5)
(12,myString)
(13,if (data > wcslen(HELLO_STRING)
(14,data)
(15,data)
(16,RET)
(17,HELLO_STRING)
(18,myString)
(19,wchar_t)
(20,myString)
(21,free(myString)
(22,)
(23,NULL)
(24,)
(25,0)
(26,if(STATIC_CONST_FIVE==5)
(27,stdin)
(28,data)
(29,malloc(data*sizeof(wchar_t)
(30,&data)
(31,data*sizeof(wchar_t)
(32,myString)
(33,data = 0)
(34,)
(35,wcslen(HELLO_STRING)
(36,5)
(37,myString == NULL)
(38,if(STATIC_CONST_FIVE==5)
(39,"Input is less than the length of the source string")
(40,)
(41,sizeof(wchar_t)
(42,)
(43,)
(44,exit(-1)
(45,wchar_t *)
(46,5)
(47,data)
(48,STATIC_CONST_FIVE==5)
(49,HELLO_STRING)
(50,STATIC_CONST_FIVE)
(51,"%zu")
(52,)
(53,printLine("Input is less than the length of the source string")
(54,printWLine(myString)
(55,wcscpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^