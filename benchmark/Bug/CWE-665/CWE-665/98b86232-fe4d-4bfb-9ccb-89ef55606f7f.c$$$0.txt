-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_15_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i] = (double)i;
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printDoubleLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
45,49
45,50
45,51
46,47
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
86,87
87,88
87,89
88,89
92,93
92,94
94,95
94,96
94,97
94,98
94,99
94,100
95,96
97,98
97,99
98,99
99,100
99,101
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
109,110
109,111
110,111
113,114
114,115
116,117
117,118
118,119
118,120
119,120
121,122
121,123
122,123
124,125
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,47,51,53,58,59,62,65,66,69,75,77,80,81,83,84,85,89,90,91,93,96,100,102,107,108,111,112,115,120,123,125,126,127,131,132,133
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
105,106
105,107
109,110
109,111
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_15_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_15_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i] = (double)i;        }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printDoubleLine(data[i]);        }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(21,13,0)
(61,63,0)
(13,37,0)
(40,22,0)
(12,13,0)
(33,52,0)
(25,3,0)
(37,44,0)
(30,50,0)
(69,2,0)
(32,6,0)
(50,34,0)
(11,57,0)
(3,59,0)
(64,46,0)
(59,3,0)
(39,23,0)
(0,43,0)
(60,15,0)
(41,23,0)
(46,47,0)
(46,64,0)
(45,43,0)
(19,2,0)
(5,36,0)
(56,66,0)
(16,73,0)
(36,37,0)
(36,23,0)
(68,46,0)
(9,28,0)
(37,73,0)
(29,61,0)
(10,27,0)
(58,39,0)
(73,6,0)
(66,43,0)
(38,39,0)
(47,34,0)
(54,63,0)
(31,6,0)
(36,5,0)
(34,47,0)
(13,6,0)
(22,2,0)
(42,36,0)
(34,50,0)
(62,43,0)
(13,68,0)
(20,27,0)
(68,27,0)
(17,73,0)
(1,66,0)
(70,43,0)
(57,23,0)
(15,6,0)
(55,23,0)
(65,68,0)
(63,6,0)
(47,46,0)
(35,52,0)
(74,22,0)
(7,2,0)
(73,17,0)
(59,51,0)
(52,68,0)
(24,69,0)
(53,2,0)
(4,27,0)
(49,36,0)
(46,68,0)
(28,43,0)
(14,61,0)
(67,2,0)
(8,27,0)
(63,61,0)
(36,68,0)
(18,34,0)
(5,48,0)
(73,37,0)
(15,6,1)
(52,68,1)
(13,6,1)
(61,14,1)
(50,30,1)
(42,49,1)
(52,35,1)
(58,57,1)
(32,26,1)
(36,23,1)
(34,50,1)
(46,64,1)
(35,33,1)
(59,3,1)
(68,46,1)
(46,47,1)
(36,42,1)
(31,32,1)
(58,23,1)
(36,37,1)
(45,39,1)
(73,17,1)
(70,28,1)
(71,70,1)
(39,23,1)
(63,6,1)
(13,12,1)
(11,5,1)
(55,72,1)
(6,31,1)
(57,11,1)
(12,21,1)
(41,55,1)
(33,68,1)
(7,63,1)
(72,7,1)
(13,68,1)
(72,67,1)
(73,16,1)
(54,15,1)
(30,18,1)
(60,37,1)
(67,69,1)
(16,13,1)
(29,54,1)
(63,61,1)
(26,52,1)
(14,29,1)
(24,26,1)
(28,9,1)
(15,60,1)
(18,65,1)
(71,45,1)
(26,59,1)
(69,24,1)
(47,34,1)
(3,25,1)
(21,63,1)
(39,38,1)
(73,6,1)
(49,39,1)
(36,68,1)
(37,73,1)
(25,52,1)
(38,58,1)
(9,72,1)
(57,23,1)
(5,36,1)
(23,41,1)
(54,6,1)
(73,63,2)
(5,36,2)
(60,63,2)
(54,63,2)
(25,52,2)
(45,72,2)
(42,39,2)
(73,17,2)
(36,39,2)
(31,26,2)
(7,26,2)
(63,6,2)
(59,52,2)
(6,26,2)
(24,26,2)
(47,34,2)
(49,39,2)
(38,39,2)
(57,23,2)
(39,23,2)
(46,64,2)
(37,63,2)
(52,68,2)
(39,72,2)
(12,63,2)
(54,26,2)
(58,39,2)
(23,72,2)
(13,6,2)
(63,63,2)
(69,26,2)
(21,63,2)
(16,63,2)
(13,63,2)
(14,63,2)
(5,39,2)
(61,63,2)
(34,50,2)
(32,26,2)
(70,72,2)
(13,68,2)
(36,37,2)
(46,47,2)
(57,39,2)
(36,23,2)
(39,39,2)
(73,6,2)
(59,3,2)
(3,52,2)
(36,68,2)
(68,46,2)
(61,26,2)
(37,73,2)
(15,63,2)
(58,72,2)
(63,26,2)
(28,72,2)
(67,26,2)
(29,63,2)
(15,6,2)
(14,26,2)
(9,72,2)
(63,61,2)
(29,26,2)
(11,39,2)
(38,72,2)
(55,72,2)
(41,72,2)
-----------------------------------
(0,default:)
(1,for(i=0; i<10; i++)
(2,)
(3,-1)
(4,switch(7)
(5,printDoubleLine(data[i])
(6,i=0)
(7,break;)
(8,if (data == NULL)
(9,"Benign, fixed string")
(10,switch(6)
(11,i)
(12,i)
(13,data[i])
(14,2)
(15,i++)
(16,i)
(17,double)
(18,10)
(19,case 6:)
(20,data)
(21,data)
(22,)
(23,i=0)
(24,"Benign, fixed string")
(25,1)
(26,6)
(27,)
(28,printLine("Benign, fixed string")
(29,10)
(30,double)
(31,0)
(32,i)
(33,data)
(34,10*sizeof(double)
(35,NULL)
(36,data[i])
(37,data[i] = (double)
(38,10)
(39,i<10)
(40,for(i=0; i<(10/2)
(41,0)
(42,i)
(43,)
(44,)
(45,break;)
(46,(double *)
(47,malloc(10*sizeof(double)
(48,)
(49,data)
(50,sizeof(double)
(51,)
(52,data == NULL)
(53,default:)
(54,i)
(55,i)
(56,i)
(57,i++)
(58,i)
(59,exit(-1)
(60,i)
(61,10/2)
(62,case 7:)
(63,i<(10/2)
(64,double *)
(65,data)
(66,)
(67,break;)
(68,data = (double *)
(69,printLine("Benign, fixed string")
(70,break;)
(71,RET)
(72,7)
(73,(double)
(74,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^