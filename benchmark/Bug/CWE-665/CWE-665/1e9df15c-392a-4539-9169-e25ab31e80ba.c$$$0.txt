-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_15_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printDoubleLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
45,49
45,50
45,51
46,47
51,52
52,53
52,54
53,54
57,58
57,59
59,60
59,61
59,62
59,63
59,64
59,65
60,61
62,63
62,64
63,64
64,65
64,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
78,79
79,80
81,82
82,83
83,84
83,85
84,85
86,87
86,88
87,88
89,90
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,47,48,49,50,54,55,56,58,61,65,67,72,73,76,77,80,85,88,90,91,92,96,97,98
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
70,71
70,72
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_15_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_15_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printDoubleLine(data[i]);        }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(1,44,0)
(33,36,0)
(0,45,0)
(25,39,0)
(28,45,0)
(49,21,0)
(8,49,0)
(23,44,0)
(43,3,0)
(34,4,0)
(9,11,0)
(41,6,0)
(3,21,0)
(21,45,0)
(6,41,0)
(48,44,0)
(38,4,0)
(8,46,0)
(2,11,0)
(52,1,0)
(35,1,0)
(36,5,0)
(7,30,0)
(17,49,0)
(39,41,0)
(16,6,0)
(10,41,0)
(34,13,0)
(25,21,0)
(53,11,0)
(29,32,0)
(49,8,0)
(40,25,0)
(26,21,0)
(21,25,0)
(19,49,0)
(15,30,0)
(24,44,0)
(27,3,0)
(22,45,0)
(12,9,0)
(49,5,0)
(47,5,0)
(25,40,0)
(50,44,0)
(41,39,0)
(14,45,0)
(39,25,0)
(20,11,0)
(32,44,0)
(4,34,0)
(42,5,0)
(18,11,0)
(30,5,0)
(29,37,1)
(36,33,1)
(7,5,1)
(5,42,1)
(3,21,1)
(36,5,1)
(15,7,1)
(32,29,1)
(12,31,1)
(31,34,1)
(25,39,1)
(42,47,1)
(51,50,1)
(16,10,1)
(37,20,1)
(39,41,1)
(47,37,1)
(20,9,1)
(19,17,1)
(7,36,1)
(25,40,1)
(21,25,1)
(49,21,1)
(43,21,1)
(31,3,1)
(8,49,1)
(34,4,1)
(37,18,1)
(49,5,1)
(30,15,1)
(27,43,1)
(9,12,1)
(18,31,1)
(30,5,1)
(3,27,1)
(17,30,1)
(41,6,1)
(49,19,1)
(33,8,1)
(23,30,1)
(50,32,1)
(6,16,1)
(4,38,1)
(38,3,1)
(51,23,1)
(10,26,1)
(3,21,2)
(42,37,2)
(7,37,2)
(25,39,2)
(8,49,2)
(19,30,2)
(30,37,2)
(34,3,2)
(30,30,2)
(8,30,2)
(47,37,2)
(5,37,2)
(49,5,2)
(49,30,2)
(29,37,2)
(30,5,2)
(34,4,2)
(39,41,2)
(36,5,2)
(12,31,2)
(18,31,2)
(32,37,2)
(9,31,2)
(17,30,2)
(41,6,2)
(25,40,2)
(20,31,2)
(15,30,2)
(33,30,2)
(21,25,2)
(49,21,2)
(15,37,2)
(4,3,2)
(38,3,2)
(23,37,2)
(36,30,2)
(7,30,2)
(50,37,2)
-----------------------------------
(0,data)
(1,)
(2,case 6:)
(3,data == NULL)
(4,-1)
(5,i=0)
(6,sizeof(double)
(7,i)
(8,printDoubleLine(data[i])
(9,printLine("Benign, fixed string")
(10,10)
(11,)
(12,"Benign, fixed string")
(13,)
(14,switch(6)
(15,10)
(16,double)
(17,data)
(18,break;)
(19,i)
(20,break;)
(21,data = (double *)
(22,switch(7)
(23,break;)
(24,default:)
(25,(double *)
(26,data)
(27,NULL)
(28,if (data == NULL)
(29,"Benign, fixed string")
(30,i<10)
(31,6)
(32,printLine("Benign, fixed string")
(33,i)
(34,exit(-1)
(35,for(i=0; i<10; i++)
(36,i++)
(37,7)
(38,1)
(39,malloc(10*sizeof(double)
(40,double *)
(41,10*sizeof(double)
(42,0)
(43,data)
(44,)
(45,)
(46,)
(47,i)
(48,case 7:)
(49,data[i])
(50,break;)
(51,RET)
(52,i)
(53,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^