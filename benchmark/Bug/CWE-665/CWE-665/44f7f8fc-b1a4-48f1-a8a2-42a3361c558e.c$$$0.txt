-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_04_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,29,31,34,39,41,46,47,50,51,54,59,63,65,66,70,74,76,77
-----computeFrom-----
22,23
22,24
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_04_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_04_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(16,1,0)
(29,34,0)
(10,33,0)
(24,0,0)
(14,35,0)
(21,14,0)
(35,4,0)
(30,1,0)
(0,24,0)
(11,1,0)
(5,29,0)
(24,4,0)
(9,1,0)
(26,4,0)
(35,30,0)
(7,29,0)
(20,24,0)
(23,4,0)
(31,26,0)
(2,1,0)
(35,14,0)
(32,4,0)
(24,30,0)
(12,4,0)
(6,35,0)
(28,30,0)
(0,3,0)
(3,33,0)
(18,24,0)
(19,23,0)
(17,0,0)
(14,10,0)
(10,14,0)
(22,30,0)
(3,0,0)
(15,23,0)
(13,35,0)
(23,4,1)
(20,23,1)
(26,31,1)
(15,26,1)
(26,4,1)
(3,0,1)
(19,15,1)
(24,4,1)
(4,12,1)
(27,8,1)
(8,30,1)
(25,23,1)
(24,18,1)
(13,6,1)
(14,21,1)
(10,14,1)
(0,24,1)
(35,13,1)
(18,20,1)
(23,19,1)
(12,32,1)
(14,35,1)
(17,24,1)
(25,27,1)
(32,27,1)
(30,28,1)
(35,4,1)
(31,10,1)
(0,17,1)
(35,30,1)
(28,22,1)
(15,4,1)
(6,3,1)
(21,35,1)
(24,30,1)
(4,27,2)
(23,27,2)
(35,4,2)
(32,27,2)
(35,30,2)
(19,23,2)
(6,23,2)
(23,23,2)
(18,23,2)
(24,23,2)
(20,23,2)
(3,0,2)
(0,23,2)
(10,14,2)
(24,4,2)
(26,4,2)
(24,30,2)
(3,23,2)
(26,23,2)
(12,27,2)
(10,23,2)
(35,23,2)
(19,27,2)
(15,23,2)
(0,24,2)
(14,35,2)
(23,4,2)
(21,23,2)
(17,23,2)
(31,23,2)
(14,23,2)
(15,27,2)
(13,23,2)
-----------------------------------
(0,data[i].intOne)
(1,)
(2,if(STATIC_CONST_TRUE)
(3,printIntLine(data[i].intOne)
(4,i=0)
(5,for(i=0; i<10; i++)
(6,data)
(7,i)
(8,STATIC_CONST_TRUE)
(9,dataUninitArray)
(10,printIntLine(data[i].intTwo)
(11,if(STATIC_CONST_TRUE)
(12,0)
(13,i)
(14,data[i].intTwo)
(15,i)
(16,data)
(17,intOne)
(18,i)
(19,10)
(20,data)
(21,intTwo)
(22,data)
(23,i<10)
(24,data[i])
(25,RET)
(26,i++)
(27,STATIC_CONST_TRUE)
(28,dataUninitArray)
(29,)
(30,data = dataUninitArray)
(31,i)
(32,i)
(33,)
(34,)
(35,data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^