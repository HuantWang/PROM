-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(51,52,0)
(9,22,0)
(50,17,0)
(27,39,0)
(36,18,0)
(38,11,0)
(23,11,0)
(49,25,0)
(10,44,0)
(42,43,0)
(21,25,0)
(41,14,0)
(19,44,0)
(30,3,0)
(17,46,0)
(44,22,0)
(2,19,0)
(53,39,0)
(45,22,0)
(16,44,0)
(45,44,0)
(14,3,0)
(24,41,0)
(6,52,0)
(12,17,0)
(19,22,0)
(28,29,0)
(29,8,0)
(51,32,0)
(3,40,0)
(20,44,0)
(18,15,0)
(48,15,0)
(36,43,0)
(13,18,0)
(7,20,0)
(10,22,0)
(18,36,0)
(44,43,0)
(14,25,0)
(15,18,0)
(5,14,0)
(26,45,0)
(25,11,0)
(3,30,0)
(14,41,0)
(43,44,0)
(33,10,0)
(1,0,0)
(43,42,0)
(37,11,0)
(34,0,0)
(52,51,0)
(18,3,0)
(43,36,0)
(31,10,0)
(18,25,0)
(35,20,0)
(47,3,0)
(10,31,1)
(30,47,1)
(43,36,1)
(19,2,1)
(47,0,1)
(44,43,1)
(45,44,1)
(24,5,1)
(31,33,1)
(53,27,1)
(18,15,1)
(35,7,1)
(26,10,1)
(20,44,1)
(4,29,1)
(52,6,1)
(34,1,1)
(1,25,1)
(16,14,1)
(49,21,1)
(18,25,1)
(41,24,1)
(15,48,1)
(13,16,1)
(27,3,1)
(33,20,1)
(19,44,1)
(48,13,1)
(18,3,1)
(39,53,1)
(7,44,1)
(36,18,1)
(28,14,1)
(45,26,1)
(0,34,1)
(3,30,1)
(10,44,1)
(43,42,1)
(25,49,1)
(20,35,1)
(4,19,1)
(33,51,1)
(51,52,1)
(14,41,1)
(5,39,1)
(4,39,1)
(29,28,1)
(6,20,1)
(14,3,1)
(14,25,1)
(2,45,1)
(27,0,1)
(41,39,2)
(5,39,2)
(3,30,2)
(14,3,2)
(44,14,2)
(47,0,2)
(28,14,2)
(52,20,2)
(10,44,2)
(24,39,2)
(48,14,2)
(15,14,2)
(14,39,2)
(44,43,2)
(13,14,2)
(51,20,2)
(45,44,2)
(29,14,2)
(14,25,2)
(51,52,2)
(26,14,2)
(18,25,2)
(19,14,2)
(43,14,2)
(36,18,2)
(43,36,2)
(10,14,2)
(33,14,2)
(18,14,2)
(18,3,2)
(18,15,2)
(20,14,2)
(30,0,2)
(45,14,2)
(20,44,2)
(31,14,2)
(36,14,2)
(14,41,2)
(6,20,2)
(3,0,2)
(7,14,2)
(43,42,2)
(19,44,2)
(2,14,2)
(16,14,2)
(35,14,2)
-----------------------------------
(0,STATIC_CONST_FIVE==5)
(1,STATIC_CONST_FIVE)
(2,myString)
(3,data = rand()
(4,RET)
(5,data)
(6,1)
(7,myString)
(8,)
(9,if (myString == NULL)
(10,strcpy(myString, HELLO_STRING)
(11,)
(12,myString)
(13,data)
(14,data > strlen(HELLO_STRING)
(15,sizeof(char)
(16,myString)
(17,)
(18,data*sizeof(char)
(19,free(myString)
(20,myString == NULL)
(21,data)
(22,)
(23,if(STATIC_CONST_FIVE==5)
(24,HELLO_STRING)
(25,data = 0)
(26,myString)
(27,STATIC_CONST_FIVE)
(28,"Input is less than the length of the source string")
(29,printLine("Input is less than the length of the source string")
(30,rand()
(31,HELLO_STRING)
(32,)
(33,myString)
(34,5)
(35,NULL)
(36,malloc(data*sizeof(char)
(37,data)
(38,if(STATIC_CONST_FIVE==5)
(39,STATIC_CONST_FIVE==5)
(40,)
(41,strlen(HELLO_STRING)
(42,char *)
(43,(char *)
(44,myString = (char *)
(45,printLine(myString)
(46,)
(47,data)
(48,char)
(49,0)
(50,if (data > strlen(HELLO_STRING)
(51,exit(-1)
(52,-1)
(53,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^