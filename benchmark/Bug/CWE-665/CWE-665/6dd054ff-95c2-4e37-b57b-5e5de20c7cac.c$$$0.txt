-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
    /* dereference dataPtr into data */
    twoIntsStruct * data = (*dataPtr);
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,44,46,51,52,55,56,59,64,68,70,71,75,79,81,82
-----computeFrom-----
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink(void * dataVoidPtr)
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct
twoIntsStruct
* * dataPtr = (twoIntsStruct * *)dataVoidPtr
*
*
dataPtr
= (twoIntsStruct * *)dataVoidPtr
(twoIntsStruct * *)dataVoidPtr
twoIntsStruct * *
twoIntsStruct
twoIntsStruct
* *
*
*
dataVoidPtr
dataVoidPtr
twoIntsStruct * data = (*dataPtr);
twoIntsStruct * data = (*dataPtr);
twoIntsStruct
twoIntsStruct
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(25,3,0)
(28,7,0)
(23,37,0)
(7,28,0)
(24,19,0)
(17,27,0)
(10,20,0)
(32,22,0)
(5,28,0)
(27,4,0)
(13,2,0)
(29,17,0)
(35,26,0)
(32,0,0)
(12,35,0)
(27,17,0)
(9,22,0)
(21,19,0)
(15,35,0)
(3,20,0)
(28,20,0)
(11,20,0)
(7,1,0)
(33,28,0)
(18,7,0)
(31,20,0)
(30,27,0)
(22,32,0)
(17,2,0)
(35,12,0)
(34,4,0)
(37,4,0)
(1,7,0)
(22,3,0)
(14,3,0)
(36,4,0)
(19,20,0)
(35,2,0)
(6,10,0)
(2,4,0)
(1,0,0)
(3,27,0)
(2,35,0)
(3,22,0)
(28,27,0)
(8,37,0)
(10,20,1)
(2,35,1)
(14,19,1)
(17,2,1)
(7,18,1)
(35,15,1)
(9,3,1)
(35,26,1)
(25,14,1)
(3,27,1)
(6,1,1)
(11,27,1)
(32,22,1)
(28,27,1)
(22,9,1)
(28,5,1)
(1,7,1)
(3,20,1)
(31,11,1)
(17,29,1)
(16,19,1)
(22,3,1)
(10,6,1)
(33,32,1)
(5,33,1)
(19,20,1)
(21,20,1)
(19,24,1)
(3,25,1)
(15,13,1)
(18,28,1)
(7,28,1)
(24,21,1)
(20,31,1)
(30,2,1)
(35,12,1)
(28,20,1)
(27,17,1)
(21,10,1)
(29,30,1)
(5,19,2)
(21,19,2)
(22,3,2)
(24,19,2)
(27,17,2)
(3,27,2)
(32,19,2)
(22,19,2)
(14,19,2)
(28,20,2)
(19,20,2)
(6,19,2)
(7,28,2)
(10,19,2)
(35,26,2)
(9,19,2)
(3,19,2)
(33,19,2)
(1,19,2)
(1,7,2)
(35,12,2)
(3,20,2)
(17,2,2)
(19,19,2)
(7,19,2)
(28,19,2)
(10,20,2)
(28,27,2)
(2,35,2)
(32,22,2)
(18,19,2)
(25,19,2)
-----------------------------------
(0,)
(1,printIntLine(data[i].intTwo)
(2,* * dataPtr = (twoIntsStruct * *)
(3,data[i])
(4,)
(5,i)
(6,i)
(7,data[i].intTwo)
(8,i)
(9,intOne)
(10,i++)
(11,i)
(12,twoIntsStruct * *)
(13,dataPtr)
(14,data)
(15,dataVoidPtr)
(16,RET)
(17,*dataPtr)
(18,intTwo)
(19,i<10)
(20,i=0)
(21,i)
(22,data[i].intOne)
(23,for(i=0; i<10; i++)
(24,10)
(25,i)
(26,void * dataVoidPtr)
(27,* data = (*dataPtr)
(28,data[i])
(29,dataPtr)
(30,data)
(31,0)
(32,printIntLine(data[i].intOne)
(33,data)
(34,data)
(35,(twoIntsStruct * *)
(36,dataPtr)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^