-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_03_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
34,35
36,37
36,38
37,38
37,39
40,41
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,33,35,38,39,44,46,51,52,55,56,59,64,67,69
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
37,38
37,39
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_03_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_03_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(28,10,0)
(22,34,0)
(29,28,0)
(6,14,0)
(12,33,0)
(5,11,0)
(12,18,0)
(36,25,0)
(8,11,0)
(27,9,0)
(18,34,0)
(16,11,0)
(20,7,0)
(34,14,0)
(4,28,0)
(19,11,0)
(12,19,0)
(18,12,0)
(30,26,0)
(14,34,0)
(13,10,0)
(1,30,0)
(3,19,0)
(33,12,0)
(2,30,0)
(28,19,0)
(34,18,0)
(21,10,0)
(17,9,0)
(28,4,0)
(9,10,0)
(35,13,0)
(32,10,0)
(31,28,0)
(19,12,0)
(4,0,0)
(15,7,0)
(24,25,0)
(35,4,1)
(29,31,1)
(19,12,1)
(24,36,1)
(17,27,1)
(9,10,1)
(21,25,1)
(28,10,1)
(10,32,1)
(14,6,1)
(23,9,1)
(23,25,1)
(31,9,1)
(28,29,1)
(27,13,1)
(28,19,1)
(15,20,1)
(6,22,1)
(27,10,1)
(4,28,1)
(13,10,1)
(13,35,1)
(12,33,1)
(36,7,1)
(18,34,1)
(9,17,1)
(22,3,1)
(34,14,1)
(20,19,1)
(32,21,1)
(7,15,1)
(25,24,1)
(12,18,1)
(28,19,2)
(17,25,2)
(29,9,2)
(12,33,2)
(9,10,2)
(31,9,2)
(27,9,2)
(32,25,2)
(35,9,2)
(13,10,2)
(4,28,2)
(9,9,2)
(4,9,2)
(34,14,2)
(28,9,2)
(27,25,2)
(12,18,2)
(9,25,2)
(28,10,2)
(17,9,2)
(19,12,2)
(10,25,2)
(21,25,2)
(13,9,2)
(18,34,2)
-----------------------------------
(0,)
(1,i)
(2,for(i=0; i<10; i++)
(3,data)
(4,printIntLine(data[i])
(5,if(5==5)
(6,int)
(7,5==5)
(8,if(5==5)
(9,i<10)
(10,i=0)
(11,)
(12,(int *)
(13,i++)
(14,sizeof(int)
(15,5)
(16,data)
(17,10)
(18,ALLOCA(10*sizeof(int)
(19,data = (int *)
(20,5)
(21,i)
(22,10)
(23,RET)
(24,5)
(25,5==5)
(26,)
(27,i)
(28,data[i])
(29,i)
(30,)
(31,data)
(32,0)
(33,int *)
(34,10*sizeof(int)
(35,i)
(36,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^