-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_04_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
53,54
53,55
56,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
66,67
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
80,81
82,83
82,84
83,84
85,86
86,87
86,88
87,88
88,89
88,90
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,40,42,47,48,51,54,55,58,65,67,68,70,76,78,79,81,84,89,91,96,97,100,101,104,109,113,115,116,120,124,126,127
-----computeFrom-----
14,15
14,16
26,27
26,28
45,46
45,47
49,50
49,51
53,54
53,55
61,62
61,63
72,73
72,74
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_04_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_04_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(56,44,0)
(29,38,0)
(62,49,0)
(69,28,0)
(20,68,0)
(59,62,0)
(69,49,0)
(35,69,0)
(39,30,0)
(7,57,0)
(9,38,0)
(18,39,0)
(59,55,0)
(37,9,0)
(30,38,0)
(63,69,0)
(68,50,0)
(33,14,0)
(24,2,0)
(48,51,0)
(60,54,0)
(53,23,0)
(6,32,0)
(43,17,0)
(15,7,0)
(55,54,0)
(28,8,0)
(16,38,0)
(14,31,0)
(49,2,0)
(25,8,0)
(50,68,0)
(32,38,0)
(65,57,0)
(32,23,0)
(23,32,0)
(36,62,0)
(68,31,0)
(39,8,0)
(47,55,0)
(27,49,0)
(41,50,0)
(62,59,0)
(52,32,0)
(30,39,0)
(55,12,0)
(21,62,0)
(30,49,0)
(39,18,0)
(28,69,0)
(62,54,0)
(64,4,0)
(19,30,0)
(23,55,0)
(32,49,0)
(7,54,0)
(26,4,0)
(49,14,0)
(43,23,0)
(14,49,0)
(1,2,0)
(10,51,0)
(40,46,0)
(51,38,0)
(67,30,0)
(14,33,0)
(4,34,0)
(11,59,0)
(8,54,0)
(23,43,0)
(46,61,0)
(31,68,0)
(18,17,0)
(45,54,0)
(69,54,0)
(31,14,0)
(44,54,0)
(0,2,0)
(3,57,0)
(57,7,0)
(13,28,0)
(22,39,0)
(66,46,0)
(8,12,0)
(6,52,1)
(58,42,1)
(32,6,1)
(14,33,1)
(69,54,1)
(25,28,1)
(39,30,1)
(30,49,1)
(20,27,1)
(38,16,1)
(29,58,1)
(31,68,1)
(7,57,1)
(15,44,1)
(47,59,1)
(50,41,1)
(3,15,1)
(44,56,1)
(62,54,1)
(55,54,1)
(57,65,1)
(10,9,1)
(69,63,1)
(13,69,1)
(30,38,1)
(51,38,1)
(30,19,1)
(52,51,1)
(42,49,1)
(5,58,1)
(53,32,1)
(41,20,1)
(23,32,1)
(21,36,1)
(62,49,1)
(39,8,1)
(58,7,1)
(39,22,1)
(10,38,1)
(59,62,1)
(8,54,1)
(43,23,1)
(8,25,1)
(63,35,1)
(28,13,1)
(55,47,1)
(67,43,1)
(51,48,1)
(16,29,1)
(37,18,1)
(22,30,1)
(54,60,1)
(56,8,1)
(32,38,1)
(35,55,1)
(45,42,1)
(9,38,1)
(48,10,1)
(68,50,1)
(23,55,1)
(65,3,1)
(60,45,1)
(7,54,1)
(14,31,1)
(62,21,1)
(15,54,1)
(32,49,1)
(23,53,1)
(44,54,1)
(18,39,1)
(49,14,1)
(69,49,1)
(28,69,1)
(11,62,1)
(5,51,1)
(19,67,1)
(36,7,1)
(59,11,1)
(9,37,1)
(15,42,2)
(8,54,2)
(29,58,2)
(22,51,2)
(62,54,2)
(7,42,2)
(32,38,2)
(69,54,2)
(23,51,2)
(25,7,2)
(19,51,2)
(13,7,2)
(57,7,2)
(6,51,2)
(31,68,2)
(56,7,2)
(55,7,2)
(62,7,2)
(49,14,2)
(14,33,2)
(39,30,2)
(51,58,2)
(67,51,2)
(32,51,2)
(23,55,2)
(3,42,2)
(9,51,2)
(35,7,2)
(7,57,2)
(32,49,2)
(23,32,2)
(51,38,2)
(69,7,2)
(10,58,2)
(59,7,2)
(28,7,2)
(8,7,2)
(45,42,2)
(39,8,2)
(38,58,2)
(18,39,2)
(30,49,2)
(48,51,2)
(9,38,2)
(7,54,2)
(30,51,2)
(44,7,2)
(18,51,2)
(63,7,2)
(47,7,2)
(65,42,2)
(15,7,2)
(69,49,2)
(21,7,2)
(60,42,2)
(59,62,2)
(52,51,2)
(44,54,2)
(11,7,2)
(57,42,2)
(10,51,2)
(54,42,2)
(53,51,2)
(28,69,2)
(65,7,2)
(39,51,2)
(37,51,2)
(7,7,2)
(48,58,2)
(55,54,2)
(14,31,2)
(30,38,2)
(16,58,2)
(43,51,2)
(68,50,2)
(62,49,2)
(36,7,2)
(51,51,2)
(43,23,2)
(3,7,2)
-----------------------------------
(0,data)
(1,if(STATIC_CONST_TRUE)
(2,)
(3,10)
(4,)
(5,RET)
(6,i)
(7,i<(10/2)
(8,data[i].intTwo = i)
(9,i++)
(10,i)
(11,intOne)
(12,)
(13,intTwo)
(14,(twoIntsStruct *)
(15,i)
(16,0)
(17,)
(18,printIntLine(data[i].intTwo)
(19,i)
(20,10)
(21,i)
(22,intTwo)
(23,data[i].intOne)
(24,if(STATIC_CONST_TRUE)
(25,i)
(26,i)
(27,data)
(28,data[i].intTwo)
(29,i)
(30,data[i])
(31,ALLOCA(10*sizeof(twoIntsStruct)
(32,data[i])
(33,twoIntsStruct *)
(34,)
(35,data)
(36,data)
(37,i)
(38,i=0)
(39,data[i].intTwo)
(40,for(i=0; i<(10/2)
(41,twoIntsStruct)
(42,STATIC_CONST_TRUE)
(43,printIntLine(data[i].intOne)
(44,i++)
(45,i)
(46,)
(47,i)
(48,10)
(49,data = (twoIntsStruct *)
(50,sizeof(twoIntsStruct)
(51,i<10)
(52,data)
(53,intOne)
(54,i=0)
(55,data[i].intOne = i)
(56,i)
(57,10/2)
(58,STATIC_CONST_TRUE)
(59,data[i].intOne)
(60,0)
(61,)
(62,data[i])
(63,i)
(64,for(i=0; i<10; i++)
(65,2)
(66,i)
(67,data)
(68,10*sizeof(twoIntsStruct)
(69,data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^