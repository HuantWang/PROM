-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
192,193
192,194
193,194
193,195
194,195
196,197
198,199
199,200
200,201
200,202
201,202
203,204
205,206
206,207
207,208
207,209
208,209
211,212
211,213
211,214
212,213
213,214
215,216
216,217
216,218
217,218
218,219
218,220
220,221
220,222
223,224
223,225
223,226
224,225
224,226
225,226
227,228
227,229
228,229
230,231
232,233
232,234
232,235
232,236
232,237
233,234
234,235
234,236
235,236
237,238
237,239
238,239
238,240
240,241
242,243
242,244
243,244
245,246
245,247
246,247
248,249
249,250
249,251
252,253
252,254
253,254
253,255
254,255
256,257
258,259
259,260
260,261
260,262
261,262
263,264
265,266
266,267
266,268
266,269
267,268
269,270
271,272
273,274
274,275
274,276
275,276
277,278
279,280
280,281
280,282
281,282
283,284
285,286
286,287
287,288
287,289
288,289
291,292
292,293
292,294
293,294
294,295
294,296
296,297
296,298
299,300
299,301
299,302
300,301
300,302
301,302
301,303
302,303
304,305
304,306
305,306
307,308
309,310
309,311
310,311
313,314
313,315
313,316
313,317
313,318
314,315
315,316
315,317
316,317
318,319
318,320
319,320
319,321
321,322
323,324
323,325
324,325
326,327
326,328
327,328
329,330
330,331
330,332
333,334
333,335
334,335
334,336
335,336
337,338
339,340
340,341
341,342
341,343
342,343
344,345
346,347
347,348
347,349
347,350
348,349
350,351
352,353
354,355
355,356
355,357
356,357
358,359
360,361
361,362
361,363
362,363
364,365
366,367
367,368
368,369
368,370
369,370
-----nextToken-----
2,4,9,11,15,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,189,190,191,195,197,202,204,209,210,214,219,221,222,226,229,231,236,239,241,244,247,250,251,255,257,262,264,268,270,272,276,278,282,284,289,290,295,297,298,303,306,308,311,312,317,320,322,325,328,331,332,336,338,343,345,349,351,353,357,359,363,365,370,371
-----computeFrom-----
13,14
13,15
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
193,194
193,195
207,208
207,209
224,225
224,226
234,235
234,236
245,246
245,247
253,254
253,255
300,301
300,302
301,302
301,303
309,310
309,311
315,316
315,317
326,327
326,328
334,335
334,336
-----guardedBy-----
195,204
231,272
226,247
308,353
311,328
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(27,165,0)
(76,40,0)
(183,45,0)
(200,85,0)
(35,21,0)
(94,0,0)
(104,97,0)
(62,111,0)
(165,75,0)
(8,47,0)
(78,156,0)
(206,137,0)
(114,182,0)
(172,20,0)
(131,82,0)
(154,135,0)
(14,151,0)
(95,148,0)
(53,148,0)
(148,203,0)
(11,96,0)
(21,142,0)
(17,20,0)
(96,97,0)
(16,37,0)
(141,119,0)
(89,142,0)
(96,203,0)
(110,97,0)
(194,177,0)
(153,110,0)
(128,207,0)
(189,171,0)
(96,177,0)
(171,135,0)
(88,137,0)
(127,150,0)
(146,82,0)
(69,123,0)
(192,28,0)
(160,47,0)
(15,28,0)
(38,207,0)
(202,182,0)
(184,142,0)
(140,199,0)
(74,64,0)
(22,50,0)
(42,203,0)
(89,136,0)
(105,210,0)
(104,100,0)
(69,32,0)
(139,137,0)
(150,163,0)
(68,89,0)
(42,66,0)
(196,136,0)
(3,117,0)
(177,96,0)
(159,79,0)
(46,0,0)
(107,31,0)
(198,20,0)
(55,210,0)
(195,47,0)
(42,174,0)
(171,142,0)
(89,190,0)
(66,42,0)
(82,201,0)
(167,125,0)
(48,137,0)
(82,99,0)
(116,20,0)
(59,113,0)
(28,173,0)
(33,5,0)
(65,72,0)
(110,203,0)
(157,165,0)
(97,111,0)
(86,142,0)
(87,142,0)
(75,142,0)
(32,104,0)
(132,210,0)
(118,106,0)
(191,119,0)
(103,99,0)
(47,21,0)
(32,69,0)
(77,40,0)
(125,21,0)
(168,104,0)
(33,142,0)
(149,119,0)
(166,87,0)
(25,97,0)
(92,142,0)
(60,20,0)
(5,33,0)
(210,20,0)
(99,74,0)
(67,142,0)
(185,93,0)
(190,89,0)
(150,158,0)
(42,184,0)
(158,150,0)
(58,127,0)
(151,201,0)
(159,24,0)
(133,20,0)
(182,202,0)
(135,171,0)
(207,178,0)
(79,159,0)
(174,74,0)
(4,203,0)
(102,47,0)
(47,8,0)
(69,137,0)
(10,142,0)
(84,189,0)
(81,139,0)
(44,30,0)
(126,94,0)
(73,203,0)
(21,47,0)
(136,89,0)
(115,45,0)
(57,50,0)
(124,189,0)
(211,125,0)
(110,53,0)
(53,110,0)
(156,21,0)
(50,188,0)
(93,79,0)
(63,190,0)
(205,75,0)
(105,155,0)
(180,133,0)
(159,9,0)
(56,40,0)
(45,210,0)
(174,42,0)
(150,127,0)
(83,8,0)
(29,0,0)
(101,20,0)
(112,163,0)
(105,75,0)
(109,20,0)
(208,158,0)
(148,184,0)
(121,48,0)
(203,161,0)
(36,71,0)
(110,153,0)
(175,67,0)
(100,104,0)
(152,142,0)
(20,52,0)
(96,184,0)
(202,187,0)
(164,42,0)
(162,156,0)
(91,30,0)
(18,148,0)
(42,97,0)
(50,21,0)
(54,65,0)
(99,201,0)
(176,153,0)
(169,20,0)
(125,188,0)
(148,97,0)
(188,125,0)
(2,20,0)
(12,201,0)
(37,145,0)
(134,111,0)
(47,75,0)
(34,105,0)
(85,79,0)
(43,48,0)
(74,99,0)
(0,94,0)
(139,13,0)
(30,13,0)
(137,13,0)
(61,193,0)
(75,40,0)
(7,5,0)
(24,159,0)
(144,97,0)
(30,137,0)
(40,75,0)
(204,23,0)
(138,8,0)
(79,85,0)
(51,100,0)
(143,66,0)
(1,9,0)
(151,99,0)
(145,142,0)
(88,13,0)
(98,54,0)
(90,36,0)
(74,174,0)
(137,69,0)
(9,159,0)
(65,54,0)
(170,127,0)
(184,119,0)
(6,23,0)
(110,184,0)
(186,13,0)
(49,88,0)
(104,32,0)
(26,37,0)
(123,69,0)
(119,184,0)
(113,201,0)
(104,184,0)
(80,133,0)
(163,150,0)
(64,74,0)
(70,130,0)
(113,99,0)
(79,75,0)
(197,111,0)
(39,110,0)
(94,33,0)
(129,145,0)
(148,53,0)
(209,79,0)
(156,67,0)
(181,184,0)
(45,75,0)
(19,87,0)
(79,93,0)
(188,50,0)
(117,120,0)
(23,99,0)
(104,203,0)
(105,210,1)
(103,96,1)
(143,164,1)
(105,75,1)
(194,11,1)
(113,99,1)
(151,14,1)
(54,98,1)
(108,117,1)
(196,165,1)
(11,41,1)
(159,9,1)
(39,41,1)
(117,3,1)
(42,97,1)
(171,135,1)
(110,184,1)
(180,80,1)
(211,21,1)
(104,100,1)
(133,180,1)
(36,90,1)
(53,148,1)
(119,141,1)
(202,182,1)
(148,184,1)
(61,163,1)
(30,44,1)
(146,202,1)
(18,110,1)
(82,99,1)
(47,8,1)
(70,188,1)
(5,7,1)
(188,50,1)
(97,25,1)
(9,1,1)
(127,58,1)
(37,16,1)
(147,184,1)
(3,53,1)
(184,119,1)
(69,123,1)
(165,75,1)
(45,210,1)
(177,194,1)
(29,46,1)
(104,97,1)
(78,188,1)
(48,137,1)
(162,78,1)
(79,85,1)
(150,127,1)
(124,84,1)
(41,122,1)
(49,139,1)
(131,146,1)
(65,54,1)
(190,63,1)
(205,87,1)
(19,163,1)
(182,114,1)
(57,125,1)
(98,48,1)
(89,190,1)
(183,147,1)
(122,45,1)
(168,206,1)
(74,64,1)
(170,210,1)
(34,45,1)
(156,162,1)
(104,184,1)
(139,137,1)
(58,170,1)
(47,160,1)
(164,103,1)
(79,159,1)
(149,191,1)
(210,132,1)
(94,126,1)
(115,183,1)
(77,56,1)
(151,99,1)
(166,19,1)
(167,211,1)
(154,189,1)
(165,157,1)
(140,122,1)
(4,73,1)
(148,95,1)
(122,105,1)
(21,47,1)
(121,137,1)
(188,125,1)
(14,113,1)
(126,0,1)
(170,147,1)
(137,69,1)
(183,61,1)
(26,89,1)
(85,200,1)
(112,150,1)
(163,150,1)
(41,140,1)
(47,75,1)
(204,6,1)
(110,153,1)
(108,88,1)
(95,18,1)
(81,30,1)
(153,176,1)
(125,21,1)
(176,39,1)
(7,94,1)
(22,57,1)
(148,203,1)
(16,26,1)
(42,203,1)
(209,171,1)
(159,24,1)
(107,165,1)
(87,166,1)
(82,131,1)
(96,184,1)
(203,4,1)
(118,93,1)
(45,115,1)
(135,154,1)
(42,184,1)
(93,185,1)
(156,21,1)
(102,195,1)
(191,181,1)
(157,27,1)
(110,203,1)
(73,179,1)
(96,97,1)
(56,205,1)
(41,203,1)
(132,55,1)
(91,65,1)
(50,22,1)
(141,149,1)
(114,23,1)
(6,99,1)
(51,168,1)
(44,91,1)
(174,42,1)
(63,68,1)
(88,137,1)
(148,97,1)
(40,76,1)
(183,107,1)
(74,174,1)
(8,138,1)
(150,158,1)
(160,8,1)
(105,34,1)
(23,204,1)
(43,121,1)
(136,196,1)
(68,136,1)
(0,29,1)
(206,53,1)
(93,79,1)
(139,81,1)
(83,102,1)
(66,143,1)
(79,75,1)
(69,32,1)
(91,48,1)
(158,208,1)
(125,167,1)
(35,93,1)
(32,104,1)
(183,70,1)
(145,129,1)
(88,49,1)
(25,144,1)
(48,43,1)
(96,177,1)
(76,77,1)
(129,37,1)
(94,0,1)
(183,118,1)
(67,175,1)
(195,35,1)
(27,75,1)
(75,40,1)
(1,209,1)
(42,66,1)
(23,99,1)
(90,96,1)
(33,5,1)
(108,36,1)
(185,79,1)
(100,51,1)
(181,67,1)
(55,133,1)
(110,97,1)
(53,110,1)
(113,59,1)
(96,203,1)
(208,127,1)
(99,74,1)
(175,156,1)
(46,145,1)
(59,82,1)
(30,137,1)
(89,136,1)
(104,203,1)
(189,124,1)
(200,159,1)
(146,23,1)
(108,151,1)
(163,112,1)
(84,33,1)
(138,83,1)
(179,97,1)
(80,179,1)
(50,21,1)
(45,75,1)
(21,47,2)
(206,53,2)
(47,8,2)
(209,165,2)
(78,188,2)
(7,165,2)
(105,75,2)
(104,53,2)
(151,96,2)
(168,53,2)
(89,136,2)
(53,148,2)
(26,165,2)
(148,110,2)
(87,163,2)
(203,179,2)
(5,165,2)
(183,179,2)
(65,54,2)
(163,179,2)
(159,165,2)
(33,165,2)
(56,163,2)
(118,93,2)
(133,179,2)
(79,75,2)
(189,165,2)
(79,85,2)
(129,165,2)
(119,188,2)
(202,23,2)
(35,93,2)
(148,184,2)
(174,96,2)
(99,96,2)
(42,96,2)
(94,0,2)
(184,119,2)
(126,165,2)
(42,97,2)
(98,48,2)
(157,163,2)
(79,165,2)
(160,93,2)
(1,165,2)
(49,53,2)
(95,110,2)
(96,97,2)
(149,188,2)
(9,165,2)
(171,135,2)
(205,163,2)
(148,97,2)
(45,210,2)
(99,74,2)
(154,165,2)
(55,179,2)
(156,188,2)
(170,179,2)
(21,93,2)
(113,96,2)
(105,210,2)
(125,21,2)
(163,150,2)
(127,147,2)
(188,125,2)
(84,165,2)
(150,158,2)
(131,96,2)
(93,79,2)
(58,147,2)
(88,53,2)
(47,75,2)
(54,48,2)
(167,93,2)
(110,203,2)
(93,165,2)
(30,137,2)
(50,125,2)
(208,179,2)
(194,41,2)
(65,48,2)
(110,153,2)
(132,179,2)
(182,23,2)
(73,179,2)
(91,53,2)
(151,99,2)
(139,53,2)
(141,188,2)
(3,53,2)
(188,93,2)
(100,53,2)
(177,41,2)
(74,96,2)
(4,179,2)
(184,188,2)
(33,5,2)
(16,165,2)
(165,163,2)
(74,64,2)
(43,53,2)
(136,165,2)
(48,137,2)
(32,104,2)
(67,188,2)
(63,165,2)
(42,184,2)
(53,41,2)
(23,99,2)
(19,163,2)
(164,96,2)
(68,165,2)
(0,165,2)
(112,179,2)
(107,165,2)
(180,179,2)
(147,188,2)
(195,93,2)
(158,179,2)
(163,147,2)
(137,69,2)
(104,184,2)
(83,93,2)
(140,122,2)
(104,100,2)
(69,32,2)
(158,147,2)
(148,203,2)
(196,165,2)
(51,53,2)
(176,41,2)
(159,9,2)
(23,96,2)
(204,96,2)
(70,188,2)
(174,42,2)
(90,96,2)
(96,184,2)
(125,93,2)
(110,97,2)
(40,163,2)
(138,93,2)
(53,110,2)
(211,93,2)
(156,21,2)
(112,147,2)
(104,97,2)
(191,188,2)
(82,99,2)
(77,163,2)
(102,93,2)
(110,184,2)
(188,50,2)
(190,165,2)
(14,96,2)
(79,159,2)
(66,96,2)
(81,53,2)
(124,165,2)
(150,179,2)
(11,41,2)
(58,179,2)
(96,41,2)
(139,137,2)
(96,203,2)
(76,163,2)
(36,96,2)
(114,23,2)
(69,123,2)
(143,96,2)
(104,203,2)
(175,188,2)
(110,41,2)
(45,179,2)
(117,53,2)
(210,179,2)
(48,53,2)
(32,53,2)
(45,75,2)
(42,66,2)
(105,45,2)
(22,125,2)
(47,93,2)
(159,24,2)
(85,165,2)
(165,75,2)
(6,96,2)
(181,188,2)
(127,179,2)
(185,165,2)
(46,165,2)
(39,41,2)
(150,147,2)
(121,53,2)
(200,165,2)
(42,203,2)
(145,165,2)
(135,165,2)
(80,179,2)
(162,188,2)
(8,93,2)
(18,110,2)
(153,41,2)
(57,125,2)
(94,165,2)
(44,53,2)
(166,163,2)
(146,96,2)
(103,96,2)
(88,137,2)
(150,127,2)
(27,163,2)
(113,99,2)
(137,53,2)
(61,163,2)
(170,147,2)
(75,40,2)
(208,147,2)
(75,163,2)
(202,182,2)
(74,174,2)
(59,96,2)
(37,165,2)
(122,179,2)
(89,165,2)
(115,179,2)
(34,45,2)
(50,21,2)
(30,53,2)
(69,53,2)
(96,177,2)
(82,96,2)
(29,165,2)
(89,190,2)
(171,165,2)
-----------------------------------
(0,service.sin_addr)
(1,service)
(2,service)
(3,"Input is less than the length of the source string or too large")
(4,20)
(5,inet_addr(IP_ADDRESS)
(6,myString)
(7,IP_ADDRESS)
(8,CHAR_ARRAY_SIZE - 1)
(9,&service)
(10,if (connect(connectSocket, (struct sockaddr*)
(11,data)
(12,if (myString == NULL)
(13,)
(14,myString)
(15,if (data > strlen(HELLO_STRING)
(16,sin_family)
(17,recvResult)
(18,data)
(19,wsaDataInit)
(20,)
(21,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(22,0)
(23,myString == NULL)
(24,struct sockaddr*)
(25,0)
(26,service)
(27,connectSocket)
(28,)
(29,sin_addr)
(30,strcpy(myString, HELLO_STRING)
(31,)
(32,malloc(data*sizeof(char)
(33,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(34,connectSocket)
(35,recvResult)
(36,printLine("Input is less than the length of the source string")
(37,service.sin_family)
(38,if (data > strlen(HELLO_STRING)
(39,data)
(40,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(41,globalReturnsTrueOrFalse()
(42,data*sizeof(char)
(43,NULL)
(44,HELLO_STRING)
(45,connectSocket != INVALID_SOCKET)
(46,service)
(47,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(48,myString == NULL)
(49,myString)
(50,recvResult == 0)
(51,char)
(52,)
(53,data > strlen(HELLO_STRING)
(54,-1)
(55,connectSocket)
(56,AF_INET)
(57,recvResult)
(58,2)
(59,myString)
(60,connectSocket)
(61,break;)
(62,if(globalReturnsTrueOrFalse()
(63,service)
(64,char *)
(65,exit(-1)
(66,sizeof(char)
(67,inputBuffer[recvResult] = \'\\0\')
(68,0)
(69,(char *)
(70,break;)
(71,)
(72,)
(73,data)
(74,(char *)
(75,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(76,IPPROTO_TCP)
(77,SOCK_STREAM)
(78,inputBuffer)
(79,connect(connectSocket, (struct sockaddr*)
(80,wsaDataInit)
(81,myString)
(82,strcpy(myString, HELLO_STRING)
(83,CHAR_ARRAY_SIZE)
(84,service)
(85,sizeof(service)
(86,if (connectSocket == INVALID_SOCKET)
(87,wsaDataInit = 1)
(88,free(myString)
(89,memset(&service, 0, sizeof(service)
(90,"Input is less than the length of the source string")
(91,myString)
(92,if (recvResult == SOCKET_ERROR || recvResult == 0)
(93,connect(connectSocket, (struct sockaddr*)
(94,service.sin_addr.s_addr)
(95,100)
(96,data > strlen(HELLO_STRING)
(97,data = 0)
(98,1)
(99,myString = (char *)
(100,sizeof(char)
(101,wsaData)
(102,inputBuffer)
(103,myString)
(104,data*sizeof(char)
(105,CLOSE_SOCKET(connectSocket)
(106,)
(107,break;)
(108,RET)
(109,if (connectSocket != INVALID_SOCKET)
(110,data > strlen(HELLO_STRING)
(111,)
(112,NO_ERROR)
(113,printLine(myString)
(114,1)
(115,INVALID_SOCKET)
(116,inputBuffer)
(117,printLine("Input is less than the length of the source string or too large")
(118,break;)
(119,strtoul(inputBuffer, NULL, 0)
(120,)
(121,myString)
(122,wsaDataInit)
(123,char *)
(124,sin_port)
(125,recvResult == SOCKET_ERROR)
(126,s_addr)
(127,MAKEWORD(2,2)
(128,myString)
(129,AF_INET)
(130,)
(131,HELLO_STRING)
(132,INVALID_SOCKET)
(133,wsaDataInit = 0)
(134,if(globalReturnsTrueOrFalse()
(135,htons(TCP_PORT)
(136,&service)
(137,myString = (char *)
(138,1)
(139,printLine(myString)
(140,WSACleanup()
(141,0)
(142,)
(143,char)
(144,data)
(145,service.sin_family = AF_INET)
(146,myString)
(147,0)
(148,data < 100)
(149,NULL)
(150,WSAStartup(MAKEWORD(2,2)
(151,free(myString)
(152,if (WSAStartup(MAKEWORD(2,2)
(153,strlen(HELLO_STRING)
(154,TCP_PORT)
(155,)
(156,inputBuffer[recvResult])
(157,INVALID_SOCKET)
(158,&wsaData)
(159,(struct sockaddr*)
(160,0)
(161,)
(162,recvResult)
(163,WSAStartup(MAKEWORD(2,2)
(164,data)
(165,connectSocket == INVALID_SOCKET)
(166,1)
(167,SOCKET_ERROR)
(168,data)
(169,if (wsaDataInit)
(170,2)
(171,service.sin_port = htons(TCP_PORT)
(172,do)
(173,)
(174,malloc(data*sizeof(char)
(175,\'\\0\')
(176,HELLO_STRING)
(177,strlen(HELLO_STRING)
(178,)
(179,globalReturnsTrueOrFalse()
(180,0)
(181,data)
(182,-1)
(183,connectSocket)
(184,data = strtoul(inputBuffer, NULL, 0)
(185,SOCKET_ERROR)
(186,if (myString == NULL)
(187,)
(188,recvResult == SOCKET_ERROR || recvResult == 0)
(189,service.sin_port)
(190,sizeof(service)
(191,inputBuffer)
(192,myString)
(193,)
(194,HELLO_STRING)
(195,connectSocket)
(196,service)
(197,data)
(198,wsaDataInit)
(199,)
(200,service)
(201,)
(202,exit(-1)
(203,data = 20)
(204,NULL)
(205,connectSocket)
(206,myString)
(207,)
(208,wsaData)
(209,connectSocket)
(210,connectSocket = INVALID_SOCKET)
(211,recvResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^