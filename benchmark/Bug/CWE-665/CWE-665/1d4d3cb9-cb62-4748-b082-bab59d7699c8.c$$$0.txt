-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_12_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
30,33
31,32
32,33
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
58,59
58,60
59,60
59,61
60,61
62,63
64,65
66,67
66,68
66,69
67,68
68,69
70,71
71,72
71,73
72,73
73,74
73,75
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
103,104
103,105
105,106
107,108
107,109
107,110
107,111
108,109
109,110
109,111
110,111
113,114
113,115
114,115
117,118
118,119
120,121
121,122
122,123
122,124
123,124
123,125
124,125
126,127
128,129
130,131
130,132
131,132
132,133
132,134
134,135
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
142,143
142,144
143,144
146,147
147,148
149,150
150,151
151,152
151,153
152,153
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,47,48,51,52,55,61,63,65,69,74,76,81,82,85,86,89,94,97,99,104,106,111,112,115,116,119,125,127,129,133,135,140,141,144,145,148,153,156,158
-----computeFrom-----
13,14
13,15
24,25
24,26
45,46
45,47
49,50
49,51
58,59
58,60
79,80
79,81
83,84
83,85
109,110
109,111
113,114
113,115
122,123
122,124
138,139
138,140
142,143
142,144
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_12_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_12_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(55,66,0)
(39,54,0)
(37,70,0)
(62,58,0)
(80,30,0)
(32,37,0)
(51,56,0)
(24,82,0)
(79,60,0)
(63,58,0)
(58,63,0)
(60,52,0)
(1,37,0)
(15,66,0)
(58,82,0)
(63,13,0)
(64,51,0)
(1,68,0)
(14,42,0)
(64,70,0)
(37,36,0)
(0,35,0)
(45,70,0)
(45,51,0)
(12,64,0)
(81,35,0)
(47,18,0)
(6,45,0)
(8,45,0)
(76,66,0)
(82,58,0)
(78,17,0)
(57,70,0)
(6,10,0)
(45,35,0)
(38,3,0)
(26,50,0)
(16,51,0)
(53,80,0)
(19,36,0)
(84,52,0)
(83,64,0)
(45,42,0)
(41,36,0)
(50,35,0)
(2,36,0)
(17,30,0)
(75,13,0)
(27,38,0)
(51,52,0)
(43,74,0)
(46,52,0)
(40,46,0)
(9,52,0)
(20,18,0)
(37,1,0)
(42,74,0)
(13,63,0)
(48,80,0)
(5,81,0)
(22,36,0)
(70,13,0)
(61,45,0)
(45,6,0)
(4,60,0)
(25,2,0)
(34,74,0)
(59,37,0)
(33,74,0)
(73,41,0)
(13,75,0)
(65,39,0)
(44,35,0)
(33,70,0)
(33,42,0)
(13,70,0)
(77,81,0)
(72,74,0)
(49,17,0)
(70,66,0)
(7,2,0)
(37,51,0)
(11,33,0)
(31,33,0)
(18,74,0)
(42,69,0)
(71,72,0)
(23,38,0)
(28,39,0)
(64,52,0)
(37,70,1)
(37,51,1)
(18,74,1)
(45,35,1)
(7,25,1)
(64,70,1)
(77,35,1)
(59,2,1)
(24,62,1)
(0,18,1)
(21,2,1)
(47,74,1)
(67,29,1)
(33,11,1)
(9,84,1)
(6,45,1)
(13,63,1)
(72,71,1)
(45,51,1)
(60,52,1)
(46,52,1)
(45,8,1)
(41,36,1)
(42,74,1)
(19,67,1)
(45,42,1)
(18,20,1)
(41,73,1)
(35,44,1)
(44,0,1)
(67,60,1)
(46,40,1)
(71,42,1)
(82,24,1)
(81,35,1)
(37,36,1)
(2,7,1)
(77,50,1)
(52,9,1)
(84,29,1)
(36,22,1)
(83,60,1)
(42,14,1)
(4,46,1)
(40,51,1)
(50,26,1)
(14,33,1)
(43,67,1)
(58,82,1)
(29,70,1)
(70,13,1)
(72,74,1)
(5,77,1)
(37,32,1)
(1,37,1)
(81,5,1)
(25,41,1)
(2,36,1)
(12,83,1)
(11,31,1)
(26,6,1)
(73,1,1)
(47,72,1)
(33,70,1)
(63,58,1)
(20,47,1)
(8,61,1)
(16,64,1)
(51,16,1)
(4,52,1)
(34,43,1)
(60,79,1)
(61,81,1)
(45,70,1)
(13,75,1)
(64,12,1)
(62,57,1)
(64,52,1)
(31,18,1)
(51,52,1)
(32,59,1)
(22,19,1)
(74,34,1)
(21,81,1)
(25,36,1)
(33,74,1)
(50,35,1)
(79,4,1)
(40,60,2)
(14,18,2)
(5,81,2)
(50,35,2)
(33,74,2)
(64,70,2)
(52,29,2)
(37,2,2)
(58,82,2)
(37,36,2)
(72,74,2)
(34,67,2)
(37,51,2)
(6,81,2)
(32,2,2)
(33,18,2)
(37,70,2)
(7,67,2)
(45,35,2)
(79,60,2)
(12,60,2)
(4,60,2)
(7,2,2)
(19,67,2)
(81,67,2)
(20,67,2)
(22,67,2)
(44,67,2)
(71,18,2)
(59,2,2)
(31,18,2)
(0,67,2)
(77,81,2)
(4,29,2)
(6,45,2)
(63,58,2)
(1,37,2)
(47,18,2)
(13,63,2)
(51,60,2)
(18,67,2)
(60,52,2)
(2,67,2)
(13,75,2)
(60,29,2)
(18,18,2)
(46,52,2)
(41,2,2)
(61,81,2)
(50,81,2)
(43,67,2)
(18,74,2)
(35,67,2)
(72,18,2)
(51,52,2)
(2,36,2)
(46,60,2)
(42,74,2)
(47,67,2)
(64,60,2)
(45,42,2)
(1,2,2)
(36,67,2)
(8,81,2)
(45,70,2)
(77,67,2)
(79,29,2)
(45,51,2)
(5,67,2)
(25,67,2)
(60,60,2)
(26,81,2)
(81,81,2)
(84,29,2)
(41,36,2)
(81,35,2)
(64,52,2)
(9,29,2)
(2,2,2)
(11,18,2)
(25,2,2)
(42,18,2)
(83,60,2)
(73,2,2)
(20,18,2)
(74,67,2)
(16,60,2)
(45,81,2)
(70,13,2)
(33,70,2)
-----------------------------------
(0,i)
(1,printIntLine(data[i])
(2,i<10)
(3,)
(4,i)
(5,10)
(6,printIntLine(data[i])
(7,10)
(8,i)
(9,0)
(10,)
(11,i)
(12,i)
(13,(int *)
(14,i)
(15,data)
(16,i)
(17,)
(18,i<10)
(19,i)
(20,10)
(21,RET)
(22,0)
(23,i)
(24,int)
(25,i)
(26,i)
(27,for(i=0; i<10; i++)
(28,for(i=0; i<10; i++)
(29,globalReturnsTrueOrFalse()
(30,)
(31,data)
(32,i)
(33,data[i])
(34,0)
(35,i=0)
(36,i=0)
(37,data[i])
(38,)
(39,)
(40,i)
(41,i++)
(42,data[i] = i)
(43,i)
(44,0)
(45,data[i])
(46,i++)
(47,i)
(48,for(i=0; i<10; i++)
(49,for(i=0; i<10; i++)
(50,i++)
(51,data[i] = i)
(52,i=0)
(53,i)
(54,)
(55,if(globalReturnsTrueOrFalse()
(56,)
(57,data)
(58,10*sizeof(int)
(59,data)
(60,i<10)
(61,data)
(62,10)
(63,ALLOCA(10*sizeof(int)
(64,data[i])
(65,i)
(66,)
(67,globalReturnsTrueOrFalse()
(68,)
(69,)
(70,data = (int *)
(71,i)
(72,i++)
(73,i)
(74,i=0)
(75,int *)
(76,if(globalReturnsTrueOrFalse()
(77,i)
(78,i)
(79,10)
(80,)
(81,i<10)
(82,sizeof(int)
(83,data)
(84,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^