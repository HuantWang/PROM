-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
    /* dereference dataPtr into data */
    twoIntsStruct * data = (*dataPtr);
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,44,46,51,52,55,56,59,64,68,70,71,75,79,81,82
-----computeFrom-----
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink(void * dataVoidPtr)
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct
twoIntsStruct
* * dataPtr = (twoIntsStruct * *)dataVoidPtr
*
*
dataPtr
= (twoIntsStruct * *)dataVoidPtr
(twoIntsStruct * *)dataVoidPtr
twoIntsStruct * *
twoIntsStruct
twoIntsStruct
* *
*
*
dataVoidPtr
dataVoidPtr
twoIntsStruct * data = (*dataPtr);
twoIntsStruct * data = (*dataPtr);
twoIntsStruct
twoIntsStruct
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(16,24,0)
(27,6,0)
(8,16,0)
(37,34,0)
(4,36,0)
(17,8,0)
(35,0,0)
(31,8,0)
(33,2,0)
(2,33,0)
(8,19,0)
(8,0,0)
(10,26,0)
(34,37,0)
(30,33,0)
(1,29,0)
(12,16,0)
(14,24,0)
(15,34,0)
(33,6,0)
(16,25,0)
(37,25,0)
(2,26,0)
(6,16,0)
(19,10,0)
(24,16,0)
(13,0,0)
(24,37,0)
(32,6,0)
(34,28,0)
(9,19,0)
(20,0,0)
(6,0,0)
(5,29,0)
(21,25,0)
(6,33,0)
(29,0,0)
(7,25,0)
(18,36,0)
(36,25,0)
(22,37,0)
(10,19,0)
(11,34,0)
(23,35,0)
(34,11,0)
(19,8,0)
(9,8,1)
(20,13,1)
(6,32,1)
(32,27,1)
(1,35,1)
(24,14,1)
(16,24,1)
(6,0,1)
(5,1,1)
(12,37,1)
(23,10,1)
(37,34,1)
(1,0,1)
(35,0,1)
(2,33,1)
(10,19,1)
(8,0,1)
(13,16,1)
(30,6,1)
(17,31,1)
(33,30,1)
(34,15,1)
(33,6,1)
(0,20,1)
(24,37,1)
(15,22,1)
(27,29,1)
(29,0,1)
(8,16,1)
(6,16,1)
(14,12,1)
(35,23,1)
(19,9,1)
(29,5,1)
(19,8,1)
(34,11,1)
(31,2,1)
(8,17,1)
(3,29,1)
(34,28,1)
(35,29,2)
(29,0,2)
(2,29,2)
(9,29,2)
(17,29,2)
(8,0,2)
(19,8,2)
(32,29,2)
(34,11,2)
(37,34,2)
(8,16,2)
(23,29,2)
(10,29,2)
(24,37,2)
(31,29,2)
(10,19,2)
(27,29,2)
(6,0,2)
(29,29,2)
(1,29,2)
(2,33,2)
(19,29,2)
(30,29,2)
(6,29,2)
(34,28,2)
(35,0,2)
(33,29,2)
(33,6,2)
(6,16,2)
(5,29,2)
(8,29,2)
(16,24,2)
-----------------------------------
(0,i=0)
(1,i)
(2,printIntLine(data[i].intOne)
(3,RET)
(4,for(i=0; i<10; i++)
(5,10)
(6,data[i])
(7,dataPtr)
(8,data[i])
(9,intTwo)
(10,printIntLine(data[i].intTwo)
(11,twoIntsStruct * *)
(12,data)
(13,i)
(14,dataPtr)
(15,dataVoidPtr)
(16,* data = (*dataPtr)
(17,i)
(18,i)
(19,data[i].intTwo)
(20,0)
(21,data)
(22,dataPtr)
(23,i)
(24,*dataPtr)
(25,)
(26,)
(27,data)
(28,void * dataVoidPtr)
(29,i<10)
(30,intOne)
(31,data)
(32,i)
(33,data[i].intOne)
(34,(twoIntsStruct * *)
(35,i++)
(36,)
(37,* * dataPtr = (twoIntsStruct * *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^