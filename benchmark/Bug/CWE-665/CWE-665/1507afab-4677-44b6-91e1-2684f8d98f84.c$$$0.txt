-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
34,35
34,36
34,37
35,36
35,37
36,37
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,9,11,15,16,20,22,23,26,30,32,33,37,40,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
13,14
13,15
35,36
35,37
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
42,83
37,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_01_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(29,22,0)
(18,30,0)
(38,15,0)
(1,6,0)
(19,38,0)
(2,24,0)
(30,17,0)
(44,24,0)
(14,13,0)
(5,35,0)
(32,9,0)
(45,22,0)
(4,5,0)
(32,14,0)
(3,15,0)
(32,21,0)
(21,32,0)
(15,22,0)
(13,26,0)
(10,44,0)
(38,22,0)
(7,0,0)
(31,45,0)
(15,13,0)
(0,33,0)
(36,9,0)
(26,13,0)
(6,39,0)
(24,33,0)
(13,15,0)
(28,33,0)
(14,32,0)
(25,22,0)
(35,5,0)
(25,15,0)
(44,9,0)
(23,1,0)
(13,14,0)
(9,33,0)
(35,9,0)
(6,1,0)
(37,24,0)
(27,15,0)
(24,44,0)
(41,3,0)
(43,45,0)
(16,3,0)
(45,15,0)
(11,9,0)
(34,25,0)
(12,35,0)
(42,0,0)
(40,32,0)
(8,21,0)
(1,23,1)
(45,15,1)
(4,12,1)
(37,2,1)
(20,30,1)
(18,35,1)
(3,41,1)
(44,10,1)
(31,6,1)
(20,25,1)
(21,8,1)
(38,15,1)
(15,13,1)
(11,36,1)
(45,43,1)
(32,9,1)
(40,27,1)
(24,44,1)
(13,26,1)
(3,15,1)
(2,9,1)
(5,4,1)
(25,15,1)
(14,32,1)
(44,9,1)
(10,37,1)
(23,3,1)
(32,21,1)
(12,24,1)
(35,9,1)
(13,14,1)
(41,16,1)
(16,15,1)
(38,19,1)
(6,1,1)
(27,35,1)
(35,5,1)
(34,38,1)
(43,31,1)
(25,34,1)
(9,11,1)
(8,40,1)
(19,45,1)
(30,18,1)
(31,3,1)
(44,9,2)
(40,35,2)
(1,3,2)
(32,21,2)
(18,35,2)
(30,35,2)
(25,15,2)
(35,5,2)
(34,35,2)
(15,13,2)
(3,35,2)
(23,3,2)
(38,15,2)
(6,1,2)
(38,35,2)
(14,35,2)
(13,35,2)
(3,15,2)
(8,35,2)
(43,35,2)
(45,15,2)
(13,26,2)
(16,35,2)
(15,35,2)
(14,32,2)
(45,35,2)
(21,35,2)
(32,9,2)
(35,9,2)
(32,35,2)
(25,35,2)
(19,35,2)
(41,35,2)
(31,35,2)
(13,14,2)
(27,35,2)
(6,3,2)
(24,44,2)
-----------------------------------
(0,)
(1,-1)
(2,stdin)
(3,myString == NULL)
(4,HELLO_STRING)
(5,wcslen(HELLO_STRING)
(6,exit(-1)
(7,myString)
(8,wchar_t)
(9,data = 0)
(10,data)
(11,0)
(12,data)
(13,(wchar_t *)
(14,malloc(data*sizeof(wchar_t)
(15,myString = (wchar_t *)
(16,myString)
(17,)
(18,"Input is less than the length of the source string")
(19,myString)
(20,RET)
(21,sizeof(wchar_t)
(22,)
(23,1)
(24,fscanf(stdin, "%zu", &data)
(25,free(myString)
(26,wchar_t *)
(27,myString)
(28,data)
(29,if (myString == NULL)
(30,printLine("Input is less than the length of the source string")
(31,myString)
(32,data*sizeof(wchar_t)
(33,)
(34,myString)
(35,data > wcslen(HELLO_STRING)
(36,data)
(37,"%zu")
(38,printWLine(myString)
(39,)
(40,data)
(41,NULL)
(42,if (data > wcslen(HELLO_STRING)
(43,HELLO_STRING)
(44,&data)
(45,wcscpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^