-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
40,41
40,42
40,43
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
62,64
63,64
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,31,36,38,39,43,46,48,53,56,58,61,64,67,68,72,74,79,81,85,87,89,93,95,99,101,106,107
-----computeFrom-----
13,14
13,15
41,42
41,43
51,52
51,53
62,63
62,64
70,71
70,72
-----guardedBy-----
48,89
43,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,1,0)
(47,35,0)
(5,3,0)
(17,19,0)
(47,19,0)
(22,17,0)
(31,41,0)
(35,47,0)
(34,44,0)
(20,4,0)
(20,38,0)
(19,47,0)
(51,38,0)
(15,32,0)
(16,4,0)
(6,51,0)
(11,1,0)
(33,16,0)
(2,29,0)
(17,22,0)
(21,14,0)
(48,14,0)
(18,32,0)
(0,38,0)
(47,38,0)
(1,29,0)
(14,21,0)
(8,28,0)
(17,1,0)
(19,17,0)
(12,39,0)
(31,9,0)
(38,47,0)
(7,29,0)
(40,4,0)
(38,4,0)
(27,44,0)
(28,5,0)
(49,20,0)
(14,1,0)
(44,38,0)
(50,1,0)
(44,4,0)
(42,21,0)
(23,9,0)
(16,38,0)
(5,28,0)
(9,31,0)
(32,10,0)
(26,51,0)
(36,22,0)
(43,31,0)
(37,31,0)
(24,17,0)
(45,29,0)
(39,13,0)
(16,33,1)
(44,27,1)
(46,16,1)
(14,21,1)
(16,38,1)
(37,43,1)
(8,51,1)
(51,26,1)
(22,36,1)
(19,17,1)
(42,48,1)
(43,30,1)
(28,8,1)
(30,1,1)
(49,44,1)
(20,38,1)
(34,51,1)
(34,5,1)
(1,11,1)
(5,28,1)
(31,9,1)
(48,25,1)
(44,38,1)
(17,1,1)
(14,1,1)
(11,50,1)
(38,47,1)
(36,24,1)
(27,34,1)
(26,6,1)
(24,0,1)
(12,14,1)
(9,1,1)
(25,31,1)
(0,14,1)
(46,39,1)
(33,20,1)
(17,22,1)
(23,37,1)
(47,19,1)
(46,25,1)
(20,49,1)
(21,42,1)
(25,30,1)
(6,38,1)
(47,35,1)
(9,23,1)
(51,38,1)
(39,12,1)
(5,51,2)
(37,30,2)
(47,19,2)
(17,22,2)
(42,25,2)
(31,30,2)
(21,25,2)
(34,14,2)
(31,9,2)
(26,14,2)
(51,38,2)
(38,47,2)
(51,14,2)
(8,51,2)
(49,14,2)
(33,14,2)
(5,28,2)
(23,30,2)
(43,30,2)
(14,25,2)
(12,14,2)
(6,14,2)
(16,14,2)
(27,14,2)
(47,35,2)
(44,14,2)
(14,1,2)
(20,14,2)
(17,1,2)
(39,14,2)
(20,38,2)
(24,14,2)
(47,14,2)
(19,14,2)
(9,1,2)
(16,38,2)
(22,14,2)
(9,30,2)
(28,51,2)
(0,14,2)
(36,14,2)
(44,38,2)
(38,14,2)
(17,14,2)
(14,21,2)
(19,17,2)
(48,25,2)
-----------------------------------
(0,myString)
(1,data = 0)
(2,data)
(3,)
(4,)
(5,exit(-1)
(6,myString)
(7,if(1)
(8,1)
(9,&data)
(10,)
(11,0)
(12,"Input is less than the length of the source string")
(13,)
(14,data > wcslen(HELLO_STRING)
(15,if (data > wcslen(HELLO_STRING)
(16,free(myString)
(17,data*sizeof(wchar_t)
(18,myString)
(19,malloc(data*sizeof(wchar_t)
(20,printWLine(myString)
(21,wcslen(HELLO_STRING)
(22,sizeof(wchar_t)
(23,data)
(24,data)
(25,1)
(26,NULL)
(27,HELLO_STRING)
(28,-1)
(29,)
(30,1)
(31,fscanf(stdin, "%zu", &data)
(32,)
(33,myString)
(34,myString)
(35,wchar_t *)
(36,wchar_t)
(37,"%zu")
(38,myString = (wchar_t *)
(39,printLine("Input is less than the length of the source string")
(40,if (myString == NULL)
(41,)
(42,HELLO_STRING)
(43,stdin)
(44,wcscpy(myString, HELLO_STRING)
(45,if(1)
(46,RET)
(47,(wchar_t *)
(48,data)
(49,myString)
(50,data)
(51,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^