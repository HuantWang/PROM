-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_03_bad()
{
    int * data;
    int dataUninitArray[10];
    data = dataUninitArray;
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
56,57
57,58
57,59
58,59
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,28,30,33,34,39,41,46,47,50,51,54,59,62,64
-----computeFrom-----
20,21
20,22
26,27
26,28
32,33
32,34
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_03_bad(){    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_03_bad
{    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
int dataUninitArray[10];
int dataUninitArray[10];
int
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(10,29,0)
(18,27,0)
(23,27,0)
(8,27,0)
(22,27,0)
(1,22,0)
(5,22,0)
(14,10,0)
(3,10,0)
(0,28,0)
(31,16,0)
(17,30,0)
(7,15,0)
(24,5,0)
(4,30,0)
(6,17,0)
(19,28,0)
(21,22,0)
(5,30,0)
(28,30,0)
(20,30,0)
(13,16,0)
(9,5,0)
(12,25,0)
(2,15,0)
(5,12,0)
(11,27,0)
(12,5,0)
(17,6,1)
(26,16,1)
(15,7,1)
(12,5,1)
(16,31,1)
(19,17,1)
(5,9,1)
(5,22,1)
(2,22,1)
(17,30,1)
(28,0,1)
(13,15,1)
(5,30,1)
(7,2,1)
(0,19,1)
(31,13,1)
(19,30,1)
(22,1,1)
(24,28,1)
(6,12,1)
(26,28,1)
(20,4,1)
(1,21,1)
(30,20,1)
(28,30,1)
(4,16,1)
(9,24,1)
(4,16,2)
(5,28,2)
(24,28,2)
(0,16,2)
(28,16,2)
(17,30,2)
(19,28,2)
(5,30,2)
(0,28,2)
(28,28,2)
(12,5,2)
(6,28,2)
(12,28,2)
(20,16,2)
(28,30,2)
(5,22,2)
(30,16,2)
(17,28,2)
(19,16,2)
(9,28,2)
-----------------------------------
(0,10)
(1,dataUninitArray)
(2,5)
(3,for(i=0; i<10; i++)
(4,i)
(5,data[i])
(6,i)
(7,5)
(8,dataUninitArray)
(9,i)
(10,)
(11,data)
(12,printIntLine(data[i])
(13,5)
(14,i)
(15,5==5)
(16,5==5)
(17,i++)
(18,if(5==5)
(19,i)
(20,0)
(21,data)
(22,data = dataUninitArray)
(23,if(5==5)
(24,data)
(25,)
(26,RET)
(27,)
(28,i<10)
(29,)
(30,i=0)
(31,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^