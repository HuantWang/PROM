-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
    /* dereference dataPtr into data */
    twoIntsStruct * data = (*dataPtr);
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,44,46,51,52,55,56,59,64,68,70,71,75,79,81,82
-----computeFrom-----
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink(void * dataVoidPtr)
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct
twoIntsStruct
* * dataPtr = (twoIntsStruct * *)dataVoidPtr
*
*
dataPtr
= (twoIntsStruct * *)dataVoidPtr
(twoIntsStruct * *)dataVoidPtr
twoIntsStruct * *
twoIntsStruct
twoIntsStruct
* *
*
*
dataVoidPtr
dataVoidPtr
twoIntsStruct * data = (*dataPtr);
twoIntsStruct * data = (*dataPtr);
twoIntsStruct
twoIntsStruct
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(21,16,0)
(26,36,0)
(20,30,0)
(7,20,0)
(24,8,0)
(2,31,0)
(22,18,0)
(29,31,0)
(27,4,0)
(18,12,0)
(31,29,0)
(32,11,0)
(12,8,0)
(6,24,0)
(18,22,0)
(14,9,0)
(19,18,0)
(8,24,0)
(31,36,0)
(0,4,0)
(13,36,0)
(9,37,0)
(24,31,0)
(17,20,0)
(12,30,0)
(25,30,0)
(5,12,0)
(12,18,0)
(4,30,0)
(3,8,0)
(29,10,0)
(33,16,0)
(11,30,0)
(4,14,0)
(29,23,0)
(1,14,0)
(35,29,0)
(9,14,0)
(23,29,0)
(14,4,0)
(4,8,0)
(16,36,0)
(15,12,0)
(22,37,0)
(28,30,0)
(8,36,0)
(11,30,1)
(34,20,1)
(7,17,1)
(4,0,1)
(0,27,1)
(32,22,1)
(20,30,1)
(4,8,1)
(29,10,1)
(25,8,1)
(5,9,1)
(31,29,1)
(1,4,1)
(11,32,1)
(4,30,1)
(24,31,1)
(35,2,1)
(20,7,1)
(29,35,1)
(6,3,1)
(19,12,1)
(29,23,1)
(14,1,1)
(12,15,1)
(28,25,1)
(3,31,1)
(18,12,1)
(8,24,1)
(17,11,1)
(9,14,1)
(18,19,1)
(14,4,1)
(30,28,1)
(24,6,1)
(22,18,1)
(17,30,1)
(15,5,1)
(27,20,1)
(12,30,1)
(12,8,1)
(12,8,2)
(11,30,2)
(20,20,2)
(14,20,2)
(22,20,2)
(1,20,2)
(19,20,2)
(15,20,2)
(20,30,2)
(4,20,2)
(12,30,2)
(24,31,2)
(9,14,2)
(9,20,2)
(27,20,2)
(7,20,2)
(29,10,2)
(4,8,2)
(4,30,2)
(32,20,2)
(5,20,2)
(29,23,2)
(31,29,2)
(17,20,2)
(12,20,2)
(14,4,2)
(11,20,2)
(0,20,2)
(22,18,2)
(18,20,2)
(8,24,2)
(18,12,2)
-----------------------------------
(0,i)
(1,intOne)
(2,dataPtr)
(3,data)
(4,data[i])
(5,data)
(6,dataPtr)
(7,10)
(8,* data = (*dataPtr)
(9,printIntLine(data[i].intOne)
(10,void * dataVoidPtr)
(11,i++)
(12,data[i])
(13,dataPtr)
(14,data[i].intOne)
(15,i)
(16,)
(17,i)
(18,data[i].intTwo)
(19,intTwo)
(20,i<10)
(21,for(i=0; i<10; i++)
(22,printIntLine(data[i].intTwo)
(23,twoIntsStruct * *)
(24,*dataPtr)
(25,i)
(26,data)
(27,data)
(28,0)
(29,(twoIntsStruct * *)
(30,i=0)
(31,* * dataPtr = (twoIntsStruct * *)
(32,i)
(33,i)
(34,RET)
(35,dataVoidPtr)
(36,)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^