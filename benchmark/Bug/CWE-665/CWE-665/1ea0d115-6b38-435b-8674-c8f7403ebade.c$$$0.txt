-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_05_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_05_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_05_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(6,10,0)
(37,27,0)
(4,10,0)
(25,39,0)
(33,3,0)
(2,24,0)
(16,29,0)
(20,24,0)
(34,29,0)
(10,6,0)
(15,0,0)
(37,28,0)
(30,33,0)
(18,0,0)
(9,23,0)
(8,22,0)
(29,40,0)
(22,40,0)
(32,23,0)
(37,4,0)
(36,6,0)
(17,40,0)
(4,37,0)
(24,28,0)
(12,0,0)
(39,25,0)
(10,4,0)
(5,39,0)
(23,19,0)
(27,37,0)
(28,0,0)
(28,37,0)
(26,40,0)
(35,0,0)
(7,28,0)
(33,28,0)
(3,33,0)
(33,40,0)
(25,11,0)
(14,10,0)
(3,21,0)
(13,33,0)
(5,24,1)
(17,31,1)
(22,40,1)
(6,36,1)
(14,7,1)
(31,1,1)
(2,20,1)
(37,4,1)
(33,28,1)
(1,25,1)
(40,26,1)
(1,24,1)
(13,29,1)
(3,33,1)
(10,6,1)
(25,39,1)
(33,40,1)
(39,5,1)
(29,40,1)
(38,31,1)
(20,28,1)
(24,2,1)
(22,8,1)
(8,3,1)
(34,22,1)
(36,14,1)
(26,17,1)
(34,40,1)
(28,37,1)
(38,29,1)
(24,28,1)
(16,34,1)
(33,30,1)
(37,27,1)
(4,10,1)
(30,13,1)
(29,16,1)
(16,29,2)
(39,24,2)
(3,33,2)
(29,31,2)
(37,4,2)
(16,31,2)
(33,28,2)
(29,29,2)
(34,31,2)
(17,31,2)
(22,40,2)
(4,10,2)
(25,24,2)
(33,29,2)
(29,40,2)
(8,29,2)
(25,39,2)
(30,29,2)
(28,37,2)
(13,29,2)
(5,24,2)
(37,27,2)
(3,29,2)
(26,31,2)
(40,31,2)
(22,29,2)
(34,29,2)
(33,40,2)
(24,28,2)
(10,6,2)
-----------------------------------
(0,)
(1,staticTrue)
(2,NULL)
(3,printDoubleLine(data[i])
(4,malloc(10*sizeof(double)
(5,1)
(6,sizeof(double)
(7,data)
(8,i)
(9,i)
(10,10*sizeof(double)
(11,)
(12,data)
(13,data)
(14,10)
(15,if(staticTrue)
(16,10)
(17,i)
(18,if(staticTrue)
(19,)
(20,data)
(21,)
(22,i++)
(23,)
(24,data == NULL)
(25,exit(-1)
(26,0)
(27,double *)
(28,data = (double *)
(29,i<10)
(30,i)
(31,staticTrue)
(32,for(i=0; i<10; i++)
(33,data[i])
(34,i)
(35,if (data == NULL)
(36,double)
(37,(double *)
(38,RET)
(39,-1)
(40,i=0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^