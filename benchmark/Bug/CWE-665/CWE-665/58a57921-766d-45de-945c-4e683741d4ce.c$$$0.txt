-----label-----
1
-----code-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_61b_badSource(size_t data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
42,43
42,44
42,45
42,46
42,47
42,48
42,49
42,50
42,51
42,52
42,53
43,44
44,45
44,46
45,46
47,48
47,49
47,50
47,51
48,49
50,51
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
69,70
72,73
73,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
82,83
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
106,107
108,109
108,110
109,110
109,111
110,111
110,112
110,113
110,114
111,112
113,114
115,116
115,117
116,117
116,118
117,118
119,120
121,122
122,123
124,125
125,126
126,127
128,129
130,131
132,133
133,134
133,135
134,135
136,137
136,138
136,139
136,140
136,141
137,138
139,140
141,142
143,144
143,145
144,145
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
166,167
169,170
170,171
170,172
171,172
173,174
173,175
173,176
173,177
174,175
176,177
178,179
182,183
182,184
183,184
183,185
184,185
186,187
188,189
189,190
190,191
190,192
191,192
193,194
195,196
196,197
-----nextToken-----
3,5,8,10,15,17,21,23,27,29,32,35,37,40,46,49,51,53,55,59,61,63,67,70,71,75,80,81,83,89,90,91,94,96,101,102,105,107,112,114,118,120,123,127,129,131,135,138,140,142,145,146,147,152,154,157,158,160,165,167,168,172,175,177,179,180,181,185,187,192,194,197
-----computeFrom-----
44,45
44,46
57,58
57,59
77,78
77,79
85,86
85,87
98,99
98,100
109,110
109,111
133,134
133,135
143,144
143,145
149,150
149,151
150,151
150,152
155,156
155,157
162,163
162,164
170,171
170,172
183,184
183,185
-----guardedBy-----
185,194
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_61b_badSource(size_t data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
size_t
size_t
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_61b_badSource(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_61b_badSource
size_t data
size_t
size_t
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(119,103,0)
(30,103,0)
(111,0,0)
(3,29,0)
(103,2,0)
(18,69,0)
(68,81,0)
(64,103,0)
(58,81,0)
(23,26,0)
(44,122,0)
(9,45,0)
(114,85,0)
(94,69,0)
(101,85,0)
(85,60,0)
(10,6,0)
(65,6,0)
(93,96,0)
(117,116,0)
(47,79,0)
(105,70,0)
(112,94,0)
(53,39,0)
(99,52,0)
(39,32,0)
(49,59,0)
(92,103,0)
(82,84,0)
(66,50,0)
(79,74,0)
(19,14,0)
(15,119,0)
(55,68,0)
(13,103,0)
(79,18,0)
(48,116,0)
(20,18,0)
(90,91,0)
(75,0,0)
(36,112,0)
(123,52,0)
(70,97,0)
(14,68,0)
(100,59,0)
(16,100,0)
(52,119,0)
(96,59,0)
(54,11,0)
(98,14,0)
(100,40,0)
(72,108,0)
(84,103,0)
(35,77,0)
(104,96,0)
(1,21,0)
(52,68,0)
(60,85,0)
(28,101,0)
(21,91,0)
(70,119,0)
(26,69,0)
(101,62,0)
(118,1,0)
(34,84,0)
(89,28,0)
(50,66,0)
(42,32,0)
(32,67,0)
(108,68,0)
(109,74,0)
(85,68,0)
(73,112,0)
(43,94,0)
(61,50,0)
(96,26,0)
(110,81,0)
(102,69,0)
(87,119,0)
(85,101,0)
(25,85,0)
(32,39,0)
(85,114,0)
(101,28,0)
(0,69,0)
(24,43,0)
(68,69,0)
(38,39,0)
(108,59,0)
(31,114,0)
(63,69,0)
(108,116,0)
(62,101,0)
(17,103,0)
(21,1,0)
(74,79,0)
(4,66,0)
(12,50,0)
(40,100,0)
(50,69,0)
(107,76,0)
(51,108,0)
(80,20,0)
(71,39,0)
(50,61,0)
(70,68,0)
(57,69,0)
(76,40,0)
(124,103,0)
(21,122,0)
(46,100,0)
(120,83,0)
(37,7,0)
(33,75,0)
(6,67,0)
(113,74,0)
(59,69,0)
(88,76,0)
(6,32,0)
(95,108,0)
(125,61,0)
(27,60,0)
(5,91,0)
(76,59,0)
(6,2,0)
(115,69,0)
(86,83,0)
(81,68,0)
(122,21,0)
(91,21,0)
(116,108,0)
(83,69,0)
(22,103,0)
(106,103,0)
(40,76,0)
(94,43,0)
(18,20,0)
(56,103,0)
(59,108,0)
(32,69,0)
(78,81,0)
(41,75,0)
(6,67,1)
(5,119,1)
(118,91,1)
(8,70,1)
(9,122,1)
(3,14,1)
(76,59,1)
(38,53,1)
(35,8,1)
(60,27,1)
(114,31,1)
(19,68,1)
(41,33,1)
(4,14,1)
(75,41,1)
(33,50,1)
(5,121,1)
(21,1,1)
(0,111,1)
(71,38,1)
(50,66,1)
(93,104,1)
(24,112,1)
(12,66,1)
(28,89,1)
(82,34,1)
(18,20,1)
(36,73,1)
(68,81,1)
(107,100,1)
(37,114,1)
(55,83,1)
(25,94,1)
(43,24,1)
(108,116,1)
(125,12,1)
(114,85,1)
(51,95,1)
(112,36,1)
(117,51,1)
(123,37,1)
(49,114,1)
(65,8,1)
(70,105,1)
(101,62,1)
(32,39,1)
(23,96,1)
(87,15,1)
(72,116,1)
(123,9,1)
(123,3,1)
(119,87,1)
(65,35,1)
(70,119,1)
(16,46,1)
(81,78,1)
(79,74,1)
(111,75,1)
(61,125,1)
(39,71,1)
(27,101,1)
(90,5,1)
(74,109,1)
(122,44,1)
(96,93,1)
(6,65,1)
(44,21,1)
(58,55,1)
(53,42,1)
(80,79,1)
(105,52,1)
(98,19,1)
(120,122,1)
(32,67,1)
(113,0,1)
(85,60,1)
(122,21,1)
(108,68,1)
(100,59,1)
(110,58,1)
(47,74,1)
(40,76,1)
(76,88,1)
(91,90,1)
(21,91,1)
(48,117,1)
(31,85,1)
(116,48,1)
(14,98,1)
(100,16,1)
(79,47,1)
(26,23,1)
(42,26,1)
(50,61,1)
(78,110,1)
(1,118,1)
(95,49,1)
(10,6,1)
(83,86,1)
(121,32,1)
(85,101,1)
(8,52,1)
(89,25,1)
(20,80,1)
(101,28,1)
(85,68,1)
(104,40,1)
(96,59,1)
(73,18,1)
(40,100,1)
(94,43,1)
(52,68,1)
(14,68,1)
(88,107,1)
(6,32,1)
(59,108,1)
(84,82,1)
(46,59,1)
(108,72,1)
(109,113,1)
(99,123,1)
(70,68,1)
(123,54,1)
(54,40,1)
(52,99,1)
(15,84,1)
(66,4,1)
(86,120,1)
(52,119,1)
(123,121,1)
(21,91,2)
(71,40,2)
(9,122,2)
(0,14,2)
(105,52,2)
(36,14,2)
(83,122,2)
(91,121,2)
(14,68,2)
(44,121,2)
(96,40,2)
(27,14,2)
(68,122,2)
(112,14,2)
(94,14,2)
(114,85,2)
(117,114,2)
(16,114,2)
(6,67,2)
(68,81,2)
(37,114,2)
(104,40,2)
(53,40,2)
(58,122,2)
(32,39,2)
(50,66,2)
(94,43,2)
(47,14,2)
(50,14,2)
(3,14,2)
(101,62,2)
(4,14,2)
(85,14,2)
(18,20,2)
(122,21,2)
(35,8,2)
(6,32,2)
(85,60,2)
(109,14,2)
(54,40,2)
(10,6,2)
(95,114,2)
(101,28,2)
(74,14,2)
(70,119,2)
(88,100,2)
(90,121,2)
(61,14,2)
(78,122,2)
(51,114,2)
(111,14,2)
(86,122,2)
(80,14,2)
(121,40,2)
(1,121,2)
(28,14,2)
(101,14,2)
(12,14,2)
(100,59,2)
(41,14,2)
(122,121,2)
(33,14,2)
(32,40,2)
(79,14,2)
(125,14,2)
(49,114,2)
(40,114,2)
(21,1,2)
(26,40,2)
(75,14,2)
(52,68,2)
(43,14,2)
(107,100,2)
(70,52,2)
(50,61,2)
(120,122,2)
(42,40,2)
(5,121,2)
(24,14,2)
(72,114,2)
(96,59,2)
(114,14,2)
(113,14,2)
(39,40,2)
(70,68,2)
(14,122,2)
(98,122,2)
(18,14,2)
(110,122,2)
(76,59,2)
(116,114,2)
(73,14,2)
(52,119,2)
(59,114,2)
(89,14,2)
(20,14,2)
(32,67,2)
(108,114,2)
(59,108,2)
(108,116,2)
(100,114,2)
(108,68,2)
(38,40,2)
(40,76,2)
(40,100,2)
(66,14,2)
(81,122,2)
(21,121,2)
(46,114,2)
(85,68,2)
(85,101,2)
(31,14,2)
(76,100,2)
(79,74,2)
(25,14,2)
(93,40,2)
(118,121,2)
(19,122,2)
(23,40,2)
(55,122,2)
(48,114,2)
(60,14,2)
-----------------------------------
(0,service.sin_family = AF_INET)
(1,&wsaData)
(2,)
(3,break;)
(4,service)
(5,2)
(6,return data;)
(7,)
(8,wsaDataInit)
(9,break;)
(10,RET)
(11,)
(12,0)
(13,inputBuffer)
(14,connectSocket == INVALID_SOCKET)
(15,connectSocket)
(16,SOCKET_ERROR)
(17,wsaData)
(18,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(19,connectSocket)
(20,inet_addr(IP_ADDRESS)
(21,WSAStartup(MAKEWORD(2,2)
(22,recvResult)
(23,'\\0')
(24,TCP_PORT)
(25,connectSocket)
(26,inputBuffer[recvResult] = '\\0')
(27,service)
(28,&service)
(29,)
(30,if (wsaDataInit)
(31,SOCKET_ERROR)
(32,data = strtoul(inputBuffer, NULL, 0)
(33,service)
(34,wsaDataInit)
(35,WSACleanup()
(36,sin_port)
(37,break;)
(38,NULL)
(39,strtoul(inputBuffer, NULL, 0)
(40,recvResult == SOCKET_ERROR || recvResult == 0)
(41,sin_family)
(42,data)
(43,htons(TCP_PORT)
(44,NO_ERROR)
(45,)
(46,recvResult)
(47,s_addr)
(48,1)
(49,recvResult)
(50,memset(&service, 0, sizeof(service)
(51,inputBuffer)
(52,connectSocket != INVALID_SOCKET)
(53,inputBuffer)
(54,break;)
(55,connectSocket)
(56,service)
(57,if (recvResult == SOCKET_ERROR || recvResult == 0)
(58,AF_INET)
(59,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(60,sizeof(service)
(61,sizeof(service)
(62,struct sockaddr*)
(63,if (connectSocket == INVALID_SOCKET)
(64,do)
(65,data)
(66,&service)
(67,size_t data)
(68,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(69,)
(70,CLOSE_SOCKET(connectSocket)
(71,0)
(72,0)
(73,service)
(74,service.sin_addr)
(75,service.sin_family)
(76,recvResult == 0)
(77,)
(78,IPPROTO_TCP)
(79,service.sin_addr.s_addr)
(80,IP_ADDRESS)
(81,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(82,0)
(83,wsaDataInit = 1)
(84,wsaDataInit = 0)
(85,connect(connectSocket, (struct sockaddr*)
(86,1)
(87,INVALID_SOCKET)
(88,0)
(89,service)
(90,2)
(91,MAKEWORD(2,2)
(92,if (connectSocket != INVALID_SOCKET)
(93,recvResult)
(94,service.sin_port = htons(TCP_PORT)
(95,connectSocket)
(96,inputBuffer[recvResult])
(97,)
(98,INVALID_SOCKET)
(99,INVALID_SOCKET)
(100,recvResult == SOCKET_ERROR)
(101,(struct sockaddr*)
(102,if (connect(connectSocket, (struct sockaddr*)
(103,)
(104,inputBuffer)
(105,connectSocket)
(106,connectSocket)
(107,recvResult)
(108,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(109,sin_addr)
(110,SOCK_STREAM)
(111,AF_INET)
(112,service.sin_port)
(113,service)
(114,connect(connectSocket, (struct sockaddr*)
(115,if (WSAStartup(MAKEWORD(2,2)
(116,CHAR_ARRAY_SIZE - 1)
(117,CHAR_ARRAY_SIZE)
(118,wsaData)
(119,connectSocket = INVALID_SOCKET)
(120,wsaDataInit)
(121,0)
(122,WSAStartup(MAKEWORD(2,2)
(123,connectSocket)
(124,wsaDataInit)
(125,service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^