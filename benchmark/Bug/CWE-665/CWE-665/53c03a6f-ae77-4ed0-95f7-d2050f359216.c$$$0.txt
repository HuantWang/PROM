-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_03_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
50,51
51,52
51,53
52,53
53,54
53,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
66,67
67,68
67,69
70,71
71,72
73,74
73,75
74,75
75,76
75,77
76,77
76,78
77,78
77,79
78,79
80,81
83,84
85,86
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
94,95
96,97
96,98
97,98
97,99
100,101
101,102
101,103
102,103
103,104
103,105
105,106
107,108
107,109
107,110
107,111
108,109
109,110
109,111
110,111
113,114
113,115
114,115
117,118
118,119
120,121
120,122
121,122
122,123
122,124
123,124
125,126
125,127
126,127
126,128
127,128
129,130
132,133
133,134
133,135
134,135
136,137
136,138
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,48,49,54,56,61,62,65,68,69,72,79,81,82,84,90,92,93,95,98,99,104,106,111,112,115,116,119,124,128,130,131,135,139,141,142
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
47,48
47,49
59,60
59,61
63,64
63,65
67,68
67,69
75,76
75,77
86,87
86,88
97,98
97,99
109,110
109,111
113,114
113,115
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_03_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_03_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(69,18,0)
(48,64,0)
(78,71,0)
(41,76,0)
(13,52,0)
(75,30,0)
(63,19,0)
(81,36,0)
(43,20,0)
(39,8,0)
(42,7,0)
(58,55,0)
(68,6,0)
(29,79,0)
(57,65,0)
(20,61,0)
(14,57,0)
(51,23,0)
(7,0,0)
(52,50,0)
(74,40,0)
(54,57,0)
(5,10,0)
(68,26,0)
(28,52,0)
(19,33,0)
(79,0,0)
(59,6,0)
(7,40,0)
(43,33,0)
(7,6,0)
(15,41,0)
(62,67,0)
(18,6,0)
(6,70,0)
(52,28,0)
(30,0,0)
(72,28,0)
(73,79,0)
(50,52,0)
(31,20,0)
(23,6,0)
(61,20,0)
(44,23,0)
(68,0,0)
(73,60,0)
(49,7,0)
(77,81,0)
(60,73,0)
(61,9,0)
(38,19,0)
(4,0,0)
(32,43,0)
(47,71,0)
(50,70,0)
(40,79,0)
(1,68,0)
(37,67,0)
(70,25,0)
(26,68,0)
(40,7,0)
(43,6,0)
(34,26,0)
(66,33,0)
(5,64,0)
(18,73,0)
(3,27,0)
(24,30,0)
(70,50,0)
(46,24,0)
(64,5,0)
(20,81,0)
(18,33,0)
(17,41,0)
(45,71,0)
(20,43,0)
(25,70,0)
(6,71,0)
(21,0,0)
(56,33,0)
(16,73,0)
(12,68,0)
(8,33,0)
(53,71,0)
(11,55,0)
(80,18,0)
(35,24,0)
(22,43,0)
(79,36,0)
(73,18,0)
(26,81,0)
(60,9,0)
(70,6,0)
(81,0,0)
(27,0,0)
(30,24,0)
(2,19,1)
(8,33,1)
(58,11,1)
(70,25,1)
(81,77,1)
(18,6,1)
(0,4,1)
(74,7,1)
(68,1,1)
(55,58,1)
(23,6,1)
(20,81,1)
(49,42,1)
(16,18,1)
(79,29,1)
(19,33,1)
(70,50,1)
(37,30,1)
(13,59,1)
(35,75,1)
(43,33,1)
(67,62,1)
(5,64,1)
(79,0,1)
(44,51,1)
(20,31,1)
(73,18,1)
(42,81,1)
(38,8,1)
(26,68,1)
(27,0,1)
(29,40,1)
(39,60,1)
(73,79,1)
(46,35,1)
(4,21,1)
(1,12,1)
(31,43,1)
(8,39,1)
(21,55,1)
(7,6,1)
(34,68,1)
(64,48,1)
(28,72,1)
(69,61,1)
(81,0,1)
(50,52,1)
(30,0,1)
(62,37,1)
(38,33,1)
(63,38,1)
(19,63,1)
(56,67,1)
(32,19,1)
(3,79,1)
(37,55,1)
(2,67,1)
(77,26,1)
(27,3,1)
(43,22,1)
(40,74,1)
(7,0,1)
(48,23,1)
(75,0,1)
(11,5,1)
(18,80,1)
(20,43,1)
(68,0,1)
(12,30,1)
(40,7,1)
(26,34,1)
(73,16,1)
(68,6,1)
(18,33,1)
(23,44,1)
(30,24,1)
(33,66,1)
(72,13,1)
(61,20,1)
(51,6,1)
(22,32,1)
(60,73,1)
(52,28,1)
(6,70,1)
(66,56,1)
(75,27,1)
(24,46,1)
(11,23,1)
(43,6,1)
(7,49,1)
(80,69,1)
(12,30,2)
(8,33,2)
(81,30,2)
(49,30,2)
(19,33,2)
(7,6,2)
(61,19,2)
(68,0,2)
(38,67,2)
(20,81,2)
(38,19,2)
(7,30,2)
(64,23,2)
(35,55,2)
(26,30,2)
(73,19,2)
(60,73,2)
(18,6,2)
(50,52,2)
(80,19,2)
(33,67,2)
(30,24,2)
(61,20,2)
(5,23,2)
(75,30,2)
(32,19,2)
(40,30,2)
(18,33,2)
(20,43,2)
(19,67,2)
(56,67,2)
(5,64,2)
(26,68,2)
(27,30,2)
(79,0,2)
(42,30,2)
(74,30,2)
(48,23,2)
(63,19,2)
(18,19,2)
(52,28,2)
(70,25,2)
(7,0,2)
(43,19,2)
(23,6,2)
(16,19,2)
(39,19,2)
(30,55,2)
(34,30,2)
(75,55,2)
(1,30,2)
(43,33,2)
(46,30,2)
(20,19,2)
(43,6,2)
(73,18,2)
(6,70,2)
(81,0,2)
(31,19,2)
(24,55,2)
(66,67,2)
(68,30,2)
(19,19,2)
(77,30,2)
(4,55,2)
(3,30,2)
(60,19,2)
(73,79,2)
(30,30,2)
(46,55,2)
(70,50,2)
(30,0,2)
(35,30,2)
(8,19,2)
(29,30,2)
(0,55,2)
(63,67,2)
(40,7,2)
(22,19,2)
(27,0,2)
(68,6,2)
(24,30,2)
(79,30,2)
(69,19,2)
(21,55,2)
-----------------------------------
(0,i=0)
(1,i)
(2,RET)
(3,i)
(4,0)
(5,exit(-1)
(6,data = (twoIntsStruct *)
(7,data[i])
(8,i++)
(9,)
(10,)
(11,5)
(12,data)
(13,10)
(14,for(i=0; i<(10/2)
(15,for(i=0; i<10; i++)
(16,intTwo)
(17,i)
(18,data[i])
(19,i<10)
(20,data[i].intOne)
(21,i)
(22,i)
(23,data == NULL)
(24,10/2)
(25,twoIntsStruct *)
(26,data[i].intOne)
(27,i++)
(28,sizeof(twoIntsStruct)
(29,i)
(30,i<(10/2)
(31,intOne)
(32,data)
(33,i=0)
(34,intOne)
(35,10)
(36,)
(37,5)
(38,i)
(39,i)
(40,data[i].intTwo)
(41,)
(42,data)
(43,data[i])
(44,NULL)
(45,data)
(46,2)
(47,if(5==5)
(48,1)
(49,i)
(50,malloc(10*sizeof(twoIntsStruct)
(51,data)
(52,10*sizeof(twoIntsStruct)
(53,if (data == NULL)
(54,i)
(55,5==5)
(56,i)
(57,)
(58,5)
(59,data)
(60,printIntLine(data[i].intTwo)
(61,printIntLine(data[i].intOne)
(62,5)
(63,10)
(64,-1)
(65,)
(66,0)
(67,5==5)
(68,data[i])
(69,data)
(70,(twoIntsStruct *)
(71,)
(72,twoIntsStruct)
(73,data[i].intTwo)
(74,intTwo)
(75,i)
(76,)
(77,i)
(78,if(5==5)
(79,data[i].intTwo = i)
(80,i)
(81,data[i].intOne = i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^