-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_12_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
46,49
47,48
48,49
50,51
51,52
51,53
52,53
53,54
53,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
66,67
67,68
67,69
70,71
71,72
73,74
73,75
74,75
75,76
75,77
76,77
76,78
77,78
77,79
78,79
80,81
83,84
85,86
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
94,95
96,97
97,98
97,99
98,99
99,100
99,101
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
109,110
109,111
110,111
113,114
114,115
116,117
116,118
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
123,124
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
134,135
137,138
139,140
139,141
139,142
140,141
141,142
143,144
144,145
144,146
145,146
146,147
146,148
148,149
150,151
150,152
150,153
150,154
151,152
152,153
152,154
153,154
156,157
156,158
157,158
160,161
161,162
163,164
163,165
164,165
165,166
165,167
166,167
168,169
168,170
169,170
169,171
170,171
172,173
175,176
176,177
176,178
177,178
179,180
179,181
180,181
180,182
181,182
183,184
186,187
186,188
187,188
187,189
188,189
189,190
189,191
191,192
193,194
193,195
193,196
193,197
194,195
195,196
195,197
196,197
199,200
199,201
200,201
203,204
204,205
206,207
206,208
207,208
208,209
208,210
209,210
209,211
210,211
210,212
211,212
213,214
216,217
218,219
219,220
219,221
220,221
220,222
221,222
221,223
222,223
224,225
227,228
229,230
229,231
230,231
231,232
231,233
233,234
235,236
235,237
235,238
235,239
236,237
237,238
237,239
238,239
241,242
241,243
242,243
245,246
246,247
248,249
248,250
249,250
250,251
250,252
251,252
253,254
253,255
254,255
254,256
255,256
257,258
260,261
261,262
261,263
262,263
264,265
264,266
265,266
265,267
266,267
268,269
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,49,54,56,61,62,65,68,69,72,79,81,82,84,90,92,93,95,100,102,107,108,111,112,115,122,124,125,127,133,135,136,138,142,147,149,154,155,158,159,162,167,171,173,174,178,182,184,185,190,192,197,198,201,202,205,212,214,215,217,223,225,226,228,232,234,239,240,243,244,247,252,256,258,259,263,267,269,270
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
59,60
59,61
63,64
63,65
67,68
67,69
75,76
75,77
86,87
86,88
105,106
105,107
109,110
109,111
118,119
118,120
129,130
129,131
152,153
152,154
156,157
156,158
195,196
195,197
199,200
199,201
208,209
208,210
219,220
219,221
237,238
237,239
241,242
241,243
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_12_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_12_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(155,73,0)
(122,87,0)
(12,120,0)
(57,24,0)
(100,26,0)
(64,46,0)
(129,75,0)
(88,72,0)
(64,130,0)
(87,86,0)
(55,14,0)
(116,14,0)
(49,133,0)
(89,50,0)
(48,92,0)
(20,3,0)
(142,151,0)
(68,115,0)
(130,110,0)
(13,50,0)
(115,36,0)
(23,3,0)
(19,30,0)
(143,40,0)
(118,95,0)
(125,95,0)
(106,112,0)
(41,89,0)
(46,64,0)
(51,109,0)
(50,75,0)
(113,61,0)
(8,142,0)
(125,123,0)
(19,50,0)
(69,24,0)
(115,109,0)
(126,109,0)
(18,19,0)
(124,105,0)
(102,21,0)
(11,26,0)
(123,47,0)
(5,48,0)
(144,29,0)
(124,115,0)
(107,30,0)
(13,26,0)
(98,124,0)
(124,13,0)
(126,68,0)
(61,113,0)
(77,92,0)
(133,50,0)
(125,52,0)
(120,79,0)
(35,73,0)
(101,95,0)
(124,52,0)
(52,24,0)
(86,24,0)
(90,99,0)
(17,75,0)
(62,145,0)
(147,48,0)
(46,92,0)
(5,89,0)
(43,13,0)
(61,90,0)
(94,51,0)
(4,9,0)
(84,11,0)
(15,74,0)
(27,74,0)
(137,5,0)
(70,5,0)
(72,109,0)
(28,54,0)
(141,133,0)
(69,87,0)
(54,109,0)
(13,124,0)
(87,69,0)
(72,121,0)
(127,68,0)
(38,26,0)
(73,35,0)
(104,33,0)
(89,5,0)
(69,50,0)
(145,57,0)
(123,125,0)
(139,89,0)
(117,121,0)
(91,46,0)
(21,85,0)
(9,112,0)
(73,50,0)
(5,137,0)
(140,73,0)
(37,33,0)
(67,24,0)
(135,83,0)
(130,92,0)
(56,24,0)
(1,38,0)
(73,92,0)
(45,115,0)
(133,26,0)
(35,48,0)
(76,109,0)
(59,26,0)
(143,9,0)
(5,86,0)
(148,75,0)
(9,133,0)
(53,138,0)
(95,151,0)
(68,126,0)
(81,130,0)
(105,40,0)
(82,38,0)
(99,136,0)
(16,126,0)
(80,151,0)
(103,64,0)
(121,112,0)
(9,48,0)
(90,61,0)
(72,50,0)
(97,54,0)
(112,109,0)
(121,72,0)
(136,99,0)
(46,50,0)
(153,92,0)
(42,19,0)
(125,130,0)
(58,86,0)
(89,151,0)
(119,145,0)
(86,34,0)
(44,132,0)
(85,96,0)
(19,24,0)
(65,120,0)
(7,126,0)
(128,57,0)
(124,130,0)
(105,124,0)
(138,150,0)
(60,99,0)
(6,50,0)
(30,19,0)
(99,90,0)
(131,125,0)
(9,143,0)
(126,50,0)
(29,50,0)
(154,132,0)
(85,21,0)
(74,31,0)
(57,145,0)
(95,125,0)
(14,0,0)
(111,52,0)
(3,151,0)
(63,151,0)
(78,69,0)
(132,31,0)
(71,46,0)
(2,92,0)
(95,50,0)
(48,110,0)
(10,35,0)
(133,9,0)
(83,24,0)
(25,72,0)
(152,138,0)
(32,69,0)
(33,92,0)
(50,61,0)
(134,109,0)
(108,153,0)
(9,86,0)
(112,36,0)
(137,47,0)
(52,34,0)
(61,50,0)
(149,13,0)
(66,136,0)
(93,75,0)
(30,52,0)
(114,29,0)
(13,50,1)
(118,101,1)
(133,49,1)
(121,72,1)
(19,24,1)
(61,113,1)
(23,142,1)
(21,102,1)
(33,37,1)
(39,57,1)
(95,118,1)
(19,18,1)
(46,50,1)
(68,127,1)
(142,151,1)
(147,35,1)
(144,50,1)
(54,109,1)
(145,119,1)
(83,135,1)
(10,73,1)
(134,39,1)
(115,109,1)
(5,70,1)
(58,87,1)
(126,16,1)
(38,1,1)
(153,108,1)
(126,50,1)
(125,95,1)
(45,68,1)
(126,109,1)
(48,92,1)
(68,126,1)
(139,41,1)
(122,69,1)
(5,86,1)
(83,24,1)
(103,46,1)
(77,22,1)
(127,126,1)
(64,103,1)
(101,3,1)
(4,133,1)
(49,141,1)
(69,78,1)
(128,83,1)
(23,151,1)
(86,24,1)
(19,50,1)
(87,69,1)
(130,92,1)
(82,11,1)
(22,85,1)
(46,91,1)
(37,104,1)
(8,137,1)
(104,92,1)
(112,106,1)
(108,48,1)
(35,73,1)
(112,109,1)
(125,52,1)
(67,56,1)
(9,48,1)
(78,32,1)
(151,80,1)
(9,86,1)
(30,19,1)
(94,112,1)
(142,8,1)
(85,21,1)
(25,88,1)
(73,155,1)
(63,39,1)
(71,33,1)
(66,60,1)
(9,133,1)
(22,29,1)
(102,29,1)
(73,50,1)
(39,33,1)
(111,30,1)
(29,114,1)
(28,51,1)
(135,86,1)
(124,115,1)
(117,72,1)
(46,92,1)
(32,52,1)
(141,105,1)
(88,115,1)
(131,95,1)
(100,54,1)
(114,144,1)
(13,26,1)
(124,13,1)
(72,25,1)
(72,50,1)
(60,6,1)
(51,94,1)
(104,153,1)
(99,136,1)
(89,151,1)
(80,63,1)
(2,77,1)
(92,2,1)
(26,59,1)
(20,23,1)
(59,100,1)
(95,151,1)
(109,76,1)
(89,139,1)
(69,50,1)
(82,26,1)
(41,123,1)
(149,38,1)
(33,92,1)
(124,130,1)
(56,22,1)
(38,26,1)
(50,61,1)
(5,48,1)
(54,97,1)
(105,124,1)
(133,50,1)
(62,128,1)
(3,151,1)
(146,3,1)
(35,10,1)
(5,89,1)
(87,122,1)
(13,43,1)
(128,24,1)
(123,125,1)
(69,24,1)
(73,92,1)
(136,66,1)
(124,98,1)
(51,109,1)
(28,109,1)
(89,50,1)
(153,92,1)
(146,38,1)
(140,130,1)
(76,134,1)
(106,121,1)
(11,26,1)
(24,67,1)
(155,140,1)
(70,89,1)
(48,147,1)
(86,58,1)
(124,52,1)
(9,4,1)
(57,145,1)
(121,117,1)
(72,109,1)
(43,149,1)
(29,50,1)
(91,71,1)
(130,81,1)
(90,99,1)
(9,112,1)
(18,42,1)
(133,26,1)
(98,13,1)
(16,7,1)
(52,111,1)
(143,9,1)
(119,62,1)
(11,84,1)
(42,57,1)
(137,5,1)
(57,24,1)
(95,50,1)
(107,19,1)
(81,64,1)
(125,130,1)
(125,131,1)
(61,90,1)
(7,54,1)
(3,20,1)
(84,143,1)
(1,82,1)
(64,46,1)
(52,24,1)
(97,28,1)
(30,107,1)
(115,45,1)
(153,92,2)
(25,54,2)
(125,52,2)
(155,33,2)
(125,95,2)
(30,57,2)
(54,54,2)
(81,33,2)
(133,26,2)
(122,57,2)
(73,50,2)
(54,109,2)
(84,38,2)
(5,86,2)
(54,39,2)
(38,39,2)
(35,33,2)
(48,33,2)
(140,33,2)
(46,92,2)
(37,33,2)
(119,57,2)
(130,92,2)
(76,39,2)
(130,33,2)
(104,22,2)
(107,57,2)
(61,113,2)
(88,54,2)
(137,3,2)
(23,39,2)
(82,38,2)
(42,57,2)
(68,54,2)
(57,145,2)
(64,33,2)
(43,38,2)
(69,50,2)
(35,73,2)
(29,50,2)
(115,109,2)
(13,50,2)
(20,39,2)
(33,33,2)
(50,61,2)
(123,125,2)
(126,109,2)
(57,57,2)
(46,50,2)
(19,50,2)
(134,39,2)
(95,3,2)
(104,33,2)
(20,3,2)
(1,38,2)
(2,22,2)
(19,57,2)
(37,22,2)
(87,69,2)
(38,38,2)
(145,22,2)
(128,57,2)
(89,50,2)
(13,26,2)
(77,22,2)
(3,3,2)
(115,54,2)
(117,54,2)
(49,38,2)
(1,39,2)
(97,39,2)
(85,29,2)
(73,92,2)
(57,22,2)
(5,48,2)
(62,22,2)
(62,57,2)
(64,46,2)
(9,48,2)
(28,54,2)
(69,24,2)
(72,109,2)
(131,3,2)
(133,50,2)
(121,54,2)
(72,50,2)
(9,86,2)
(13,38,2)
(26,39,2)
(9,112,2)
(41,3,2)
(19,24,2)
(33,92,2)
(52,24,2)
(95,50,2)
(141,38,2)
(92,22,2)
(58,57,2)
(30,19,2)
(90,99,2)
(143,9,2)
(24,22,2)
(112,54,2)
(82,39,2)
(83,24,2)
(142,151,2)
(9,133,2)
(11,38,2)
(137,5,2)
(72,54,2)
(125,130,2)
(153,33,2)
(94,54,2)
(51,109,2)
(97,54,2)
(10,33,2)
(103,33,2)
(109,39,2)
(147,33,2)
(135,57,2)
(87,57,2)
(52,57,2)
(100,39,2)
(28,39,2)
(69,57,2)
(56,22,2)
(61,90,2)
(89,151,2)
(85,21,2)
(102,29,2)
(86,24,2)
(127,54,2)
(145,57,2)
(124,130,2)
(121,72,2)
(45,54,2)
(124,38,2)
(5,3,2)
(68,126,2)
(7,54,2)
(111,57,2)
(123,3,2)
(23,3,2)
(149,38,2)
(38,26,2)
(95,151,2)
(128,22,2)
(59,39,2)
(101,3,2)
(46,33,2)
(16,54,2)
(124,13,2)
(112,109,2)
(67,22,2)
(124,52,2)
(48,92,2)
(133,38,2)
(9,38,2)
(4,38,2)
(11,26,2)
(18,57,2)
(63,39,2)
(32,57,2)
(126,54,2)
(91,33,2)
(8,3,2)
(86,57,2)
(99,136,2)
(3,151,2)
(71,33,2)
(143,38,2)
(78,57,2)
(119,22,2)
(142,3,2)
(89,3,2)
(73,33,2)
(5,89,2)
(57,24,2)
(139,3,2)
(118,3,2)
(105,38,2)
(83,57,2)
(125,3,2)
(3,39,2)
(21,29,2)
(151,39,2)
(124,115,2)
(98,38,2)
(33,22,2)
(126,50,2)
(105,124,2)
(108,33,2)
(106,54,2)
(70,3,2)
(80,39,2)
(51,54,2)
-----------------------------------
(0,)
(1,10)
(2,0)
(3,i<10)
(4,intTwo)
(5,data[i].intTwo)
(6,data)
(7,data)
(8,i)
(9,data[i].intTwo)
(10,intTwo)
(11,i++)
(12,i)
(13,data[i])
(14,)
(15,i)
(16,i)
(17,if(globalReturnsTrueOrFalse()
(18,i)
(19,data[i])
(20,10)
(21,-1)
(22,globalReturnsTrueOrFalse()
(23,i)
(24,i=0)
(25,i)
(26,i=0)
(27,for(i=0; i<10; i++)
(28,i)
(29,data == NULL)
(30,data[i].intOne)
(31,)
(32,data)
(33,i<10)
(34,)
(35,data[i].intTwo)
(36,)
(37,10)
(38,i<10)
(39,globalReturnsTrueOrFalse()
(40,)
(41,data)
(42,data)
(43,i)
(44,i)
(45,i)
(46,data[i])
(47,)
(48,data[i].intTwo = i)
(49,i)
(50,data = (twoIntsStruct *)
(51,i++)
(52,data[i].intOne = i)
(53,i)
(54,i<10)
(55,for(i=0; i<(10/2)
(56,i)
(57,i<(10/2)
(58,i)
(59,0)
(60,10)
(61,(twoIntsStruct *)
(62,10)
(63,i)
(64,data[i].intOne)
(65,for(i=0; i<10; i++)
(66,twoIntsStruct)
(67,0)
(68,data[i].intOne)
(69,data[i])
(70,intTwo)
(71,data)
(72,data[i])
(73,data[i])
(74,)
(75,)
(76,0)
(77,i)
(78,i)
(79,)
(80,0)
(81,i)
(82,i)
(83,i++)
(84,i)
(85,exit(-1)
(86,data[i].intTwo = i)
(87,data[i].intTwo)
(88,data)
(89,data[i])
(90,malloc(10*sizeof(twoIntsStruct)
(91,i)
(92,i=0)
(93,if (data == NULL)
(94,i)
(95,data[i])
(96,)
(97,10)
(98,intOne)
(99,10*sizeof(twoIntsStruct)
(100,i)
(101,data)
(102,1)
(103,intOne)
(104,i)
(105,printIntLine(data[i].intOne)
(106,i)
(107,intOne)
(108,i)
(109,i=0)
(110,)
(111,i)
(112,data[i].intTwo = i)
(113,twoIntsStruct *)
(114,NULL)
(115,data[i].intOne = i)
(116,i)
(117,intTwo)
(118,i)
(119,2)
(120,)
(121,data[i].intTwo)
(122,intTwo)
(123,printIntLine(data[i].intOne)
(124,data[i].intOne)
(125,data[i].intOne)
(126,data[i])
(127,intOne)
(128,i)
(129,if(globalReturnsTrueOrFalse()
(130,data[i].intOne = i)
(131,intOne)
(132,)
(133,data[i])
(134,i)
(135,i)
(136,sizeof(twoIntsStruct)
(137,printIntLine(data[i].intTwo)
(138,)
(139,i)
(140,data)
(141,data)
(142,i++)
(143,printIntLine(data[i].intTwo)
(144,data)
(145,10/2)
(146,RET)
(147,i)
(148,data)
(149,data)
(150,)
(151,i=0)
(152,for(i=0; i<10; i++)
(153,i++)
(154,for(i=0; i<10; i++)
(155,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^