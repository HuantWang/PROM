-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_11_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
54,55
54,56
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
67,68
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
78,79
81,82
83,84
83,85
84,85
85,86
87,88
88,89
88,90
89,90
90,91
90,92
92,93
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
107,108
107,109
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
116,117
119,120
120,121
120,122
121,122
123,124
123,125
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,41,43,48,49,52,55,56,59,66,68,69,71,77,79,80,82,86,91,93,98,99,102,103,106,111,115,117,118,122,126,128,129
-----computeFrom-----
14,15
14,16
26,27
26,28
46,47
46,48
50,51
50,52
54,55
54,56
62,63
62,64
73,74
73,75
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_11_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_11_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_11_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(60,48,0)
(34,51,0)
(10,23,0)
(62,66,0)
(10,66,0)
(29,59,0)
(39,43,0)
(52,57,0)
(33,59,0)
(38,58,0)
(55,44,0)
(16,5,0)
(65,8,0)
(9,20,0)
(19,38,0)
(8,65,0)
(68,25,0)
(22,68,0)
(29,55,0)
(34,22,0)
(29,23,0)
(3,43,0)
(10,55,0)
(63,27,0)
(53,55,0)
(67,44,0)
(27,31,0)
(1,22,0)
(45,10,0)
(53,35,0)
(20,52,0)
(66,10,0)
(21,64,0)
(48,55,0)
(12,17,0)
(4,12,0)
(48,22,0)
(26,23,0)
(57,52,0)
(52,26,0)
(54,26,0)
(24,31,0)
(31,27,0)
(68,23,0)
(22,48,0)
(41,27,0)
(2,55,0)
(69,44,0)
(30,65,0)
(26,25,0)
(59,68,0)
(52,20,0)
(47,68,0)
(61,20,0)
(42,38,0)
(49,48,0)
(46,10,0)
(66,26,0)
(6,23,0)
(55,53,0)
(32,53,0)
(28,23,0)
(36,21,0)
(56,8,0)
(35,65,0)
(65,35,0)
(15,29,0)
(43,64,0)
(50,12,0)
(14,52,0)
(20,55,0)
(59,29,0)
(5,23,0)
(13,44,0)
(11,64,0)
(0,64,0)
(57,51,0)
(40,29,0)
(22,34,0)
(48,64,0)
(53,32,0)
(20,64,0)
(31,23,0)
(35,53,0)
(8,56,1)
(48,64,1)
(14,20,1)
(15,40,1)
(1,48,1)
(20,64,1)
(3,21,1)
(5,16,1)
(29,23,1)
(59,29,1)
(59,33,1)
(52,20,1)
(11,0,1)
(9,61,1)
(63,41,1)
(43,39,1)
(30,2,1)
(22,1,1)
(66,10,1)
(64,11,1)
(68,47,1)
(52,14,1)
(54,66,1)
(26,54,1)
(45,31,1)
(66,62,1)
(31,23,1)
(10,23,1)
(48,60,1)
(46,45,1)
(29,15,1)
(31,27,1)
(29,55,1)
(41,24,1)
(20,9,1)
(24,5,1)
(21,64,1)
(0,37,1)
(10,55,1)
(3,64,1)
(37,7,1)
(52,26,1)
(36,34,1)
(53,32,1)
(26,23,1)
(57,52,1)
(22,68,1)
(43,64,1)
(55,53,1)
(68,23,1)
(28,7,1)
(18,37,1)
(53,35,1)
(39,3,1)
(7,55,1)
(48,55,1)
(62,10,1)
(34,22,1)
(33,29,1)
(37,31,1)
(47,59,1)
(16,68,1)
(49,57,1)
(6,28,1)
(60,49,1)
(27,63,1)
(5,23,1)
(10,46,1)
(21,36,1)
(22,48,1)
(65,8,1)
(24,23,1)
(40,26,1)
(23,6,1)
(18,43,1)
(35,65,1)
(20,55,1)
(56,30,1)
(61,43,1)
(46,31,2)
(16,31,2)
(27,7,2)
(20,64,2)
(20,43,2)
(54,31,2)
(31,27,2)
(22,48,2)
(59,29,2)
(53,32,2)
(11,37,2)
(10,55,2)
(64,37,2)
(48,55,2)
(15,31,2)
(10,31,2)
(60,43,2)
(52,43,2)
(40,31,2)
(5,31,2)
(68,31,2)
(3,37,2)
(29,31,2)
(26,31,2)
(43,43,2)
(21,43,2)
(24,31,2)
(6,7,2)
(24,7,2)
(35,65,2)
(9,43,2)
(63,7,2)
(20,55,2)
(41,7,2)
(53,35,2)
(43,37,2)
(47,31,2)
(33,31,2)
(22,43,2)
(1,43,2)
(45,31,2)
(28,7,2)
(43,64,2)
(66,31,2)
(14,43,2)
(21,64,2)
(62,31,2)
(29,55,2)
(39,43,2)
(34,22,2)
(55,53,2)
(10,23,2)
(61,43,2)
(48,43,2)
(39,37,2)
(23,7,2)
(41,31,2)
(68,23,2)
(27,31,2)
(52,26,2)
(29,23,2)
(66,10,2)
(5,23,2)
(26,23,2)
(57,43,2)
(31,7,2)
(48,64,2)
(57,52,2)
(31,23,2)
(3,43,2)
(22,68,2)
(31,31,2)
(0,37,2)
(59,31,2)
(36,43,2)
(63,31,2)
(34,43,2)
(52,20,2)
(65,8,2)
(49,43,2)
-----------------------------------
(0,i)
(1,intTwo)
(2,data)
(3,i)
(4,for(i=0; i<(10/2)
(5,i++)
(6,0)
(7,globalReturnsTrue()
(8,sizeof(twoIntsStruct)
(9,i)
(10,data[i])
(11,0)
(12,)
(13,data)
(14,intOne)
(15,i)
(16,i)
(17,)
(18,RET)
(19,i)
(20,data[i])
(21,i++)
(22,data[i].intTwo)
(23,i=0)
(24,i)
(25,)
(26,data[i].intOne = i)
(27,10/2)
(28,i)
(29,data[i])
(30,10)
(31,i<(10/2)
(32,twoIntsStruct *)
(33,intTwo)
(34,printIntLine(data[i].intTwo)
(35,ALLOCA(10*sizeof(twoIntsStruct)
(36,i)
(37,globalReturnsTrue()
(38,)
(39,10)
(40,data)
(41,10)
(42,for(i=0; i<10; i++)
(43,i<10)
(44,)
(45,data)
(46,i)
(47,i)
(48,data[i])
(49,data)
(50,i)
(51,)
(52,data[i].intOne)
(53,(twoIntsStruct *)
(54,i)
(55,data = (twoIntsStruct *)
(56,twoIntsStruct)
(57,printIntLine(data[i].intOne)
(58,)
(59,data[i].intTwo)
(60,i)
(61,data)
(62,intOne)
(63,2)
(64,i=0)
(65,10*sizeof(twoIntsStruct)
(66,data[i].intOne)
(67,if(globalReturnsTrue()
(68,data[i].intTwo = i)
(69,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^