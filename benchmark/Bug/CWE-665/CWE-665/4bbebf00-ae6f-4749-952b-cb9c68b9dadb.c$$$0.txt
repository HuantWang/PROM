-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(20,3,0)
(30,42,0)
(36,30,0)
(47,42,0)
(29,4,0)
(17,4,0)
(48,4,0)
(11,20,0)
(30,36,0)
(6,7,0)
(37,3,0)
(40,7,0)
(31,33,0)
(37,42,0)
(12,3,0)
(10,44,0)
(43,44,0)
(19,32,0)
(35,21,0)
(32,4,0)
(3,37,0)
(8,43,0)
(20,45,0)
(2,23,0)
(13,31,0)
(22,25,0)
(23,5,0)
(42,30,0)
(16,2,0)
(24,48,0)
(39,37,0)
(28,48,0)
(23,2,0)
(32,19,0)
(45,20,0)
(1,25,0)
(21,4,0)
(42,44,0)
(4,7,0)
(11,32,0)
(1,3,0)
(46,6,0)
(9,45,0)
(34,1,0)
(26,30,0)
(41,20,0)
(20,11,0)
(3,44,0)
(48,7,0)
(18,44,0)
(21,7,0)
(25,1,0)
(14,17,0)
(6,4,0)
(4,32,0)
(32,11,0)
(30,0,0)
(38,17,0)
(15,43,0)
(21,35,1)
(20,3,1)
(22,34,1)
(14,38,1)
(21,4,1)
(3,37,1)
(38,4,1)
(9,41,1)
(39,12,1)
(35,6,1)
(42,30,1)
(31,13,1)
(27,21,1)
(48,4,1)
(37,39,1)
(34,3,1)
(11,20,1)
(16,17,1)
(17,14,1)
(27,31,1)
(41,29,1)
(30,36,1)
(4,32,1)
(24,28,1)
(12,42,1)
(37,42,1)
(28,17,1)
(2,16,1)
(1,3,1)
(28,23,1)
(17,4,1)
(25,22,1)
(20,45,1)
(1,25,1)
(32,19,1)
(23,2,1)
(26,47,1)
(32,11,1)
(30,0,1)
(6,46,1)
(46,48,1)
(6,4,1)
(45,9,1)
(48,24,1)
(13,1,1)
(29,1,1)
(30,26,1)
(20,1,2)
(46,1,2)
(45,1,2)
(16,17,2)
(21,4,2)
(17,1,2)
(3,37,2)
(32,19,2)
(38,1,2)
(35,1,2)
(20,3,2)
(31,1,2)
(4,1,2)
(2,17,2)
(6,1,2)
(21,1,2)
(48,4,2)
(29,1,2)
(24,1,2)
(14,1,2)
(13,1,2)
(11,20,2)
(28,1,2)
(30,0,2)
(17,4,2)
(4,32,2)
(42,30,2)
(30,36,2)
(6,4,2)
(11,1,2)
(32,1,2)
(41,1,2)
(23,17,2)
(32,11,2)
(37,42,2)
(9,1,2)
(20,45,2)
(1,3,2)
(23,2,2)
(1,25,2)
(48,1,2)
-----------------------------------
(0,void * dataVoidPtr)
(1,data > strlen(HELLO_STRING)
(2,-1)
(3,data = (*dataPtr)
(4,myString = (char *)
(5,)
(6,printLine(myString)
(7,)
(8,myString)
(9,char)
(10,dataPtr)
(11,malloc(data*sizeof(char)
(12,data)
(13,"Input is less than the length of the source string")
(14,NULL)
(15,if (data > strlen(HELLO_STRING)
(16,1)
(17,myString == NULL)
(18,data)
(19,char *)
(20,data*sizeof(char)
(21,free(myString)
(22,HELLO_STRING)
(23,exit(-1)
(24,HELLO_STRING)
(25,strlen(HELLO_STRING)
(26,dataVoidPtr)
(27,RET)
(28,myString)
(29,myString)
(30,(size_t *)
(31,printLine("Input is less than the length of the source string")
(32,(char *)
(33,)
(34,data)
(35,myString)
(36,size_t *)
(37,*dataPtr)
(38,myString)
(39,dataPtr)
(40,if (myString == NULL)
(41,data)
(42,* dataPtr = (size_t *)
(43,)
(44,)
(45,sizeof(char)
(46,myString)
(47,dataPtr)
(48,strcpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^