-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_09_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
39,40
39,41
40,41
41,42
41,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
60,61
60,62
61,62
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,34,37,42,44,49,50,53,54,57,62,65,67
-----computeFrom-----
13,14
13,15
24,25
24,26
47,48
47,49
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_09_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_09_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(1,12,0)
(9,20,0)
(21,11,0)
(20,10,0)
(11,26,0)
(25,30,0)
(24,5,0)
(16,5,0)
(12,26,0)
(22,27,0)
(15,26,0)
(12,8,0)
(10,20,0)
(20,16,0)
(19,14,0)
(13,5,0)
(7,5,0)
(17,11,0)
(4,16,0)
(28,12,0)
(29,22,0)
(16,20,0)
(8,12,0)
(30,0,0)
(12,16,0)
(3,22,0)
(9,30,0)
(20,9,0)
(0,30,0)
(30,9,0)
(8,6,0)
(32,26,0)
(14,26,0)
(2,0,0)
(1,28,1)
(11,26,1)
(0,2,1)
(8,12,1)
(12,1,1)
(12,26,1)
(20,9,1)
(9,30,1)
(21,14,1)
(14,26,1)
(12,16,1)
(28,11,1)
(2,25,1)
(32,23,1)
(23,31,1)
(18,11,1)
(11,17,1)
(31,16,1)
(18,23,1)
(21,26,1)
(17,21,1)
(16,20,1)
(19,8,1)
(14,19,1)
(20,10,1)
(26,15,1)
(30,0,1)
(15,32,1)
(25,4,1)
(9,30,2)
(20,10,2)
(28,11,2)
(8,11,2)
(14,26,2)
(11,26,2)
(12,16,2)
(17,23,2)
(11,11,2)
(14,11,2)
(12,26,2)
(21,23,2)
(8,12,2)
(21,11,2)
(16,20,2)
(20,9,2)
(32,23,2)
(12,11,2)
(17,11,2)
(11,23,2)
(30,0,2)
(1,11,2)
(19,11,2)
(26,23,2)
(15,23,2)
-----------------------------------
(0,sizeof(int)
(1,i)
(2,int)
(3,i)
(4,data)
(5,)
(6,)
(7,if(GLOBAL_CONST_TRUE)
(8,printIntLine(data[i])
(9,ALLOCA(10*sizeof(int)
(10,int *)
(11,i<10)
(12,data[i])
(13,data)
(14,i++)
(15,0)
(16,data = (int *)
(17,10)
(18,RET)
(19,i)
(20,(int *)
(21,i)
(22,)
(23,GLOBAL_CONST_TRUE)
(24,if(GLOBAL_CONST_TRUE)
(25,10)
(26,i=0)
(27,)
(28,data)
(29,for(i=0; i<10; i++)
(30,10*sizeof(int)
(31,GLOBAL_CONST_TRUE)
(32,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^