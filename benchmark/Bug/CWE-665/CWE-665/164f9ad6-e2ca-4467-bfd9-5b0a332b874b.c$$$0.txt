-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_06_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
49,50
49,51
50,51
51,52
51,53
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
68,69
69,70
71,72
72,73
73,74
73,75
74,75
74,76
75,76
77,78
79,80
79,81
80,81
80,82
83,84
85,86
85,87
86,87
86,88
87,88
90,91
91,92
91,93
92,93
93,94
93,95
95,96
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,59,60,63,66,67,70,76,78,81,82,84,88,89,94,96,101,102,105,106,109,114,117,119
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
57,58
57,59
61,62
61,63
65,66
65,67
73,74
73,75
86,87
86,88
99,100
99,101
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_06_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_06_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_06_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(43,14,0)
(10,42,0)
(44,33,0)
(16,9,0)
(31,15,0)
(40,20,0)
(62,34,0)
(16,23,0)
(27,14,0)
(15,31,0)
(43,42,0)
(25,29,0)
(42,12,0)
(22,30,0)
(56,3,0)
(23,63,0)
(51,25,0)
(37,10,0)
(53,44,0)
(47,31,0)
(30,28,0)
(64,9,0)
(50,14,0)
(26,45,0)
(32,26,0)
(48,15,0)
(60,25,0)
(6,34,0)
(20,66,0)
(66,20,0)
(50,21,0)
(50,56,0)
(35,10,0)
(61,12,0)
(56,50,0)
(5,9,0)
(17,36,0)
(28,45,0)
(31,14,0)
(28,30,0)
(42,30,0)
(8,16,0)
(18,44,0)
(43,56,0)
(66,49,0)
(41,54,0)
(7,50,0)
(52,12,0)
(16,42,0)
(16,56,0)
(59,16,0)
(45,26,0)
(65,43,0)
(57,2,0)
(11,39,0)
(24,42,0)
(54,14,0)
(4,12,0)
(39,9,0)
(58,36,0)
(23,16,0)
(21,50,0)
(45,28,0)
(30,42,0)
(0,15,0)
(30,22,0)
(38,43,0)
(2,9,0)
(1,45,0)
(19,14,0)
(55,2,0)
(13,12,0)
(50,14,1)
(57,39,1)
(54,41,1)
(40,10,1)
(27,19,1)
(42,30,1)
(50,21,1)
(9,5,1)
(57,9,1)
(64,36,1)
(32,1,1)
(46,2,1)
(10,42,1)
(58,34,1)
(16,8,1)
(30,28,1)
(2,9,1)
(11,23,1)
(28,45,1)
(20,40,1)
(7,43,1)
(65,38,1)
(62,10,1)
(30,22,1)
(31,14,1)
(10,35,1)
(23,16,1)
(45,26,1)
(5,64,1)
(0,47,1)
(19,34,1)
(35,37,1)
(39,9,1)
(47,54,1)
(47,14,1)
(15,48,1)
(43,42,1)
(1,24,1)
(41,56,1)
(16,9,1)
(43,65,1)
(31,15,1)
(38,31,1)
(34,6,1)
(66,20,1)
(8,59,1)
(58,31,1)
(39,11,1)
(50,7,1)
(26,32,1)
(43,14,1)
(54,14,1)
(16,56,1)
(46,36,1)
(59,2,1)
(2,55,1)
(55,57,1)
(6,62,1)
(62,66,1)
(14,27,1)
(37,42,1)
(48,0,1)
(17,58,1)
(16,42,1)
(36,17,1)
(56,50,1)
(16,42,2)
(65,31,2)
(5,36,2)
(31,31,2)
(55,2,2)
(43,31,2)
(48,34,2)
(41,31,2)
(15,31,2)
(2,36,2)
(66,10,2)
(0,31,2)
(40,10,2)
(59,2,2)
(20,10,2)
(50,31,2)
(56,31,2)
(57,36,2)
(31,14,2)
(2,2,2)
(54,31,2)
(19,34,2)
(57,2,2)
(43,42,2)
(16,2,2)
(45,26,2)
(50,14,2)
(2,9,2)
(7,31,2)
(30,22,2)
(0,34,2)
(31,34,2)
(14,34,2)
(10,42,2)
(64,36,2)
(66,20,2)
(9,36,2)
(54,14,2)
(23,16,2)
(50,21,2)
(16,56,2)
(30,28,2)
(11,2,2)
(55,36,2)
(48,31,2)
(47,34,2)
(15,34,2)
(47,31,2)
(27,34,2)
(42,30,2)
(16,9,2)
(39,9,2)
(23,2,2)
(28,45,2)
(8,2,2)
(43,14,2)
(31,15,2)
(56,50,2)
(38,31,2)
(39,2,2)
-----------------------------------
(0,10)
(1,10)
(2,i<10)
(3,)
(4,if(STATIC_CONST_FIVE==5)
(5,0)
(6,5)
(7,i)
(8,i)
(9,i=0)
(10,data == NULL)
(11,i)
(12,)
(13,if (data == NULL)
(14,i=0)
(15,10/2)
(16,data[i])
(17,5)
(18,for(i=0; i<10; i++)
(19,i)
(20,-1)
(21,double)
(22,double *)
(23,printDoubleLine(data[i])
(24,data)
(25,)
(26,sizeof(double)
(27,0)
(28,malloc(10*sizeof(double)
(29,)
(30,(double *)
(31,i<(10/2)
(32,double)
(33,)
(34,STATIC_CONST_FIVE==5)
(35,NULL)
(36,STATIC_CONST_FIVE==5)
(37,data)
(38,data)
(39,i++)
(40,1)
(41,i)
(42,data = (double *)
(43,data[i])
(44,)
(45,10*sizeof(double)
(46,RET)
(47,i)
(48,2)
(49,)
(50,(double)
(51,for(i=0; i<(10/2)
(52,if(STATIC_CONST_FIVE==5)
(53,i)
(54,i++)
(55,10)
(56,data[i] = (double)
(57,i)
(58,STATIC_CONST_FIVE)
(59,data)
(60,i)
(61,data)
(62,STATIC_CONST_FIVE)
(63,)
(64,i)
(65,i)
(66,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^