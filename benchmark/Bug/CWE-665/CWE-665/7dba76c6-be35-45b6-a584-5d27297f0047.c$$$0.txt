-----label-----
1
-----code-----
void CWE665_Improper_Initialization__wchar_t_ncat_15_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100];
    data = dataBuffer;
    switch(6)
    {
    case 6:
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        size_t sourceLen;
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        sourceLen = wcslen(source);
        /* POTENTIAL FLAW: If data is not initialized properly, wcsncat() may not function correctly */
        wcsncat(data, source, sourceLen);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
27,29
27,30
27,31
27,32
27,33
28,29
33,34
34,35
34,36
35,36
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,26,29,30,31,32,36,37,38,43,45,48,50,52,56,58,59,61,62,67,69,70,71,75,78,80,84,86,88,90,94,96
-----computeFrom-----
20,21
20,22
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__wchar_t_ncat_15_bad(){    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t sourceLen;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        sourceLen = wcslen(source);        /* POTENTIAL FLAW: If data is not initialized properly, wcsncat() may not function correctly */        wcsncat(data, source, sourceLen);        printWLine(data);    }}
void
CWE665_Improper_Initialization__wchar_t_ncat_15_bad()
CWE665_Improper_Initialization__wchar_t_ncat_15_bad
{    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t sourceLen;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        sourceLen = wcslen(source);        /* POTENTIAL FLAW: If data is not initialized properly, wcsncat() may not function correctly */        wcsncat(data, source, sourceLen);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100];
wchar_t dataBuffer[100];
wchar_t
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        size_t sourceLen;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        sourceLen = wcslen(source);        /* POTENTIAL FLAW: If data is not initialized properly, wcsncat() may not function correctly */        wcsncat(data, source, sourceLen);        printWLine(data);    }
size_t sourceLen;
size_t sourceLen;
size_t
size_t
sourceLen
sourceLen
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
wcsncat(data, source, sourceLen);
wcsncat(data, source, sourceLen)
wcsncat
wcsncat
data
data
source
source
sourceLen
sourceLen
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(12,25,0)
(16,21,0)
(11,2,0)
(2,16,0)
(0,3,0)
(7,1,0)
(27,21,0)
(2,3,0)
(23,2,0)
(8,21,0)
(20,1,0)
(4,17,0)
(18,16,0)
(10,1,0)
(29,5,0)
(5,16,0)
(17,1,0)
(9,16,0)
(26,21,0)
(19,3,0)
(3,21,0)
(6,2,0)
(5,3,0)
(24,22,0)
(13,1,0)
(25,22,0)
(22,3,0)
(2,22,0)
(22,25,0)
(28,3,0)
(5,29,1)
(13,15,1)
(24,19,1)
(22,25,1)
(25,12,1)
(4,15,1)
(2,16,1)
(19,20,1)
(16,18,1)
(14,5,1)
(23,6,1)
(2,11,1)
(2,22,1)
(15,16,1)
(11,23,1)
(20,17,1)
(18,9,1)
(17,4,1)
(5,16,1)
(12,24,1)
(19,13,1)
(29,2,1)
(6,22,1)
(5,16,2)
(17,15,2)
(20,15,2)
(4,15,2)
(2,16,2)
(13,15,2)
(2,22,2)
(22,25,2)
-----------------------------------
(0,source)
(1,)
(2,wcsncat(data, source, sourceLen)
(3,)
(4,"Benign, fixed string")
(5,printWLine(data)
(6,data)
(7,case 6:)
(8,dataBuffer)
(9,data)
(10,default:)
(11,sourceLen)
(12,source)
(13,break;)
(14,RET)
(15,6)
(16,data = dataBuffer)
(17,printLine("Benign, fixed string")
(18,dataBuffer)
(19,\'\\0\')
(20,break;)
(21,)
(22,sourceLen = wcslen(source)
(23,source)
(24,sourceLen)
(25,wcslen(source)
(26,switch(6)
(27,data)
(28,sourceLen)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^