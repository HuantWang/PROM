-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_03_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
49,50
49,51
50,51
50,52
53,54
54,55
54,56
55,56
56,57
56,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,48,51,52,57,59,64,65,68,69,72,77,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
50,51
50,52
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_03_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_03_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(6,33,0)
(24,1,0)
(31,21,0)
(4,8,0)
(8,23,0)
(25,1,0)
(23,12,0)
(20,24,0)
(15,29,0)
(12,33,0)
(26,1,0)
(37,24,0)
(2,28,0)
(34,14,0)
(19,38,0)
(32,8,0)
(41,25,0)
(14,34,0)
(23,8,0)
(22,38,0)
(27,0,0)
(28,1,0)
(7,12,0)
(42,1,0)
(12,7,0)
(3,21,0)
(12,23,0)
(0,30,0)
(8,4,0)
(18,4,0)
(9,25,0)
(33,38,0)
(35,14,0)
(43,17,0)
(33,12,0)
(24,33,0)
(36,40,0)
(24,15,0)
(10,38,0)
(21,33,0)
(39,17,0)
(34,5,0)
(44,38,0)
(13,0,0)
(16,40,0)
(15,24,0)
(40,16,1)
(28,1,1)
(20,25,1)
(32,6,1)
(12,7,1)
(8,4,1)
(18,32,1)
(39,21,1)
(26,40,1)
(14,35,1)
(39,34,1)
(35,21,1)
(24,33,1)
(24,37,1)
(15,24,1)
(28,2,1)
(9,41,1)
(16,36,1)
(43,39,1)
(24,1,1)
(37,20,1)
(21,3,1)
(1,42,1)
(33,12,1)
(25,1,1)
(3,31,1)
(36,17,1)
(12,23,1)
(41,28,1)
(31,33,1)
(34,14,1)
(21,33,1)
(11,25,1)
(23,8,1)
(11,40,1)
(25,9,1)
(42,26,1)
(41,1,1)
(4,18,1)
(17,43,1)
(2,15,1)
(25,1,2)
(12,23,2)
(28,25,2)
(37,25,2)
(34,14,2)
(15,24,2)
(41,25,2)
(9,25,2)
(14,21,2)
(42,40,2)
(24,1,2)
(21,33,2)
(24,25,2)
(26,40,2)
(25,40,2)
(9,40,2)
(41,40,2)
(24,33,2)
(1,40,2)
(12,7,2)
(23,8,2)
(8,4,2)
(15,25,2)
(28,1,2)
(35,21,2)
(20,25,2)
(33,12,2)
(2,25,2)
(34,21,2)
(25,25,2)
-----------------------------------
(0,)
(1,i=0)
(2,i)
(3,NULL)
(4,sizeof(double)
(5,)
(6,data)
(7,double *)
(8,10*sizeof(double)
(9,10)
(10,if(5==5)
(11,RET)
(12,(double *)
(13,i)
(14,-1)
(15,printDoubleLine(data[i])
(16,5)
(17,5==5)
(18,double)
(19,data)
(20,data)
(21,data == NULL)
(22,if(5==5)
(23,malloc(10*sizeof(double)
(24,data[i])
(25,i<10)
(26,i)
(27,for(i=0; i<10; i++)
(28,i++)
(29,)
(30,)
(31,data)
(32,10)
(33,data = (double *)
(34,exit(-1)
(35,1)
(36,5)
(37,i)
(38,)
(39,5)
(40,5==5)
(41,i)
(42,0)
(43,5)
(44,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^