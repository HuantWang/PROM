-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_10_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
53,54
53,55
56,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
66,67
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
80,81
82,83
82,84
83,84
85,86
86,87
86,88
87,88
88,89
88,90
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,40,42,47,48,51,54,55,58,65,67,68,70,76,78,79,81,84,89,91,96,97,100,101,104,109,113,115,116,120,124,126,127
-----computeFrom-----
14,15
14,16
26,27
26,28
45,46
45,47
49,50
49,51
53,54
53,55
61,62
61,63
72,73
72,74
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_10_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_10_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_10_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(47,67,0)
(24,17,0)
(9,39,0)
(63,7,0)
(18,10,0)
(59,0,0)
(45,7,0)
(27,66,0)
(66,27,0)
(4,35,0)
(11,24,0)
(49,1,0)
(31,36,0)
(37,66,0)
(54,39,0)
(57,46,0)
(66,15,0)
(1,22,0)
(2,60,0)
(15,46,0)
(53,14,0)
(13,10,0)
(61,15,0)
(16,33,0)
(60,36,0)
(52,62,0)
(7,36,0)
(51,39,0)
(35,14,0)
(27,25,0)
(62,56,0)
(25,27,0)
(24,36,0)
(25,22,0)
(21,0,0)
(50,62,0)
(44,17,0)
(18,49,0)
(23,38,0)
(48,49,0)
(67,47,0)
(29,36,0)
(8,66,0)
(14,35,0)
(66,10,0)
(64,23,0)
(55,45,0)
(28,41,0)
(67,44,0)
(6,10,0)
(44,36,0)
(45,24,0)
(33,41,0)
(30,47,0)
(18,15,0)
(32,7,0)
(41,33,0)
(42,44,0)
(19,14,0)
(65,18,0)
(40,18,0)
(46,15,0)
(49,24,0)
(15,39,0)
(47,15,0)
(46,20,0)
(34,67,0)
(57,33,0)
(47,36,0)
(0,10,0)
(35,36,0)
(46,57,0)
(49,18,0)
(7,15,0)
(7,45,0)
(12,58,0)
(58,10,0)
(43,27,0)
(69,47,0)
(20,46,0)
(1,49,0)
(5,23,0)
(27,44,0)
(33,57,0)
(44,36,1)
(47,69,1)
(55,7,1)
(18,15,1)
(13,6,1)
(41,28,1)
(49,18,1)
(69,30,1)
(27,44,1)
(7,36,1)
(59,58,1)
(33,41,1)
(58,12,1)
(0,10,1)
(47,36,1)
(60,2,1)
(58,10,1)
(31,3,1)
(34,47,1)
(60,36,1)
(2,44,1)
(45,7,1)
(46,57,1)
(68,35,1)
(26,0,1)
(68,3,1)
(49,48,1)
(49,24,1)
(0,21,1)
(8,1,1)
(25,27,1)
(30,24,1)
(15,46,1)
(28,16,1)
(67,47,1)
(24,36,1)
(66,15,1)
(12,25,1)
(24,11,1)
(27,66,1)
(66,10,1)
(48,18,1)
(42,67,1)
(18,65,1)
(29,31,1)
(7,15,1)
(7,32,1)
(6,68,1)
(3,15,1)
(18,10,1)
(67,34,1)
(27,43,1)
(19,53,1)
(65,40,1)
(35,14,1)
(43,66,1)
(57,33,1)
(47,15,1)
(26,68,1)
(63,35,1)
(37,8,1)
(14,19,1)
(16,61,1)
(32,63,1)
(1,49,1)
(11,45,1)
(4,36,1)
(53,4,1)
(35,36,1)
(59,10,1)
(40,0,1)
(10,13,1)
(44,42,1)
(4,60,1)
(45,55,1)
(36,29,1)
(66,37,1)
(46,20,1)
(21,59,1)
(65,0,2)
(10,68,2)
(35,14,2)
(69,35,2)
(59,68,2)
(67,47,2)
(2,35,2)
(58,0,2)
(25,27,2)
(12,0,2)
(14,35,2)
(6,68,2)
(18,0,2)
(53,3,2)
(35,36,2)
(45,35,2)
(8,0,2)
(49,0,2)
(53,35,2)
(33,41,2)
(27,66,2)
(58,10,2)
(25,0,2)
(42,35,2)
(46,20,2)
(60,36,2)
(18,10,2)
(35,35,2)
(19,3,2)
(7,35,2)
(48,0,2)
(31,3,2)
(66,0,2)
(35,3,2)
(47,35,2)
(21,68,2)
(46,57,2)
(32,35,2)
(63,35,2)
(49,24,2)
(18,15,2)
(67,35,2)
(49,18,2)
(55,35,2)
(0,0,2)
(0,10,2)
(27,0,2)
(29,3,2)
(27,44,2)
(45,7,2)
(34,35,2)
(24,36,2)
(66,15,2)
(24,35,2)
(44,35,2)
(1,49,2)
(7,15,2)
(7,36,2)
(14,3,2)
(43,0,2)
(60,35,2)
(59,0,2)
(0,68,2)
(1,0,2)
(66,10,2)
(21,0,2)
(30,35,2)
(4,35,2)
(11,35,2)
(13,68,2)
(40,0,2)
(44,36,2)
(47,36,2)
(47,15,2)
(15,46,2)
(36,3,2)
(19,35,2)
(57,33,2)
(4,3,2)
(37,0,2)
-----------------------------------
(0,i<10)
(1,printIntLine(data[i].intOne)
(2,i)
(3,globalTrue)
(4,i)
(5,for(i=0; i<10; i++)
(6,i)
(7,data[i])
(8,data)
(9,data)
(10,i=0)
(11,i)
(12,i)
(13,0)
(14,10/2)
(15,data = (twoIntsStruct *)
(16,10)
(17,)
(18,data[i])
(19,2)
(20,twoIntsStruct *)
(21,10)
(22,)
(23,)
(24,data[i].intOne = i)
(25,printIntLine(data[i].intTwo)
(26,RET)
(27,data[i].intTwo)
(28,twoIntsStruct)
(29,0)
(30,data)
(31,i)
(32,i)
(33,10*sizeof(twoIntsStruct)
(34,intTwo)
(35,i<(10/2)
(36,i=0)
(37,i)
(38,)
(39,)
(40,data)
(41,sizeof(twoIntsStruct)
(42,i)
(43,intTwo)
(44,data[i].intTwo = i)
(45,data[i].intOne)
(46,(twoIntsStruct *)
(47,data[i])
(48,intOne)
(49,data[i].intOne)
(50,i)
(51,if(globalTrue)
(52,for(i=0; i<(10/2)
(53,10)
(54,if(globalTrue)
(55,intOne)
(56,)
(57,ALLOCA(10*sizeof(twoIntsStruct)
(58,i++)
(59,i)
(60,i++)
(61,data)
(62,)
(63,data)
(64,i)
(65,i)
(66,data[i])
(67,data[i].intTwo)
(68,globalTrue)
(69,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^