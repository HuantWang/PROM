-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_12_bad()
{
    int * data;
    int dataUninitArray[10];
    data = dataUninitArray;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
26,27
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
46,47
46,48
49,50
50,51
52,53
53,54
54,55
54,56
55,56
55,57
56,57
58,59
60,61
62,63
63,64
63,65
64,65
65,66
65,67
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
84,85
84,86
85,86
85,87
86,87
88,89
90,91
92,93
92,94
92,95
93,94
94,95
96,97
97,98
97,99
98,99
99,100
99,101
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
109,110
109,111
110,111
113,114
114,115
116,117
117,118
118,119
118,120
119,120
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
129,130
129,131
131,132
133,134
133,135
133,136
133,137
134,135
135,136
135,137
136,137
139,140
139,141
140,141
143,144
144,145
146,147
147,148
148,149
148,150
149,150
149,151
150,151
152,153
154,155
156,157
156,158
157,158
158,159
158,160
160,161
162,163
162,164
162,165
162,166
163,164
164,165
164,166
165,166
168,169
168,170
169,170
172,173
173,174
175,176
176,177
177,178
177,179
178,179
180,181
180,182
181,182
183,184
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,33,35,40,41,44,47,48,51,57,59,61,66,68,73,74,77,78,81,87,89,91,95,100,102,107,108,111,112,115,120,123,125,130,132,137,138,141,142,145,151,153,155,159,161,166,167,170,171,174,179,182,184
-----computeFrom-----
20,21
20,22
38,39
38,40
42,43
42,44
46,47
46,48
54,55
54,56
71,72
71,73
75,76
75,77
84,85
84,86
105,106
105,107
109,110
109,111
135,136
135,137
139,140
139,141
148,149
148,150
164,165
164,166
168,169
168,170
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_12_bad(){    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_12_bad
{    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
int dataUninitArray[10];
int dataUninitArray[10];
int
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(20,34,0)
(22,69,0)
(97,56,0)
(77,24,0)
(7,5,0)
(57,97,0)
(9,22,0)
(71,14,0)
(80,4,0)
(95,60,0)
(43,11,0)
(95,14,0)
(58,22,0)
(12,22,0)
(67,14,0)
(11,40,0)
(34,99,0)
(24,14,0)
(90,10,0)
(33,4,0)
(83,58,0)
(4,85,0)
(6,64,0)
(42,93,0)
(54,1,0)
(93,14,0)
(73,10,0)
(62,75,0)
(70,36,0)
(72,65,0)
(36,22,0)
(61,88,0)
(28,81,0)
(39,17,0)
(41,40,0)
(46,69,0)
(51,75,0)
(99,34,0)
(91,69,0)
(31,92,0)
(26,58,0)
(9,40,0)
(0,92,0)
(53,14,0)
(55,32,0)
(79,9,0)
(50,36,0)
(38,69,0)
(3,45,0)
(98,31,0)
(58,64,0)
(29,3,0)
(65,85,0)
(99,86,0)
(1,10,0)
(75,45,0)
(34,45,0)
(34,95,0)
(37,65,0)
(9,64,0)
(52,69,0)
(76,92,0)
(88,44,0)
(58,10,0)
(82,22,0)
(64,10,0)
(2,32,0)
(34,22,0)
(96,73,0)
(9,95,0)
(63,9,0)
(81,13,0)
(87,40,0)
(47,34,0)
(89,7,0)
(19,1,0)
(9,39,0)
(8,40,0)
(15,24,0)
(39,9,0)
(36,92,0)
(16,95,0)
(68,67,0)
(35,11,0)
(49,10,0)
(93,22,0)
(59,93,0)
(84,88,0)
(81,92,0)
(74,7,0)
(25,45,0)
(18,97,0)
(21,0,0)
(36,81,0)
(94,8,0)
(27,45,0)
(64,78,0)
(34,81,0)
(0,32,0)
(32,0,0)
(66,92,0)
(93,95,0)
(9,81,0)
(19,73,1)
(58,83,1)
(3,45,1)
(41,87,1)
(99,34,1)
(45,27,1)
(98,81,1)
(34,95,1)
(40,41,1)
(21,31,1)
(1,54,1)
(28,36,1)
(11,40,1)
(30,75,1)
(3,29,1)
(35,43,1)
(14,71,1)
(93,42,1)
(2,55,1)
(90,49,1)
(34,20,1)
(25,48,1)
(43,8,1)
(21,92,1)
(68,95,1)
(0,32,1)
(59,24,1)
(64,6,1)
(47,75,1)
(53,23,1)
(9,81,1)
(24,77,1)
(73,10,1)
(36,22,1)
(9,22,1)
(12,82,1)
(27,25,1)
(51,45,1)
(49,48,1)
(9,64,1)
(50,70,1)
(63,11,1)
(70,0,1)
(8,94,1)
(36,92,1)
(93,14,1)
(31,98,1)
(19,10,1)
(16,93,1)
(51,3,1)
(9,79,1)
(9,95,1)
(9,40,1)
(94,39,1)
(15,14,1)
(64,10,1)
(32,2,1)
(20,47,1)
(0,92,1)
(67,68,1)
(66,23,1)
(87,1,1)
(81,92,1)
(75,45,1)
(67,14,1)
(24,14,1)
(11,35,1)
(10,90,1)
(96,64,1)
(93,22,1)
(26,1,1)
(34,45,1)
(75,62,1)
(36,50,1)
(95,14,1)
(23,22,1)
(6,58,1)
(79,63,1)
(1,10,1)
(92,76,1)
(77,15,1)
(55,21,1)
(42,59,1)
(76,66,1)
(43,40,1)
(8,40,1)
(81,28,1)
(15,67,1)
(48,0,1)
(95,16,1)
(29,99,1)
(30,11,1)
(48,24,1)
(58,22,1)
(62,51,1)
(73,96,1)
(34,22,1)
(31,92,1)
(58,10,1)
(54,19,1)
(83,26,1)
(34,81,1)
(71,53,1)
(39,9,1)
(22,12,1)
(94,11,2)
(40,48,2)
(8,40,2)
(16,24,2)
(54,48,2)
(95,24,2)
(83,1,2)
(43,11,2)
(24,23,2)
(98,0,2)
(90,48,2)
(64,10,2)
(32,23,2)
(47,75,2)
(11,11,2)
(50,0,2)
(21,0,2)
(41,48,2)
(19,1,2)
(62,75,2)
(96,1,2)
(24,24,2)
(0,32,2)
(9,22,2)
(75,45,2)
(11,40,2)
(1,48,2)
(43,48,2)
(59,24,2)
(39,9,2)
(73,1,2)
(2,0,2)
(68,24,2)
(3,45,2)
(42,24,2)
(54,1,2)
(34,22,2)
(2,23,2)
(70,0,2)
(26,1,2)
(75,75,2)
(34,81,2)
(28,0,2)
(92,23,2)
(39,11,2)
(8,11,2)
(31,92,2)
(93,24,2)
(34,95,2)
(14,23,2)
(79,11,2)
(55,23,2)
(27,48,2)
(9,81,2)
(53,23,2)
(81,0,2)
(32,0,2)
(63,11,2)
(31,0,2)
(3,75,2)
(55,0,2)
(87,48,2)
(29,75,2)
(0,23,2)
(15,23,2)
(20,75,2)
(6,1,2)
(58,22,2)
(36,0,2)
(9,11,2)
(77,23,2)
(36,92,2)
(77,24,2)
(11,48,2)
(93,22,2)
(35,11,2)
(76,23,2)
(9,64,2)
(51,48,2)
(93,14,2)
(1,1,2)
(49,48,2)
(73,10,2)
(45,48,2)
(99,75,2)
(25,48,2)
(99,34,2)
(9,40,2)
(95,14,2)
(64,1,2)
(34,75,2)
(15,24,2)
(35,48,2)
(62,48,2)
(51,75,2)
(0,92,2)
(67,24,2)
(10,48,2)
(58,10,2)
(34,45,2)
(67,14,2)
(58,1,2)
(24,14,2)
(66,23,2)
(0,0,2)
(1,10,2)
(81,92,2)
(36,22,2)
(9,95,2)
(21,23,2)
(19,48,2)
(71,23,2)
(75,48,2)
-----------------------------------
(0,i<(10/2)
(1,i<10)
(2,2)
(3,i++)
(4,)
(5,)
(6,i)
(7,)
(8,i++)
(9,data[i])
(10,i=0)
(11,i<10)
(12,dataUninitArray)
(13,)
(14,i=0)
(15,i)
(16,i)
(17,)
(18,for(i=0; i<10; i++)
(19,i)
(20,i)
(21,i)
(22,data = dataUninitArray)
(23,globalReturnsTrueOrFalse()
(24,i<10)
(25,i)
(26,data)
(27,0)
(28,i)
(29,i)
(30,RET)
(31,i++)
(32,10/2)
(33,i)
(34,data[i])
(35,10)
(36,data[i])
(37,for(i=0; i<10; i++)
(38,if(globalReturnsTrueOrFalse()
(39,printIntLine(data[i])
(40,i=0)
(41,0)
(42,i)
(43,i)
(44,)
(45,i=0)
(46,data)
(47,data)
(48,globalReturnsTrueOrFalse()
(49,i)
(50,i)
(51,i)
(52,dataUninitArray)
(53,i)
(54,10)
(55,10)
(56,)
(57,i)
(58,data[i])
(59,data)
(60,)
(61,i)
(62,10)
(63,data)
(64,data[i] = i)
(65,)
(66,i)
(67,i++)
(68,i)
(69,)
(70,data)
(71,0)
(72,i)
(73,i++)
(74,for(i=0; i<(10/2)
(75,i<10)
(76,0)
(77,10)
(78,)
(79,i)
(80,for(i=0; i<10; i++)
(81,data[i] = i)
(82,data)
(83,i)
(84,for(i=0; i<10; i++)
(85,)
(86,)
(87,i)
(88,)
(89,i)
(90,0)
(91,if(globalReturnsTrueOrFalse()
(92,i=0)
(93,data[i])
(94,i)
(95,data[i] = i)
(96,i)
(97,)
(98,i)
(99,printIntLine(data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^