-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_04_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_04_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_04_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(21,0,0)
(12,32,0)
(29,10,0)
(26,19,0)
(9,35,0)
(19,17,0)
(36,16,0)
(1,9,0)
(16,36,0)
(23,17,0)
(19,38,0)
(25,12,0)
(34,32,0)
(3,1,0)
(27,32,0)
(0,21,0)
(7,36,0)
(5,19,0)
(4,0,0)
(30,38,0)
(8,29,0)
(33,12,0)
(2,36,0)
(40,5,0)
(17,19,0)
(37,1,0)
(1,32,0)
(24,38,0)
(14,5,0)
(36,2,0)
(22,32,0)
(17,16,0)
(1,19,0)
(28,27,0)
(39,38,0)
(17,23,0)
(21,15,0)
(6,29,0)
(16,17,0)
(11,2,0)
(9,1,0)
(18,38,0)
(11,7,1)
(20,12,1)
(0,4,1)
(25,32,1)
(40,14,1)
(32,22,1)
(37,3,1)
(25,27,1)
(34,13,1)
(31,5,1)
(33,25,1)
(7,26,1)
(14,19,1)
(12,33,1)
(16,36,1)
(27,28,1)
(4,5,1)
(36,2,1)
(5,40,1)
(12,32,1)
(17,23,1)
(20,13,1)
(9,1,1)
(13,31,1)
(17,16,1)
(28,9,1)
(5,19,1)
(22,34,1)
(19,17,1)
(27,32,1)
(1,32,1)
(1,19,1)
(1,37,1)
(2,11,1)
(31,21,1)
(3,12,1)
(21,0,1)
(9,1,2)
(27,12,2)
(12,32,2)
(16,36,2)
(32,13,2)
(28,12,2)
(27,32,2)
(17,16,2)
(1,19,2)
(5,19,2)
(1,12,2)
(19,17,2)
(37,12,2)
(36,2,2)
(21,5,2)
(12,12,2)
(3,12,2)
(33,12,2)
(4,5,2)
(1,32,2)
(22,13,2)
(34,13,2)
(21,0,2)
(25,12,2)
(12,13,2)
(17,23,2)
(25,13,2)
(33,13,2)
(9,12,2)
(0,5,2)
-----------------------------------
(0,-1)
(1,data[i])
(2,sizeof(double)
(3,data)
(4,1)
(5,data == NULL)
(6,i)
(7,10)
(8,for(i=0; i<10; i++)
(9,printDoubleLine(data[i])
(10,)
(11,double)
(12,i<10)
(13,STATIC_CONST_TRUE)
(14,data)
(15,)
(16,malloc(10*sizeof(double)
(17,(double *)
(18,if (data == NULL)
(19,data = (double *)
(20,RET)
(21,exit(-1)
(22,0)
(23,double *)
(24,if(STATIC_CONST_TRUE)
(25,i)
(26,data)
(27,i++)
(28,i)
(29,)
(30,if(STATIC_CONST_TRUE)
(31,STATIC_CONST_TRUE)
(32,i=0)
(33,10)
(34,i)
(35,)
(36,10*sizeof(double)
(37,i)
(38,)
(39,data)
(40,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^