-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_04_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
49,50
50,51
50,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
76,77
76,78
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
90,91
91,92
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,37,39,44,45,48,51,52,55,61,63,66,67,69,72,77,79,84,85,88,89,92,97,100,102
-----computeFrom-----
13,14
13,15
24,25
24,26
42,43
42,44
46,47
46,48
50,51
50,52
58,59
58,60
82,83
82,84
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_04_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_04_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(7,43,0)
(25,50,0)
(12,1,0)
(50,8,0)
(35,3,0)
(27,43,0)
(38,28,0)
(11,10,0)
(19,30,0)
(40,46,0)
(28,38,0)
(17,9,0)
(13,38,0)
(21,19,0)
(9,0,0)
(10,30,0)
(18,49,0)
(30,37,0)
(26,19,0)
(36,22,0)
(1,11,0)
(54,38,0)
(38,0,0)
(22,9,0)
(28,47,0)
(41,1,0)
(35,30,0)
(6,49,0)
(19,28,0)
(24,41,0)
(34,0,0)
(14,0,0)
(32,22,0)
(11,1,0)
(33,7,0)
(31,0,0)
(15,37,0)
(35,43,0)
(9,22,0)
(38,13,0)
(2,35,0)
(53,7,0)
(19,0,0)
(1,41,0)
(48,37,0)
(20,10,0)
(3,35,0)
(52,50,0)
(3,16,0)
(4,35,0)
(35,28,0)
(44,43,0)
(5,34,0)
(10,20,0)
(10,11,0)
(39,30,0)
(49,42,0)
(30,10,0)
(51,37,0)
(46,43,0)
(22,32,1)
(24,12,1)
(33,43,1)
(43,44,1)
(35,30,1)
(7,43,1)
(9,22,1)
(41,24,1)
(30,10,1)
(19,26,1)
(34,0,1)
(38,54,1)
(11,1,1)
(28,38,1)
(38,13,1)
(9,0,1)
(46,43,1)
(10,11,1)
(5,28,1)
(44,27,1)
(46,40,1)
(53,33,1)
(17,34,1)
(14,31,1)
(31,45,1)
(54,19,1)
(19,30,1)
(35,2,1)
(23,9,1)
(36,17,1)
(0,14,1)
(23,45,1)
(2,4,1)
(38,0,1)
(34,5,1)
(17,0,1)
(29,7,1)
(19,0,1)
(3,35,1)
(29,23,1)
(33,46,1)
(21,9,1)
(45,30,1)
(40,3,1)
(26,21,1)
(12,39,1)
(35,43,1)
(27,23,1)
(7,53,1)
(10,20,1)
(32,36,1)
(4,7,1)
(1,41,1)
(35,28,1)
(35,43,2)
(7,7,2)
(28,38,2)
(9,22,2)
(5,9,2)
(10,20,2)
(3,35,2)
(7,23,2)
(54,9,2)
(32,45,2)
(46,7,2)
(34,0,2)
(10,11,2)
(44,23,2)
(34,9,2)
(21,9,2)
(35,7,2)
(26,9,2)
(38,13,2)
(9,0,2)
(53,23,2)
(33,7,2)
(19,30,2)
(31,45,2)
(43,23,2)
(3,7,2)
(30,10,2)
(46,43,2)
(36,9,2)
(7,43,2)
(0,45,2)
(38,9,2)
(53,7,2)
(36,45,2)
(1,41,2)
(9,9,2)
(22,9,2)
(2,7,2)
(19,0,2)
(27,23,2)
(35,30,2)
(22,45,2)
(14,45,2)
(32,9,2)
(17,45,2)
(40,7,2)
(35,28,2)
(9,45,2)
(11,1,2)
(4,7,2)
(17,9,2)
(38,0,2)
(33,23,2)
(28,9,2)
(19,9,2)
-----------------------------------
(0,i=0)
(1,10*sizeof(double)
(2,i)
(3,printDoubleLine(data[i])
(4,data)
(5,i)
(6,i)
(7,i<10)
(8,)
(9,i<(10/2)
(10,(double *)
(11,ALLOCA(10*sizeof(double)
(12,10)
(13,double)
(14,0)
(15,if(STATIC_CONST_TRUE)
(16,)
(17,i)
(18,for(i=0; i<10; i++)
(19,data[i])
(20,double *)
(21,data)
(22,10/2)
(23,STATIC_CONST_TRUE)
(24,double)
(25,i)
(26,i)
(27,i)
(28,data[i] = (double)
(29,RET)
(30,data = (double *)
(31,i)
(32,2)
(33,i)
(34,i++)
(35,data[i])
(36,10)
(37,)
(38,(double)
(39,data)
(40,i)
(41,sizeof(double)
(42,)
(43,i=0)
(44,0)
(45,STATIC_CONST_TRUE)
(46,i++)
(47,)
(48,data)
(49,)
(50,)
(51,if(STATIC_CONST_TRUE)
(52,for(i=0; i<(10/2)
(53,10)
(54,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^