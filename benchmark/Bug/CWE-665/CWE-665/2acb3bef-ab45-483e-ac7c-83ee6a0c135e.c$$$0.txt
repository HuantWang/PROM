-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,27,0)
(12,25,0)
(12,24,0)
(3,26,0)
(30,23,0)
(23,12,0)
(11,5,0)
(5,33,0)
(23,30,0)
(24,12,0)
(21,8,0)
(8,35,0)
(30,35,0)
(37,35,0)
(12,23,0)
(37,13,0)
(31,29,0)
(35,13,0)
(29,35,0)
(33,5,0)
(19,2,0)
(10,35,0)
(8,13,0)
(18,2,0)
(32,36,0)
(33,9,0)
(34,10,0)
(27,30,0)
(17,35,0)
(28,13,0)
(15,8,0)
(22,10,0)
(2,16,0)
(35,30,0)
(7,37,0)
(6,14,0)
(26,36,0)
(1,12,0)
(20,24,0)
(36,25,0)
(29,13,0)
(36,26,0)
(0,6,0)
(11,10,1)
(1,17,1)
(6,0,1)
(37,7,1)
(17,36,1)
(23,12,1)
(26,3,1)
(12,25,1)
(20,1,1)
(34,35,1)
(30,23,1)
(22,34,1)
(0,36,1)
(4,29,1)
(7,8,1)
(15,21,1)
(8,15,1)
(30,27,1)
(31,37,1)
(29,35,1)
(33,5,1)
(36,25,1)
(21,10,1)
(37,35,1)
(3,32,1)
(36,26,1)
(5,11,1)
(21,33,1)
(29,31,1)
(10,22,1)
(10,35,1)
(35,30,1)
(24,20,1)
(8,35,1)
(4,6,1)
(12,24,1)
(29,35,2)
(36,25,2)
(6,36,2)
(15,36,2)
(7,36,2)
(22,36,2)
(8,35,2)
(17,36,2)
(0,36,2)
(8,36,2)
(30,36,2)
(12,25,2)
(31,36,2)
(1,36,2)
(37,35,2)
(29,36,2)
(30,27,2)
(21,36,2)
(10,36,2)
(34,36,2)
(24,36,2)
(33,5,2)
(35,36,2)
(36,26,2)
(33,10,2)
(37,36,2)
(23,12,2)
(30,23,2)
(12,36,2)
(23,36,2)
(10,35,2)
(11,10,2)
(20,36,2)
(35,30,2)
(12,24,2)
(5,10,2)
-----------------------------------
(0,"Input is less than the length of the source string")
(1,data)
(2,)
(3,HELLO_STRING)
(4,RET)
(5,-1)
(6,printLine("Input is less than the length of the source string")
(7,myString)
(8,strcpy(myString, HELLO_STRING)
(9,)
(10,myString == NULL)
(11,1)
(12,data*sizeof(char)
(13,)
(14,)
(15,HELLO_STRING)
(16,)
(17,myString)
(18,myString)
(19,if (data > strlen(HELLO_STRING)
(20,char)
(21,myString)
(22,NULL)
(23,malloc(data*sizeof(char)
(24,sizeof(char)
(25,size_t data)
(26,strlen(HELLO_STRING)
(27,char *)
(28,if (myString == NULL)
(29,free(myString)
(30,(char *)
(31,myString)
(32,data)
(33,exit(-1)
(34,myString)
(35,myString = (char *)
(36,data > strlen(HELLO_STRING)
(37,printLine(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^