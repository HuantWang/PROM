-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_05_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,29,31,34,39,41,46,47,50,51,54,59,63,65,66,70,74,76,77
-----computeFrom-----
22,23
22,24
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_05_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_05_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(16,31,0)
(24,16,0)
(7,8,0)
(24,33,0)
(17,31,0)
(33,24,0)
(8,0,0)
(20,7,0)
(21,24,0)
(32,15,0)
(13,15,0)
(4,1,0)
(35,33,0)
(29,0,0)
(33,13,0)
(14,0,0)
(16,24,0)
(7,17,0)
(8,7,0)
(8,13,0)
(9,15,0)
(6,14,0)
(11,15,0)
(30,8,0)
(1,2,0)
(17,7,0)
(18,15,0)
(26,1,0)
(22,8,0)
(23,14,0)
(28,0,0)
(10,28,0)
(25,13,0)
(33,0,0)
(34,13,0)
(12,33,0)
(27,0,0)
(22,16,1)
(28,0,1)
(7,20,1)
(12,14,1)
(35,12,1)
(16,24,1)
(27,19,1)
(5,14,1)
(21,33,1)
(33,0,1)
(6,0,1)
(23,6,1)
(20,8,1)
(8,30,1)
(33,35,1)
(7,8,1)
(28,10,1)
(30,22,1)
(6,28,1)
(33,13,1)
(19,3,1)
(5,19,1)
(29,27,1)
(10,17,1)
(17,7,1)
(3,13,1)
(13,25,1)
(24,21,1)
(14,0,1)
(14,23,1)
(8,0,1)
(25,34,1)
(0,29,1)
(24,33,1)
(8,13,1)
(14,14,2)
(7,14,2)
(33,14,2)
(24,33,2)
(30,14,2)
(27,19,2)
(22,14,2)
(14,0,2)
(8,14,2)
(8,0,2)
(28,14,2)
(35,14,2)
(23,19,2)
(16,24,2)
(33,0,2)
(23,14,2)
(0,19,2)
(6,14,2)
(7,8,2)
(20,14,2)
(8,13,2)
(6,19,2)
(17,14,2)
(10,14,2)
(14,19,2)
(17,7,2)
(33,13,2)
(24,14,2)
(28,0,2)
(29,19,2)
(21,14,2)
(12,14,2)
(16,14,2)
-----------------------------------
(0,i=0)
(1,)
(2,)
(3,staticTrue)
(4,i)
(5,RET)
(6,i)
(7,data[i].intTwo)
(8,data[i])
(9,data)
(10,i)
(11,if(staticTrue)
(12,data)
(13,data = dataUninitArray)
(14,i<10)
(15,)
(16,printIntLine(data[i].intOne)
(17,printIntLine(data[i].intTwo)
(18,dataUninitArray)
(19,staticTrue)
(20,intTwo)
(21,intOne)
(22,data)
(23,10)
(24,data[i].intOne)
(25,dataUninitArray)
(26,for(i=0; i<10; i++)
(27,i)
(28,i++)
(29,0)
(30,i)
(31,)
(32,if(staticTrue)
(33,data[i])
(34,data)
(35,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^