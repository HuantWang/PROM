-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_12_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
80,81
81,82
81,83
82,83
83,84
83,85
85,86
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
108,109
110,111
110,112
110,113
111,112
112,113
114,115
115,116
115,117
116,117
117,118
117,119
119,120
121,122
121,123
121,124
121,125
122,123
123,124
123,125
124,125
127,128
127,129
128,129
131,132
132,133
134,135
135,136
136,137
136,138
137,138
139,140
139,141
140,141
142,143
144,145
144,146
145,146
145,147
146,147
147,148
147,149
149,150
151,152
151,153
151,154
151,155
152,153
153,154
153,155
154,155
157,158
157,159
158,159
161,162
162,163
164,165
165,166
166,167
166,168
167,168
167,169
168,169
170,171
172,173
174,175
174,176
175,176
176,177
176,178
178,179
180,181
180,182
180,183
180,184
181,182
182,183
182,184
183,184
186,187
186,188
187,188
190,191
191,192
193,194
194,195
195,196
195,197
196,197
198,199
198,200
199,200
201,202
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,58,59,62,65,66,69,75,77,79,84,86,91,92,95,96,99,105,107,109,113,118,120,125,126,129,130,133,138,141,143,148,150,155,156,159,160,163,169,171,173,177,179,184,185,188,189,192,197,200,202
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
89,90
89,91
93,94
93,95
102,103
102,104
123,124
123,125
127,128
127,129
153,154
153,155
157,158
157,159
166,167
166,168
182,183
182,184
186,187
186,188
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_12_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_12_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(51,94,0)
(47,4,0)
(66,4,0)
(72,9,0)
(73,20,0)
(82,93,0)
(49,18,0)
(69,50,0)
(27,25,0)
(91,93,0)
(103,63,0)
(5,72,0)
(58,97,0)
(98,18,0)
(7,62,0)
(62,4,0)
(36,24,0)
(19,94,0)
(25,106,0)
(20,73,0)
(19,50,0)
(73,51,0)
(48,51,0)
(48,62,0)
(61,29,0)
(40,39,0)
(102,83,0)
(78,106,0)
(0,39,0)
(73,72,0)
(90,71,0)
(79,82,0)
(92,72,0)
(18,39,0)
(41,23,0)
(94,77,0)
(100,112,0)
(5,39,0)
(59,56,0)
(14,105,0)
(7,103,0)
(3,106,0)
(73,71,0)
(5,51,0)
(60,4,0)
(72,39,0)
(8,82,0)
(108,73,0)
(50,19,0)
(7,30,0)
(37,24,0)
(15,109,0)
(77,94,0)
(84,71,0)
(46,70,0)
(16,74,0)
(33,25,0)
(18,49,0)
(101,5,0)
(20,34,0)
(86,23,0)
(83,106,0)
(64,51,0)
(43,65,0)
(111,30,0)
(70,106,0)
(75,66,0)
(45,73,0)
(21,53,0)
(99,83,0)
(50,105,0)
(25,30,0)
(24,51,0)
(112,4,0)
(89,65,0)
(104,5,0)
(1,48,0)
(65,6,0)
(109,55,0)
(7,93,0)
(62,95,0)
(96,7,0)
(67,58,0)
(110,93,0)
(7,51,0)
(32,109,0)
(57,48,0)
(17,56,0)
(56,71,0)
(26,49,0)
(54,29,0)
(94,51,0)
(103,7,0)
(76,10,0)
(28,29,0)
(52,58,0)
(48,4,0)
(107,22,0)
(31,10,0)
(88,62,0)
(23,6,0)
(94,19,0)
(42,2,0)
(30,106,0)
(25,51,0)
(53,16,0)
(22,71,0)
(85,39,0)
(44,29,0)
(105,50,0)
(30,81,0)
(73,62,0)
(38,49,0)
(16,53,0)
(2,93,0)
(87,7,0)
(10,13,0)
(51,29,0)
(35,0,0)
(7,72,0)
(12,66,0)
(40,85,1)
(8,79,1)
(36,37,1)
(42,103,1)
(60,80,1)
(3,11,1)
(78,3,1)
(73,62,1)
(1,66,1)
(101,104,1)
(53,21,1)
(49,38,1)
(73,51,1)
(30,106,1)
(2,93,1)
(48,57,1)
(48,51,1)
(0,39,1)
(69,64,1)
(68,82,1)
(18,39,1)
(0,35,1)
(45,56,1)
(25,106,1)
(99,106,1)
(66,75,1)
(99,70,1)
(11,66,1)
(70,106,1)
(93,91,1)
(110,83,1)
(26,98,1)
(62,88,1)
(96,82,1)
(19,50,1)
(7,93,1)
(68,56,1)
(7,62,1)
(47,60,1)
(4,47,1)
(94,77,1)
(51,94,1)
(94,19,1)
(98,0,1)
(59,17,1)
(56,59,1)
(83,102,1)
(16,53,1)
(75,12,1)
(112,100,1)
(27,83,1)
(22,107,1)
(48,4,1)
(17,22,1)
(50,105,1)
(70,46,1)
(104,18,1)
(56,71,1)
(112,4,1)
(107,20,1)
(82,8,1)
(72,39,1)
(66,4,1)
(25,51,1)
(20,73,1)
(33,27,1)
(30,111,1)
(7,72,1)
(84,90,1)
(5,101,1)
(62,4,1)
(37,51,1)
(7,30,1)
(18,49,1)
(35,72,1)
(24,51,1)
(98,39,1)
(39,40,1)
(88,48,1)
(103,7,1)
(73,71,1)
(80,16,1)
(12,112,1)
(90,11,1)
(2,42,1)
(24,36,1)
(7,51,1)
(14,69,1)
(72,92,1)
(57,1,1)
(79,2,1)
(106,78,1)
(82,93,1)
(17,71,1)
(105,14,1)
(22,71,1)
(85,80,1)
(38,26,1)
(5,39,1)
(73,108,1)
(25,33,1)
(7,87,1)
(111,25,1)
(83,106,1)
(102,99,1)
(21,24,1)
(108,45,1)
(80,24,1)
(100,62,1)
(46,30,1)
(79,93,1)
(92,5,1)
(5,51,1)
(12,4,1)
(11,18,1)
(91,110,1)
(71,84,1)
(73,72,1)
(87,96,1)
(47,80,2)
(21,24,2)
(48,51,2)
(16,24,2)
(94,19,2)
(7,82,2)
(25,51,2)
(7,51,2)
(70,106,2)
(111,83,2)
(98,80,2)
(93,11,2)
(90,11,2)
(38,80,2)
(59,11,2)
(1,66,2)
(17,11,2)
(30,106,2)
(82,11,2)
(56,11,2)
(25,106,2)
(59,56,2)
(66,66,2)
(102,11,2)
(106,11,2)
(94,77,2)
(75,80,2)
(62,66,2)
(19,50,2)
(92,18,2)
(56,71,2)
(18,18,2)
(78,11,2)
(12,66,2)
(87,82,2)
(99,11,2)
(5,51,2)
(57,66,2)
(18,80,2)
(18,49,2)
(48,66,2)
(72,39,2)
(112,66,2)
(16,53,2)
(26,80,2)
(53,24,2)
(46,83,2)
(101,18,2)
(108,56,2)
(84,11,2)
(7,72,2)
(20,73,2)
(72,18,2)
(5,18,2)
(7,93,2)
(71,11,2)
(62,4,2)
(73,56,2)
(79,11,2)
(107,56,2)
(38,18,2)
(48,4,2)
(83,83,2)
(83,11,2)
(40,80,2)
(82,93,2)
(51,94,2)
(8,82,2)
(73,71,2)
(49,18,2)
(82,82,2)
(4,80,2)
(66,4,2)
(2,82,2)
(103,7,2)
(79,82,2)
(102,83,2)
(98,18,2)
(83,106,2)
(30,83,2)
(22,56,2)
(0,39,2)
(50,105,2)
(91,11,2)
(0,18,2)
(12,80,2)
(35,18,2)
(73,62,2)
(8,11,2)
(60,80,2)
(3,11,2)
(42,82,2)
(25,83,2)
(7,30,2)
(33,83,2)
(20,56,2)
(26,18,2)
(70,83,2)
(100,66,2)
(56,56,2)
(45,56,2)
(73,72,2)
(17,56,2)
(7,62,2)
(104,18,2)
(18,39,2)
(49,80,2)
(75,66,2)
(39,80,2)
(85,80,2)
(66,80,2)
(112,4,2)
(5,39,2)
(27,83,2)
(103,82,2)
(110,11,2)
(99,83,2)
(24,51,2)
(96,82,2)
(88,66,2)
(22,71,2)
(73,51,2)
(2,93,2)
-----------------------------------
(0,i++)
(1,data)
(2,i++)
(3,i)
(4,i=0)
(5,data[i])
(6,)
(7,data[i])
(8,10)
(9,)
(10,)
(11,globalReturnsTrueOrFalse()
(12,i)
(13,)
(14,int)
(15,for(i=0; i<10; i++)
(16,exit(-1)
(17,i)
(18,i<(10/2)
(19,malloc(10*sizeof(int)
(20,printIntLine(data[i])
(21,1)
(22,i++)
(23,)
(24,data == NULL)
(25,data[i])
(26,10)
(27,data)
(28,if(globalReturnsTrueOrFalse()
(29,)
(30,data[i] = i)
(31,for(i=0; i<10; i++)
(32,i)
(33,i)
(34,)
(35,i)
(36,NULL)
(37,data)
(38,2)
(39,i=0)
(40,0)
(41,for(i=0; i<10; i++)
(42,i)
(43,for(i=0; i<10; i++)
(44,data)
(45,data)
(46,i)
(47,0)
(48,data[i])
(49,10/2)
(50,10*sizeof(int)
(51,data = (int *)
(52,i)
(53,-1)
(54,if (data == NULL)
(55,)
(56,i<10)
(57,i)
(58,)
(59,10)
(60,i)
(61,if(globalReturnsTrueOrFalse()
(62,data[i] = i)
(63,)
(64,data)
(65,)
(66,i<10)
(67,for(i=0; i<(10/2)
(68,RET)
(69,10)
(70,i++)
(71,i=0)
(72,data[i] = i)
(73,data[i])
(74,)
(75,10)
(76,i)
(77,int *)
(78,0)
(79,i)
(80,globalReturnsTrueOrFalse()
(81,)
(82,i<10)
(83,i<10)
(84,0)
(85,i)
(86,i)
(87,i)
(88,i)
(89,i)
(90,i)
(91,0)
(92,i)
(93,i=0)
(94,(int *)
(95,)
(96,data)
(97,)
(98,i)
(99,i)
(100,i)
(101,i)
(102,10)
(103,printIntLine(data[i])
(104,data)
(105,sizeof(int)
(106,i=0)
(107,i)
(108,i)
(109,)
(110,i)
(111,i)
(112,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^