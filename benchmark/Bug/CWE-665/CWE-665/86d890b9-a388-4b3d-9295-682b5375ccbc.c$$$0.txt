-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_09_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,19,24,27,30,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
22,23
22,24
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_09_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_09_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_09_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,19,0)
(31,3,0)
(22,41,0)
(4,48,0)
(48,21,0)
(41,7,0)
(41,3,0)
(13,8,0)
(27,24,0)
(2,11,0)
(21,48,0)
(41,34,0)
(33,18,0)
(41,18,0)
(47,3,0)
(45,42,0)
(46,14,0)
(1,19,0)
(28,27,0)
(38,46,0)
(30,8,0)
(49,7,0)
(17,13,0)
(36,33,0)
(8,33,0)
(25,13,0)
(9,16,0)
(2,0,0)
(7,40,0)
(29,19,0)
(33,36,0)
(39,8,0)
(21,7,0)
(21,3,0)
(43,11,0)
(13,24,0)
(42,24,0)
(10,19,0)
(27,8,0)
(8,24,0)
(37,7,0)
(44,24,0)
(18,41,0)
(16,5,0)
(6,21,0)
(33,8,0)
(35,30,0)
(11,2,0)
(7,49,0)
(42,8,0)
(26,46,0)
(18,33,0)
(34,41,0)
(15,34,0)
(23,30,0)
(42,45,1)
(2,11,1)
(41,34,1)
(32,12,1)
(41,3,1)
(48,4,1)
(11,43,1)
(25,17,1)
(41,7,1)
(43,30,1)
(28,13,1)
(20,3,1)
(23,8,1)
(21,48,1)
(22,39,1)
(27,28,1)
(6,12,1)
(42,8,1)
(3,47,1)
(47,31,1)
(32,16,1)
(18,41,1)
(35,23,1)
(21,7,1)
(12,7,1)
(27,8,1)
(15,22,1)
(30,8,1)
(33,18,1)
(12,20,1)
(45,27,1)
(9,21,1)
(13,25,1)
(33,36,1)
(39,21,1)
(16,9,1)
(34,15,1)
(21,3,1)
(49,37,1)
(13,8,1)
(17,2,1)
(7,49,1)
(30,35,1)
(4,6,1)
(17,30,1)
(37,20,1)
(32,42,1)
(8,33,1)
(28,21,2)
(21,7,2)
(37,20,2)
(22,21,2)
(30,21,2)
(42,8,2)
(41,3,2)
(9,21,2)
(2,30,2)
(48,12,2)
(33,36,2)
(8,21,2)
(7,20,2)
(27,21,2)
(45,21,2)
(21,48,2)
(43,30,2)
(18,21,2)
(13,21,2)
(41,7,2)
(34,21,2)
(41,21,2)
(25,21,2)
(42,21,2)
(27,8,2)
(23,21,2)
(41,34,2)
(4,12,2)
(33,21,2)
(15,21,2)
(6,12,2)
(17,21,2)
(21,12,2)
(35,21,2)
(2,11,2)
(21,3,2)
(33,18,2)
(49,20,2)
(13,8,2)
(8,33,2)
(18,41,2)
(30,8,2)
(39,21,2)
(16,21,2)
(7,49,2)
(11,30,2)
-----------------------------------
(0,)
(1,data)
(2,exit(-1)
(3,data = 0)
(4,HELLO_STRING)
(5,)
(6,data)
(7,data = rand()
(8,myString = (wchar_t *)
(9,"Input is less than the length of the source string")
(10,if(GLOBAL_CONST_TRUE)
(11,-1)
(12,GLOBAL_CONST_TRUE)
(13,wcscpy(myString, HELLO_STRING)
(14,)
(15,wchar_t)
(16,printLine("Input is less than the length of the source string")
(17,myString)
(18,malloc(data*sizeof(wchar_t)
(19,)
(20,GLOBAL_CONST_TRUE)
(21,data > wcslen(HELLO_STRING)
(22,data)
(23,myString)
(24,)
(25,HELLO_STRING)
(26,myString)
(27,printWLine(myString)
(28,myString)
(29,if(GLOBAL_CONST_TRUE)
(30,myString == NULL)
(31,data)
(32,RET)
(33,(wchar_t *)
(34,sizeof(wchar_t)
(35,NULL)
(36,wchar_t *)
(37,data)
(38,if (data > wcslen(HELLO_STRING)
(39,myString)
(40,)
(41,data*sizeof(wchar_t)
(42,free(myString)
(43,1)
(44,if (myString == NULL)
(45,myString)
(46,)
(47,0)
(48,wcslen(HELLO_STRING)
(49,rand()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^