-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
56,57
59,60
60,61
61,62
61,63
62,63
65,66
66,67
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
75,76
76,77
76,78
77,78
78,79
78,80
80,81
80,82
83,84
83,85
83,86
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
92,97
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
105,106
105,107
106,107
108,109
109,110
109,111
112,113
112,114
113,114
113,115
114,115
116,117
118,119
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
126,129
127,128
129,130
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
154,155
154,156
156,157
156,158
159,160
159,161
159,162
160,161
160,162
161,162
161,163
162,163
164,165
164,166
165,166
167,168
169,170
169,171
170,171
173,174
173,175
173,176
173,177
173,178
174,175
175,176
175,177
176,177
178,179
178,180
179,180
179,181
181,182
183,184
183,185
184,185
186,187
186,188
187,188
189,190
190,191
190,192
193,194
193,195
194,195
194,196
195,196
197,198
199,200
200,201
201,202
201,203
202,203
204,205
206,207
207,208
207,209
207,210
208,209
210,211
212,213
214,215
215,216
215,217
216,217
218,219
220,221
221,222
221,223
222,223
224,225
226,227
227,228
228,229
228,230
229,230
-----nextToken-----
2,4,9,11,15,16,20,25,27,30,32,37,39,41,43,45,50,53,55,57,58,63,64,69,70,74,79,81,82,86,89,91,96,99,101,104,107,110,111,115,117,122,124,128,130,132,136,138,142,144,149,150,155,157,158,163,166,168,171,172,177,180,182,185,188,191,192,196,198,203,205,209,211,213,217,219,223,225,230,231
-----computeFrom-----
13,14
13,15
34,35
34,36
48,49
48,50
67,68
67,69
84,85
84,86
94,95
94,96
105,106
105,107
113,114
113,115
160,161
160,162
161,162
161,163
169,170
169,171
175,176
175,177
186,187
186,188
194,195
194,196
-----guardedBy-----
39,55
45,57
91,132
86,107
168,213
171,188
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(112,20,0)
(51,55,0)
(44,25,0)
(46,97,0)
(75,78,0)
(34,59,0)
(95,38,0)
(51,107,0)
(79,77,0)
(110,62,0)
(76,15,0)
(11,81,0)
(42,39,0)
(33,37,0)
(20,112,0)
(22,93,0)
(69,10,0)
(41,101,0)
(23,92,0)
(77,18,0)
(97,10,0)
(3,26,0)
(90,102,0)
(18,77,0)
(13,37,0)
(28,68,0)
(91,8,0)
(97,68,0)
(12,11,0)
(67,8,0)
(82,75,0)
(39,11,0)
(35,16,0)
(94,33,0)
(7,57,0)
(111,39,0)
(12,10,0)
(16,17,0)
(11,39,0)
(80,36,0)
(0,67,0)
(6,20,0)
(32,68,0)
(72,4,0)
(101,33,0)
(27,48,0)
(85,92,0)
(62,70,0)
(112,10,0)
(68,9,0)
(12,68,0)
(29,57,0)
(112,68,0)
(13,33,0)
(77,79,0)
(60,39,0)
(102,56,0)
(104,59,0)
(62,68,0)
(47,17,0)
(43,57,0)
(8,67,0)
(52,11,0)
(83,109,0)
(58,4,0)
(92,17,0)
(24,33,0)
(48,52,0)
(38,12,0)
(59,105,0)
(5,80,0)
(19,43,0)
(31,30,0)
(94,37,0)
(52,10,0)
(52,78,0)
(30,62,0)
(14,93,0)
(50,37,0)
(87,67,0)
(103,26,0)
(78,52,0)
(86,67,0)
(18,112,0)
(36,80,0)
(96,97,0)
(50,33,0)
(77,17,0)
(97,70,0)
(62,11,0)
(67,93,0)
(33,75,0)
(52,48,0)
(63,76,0)
(98,13,0)
(78,75,0)
(17,77,0)
(100,37,0)
(64,101,0)
(43,17,0)
(10,26,0)
(89,52,0)
(49,29,0)
(93,59,0)
(97,11,0)
(112,18,0)
(73,13,0)
(92,57,0)
(1,10,0)
(66,83,0)
(25,40,0)
(71,11,0)
(12,38,0)
(39,93,0)
(112,11,0)
(106,55,0)
(62,30,0)
(75,82,0)
(29,17,0)
(75,33,0)
(55,51,0)
(65,12,0)
(45,83,0)
(17,57,0)
(62,10,0)
(53,26,0)
(70,62,0)
(4,61,0)
(70,97,0)
(74,94,0)
(21,16,0)
(36,108,0)
(88,50,0)
(52,68,0)
(84,112,0)
(97,10,1)
(35,17,1)
(62,30,1)
(87,93,1)
(97,68,1)
(69,1,1)
(74,13,1)
(102,90,1)
(2,11,1)
(73,101,1)
(28,32,1)
(12,68,1)
(47,70,1)
(44,8,1)
(99,10,1)
(63,70,1)
(39,93,1)
(75,82,1)
(98,73,1)
(29,17,1)
(16,21,1)
(70,97,1)
(50,88,1)
(89,24,1)
(91,67,1)
(14,99,1)
(94,33,1)
(94,74,1)
(10,69,1)
(13,33,1)
(46,62,1)
(64,41,1)
(75,78,1)
(67,0,1)
(54,29,1)
(30,31,1)
(96,46,1)
(0,86,1)
(32,99,1)
(8,91,1)
(48,27,1)
(68,28,1)
(50,33,1)
(73,51,1)
(27,89,1)
(93,22,1)
(86,87,1)
(88,94,1)
(17,77,1)
(12,38,1)
(23,16,1)
(78,52,1)
(112,10,1)
(20,6,1)
(54,76,1)
(43,19,1)
(43,17,1)
(19,92,1)
(112,68,1)
(62,68,1)
(33,75,1)
(11,39,1)
(41,33,1)
(112,11,1)
(97,96,1)
(65,2,1)
(21,35,1)
(6,84,1)
(52,48,1)
(12,11,1)
(62,10,1)
(110,2,1)
(77,18,1)
(25,44,1)
(67,93,1)
(55,106,1)
(51,55,1)
(54,50,1)
(5,16,1)
(18,112,1)
(24,12,1)
(92,17,1)
(13,98,1)
(52,10,1)
(85,23,1)
(101,33,1)
(52,11,1)
(80,5,1)
(92,85,1)
(23,36,1)
(42,71,1)
(101,64,1)
(54,102,1)
(49,43,1)
(29,49,1)
(2,68,1)
(111,42,1)
(31,110,1)
(95,65,1)
(97,11,1)
(106,101,1)
(76,63,1)
(52,68,1)
(84,47,1)
(60,111,1)
(16,17,1)
(71,8,1)
(12,10,1)
(2,25,1)
(38,95,1)
(70,62,1)
(112,20,1)
(62,11,1)
(8,67,1)
(22,14,1)
(36,80,1)
(39,60,1)
(90,12,1)
(77,79,1)
(88,12,2)
(24,12,2)
(85,70,2)
(92,70,2)
(75,12,2)
(106,101,2)
(41,12,2)
(101,33,2)
(55,101,2)
(16,70,2)
(49,70,2)
(35,70,2)
(112,11,2)
(30,2,2)
(60,8,2)
(97,11,2)
(33,12,2)
(50,12,2)
(62,10,2)
(77,18,2)
(98,12,2)
(90,12,2)
(12,68,2)
(52,11,2)
(97,68,2)
(46,62,2)
(12,11,2)
(43,70,2)
(62,30,2)
(75,82,2)
(74,12,2)
(73,12,2)
(78,12,2)
(17,70,2)
(52,10,2)
(13,33,2)
(8,99,2)
(101,12,2)
(36,80,2)
(38,2,2)
(39,8,2)
(28,99,2)
(25,8,2)
(6,70,2)
(102,12,2)
(50,33,2)
(12,2,2)
(68,99,2)
(12,10,2)
(19,70,2)
(67,93,2)
(67,99,2)
(70,97,2)
(13,12,2)
(75,78,2)
(39,93,2)
(27,12,2)
(97,62,2)
(80,16,2)
(111,8,2)
(77,79,2)
(20,70,2)
(62,68,2)
(51,55,2)
(97,10,2)
(0,99,2)
(84,70,2)
(12,38,2)
(17,77,2)
(92,17,2)
(11,8,2)
(77,70,2)
(70,2,2)
(112,10,2)
(86,99,2)
(62,2,2)
(8,67,2)
(112,20,2)
(91,99,2)
(110,2,2)
(44,8,2)
(21,70,2)
(94,12,2)
(93,99,2)
(29,17,2)
(71,8,2)
(29,70,2)
(63,70,2)
(89,12,2)
(52,12,2)
(18,112,2)
(42,8,2)
(16,17,2)
(11,39,2)
(52,68,2)
(31,2,2)
(18,70,2)
(33,75,2)
(5,16,2)
(47,70,2)
(51,101,2)
(22,99,2)
(23,70,2)
(43,17,2)
(14,99,2)
(96,62,2)
(112,70,2)
(62,11,2)
(52,48,2)
(87,99,2)
(112,68,2)
(78,52,2)
(32,99,2)
(70,62,2)
(65,2,2)
(64,12,2)
(95,2,2)
(76,70,2)
(48,12,2)
(36,16,2)
(94,33,2)
-----------------------------------
(0,stdin)
(1,data)
(2,globalReturnsTrueOrFalse()
(3,data)
(4,)
(5,1)
(6,char)
(7,if (myString == NULL)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,)
(10,data = 0)
(11,data = strtoul(inputBuffer, NULL, 0)
(12,data > strlen(HELLO_STRING)
(13,strcpy(myString, HELLO_STRING)
(14,inputBuffer)
(15,)
(16,myString == NULL)
(17,myString = (char *)
(18,malloc(data*sizeof(char)
(19,myString)
(20,sizeof(char)
(21,NULL)
(22,"")
(23,myString)
(24,myString)
(25,printLine("fgets()
(26,)
(27,char)
(28,20)
(29,free(myString)
(30,strlen(HELLO_STRING)
(31,HELLO_STRING)
(32,data)
(33,myString = (char *)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,myString)
(36,exit(-1)
(37,)
(38,strlen(HELLO_STRING)
(39,strtoul(inputBuffer, NULL, 0)
(40,)
(41,myString)
(42,inputBuffer)
(43,printLine(myString)
(44,"fgets()
(45,myString)
(46,data)
(47,myString)
(48,sizeof(char)
(49,myString)
(50,free(myString)
(51,exit(-1)
(52,data*sizeof(char)
(53,if(globalReturnsTrueOrFalse()
(54,RET)
(55,-1)
(56,)
(57,)
(58,if (data > strlen(HELLO_STRING)
(59,)
(60,0)
(61,)
(62,data > strlen(HELLO_STRING)
(63,"Input is less than the length of the source string or too large")
(64,NULL)
(65,data)
(66,if (data > strlen(HELLO_STRING)
(67,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(68,data = 20)
(69,0)
(70,data > strlen(HELLO_STRING)
(71,data)
(72,myString)
(73,myString)
(74,myString)
(75,(char *)
(76,printLine("Input is less than the length of the source string or too large")
(77,(char *)
(78,malloc(data*sizeof(char)
(79,char *)
(80,-1)
(81,)
(82,char *)
(83,)
(84,data)
(85,HELLO_STRING)
(86,CHAR_ARRAY_SIZE)
(87,inputBuffer)
(88,myString)
(89,data)
(90,"Input is less than the length of the source string")
(91,NULL)
(92,strcpy(myString, HELLO_STRING)
(93,inputBuffer[CHAR_ARRAY_SIZE] = "")
(94,printLine(myString)
(95,HELLO_STRING)
(96,100)
(97,data < 100)
(98,HELLO_STRING)
(99,globalReturnsTrueOrFalse()
(100,if (myString == NULL)
(101,myString == NULL)
(102,printLine("Input is less than the length of the source string")
(103,if(globalReturnsTrueOrFalse()
(104,inputBuffer)
(105,)
(106,1)
(107,)
(108,)
(109,)
(110,data)
(111,NULL)
(112,data*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^