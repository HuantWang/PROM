-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
49,50
49,51
50,51
51,52
53,54
54,55
54,56
55,56
56,57
56,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,52,57,59,64,65,68,69,72,77,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(18,9,0)
(30,15,0)
(3,31,0)
(27,34,0)
(33,7,0)
(30,19,0)
(18,30,0)
(19,30,0)
(2,24,0)
(17,16,0)
(38,26,0)
(13,24,0)
(24,31,0)
(39,6,0)
(7,36,0)
(32,26,0)
(0,7,0)
(8,10,0)
(32,14,0)
(20,10,0)
(22,31,0)
(11,6,0)
(9,18,0)
(10,19,0)
(30,18,0)
(19,6,0)
(12,9,0)
(23,9,0)
(35,23,0)
(24,17,0)
(1,31,0)
(24,19,0)
(9,23,0)
(29,22,0)
(21,6,0)
(4,19,0)
(26,32,0)
(34,31,0)
(17,24,0)
(28,6,0)
(37,22,0)
(15,30,0)
(34,31,1)
(5,32,1)
(29,31,1)
(24,19,1)
(19,30,1)
(30,15,1)
(9,23,1)
(2,13,1)
(13,22,1)
(34,27,1)
(24,2,1)
(29,34,1)
(32,26,1)
(24,31,1)
(22,31,1)
(26,38,1)
(38,10,1)
(3,1,1)
(31,3,1)
(8,20,1)
(20,19,1)
(12,4,1)
(1,25,1)
(18,9,1)
(22,37,1)
(40,25,1)
(27,17,1)
(25,5,1)
(40,22,1)
(10,19,1)
(10,8,1)
(35,12,1)
(30,18,1)
(37,29,1)
(17,24,1)
(23,35,1)
(5,10,1)
(27,22,2)
(30,18,2)
(22,31,2)
(24,22,2)
(18,9,2)
(29,22,2)
(30,15,2)
(29,25,2)
(24,31,2)
(22,25,2)
(32,10,2)
(31,25,2)
(13,22,2)
(34,22,2)
(1,25,2)
(24,19,2)
(26,10,2)
(34,31,2)
(22,22,2)
(37,22,2)
(2,22,2)
(17,22,2)
(10,19,2)
(17,24,2)
(38,10,2)
(19,30,2)
(32,26,2)
(9,23,2)
(37,25,2)
(3,25,2)
-----------------------------------
(0,i)
(1,i)
(2,i)
(3,0)
(4,data)
(5,staticReturnsTrue()
(6,)
(7,)
(8,NULL)
(9,10*sizeof(int)
(10,data == NULL)
(11,if(staticReturnsTrue()
(12,10)
(13,data)
(14,)
(15,int *)
(16,)
(17,printIntLine(data[i])
(18,malloc(10*sizeof(int)
(19,data = (int *)
(20,data)
(21,if (data == NULL)
(22,i<10)
(23,sizeof(int)
(24,data[i])
(25,staticReturnsTrue()
(26,-1)
(27,i)
(28,if(staticReturnsTrue()
(29,i)
(30,(int *)
(31,i=0)
(32,exit(-1)
(33,for(i=0; i<10; i++)
(34,i++)
(35,int)
(36,)
(37,10)
(38,1)
(39,data)
(40,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^