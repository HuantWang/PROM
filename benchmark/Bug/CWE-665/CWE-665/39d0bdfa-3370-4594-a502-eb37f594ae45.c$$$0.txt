-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_03_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
71,72
71,73
72,73
72,74
75,76
76,77
76,78
77,78
78,79
78,80
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
92,93
93,94
95,96
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,33,38,40,45,46,49,52,53,56,62,64,67,68,70,73,74,79,81,86,87,90,91,94,99,102,104
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
72,73
72,74
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_03_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_03_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(25,21,0)
(2,51,0)
(8,1,0)
(48,1,0)
(46,9,0)
(2,15,0)
(24,52,0)
(35,2,0)
(45,52,0)
(51,5,0)
(34,15,0)
(34,56,0)
(27,13,0)
(14,5,0)
(21,17,0)
(28,41,0)
(31,15,0)
(6,47,0)
(37,5,0)
(46,23,0)
(51,36,0)
(33,31,0)
(42,13,0)
(44,52,0)
(49,15,0)
(36,57,0)
(36,51,0)
(12,41,0)
(46,52,0)
(26,46,0)
(9,39,0)
(29,56,0)
(54,51,0)
(20,24,0)
(13,47,0)
(53,11,0)
(4,5,0)
(57,36,0)
(7,52,0)
(50,24,0)
(46,51,0)
(27,36,0)
(56,34,0)
(0,56,0)
(36,27,0)
(38,21,0)
(10,11,0)
(11,30,0)
(23,46,0)
(13,27,0)
(32,39,0)
(23,18,0)
(19,7,0)
(40,46,0)
(39,22,0)
(39,15,0)
(22,39,0)
(9,58,0)
(3,15,0)
(47,13,0)
(43,34,0)
(55,2,0)
(2,9,0)
(39,9,0)
(55,35,1)
(48,8,1)
(24,50,1)
(39,22,1)
(39,15,1)
(49,3,1)
(43,15,1)
(45,44,1)
(3,41,1)
(32,2,1)
(39,32,1)
(40,24,1)
(9,39,1)
(20,52,1)
(35,34,1)
(7,19,1)
(7,52,1)
(56,29,1)
(15,49,1)
(36,27,1)
(51,36,1)
(31,15,1)
(1,48,1)
(8,34,1)
(2,51,1)
(41,12,1)
(46,26,1)
(16,1,1)
(33,9,1)
(46,52,1)
(2,55,1)
(26,40,1)
(52,45,1)
(47,6,1)
(27,13,1)
(19,23,1)
(50,20,1)
(36,57,1)
(16,24,1)
(28,51,1)
(20,7,1)
(31,33,1)
(13,47,1)
(46,9,1)
(24,52,1)
(34,56,1)
(0,43,1)
(2,15,1)
(29,0,1)
(12,28,1)
(6,42,1)
(46,51,1)
(8,41,1)
(44,1,1)
(34,15,1)
(23,46,1)
(42,54,1)
(43,31,1)
(46,9,2)
(3,41,2)
(32,34,2)
(24,52,2)
(51,36,2)
(49,41,2)
(24,24,2)
(35,34,2)
(2,34,2)
(40,24,2)
(7,52,2)
(34,41,2)
(9,34,2)
(39,15,2)
(39,22,2)
(36,57,2)
(44,1,2)
(7,24,2)
(2,15,2)
(52,1,2)
(50,1,2)
(46,52,2)
(34,56,2)
(20,1,2)
(29,34,2)
(20,24,2)
(50,24,2)
(39,34,2)
(23,46,2)
(24,1,2)
(15,41,2)
(29,41,2)
(13,47,2)
(9,39,2)
(34,15,2)
(46,24,2)
(55,34,2)
(43,34,2)
(36,27,2)
(33,34,2)
(43,41,2)
(2,51,2)
(31,34,2)
(45,1,2)
(19,24,2)
(27,13,2)
(31,15,2)
(46,51,2)
(56,34,2)
(23,24,2)
(34,34,2)
(0,41,2)
(56,41,2)
(26,24,2)
(0,34,2)
-----------------------------------
(0,10)
(1,5==5)
(2,data[i])
(3,i)
(4,if(5==5)
(5,)
(6,double)
(7,i++)
(8,5)
(9,data[i] = (double)
(10,i)
(11,)
(12,5)
(13,10*sizeof(double)
(14,data)
(15,i=0)
(16,RET)
(17,)
(18,)
(19,i)
(20,i)
(21,)
(22,double)
(23,printDoubleLine(data[i])
(24,i<10)
(25,for(i=0; i<10; i++)
(26,i)
(27,ALLOCA(10*sizeof(double)
(28,5)
(29,2)
(30,)
(31,i++)
(32,i)
(33,i)
(34,i<(10/2)
(35,data)
(36,(double *)
(37,if(5==5)
(38,i)
(39,(double)
(40,data)
(41,5==5)
(42,10)
(43,i)
(44,i)
(45,0)
(46,data[i])
(47,sizeof(double)
(48,5)
(49,0)
(50,10)
(51,data = (double *)
(52,i=0)
(53,for(i=0; i<(10/2)
(54,data)
(55,i)
(56,10/2)
(57,double *)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^