-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_07_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
49,50
49,51
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
62,63
65,66
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
73,74
76,77
78,79
78,80
79,80
79,81
80,81
83,84
84,85
84,86
85,86
86,87
86,88
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
103,105
104,105
105,106
105,107
106,107
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
119,121
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,30,31,36,38,43,44,47,50,51,54,61,63,64,66,72,74,75,77,81,82,87,89,94,95,98,99,102,107,111,113,114,118,122,124,125
-----computeFrom-----
22,23
22,24
28,29
28,30
41,42
41,43
45,46
45,47
49,50
49,51
57,58
57,59
68,69
68,70
79,80
79,81
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_07_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticFive==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_07_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_07_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticFive==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(staticFive==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(staticFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(36,2,0)
(42,31,0)
(67,45,0)
(29,52,0)
(57,61,0)
(33,19,0)
(7,18,0)
(22,12,0)
(30,10,0)
(62,50,0)
(52,45,0)
(21,2,0)
(41,38,0)
(52,8,0)
(25,57,0)
(61,57,0)
(43,55,0)
(15,49,0)
(18,2,0)
(23,20,0)
(50,55,0)
(19,14,0)
(11,28,0)
(31,59,0)
(60,36,0)
(24,2,0)
(32,12,0)
(57,45,0)
(46,43,0)
(46,19,0)
(6,18,0)
(37,27,0)
(54,1,0)
(10,5,0)
(66,10,0)
(50,62,0)
(9,54,0)
(57,14,0)
(53,27,0)
(5,10,0)
(28,45,0)
(5,45,0)
(61,49,0)
(26,5,0)
(4,58,0)
(58,29,0)
(19,46,0)
(18,62,0)
(46,52,0)
(35,36,0)
(29,58,0)
(0,52,0)
(13,19,0)
(17,27,0)
(49,45,0)
(14,27,0)
(58,45,0)
(65,29,0)
(19,2,0)
(58,14,0)
(62,18,0)
(3,27,0)
(38,2,0)
(43,46,0)
(64,61,0)
(47,14,0)
(34,31,0)
(44,46,0)
(63,62,0)
(40,14,0)
(18,14,0)
(62,49,0)
(56,57,0)
(16,20,0)
(39,54,0)
(68,45,0)
(48,58,0)
(49,8,0)
(36,2,1)
(49,15,1)
(13,50,1)
(38,41,1)
(52,45,1)
(19,33,1)
(45,68,1)
(18,6,1)
(68,67,1)
(25,56,1)
(6,7,1)
(62,49,1)
(50,62,1)
(60,35,1)
(51,36,1)
(58,4,1)
(35,38,1)
(44,19,1)
(43,46,1)
(26,28,1)
(57,45,1)
(26,45,1)
(47,40,1)
(46,19,1)
(46,44,1)
(0,29,1)
(63,18,1)
(61,64,1)
(30,26,1)
(32,22,1)
(10,66,1)
(20,23,1)
(21,20,1)
(14,47,1)
(48,49,1)
(64,57,1)
(62,18,1)
(18,14,1)
(5,45,1)
(29,65,1)
(67,12,1)
(65,58,1)
(16,12,1)
(7,36,1)
(58,45,1)
(33,13,1)
(5,10,1)
(4,48,1)
(19,14,1)
(22,14,1)
(11,52,1)
(24,21,1)
(56,5,1)
(16,5,1)
(28,45,1)
(51,20,1)
(62,63,1)
(23,16,1)
(46,52,1)
(18,2,1)
(57,14,1)
(29,58,1)
(38,2,1)
(28,11,1)
(61,57,1)
(52,0,1)
(15,61,1)
(2,24,1)
(58,14,1)
(41,43,1)
(57,25,1)
(36,60,1)
(49,45,1)
(66,30,1)
(12,32,1)
(19,2,1)
(35,2,1)
(62,36,2)
(48,5,2)
(36,36,2)
(18,14,2)
(2,20,2)
(49,45,2)
(18,36,2)
(19,2,2)
(35,20,2)
(5,5,2)
(33,36,2)
(38,2,2)
(24,20,2)
(46,36,2)
(63,36,2)
(35,36,2)
(61,5,2)
(60,36,2)
(30,5,2)
(10,5,2)
(60,20,2)
(19,14,2)
(13,36,2)
(58,5,2)
(0,5,2)
(41,36,2)
(61,57,2)
(36,2,2)
(57,5,2)
(10,12,2)
(50,62,2)
(46,52,2)
(46,19,2)
(11,5,2)
(26,12,2)
(58,14,2)
(28,5,2)
(6,36,2)
(68,12,2)
(5,10,2)
(43,46,2)
(57,45,2)
(66,5,2)
(18,2,2)
(19,36,2)
(67,12,2)
(45,12,2)
(36,20,2)
(57,14,2)
(21,20,2)
(49,5,2)
(38,36,2)
(7,36,2)
(25,5,2)
(52,45,2)
(30,12,2)
(29,5,2)
(50,36,2)
(58,45,2)
(66,12,2)
(62,18,2)
(28,45,2)
(15,5,2)
(5,12,2)
(26,5,2)
(52,5,2)
(56,5,2)
(4,5,2)
(44,36,2)
(29,58,2)
(5,45,2)
(64,5,2)
(62,49,2)
(43,36,2)
(65,5,2)
-----------------------------------
(0,i)
(1,)
(2,i=0)
(3,if(staticFive==5)
(4,i)
(5,i<(10/2)
(6,i)
(7,data)
(8,)
(9,for(i=0; i<10; i++)
(10,10/2)
(11,i)
(12,staticFive==5)
(13,data)
(14,data = dataUninitArray)
(15,i)
(16,staticFive)
(17,if(staticFive==5)
(18,data[i])
(19,data[i])
(20,staticFive==5)
(21,i)
(22,staticFive)
(23,5)
(24,0)
(25,i)
(26,i)
(27,)
(28,i++)
(29,data[i].intTwo)
(30,10)
(31,)
(32,5)
(33,i)
(34,for(i=0; i<(10/2)
(35,i)
(36,i<10)
(37,data)
(38,i++)
(39,i)
(40,data)
(41,i)
(42,i)
(43,printIntLine(data[i].intTwo)
(44,intTwo)
(45,i=0)
(46,data[i].intTwo)
(47,dataUninitArray)
(48,data)
(49,data[i].intOne = i)
(50,printIntLine(data[i].intOne)
(51,RET)
(52,data[i].intTwo = i)
(53,dataUninitArray)
(54,)
(55,)
(56,data)
(57,data[i])
(58,data[i])
(59,)
(60,10)
(61,data[i].intOne)
(62,data[i].intOne)
(63,intOne)
(64,intOne)
(65,intTwo)
(66,2)
(67,i)
(68,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^