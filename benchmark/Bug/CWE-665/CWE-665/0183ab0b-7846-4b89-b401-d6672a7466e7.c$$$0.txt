-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_09_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_09_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_09_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(3,30,0)
(36,14,0)
(20,29,0)
(6,12,0)
(5,26,0)
(11,40,0)
(27,40,0)
(29,22,0)
(30,2,0)
(2,40,0)
(26,5,0)
(32,40,0)
(10,30,0)
(36,15,0)
(12,5,0)
(6,33,0)
(23,24,0)
(38,29,0)
(31,13,0)
(17,15,0)
(5,2,0)
(39,30,0)
(25,22,0)
(30,39,0)
(5,12,0)
(35,22,0)
(24,2,0)
(4,31,0)
(7,35,0)
(30,22,0)
(12,6,0)
(37,31,0)
(16,24,0)
(21,22,0)
(18,33,0)
(33,6,0)
(15,36,0)
(2,5,0)
(8,40,0)
(39,34,0)
(0,6,0)
(28,2,0)
(7,39,1)
(30,2,1)
(6,33,1)
(35,22,1)
(33,18,1)
(24,23,1)
(30,10,1)
(22,21,1)
(18,0,1)
(24,2,1)
(17,24,1)
(3,29,1)
(1,19,1)
(12,6,1)
(19,9,1)
(36,15,1)
(38,20,1)
(9,24,1)
(0,28,1)
(20,22,1)
(2,5,1)
(29,22,1)
(5,12,1)
(16,2,1)
(30,22,1)
(35,7,1)
(5,26,1)
(29,38,1)
(10,3,1)
(39,30,1)
(1,29,1)
(9,36,1)
(20,35,1)
(15,17,1)
(23,16,1)
(21,25,1)
(25,19,1)
(36,24,2)
(5,26,2)
(29,19,2)
(25,19,2)
(10,29,2)
(24,2,2)
(3,29,2)
(17,24,2)
(30,29,2)
(20,19,2)
(6,33,2)
(5,12,2)
(35,22,2)
(22,19,2)
(12,6,2)
(39,30,2)
(15,24,2)
(39,29,2)
(36,15,2)
(21,19,2)
(38,29,2)
(38,19,2)
(29,22,2)
(2,5,2)
(30,22,2)
(30,2,2)
(20,29,2)
(29,29,2)
(7,29,2)
(35,29,2)
-----------------------------------
(0,10)
(1,RET)
(2,data = (double *)
(3,data)
(4,i)
(5,(double *)
(6,10*sizeof(double)
(7,i)
(8,data)
(9,GLOBAL_CONST_TRUE)
(10,i)
(11,if(GLOBAL_CONST_TRUE)
(12,malloc(10*sizeof(double)
(13,)
(14,)
(15,-1)
(16,data)
(17,1)
(18,double)
(19,GLOBAL_CONST_TRUE)
(20,i)
(21,0)
(22,i=0)
(23,NULL)
(24,data == NULL)
(25,i)
(26,double *)
(27,if (data == NULL)
(28,data)
(29,i<10)
(30,data[i])
(31,)
(32,if(GLOBAL_CONST_TRUE)
(33,sizeof(double)
(34,)
(35,i++)
(36,exit(-1)
(37,for(i=0; i<10; i++)
(38,10)
(39,printDoubleLine(data[i])
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^