-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_pointer_12_bad()
{
    double * data;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Initialize data */
        /* initialize both the pointer and the data pointed to */
        data = (double *)malloc(sizeof(double));
        if (data == NULL) {exit(-1);}
        *data = 5.0;
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        printDoubleLine(*data);
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        /* initialize both the pointer and the data pointed to */
        data = (double *)malloc(sizeof(double));
        if (data == NULL) {exit(-1);}
        *data = 5.0;
        printDoubleLine(*data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
6,7
7,8
7,9
9,10
9,11
12,13
12,14
12,15
13,14
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
51,52
54,55
54,56
54,57
55,56
56,57
58,59
59,60
60,61
60,62
61,62
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
99,100
102,103
103,104
103,105
104,105
106,107
107,108
-----nextToken-----
2,4,8,10,11,15,17,22,25,27,30,33,34,38,40,45,47,52,53,57,62,65,70,73,75,78,81,82,86,88,93,95,100,101,105,108
-----computeFrom-----
20,21
20,22
36,37
36,38
49,50
49,51
68,69
68,70
84,85
84,86
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_pointer_12_bad(){    double * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printDoubleLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;        printDoubleLine(*data);    }}
void
CWE457_Use_of_Uninitialized_Variable__double_pointer_12_bad()
CWE457_Use_of_Uninitialized_Variable__double_pointer_12_bad
{    double * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printDoubleLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;        printDoubleLine(*data);    }}
double * data;
double * data;
double
* data
*
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;    }
data = (double *)malloc(sizeof(double));
data = (double *)malloc(sizeof(double))
data
data
(double *)malloc(sizeof(double))
double *
double
*
*
malloc(sizeof(double))
malloc
malloc
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 5.0;
*data = 5.0
*data
data
data
5.0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printDoubleLine(*data);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;        printDoubleLine(*data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        printDoubleLine(*data);    }
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
{        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (double *)malloc(sizeof(double));        if (data == NULL) {exit(-1);}        *data = 5.0;        printDoubleLine(*data);    }
data = (double *)malloc(sizeof(double));
data = (double *)malloc(sizeof(double))
data
data
(double *)malloc(sizeof(double))
double *
double
*
*
malloc(sizeof(double))
malloc
malloc
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*data = 5.0;
*data = 5.0
*data
data
data
5.0
printDoubleLine(*data);
printDoubleLine(*data)
printDoubleLine
printDoubleLine
*data
data
data
-----joern-----
(18,28,0)
(25,43,0)
(33,5,0)
(51,6,0)
(29,35,0)
(42,24,0)
(2,44,0)
(1,29,0)
(36,21,0)
(12,42,0)
(13,23,0)
(40,20,0)
(30,46,0)
(3,49,0)
(10,53,0)
(30,28,0)
(0,21,0)
(28,26,0)
(44,2,0)
(47,26,0)
(23,49,0)
(16,29,0)
(10,48,0)
(33,31,0)
(24,49,0)
(4,7,0)
(32,35,0)
(7,26,0)
(34,51,0)
(23,48,0)
(2,26,0)
(17,16,0)
(53,20,0)
(2,22,0)
(14,22,0)
(20,48,0)
(6,51,0)
(52,40,0)
(53,23,0)
(40,23,0)
(53,29,0)
(41,14,0)
(26,2,0)
(39,53,0)
(38,7,0)
(24,42,0)
(53,10,0)
(22,2,0)
(16,26,0)
(28,30,0)
(37,31,0)
(6,15,0)
(28,29,0)
(49,23,0)
(45,43,0)
(26,35,0)
(9,43,0)
(8,20,0)
(22,14,0)
(49,24,0)
(31,33,0)
(21,23,0)
(27,48,0)
(49,3,0)
(28,18,1)
(36,23,1)
(14,41,1)
(19,50,1)
(21,23,1)
(0,36,1)
(34,21,1)
(52,21,1)
(7,26,1)
(39,20,1)
(11,30,1)
(11,10,1)
(29,1,1)
(7,38,1)
(41,47,1)
(53,29,1)
(40,52,1)
(52,6,1)
(33,31,1)
(4,26,1)
(10,53,1)
(53,20,1)
(23,49,1)
(49,3,1)
(30,28,1)
(38,4,1)
(28,29,1)
(37,7,1)
(2,44,1)
(8,40,1)
(2,22,1)
(16,17,1)
(21,0,1)
(49,24,1)
(47,50,1)
(31,37,1)
(28,26,1)
(13,19,1)
(16,26,1)
(12,13,1)
(20,8,1)
(18,19,1)
(22,14,1)
(17,33,1)
(1,16,1)
(53,39,1)
(53,23,1)
(17,7,1)
(6,51,1)
(40,23,1)
(42,12,1)
(19,29,1)
(26,2,1)
(24,42,1)
(51,34,1)
(16,26,2)
(28,26,2)
(0,19,2)
(41,50,2)
(23,19,2)
(6,21,2)
(38,50,2)
(53,20,2)
(2,50,2)
(20,19,2)
(7,26,2)
(14,50,2)
(39,19,2)
(33,7,2)
(1,50,2)
(21,23,2)
(40,23,2)
(26,2,2)
(28,29,2)
(37,7,2)
(51,21,2)
(6,51,2)
(21,19,2)
(22,14,2)
(7,50,2)
(31,7,2)
(28,19,2)
(22,50,2)
(40,19,2)
(10,53,2)
(26,50,2)
(18,19,2)
(29,50,2)
(8,19,2)
(24,42,2)
(53,29,2)
(30,28,2)
(53,23,2)
(47,50,2)
(34,21,2)
(10,19,2)
(17,50,2)
(42,19,2)
(4,50,2)
(49,24,2)
(2,44,2)
(23,49,2)
(53,19,2)
(12,19,2)
(49,3,2)
(30,19,2)
(49,19,2)
(2,22,2)
(36,19,2)
(33,31,2)
(52,19,2)
(13,19,2)
(24,19,2)
(16,50,2)
-----------------------------------
(0,NULL)
(1,5.0)
(2,(double *)
(3,double *)
(4,data)
(5,)
(6,exit(-1)
(7,data == NULL)
(8,5.0)
(9,if(globalReturnsTrueOrFalse()
(10,printDoubleLine(*data)
(11,RET)
(12,double)
(13,data)
(14,sizeof(double)
(15,)
(16,*data)
(17,data)
(18,data)
(19,globalReturnsTrueOrFalse()
(20,*data = 5.0)
(21,data == NULL)
(22,malloc(sizeof(double)
(23,data = (double *)
(24,malloc(sizeof(double)
(25,if(globalReturnsTrueOrFalse()
(26,data = (double *)
(27,if (data == NULL)
(28,*data)
(29,*data = 5.0)
(30,printDoubleLine(*data)
(31,-1)
(32,if (data == NULL)
(33,exit(-1)
(34,1)
(35,)
(36,data)
(37,1)
(38,NULL)
(39,data)
(40,*data)
(41,double)
(42,sizeof(double)
(43,)
(44,double *)
(45,data)
(46,)
(47,data)
(48,)
(49,(double *)
(50,globalReturnsTrueOrFalse()
(51,-1)
(52,data)
(53,*data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^