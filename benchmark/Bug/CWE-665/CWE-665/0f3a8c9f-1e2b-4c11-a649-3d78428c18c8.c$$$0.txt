-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(globalFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
184,187
184,188
185,186
187,188
189,190
193,194
193,195
194,195
194,196
195,196
197,198
199,200
200,201
201,202
201,203
202,203
204,205
206,207
206,208
207,208
207,209
208,209
211,212
212,213
212,214
213,214
214,215
214,216
216,217
216,218
219,220
219,221
219,222
220,221
220,222
221,222
223,224
223,225
224,225
226,227
228,229
228,230
228,231
228,232
228,233
229,230
230,231
230,232
231,232
233,234
233,235
234,235
234,236
236,237
238,239
238,240
239,240
241,242
241,243
242,243
244,245
245,246
245,247
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
259,260
261,262
262,263
262,264
262,265
263,264
265,266
267,268
269,270
270,271
270,272
271,272
273,274
275,276
276,277
276,278
277,278
279,280
281,282
282,283
283,284
283,285
284,285
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,190,191,192,196,198,203,205,209,210,215,217,218,222,225,227,232,235,237,240,243,246,247,251,253,258,260,264,266,268,272,274,278,280,285,286
-----computeFrom-----
13,14
13,15
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
194,195
194,196
207,208
207,209
220,221
220,222
230,231
230,232
241,242
241,243
249,250
249,251
-----guardedBy-----
196,205
227,268
222,243
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalFive==5
globalFive
globalFive
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(65,152,0)
(44,22,0)
(73,70,0)
(11,126,0)
(11,105,0)
(132,155,0)
(105,11,0)
(19,6,0)
(1,90,0)
(2,102,0)
(55,54,0)
(36,125,0)
(26,105,0)
(82,36,0)
(141,28,0)
(81,13,0)
(19,152,0)
(122,152,0)
(36,108,0)
(71,126,0)
(131,13,0)
(11,18,0)
(94,171,0)
(124,22,0)
(135,83,0)
(66,85,0)
(111,13,0)
(93,24,0)
(42,119,0)
(57,6,0)
(16,50,0)
(136,163,0)
(111,54,0)
(133,68,0)
(71,90,0)
(155,132,0)
(163,22,0)
(56,18,0)
(156,42,0)
(9,34,0)
(57,152,0)
(164,92,0)
(103,169,0)
(43,37,0)
(9,126,0)
(113,126,0)
(7,22,0)
(48,64,0)
(54,111,0)
(28,120,0)
(145,113,0)
(12,71,0)
(151,76,0)
(120,129,0)
(170,140,0)
(120,85,0)
(99,5,0)
(91,126,0)
(110,69,0)
(36,132,0)
(108,36,0)
(150,105,0)
(135,13,0)
(130,26,0)
(75,40,0)
(114,155,0)
(132,13,0)
(116,47,0)
(104,11,0)
(63,108,0)
(148,11,0)
(69,105,0)
(152,123,0)
(125,36,0)
(123,84,0)
(69,45,0)
(62,22,0)
(53,126,0)
(105,13,0)
(103,132,0)
(168,19,0)
(95,126,0)
(3,169,0)
(61,116,0)
(80,113,0)
(169,103,0)
(9,40,0)
(120,28,0)
(125,123,0)
(137,171,0)
(162,150,0)
(31,163,0)
(72,19,0)
(157,156,0)
(71,42,0)
(150,166,0)
(70,109,0)
(65,6,0)
(47,135,0)
(117,13,0)
(8,6,0)
(45,13,0)
(71,140,0)
(139,47,0)
(40,22,0)
(127,83,0)
(109,13,0)
(123,152,0)
(10,129,0)
(27,11,0)
(37,43,0)
(47,116,0)
(147,155,0)
(14,106,0)
(146,111,0)
(78,132,0)
(113,40,0)
(129,120,0)
(101,99,0)
(33,22,0)
(89,26,0)
(0,37,0)
(85,120,0)
(138,22,0)
(159,149,0)
(83,135,0)
(112,45,0)
(64,152,0)
(140,71,0)
(52,103,0)
(18,11,0)
(32,57,0)
(144,143,0)
(103,76,0)
(21,69,0)
(67,53,0)
(134,41,0)
(20,115,0)
(90,71,0)
(42,156,0)
(118,41,0)
(126,13,0)
(23,129,0)
(98,70,0)
(4,116,0)
(36,76,0)
(158,24,0)
(166,26,0)
(15,95,0)
(123,125,0)
(126,53,0)
(88,22,0)
(74,102,0)
(38,9,0)
(160,118,0)
(166,150,0)
(167,53,0)
(35,118,0)
(149,111,0)
(58,18,0)
(86,22,0)
(161,96,0)
(39,53,0)
(43,17,0)
(142,105,0)
(76,24,0)
(165,150,0)
(77,13,0)
(79,40,0)
(84,123,0)
(97,96,0)
(46,14,0)
(121,155,0)
(119,42,0)
(107,14,0)
(111,149,0)
(26,166,0)
(42,71,0)
(41,13,0)
(152,6,0)
(51,65,0)
(22,49,0)
(100,109,0)
(41,134,0)
(154,76,0)
(25,64,0)
(96,13,0)
(30,134,0)
(29,24,0)
(128,95,0)
(87,22,0)
(151,154,1)
(145,20,1)
(165,162,1)
(25,152,1)
(63,82,1)
(126,53,1)
(128,126,1)
(18,58,1)
(155,147,1)
(145,59,1)
(61,109,1)
(164,166,1)
(113,40,1)
(135,83,1)
(129,10,1)
(85,120,1)
(83,127,1)
(133,85,1)
(19,152,1)
(114,78,1)
(0,64,1)
(36,108,1)
(71,126,1)
(67,167,1)
(123,84,1)
(101,103,1)
(134,30,1)
(85,66,1)
(102,74,1)
(100,70,1)
(123,125,1)
(130,150,1)
(37,0,1)
(23,59,1)
(149,159,1)
(159,95,1)
(9,40,1)
(26,89,1)
(52,171,1)
(4,61,1)
(41,134,1)
(27,104,1)
(64,152,1)
(113,126,1)
(171,137,1)
(15,128,1)
(3,52,1)
(98,73,1)
(141,129,1)
(103,76,1)
(91,96,1)
(53,67,1)
(78,45,1)
(150,165,1)
(80,145,1)
(51,57,1)
(42,119,1)
(23,40,1)
(112,69,1)
(59,132,1)
(132,155,1)
(142,90,1)
(95,126,1)
(19,168,1)
(35,135,1)
(145,133,1)
(140,170,1)
(95,15,1)
(153,65,1)
(58,56,1)
(38,113,1)
(156,157,1)
(108,63,1)
(120,129,1)
(161,97,1)
(166,150,1)
(152,123,1)
(90,71,1)
(127,47,1)
(163,31,1)
(103,132,1)
(36,132,1)
(139,116,1)
(170,42,1)
(110,21,1)
(2,76,1)
(11,18,1)
(69,105,1)
(94,144,1)
(136,102,1)
(65,152,1)
(113,80,1)
(60,9,1)
(168,72,1)
(70,98,1)
(12,41,1)
(43,37,1)
(39,91,1)
(145,16,1)
(169,3,1)
(137,94,1)
(30,118,1)
(60,113,1)
(32,19,1)
(82,122,1)
(146,149,1)
(162,105,1)
(11,126,1)
(116,4,1)
(122,103,1)
(57,152,1)
(144,60,1)
(75,163,1)
(145,164,1)
(90,1,1)
(109,100,1)
(160,35,1)
(74,2,1)
(125,36,1)
(111,54,1)
(150,105,1)
(97,85,1)
(167,39,1)
(57,32,1)
(148,18,1)
(89,130,1)
(65,51,1)
(99,101,1)
(9,38,1)
(48,25,1)
(47,116,1)
(105,11,1)
(9,126,1)
(120,28,1)
(55,146,1)
(72,64,1)
(104,142,1)
(64,48,1)
(54,55,1)
(73,111,1)
(42,156,1)
(147,121,1)
(47,139,1)
(28,141,1)
(1,71,1)
(157,12,1)
(66,120,1)
(118,160,1)
(71,140,1)
(40,79,1)
(166,26,1)
(10,23,1)
(94,60,1)
(153,99,1)
(96,161,1)
(20,95,1)
(121,114,1)
(76,151,1)
(153,171,1)
(72,43,1)
(94,102,1)
(79,75,1)
(111,149,1)
(16,90,1)
(31,136,1)
(71,42,1)
(21,166,1)
(69,110,1)
(11,148,1)
(45,112,1)
(103,169,1)
(36,76,1)
(26,105,1)
(56,27,1)
(96,85,2)
(100,95,2)
(164,166,2)
(163,102,2)
(144,60,2)
(109,95,2)
(4,95,2)
(23,59,2)
(152,123,2)
(130,150,2)
(120,129,2)
(66,102,2)
(59,166,2)
(28,59,2)
(30,95,2)
(134,95,2)
(170,95,2)
(28,102,2)
(65,152,2)
(85,59,2)
(11,90,2)
(116,95,2)
(156,95,2)
(47,95,2)
(132,155,2)
(105,11,2)
(133,85,2)
(150,90,2)
(0,64,2)
(54,95,2)
(161,85,2)
(169,171,2)
(125,103,2)
(90,71,2)
(140,95,2)
(166,26,2)
(83,95,2)
(11,18,2)
(3,171,2)
(53,85,2)
(103,76,2)
(58,90,2)
(129,59,2)
(123,84,2)
(10,102,2)
(159,95,2)
(70,95,2)
(123,125,2)
(99,103,2)
(61,95,2)
(120,28,2)
(122,103,2)
(42,156,2)
(26,150,2)
(152,103,2)
(111,54,2)
(43,64,2)
(65,103,2)
(146,95,2)
(42,95,2)
(162,90,2)
(90,95,2)
(57,103,2)
(36,132,2)
(141,59,2)
(11,126,2)
(85,120,2)
(32,103,2)
(23,102,2)
(123,103,2)
(60,102,2)
(41,95,2)
(69,166,2)
(55,95,2)
(64,152,2)
(135,83,2)
(36,103,2)
(51,103,2)
(98,95,2)
(31,102,2)
(128,85,2)
(120,102,2)
(91,85,2)
(80,102,2)
(75,102,2)
(71,42,2)
(135,95,2)
(167,85,2)
(27,90,2)
(71,95,2)
(108,103,2)
(166,150,2)
(19,152,2)
(155,166,2)
(64,103,2)
(35,95,2)
(121,166,2)
(160,95,2)
(120,59,2)
(79,102,2)
(12,95,2)
(48,103,2)
(103,169,2)
(21,166,2)
(16,90,2)
(82,103,2)
(148,90,2)
(52,171,2)
(10,59,2)
(165,90,2)
(15,85,2)
(26,105,2)
(71,140,2)
(95,126,2)
(89,150,2)
(56,90,2)
(104,90,2)
(47,116,2)
(166,90,2)
(141,102,2)
(126,53,2)
(78,166,2)
(69,105,2)
(36,108,2)
(145,102,2)
(66,59,2)
(73,95,2)
(150,105,2)
(157,95,2)
(111,149,2)
(25,103,2)
(40,102,2)
(67,85,2)
(9,113,2)
(63,103,2)
(9,40,2)
(18,90,2)
(36,76,2)
(142,90,2)
(126,85,2)
(113,102,2)
(95,85,2)
(43,37,2)
(168,103,2)
(57,152,2)
(103,132,2)
(139,95,2)
(20,95,2)
(41,134,2)
(39,85,2)
(72,103,2)
(1,95,2)
(118,95,2)
(114,166,2)
(129,102,2)
(147,166,2)
(112,166,2)
(71,126,2)
(113,126,2)
(103,171,2)
(85,102,2)
(110,166,2)
(97,85,2)
(105,90,2)
(149,95,2)
(101,103,2)
(45,166,2)
(9,126,2)
(111,95,2)
(42,119,2)
(125,36,2)
(19,103,2)
(37,64,2)
(38,113,2)
(136,102,2)
(132,166,2)
(127,95,2)
(113,40,2)
-----------------------------------
(0,1)
(1,SOCKET_ERROR)
(2,globalFive)
(3,HELLO_STRING)
(4,sin_addr)
(5,)
(6,)
(7,recvResult)
(8,if (myString == NULL)
(9,CLOSE_SOCKET(connectSocket)
(10,2)
(11,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(12,connectSocket)
(13,)
(14,)
(15,INVALID_SOCKET)
(16,break;)
(17,)
(18,CHAR_ARRAY_SIZE - 1)
(19,strcpy(myString, HELLO_STRING)
(20,break;)
(21,inputBuffer)
(22,)
(23,2)
(24,)
(25,myString)
(26,recvResult == 0)
(27,inputBuffer)
(28,&wsaData)
(29,if(globalFive==5)
(30,TCP_PORT)
(31,0)
(32,myString)
(33,if (wsaDataInit)
(34,)
(35,service)
(36,data*sizeof(char)
(37,-1)
(38,connectSocket)
(39,AF_INET)
(40,connectSocket = INVALID_SOCKET)
(41,service.sin_port = htons(TCP_PORT)
(42,(struct sockaddr*)
(43,exit(-1)
(44,wsaDataInit)
(45,inputBuffer[recvResult] = \'\\0\')
(46,myString)
(47,service.sin_addr.s_addr)
(48,NULL)
(49,)
(50,)
(51,myString)
(52,data)
(53,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(54,sizeof(service)
(55,service)
(56,CHAR_ARRAY_SIZE)
(57,printLine(myString)
(58,1)
(59,0)
(60,wsaDataInit)
(61,service)
(62,do)
(63,char)
(64,myString == NULL)
(65,free(myString)
(66,NO_ERROR)
(67,IPPROTO_TCP)
(68,)
(69,inputBuffer[recvResult])
(70,service.sin_family)
(71,connect(connectSocket, (struct sockaddr*)
(72,myString)
(73,service)
(74,5)
(75,connectSocket)
(76,data = 0)
(77,if (connectSocket == INVALID_SOCKET)
(78,data)
(79,INVALID_SOCKET)
(80,INVALID_SOCKET)
(81,if (recvResult == SOCKET_ERROR || recvResult == 0)
(82,data)
(83,inet_addr(IP_ADDRESS)
(84,char *)
(85,WSAStartup(MAKEWORD(2,2)
(86,service)
(87,if (connectSocket != INVALID_SOCKET)
(88,wsaData)
(89,0)
(90,connect(connectSocket, (struct sockaddr*)
(91,connectSocket)
(92,)
(93,if(globalFive==5)
(94,globalFive)
(95,connectSocket == INVALID_SOCKET)
(96,wsaDataInit = 1)
(97,wsaDataInit)
(98,sin_family)
(99,printLine("Input is less than the length of the source string")
(100,AF_INET)
(101,"Input is less than the length of the source string")
(102,globalFive==5)
(103,data > strlen(HELLO_STRING)
(104,connectSocket)
(105,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(106,)
(107,if (data > strlen(HELLO_STRING)
(108,sizeof(char)
(109,service.sin_family = AF_INET)
(110,recvResult)
(111,memset(&service, 0, sizeof(service)
(112,\'\\0\')
(113,connectSocket != INVALID_SOCKET)
(114,inputBuffer)
(115,)
(116,service.sin_addr)
(117,if (connect(connectSocket, (struct sockaddr*)
(118,service.sin_port)
(119,struct sockaddr*)
(120,WSAStartup(MAKEWORD(2,2)
(121,NULL)
(122,myString)
(123,(char *)
(124,connectSocket)
(125,malloc(data*sizeof(char)
(126,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(127,IP_ADDRESS)
(128,connectSocket)
(129,MAKEWORD(2,2)
(130,recvResult)
(131,if (WSAStartup(MAKEWORD(2,2)
(132,data = strtoul(inputBuffer, NULL, 0)
(133,break;)
(134,htons(TCP_PORT)
(135,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(136,wsaDataInit)
(137,5)
(138,inputBuffer)
(139,s_addr)
(140,sizeof(service)
(141,wsaData)
(142,recvResult)
(143,)
(144,WSACleanup()
(145,connectSocket)
(146,0)
(147,0)
(148,0)
(149,&service)
(150,recvResult == SOCKET_ERROR)
(151,0)
(152,myString = (char *)
(153,RET)
(154,data)
(155,strtoul(inputBuffer, NULL, 0)
(156,&service)
(157,service)
(158,data)
(159,service)
(160,sin_port)
(161,1)
(162,recvResult)
(163,wsaDataInit = 0)
(164,break;)
(165,SOCKET_ERROR)
(166,recvResult == SOCKET_ERROR || recvResult == 0)
(167,SOCK_STREAM)
(168,HELLO_STRING)
(169,strlen(HELLO_STRING)
(170,service)
(171,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^