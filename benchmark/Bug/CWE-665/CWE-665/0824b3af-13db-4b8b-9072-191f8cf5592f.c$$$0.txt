-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(45,47,0)
(27,48,0)
(5,20,0)
(8,41,0)
(4,50,0)
(43,21,0)
(10,45,0)
(13,22,0)
(20,17,0)
(1,30,0)
(22,13,0)
(31,3,0)
(42,3,0)
(13,31,0)
(23,38,0)
(28,41,0)
(48,26,0)
(45,7,0)
(46,31,0)
(15,14,0)
(9,48,0)
(35,44,0)
(53,9,0)
(1,31,0)
(1,45,0)
(26,11,0)
(1,37,0)
(26,48,0)
(12,24,0)
(39,50,0)
(32,20,0)
(26,37,0)
(9,41,0)
(33,21,0)
(34,1,0)
(38,41,0)
(37,26,0)
(49,30,0)
(52,38,0)
(6,31,0)
(25,22,0)
(11,26,0)
(40,24,0)
(0,8,0)
(38,48,0)
(2,14,0)
(13,45,0)
(37,1,0)
(30,1,0)
(16,35,0)
(29,13,0)
(48,41,0)
(51,3,0)
(36,3,0)
(14,48,0)
(7,45,0)
(8,48,0)
(40,18,0)
(24,40,0)
(52,40,1)
(33,45,1)
(45,7,1)
(1,31,1)
(10,50,1)
(38,23,1)
(13,45,1)
(34,27,1)
(24,12,1)
(19,9,1)
(21,43,1)
(1,45,1)
(35,16,1)
(39,4,1)
(0,38,1)
(13,31,1)
(33,50,1)
(30,49,1)
(38,48,1)
(23,52,1)
(9,53,1)
(31,6,1)
(50,39,1)
(27,13,1)
(25,29,1)
(16,13,1)
(37,1,1)
(14,48,1)
(40,24,1)
(43,33,1)
(26,11,1)
(8,0,1)
(6,46,1)
(52,14,1)
(15,2,1)
(2,48,1)
(4,31,1)
(14,15,1)
(1,30,1)
(26,37,1)
(53,8,1)
(8,48,1)
(29,21,1)
(9,48,1)
(49,34,1)
(48,26,1)
(13,22,1)
(7,10,1)
(22,25,1)
(12,14,1)
(19,21,1)
(19,35,1)
(23,13,2)
(29,21,2)
(1,13,2)
(52,13,2)
(9,13,2)
(0,13,2)
(48,13,2)
(45,50,2)
(1,45,2)
(26,11,2)
(2,13,2)
(14,48,2)
(13,45,2)
(22,21,2)
(40,24,2)
(38,13,2)
(34,13,2)
(26,13,2)
(37,13,2)
(16,13,2)
(14,13,2)
(49,13,2)
(8,13,2)
(53,13,2)
(1,31,2)
(26,37,2)
(15,13,2)
(40,14,2)
(13,21,2)
(7,50,2)
(30,13,2)
(1,30,2)
(48,26,2)
(35,13,2)
(38,48,2)
(27,13,2)
(9,48,2)
(13,31,2)
(8,48,2)
(13,22,2)
(10,50,2)
(12,14,2)
(25,21,2)
(24,14,2)
(45,7,2)
(37,1,2)
-----------------------------------
(0,myString)
(1,data*sizeof(char)
(2,myString)
(3,)
(4,GLOBAL_CONST_FIVE)
(5,if (data > strlen(HELLO_STRING)
(6,0)
(7,rand()
(8,printLine(myString)
(9,free(myString)
(10,data)
(11,char *)
(12,1)
(13,data > strlen(HELLO_STRING)
(14,myString == NULL)
(15,NULL)
(16,"Input is less than the length of the source string")
(17,)
(18,)
(19,RET)
(20,)
(21,GLOBAL_CONST_FIVE==5)
(22,strlen(HELLO_STRING)
(23,HELLO_STRING)
(24,-1)
(25,HELLO_STRING)
(26,(char *)
(27,myString)
(28,if (myString == NULL)
(29,data)
(30,sizeof(char)
(31,data = 0)
(32,myString)
(33,GLOBAL_CONST_FIVE)
(34,data)
(35,printLine("Input is less than the length of the source string")
(36,if(GLOBAL_CONST_FIVE==5)
(37,malloc(data*sizeof(char)
(38,strcpy(myString, HELLO_STRING)
(39,5)
(40,exit(-1)
(41,)
(42,data)
(43,5)
(44,)
(45,data = rand()
(46,data)
(47,)
(48,myString = (char *)
(49,char)
(50,GLOBAL_CONST_FIVE==5)
(51,if(GLOBAL_CONST_FIVE==5)
(52,myString)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^