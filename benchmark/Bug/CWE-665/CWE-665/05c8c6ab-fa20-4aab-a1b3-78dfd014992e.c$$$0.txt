-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_13_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
38,40
39,40
42,43
43,44
43,45
44,45
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
59,60
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,34,36,40,41,46,48,53,54,57,58,61,66,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
38,39
38,40
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_13_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_13_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_13_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(29,17,0)
(36,2,0)
(2,10,0)
(25,11,0)
(16,8,0)
(21,12,0)
(32,19,0)
(3,30,0)
(35,6,0)
(17,30,0)
(15,0,0)
(8,4,0)
(18,0,0)
(0,17,0)
(1,2,0)
(9,19,0)
(27,17,0)
(28,30,0)
(7,6,0)
(27,36,0)
(34,27,0)
(36,27,0)
(2,36,0)
(22,12,0)
(10,2,0)
(14,10,0)
(17,27,0)
(24,11,0)
(27,34,0)
(13,11,0)
(31,30,0)
(6,11,0)
(5,0,0)
(0,11,0)
(18,20,0)
(23,13,0)
(0,18,0)
(26,8,0)
(6,11,1)
(33,6,1)
(6,7,1)
(27,36,1)
(12,22,1)
(23,18,1)
(9,12,1)
(0,17,1)
(2,10,1)
(25,24,1)
(33,19,1)
(22,21,1)
(15,5,1)
(27,34,1)
(35,13,1)
(19,32,1)
(0,15,1)
(7,35,1)
(17,27,1)
(35,11,1)
(36,2,1)
(10,14,1)
(24,19,1)
(18,0,1)
(5,6,1)
(11,25,1)
(21,17,1)
(0,11,1)
(13,11,1)
(14,1,1)
(1,29,1)
(32,9,1)
(13,23,1)
(11,19,2)
(15,6,2)
(6,11,2)
(35,6,2)
(7,6,2)
(25,19,2)
(27,34,2)
(2,10,2)
(18,6,2)
(0,6,2)
(36,2,2)
(24,19,2)
(35,19,2)
(0,11,2)
(0,17,2)
(27,36,2)
(7,19,2)
(23,6,2)
(6,6,2)
(6,19,2)
(18,0,2)
(13,6,2)
(13,11,2)
(17,27,2)
(5,6,2)
-----------------------------------
(0,data[i])
(1,10)
(2,10*sizeof(int)
(3,if(GLOBAL_CONST_FIVE==5)
(4,)
(5,data)
(6,i<10)
(7,10)
(8,)
(9,GLOBAL_CONST_FIVE)
(10,sizeof(int)
(11,i=0)
(12,GLOBAL_CONST_FIVE==5)
(13,i++)
(14,int)
(15,i)
(16,i)
(17,data = (int *)
(18,printIntLine(data[i])
(19,GLOBAL_CONST_FIVE==5)
(20,)
(21,GLOBAL_CONST_FIVE)
(22,5)
(23,i)
(24,i)
(25,0)
(26,for(i=0; i<10; i++)
(27,(int *)
(28,if(GLOBAL_CONST_FIVE==5)
(29,data)
(30,)
(31,data)
(32,5)
(33,RET)
(34,int *)
(35,i)
(36,ALLOCA(10*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^