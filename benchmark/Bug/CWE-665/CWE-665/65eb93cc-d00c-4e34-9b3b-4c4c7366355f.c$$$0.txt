-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_03_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
54,55
54,56
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
67,68
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
78,79
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
89,90
90,91
90,92
92,93
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
107,108
107,109
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
116,117
119,120
120,121
120,122
121,122
123,124
123,125
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,36,41,43,48,49,52,55,56,59,66,68,69,71,77,79,80,82,85,86,91,93,98,99,102,103,106,111,115,117,118,122,126,128,129
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
46,47
46,48
50,51
50,52
54,55
54,56
62,63
62,64
73,74
73,75
84,85
84,86
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_03_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_03_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(61,37,0)
(51,21,0)
(54,34,0)
(35,51,0)
(18,1,0)
(1,73,0)
(44,60,0)
(21,70,0)
(72,71,0)
(69,17,0)
(69,10,0)
(4,51,0)
(17,73,0)
(25,46,0)
(23,21,0)
(12,73,0)
(0,17,0)
(34,33,0)
(16,14,0)
(59,16,0)
(67,4,0)
(17,33,0)
(47,52,0)
(12,60,0)
(48,54,0)
(36,14,0)
(22,11,0)
(13,69,0)
(7,49,0)
(60,12,0)
(27,63,0)
(10,8,0)
(37,61,0)
(46,4,0)
(35,54,0)
(64,63,0)
(46,17,0)
(62,12,0)
(28,47,0)
(63,57,0)
(4,73,0)
(32,8,0)
(21,51,0)
(19,42,0)
(43,14,0)
(2,34,0)
(40,49,0)
(51,49,0)
(30,4,0)
(39,61,0)
(5,69,0)
(3,35,0)
(69,5,0)
(55,73,0)
(24,26,0)
(10,69,0)
(66,26,0)
(60,34,0)
(34,73,0)
(23,52,0)
(38,35,0)
(45,5,0)
(54,35,0)
(52,47,0)
(68,12,0)
(32,54,0)
(65,16,0)
(41,42,0)
(9,51,0)
(50,61,0)
(70,21,0)
(35,14,0)
(12,51,0)
(21,23,0)
(54,32,0)
(37,73,0)
(26,53,0)
(29,11,0)
(6,52,0)
(5,51,0)
(15,5,0)
(56,37,0)
(5,14,0)
(20,49,0)
(52,23,0)
(31,73,0)
(71,14,0)
(4,46,0)
(48,35,1)
(71,14,1)
(43,42,1)
(34,2,1)
(23,52,1)
(38,10,1)
(42,41,1)
(67,30,1)
(31,11,1)
(69,17,1)
(47,28,1)
(15,16,1)
(32,54,1)
(37,61,1)
(35,3,1)
(1,18,1)
(12,73,1)
(17,73,1)
(0,46,1)
(5,51,1)
(10,69,1)
(4,67,1)
(4,51,1)
(4,73,1)
(5,14,1)
(52,47,1)
(16,14,1)
(29,22,1)
(54,35,1)
(25,4,1)
(56,73,1)
(56,1,1)
(59,71,1)
(2,60,1)
(59,14,1)
(37,73,1)
(3,38,1)
(45,15,1)
(65,59,1)
(19,11,1)
(50,56,1)
(55,31,1)
(41,19,1)
(58,42,1)
(12,68,1)
(14,36,1)
(6,9,1)
(58,16,1)
(12,51,1)
(71,72,1)
(34,73,1)
(30,37,1)
(44,12,1)
(18,34,1)
(51,21,1)
(21,23,1)
(28,6,1)
(21,70,1)
(54,48,1)
(60,44,1)
(68,62,1)
(35,14,1)
(46,25,1)
(62,17,1)
(69,5,1)
(36,43,1)
(46,4,1)
(22,51,1)
(61,39,1)
(19,37,1)
(16,65,1)
(35,51,1)
(17,0,1)
(60,12,1)
(5,45,1)
(39,50,1)
(13,5,1)
(69,13,1)
(11,29,1)
(1,73,1)
(72,32,1)
(73,55,1)
(54,34,1)
(56,37,2)
(37,61,2)
(55,11,2)
(18,37,2)
(45,16,2)
(43,42,2)
(1,37,2)
(69,5,2)
(32,16,2)
(12,51,2)
(17,73,2)
(4,37,2)
(0,37,2)
(17,37,2)
(5,16,2)
(48,16,2)
(4,73,2)
(32,54,2)
(52,47,2)
(61,11,2)
(25,37,2)
(10,16,2)
(56,11,2)
(3,16,2)
(2,37,2)
(50,37,2)
(69,16,2)
(69,17,2)
(54,16,2)
(71,14,2)
(46,37,2)
(35,16,2)
(35,14,2)
(54,34,2)
(65,42,2)
(59,42,2)
(54,35,2)
(46,4,2)
(16,14,2)
(13,16,2)
(12,37,2)
(10,69,2)
(35,51,2)
(21,23,2)
(62,37,2)
(4,51,2)
(30,37,2)
(59,16,2)
(14,42,2)
(65,16,2)
(60,12,2)
(21,70,2)
(37,73,2)
(37,11,2)
(12,73,2)
(31,11,2)
(15,16,2)
(16,42,2)
(5,14,2)
(34,37,2)
(72,16,2)
(73,11,2)
(36,42,2)
(60,37,2)
(44,37,2)
(51,21,2)
(39,11,2)
(1,73,2)
(67,37,2)
(68,37,2)
(16,16,2)
(71,16,2)
(61,37,2)
(5,51,2)
(23,52,2)
(39,37,2)
(50,11,2)
(38,16,2)
(37,37,2)
(34,73,2)
-----------------------------------
(0,i)
(1,i++)
(2,i)
(3,i)
(4,data[i])
(5,data[i])
(6,10)
(7,if(5==5)
(8,)
(9,data)
(10,printIntLine(data[i].intOne)
(11,5==5)
(12,data[i])
(13,intOne)
(14,i=0)
(15,data)
(16,i<10)
(17,data[i].intOne = i)
(18,i)
(19,5)
(20,if(5==5)
(21,(twoIntsStruct *)
(22,5)
(23,ALLOCA(10*sizeof(twoIntsStruct)
(24,for(i=0; i<10; i++)
(25,intOne)
(26,)
(27,i)
(28,twoIntsStruct)
(29,5)
(30,data)
(31,i)
(32,printIntLine(data[i].intTwo)
(33,)
(34,data[i].intTwo = i)
(35,data[i])
(36,0)
(37,i<(10/2)
(38,data)
(39,2)
(40,data)
(41,5)
(42,5==5)
(43,i)
(44,intTwo)
(45,i)
(46,data[i].intOne)
(47,sizeof(twoIntsStruct)
(48,intTwo)
(49,)
(50,10)
(51,data = (twoIntsStruct *)
(52,10*sizeof(twoIntsStruct)
(53,)
(54,data[i].intTwo)
(55,0)
(56,i)
(57,)
(58,RET)
(59,i)
(60,data[i].intTwo)
(61,10/2)
(62,data)
(63,)
(64,for(i=0; i<(10/2)
(65,10)
(66,i)
(67,i)
(68,i)
(69,data[i].intOne)
(70,twoIntsStruct *)
(71,i++)
(72,i)
(73,i=0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^