-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_15_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
35,37
35,38
35,39
35,40
35,41
36,37
41,42
42,43
42,44
43,44
47,48
47,49
49,50
49,51
49,52
49,53
49,54
49,55
50,51
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
88,90
89,90
91,92
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,37,38,39,40,44,45,46,48,51,55,57,62,63,66,67,70,75,79,81,82,86,90,92,93,94,95,99,100,101
-----computeFrom-----
14,15
14,16
26,27
26,28
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_15_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_15_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(29,40,0)
(49,7,0)
(47,27,0)
(1,53,0)
(39,22,0)
(10,52,0)
(35,45,0)
(23,20,0)
(46,25,0)
(48,22,0)
(12,11,0)
(14,15,0)
(36,34,0)
(50,46,0)
(48,21,0)
(33,35,0)
(3,40,0)
(34,20,0)
(42,7,0)
(41,28,0)
(52,1,0)
(19,25,0)
(21,48,0)
(38,21,0)
(22,26,0)
(2,26,0)
(30,9,0)
(17,20,0)
(44,53,0)
(16,11,0)
(18,52,0)
(52,35,0)
(22,48,0)
(9,11,0)
(21,38,0)
(32,11,0)
(51,11,0)
(25,46,0)
(21,1,0)
(25,1,0)
(24,53,0)
(52,20,0)
(6,1,0)
(45,35,0)
(40,11,0)
(26,22,0)
(37,7,0)
(45,28,0)
(43,34,0)
(0,25,0)
(15,20,0)
(27,7,0)
(46,41,0)
(35,52,0)
(8,53,0)
(41,46,0)
(25,20,0)
(31,7,0)
(1,21,0)
(46,25,1)
(5,1,1)
(36,15,1)
(19,34,1)
(52,20,1)
(43,36,1)
(42,27,1)
(45,35,1)
(17,4,1)
(41,46,1)
(27,47,1)
(16,9,1)
(18,10,1)
(39,6,1)
(37,5,1)
(25,20,1)
(26,2,1)
(1,21,1)
(4,37,1)
(25,1,1)
(33,52,1)
(0,19,1)
(9,30,1)
(15,14,1)
(52,1,1)
(21,48,1)
(15,20,1)
(36,20,1)
(32,34,1)
(46,50,1)
(4,42,1)
(35,33,1)
(21,38,1)
(50,25,1)
(30,4,1)
(13,16,1)
(14,45,1)
(23,17,1)
(34,43,1)
(35,52,1)
(52,18,1)
(2,39,1)
(10,41,1)
(25,0,1)
(48,22,1)
(20,23,1)
(47,5,1)
(34,20,1)
(22,26,1)
(13,32,1)
(25,1,2)
(48,22,2)
(45,35,2)
(21,48,2)
(35,34,2)
(36,4,2)
(10,34,2)
(34,4,2)
(41,46,2)
(37,5,2)
(52,20,2)
(25,34,2)
(42,5,2)
(32,4,2)
(36,34,2)
(41,34,2)
(20,4,2)
(1,21,2)
(0,34,2)
(18,34,2)
(27,5,2)
(47,5,2)
(43,34,2)
(9,4,2)
(50,34,2)
(45,34,2)
(21,38,2)
(46,34,2)
(15,20,2)
(15,34,2)
(52,34,2)
(19,34,2)
(25,20,2)
(33,34,2)
(22,26,2)
(23,4,2)
(52,1,2)
(30,4,2)
(46,25,2)
(16,4,2)
(14,34,2)
(34,34,2)
(43,4,2)
(35,52,2)
(34,20,2)
(17,4,2)
-----------------------------------
(0,i)
(1,data = (twoIntsStruct *)
(2,twoIntsStruct)
(3,i)
(4,7)
(5,6)
(6,data)
(7,)
(8,switch(6)
(9,printLine("Benign, fixed string")
(10,data)
(11,)
(12,case 7:)
(13,RET)
(14,i)
(15,i++)
(16,break;)
(17,i)
(18,i)
(19,data)
(20,i=0)
(21,(twoIntsStruct *)
(22,10*sizeof(twoIntsStruct)
(23,0)
(24,switch(7)
(25,data[i])
(26,sizeof(twoIntsStruct)
(27,printLine("Benign, fixed string")
(28,)
(29,for(i=0; i<10; i++)
(30,"Benign, fixed string")
(31,default:)
(32,break;)
(33,intTwo)
(34,i<10)
(35,data[i].intTwo)
(36,i)
(37,break;)
(38,twoIntsStruct *)
(39,10)
(40,)
(41,printIntLine(data[i].intOne)
(42,break;)
(43,10)
(44,data)
(45,printIntLine(data[i].intTwo)
(46,data[i].intOne)
(47,"Benign, fixed string")
(48,ALLOCA(10*sizeof(twoIntsStruct)
(49,case 6:)
(50,intOne)
(51,default:)
(52,data[i])
(53,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^