-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
49,50
49,51
50,51
51,52
53,54
54,55
54,56
55,56
56,57
56,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,52,57,59,64,65,68,69,72,77,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(38,4,0)
(14,2,0)
(1,10,0)
(18,5,0)
(35,5,0)
(28,4,0)
(12,26,0)
(30,34,0)
(15,3,0)
(37,12,0)
(25,29,0)
(6,27,0)
(12,29,0)
(32,18,0)
(39,2,0)
(38,21,0)
(29,2,0)
(26,12,0)
(18,32,0)
(8,2,0)
(5,18,0)
(11,18,0)
(16,27,0)
(32,15,0)
(7,2,0)
(15,32,0)
(13,34,0)
(4,38,0)
(15,29,0)
(24,27,0)
(22,24,0)
(20,23,0)
(33,1,0)
(17,1,0)
(3,15,0)
(12,27,0)
(26,36,0)
(23,29,0)
(9,23,0)
(29,15,0)
(0,12,0)
(34,27,0)
(13,24,1)
(29,15,1)
(40,38,1)
(12,29,1)
(34,27,1)
(26,12,1)
(19,34,1)
(9,20,1)
(6,16,1)
(38,4,1)
(35,11,1)
(11,25,1)
(34,30,1)
(28,23,1)
(5,35,1)
(40,23,1)
(12,37,1)
(18,5,1)
(24,27,1)
(12,27,1)
(37,0,1)
(4,28,1)
(24,22,1)
(32,18,1)
(20,29,1)
(30,13,1)
(13,27,1)
(19,31,1)
(27,6,1)
(15,32,1)
(22,26,1)
(16,31,1)
(0,34,1)
(31,40,1)
(15,3,1)
(23,9,1)
(23,29,1)
(15,32,2)
(34,27,2)
(28,23,2)
(34,34,2)
(22,34,2)
(32,18,2)
(23,29,2)
(18,5,2)
(12,27,2)
(26,12,2)
(13,31,2)
(37,34,2)
(4,23,2)
(15,3,2)
(38,23,2)
(12,34,2)
(6,31,2)
(38,4,2)
(12,29,2)
(27,31,2)
(24,34,2)
(34,31,2)
(0,34,2)
(29,15,2)
(30,34,2)
(16,31,2)
(24,27,2)
(26,34,2)
(30,31,2)
(13,34,2)
-----------------------------------
(0,data)
(1,)
(2,)
(3,int *)
(4,-1)
(5,sizeof(int)
(6,0)
(7,if(globalReturnsTrue()
(8,if(globalReturnsTrue()
(9,NULL)
(10,)
(11,10)
(12,data[i])
(13,i)
(14,data)
(15,(int *)
(16,i)
(17,i)
(18,10*sizeof(int)
(19,RET)
(20,data)
(21,)
(22,i)
(23,data == NULL)
(24,i++)
(25,data)
(26,printIntLine(data[i])
(27,i=0)
(28,1)
(29,data = (int *)
(30,10)
(31,globalReturnsTrue()
(32,malloc(10*sizeof(int)
(33,for(i=0; i<10; i++)
(34,i<10)
(35,int)
(36,)
(37,i)
(38,exit(-1)
(39,if (data == NULL)
(40,globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^