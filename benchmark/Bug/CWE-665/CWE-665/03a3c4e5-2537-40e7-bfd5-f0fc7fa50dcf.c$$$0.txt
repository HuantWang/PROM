-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_16_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    while(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
48,49
48,50
50,51
50,52
51,52
51,53
52,53
53,54
53,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
67,68
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,46,47,49,54,56,61,62,65,66,69,74,77,79,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
59,60
59,61
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_16_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_16_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
-----joern-----
(23,32,0)
(21,29,0)
(20,7,0)
(35,27,0)
(6,41,0)
(11,8,0)
(37,35,0)
(19,43,0)
(31,30,0)
(14,1,0)
(2,10,0)
(6,10,0)
(0,43,0)
(7,31,0)
(23,15,0)
(5,35,0)
(19,31,0)
(13,1,0)
(34,40,0)
(28,1,0)
(15,23,0)
(10,6,0)
(8,29,0)
(25,27,0)
(10,27,0)
(24,17,0)
(9,8,0)
(10,7,0)
(39,25,0)
(7,1,0)
(40,43,0)
(18,7,0)
(42,18,0)
(30,31,0)
(26,27,0)
(38,27,0)
(31,7,0)
(43,40,0)
(31,19,0)
(36,15,0)
(33,10,0)
(43,19,0)
(12,1,0)
(4,18,0)
(39,6,1)
(21,35,1)
(6,10,1)
(15,36,1)
(23,15,1)
(33,2,1)
(25,27,1)
(27,26,1)
(3,18,1)
(31,30,1)
(16,24,1)
(37,27,1)
(43,40,1)
(16,3,1)
(22,16,1)
(19,43,1)
(35,5,1)
(22,21,1)
(3,23,1)
(36,18,1)
(34,0,1)
(4,7,1)
(26,38,1)
(7,31,1)
(0,20,1)
(18,7,1)
(42,4,1)
(35,27,1)
(18,42,1)
(24,3,1)
(37,25,1)
(38,16,1)
(5,37,1)
(25,39,1)
(40,34,1)
(31,19,1)
(10,7,1)
(10,27,1)
(2,35,1)
(10,33,1)
(6,35,2)
(25,27,2)
(36,18,2)
(39,35,2)
(31,19,2)
(7,31,2)
(43,40,2)
(18,7,2)
(35,35,2)
(37,35,2)
(26,16,2)
(23,18,2)
(35,16,2)
(19,43,2)
(5,35,2)
(2,35,2)
(23,15,2)
(6,10,2)
(10,7,2)
(35,27,2)
(27,16,2)
(37,16,2)
(33,35,2)
(24,3,2)
(10,27,2)
(25,35,2)
(5,16,2)
(15,18,2)
(31,30,2)
(38,16,2)
(21,16,2)
(10,35,2)
-----------------------------------
(0,10)
(1,)
(2,data)
(3,1)
(4,data)
(5,10)
(6,printDoubleLine(data[i])
(7,data = (double *)
(8,)
(9,for(i=0; i<10; i++)
(10,data[i])
(11,i)
(12,if (data == NULL)
(13,data)
(14,while(1)
(15,-1)
(16,1)
(17,)
(18,data == NULL)
(19,malloc(10*sizeof(double)
(20,data)
(21,break;)
(22,RET)
(23,exit(-1)
(24,break;)
(25,i++)
(26,0)
(27,i=0)
(28,while(1)
(29,)
(30,double *)
(31,(double *)
(32,)
(33,i)
(34,double)
(35,i<10)
(36,1)
(37,i)
(38,i)
(39,i)
(40,sizeof(double)
(41,)
(42,NULL)
(43,10*sizeof(double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^