-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_03_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
73,74
74,75
74,76
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
92,93
93,94
93,95
94,95
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,33,38,40,45,46,49,52,53,56,62,64,66,69,70,75,77,82,83,86,87,90,95,98,100
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
68,69
68,70
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_03_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_03_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(0,35,0)
(40,33,0)
(35,0,0)
(19,42,0)
(14,13,0)
(16,52,0)
(41,30,0)
(23,47,0)
(0,11,0)
(10,52,0)
(28,18,0)
(27,39,0)
(36,22,0)
(49,28,0)
(31,35,0)
(47,33,0)
(26,55,0)
(0,17,0)
(2,41,0)
(21,36,0)
(27,54,0)
(51,15,0)
(22,4,0)
(36,27,0)
(15,51,0)
(48,27,0)
(22,36,0)
(24,31,0)
(5,29,0)
(15,54,0)
(8,29,0)
(53,29,0)
(36,35,0)
(32,38,0)
(31,27,0)
(20,41,0)
(44,54,0)
(43,36,0)
(42,54,0)
(38,7,0)
(50,15,0)
(1,51,0)
(34,31,0)
(31,54,0)
(17,0,0)
(25,28,0)
(36,7,0)
(45,54,0)
(33,17,0)
(6,7,0)
(17,33,0)
(35,29,0)
(52,7,0)
(46,55,0)
(11,0,0)
(3,13,0)
(56,35,0)
(33,47,0)
(37,51,0)
(12,7,0)
(32,22,1)
(10,16,1)
(35,0,1)
(31,54,1)
(15,54,1)
(16,7,1)
(31,24,1)
(50,42,1)
(46,35,1)
(9,13,1)
(36,27,1)
(52,10,1)
(42,54,1)
(38,7,1)
(37,50,1)
(43,52,1)
(0,17,1)
(48,31,1)
(1,37,1)
(3,14,1)
(55,26,1)
(23,40,1)
(6,12,1)
(31,35,1)
(13,3,1)
(27,48,1)
(50,54,1)
(27,54,1)
(16,38,1)
(17,33,1)
(40,56,1)
(24,34,1)
(51,1,1)
(26,46,1)
(52,7,1)
(22,36,1)
(36,21,1)
(42,19,1)
(12,13,1)
(14,55,1)
(33,47,1)
(9,52,1)
(21,43,1)
(38,32,1)
(44,45,1)
(36,35,1)
(7,6,1)
(34,15,1)
(0,11,1)
(54,44,1)
(15,51,1)
(19,27,1)
(14,15,1)
(45,55,1)
(47,23,1)
(36,7,1)
(37,55,2)
(37,15,2)
(33,47,2)
(15,54,2)
(54,55,2)
(51,15,2)
(21,52,2)
(12,13,2)
(42,54,2)
(34,15,2)
(27,54,2)
(1,55,2)
(52,52,2)
(31,15,2)
(17,33,2)
(10,13,2)
(50,15,2)
(43,52,2)
(52,13,2)
(1,15,2)
(10,52,2)
(22,36,2)
(52,7,2)
(15,51,2)
(0,11,2)
(6,13,2)
(45,55,2)
(0,17,2)
(42,15,2)
(35,0,2)
(50,55,2)
(19,15,2)
(31,54,2)
(24,15,2)
(7,13,2)
(27,15,2)
(51,55,2)
(44,55,2)
(38,52,2)
(22,52,2)
(36,35,2)
(31,35,2)
(36,7,2)
(36,27,2)
(36,52,2)
(32,52,2)
(15,55,2)
(38,7,2)
(16,52,2)
(16,13,2)
(48,15,2)
(15,15,2)
-----------------------------------
(0,(int *)
(1,2)
(2,i)
(3,5)
(4,)
(5,if(5==5)
(6,0)
(7,i=0)
(8,if(5==5)
(9,RET)
(10,10)
(11,int *)
(12,i)
(13,5==5)
(14,5)
(15,i<(10/2)
(16,i)
(17,ALLOCA(10*sizeof(int)
(18,)
(19,i)
(20,for(i=0; i<10; i++)
(21,i)
(22,printIntLine(data[i])
(23,int)
(24,i)
(25,for(i=0; i<(10/2)
(26,5)
(27,data[i] = i)
(28,)
(29,)
(30,)
(31,data[i])
(32,i)
(33,10*sizeof(int)
(34,data)
(35,data = (int *)
(36,data[i])
(37,10)
(38,i++)
(39,)
(40,10)
(41,)
(42,i++)
(43,data)
(44,0)
(45,i)
(46,5)
(47,sizeof(int)
(48,i)
(49,i)
(50,i)
(51,10/2)
(52,i<10)
(53,data)
(54,i=0)
(55,5==5)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^