-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_16_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    while(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
32,33
32,34
35,36
35,37
37,38
37,39
38,39
38,40
39,40
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,31,33,34,36,41,43,48,49,52,53,56,61,64,66,67
-----computeFrom-----
13,14
13,15
24,25
24,26
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_16_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_16_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
-----joern-----
(35,6,0)
(19,16,0)
(1,5,0)
(2,11,0)
(27,14,0)
(24,9,0)
(13,14,0)
(33,6,0)
(17,28,0)
(9,34,0)
(25,9,0)
(0,18,0)
(21,32,0)
(16,19,0)
(11,2,0)
(6,14,0)
(19,11,0)
(30,23,0)
(20,19,0)
(10,32,0)
(3,5,0)
(4,5,0)
(6,17,0)
(11,19,0)
(6,16,0)
(16,5,0)
(18,14,0)
(29,34,0)
(32,14,0)
(19,20,0)
(8,2,0)
(17,6,0)
(12,22,0)
(22,2,0)
(2,22,0)
(7,16,0)
(22,12,1)
(13,15,1)
(15,30,1)
(27,13,1)
(29,32,1)
(17,6,1)
(30,26,1)
(31,15,1)
(12,8,1)
(2,22,1)
(31,29,1)
(6,16,1)
(21,10,1)
(35,33,1)
(0,17,1)
(32,21,1)
(18,14,1)
(6,35,1)
(19,20,1)
(26,16,1)
(6,14,1)
(16,19,1)
(11,2,1)
(14,27,1)
(19,11,1)
(8,7,1)
(33,32,1)
(18,0,1)
(32,14,1)
(10,18,1)
(15,26,1)
(10,14,1)
(2,22,2)
(30,26,2)
(13,15,2)
(6,14,2)
(33,32,2)
(14,15,2)
(10,15,2)
(17,6,2)
(6,32,2)
(35,32,2)
(10,32,2)
(6,16,2)
(19,11,2)
(17,32,2)
(32,14,2)
(18,32,2)
(16,19,2)
(32,15,2)
(21,15,2)
(21,32,2)
(19,20,2)
(27,15,2)
(29,15,2)
(0,32,2)
(11,2,2)
(32,32,2)
(18,14,2)
-----------------------------------
(0,i)
(1,data)
(2,10*sizeof(double)
(3,while(1)
(4,while(1)
(5,)
(6,data[i])
(7,data)
(8,10)
(9,)
(10,i)
(11,ALLOCA(10*sizeof(double)
(12,double)
(13,i)
(14,i=0)
(15,1)
(16,data = (double *)
(17,printDoubleLine(data[i])
(18,i++)
(19,(double *)
(20,double *)
(21,10)
(22,sizeof(double)
(23,)
(24,for(i=0; i<10; i++)
(25,i)
(26,1)
(27,0)
(28,)
(29,break;)
(30,break;)
(31,RET)
(32,i<10)
(33,data)
(34,)
(35,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^