-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(5==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,28,31,34,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
18,19
18,20
33,34
33,35
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(39,15,0)
(23,35,0)
(22,8,0)
(12,40,0)
(3,19,0)
(27,19,0)
(9,22,0)
(48,29,0)
(26,29,0)
(31,22,0)
(2,15,0)
(18,40,0)
(38,42,0)
(45,42,0)
(51,15,0)
(53,48,0)
(16,33,0)
(33,40,0)
(14,48,0)
(29,15,0)
(42,45,0)
(11,33,0)
(4,29,0)
(18,33,0)
(54,29,0)
(36,45,0)
(45,29,0)
(50,46,0)
(33,35,0)
(35,23,0)
(44,28,0)
(47,16,0)
(52,14,0)
(54,22,0)
(6,43,0)
(37,48,0)
(49,43,0)
(17,5,0)
(21,18,0)
(28,40,0)
(22,54,0)
(55,46,0)
(28,33,0)
(37,35,0)
(1,5,0)
(27,7,0)
(19,27,0)
(13,24,0)
(34,18,0)
(48,37,0)
(20,54,0)
(48,14,0)
(30,16,0)
(35,33,0)
(0,40,0)
(25,12,0)
(12,33,0)
(35,37,0)
(24,41,0)
(46,10,0)
(27,19,1)
(34,27,1)
(18,33,1)
(21,34,1)
(29,26,1)
(16,47,1)
(47,30,1)
(43,49,1)
(9,31,1)
(24,13,1)
(48,29,1)
(45,29,1)
(44,18,1)
(1,29,1)
(54,29,1)
(34,16,1)
(49,6,1)
(42,38,1)
(45,42,1)
(6,5,1)
(20,9,1)
(36,43,1)
(37,48,1)
(30,33,1)
(5,17,1)
(28,44,1)
(35,23,1)
(12,33,1)
(54,20,1)
(14,52,1)
(33,35,1)
(6,22,1)
(48,14,1)
(13,45,1)
(31,5,1)
(11,45,1)
(19,3,1)
(32,43,1)
(26,4,1)
(32,12,1)
(35,37,1)
(17,1,1)
(25,28,1)
(32,24,1)
(38,36,1)
(52,53,1)
(53,11,1)
(3,16,1)
(18,21,1)
(16,33,1)
(28,33,1)
(12,25,1)
(22,54,1)
(30,45,2)
(37,48,2)
(12,45,2)
(27,19,2)
(48,14,2)
(35,23,2)
(12,33,2)
(22,5,2)
(35,45,2)
(42,43,2)
(18,45,2)
(22,54,2)
(16,45,2)
(47,45,2)
(37,45,2)
(35,37,2)
(14,45,2)
(21,45,2)
(27,16,2)
(45,29,2)
(44,45,2)
(28,33,2)
(24,45,2)
(20,5,2)
(13,45,2)
(52,45,2)
(34,45,2)
(38,43,2)
(33,45,2)
(48,45,2)
(31,5,2)
(18,33,2)
(36,43,2)
(45,43,2)
(11,45,2)
(16,33,2)
(19,16,2)
(28,45,2)
(45,42,2)
(53,45,2)
(33,35,2)
(54,29,2)
(3,16,2)
(48,29,2)
(54,5,2)
(9,5,2)
(25,45,2)
-----------------------------------
(0,if (myString == NULL)
(1,5)
(2,data)
(3,1)
(4,data)
(5,5==5)
(6,5)
(7,)
(8,)
(9,"%zu")
(10,)
(11,myString)
(12,free(myString)
(13,"Input is less than the length of the source string")
(14,sizeof(wchar_t)
(15,)
(16,myString == NULL)
(17,5)
(18,wcscpy(myString, HELLO_STRING)
(19,-1)
(20,data)
(21,HELLO_STRING)
(22,fscanf(stdin, "%zu", &data)
(23,wchar_t *)
(24,printLine("Input is less than the length of the source string")
(25,myString)
(26,0)
(27,exit(-1)
(28,printWLine(myString)
(29,data = 0)
(30,myString)
(31,stdin)
(32,RET)
(33,myString = (wchar_t *)
(34,myString)
(35,(wchar_t *)
(36,data)
(37,malloc(data*sizeof(wchar_t)
(38,HELLO_STRING)
(39,if(5==5)
(40,)
(41,)
(42,wcslen(HELLO_STRING)
(43,5==5)
(44,myString)
(45,data > wcslen(HELLO_STRING)
(46,)
(47,NULL)
(48,data*sizeof(wchar_t)
(49,5)
(50,if (data > wcslen(HELLO_STRING)
(51,if(5==5)
(52,wchar_t)
(53,data)
(54,&data)
(55,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^