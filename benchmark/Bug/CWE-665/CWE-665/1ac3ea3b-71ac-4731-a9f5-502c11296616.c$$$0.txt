-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_09_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
53,54
53,55
56,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
66,67
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
80,81
82,83
82,84
83,84
85,86
86,87
86,88
87,88
88,89
88,90
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,40,42,47,48,51,54,55,58,65,67,68,70,76,78,79,81,84,89,91,96,97,100,101,104,109,113,115,116,120,124,126,127
-----computeFrom-----
14,15
14,16
26,27
26,28
45,46
45,47
49,50
49,51
53,54
53,55
61,62
61,63
72,73
72,74
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_09_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_09_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(60,25,0)
(12,23,0)
(9,57,0)
(55,49,0)
(7,61,0)
(43,46,0)
(22,48,0)
(16,54,0)
(8,23,0)
(34,60,0)
(47,37,0)
(45,26,0)
(65,57,0)
(37,26,0)
(41,48,0)
(31,48,0)
(52,33,0)
(61,60,0)
(61,7,0)
(15,33,0)
(24,27,0)
(25,20,0)
(20,6,0)
(23,8,0)
(51,59,0)
(54,19,0)
(29,56,0)
(29,7,0)
(33,49,0)
(27,60,0)
(61,49,0)
(6,59,0)
(7,37,0)
(63,25,0)
(35,62,0)
(3,61,0)
(27,26,0)
(20,25,0)
(50,56,0)
(62,0,0)
(59,6,0)
(35,60,0)
(8,0,0)
(50,62,0)
(67,49,0)
(62,35,0)
(40,13,0)
(7,29,0)
(36,61,0)
(57,9,0)
(0,26,0)
(39,6,0)
(32,37,0)
(46,26,0)
(18,62,0)
(28,47,0)
(0,69,0)
(4,0,0)
(27,47,0)
(60,48,0)
(11,26,0)
(23,26,0)
(44,9,0)
(5,35,0)
(37,69,0)
(14,64,0)
(6,20,0)
(25,63,0)
(35,49,0)
(17,7,0)
(53,54,0)
(23,60,0)
(66,8,0)
(10,13,0)
(25,60,0)
(13,1,0)
(42,35,0)
(30,27,0)
(62,50,0)
(9,26,0)
(64,49,0)
(2,23,0)
(68,57,0)
(47,27,0)
(28,27,1)
(21,9,1)
(33,15,1)
(27,60,1)
(47,28,1)
(64,14,1)
(32,47,1)
(26,45,1)
(60,25,1)
(52,49,1)
(30,24,1)
(46,26,1)
(14,29,1)
(6,59,1)
(35,49,1)
(62,35,1)
(52,64,1)
(25,63,1)
(64,49,1)
(46,43,1)
(61,36,1)
(59,51,1)
(29,7,1)
(25,20,1)
(4,8,1)
(47,27,1)
(44,26,1)
(11,58,1)
(33,49,1)
(36,3,1)
(7,17,1)
(35,60,1)
(8,66,1)
(55,21,1)
(15,52,1)
(35,5,1)
(17,61,1)
(8,23,1)
(20,6,1)
(45,11,1)
(0,4,1)
(51,39,1)
(7,61,1)
(38,21,1)
(37,32,1)
(3,50,1)
(23,12,1)
(38,33,1)
(66,23,1)
(62,0,1)
(21,58,1)
(23,60,1)
(5,42,1)
(62,18,1)
(27,26,1)
(58,60,1)
(18,35,1)
(27,30,1)
(12,2,1)
(9,26,1)
(68,65,1)
(2,9,1)
(23,26,1)
(67,55,1)
(61,60,1)
(0,26,1)
(43,37,1)
(37,26,1)
(39,34,1)
(65,44,1)
(49,67,1)
(50,62,1)
(24,0,1)
(44,46,1)
(57,68,1)
(7,37,1)
(9,57,1)
(42,33,1)
(61,49,1)
(15,33,2)
(17,33,2)
(45,58,2)
(18,33,2)
(14,33,2)
(8,23,2)
(44,58,2)
(24,9,2)
(4,9,2)
(8,9,2)
(55,21,2)
(12,9,2)
(6,59,2)
(57,58,2)
(11,58,2)
(32,9,2)
(26,58,2)
(7,37,2)
(62,35,2)
(20,6,2)
(64,49,2)
(68,58,2)
(0,26,2)
(29,33,2)
(9,9,2)
(37,26,2)
(33,49,2)
(65,9,2)
(9,58,2)
(30,9,2)
(66,9,2)
(7,61,2)
(42,33,2)
(57,9,2)
(61,49,2)
(7,33,2)
(46,26,2)
(9,57,2)
(47,9,2)
(52,21,2)
(35,60,2)
(61,60,2)
(37,9,2)
(0,9,2)
(68,9,2)
(5,33,2)
(65,58,2)
(23,26,2)
(44,9,2)
(50,62,2)
(64,33,2)
(27,60,2)
(50,33,2)
(27,9,2)
(23,9,2)
(43,9,2)
(33,21,2)
(25,20,2)
(28,9,2)
(15,21,2)
(27,26,2)
(62,33,2)
(47,27,2)
(46,9,2)
(60,25,2)
(52,33,2)
(35,33,2)
(36,33,2)
(49,21,2)
(23,60,2)
(61,33,2)
(33,33,2)
(67,21,2)
(2,9,2)
(29,7,2)
(35,49,2)
(3,33,2)
(25,63,2)
(9,26,2)
(62,0,2)
-----------------------------------
(0,data[i].intOne = i)
(1,)
(2,data)
(3,data)
(4,i)
(5,i)
(6,10*sizeof(twoIntsStruct)
(7,data[i].intTwo)
(8,data[i].intOne)
(9,i<(10/2)
(10,i)
(11,i)
(12,i)
(13,)
(14,i)
(15,10)
(16,for(i=0; i<(10/2)
(17,intTwo)
(18,intOne)
(19,)
(20,ALLOCA(10*sizeof(twoIntsStruct)
(21,GLOBAL_CONST_TRUE)
(22,if(GLOBAL_CONST_TRUE)
(23,data[i])
(24,data)
(25,(twoIntsStruct *)
(26,i=0)
(27,data[i])
(28,intTwo)
(29,printIntLine(data[i].intTwo)
(30,i)
(31,data)
(32,i)
(33,i<10)
(34,data)
(35,data[i])
(36,i)
(37,data[i].intTwo = i)
(38,RET)
(39,10)
(40,for(i=0; i<10; i++)
(41,if(GLOBAL_CONST_TRUE)
(42,data)
(43,i)
(44,i)
(45,0)
(46,i++)
(47,data[i].intTwo)
(48,)
(49,i=0)
(50,printIntLine(data[i].intOne)
(51,twoIntsStruct)
(52,i)
(53,i)
(54,)
(55,i)
(56,)
(57,10/2)
(58,GLOBAL_CONST_TRUE)
(59,sizeof(twoIntsStruct)
(60,data = (twoIntsStruct *)
(61,data[i])
(62,data[i].intOne)
(63,twoIntsStruct *)
(64,i++)
(65,10)
(66,intOne)
(67,0)
(68,2)
(69,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^