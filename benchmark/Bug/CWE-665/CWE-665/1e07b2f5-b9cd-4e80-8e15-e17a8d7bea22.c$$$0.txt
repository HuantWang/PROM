-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_05_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
55,56
55,57
56,57
57,58
57,59
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
90,92
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,48,50,53,58,60,65,66,69,70,73,78,82,84,85,89,93,95,96
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_05_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_05_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(26,11,0)
(40,38,0)
(47,37,0)
(42,41,0)
(40,19,0)
(44,19,0)
(12,18,0)
(32,38,0)
(36,14,0)
(22,34,0)
(32,19,0)
(9,25,0)
(42,11,0)
(23,16,0)
(20,37,0)
(31,40,0)
(14,41,0)
(27,32,0)
(45,5,0)
(29,39,0)
(11,42,0)
(0,12,0)
(28,12,0)
(37,19,0)
(36,32,0)
(35,45,0)
(24,44,0)
(11,40,0)
(6,32,0)
(35,23,0)
(5,45,0)
(38,34,0)
(45,38,0)
(15,39,0)
(14,36,0)
(3,36,0)
(8,19,0)
(40,11,0)
(13,40,0)
(16,23,0)
(17,16,0)
(32,36,0)
(2,38,0)
(48,19,0)
(4,23,0)
(38,45,0)
(25,38,0)
(39,29,0)
(29,1,0)
(46,34,0)
(30,34,0)
(7,25,0)
(23,35,0)
(45,35,0)
(43,34,0)
(17,4,1)
(36,3,1)
(29,39,1)
(8,48,1)
(40,38,1)
(37,19,1)
(33,29,1)
(38,45,1)
(6,37,1)
(10,37,1)
(20,19,1)
(32,38,1)
(45,35,1)
(39,15,1)
(15,25,1)
(20,44,1)
(11,40,1)
(35,23,1)
(40,13,1)
(45,5,1)
(14,36,1)
(27,6,1)
(4,2,1)
(42,11,1)
(13,31,1)
(31,14,1)
(23,16,1)
(11,26,1)
(7,38,1)
(47,20,1)
(26,40,1)
(21,33,1)
(44,24,1)
(33,25,1)
(25,9,1)
(32,27,1)
(24,42,1)
(16,17,1)
(25,38,1)
(9,7,1)
(10,21,1)
(44,19,1)
(19,8,1)
(48,21,1)
(40,19,1)
(32,19,1)
(3,32,1)
(36,32,1)
(37,47,1)
(25,38,2)
(35,23,2)
(32,37,2)
(11,40,2)
(20,21,2)
(27,37,2)
(44,19,2)
(45,35,2)
(20,37,2)
(40,19,2)
(32,38,2)
(40,38,2)
(26,37,2)
(14,36,2)
(19,21,2)
(15,25,2)
(8,21,2)
(32,19,2)
(39,25,2)
(11,37,2)
(44,37,2)
(24,37,2)
(37,21,2)
(42,11,2)
(47,37,2)
(3,37,2)
(42,37,2)
(47,21,2)
(6,37,2)
(14,37,2)
(40,37,2)
(36,37,2)
(29,25,2)
(48,21,2)
(45,5,2)
(31,37,2)
(36,32,2)
(38,45,2)
(37,37,2)
(13,37,2)
(29,39,2)
(37,19,2)
(23,16,2)
-----------------------------------
(0,for(i=0; i<10; i++)
(1,)
(2,data)
(3,intOne)
(4,10)
(5,twoIntsStruct *)
(6,data)
(7,data)
(8,0)
(9,NULL)
(10,RET)
(11,data[i].intTwo)
(12,)
(13,i)
(14,printIntLine(data[i].intOne)
(15,1)
(16,sizeof(twoIntsStruct)
(17,twoIntsStruct)
(18,)
(19,i=0)
(20,i)
(21,staticTrue)
(22,data)
(23,10*sizeof(twoIntsStruct)
(24,i)
(25,data == NULL)
(26,intTwo)
(27,i)
(28,i)
(29,exit(-1)
(30,if (data == NULL)
(31,data)
(32,data[i])
(33,staticTrue)
(34,)
(35,malloc(10*sizeof(twoIntsStruct)
(36,data[i].intOne)
(37,i<10)
(38,data = (twoIntsStruct *)
(39,-1)
(40,data[i])
(41,)
(42,printIntLine(data[i].intTwo)
(43,if(staticTrue)
(44,i++)
(45,(twoIntsStruct *)
(46,if(staticTrue)
(47,10)
(48,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^