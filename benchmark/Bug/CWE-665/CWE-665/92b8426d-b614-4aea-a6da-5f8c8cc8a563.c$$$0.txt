-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
57,58
57,59
60,61
60,62
60,63
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
69,74
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
83,84
85,86
86,87
86,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
124,125
124,126
125,126
-----nextToken-----
2,4,9,11,15,17,21,22,26,28,29,32,37,38,40,45,47,51,52,56,58,59,63,66,68,73,76,78,81,84,87,88,92,94,99,101,105,107,109,113,115,119,121,126,127
-----computeFrom-----
19,20
19,21
34,35
34,36
61,62
61,63
71,72
71,73
82,83
82,84
90,91
90,92
-----guardedBy-----
68,109
63,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(33,41,0)
(3,53,0)
(5,39,0)
(29,42,0)
(58,35,0)
(1,35,0)
(52,1,0)
(3,8,0)
(20,16,0)
(2,56,0)
(7,1,0)
(16,20,0)
(58,1,0)
(25,53,0)
(8,3,0)
(42,3,0)
(5,1,0)
(17,56,0)
(5,8,0)
(46,56,0)
(4,3,0)
(10,36,0)
(37,35,0)
(37,1,0)
(53,38,0)
(27,7,0)
(26,7,0)
(17,40,0)
(43,21,0)
(12,35,0)
(40,17,0)
(30,12,0)
(38,53,0)
(34,41,0)
(45,12,0)
(39,5,0)
(3,42,0)
(24,6,0)
(31,56,0)
(50,38,0)
(51,16,0)
(15,6,0)
(23,43,0)
(54,17,0)
(18,33,0)
(21,56,0)
(12,1,0)
(9,17,0)
(44,56,0)
(40,46,0)
(49,46,0)
(6,2,0)
(2,46,0)
(32,21,0)
(28,38,0)
(47,58,0)
(14,35,0)
(41,33,0)
(0,43,0)
(13,40,0)
(55,46,0)
(11,10,0)
(48,2,0)
(22,37,0)
(33,53,0)
(8,5,0)
(20,57,0)
(53,21,0)
(1,5,0)
(38,50,1)
(50,28,1)
(1,5,1)
(40,46,1)
(45,30,1)
(7,26,1)
(54,46,1)
(25,2,1)
(3,53,1)
(6,15,1)
(48,6,1)
(12,45,1)
(17,40,1)
(5,39,1)
(7,1,1)
(51,7,1)
(13,9,1)
(19,37,1)
(58,1,1)
(11,33,1)
(46,55,1)
(9,54,1)
(37,1,1)
(10,11,1)
(41,34,1)
(40,13,1)
(8,3,1)
(22,58,1)
(24,17,1)
(29,4,1)
(30,20,1)
(55,49,1)
(26,27,1)
(47,12,1)
(37,22,1)
(4,52,1)
(28,25,1)
(52,33,1)
(53,38,1)
(2,46,1)
(27,1,1)
(5,8,1)
(20,16,1)
(34,18,1)
(3,42,1)
(30,7,1)
(18,53,1)
(33,41,1)
(58,47,1)
(19,10,1)
(42,29,1)
(12,1,1)
(2,48,1)
(16,51,1)
(15,24,1)
(33,53,1)
(2,46,2)
(7,33,2)
(16,7,2)
(12,1,2)
(4,33,2)
(5,33,2)
(42,33,2)
(53,38,2)
(37,33,2)
(5,39,2)
(27,33,2)
(3,53,2)
(3,42,2)
(5,8,2)
(12,33,2)
(58,1,2)
(45,33,2)
(7,1,2)
(8,3,2)
(3,33,2)
(1,5,2)
(58,33,2)
(20,7,2)
(51,7,2)
(1,33,2)
(33,53,2)
(26,33,2)
(30,33,2)
(52,33,2)
(20,16,2)
(47,33,2)
(17,40,2)
(10,33,2)
(29,33,2)
(37,1,2)
(22,33,2)
(8,33,2)
(40,46,2)
(33,41,2)
(11,33,2)
-----------------------------------
(0,if (data > wcslen(HELLO_STRING)
(1,myString = (wchar_t *)
(2,myUnion.unionFirst = data)
(3,data*sizeof(wchar_t)
(4,data)
(5,(wchar_t *)
(6,myUnion.unionFirst)
(7,myString == NULL)
(8,malloc(data*sizeof(wchar_t)
(9,"%zu")
(10,printLine("Input is less than the length of the source string")
(11,"Input is less than the length of the source string")
(12,wcscpy(myString, HELLO_STRING)
(13,data)
(14,if (myString == NULL)
(15,unionFirst)
(16,-1)
(17,fscanf(stdin, "%zu", &data)
(18,data)
(19,RET)
(20,exit(-1)
(21,)
(22,myString)
(23,myString)
(24,myUnion)
(25,data)
(26,NULL)
(27,myString)
(28,myUnion)
(29,wchar_t)
(30,myString)
(31,data)
(32,data)
(33,data > wcslen(HELLO_STRING)
(34,HELLO_STRING)
(35,)
(36,)
(37,free(myString)
(38,myUnion.unionSecond)
(39,wchar_t *)
(40,&data)
(41,wcslen(HELLO_STRING)
(42,sizeof(wchar_t)
(43,)
(44,myUnion)
(45,HELLO_STRING)
(46,data = 0)
(47,myString)
(48,data)
(49,data)
(50,unionSecond)
(51,1)
(52,myString)
(53,data = myUnion.unionSecond)
(54,stdin)
(55,0)
(56,)
(57,)
(58,printWLine(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^