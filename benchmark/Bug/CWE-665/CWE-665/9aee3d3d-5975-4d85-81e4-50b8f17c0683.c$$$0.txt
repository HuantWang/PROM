-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_03_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
80,81
80,82
81,82
81,83
84,85
85,86
85,87
86,87
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
101,102
102,103
104,105
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,51,53,58,59,62,65,66,69,75,77,79,82,83,88,90,95,96,99,100,103,108,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
81,82
81,83
93,94
93,95
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_03_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_03_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(10,45,0)
(31,25,0)
(2,54,0)
(26,9,0)
(23,52,0)
(46,34,0)
(5,23,0)
(37,23,0)
(30,25,0)
(18,14,0)
(52,23,0)
(62,45,0)
(28,53,0)
(29,7,0)
(3,26,0)
(0,27,0)
(36,54,0)
(64,61,0)
(11,45,0)
(1,53,0)
(9,26,0)
(50,39,0)
(37,64,0)
(42,25,0)
(4,18,0)
(55,6,0)
(32,34,0)
(7,16,0)
(26,36,0)
(51,18,0)
(56,54,0)
(26,25,0)
(49,48,0)
(17,52,0)
(51,36,0)
(61,64,0)
(20,54,0)
(60,62,0)
(22,6,0)
(51,45,0)
(19,40,0)
(36,64,0)
(27,0,0)
(43,40,0)
(18,45,0)
(23,37,0)
(63,36,0)
(13,19,0)
(58,39,0)
(12,7,0)
(40,45,0)
(40,19,0)
(9,8,0)
(33,0,0)
(24,51,0)
(34,36,0)
(47,54,0)
(64,37,0)
(44,19,0)
(21,26,0)
(38,51,0)
(57,30,0)
(27,35,0)
(64,36,0)
(15,48,0)
(26,18,0)
(48,25,0)
(53,41,0)
(9,26,1)
(15,30,1)
(34,32,1)
(18,45,1)
(45,11,1)
(22,40,1)
(19,44,1)
(22,39,1)
(59,6,1)
(3,48,1)
(44,13,1)
(49,15,1)
(38,40,1)
(5,63,1)
(60,18,1)
(26,18,1)
(62,60,1)
(30,25,1)
(58,34,1)
(64,37,1)
(39,50,1)
(52,17,1)
(64,61,1)
(43,62,1)
(48,25,1)
(15,25,1)
(51,36,1)
(0,33,1)
(36,64,1)
(51,24,1)
(48,49,1)
(10,39,1)
(21,3,1)
(31,42,1)
(27,0,1)
(17,5,1)
(57,9,1)
(43,45,1)
(40,45,1)
(11,10,1)
(58,27,1)
(32,46,1)
(34,36,1)
(24,38,1)
(30,57,1)
(4,51,1)
(26,25,1)
(50,58,1)
(42,6,1)
(18,4,1)
(13,43,1)
(62,45,1)
(59,48,1)
(40,19,1)
(33,34,1)
(51,45,1)
(23,52,1)
(46,36,1)
(37,23,1)
(26,36,1)
(26,21,1)
(25,31,1)
(55,22,1)
(6,55,1)
(51,36,2)
(34,36,2)
(60,40,2)
(62,45,2)
(15,6,2)
(37,23,2)
(0,34,2)
(9,26,2)
(27,0,2)
(31,6,2)
(13,40,2)
(26,18,2)
(44,39,2)
(51,45,2)
(11,39,2)
(26,25,2)
(25,6,2)
(19,39,2)
(26,36,2)
(30,25,2)
(4,40,2)
(3,48,2)
(30,48,2)
(40,45,2)
(15,48,2)
(48,25,2)
(21,48,2)
(33,34,2)
(44,40,2)
(38,40,2)
(48,6,2)
(49,48,2)
(13,39,2)
(36,64,2)
(40,19,2)
(40,39,2)
(18,45,2)
(57,48,2)
(43,39,2)
(27,34,2)
(40,40,2)
(62,40,2)
(19,40,2)
(18,40,2)
(42,6,2)
(64,61,2)
(10,39,2)
(49,6,2)
(51,40,2)
(64,37,2)
(26,48,2)
(48,48,2)
(24,40,2)
(45,39,2)
(23,52,2)
(9,48,2)
(43,40,2)
-----------------------------------
(0,-1)
(1,for(i=0; i<(10/2)
(2,if(5==5)
(3,data)
(4,i)
(5,10)
(6,5==5)
(7,)
(8,)
(9,printIntLine(data[i])
(10,i)
(11,0)
(12,for(i=0; i<10; i++)
(13,10)
(14,)
(15,i)
(16,)
(17,int)
(18,data[i] = i)
(19,10/2)
(20,if (data == NULL)
(21,i)
(22,5)
(23,10*sizeof(int)
(24,i)
(25,i=0)
(26,data[i])
(27,exit(-1)
(28,i)
(29,i)
(30,i++)
(31,0)
(32,NULL)
(33,1)
(34,data == NULL)
(35,)
(36,data = (int *)
(37,malloc(10*sizeof(int)
(38,data)
(39,5==5)
(40,i<(10/2)
(41,)
(42,i)
(43,i)
(44,2)
(45,i=0)
(46,data)
(47,data)
(48,i<10)
(49,10)
(50,5)
(51,data[i])
(52,sizeof(int)
(53,)
(54,)
(55,5)
(56,if(5==5)
(57,i)
(58,5)
(59,RET)
(60,i)
(61,int *)
(62,i++)
(63,data)
(64,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^