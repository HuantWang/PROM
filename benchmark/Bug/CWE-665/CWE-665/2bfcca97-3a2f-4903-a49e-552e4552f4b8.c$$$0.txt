-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_05_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
49,50
50,51
50,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
59,61
60,61
62,63
64,65
66,67
66,68
67,68
69,70
70,71
70,72
71,72
72,73
72,74
74,75
76,77
76,78
76,79
76,80
77,78
78,79
78,80
79,80
82,83
82,84
83,84
86,87
87,88
89,90
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,37,39,44,45,48,51,52,55,61,63,65,68,73,75,80,81,84,85,88,93,96,98
-----computeFrom-----
13,14
13,15
24,25
24,26
42,43
42,44
46,47
46,48
50,51
50,52
58,59
58,60
78,79
78,80
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_05_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_05_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(36,15,0)
(4,10,0)
(34,23,0)
(48,31,0)
(22,1,0)
(7,48,0)
(25,31,0)
(13,50,0)
(22,34,0)
(20,15,0)
(30,50,0)
(43,22,0)
(38,32,0)
(48,42,0)
(33,10,0)
(10,33,0)
(50,32,0)
(42,48,0)
(41,47,0)
(13,40,0)
(44,33,0)
(6,30,0)
(51,0,0)
(34,31,0)
(39,50,0)
(37,34,0)
(27,22,0)
(14,42,0)
(26,30,0)
(28,31,0)
(3,13,0)
(12,0,0)
(40,13,0)
(3,10,0)
(21,47,0)
(0,16,0)
(15,5,0)
(10,3,0)
(22,47,0)
(2,32,0)
(9,8,0)
(13,3,0)
(1,45,0)
(8,31,0)
(18,29,0)
(30,31,0)
(35,42,0)
(29,47,0)
(46,32,0)
(1,22,0)
(11,29,0)
(49,21,0)
(17,47,0)
(50,13,0)
(22,50,0)
(30,34,0)
(43,27,1)
(6,48,1)
(4,39,1)
(22,47,1)
(27,29,1)
(11,18,1)
(30,26,1)
(19,50,1)
(34,37,1)
(26,6,1)
(8,9,1)
(22,43,1)
(1,22,1)
(35,14,1)
(31,25,1)
(48,31,1)
(13,3,1)
(50,13,1)
(28,19,1)
(25,28,1)
(8,31,1)
(14,7,1)
(17,24,1)
(44,4,1)
(37,30,1)
(47,41,1)
(22,50,1)
(18,21,1)
(18,47,1)
(22,34,1)
(42,35,1)
(48,42,1)
(29,11,1)
(21,49,1)
(21,47,1)
(10,33,1)
(3,10,1)
(7,31,1)
(24,19,1)
(34,31,1)
(41,17,1)
(49,1,1)
(52,29,1)
(52,24,1)
(33,44,1)
(30,50,1)
(29,47,1)
(7,8,1)
(30,31,1)
(13,40,1)
(9,34,1)
(24,48,1)
(29,24,2)
(42,48,2)
(10,33,2)
(48,42,2)
(35,48,2)
(8,48,2)
(21,29,2)
(22,34,2)
(7,48,2)
(48,48,2)
(42,19,2)
(11,29,2)
(6,48,2)
(17,24,2)
(37,48,2)
(18,29,2)
(47,24,2)
(14,19,2)
(26,48,2)
(29,29,2)
(29,47,2)
(22,29,2)
(43,29,2)
(22,50,2)
(28,19,2)
(14,48,2)
(9,48,2)
(30,48,2)
(30,50,2)
(8,31,2)
(1,22,2)
(31,19,2)
(11,24,2)
(50,13,2)
(48,19,2)
(7,19,2)
(35,19,2)
(34,48,2)
(13,40,2)
(49,29,2)
(18,24,2)
(3,10,2)
(22,47,2)
(1,29,2)
(27,29,2)
(48,31,2)
(34,31,2)
(25,19,2)
(21,47,2)
(13,3,2)
(30,31,2)
(41,24,2)
-----------------------------------
(0,)
(1,printIntLine(data[i])
(2,if(staticTrue)
(3,ALLOCA(10*sizeof(int)
(4,10)
(5,)
(6,data)
(7,i)
(8,i++)
(9,i)
(10,10*sizeof(int)
(11,10)
(12,i)
(13,(int *)
(14,10)
(15,)
(16,)
(17,i)
(18,i)
(19,staticTrue)
(20,for(i=0; i<10; i++)
(21,i++)
(22,data[i])
(23,)
(24,staticTrue)
(25,0)
(26,i)
(27,data)
(28,i)
(29,i<10)
(30,data[i])
(31,i=0)
(32,)
(33,sizeof(int)
(34,data[i] = i)
(35,2)
(36,i)
(37,i)
(38,data)
(39,data)
(40,int *)
(41,0)
(42,10/2)
(43,i)
(44,int)
(45,)
(46,if(staticTrue)
(47,i=0)
(48,i<(10/2)
(49,i)
(50,data = (int *)
(51,for(i=0; i<(10/2)
(52,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^