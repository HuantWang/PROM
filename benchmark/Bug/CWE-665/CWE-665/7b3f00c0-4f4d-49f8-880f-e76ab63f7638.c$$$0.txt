-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_17_bad()
{
    int i,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
59,61
60,61
61,62
61,63
63,64
63,65
66,67
66,68
66,69
67,68
67,69
68,69
70,71
70,72
71,72
73,74
75,76
75,77
75,78
75,79
75,80
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
83,84
85,86
85,87
86,87
88,89
88,90
89,90
91,92
92,93
92,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
109,112
110,111
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
130,132
131,132
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,44,49,50,53,54,57,62,64,65,69,72,74,79,82,84,87,90,93,94,98,100,105,107,111,113,115,119,121,125,127,132,133
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
47,48
47,49
51,52
51,53
67,68
67,69
77,78
77,79
88,89
88,90
96,97
96,98
-----guardedBy-----
74,115
69,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_17_bad(){    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_17_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_17_bad
{    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(51,39,0)
(3,0,0)
(11,8,0)
(22,1,0)
(35,54,0)
(35,52,0)
(59,57,0)
(34,40,0)
(32,57,0)
(33,35,0)
(9,23,0)
(40,34,0)
(50,2,0)
(46,45,0)
(18,46,0)
(13,52,0)
(27,12,0)
(64,23,0)
(61,2,0)
(40,14,0)
(0,29,0)
(34,35,0)
(4,24,0)
(7,17,0)
(57,45,0)
(52,24,0)
(23,30,0)
(40,45,0)
(11,45,0)
(60,24,0)
(21,45,0)
(48,29,0)
(62,54,0)
(43,29,0)
(17,55,0)
(2,37,0)
(14,40,0)
(35,34,0)
(5,53,0)
(10,22,0)
(42,27,0)
(36,8,0)
(26,23,0)
(63,43,0)
(9,25,0)
(23,26,0)
(9,52,0)
(44,9,0)
(53,55,0)
(15,11,0)
(35,23,0)
(65,25,0)
(49,29,0)
(56,24,0)
(19,53,0)
(20,24,0)
(58,0,0)
(54,35,0)
(45,40,0)
(28,52,0)
(31,55,0)
(16,55,0)
(39,45,0)
(1,6,0)
(46,8,0)
(47,24,0)
(39,8,0)
(25,9,0)
(45,8,0)
(41,11,0)
(1,22,0)
(53,55,1)
(48,49,1)
(25,65,1)
(58,29,1)
(44,0,1)
(10,57,1)
(0,3,1)
(41,15,1)
(7,23,1)
(9,52,1)
(15,1,1)
(31,52,1)
(46,18,1)
(19,17,1)
(27,42,1)
(42,9,1)
(52,28,1)
(23,26,1)
(43,29,1)
(45,40,1)
(35,23,1)
(53,5,1)
(3,58,1)
(57,45,1)
(11,45,1)
(15,57,1)
(64,53,1)
(22,10,1)
(43,63,1)
(46,45,1)
(39,45,1)
(29,48,1)
(11,41,1)
(0,29,1)
(39,51,1)
(40,34,1)
(17,55,1)
(18,39,1)
(51,11,1)
(34,35,1)
(62,33,1)
(38,0,1)
(35,52,1)
(59,32,1)
(5,19,1)
(63,46,1)
(49,53,1)
(40,14,1)
(16,31,1)
(26,64,1)
(33,21,1)
(54,62,1)
(1,22,1)
(65,44,1)
(32,45,1)
(55,16,1)
(9,25,1)
(35,54,1)
(28,13,1)
(17,7,1)
(19,55,1)
(58,43,1)
(21,9,1)
(57,59,1)
(63,27,1)
(9,23,1)
(17,53,2)
(40,9,2)
(43,0,2)
(54,9,2)
(45,40,2)
(19,53,2)
(21,9,2)
(17,55,2)
(64,53,2)
(9,23,2)
(35,52,2)
(57,45,2)
(1,57,2)
(35,54,2)
(45,9,2)
(15,9,2)
(26,53,2)
(34,35,2)
(32,9,2)
(11,9,2)
(39,9,2)
(35,9,2)
(0,29,2)
(9,52,2)
(39,45,2)
(63,0,2)
(18,9,2)
(53,53,2)
(34,9,2)
(44,0,2)
(46,45,2)
(40,14,2)
(41,9,2)
(3,0,2)
(11,45,2)
(58,0,2)
(7,53,2)
(9,0,2)
(40,34,2)
(43,29,2)
(33,9,2)
(42,9,2)
(23,26,2)
(10,57,2)
(27,9,2)
(46,9,2)
(35,23,2)
(5,53,2)
(25,0,2)
(23,53,2)
(1,22,2)
(9,25,2)
(65,0,2)
(22,57,2)
(57,9,2)
(62,9,2)
(53,55,2)
(0,0,2)
(51,9,2)
(59,9,2)
-----------------------------------
(0,j < 1)
(1,exit(-1)
(2,)
(3,1)
(4,j)
(5,1)
(6,)
(7,i)
(8,)
(9,data > wcslen(HELLO_STRING)
(10,1)
(11,wcscpy(myString, HELLO_STRING)
(12,)
(13,data)
(14,wchar_t *)
(15,myString)
(16,0)
(17,i++)
(18,myString)
(19,i)
(20,for(j = 0; j < 1; j++)
(21,myString)
(22,-1)
(23,data = rand()
(24,)
(25,wcslen(HELLO_STRING)
(26,rand()
(27,printLine("Input is less than the length of the source string")
(28,0)
(29,j = 0)
(30,)
(31,i)
(32,myString)
(33,data)
(34,malloc(data*sizeof(wchar_t)
(35,data*sizeof(wchar_t)
(36,if (myString == NULL)
(37,)
(38,RET)
(39,printWLine(myString)
(40,(wchar_t *)
(41,HELLO_STRING)
(42,"Input is less than the length of the source string")
(43,j++)
(44,data)
(45,myString = (wchar_t *)
(46,free(myString)
(47,for(i = 0; i < 1; i++)
(48,0)
(49,j)
(50,if (data > wcslen(HELLO_STRING)
(51,myString)
(52,data = 0)
(53,i < 1)
(54,sizeof(wchar_t)
(55,i = 0)
(56,i)
(57,myString == NULL)
(58,j)
(59,NULL)
(60,data)
(61,myString)
(62,wchar_t)
(63,j)
(64,data)
(65,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^