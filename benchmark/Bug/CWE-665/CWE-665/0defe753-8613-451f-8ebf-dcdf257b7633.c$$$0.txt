-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_12_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
49,50
50,51
50,52
51,52
52,53
52,54
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
66,67
67,68
69,70
70,71
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
81,82
83,84
83,85
83,86
84,85
85,86
87,88
88,89
88,90
89,90
90,91
90,92
92,93
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
104,105
105,106
107,108
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
120,121
120,122
122,123
124,125
124,126
124,127
124,128
125,126
126,127
126,128
127,128
130,131
130,132
131,132
134,135
135,136
137,138
138,139
139,140
139,141
140,141
140,142
141,142
143,144
145,146
145,147
146,147
146,148
149,150
151,152
151,153
152,153
153,154
153,155
155,156
157,158
157,159
157,160
157,161
158,159
159,160
159,161
160,161
163,164
163,165
164,165
167,168
168,169
170,171
171,172
172,173
172,174
173,174
175,176
175,177
176,177
178,179
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,53,55,60,61,64,65,68,74,76,79,80,82,86,91,93,98,99,102,103,106,111,114,116,121,123,128,129,132,133,136,142,144,147,148,150,154,156,161,162,165,166,169,174,177,179
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
58,59
58,60
62,63
62,64
71,72
71,73
96,97
96,98
100,101
100,102
126,127
126,128
130,131
130,132
139,140
139,141
159,160
159,161
163,164
163,165
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_12_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_12_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(24,4,0)
(22,55,0)
(74,14,0)
(19,43,0)
(1,87,0)
(69,53,0)
(68,45,0)
(83,18,0)
(65,92,0)
(71,15,0)
(96,22,0)
(86,0,0)
(17,40,0)
(8,31,0)
(73,14,0)
(95,10,0)
(86,15,0)
(43,2,0)
(82,0,0)
(10,2,0)
(7,40,0)
(58,64,0)
(1,18,0)
(35,25,0)
(26,18,0)
(59,2,0)
(62,18,0)
(82,69,0)
(23,13,0)
(87,91,0)
(4,64,0)
(87,1,0)
(55,22,0)
(46,11,0)
(42,15,0)
(80,23,0)
(67,4,0)
(82,63,0)
(69,82,0)
(77,18,0)
(89,43,0)
(28,86,0)
(93,56,0)
(88,16,0)
(38,37,0)
(92,64,0)
(72,82,0)
(41,1,0)
(6,39,0)
(49,75,0)
(45,68,0)
(54,84,0)
(9,68,0)
(76,87,0)
(34,25,0)
(61,32,0)
(82,1,0)
(81,86,0)
(52,56,0)
(47,22,0)
(57,71,0)
(71,1,0)
(56,1,0)
(0,86,0)
(4,67,0)
(12,54,0)
(82,55,0)
(16,1,0)
(11,84,0)
(16,2,0)
(3,23,0)
(4,55,0)
(79,4,0)
(71,0,0)
(32,15,0)
(70,75,0)
(75,63,0)
(91,87,0)
(22,2,0)
(94,82,0)
(68,91,0)
(31,63,0)
(6,37,0)
(27,63,0)
(14,64,0)
(5,2,0)
(4,1,0)
(25,15,0)
(55,33,0)
(60,11,0)
(0,21,0)
(67,44,0)
(16,55,0)
(29,16,0)
(37,6,0)
(78,71,0)
(20,45,0)
(48,63,0)
(51,64,0)
(30,15,0)
(91,68,0)
(40,36,0)
(50,54,0)
(87,76,0)
(86,28,0)
(22,96,0)
(69,82,1)
(82,55,1)
(58,51,1)
(20,9,1)
(2,59,1)
(49,31,1)
(27,25,1)
(64,58,1)
(9,41,1)
(75,70,1)
(15,30,1)
(74,73,1)
(45,20,1)
(63,48,1)
(34,15,1)
(25,15,1)
(16,29,1)
(52,1,1)
(51,66,1)
(14,64,1)
(4,24,1)
(34,32,1)
(25,35,1)
(24,79,1)
(55,22,1)
(90,56,1)
(86,28,1)
(78,25,1)
(82,0,1)
(85,14,1)
(94,75,1)
(10,2,1)
(89,2,1)
(71,1,1)
(71,57,1)
(66,43,1)
(37,38,1)
(56,1,1)
(72,94,1)
(67,4,1)
(43,19,1)
(73,64,1)
(31,8,1)
(0,86,1)
(71,15,1)
(68,45,1)
(70,49,1)
(16,1,1)
(87,76,1)
(19,89,1)
(92,64,1)
(95,55,1)
(47,16,1)
(82,72,1)
(4,55,1)
(42,66,1)
(38,56,1)
(82,1,1)
(32,15,1)
(65,67,1)
(31,63,1)
(59,5,1)
(14,74,1)
(81,71,1)
(22,2,1)
(1,87,1)
(86,81,1)
(4,1,1)
(16,2,1)
(6,37,1)
(29,88,1)
(86,15,1)
(56,93,1)
(8,69,1)
(88,43,1)
(61,0,1)
(30,42,1)
(35,34,1)
(90,6,1)
(92,65,1)
(75,63,1)
(32,61,1)
(93,52,1)
(79,14,1)
(82,63,1)
(87,91,1)
(4,64,1)
(22,96,1)
(91,68,1)
(66,90,1)
(10,95,1)
(85,75,1)
(22,47,1)
(49,63,1)
(48,27,1)
(5,90,1)
(43,2,1)
(57,78,1)
(73,92,1)
(89,10,1)
(74,66,2)
(4,14,2)
(70,66,2)
(4,64,2)
(58,66,2)
(1,87,2)
(4,55,2)
(16,43,2)
(69,75,2)
(91,68,2)
(48,66,2)
(87,76,2)
(74,14,2)
(95,43,2)
(25,25,2)
(63,66,2)
(75,63,2)
(75,66,2)
(22,2,2)
(14,64,2)
(82,1,2)
(32,25,2)
(72,75,2)
(55,43,2)
(82,55,2)
(73,66,2)
(27,66,2)
(34,25,2)
(75,75,2)
(71,15,2)
(51,66,2)
(2,90,2)
(8,75,2)
(31,63,2)
(68,45,2)
(31,75,2)
(43,43,2)
(69,82,2)
(92,64,2)
(70,75,2)
(86,15,2)
(43,2,2)
(56,1,2)
(5,90,2)
(29,43,2)
(82,75,2)
(6,56,2)
(81,25,2)
(61,25,2)
(59,90,2)
(16,1,2)
(16,2,2)
(47,43,2)
(25,15,2)
(78,25,2)
(67,14,2)
(65,14,2)
(43,90,2)
(92,14,2)
(24,14,2)
(4,1,2)
(55,22,2)
(89,43,2)
(35,66,2)
(87,91,2)
(86,25,2)
(79,14,2)
(89,90,2)
(71,25,2)
(22,96,2)
(35,25,2)
(71,1,2)
(10,2,2)
(42,66,2)
(32,15,2)
(22,43,2)
(25,66,2)
(64,66,2)
(30,66,2)
(88,43,2)
(14,66,2)
(6,37,2)
(34,66,2)
(86,28,2)
(82,0,2)
(0,86,2)
(49,66,2)
(14,14,2)
(19,43,2)
(57,25,2)
(10,43,2)
(0,25,2)
(49,75,2)
(94,75,2)
(19,90,2)
(67,4,2)
(73,14,2)
(38,56,2)
(15,66,2)
(82,63,2)
(37,56,2)
-----------------------------------
(0,data[i] = (double)
(1,data = (double *)
(2,i=0)
(3,for(i=0; i<10; i++)
(4,data[i])
(5,i)
(6,exit(-1)
(7,i)
(8,i)
(9,10)
(10,i++)
(11,)
(12,for(i=0; i<10; i++)
(13,)
(14,i<10)
(15,i=0)
(16,data[i])
(17,for(i=0; i<10; i++)
(18,)
(19,10)
(20,double)
(21,)
(22,(double)
(23,)
(24,i)
(25,i<10)
(26,if(globalReturnsTrueOrFalse()
(27,i)
(28,double)
(29,i)
(30,0)
(31,i++)
(32,i++)
(33,)
(34,i)
(35,10)
(36,)
(37,-1)
(38,1)
(39,)
(40,)
(41,data)
(42,i)
(43,i<10)
(44,)
(45,sizeof(double)
(46,i)
(47,i)
(48,0)
(49,i)
(50,i)
(51,i)
(52,data)
(53,)
(54,)
(55,data[i] = (double)
(56,data == NULL)
(57,i)
(58,0)
(59,0)
(60,for(i=0; i<10; i++)
(61,i)
(62,data)
(63,i=0)
(64,i=0)
(65,i)
(66,globalReturnsTrueOrFalse()
(67,printDoubleLine(data[i])
(68,10*sizeof(double)
(69,printDoubleLine(data[i])
(70,10)
(71,data[i])
(72,i)
(73,i)
(74,10)
(75,i<10)
(76,double *)
(77,if(globalReturnsTrueOrFalse()
(78,data)
(79,data)
(80,i)
(81,i)
(82,data[i])
(83,if (data == NULL)
(84,)
(85,RET)
(86,(double)
(87,(double *)
(88,data)
(89,i)
(90,globalReturnsTrueOrFalse()
(91,malloc(10*sizeof(double)
(92,i++)
(93,NULL)
(94,data)
(95,i)
(96,double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^