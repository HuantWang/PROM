-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_09_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
49,50
50,51
50,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
76,77
76,78
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
90,91
91,92
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,37,39,44,45,48,51,52,55,61,63,66,67,69,72,77,79,84,85,88,89,92,97,100,102
-----computeFrom-----
13,14
13,15
24,25
24,26
42,43
42,44
46,47
46,48
50,51
50,52
58,59
58,60
82,83
82,84
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_09_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_09_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(31,20,0)
(16,17,0)
(31,9,0)
(42,46,0)
(40,31,0)
(49,38,0)
(20,14,0)
(43,20,0)
(22,38,0)
(4,39,0)
(29,14,0)
(41,38,0)
(20,23,0)
(5,41,0)
(44,14,0)
(21,9,0)
(0,23,0)
(19,4,0)
(18,3,0)
(23,0,0)
(25,31,0)
(43,9,0)
(52,21,0)
(9,21,0)
(27,16,0)
(12,20,0)
(37,38,0)
(9,54,0)
(47,41,0)
(51,14,0)
(21,52,0)
(32,31,0)
(31,38,0)
(53,21,0)
(17,16,0)
(15,33,0)
(36,4,0)
(16,2,0)
(35,17,0)
(42,33,0)
(48,43,0)
(43,33,0)
(3,30,0)
(23,20,0)
(34,33,0)
(1,49,0)
(2,16,0)
(28,46,0)
(2,23,0)
(46,42,0)
(23,2,0)
(21,33,0)
(50,34,0)
(7,3,0)
(8,43,0)
(24,42,0)
(31,25,0)
(10,33,0)
(13,46,0)
(25,11,0)
(13,28,1)
(49,38,1)
(22,37,1)
(8,48,1)
(23,0,1)
(23,2,1)
(6,41,1)
(5,38,1)
(40,41,1)
(28,24,1)
(31,20,1)
(31,38,1)
(24,34,1)
(47,5,1)
(2,16,1)
(34,50,1)
(37,26,1)
(42,46,1)
(25,31,1)
(15,45,1)
(31,32,1)
(27,12,1)
(16,17,1)
(50,9,1)
(49,1,1)
(43,33,1)
(41,47,1)
(32,40,1)
(43,20,1)
(9,21,1)
(31,9,1)
(21,33,1)
(20,23,1)
(53,43,1)
(5,49,1)
(33,10,1)
(38,22,1)
(41,38,1)
(48,42,1)
(43,8,1)
(26,42,1)
(46,13,1)
(24,33,1)
(6,26,1)
(1,25,1)
(21,53,1)
(35,27,1)
(45,20,1)
(21,52,1)
(26,45,1)
(34,33,1)
(42,33,1)
(17,35,1)
(10,15,1)
(28,45,2)
(24,42,2)
(21,42,2)
(10,45,2)
(28,42,2)
(43,42,2)
(2,16,2)
(23,0,2)
(15,45,2)
(42,46,2)
(31,41,2)
(41,38,2)
(23,2,2)
(49,41,2)
(5,41,2)
(46,42,2)
(34,42,2)
(22,26,2)
(47,26,2)
(42,33,2)
(32,41,2)
(20,23,2)
(21,33,2)
(13,42,2)
(49,38,2)
(33,45,2)
(25,41,2)
(34,33,2)
(25,31,2)
(31,9,2)
(40,41,2)
(38,26,2)
(16,17,2)
(31,20,2)
(37,26,2)
(13,45,2)
(48,42,2)
(53,42,2)
(42,42,2)
(8,42,2)
(46,45,2)
(9,42,2)
(47,41,2)
(50,42,2)
(42,45,2)
(41,41,2)
(24,45,2)
(9,21,2)
(1,41,2)
(43,20,2)
(31,38,2)
(21,52,2)
(43,33,2)
(41,26,2)
(5,26,2)
-----------------------------------
(0,double *)
(1,i)
(2,ALLOCA(10*sizeof(double)
(3,)
(4,)
(5,i)
(6,RET)
(7,i)
(8,i)
(9,data[i] = (double)
(10,0)
(11,)
(12,data)
(13,2)
(14,)
(15,i)
(16,10*sizeof(double)
(17,sizeof(double)
(18,for(i=0; i<10; i++)
(19,i)
(20,data = (double *)
(21,(double)
(22,0)
(23,(double *)
(24,i)
(25,printDoubleLine(data[i])
(26,GLOBAL_CONST_TRUE)
(27,10)
(28,10)
(29,if(GLOBAL_CONST_TRUE)
(30,)
(31,data[i])
(32,i)
(33,i=0)
(34,i++)
(35,double)
(36,for(i=0; i<(10/2)
(37,i)
(38,i=0)
(39,)
(40,data)
(41,i<10)
(42,i<(10/2)
(43,data[i])
(44,if(GLOBAL_CONST_TRUE)
(45,GLOBAL_CONST_TRUE)
(46,10/2)
(47,10)
(48,data)
(49,i++)
(50,i)
(51,data)
(52,double)
(53,i)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^