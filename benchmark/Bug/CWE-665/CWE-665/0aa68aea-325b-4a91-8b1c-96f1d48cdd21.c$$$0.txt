-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
50,51
50,52
51,52
51,53
52,53
55,56
56,57
56,58
57,58
58,59
58,60
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
75,76
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,49,53,54,59,61,66,67,70,71,74,79,82,84
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
51,52
51,53
64,65
64,66
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalFive==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(16,36,0)
(28,23,0)
(35,9,0)
(39,15,0)
(11,43,0)
(24,15,0)
(37,8,0)
(5,37,0)
(34,36,0)
(33,23,0)
(26,12,0)
(12,24,0)
(15,24,0)
(23,28,0)
(29,0,0)
(17,12,0)
(14,6,0)
(4,0,0)
(36,16,0)
(12,17,0)
(36,18,0)
(24,9,0)
(44,0,0)
(40,9,0)
(21,29,0)
(3,7,0)
(12,0,0)
(28,13,0)
(20,9,0)
(22,31,0)
(38,37,0)
(42,31,0)
(27,6,0)
(6,0,0)
(18,36,0)
(30,43,0)
(43,24,0)
(18,15,0)
(15,18,0)
(17,25,0)
(10,24,0)
(2,9,0)
(1,7,0)
(15,39,0)
(32,12,0)
(19,16,0)
(41,6,1)
(1,28,1)
(32,26,1)
(27,0,1)
(12,0,1)
(12,32,1)
(26,6,1)
(34,10,1)
(3,1,1)
(7,3,1)
(15,39,1)
(43,24,1)
(0,44,1)
(11,24,1)
(21,17,1)
(41,31,1)
(15,18,1)
(27,29,1)
(22,7,1)
(19,34,1)
(31,42,1)
(44,4,1)
(6,0,1)
(14,27,1)
(16,19,1)
(17,12,1)
(23,33,1)
(12,24,1)
(29,0,1)
(18,36,1)
(4,31,1)
(33,43,1)
(1,43,1)
(42,22,1)
(6,14,1)
(29,21,1)
(36,16,1)
(24,15,1)
(30,11,1)
(28,23,1)
(43,30,1)
(4,31,2)
(14,31,2)
(15,18,2)
(12,6,2)
(17,12,2)
(18,36,2)
(21,6,2)
(27,31,2)
(6,6,2)
(6,0,2)
(43,24,2)
(36,16,2)
(44,31,2)
(28,23,2)
(28,43,2)
(0,31,2)
(33,43,2)
(26,6,2)
(6,31,2)
(17,6,2)
(23,43,2)
(14,6,2)
(29,0,2)
(27,6,2)
(29,6,2)
(12,24,2)
(32,6,2)
(12,0,2)
(15,39,2)
(24,15,2)
-----------------------------------
(0,i=0)
(1,globalFive)
(2,if (data == NULL)
(3,5)
(4,i)
(5,for(i=0; i<10; i++)
(6,i<10)
(7,globalFive==5)
(8,)
(9,)
(10,data)
(11,data)
(12,data[i])
(13,)
(14,10)
(15,(int *)
(16,sizeof(int)
(17,printIntLine(data[i])
(18,malloc(10*sizeof(int)
(19,int)
(20,if(globalFive==5)
(21,i)
(22,globalFive)
(23,-1)
(24,data = (int *)
(25,)
(26,data)
(27,i)
(28,exit(-1)
(29,i++)
(30,NULL)
(31,globalFive==5)
(32,i)
(33,1)
(34,10)
(35,data)
(36,10*sizeof(int)
(37,)
(38,i)
(39,int *)
(40,if(globalFive==5)
(41,RET)
(42,5)
(43,data == NULL)
(44,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^