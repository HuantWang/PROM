-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_01_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i].intOne = i;
            data[i].intTwo = i;
        }
    }
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
49,50
49,51
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
62,63
65,66
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
73,74
76,77
78,79
78,80
79,80
80,81
80,82
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
97,98
97,99
98,99
99,100
99,101
100,101
102,103
102,104
103,104
103,105
104,105
106,107
109,110
110,111
110,112
111,112
113,114
113,115
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,44,47,50,51,54,61,63,64,66,72,74,75,77,81,83,88,89,92,93,96,101,105,107,108,112,116,118,119
-----computeFrom-----
14,15
14,16
26,27
26,28
41,42
41,43
45,46
45,47
49,50
49,51
57,58
57,59
68,69
68,70
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_01_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_01_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_01_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

{        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i].intOne = i;            data[i].intTwo = i;        }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(26,16,0)
(38,58,0)
(57,8,0)
(13,30,0)
(63,44,0)
(18,63,0)
(24,21,0)
(12,58,0)
(50,55,0)
(23,43,0)
(20,57,0)
(17,40,0)
(43,23,0)
(61,15,0)
(62,25,0)
(63,58,0)
(58,21,0)
(40,35,0)
(36,39,0)
(39,16,0)
(10,54,0)
(52,15,0)
(55,25,0)
(43,4,0)
(38,15,0)
(8,57,0)
(58,27,0)
(19,23,0)
(28,24,0)
(4,43,0)
(63,62,0)
(17,10,0)
(59,62,0)
(25,44,0)
(17,52,0)
(56,55,0)
(30,15,0)
(7,44,0)
(33,61,0)
(55,38,0)
(56,54,0)
(3,15,0)
(27,58,0)
(6,44,0)
(14,63,0)
(34,16,0)
(53,8,0)
(47,15,0)
(52,17,0)
(25,35,0)
(22,52,0)
(48,60,0)
(8,58,0)
(32,17,0)
(40,44,0)
(60,21,0)
(38,55,0)
(4,27,0)
(0,38,0)
(55,56,0)
(45,40,0)
(39,44,0)
(27,4,0)
(1,52,0)
(62,63,0)
(16,39,0)
(11,43,0)
(57,40,0)
(27,9,0)
(41,25,0)
(52,58,0)
(42,44,0)
(5,60,0)
(10,17,0)
(2,21,0)
(51,24,0)
(29,8,0)
(46,6,0)
(49,38,0)
(8,44,0)
(31,30,0)
(9,27,0)
(45,57,1)
(52,58,1)
(27,9,1)
(4,43,1)
(56,55,1)
(53,29,1)
(39,16,1)
(7,42,1)
(49,0,1)
(22,1,1)
(38,58,1)
(57,8,1)
(52,22,1)
(42,58,1)
(20,8,1)
(33,10,1)
(55,38,1)
(61,15,1)
(52,15,1)
(36,44,1)
(40,45,1)
(36,6,1)
(13,31,1)
(63,58,1)
(11,12,1)
(59,63,1)
(16,34,1)
(3,47,1)
(43,23,1)
(1,56,1)
(17,32,1)
(29,25,1)
(63,44,1)
(30,13,1)
(50,38,1)
(37,30,1)
(6,46,1)
(18,14,1)
(34,26,1)
(17,52,1)
(47,39,1)
(6,44,1)
(61,33,1)
(38,15,1)
(55,25,1)
(62,63,1)
(10,17,1)
(46,40,1)
(25,41,1)
(26,36,1)
(27,4,1)
(38,49,1)
(25,44,1)
(8,44,1)
(19,11,1)
(23,19,1)
(14,39,1)
(39,44,1)
(55,50,1)
(32,52,1)
(8,58,1)
(40,44,1)
(15,3,1)
(31,61,1)
(0,30,1)
(57,20,1)
(41,62,1)
(62,59,1)
(31,15,1)
(63,18,1)
(30,15,1)
(17,40,1)
(44,7,1)
(8,53,1)
(58,27,1)
(36,39,2)
(8,44,2)
(16,39,2)
(17,52,2)
(61,30,2)
(40,44,2)
(38,15,2)
(56,55,2)
(59,39,2)
(55,38,2)
(6,44,2)
(55,25,2)
(30,30,2)
(14,39,2)
(22,30,2)
(17,30,2)
(26,39,2)
(29,39,2)
(56,30,2)
(17,40,2)
(45,39,2)
(10,30,2)
(63,39,2)
(8,58,2)
(1,30,2)
(53,39,2)
(39,44,2)
(13,30,2)
(63,44,2)
(38,58,2)
(50,30,2)
(20,39,2)
(62,63,2)
(39,16,2)
(58,27,2)
(52,15,2)
(25,44,2)
(63,58,2)
(25,39,2)
(27,4,2)
(34,39,2)
(52,58,2)
(33,30,2)
(40,39,2)
(30,15,2)
(8,39,2)
(0,30,2)
(49,30,2)
(6,39,2)
(52,30,2)
(38,30,2)
(57,39,2)
(61,15,2)
(4,43,2)
(32,30,2)
(41,39,2)
(43,23,2)
(55,30,2)
(62,39,2)
(27,9,2)
(31,30,2)
(57,8,2)
(46,39,2)
(39,39,2)
(18,39,2)
(10,17,2)
-----------------------------------
(0,data)
(1,data)
(2,data)
(3,0)
(4,ALLOCA(10*sizeof(twoIntsStruct)
(5,i)
(6,i++)
(7,0)
(8,data[i])
(9,twoIntsStruct *)
(10,printIntLine(data[i].intTwo)
(11,10)
(12,data)
(13,10)
(14,data)
(15,i=0)
(16,10/2)
(17,data[i].intTwo)
(18,i)
(19,twoIntsStruct)
(20,intTwo)
(21,)
(22,i)
(23,sizeof(twoIntsStruct)
(24,)
(25,data[i].intOne = i)
(26,10)
(27,(twoIntsStruct *)
(28,for(i=0; i<10; i++)
(29,data)
(30,i<10)
(31,i)
(32,intTwo)
(33,i)
(34,2)
(35,)
(36,i)
(37,RET)
(38,data[i])
(39,i<(10/2)
(40,data[i].intTwo = i)
(41,i)
(42,i)
(43,10*sizeof(twoIntsStruct)
(44,i=0)
(45,i)
(46,i)
(47,i)
(48,for(i=0; i<(10/2)
(49,i)
(50,intOne)
(51,i)
(52,data[i])
(53,i)
(54,)
(55,data[i].intOne)
(56,printIntLine(data[i].intOne)
(57,data[i].intTwo)
(58,data = (twoIntsStruct *)
(59,intOne)
(60,)
(61,i++)
(62,data[i].intOne)
(63,data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^