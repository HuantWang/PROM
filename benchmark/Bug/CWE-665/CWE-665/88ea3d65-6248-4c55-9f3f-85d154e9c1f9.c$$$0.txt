-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
25,26
26,27
26,28
28,29
28,30
31,32
31,33
31,34
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
53,55
54,55
56,57
57,58
57,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
75,76
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,9,11,15,16,20,23,27,29,30,34,37,39,44,47,49,52,55,58,59,63,65,70,72,76,78,80,84,86,90,92,97,98
-----computeFrom-----
13,14
13,15
18,19
18,20
32,33
32,34
42,43
42,44
53,54
53,55
61,62
61,63
-----guardedBy-----
39,80
34,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_01_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_01_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(43,34,0)
(13,23,0)
(34,37,0)
(29,21,0)
(6,16,0)
(30,20,0)
(34,1,0)
(23,37,0)
(34,43,0)
(16,43,0)
(20,17,0)
(2,27,0)
(17,27,0)
(33,43,0)
(20,11,0)
(24,42,0)
(1,34,0)
(10,32,0)
(21,27,0)
(12,8,0)
(7,32,0)
(23,13,0)
(10,3,0)
(16,4,0)
(36,17,0)
(25,2,0)
(37,23,0)
(0,2,0)
(11,20,0)
(33,4,0)
(15,13,0)
(40,11,0)
(26,27,0)
(5,43,0)
(32,10,0)
(35,21,0)
(23,17,0)
(14,42,0)
(19,43,0)
(5,4,0)
(22,4,0)
(38,33,0)
(8,39,0)
(41,23,0)
(28,5,0)
(42,43,0)
(37,34,0)
(43,4,0)
(31,17,0)
(17,31,0)
(18,5,0)
(23,17,1)
(9,16,1)
(10,32,1)
(19,20,1)
(6,33,1)
(21,29,1)
(42,43,1)
(20,17,1)
(23,13,1)
(31,36,1)
(30,17,1)
(17,31,1)
(7,42,1)
(33,38,1)
(34,1,1)
(16,6,1)
(9,8,1)
(36,21,1)
(5,43,1)
(33,43,1)
(8,12,1)
(41,19,1)
(5,28,1)
(15,41,1)
(37,23,1)
(42,24,1)
(13,15,1)
(16,43,1)
(38,5,1)
(28,18,1)
(34,37,1)
(12,20,1)
(20,11,1)
(43,34,1)
(11,40,1)
(29,35,1)
(40,30,1)
(18,42,1)
(32,7,1)
(24,14,1)
(14,43,1)
(18,10,1)
(5,43,2)
(43,34,2)
(8,20,2)
(38,20,2)
(33,43,2)
(6,20,2)
(23,20,2)
(23,17,2)
(10,42,2)
(20,17,2)
(37,20,2)
(14,20,2)
(42,43,2)
(23,13,2)
(33,20,2)
(34,1,2)
(34,20,2)
(5,20,2)
(15,20,2)
(41,20,2)
(16,20,2)
(32,42,2)
(13,20,2)
(20,11,2)
(17,31,2)
(16,43,2)
(28,20,2)
(10,32,2)
(37,23,2)
(19,20,2)
(12,20,2)
(43,20,2)
(42,20,2)
(34,37,2)
(18,20,2)
(24,20,2)
(7,42,2)
-----------------------------------
(0,if (data > wcslen(HELLO_STRING)
(1,wchar_t *)
(2,)
(3,)
(4,)
(5,wcscpy(myString, HELLO_STRING)
(6,myString)
(7,1)
(8,printLine("Input is less than the length of the source string")
(9,RET)
(10,exit(-1)
(11,wcslen(HELLO_STRING)
(12,"Input is less than the length of the source string")
(13,sizeof(wchar_t)
(14,myString)
(15,wchar_t)
(16,free(myString)
(17,data = rand()
(18,myString)
(19,myString)
(20,data > wcslen(HELLO_STRING)
(21,data = 0)
(22,if (myString == NULL)
(23,data*sizeof(wchar_t)
(24,NULL)
(25,myString)
(26,data)
(27,)
(28,HELLO_STRING)
(29,0)
(30,data)
(31,rand()
(32,-1)
(33,printWLine(myString)
(34,(wchar_t *)
(35,data)
(36,data)
(37,malloc(data*sizeof(wchar_t)
(38,myString)
(39,)
(40,HELLO_STRING)
(41,data)
(42,myString == NULL)
(43,myString = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^