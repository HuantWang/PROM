-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_09_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,29,31,34,39,41,46,47,50,51,54,59,63,65,66,70,74,76,77
-----computeFrom-----
22,23
22,24
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_09_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_09_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(3,18,0)
(9,34,0)
(16,17,0)
(31,4,0)
(26,17,0)
(11,33,0)
(24,4,0)
(6,7,0)
(4,9,0)
(3,24,0)
(28,9,0)
(2,19,0)
(7,17,0)
(8,18,0)
(23,4,0)
(10,16,0)
(16,9,0)
(4,17,0)
(12,19,0)
(30,34,0)
(35,8,0)
(20,11,0)
(19,17,0)
(15,34,0)
(13,34,0)
(0,34,0)
(14,24,0)
(25,9,0)
(4,24,0)
(29,17,0)
(1,11,0)
(21,16,0)
(5,35,0)
(8,35,0)
(35,16,0)
(16,35,0)
(24,3,0)
(22,27,1)
(21,10,1)
(24,14,1)
(16,9,1)
(32,9,1)
(3,24,1)
(35,16,1)
(4,9,1)
(9,25,1)
(4,17,1)
(35,5,1)
(5,16,1)
(29,26,1)
(10,19,1)
(2,17,1)
(6,3,1)
(23,8,1)
(16,17,1)
(17,29,1)
(7,6,1)
(24,4,1)
(8,35,1)
(19,17,1)
(14,4,1)
(4,31,1)
(31,23,1)
(2,7,1)
(7,17,1)
(22,19,1)
(26,27,1)
(19,12,1)
(25,28,1)
(12,2,1)
(27,32,1)
(16,21,1)
(24,19,2)
(4,17,2)
(6,19,2)
(8,35,2)
(14,19,2)
(24,4,2)
(16,17,2)
(31,19,2)
(2,27,2)
(35,19,2)
(4,19,2)
(16,19,2)
(26,27,2)
(29,27,2)
(5,19,2)
(35,16,2)
(4,9,2)
(10,19,2)
(19,17,2)
(2,19,2)
(7,19,2)
(19,27,2)
(17,27,2)
(7,17,2)
(16,9,2)
(8,19,2)
(12,27,2)
(12,19,2)
(21,19,2)
(23,19,2)
(19,19,2)
(3,24,2)
(3,19,2)
-----------------------------------
(0,data)
(1,for(i=0; i<10; i++)
(2,i)
(3,printIntLine(data[i].intTwo)
(4,data[i])
(5,intOne)
(6,i)
(7,i++)
(8,printIntLine(data[i].intOne)
(9,data = dataUninitArray)
(10,data)
(11,)
(12,10)
(13,dataUninitArray)
(14,intTwo)
(15,if(GLOBAL_CONST_TRUE)
(16,data[i])
(17,i=0)
(18,)
(19,i<10)
(20,i)
(21,i)
(22,RET)
(23,data)
(24,data[i].intTwo)
(25,dataUninitArray)
(26,i)
(27,GLOBAL_CONST_TRUE)
(28,data)
(29,0)
(30,if(GLOBAL_CONST_TRUE)
(31,i)
(32,GLOBAL_CONST_TRUE)
(33,)
(34,)
(35,data[i].intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^