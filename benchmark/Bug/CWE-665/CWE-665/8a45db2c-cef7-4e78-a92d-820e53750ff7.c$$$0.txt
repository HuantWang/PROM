-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
27,28
29,30
29,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
50,51
50,52
50,53
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,9,11,15,16,20,23,28,30,33,37,39,42,46,48,49,53,56,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
13,14
13,15
18,19
18,20
51,52
51,53
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
58,99
53,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_31_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_31_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
{        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(33,38,0)
(24,44,0)
(45,33,0)
(30,12,0)
(51,6,0)
(38,44,0)
(49,34,0)
(27,38,0)
(12,51,0)
(41,20,0)
(7,15,0)
(15,43,0)
(1,5,0)
(28,32,0)
(50,29,0)
(38,12,0)
(22,36,0)
(39,28,0)
(47,36,0)
(6,2,0)
(10,14,0)
(48,36,0)
(40,5,0)
(43,15,0)
(11,6,0)
(32,14,0)
(28,48,0)
(12,30,0)
(12,38,0)
(23,27,0)
(33,44,0)
(6,51,0)
(36,22,0)
(51,12,0)
(20,44,0)
(25,32,0)
(26,52,0)
(37,48,0)
(18,43,0)
(48,32,0)
(29,38,0)
(36,14,0)
(21,29,0)
(3,48,0)
(19,14,0)
(2,6,0)
(35,13,0)
(0,10,0)
(8,28,0)
(31,10,0)
(42,38,0)
(4,2,0)
(5,32,0)
(35,34,0)
(43,28,0)
(6,28,0)
(27,44,0)
(20,38,0)
(34,35,0)
(16,26,0)
(17,32,0)
(46,27,0)
(51,6,1)
(35,34,1)
(41,27,1)
(33,38,1)
(36,22,1)
(9,33,1)
(23,29,1)
(33,45,1)
(10,31,1)
(16,43,1)
(38,12,1)
(37,3,1)
(6,2,1)
(28,8,1)
(6,28,1)
(12,30,1)
(49,29,1)
(20,41,1)
(2,4,1)
(4,11,1)
(18,28,1)
(45,20,1)
(43,28,1)
(8,39,1)
(9,26,1)
(47,10,1)
(22,47,1)
(43,15,1)
(26,16,1)
(23,35,1)
(27,46,1)
(3,36,1)
(39,48,1)
(11,42,1)
(29,21,1)
(15,7,1)
(42,43,1)
(48,37,1)
(31,0,1)
(46,23,1)
(50,38,1)
(7,18,1)
(28,48,1)
(21,50,1)
(34,49,1)
(48,36,1)
(27,38,1)
(12,51,1)
(29,38,1)
(20,38,1)
(27,43,2)
(20,38,2)
(51,6,2)
(2,43,2)
(35,34,2)
(29,38,2)
(46,43,2)
(29,43,2)
(33,43,2)
(48,36,2)
(41,43,2)
(16,43,2)
(28,48,2)
(38,12,2)
(33,38,2)
(20,43,2)
(35,29,2)
(43,28,2)
(51,43,2)
(23,43,2)
(42,43,2)
(43,15,2)
(12,30,2)
(6,2,2)
(6,28,2)
(36,22,2)
(26,43,2)
(49,29,2)
(38,43,2)
(12,43,2)
(50,43,2)
(11,43,2)
(45,43,2)
(6,43,2)
(34,29,2)
(4,43,2)
(21,43,2)
(27,38,2)
(12,51,2)
-----------------------------------
(0,data)
(1,if (data > wcslen(HELLO_STRING)
(2,sizeof(wchar_t)
(3,dataCopy)
(4,wchar_t)
(5,)
(6,data*sizeof(wchar_t)
(7,HELLO_STRING)
(8,dataCopy)
(9,RET)
(10,data = 0)
(11,data)
(12,(wchar_t *)
(13,)
(14,)
(15,wcslen(HELLO_STRING)
(16,"Input is less than the length of the source string")
(17,data)
(18,data)
(19,data)
(20,printWLine(myString)
(21,NULL)
(22,rand()
(23,myString)
(24,if (myString == NULL)
(25,dataCopy)
(26,printLine("Input is less than the length of the source string")
(27,wcscpy(myString, HELLO_STRING)
(28,data = dataCopy)
(29,myString == NULL)
(30,wchar_t *)
(31,0)
(32,)
(33,free(myString)
(34,-1)
(35,exit(-1)
(36,data = rand()
(37,data)
(38,myString = (wchar_t *)
(39,data)
(40,myString)
(41,myString)
(42,myString)
(43,data > wcslen(HELLO_STRING)
(44,)
(45,myString)
(46,HELLO_STRING)
(47,data)
(48,dataCopy = data)
(49,1)
(50,myString)
(51,malloc(data*sizeof(wchar_t)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^