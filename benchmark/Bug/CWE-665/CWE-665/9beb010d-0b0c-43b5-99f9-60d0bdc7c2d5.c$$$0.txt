-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_12_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = (double)i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
84,85
85,86
85,87
86,87
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
101,102
102,103
104,105
105,106
106,107
106,108
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
116,117
118,119
118,120
118,121
119,120
120,121
122,123
123,124
123,125
124,125
125,126
125,127
127,128
129,130
129,131
129,132
129,133
130,131
131,132
131,133
132,133
135,136
135,137
136,137
139,140
140,141
142,143
143,144
144,145
144,146
145,146
147,148
147,149
148,149
150,151
152,153
152,154
153,154
153,155
154,155
155,156
155,157
157,158
159,160
159,161
159,162
159,163
160,161
161,162
161,163
162,163
165,166
165,167
166,167
169,170
170,171
172,173
173,174
174,175
174,176
175,176
175,177
176,177
178,179
180,181
180,182
181,182
181,183
184,185
186,187
186,188
187,188
188,189
188,190
190,191
192,193
192,194
192,195
192,196
193,194
194,195
194,196
195,196
198,199
198,200
199,200
202,203
203,204
205,206
206,207
207,208
207,209
208,209
210,211
210,212
211,212
213,214
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,58,59,62,65,66,69,75,77,80,81,83,88,90,95,96,99,100,103,109,111,114,115,117,121,126,128,133,134,137,138,141,146,149,151,156,158,163,164,167,168,171,177,179,182,183,185,189,191,196,197,200,201,204,209,212,214
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
93,94
93,95
97,98
97,99
106,107
106,108
131,132
131,133
135,136
135,137
161,162
161,163
165,166
165,167
174,175
174,176
194,195
194,196
198,199
198,200
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_12_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_12_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(41,90,0)
(50,11,0)
(5,82,0)
(9,103,0)
(112,11,0)
(111,82,0)
(2,68,0)
(32,3,0)
(40,60,0)
(100,53,0)
(96,81,0)
(31,75,0)
(5,101,0)
(9,104,0)
(78,92,0)
(104,9,0)
(44,112,0)
(112,44,0)
(57,81,0)
(0,8,0)
(16,86,0)
(11,86,0)
(77,2,0)
(103,9,0)
(12,50,0)
(113,116,0)
(98,112,0)
(102,107,0)
(31,104,0)
(104,93,0)
(102,44,0)
(105,81,0)
(4,48,0)
(109,49,0)
(54,31,0)
(59,68,0)
(3,75,0)
(101,33,0)
(31,11,0)
(48,79,0)
(108,9,0)
(55,23,0)
(48,4,0)
(95,4,0)
(115,109,0)
(1,13,0)
(94,15,0)
(72,26,0)
(26,82,0)
(5,90,0)
(15,75,0)
(26,116,0)
(30,116,0)
(4,68,0)
(7,69,0)
(17,68,0)
(65,76,0)
(36,4,0)
(34,88,0)
(110,80,0)
(43,41,0)
(23,90,0)
(69,60,0)
(20,11,0)
(21,40,0)
(80,68,0)
(71,80,0)
(83,84,0)
(37,76,0)
(53,1,0)
(63,117,0)
(118,8,0)
(56,69,0)
(82,61,0)
(111,19,0)
(19,111,0)
(112,98,0)
(87,15,0)
(76,62,0)
(117,116,0)
(35,86,0)
(38,41,0)
(53,82,0)
(113,51,0)
(42,116,0)
(73,92,0)
(82,111,0)
(51,113,0)
(53,48,0)
(70,75,0)
(91,53,0)
(9,75,0)
(4,36,0)
(99,102,0)
(64,113,0)
(111,116,0)
(6,5,0)
(14,115,0)
(24,107,0)
(5,104,0)
(88,11,0)
(5,48,0)
(92,28,0)
(53,81,0)
(97,86,0)
(66,40,0)
(101,5,0)
(26,11,0)
(107,102,0)
(46,96,0)
(5,11,0)
(84,114,0)
(10,84,0)
(27,5,0)
(25,88,0)
(8,81,0)
(1,53,0)
(88,68,0)
(39,26,0)
(106,90,0)
(88,48,0)
(85,86,0)
(29,50,0)
(11,112,0)
(58,51,0)
(44,102,0)
(74,31,0)
(67,111,0)
(45,90,0)
(47,75,0)
(52,51,0)
(53,11,0)
(109,115,0)
(8,81,1)
(4,36,1)
(46,1,1)
(89,50,1)
(9,75,1)
(15,75,1)
(0,81,1)
(6,27,1)
(113,116,1)
(81,105,1)
(117,116,1)
(105,57,1)
(64,117,1)
(112,44,1)
(32,104,1)
(87,3,1)
(106,45,1)
(52,64,1)
(53,91,1)
(91,100,1)
(26,39,1)
(29,12,1)
(31,11,1)
(87,75,1)
(3,75,1)
(101,5,1)
(5,11,1)
(26,11,1)
(12,11,1)
(102,107,1)
(111,19,1)
(2,68,1)
(75,70,1)
(18,41,1)
(88,25,1)
(9,108,1)
(108,31,1)
(116,42,1)
(5,90,1)
(109,115,1)
(42,30,1)
(53,81,1)
(8,118,1)
(34,80,1)
(54,74,1)
(39,72,1)
(88,68,1)
(51,58,1)
(50,29,1)
(117,63,1)
(111,67,1)
(48,4,1)
(30,89,1)
(22,80,1)
(99,20,1)
(5,48,1)
(88,11,1)
(77,48,1)
(27,41,1)
(38,90,1)
(50,11,1)
(4,95,1)
(43,38,1)
(100,8,1)
(53,82,1)
(25,34,1)
(53,11,1)
(111,116,1)
(80,110,1)
(23,90,1)
(58,52,1)
(24,99,1)
(2,77,1)
(26,116,1)
(14,50,1)
(63,82,1)
(41,43,1)
(5,82,1)
(94,87,1)
(23,55,1)
(5,104,1)
(96,46,1)
(55,101,1)
(115,14,1)
(1,53,1)
(72,113,1)
(110,71,1)
(71,2,1)
(11,112,1)
(71,68,1)
(4,68,1)
(118,0,1)
(59,17,1)
(80,68,1)
(70,47,1)
(3,32,1)
(15,94,1)
(113,51,1)
(44,102,1)
(9,103,1)
(53,48,1)
(47,22,1)
(0,96,1)
(31,75,1)
(5,6,1)
(68,59,1)
(90,106,1)
(38,23,1)
(31,54,1)
(112,98,1)
(57,22,1)
(45,15,1)
(18,8,1)
(89,109,1)
(67,26,1)
(95,88,1)
(96,81,1)
(22,113,1)
(17,89,1)
(74,15,1)
(107,24,1)
(82,111,1)
(104,9,1)
(41,90,1)
(64,116,1)
(77,80,2)
(5,104,2)
(3,15,2)
(53,11,2)
(4,36,2)
(5,41,2)
(80,89,2)
(68,89,2)
(41,22,2)
(59,89,2)
(15,22,2)
(8,22,2)
(112,98,2)
(106,22,2)
(32,15,2)
(95,80,2)
(105,22,2)
(43,41,2)
(51,113,2)
(113,89,2)
(74,15,2)
(8,8,2)
(44,102,2)
(118,22,2)
(15,75,2)
(87,15,2)
(80,68,2)
(9,15,2)
(41,90,2)
(14,50,2)
(109,50,2)
(46,8,2)
(41,41,2)
(27,41,2)
(2,68,2)
(48,4,2)
(101,5,2)
(101,41,2)
(113,116,2)
(90,22,2)
(96,8,2)
(54,15,2)
(25,80,2)
(31,11,2)
(116,89,2)
(34,80,2)
(5,11,2)
(52,113,2)
(4,80,2)
(94,22,2)
(1,53,2)
(71,89,2)
(91,8,2)
(15,15,2)
(31,75,2)
(82,113,2)
(88,68,2)
(39,113,2)
(53,8,2)
(26,113,2)
(88,80,2)
(64,113,2)
(100,8,2)
(58,89,2)
(58,113,2)
(117,116,2)
(5,48,2)
(94,15,2)
(2,80,2)
(80,80,2)
(102,107,2)
(82,111,2)
(108,15,2)
(45,22,2)
(104,15,2)
(52,89,2)
(55,41,2)
(81,22,2)
(53,81,2)
(72,113,2)
(117,113,2)
(6,41,2)
(42,89,2)
(67,113,2)
(113,51,2)
(9,75,2)
(8,81,2)
(4,68,2)
(111,116,2)
(47,22,2)
(23,41,2)
(111,113,2)
(110,80,2)
(96,81,2)
(53,48,2)
(0,8,2)
(23,90,2)
(111,19,2)
(31,15,2)
(43,22,2)
(110,89,2)
(26,116,2)
(30,89,2)
(63,113,2)
(5,90,2)
(17,89,2)
(104,9,2)
(70,22,2)
(3,75,2)
(112,44,2)
(87,22,2)
(50,11,2)
(1,8,2)
(38,22,2)
(113,113,2)
(64,89,2)
(11,112,2)
(9,103,2)
(118,8,2)
(109,115,2)
(51,89,2)
(26,11,2)
(53,82,2)
(38,41,2)
(0,22,2)
(75,22,2)
(48,80,2)
(71,80,2)
(57,22,2)
(115,50,2)
(5,82,2)
(88,11,2)
-----------------------------------
(0,i)
(1,printDoubleLine(data[i])
(2,i++)
(3,i++)
(4,(double)
(5,data[i])
(6,i)
(7,for(i=0; i<10; i++)
(8,i<10)
(9,(double)
(10,i)
(11,data = (double *)
(12,data)
(13,)
(14,1)
(15,i<10)
(16,if (data == NULL)
(17,i)
(18,RET)
(19,double)
(20,data)
(21,for(i=0; i<10; i++)
(22,globalReturnsTrueOrFalse()
(23,i++)
(24,double)
(25,i)
(26,data[i])
(27,data)
(28,)
(29,NULL)
(30,i)
(31,data[i])
(32,i)
(33,)
(34,data)
(35,data)
(36,double)
(37,i)
(38,i)
(39,i)
(40,)
(41,i<10)
(42,0)
(43,10)
(44,malloc(10*sizeof(double)
(45,i)
(46,i)
(47,i)
(48,data[i] = (double)
(49,)
(50,data == NULL)
(51,10/2)
(52,10)
(53,data[i])
(54,i)
(55,i)
(56,i)
(57,i)
(58,2)
(59,0)
(60,)
(61,)
(62,)
(63,i)
(64,i)
(65,for(i=0; i<10; i++)
(66,i)
(67,i)
(68,i=0)
(69,)
(70,0)
(71,i)
(72,data)
(73,i)
(74,data)
(75,i=0)
(76,)
(77,i)
(78,for(i=0; i<(10/2)
(79,)
(80,i<10)
(81,i=0)
(82,data[i] = (double)
(83,for(i=0; i<10; i++)
(84,)
(85,if(globalReturnsTrueOrFalse()
(86,)
(87,i)
(88,data[i])
(89,globalReturnsTrueOrFalse()
(90,i=0)
(91,i)
(92,)
(93,)
(94,10)
(95,i)
(96,i++)
(97,if(globalReturnsTrueOrFalse()
(98,double *)
(99,10)
(100,data)
(101,printDoubleLine(data[i])
(102,10*sizeof(double)
(103,double)
(104,data[i] = (double)
(105,0)
(106,0)
(107,sizeof(double)
(108,i)
(109,exit(-1)
(110,10)
(111,(double)
(112,(double *)
(113,i<(10/2)
(114,)
(115,-1)
(116,i=0)
(117,i++)
(118,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^