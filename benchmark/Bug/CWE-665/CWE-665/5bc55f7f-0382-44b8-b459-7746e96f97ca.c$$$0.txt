-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_12_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
49,50
50,51
50,52
51,52
52,53
52,54
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
66,67
67,68
69,70
70,71
71,72
71,73
72,73
72,74
73,74
75,76
77,78
79,80
79,81
79,82
80,81
81,82
83,84
84,85
84,86
85,86
86,87
86,88
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
113,114
113,115
114,115
114,116
115,116
116,117
116,118
118,119
120,121
120,122
120,123
120,124
121,122
122,123
122,124
123,124
126,127
126,128
127,128
130,131
131,132
133,134
134,135
135,136
135,137
136,137
136,138
137,138
139,140
141,142
143,144
143,145
144,145
145,146
145,147
147,148
149,150
149,151
149,152
149,153
150,151
151,152
151,153
152,153
155,156
155,157
156,157
159,160
160,161
162,163
163,164
164,165
164,166
165,166
167,168
167,169
168,169
170,171
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,53,55,60,61,64,65,68,74,76,78,82,87,89,94,95,98,99,102,107,110,112,117,119,124,125,128,129,132,138,140,142,146,148,153,154,157,158,161,166,169,171
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
58,59
58,60
62,63
62,64
71,72
71,73
92,93
92,94
96,97
96,98
122,123
122,124
126,127
126,128
135,136
135,137
151,152
151,153
155,156
155,157
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_12_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_12_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(79,49,0)
(35,73,0)
(1,85,0)
(71,28,0)
(43,87,0)
(6,45,0)
(87,23,0)
(47,52,0)
(73,67,0)
(61,47,0)
(15,72,0)
(65,24,0)
(90,47,0)
(88,67,0)
(2,29,0)
(82,88,0)
(32,67,0)
(54,45,0)
(9,88,0)
(56,21,0)
(81,80,0)
(81,47,0)
(70,22,0)
(37,22,0)
(9,47,0)
(81,28,0)
(69,72,0)
(11,49,0)
(34,52,0)
(61,20,0)
(29,80,0)
(75,63,0)
(0,28,0)
(66,52,0)
(19,71,0)
(62,56,0)
(86,70,0)
(4,40,0)
(87,43,0)
(10,52,0)
(63,22,0)
(76,70,0)
(46,54,0)
(53,27,0)
(18,9,0)
(9,67,0)
(13,64,0)
(59,9,0)
(42,43,0)
(27,28,0)
(57,28,0)
(30,45,0)
(7,83,0)
(29,49,0)
(83,67,0)
(14,33,0)
(26,70,0)
(16,21,0)
(30,61,0)
(86,5,0)
(29,1,0)
(55,80,0)
(8,22,0)
(29,88,0)
(25,33,0)
(88,31,0)
(33,49,0)
(20,61,0)
(47,61,0)
(70,86,0)
(64,44,0)
(41,16,0)
(89,16,0)
(50,81,0)
(80,74,0)
(29,47,0)
(45,30,0)
(61,30,0)
(48,40,0)
(3,73,0)
(38,81,0)
(84,67,0)
(72,47,0)
(24,51,0)
(70,88,0)
(17,79,0)
(60,24,0)
(39,64,0)
(36,49,0)
(80,28,0)
(40,22,0)
(58,27,0)
(92,56,0)
(91,29,0)
(45,54,0)
(70,47,0)
(12,52,0)
(1,29,0)
(14,25,1)
(79,17,1)
(76,40,1)
(9,59,1)
(47,61,1)
(19,80,1)
(27,28,1)
(45,54,1)
(22,8,1)
(70,47,1)
(35,67,1)
(80,55,1)
(7,88,1)
(36,27,1)
(79,49,1)
(29,47,1)
(68,33,1)
(72,47,1)
(78,72,1)
(35,83,1)
(61,20,1)
(25,79,1)
(33,14,1)
(3,35,1)
(71,28,1)
(28,0,1)
(26,76,1)
(71,19,1)
(70,26,1)
(78,87,1)
(67,84,1)
(18,73,1)
(40,48,1)
(70,22,1)
(58,71,1)
(6,90,1)
(80,28,1)
(91,2,1)
(57,77,1)
(77,78,1)
(1,29,1)
(81,47,1)
(84,32,1)
(75,86,1)
(37,77,1)
(69,15,1)
(40,22,1)
(81,28,1)
(46,6,1)
(87,43,1)
(88,82,1)
(30,45,1)
(25,49,1)
(17,1,1)
(73,67,1)
(50,38,1)
(83,67,1)
(53,58,1)
(32,78,1)
(2,33,1)
(63,75,1)
(81,50,1)
(77,73,1)
(38,27,1)
(73,3,1)
(0,57,1)
(11,36,1)
(8,37,1)
(4,22,1)
(86,70,1)
(9,67,1)
(55,81,1)
(29,49,1)
(42,72,1)
(48,4,1)
(88,67,1)
(43,42,1)
(70,88,1)
(82,9,1)
(54,46,1)
(9,47,1)
(27,53,1)
(15,47,1)
(33,49,1)
(83,7,1)
(29,88,1)
(4,63,1)
(63,22,1)
(58,28,1)
(29,80,1)
(29,91,1)
(68,40,1)
(49,11,1)
(59,18,1)
(61,30,1)
(72,69,1)
(79,49,2)
(81,27,2)
(4,40,2)
(32,78,2)
(80,27,2)
(2,33,2)
(83,67,2)
(22,77,2)
(29,47,2)
(28,77,2)
(81,47,2)
(72,47,2)
(9,67,2)
(63,40,2)
(29,33,2)
(88,67,2)
(29,80,2)
(50,27,2)
(45,54,2)
(67,78,2)
(36,77,2)
(84,78,2)
(53,77,2)
(53,27,2)
(4,77,2)
(70,40,2)
(86,40,2)
(14,77,2)
(38,27,2)
(17,33,2)
(40,77,2)
(3,73,2)
(35,73,2)
(42,72,2)
(73,78,2)
(1,33,2)
(75,40,2)
(8,77,2)
(73,73,2)
(29,88,2)
(55,27,2)
(71,27,2)
(58,77,2)
(27,27,2)
(76,40,2)
(30,45,2)
(61,30,2)
(27,28,2)
(57,77,2)
(59,73,2)
(33,77,2)
(11,77,2)
(37,77,2)
(61,20,2)
(63,22,2)
(88,73,2)
(25,33,2)
(79,33,2)
(14,33,2)
(33,49,2)
(80,28,2)
(35,78,2)
(70,88,2)
(82,73,2)
(81,28,2)
(83,73,2)
(70,22,2)
(71,28,2)
(91,33,2)
(73,67,2)
(29,49,2)
(47,61,2)
(70,47,2)
(7,73,2)
(86,70,2)
(40,40,2)
(9,73,2)
(3,78,2)
(25,77,2)
(1,29,2)
(18,73,2)
(48,77,2)
(49,77,2)
(87,72,2)
(0,77,2)
(9,47,2)
(58,27,2)
(87,43,2)
(40,22,2)
(19,27,2)
(43,72,2)
(48,40,2)
(33,33,2)
(26,40,2)
(27,77,2)
-----------------------------------
(0,0)
(1,printIntLine(data[i])
(2,data)
(3,10)
(4,i)
(5,)
(6,10)
(7,i)
(8,0)
(9,data[i])
(10,if(globalReturnsTrueOrFalse()
(11,0)
(12,if (data == NULL)
(13,i)
(14,10)
(15,data)
(16,)
(17,i)
(18,data)
(19,i)
(20,int *)
(21,)
(22,i=0)
(23,)
(24,)
(25,i)
(26,i)
(27,i<10)
(28,i=0)
(29,data[i])
(30,malloc(10*sizeof(int)
(31,)
(32,i)
(33,i<10)
(34,data)
(35,i)
(36,i)
(37,i)
(38,data)
(39,for(i=0; i<10; i++)
(40,i<10)
(41,for(i=0; i<10; i++)
(42,1)
(43,-1)
(44,)
(45,10*sizeof(int)
(46,int)
(47,data = (int *)
(48,10)
(49,i=0)
(50,i)
(51,)
(52,)
(53,10)
(54,sizeof(int)
(55,i)
(56,)
(57,i)
(58,i)
(59,i)
(60,for(i=0; i<10; i++)
(61,(int *)
(62,i)
(63,i++)
(64,)
(65,i)
(66,if(globalReturnsTrueOrFalse()
(67,i=0)
(68,RET)
(69,NULL)
(70,data[i])
(71,i++)
(72,data == NULL)
(73,i<10)
(74,)
(75,i)
(76,data)
(77,globalReturnsTrueOrFalse()
(78,globalReturnsTrueOrFalse()
(79,i++)
(80,data[i] = i)
(81,data[i])
(82,i)
(83,i++)
(84,0)
(85,)
(86,printIntLine(data[i])
(87,exit(-1)
(88,data[i] = i)
(89,i)
(90,data)
(91,i)
(92,for(i=0; i<10; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^