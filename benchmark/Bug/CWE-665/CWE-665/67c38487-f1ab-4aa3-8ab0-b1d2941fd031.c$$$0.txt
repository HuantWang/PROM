-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_32_bad()
{
    size_t data;
    size_t *dataPtr1 = &data;
    size_t *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        size_t data = *dataPtr1;
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        *dataPtr1 = data;
    }
    {
        size_t data = *dataPtr2;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
82,83
82,84
82,85
83,84
83,85
84,85
86,87
86,88
87,88
89,90
91,92
91,93
91,94
91,95
91,96
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
104,105
104,106
105,106
107,108
108,109
108,110
111,112
111,113
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
125,128
126,127
128,129
130,131
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
144,145
145,146
146,147
146,148
147,148
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,56,61,63,68,70,74,78,80,81,85,88,90,95,98,100,103,106,109,110,114,116,121,123,127,129,131,135,137,141,143,148,149
-----computeFrom-----
35,36
35,37
51,52
51,53
58,59
58,60
83,84
83,85
93,94
93,95
104,105
104,106
112,113
112,114
-----guardedBy-----
90,131
85,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_32_bad(){    size_t data;    size_t *dataPtr1 = &data;    size_t *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        size_t data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        *dataPtr1 = data;    }    {        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_32_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_32_bad
{    size_t data;    size_t *dataPtr1 = &data;    size_t *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        size_t data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        *dataPtr1 = data;    }    {        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
size_t *dataPtr1 = &data;
size_t *dataPtr1 = &data;
size_t
size_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
size_t *dataPtr2 = &data;
size_t *dataPtr2 = &data;
size_t
size_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        size_t data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        *dataPtr1 = data;    }
size_t data = *dataPtr1;
size_t data = *dataPtr1;
size_t
size_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = rand();
data = rand()
data
data
rand()
rand
rand
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = *dataPtr2;
size_t data = *dataPtr2;
size_t
size_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(15,35,0)
(5,45,0)
(29,18,0)
(59,6,0)
(17,36,0)
(20,53,0)
(39,7,0)
(2,65,0)
(38,53,0)
(12,13,0)
(55,19,0)
(47,3,0)
(23,65,0)
(57,56,0)
(68,40,0)
(22,60,0)
(32,35,0)
(37,9,0)
(21,35,0)
(56,60,0)
(36,53,0)
(7,31,0)
(41,33,0)
(42,53,0)
(35,21,0)
(69,24,0)
(16,42,0)
(65,9,0)
(7,53,0)
(23,15,0)
(33,41,0)
(30,23,0)
(67,63,0)
(3,2,0)
(64,38,0)
(48,9,0)
(19,9,0)
(51,54,0)
(2,40,0)
(35,9,0)
(14,5,0)
(26,2,0)
(3,35,0)
(27,42,0)
(28,19,0)
(43,53,0)
(38,18,0)
(11,43,0)
(40,65,0)
(53,7,0)
(63,19,0)
(54,28,0)
(39,41,0)
(56,28,0)
(10,15,0)
(41,28,0)
(0,9,0)
(7,39,0)
(6,46,0)
(50,9,0)
(34,28,0)
(49,40,0)
(43,18,0)
(36,18,0)
(31,7,0)
(53,18,0)
(4,41,0)
(25,65,0)
(41,39,0)
(58,37,0)
(37,13,0)
(61,14,0)
(24,9,0)
(13,37,0)
(66,63,0)
(28,54,0)
(62,36,0)
(60,56,0)
(15,23,0)
(1,33,0)
(40,68,0)
(54,37,0)
(44,21,0)
(5,14,0)
(52,24,0)
(13,12,1)
(41,33,1)
(69,52,1)
(38,53,1)
(42,16,1)
(43,53,1)
(53,7,1)
(49,23,1)
(44,32,1)
(28,54,1)
(3,47,1)
(23,15,1)
(33,1,1)
(6,59,1)
(7,39,1)
(20,56,1)
(17,5,1)
(52,37,1)
(57,28,1)
(10,30,1)
(15,35,1)
(59,56,1)
(12,58,1)
(62,17,1)
(68,49,1)
(8,38,1)
(1,4,1)
(27,53,1)
(30,24,1)
(34,2,1)
(41,28,1)
(60,22,1)
(58,35,1)
(35,21,1)
(5,14,1)
(11,36,1)
(56,60,1)
(47,40,1)
(64,43,1)
(38,64,1)
(37,13,1)
(54,37,1)
(26,3,1)
(36,62,1)
(22,57,1)
(39,41,1)
(8,6,1)
(15,10,1)
(17,42,1)
(42,53,1)
(14,61,1)
(4,20,1)
(16,27,1)
(24,69,1)
(2,26,1)
(54,51,1)
(40,68,1)
(21,44,1)
(7,31,1)
(36,53,1)
(3,35,1)
(43,11,1)
(56,28,1)
(61,42,1)
(51,34,1)
(2,40,1)
(23,15,2)
(11,56,2)
(38,56,2)
(59,56,2)
(4,56,2)
(56,60,2)
(28,54,2)
(41,56,2)
(7,56,2)
(36,53,2)
(20,56,2)
(5,14,2)
(61,42,2)
(42,53,2)
(7,39,2)
(62,56,2)
(14,42,2)
(64,56,2)
(33,56,2)
(35,21,2)
(56,28,2)
(17,56,2)
(54,37,2)
(15,35,2)
(41,28,2)
(5,42,2)
(3,35,2)
(43,56,2)
(43,53,2)
(1,56,2)
(53,7,2)
(42,56,2)
(40,68,2)
(38,53,2)
(36,56,2)
(27,56,2)
(16,56,2)
(53,56,2)
(6,56,2)
(7,31,2)
(39,56,2)
(37,13,2)
(41,33,2)
(39,41,2)
(2,40,2)
-----------------------------------
(0,data)
(1,wchar_t)
(2,*dataPtr1 = data)
(3,*dataPtr1)
(4,data)
(5,exit(-1)
(6,printLine("Input is less than the length of the source string")
(7,(wchar_t *)
(8,RET)
(9,)
(10,dataPtr1)
(11,myString)
(12,data)
(13,&data)
(14,-1)
(15,*dataPtr1)
(16,NULL)
(17,myString)
(18,)
(19,)
(20,myString)
(21,&data)
(22,HELLO_STRING)
(23,data = *dataPtr1)
(24,data = 0)
(25,data)
(26,data)
(27,myString)
(28,data = *dataPtr2)
(29,if (myString == NULL)
(30,data)
(31,wchar_t *)
(32,dataPtr1)
(33,sizeof(wchar_t)
(34,data)
(35,*dataPtr1 = &data)
(36,wcscpy(myString, HELLO_STRING)
(37,*dataPtr2 = &data)
(38,free(myString)
(39,malloc(data*sizeof(wchar_t)
(40,data = rand()
(41,data*sizeof(wchar_t)
(42,myString == NULL)
(43,printWLine(myString)
(44,data)
(45,)
(46,)
(47,dataPtr1)
(48,dataPtr1)
(49,data)
(50,dataPtr2)
(51,dataPtr2)
(52,data)
(53,myString = (wchar_t *)
(54,*dataPtr2)
(55,data)
(56,data > wcslen(HELLO_STRING)
(57,data)
(58,dataPtr2)
(59,"Input is less than the length of the source string")
(60,wcslen(HELLO_STRING)
(61,1)
(62,HELLO_STRING)
(63,)
(64,myString)
(65,)
(66,if (data > wcslen(HELLO_STRING)
(67,myString)
(68,rand()
(69,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^