-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(28,3,0)
(27,39,0)
(25,5,0)
(5,20,0)
(9,23,0)
(36,2,0)
(3,19,0)
(20,5,0)
(10,12,0)
(19,3,0)
(35,22,0)
(39,7,0)
(7,2,0)
(11,18,0)
(26,6,0)
(20,3,0)
(29,10,0)
(37,16,0)
(0,26,0)
(39,13,0)
(7,10,0)
(26,0,0)
(42,19,0)
(8,7,0)
(13,39,0)
(15,35,0)
(1,22,0)
(3,28,0)
(35,19,0)
(30,35,0)
(18,19,0)
(40,16,0)
(16,2,0)
(4,10,0)
(42,22,0)
(5,23,0)
(14,33,0)
(41,17,0)
(34,18,0)
(17,19,0)
(3,20,0)
(21,42,0)
(24,0,0)
(19,22,0)
(31,19,0)
(38,13,0)
(17,22,0)
(5,7,0)
(23,5,0)
(10,7,0)
(32,14,0)
(10,12,1)
(35,19,1)
(43,14,1)
(41,42,1)
(3,20,1)
(32,39,1)
(39,7,1)
(42,21,1)
(5,7,1)
(43,17,1)
(11,19,1)
(13,38,1)
(17,19,1)
(7,10,1)
(21,35,1)
(3,28,1)
(20,5,1)
(15,30,1)
(27,7,1)
(0,24,1)
(29,4,1)
(42,19,1)
(30,26,1)
(18,34,1)
(26,0,1)
(10,29,1)
(24,18,1)
(4,8,1)
(34,11,1)
(39,13,1)
(25,31,1)
(9,25,1)
(23,9,1)
(35,15,1)
(19,3,1)
(31,39,1)
(14,32,1)
(17,41,1)
(5,23,1)
(38,27,1)
(30,18,1)
(18,19,1)
(10,12,2)
(34,39,2)
(11,39,2)
(39,13,2)
(26,0,2)
(18,39,2)
(35,39,2)
(0,18,2)
(3,28,2)
(20,5,2)
(42,19,2)
(42,39,2)
(19,39,2)
(3,20,2)
(35,19,2)
(15,39,2)
(3,39,2)
(5,23,2)
(9,39,2)
(39,7,2)
(5,39,2)
(17,19,2)
(7,10,2)
(19,3,2)
(24,18,2)
(30,39,2)
(26,18,2)
(17,39,2)
(41,39,2)
(23,39,2)
(25,39,2)
(31,39,2)
(32,39,2)
(20,39,2)
(5,7,2)
(18,19,2)
(14,39,2)
(21,39,2)
-----------------------------------
(0,-1)
(1,if (myString == NULL)
(2,)
(3,(char *)
(4,dataArray)
(5,data*sizeof(char)
(6,)
(7,data = dataArray[2])
(8,data)
(9,char)
(10,dataArray[2])
(11,myString)
(12,size_t dataArray[])
(13,strlen(HELLO_STRING)
(14,printLine("Input is less than the length of the source string")
(15,HELLO_STRING)
(16,)
(17,free(myString)
(18,myString == NULL)
(19,myString = (char *)
(20,malloc(data*sizeof(char)
(21,myString)
(22,)
(23,sizeof(char)
(24,1)
(25,data)
(26,exit(-1)
(27,data)
(28,char *)
(29,2)
(30,myString)
(31,myString)
(32,"Input is less than the length of the source string")
(33,)
(34,NULL)
(35,strcpy(myString, HELLO_STRING)
(36,data)
(37,if (data > strlen(HELLO_STRING)
(38,HELLO_STRING)
(39,data > strlen(HELLO_STRING)
(40,myString)
(41,myString)
(42,printLine(myString)
(43,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^