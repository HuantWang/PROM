-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(13,16,0)
(1,7,0)
(4,35,0)
(14,27,0)
(38,32,0)
(16,1,0)
(38,5,0)
(12,21,0)
(36,13,0)
(17,2,0)
(10,9,0)
(2,1,0)
(20,26,0)
(33,26,0)
(23,21,0)
(3,15,0)
(19,16,0)
(37,13,0)
(35,27,0)
(31,15,0)
(24,26,0)
(16,26,0)
(8,35,0)
(40,15,0)
(25,5,0)
(5,38,0)
(15,16,0)
(9,17,0)
(7,1,0)
(1,2,0)
(22,26,0)
(18,17,0)
(2,17,0)
(31,28,0)
(39,27,0)
(34,14,0)
(15,27,0)
(15,31,0)
(17,9,0)
(1,16,0)
(21,0,0)
(6,27,0)
(1,2,1)
(8,14,1)
(34,31,1)
(1,7,1)
(9,10,1)
(27,39,1)
(31,15,1)
(30,35,1)
(11,38,1)
(35,4,1)
(13,36,1)
(11,13,1)
(14,27,1)
(37,16,1)
(10,18,1)
(17,9,1)
(25,13,1)
(2,17,1)
(40,35,1)
(29,11,1)
(8,27,1)
(3,40,1)
(13,16,1)
(15,3,1)
(38,5,1)
(15,27,1)
(4,8,1)
(14,34,1)
(18,19,1)
(15,16,1)
(39,6,1)
(30,29,1)
(36,37,1)
(5,25,1)
(16,1,1)
(6,29,1)
(35,27,1)
(17,9,2)
(4,29,2)
(14,35,2)
(27,29,2)
(40,35,2)
(35,29,2)
(6,29,2)
(4,35,2)
(31,15,2)
(1,2,2)
(39,29,2)
(5,13,2)
(2,17,2)
(35,35,2)
(8,29,2)
(16,1,2)
(38,5,2)
(3,35,2)
(35,27,2)
(15,16,2)
(34,35,2)
(13,16,2)
(14,27,2)
(38,13,2)
(15,27,2)
(15,35,2)
(25,13,2)
(31,35,2)
(1,7,2)
(8,35,2)
-----------------------------------
(0,)
(1,(int *)
(2,malloc(10*sizeof(int)
(3,i)
(4,10)
(5,-1)
(6,i)
(7,int *)
(8,i)
(9,sizeof(int)
(10,int)
(11,globalTrue)
(12,i)
(13,data == NULL)
(14,i++)
(15,data[i])
(16,data = (int *)
(17,10*sizeof(int)
(18,10)
(19,data)
(20,data)
(21,)
(22,if (data == NULL)
(23,for(i=0; i<10; i++)
(24,if(globalTrue)
(25,1)
(26,)
(27,i=0)
(28,)
(29,globalTrue)
(30,RET)
(31,printIntLine(data[i])
(32,)
(33,if(globalTrue)
(34,i)
(35,i<10)
(36,NULL)
(37,data)
(38,exit(-1)
(39,0)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^