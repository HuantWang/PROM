-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_02_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
48,49
49,50
49,51
50,51
51,52
51,53
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
68,69
69,70
71,72
71,73
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
78,79
81,82
83,84
84,85
84,86
85,86
85,87
86,87
86,88
87,88
89,90
92,93
94,95
94,96
96,97
97,98
97,99
98,99
99,100
99,101
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
109,110
109,111
110,111
113,114
114,115
116,117
116,118
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
125,126
128,129
129,130
129,131
130,131
132,133
132,134
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,47,52,54,59,60,63,66,67,70,77,79,80,82,88,90,91,93,95,100,102,107,108,111,112,115,120,124,126,127,131,135,137,138
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
57,58
57,59
61,62
61,63
65,66
65,67
73,74
73,75
84,85
84,86
105,106
105,107
109,110
109,111
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_02_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_02_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(53,1,0)
(36,58,0)
(27,7,0)
(69,7,0)
(42,10,0)
(61,1,0)
(47,1,0)
(61,35,0)
(6,33,0)
(14,8,0)
(43,8,0)
(54,19,0)
(72,22,0)
(62,66,0)
(52,1,0)
(20,46,0)
(14,16,0)
(12,55,0)
(44,73,0)
(54,53,0)
(74,31,0)
(39,61,0)
(76,55,0)
(70,33,0)
(76,10,0)
(29,42,0)
(9,3,0)
(56,69,0)
(17,55,0)
(3,9,0)
(15,10,0)
(34,58,0)
(33,63,0)
(55,9,0)
(73,1,0)
(13,66,0)
(15,31,0)
(67,19,0)
(38,73,0)
(0,20,0)
(57,15,0)
(15,55,0)
(31,53,0)
(22,1,0)
(59,17,0)
(2,49,0)
(75,20,0)
(7,3,0)
(65,34,0)
(31,45,0)
(73,44,0)
(34,61,0)
(28,44,0)
(64,76,0)
(21,53,0)
(58,55,0)
(26,19,0)
(58,1,0)
(60,10,0)
(77,42,0)
(19,55,0)
(32,17,0)
(76,8,0)
(19,54,0)
(9,68,0)
(49,18,0)
(11,54,0)
(58,34,0)
(24,50,0)
(71,66,0)
(25,15,0)
(45,31,0)
(8,61,0)
(18,41,0)
(4,10,0)
(19,1,0)
(53,35,0)
(30,66,0)
(45,16,0)
(3,7,0)
(55,66,0)
(37,58,0)
(8,76,0)
(31,15,0)
(50,10,0)
(5,76,0)
(68,9,0)
(18,49,0)
(7,69,0)
(9,55,0)
(48,44,0)
(8,14,0)
(67,61,1)
(74,15,1)
(17,55,1)
(43,76,1)
(52,47,1)
(26,67,1)
(54,11,1)
(73,44,1)
(4,60,1)
(15,55,1)
(39,34,1)
(34,65,1)
(42,10,1)
(51,17,1)
(15,10,1)
(9,3,1)
(56,27,1)
(47,51,1)
(23,40,1)
(44,28,1)
(51,18,1)
(25,57,1)
(14,8,1)
(31,15,1)
(19,1,1)
(59,32,1)
(3,7,1)
(17,59,1)
(58,55,1)
(38,1,1)
(40,73,1)
(22,72,1)
(73,1,1)
(58,1,1)
(53,21,1)
(21,54,1)
(15,25,1)
(31,53,1)
(48,38,1)
(29,50,1)
(37,73,1)
(45,31,1)
(42,77,1)
(40,51,1)
(1,52,1)
(54,19,1)
(8,76,1)
(28,48,1)
(61,39,1)
(61,1,1)
(9,68,1)
(5,42,1)
(38,22,1)
(69,56,1)
(8,61,1)
(53,1,1)
(60,40,1)
(8,43,1)
(7,69,1)
(76,64,1)
(64,5,1)
(10,4,1)
(76,55,1)
(19,26,1)
(55,9,1)
(29,10,1)
(32,55,1)
(23,42,1)
(50,24,1)
(76,10,1)
(2,17,1)
(50,10,1)
(57,14,1)
(31,74,1)
(18,49,1)
(49,2,1)
(58,36,1)
(77,29,1)
(27,12,1)
(34,58,1)
(11,19,1)
(22,1,1)
(36,37,1)
(24,45,1)
(72,53,1)
(65,58,1)
(19,55,1)
(64,42,2)
(37,73,2)
(25,42,2)
(39,73,2)
(42,40,2)
(34,58,2)
(22,1,2)
(53,1,2)
(58,1,2)
(48,73,2)
(8,61,2)
(61,1,2)
(10,40,2)
(54,19,2)
(72,73,2)
(34,73,2)
(3,7,2)
(19,55,2)
(18,17,2)
(2,17,2)
(60,40,2)
(38,73,2)
(47,51,2)
(8,76,2)
(57,42,2)
(53,73,2)
(76,42,2)
(28,73,2)
(45,31,2)
(11,73,2)
(15,42,2)
(76,10,2)
(29,40,2)
(19,1,2)
(19,73,2)
(21,73,2)
(17,55,2)
(74,42,2)
(58,73,2)
(67,73,2)
(28,51,2)
(8,42,2)
(76,55,2)
(29,42,2)
(26,73,2)
(38,51,2)
(65,73,2)
(9,3,2)
(42,10,2)
(44,73,2)
(22,73,2)
(31,42,2)
(48,51,2)
(42,42,2)
(44,51,2)
(31,53,2)
(73,1,2)
(50,10,2)
(58,55,2)
(15,55,2)
(36,73,2)
(31,15,2)
(5,42,2)
(49,17,2)
(50,42,2)
(45,42,2)
(14,8,2)
(18,49,2)
(55,9,2)
(54,73,2)
(73,44,2)
(7,69,2)
(1,51,2)
(24,42,2)
(52,51,2)
(43,42,2)
(15,10,2)
(77,42,2)
(4,40,2)
(73,51,2)
(14,42,2)
(9,68,2)
(61,73,2)
(77,40,2)
(73,73,2)
-----------------------------------
(0,for(i=0; i<(10/2)
(1,i=0)
(2,1)
(3,malloc(10*sizeof(twoIntsStruct)
(4,0)
(5,data)
(6,for(i=0; i<10; i++)
(7,10*sizeof(twoIntsStruct)
(8,data[i].intOne)
(9,(twoIntsStruct *)
(10,i=0)
(11,intTwo)
(12,data)
(13,if(1)
(14,printIntLine(data[i].intOne)
(15,data[i])
(16,)
(17,data == NULL)
(18,exit(-1)
(19,data[i])
(20,)
(21,i)
(22,i++)
(23,RET)
(24,i)
(25,i)
(26,i)
(27,10)
(28,2)
(29,i)
(30,if (data == NULL)
(31,data[i].intTwo)
(32,data)
(33,)
(34,data[i].intOne)
(35,)
(36,i)
(37,data)
(38,i)
(39,i)
(40,1)
(41,)
(42,i<10)
(43,intOne)
(44,10/2)
(45,printIntLine(data[i].intTwo)
(46,)
(47,i)
(48,10)
(49,-1)
(50,i++)
(51,1)
(52,0)
(53,data[i].intTwo = i)
(54,data[i].intTwo)
(55,data = (twoIntsStruct *)
(56,twoIntsStruct)
(57,data)
(58,data[i])
(59,NULL)
(60,i)
(61,data[i].intOne = i)
(62,data)
(63,)
(64,i)
(65,intOne)
(66,)
(67,data)
(68,twoIntsStruct *)
(69,sizeof(twoIntsStruct)
(70,i)
(71,if(1)
(72,i)
(73,i<(10/2)
(74,intTwo)
(75,i)
(76,data[i])
(77,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^