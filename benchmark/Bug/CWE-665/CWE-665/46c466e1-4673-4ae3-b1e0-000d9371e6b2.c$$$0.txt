-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
52,53
52,54
52,55
53,54
53,55
54,55
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
61,66
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
95,98
96,97
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
122,123
123,124
123,125
124,125
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,50,51,55,58,60,65,68,70,73,76,79,80,84,86,91,93,97,99,101,105,107,111,113,118,119,120,121,125,126,127
-----computeFrom-----
13,14
13,15
53,54
53,55
63,64
63,65
74,75
74,76
82,83
82,84
-----guardedBy-----
60,101
55,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(56,25,0)
(24,33,0)
(37,33,0)
(51,33,0)
(44,47,0)
(52,41,0)
(43,33,0)
(41,52,0)
(54,25,0)
(61,1,0)
(47,33,0)
(38,52,0)
(62,30,0)
(39,25,0)
(8,30,0)
(33,4,0)
(12,21,0)
(9,56,0)
(53,37,0)
(47,4,0)
(43,4,0)
(29,18,0)
(50,21,0)
(22,28,0)
(5,56,0)
(56,9,0)
(55,34,0)
(60,59,0)
(2,13,0)
(45,59,0)
(41,21,0)
(1,11,0)
(34,39,0)
(25,59,0)
(46,59,0)
(10,30,0)
(20,47,0)
(18,30,0)
(35,13,0)
(28,22,0)
(0,25,0)
(33,28,0)
(57,41,0)
(56,42,0)
(26,43,0)
(7,51,0)
(58,18,0)
(15,21,0)
(39,34,0)
(32,51,0)
(9,28,0)
(42,56,0)
(17,21,0)
(6,41,0)
(23,30,0)
(19,39,0)
(2,27,0)
(3,15,0)
(48,42,0)
(49,4,0)
(52,25,0)
(37,4,0)
(40,30,0)
(16,40,0)
(28,33,0)
(36,21,0)
(28,9,0)
(13,2,0)
(26,47,1)
(39,25,1)
(37,53,1)
(8,37,1)
(40,16,1)
(39,34,1)
(16,63,1)
(51,32,1)
(52,25,1)
(19,63,1)
(34,55,1)
(24,39,1)
(63,17,1)
(47,44,1)
(43,33,1)
(57,6,1)
(38,57,1)
(61,39,1)
(35,51,1)
(53,43,1)
(32,7,1)
(43,26,1)
(14,62,1)
(31,25,1)
(1,61,1)
(41,52,1)
(54,0,1)
(55,19,1)
(17,41,1)
(15,3,1)
(36,15,1)
(20,51,1)
(28,22,1)
(9,56,1)
(14,8,1)
(51,33,1)
(47,33,1)
(8,1,1)
(62,40,1)
(42,48,1)
(13,35,1)
(7,33,1)
(5,24,1)
(28,9,1)
(52,38,1)
(3,31,1)
(37,33,1)
(20,2,1)
(25,54,1)
(44,20,1)
(63,36,1)
(48,5,1)
(56,42,1)
(6,31,1)
(2,13,1)
(56,25,1)
(33,28,1)
(62,63,2)
(32,39,2)
(38,31,2)
(19,63,2)
(15,31,2)
(56,25,2)
(9,39,2)
(5,39,2)
(57,31,2)
(52,25,2)
(33,39,2)
(48,39,2)
(43,33,2)
(20,39,2)
(35,51,2)
(2,13,2)
(26,39,2)
(7,39,2)
(17,31,2)
(2,51,2)
(6,31,2)
(42,39,2)
(28,22,2)
(13,51,2)
(24,39,2)
(47,39,2)
(41,31,2)
(61,39,2)
(39,63,2)
(16,63,2)
(39,34,2)
(39,25,2)
(47,33,2)
(3,31,2)
(34,63,2)
(55,63,2)
(56,42,2)
(33,28,2)
(37,39,2)
(9,56,2)
(40,63,2)
(1,39,2)
(43,39,2)
(8,63,2)
(51,33,2)
(53,39,2)
(37,33,2)
(56,39,2)
(52,31,2)
(28,39,2)
(41,52,2)
(44,39,2)
(28,9,2)
(51,39,2)
(36,31,2)
-----------------------------------
(0,data)
(1,printLine("Input is less than the length of the source string")
(2,exit(-1)
(3,"Benign, fixed string")
(4,)
(5,data)
(6,stdin)
(7,myString)
(8,break;)
(9,malloc(data*sizeof(char)
(10,default:)
(11,)
(12,case 6:)
(13,-1)
(14,RET)
(15,printLine("Benign, fixed string")
(16,"Benign, fixed string")
(17,break;)
(18,)
(19,data)
(20,myString)
(21,)
(22,char *)
(23,case 7:)
(24,myString)
(25,data = 0)
(26,myString)
(27,)
(28,(char *)
(29,if (data > strlen(HELLO_STRING)
(30,)
(31,6)
(32,NULL)
(33,myString = (char *)
(34,strlen(HELLO_STRING)
(35,1)
(36,break;)
(37,free(myString)
(38,data)
(39,data > strlen(HELLO_STRING)
(40,printLine("Benign, fixed string")
(41,fscanf(stdin, "%zu", &data)
(42,sizeof(char)
(43,printLine(myString)
(44,HELLO_STRING)
(45,data)
(46,switch(7)
(47,strcpy(myString, HELLO_STRING)
(48,char)
(49,if (myString == NULL)
(50,default:)
(51,myString == NULL)
(52,&data)
(53,myString)
(54,0)
(55,HELLO_STRING)
(56,data*sizeof(char)
(57,"%zu")
(58,myString)
(59,)
(60,switch(6)
(61,"Input is less than the length of the source string")
(62,break;)
(63,7)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^