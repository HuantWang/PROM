-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_02_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
48,49
50,51
50,52
52,53
53,54
53,55
54,55
55,56
55,57
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
86,87
88,89
88,90
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,47,49,51,56,58,63,64,67,68,71,76,80,82,83,87,91,93,94
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
61,62
61,63
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_02_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_02_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(5,7,0)
(20,41,0)
(8,16,0)
(8,26,0)
(28,29,0)
(44,32,0)
(9,32,0)
(17,4,0)
(13,35,0)
(7,10,0)
(42,16,0)
(34,32,0)
(25,16,0)
(0,21,0)
(7,8,0)
(28,32,0)
(16,42,0)
(11,34,0)
(45,26,0)
(40,8,0)
(21,32,0)
(22,26,0)
(2,18,0)
(10,17,0)
(16,8,0)
(41,12,0)
(3,26,0)
(16,25,0)
(39,29,0)
(30,29,0)
(15,18,0)
(7,32,0)
(39,4,0)
(1,28,0)
(2,42,0)
(18,2,0)
(6,26,0)
(12,41,0)
(48,35,0)
(27,10,0)
(47,21,0)
(29,39,0)
(29,28,0)
(24,28,0)
(19,8,0)
(28,8,0)
(35,33,0)
(46,2,0)
(12,31,0)
(42,2,0)
(36,7,0)
(38,40,0)
(10,7,0)
(17,10,0)
(43,40,0)
(10,7,1)
(7,32,1)
(21,32,1)
(40,43,1)
(46,19,1)
(40,8,1)
(23,12,1)
(5,36,1)
(44,37,1)
(16,25,1)
(8,16,1)
(17,10,1)
(2,18,1)
(34,32,1)
(39,29,1)
(38,8,1)
(42,2,1)
(23,40,1)
(14,37,1)
(27,7,1)
(1,21,1)
(11,17,1)
(28,32,1)
(15,46,1)
(10,27,1)
(30,28,1)
(28,24,1)
(43,38,1)
(36,39,1)
(14,21,1)
(16,42,1)
(7,8,1)
(32,9,1)
(34,11,1)
(0,47,1)
(47,32,1)
(20,40,1)
(29,30,1)
(47,34,1)
(28,8,1)
(41,20,1)
(37,23,1)
(7,5,1)
(21,0,1)
(24,1,1)
(9,44,1)
(18,15,1)
(12,41,1)
(29,28,1)
(42,2,2)
(32,37,2)
(47,21,2)
(34,21,2)
(29,28,2)
(0,37,2)
(12,41,2)
(44,37,2)
(21,21,2)
(34,32,2)
(1,21,2)
(30,21,2)
(10,7,2)
(24,21,2)
(7,32,2)
(41,40,2)
(28,8,2)
(7,21,2)
(47,37,2)
(39,29,2)
(20,40,2)
(17,21,2)
(2,18,2)
(27,21,2)
(36,21,2)
(9,37,2)
(7,8,2)
(21,37,2)
(28,21,2)
(8,16,2)
(28,32,2)
(40,8,2)
(12,40,2)
(39,21,2)
(16,42,2)
(21,32,2)
(10,21,2)
(5,21,2)
(11,21,2)
(16,25,2)
(29,21,2)
(0,21,2)
(17,10,2)
-----------------------------------
(0,10)
(1,data)
(2,10*sizeof(twoIntsStruct)
(3,if(1)
(4,)
(5,i)
(6,if (data == NULL)
(7,data[i])
(8,data = (twoIntsStruct *)
(9,0)
(10,data[i].intTwo)
(11,i)
(12,exit(-1)
(13,i)
(14,RET)
(15,twoIntsStruct)
(16,(twoIntsStruct *)
(17,printIntLine(data[i].intTwo)
(18,sizeof(twoIntsStruct)
(19,data)
(20,1)
(21,i<10)
(22,data)
(23,1)
(24,i)
(25,twoIntsStruct *)
(26,)
(27,intTwo)
(28,data[i])
(29,data[i].intOne)
(30,intOne)
(31,)
(32,i=0)
(33,)
(34,i++)
(35,)
(36,data)
(37,1)
(38,data)
(39,printIntLine(data[i].intOne)
(40,data == NULL)
(41,-1)
(42,malloc(10*sizeof(twoIntsStruct)
(43,NULL)
(44,i)
(45,if(1)
(46,10)
(47,i)
(48,for(i=0; i<10; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^