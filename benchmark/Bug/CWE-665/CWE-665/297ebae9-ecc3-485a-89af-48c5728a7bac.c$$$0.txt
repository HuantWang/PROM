-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_16_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    while(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
35,37
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
52,53
52,54
55,56
56,57
58,59
58,60
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
73,75
74,75
76,77
79,80
82,83
82,84
84,85
84,86
85,86
85,87
86,87
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
101,102
102,103
104,105
104,106
105,106
106,107
106,108
107,108
109,110
109,111
110,111
110,112
111,112
113,114
116,117
117,118
117,119
118,119
120,121
120,122
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,39,41,46,47,50,53,54,57,64,66,67,69,75,77,78,80,81,83,88,90,95,96,99,100,103,108,112,114,115,119,123,125,126,127
-----computeFrom-----
14,15
14,16
26,27
26,28
44,45
44,46
48,49
48,50
52,53
52,54
60,61
60,62
71,72
71,73
93,94
93,95
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_16_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_16_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        break;    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        break;    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
-----joern-----
(55,47,0)
(20,5,0)
(22,10,0)
(24,56,0)
(34,61,0)
(9,8,0)
(68,0,0)
(12,53,0)
(3,66,0)
(7,5,0)
(35,53,0)
(61,58,0)
(2,7,0)
(69,41,0)
(43,66,0)
(14,58,0)
(13,0,0)
(63,58,0)
(69,68,0)
(47,62,0)
(28,5,0)
(60,43,0)
(18,1,0)
(44,61,0)
(65,56,0)
(4,66,0)
(67,53,0)
(45,6,0)
(48,47,0)
(0,68,0)
(38,15,0)
(51,20,0)
(58,5,0)
(3,67,0)
(1,66,0)
(36,15,0)
(70,66,0)
(6,3,0)
(10,27,0)
(26,5,0)
(56,66,0)
(56,55,0)
(20,67,0)
(30,5,0)
(19,26,0)
(16,68,0)
(67,41,0)
(44,8,0)
(17,55,0)
(50,1,0)
(33,53,0)
(42,67,0)
(58,61,0)
(54,57,0)
(21,41,0)
(18,20,0)
(11,27,0)
(23,7,0)
(56,67,0)
(61,47,0)
(27,66,0)
(55,56,0)
(41,67,0)
(37,52,0)
(29,57,0)
(41,21,0)
(15,59,0)
(64,59,0)
(57,52,0)
(1,62,0)
(71,20,0)
(61,44,0)
(39,18,0)
(27,10,0)
(68,69,0)
(18,9,0)
(6,1,0)
(32,10,0)
(9,18,0)
(25,3,0)
(20,18,0)
(3,6,0)
(41,69,0)
(49,3,0)
(58,67,0)
(47,66,0)
(16,42,1)
(19,44,1)
(56,66,1)
(49,27,1)
(60,47,1)
(58,5,1)
(67,41,1)
(27,10,1)
(18,1,1)
(41,69,1)
(39,20,1)
(43,66,1)
(24,65,1)
(3,66,1)
(51,7,1)
(14,9,1)
(58,67,1)
(18,39,1)
(37,27,1)
(69,68,1)
(22,11,1)
(7,2,1)
(6,45,1)
(63,14,1)
(56,67,1)
(3,67,1)
(11,43,1)
(32,22,1)
(20,67,1)
(47,48,1)
(7,5,1)
(61,47,1)
(58,63,1)
(3,25,1)
(40,37,1)
(18,20,1)
(70,31,1)
(6,3,1)
(64,7,1)
(31,67,1)
(17,56,1)
(61,34,1)
(27,66,1)
(28,30,1)
(20,71,1)
(47,66,1)
(71,51,1)
(55,17,1)
(1,66,1)
(68,0,1)
(55,56,1)
(23,26,1)
(56,24,1)
(13,16,1)
(26,5,1)
(65,1,1)
(44,61,1)
(30,40,1)
(4,70,1)
(48,55,1)
(9,18,1)
(46,64,1)
(50,6,1)
(10,32,1)
(61,58,1)
(2,23,1)
(66,4,1)
(20,5,1)
(5,28,1)
(43,60,1)
(23,5,1)
(45,3,1)
(41,21,1)
(26,19,1)
(40,31,1)
(46,40,1)
(11,66,1)
(1,50,1)
(0,13,1)
(34,58,1)
(25,49,1)
(56,27,2)
(67,41,2)
(26,7,2)
(26,5,2)
(11,27,2)
(32,27,2)
(37,31,2)
(6,3,2)
(58,67,2)
(44,7,2)
(7,40,2)
(2,7,2)
(58,7,2)
(9,7,2)
(47,66,2)
(41,69,2)
(70,31,2)
(11,31,2)
(7,5,2)
(25,27,2)
(30,40,2)
(51,7,2)
(68,0,2)
(47,27,2)
(4,31,2)
(61,58,2)
(27,31,2)
(56,66,2)
(9,18,2)
(3,67,2)
(3,66,2)
(28,40,2)
(23,40,2)
(63,7,2)
(6,27,2)
(45,27,2)
(34,7,2)
(3,27,2)
(48,27,2)
(65,27,2)
(56,67,2)
(27,27,2)
(55,27,2)
(41,21,2)
(43,27,2)
(60,27,2)
(20,7,2)
(69,68,2)
(55,56,2)
(64,40,2)
(10,31,2)
(23,7,2)
(39,7,2)
(50,27,2)
(18,7,2)
(20,5,2)
(1,27,2)
(24,27,2)
(27,66,2)
(44,61,2)
(18,20,2)
(5,40,2)
(18,1,2)
(2,40,2)
(43,66,2)
(1,66,2)
(61,7,2)
(66,31,2)
(19,7,2)
(22,27,2)
(20,67,2)
(32,31,2)
(7,7,2)
(58,5,2)
(49,27,2)
(17,27,2)
(27,10,2)
(14,7,2)
(22,31,2)
(71,7,2)
(61,47,2)
(10,27,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,data[i].intOne = i)
(2,10)
(3,data[i])
(4,0)
(5,i=0)
(6,data[i].intOne)
(7,i<10)
(8,)
(9,printIntLine(data[i].intOne)
(10,10/2)
(11,i)
(12,while(1)
(13,twoIntsStruct)
(14,data)
(15,)
(16,10)
(17,intTwo)
(18,data[i].intOne)
(19,i)
(20,data[i])
(21,twoIntsStruct *)
(22,10)
(23,i)
(24,i)
(25,i)
(26,i++)
(27,i<(10/2)
(28,0)
(29,i)
(30,i)
(31,1)
(32,2)
(33,data)
(34,intTwo)
(35,while(1)
(36,for(i=0; i<10; i++)
(37,break;)
(38,i)
(39,intOne)
(40,1)
(41,(twoIntsStruct *)
(42,data)
(43,i++)
(44,printIntLine(data[i].intTwo)
(45,intOne)
(46,RET)
(47,data[i].intTwo = i)
(48,i)
(49,data)
(50,i)
(51,data)
(52,)
(53,)
(54,for(i=0; i<(10/2)
(55,data[i].intTwo)
(56,data[i])
(57,)
(58,data[i])
(59,)
(60,i)
(61,data[i].intTwo)
(62,)
(63,i)
(64,break;)
(65,data)
(66,i=0)
(67,data = (twoIntsStruct *)
(68,10*sizeof(twoIntsStruct)
(69,ALLOCA(10*sizeof(twoIntsStruct)
(70,i)
(71,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^