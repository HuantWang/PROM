-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_09_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
67,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
75,76
75,77
75,78
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
84,87
84,88
84,89
85,86
86,87
86,88
87,88
89,90
89,91
90,91
90,92
92,93
94,95
94,96
95,96
97,98
97,99
98,99
100,101
101,102
101,103
104,105
104,106
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
118,121
119,120
121,122
123,124
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
137,138
138,139
139,140
139,141
140,141
-----nextToken-----
2,4,9,11,15,16,19,24,26,29,31,36,38,40,42,44,49,52,54,56,57,62,63,66,71,73,74,78,81,83,88,91,93,96,99,102,103,107,109,114,116,120,122,124,128,130,134,136,141,142
-----computeFrom-----
13,14
13,15
33,34
33,35
47,48
47,49
76,77
76,78
86,87
86,88
97,98
97,99
105,106
105,107
-----guardedBy-----
38,54
44,56
83,124
78,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_09_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_09_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_09_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(49,38,0)
(28,47,0)
(8,5,0)
(33,21,0)
(55,3,0)
(43,11,0)
(61,37,0)
(52,68,0)
(1,22,0)
(67,26,0)
(68,56,0)
(9,26,0)
(47,21,0)
(5,30,0)
(64,57,0)
(23,21,0)
(14,38,0)
(68,29,0)
(56,68,0)
(2,46,0)
(19,67,0)
(66,26,0)
(39,47,0)
(16,37,0)
(43,31,0)
(49,5,0)
(5,38,0)
(62,22,0)
(29,68,0)
(34,46,0)
(17,53,0)
(63,3,0)
(59,46,0)
(58,30,0)
(24,5,0)
(45,29,0)
(40,55,0)
(62,3,0)
(56,30,0)
(22,62,0)
(0,55,0)
(50,42,0)
(37,32,0)
(30,58,0)
(60,64,0)
(25,48,0)
(68,3,0)
(27,14,0)
(20,14,0)
(53,5,0)
(42,46,0)
(68,67,0)
(3,55,0)
(55,47,0)
(30,56,0)
(21,35,0)
(51,49,0)
(62,67,0)
(41,25,0)
(31,43,0)
(54,8,0)
(3,36,0)
(4,62,0)
(7,8,0)
(12,31,0)
(65,67,0)
(30,5,0)
(44,26,0)
(14,5,0)
(46,42,0)
(6,55,0)
(46,47,0)
(18,38,0)
(53,38,0)
(64,60,1)
(43,31,1)
(5,30,1)
(56,68,1)
(55,0,1)
(60,62,1)
(30,56,1)
(13,64,1)
(62,22,1)
(30,58,1)
(62,3,1)
(52,24,1)
(68,67,1)
(46,59,1)
(7,54,1)
(29,45,1)
(51,53,1)
(53,5,1)
(3,55,1)
(4,10,1)
(15,67,1)
(20,43,1)
(14,5,1)
(2,47,1)
(34,2,1)
(1,4,1)
(6,63,1)
(53,17,1)
(42,46,1)
(45,52,1)
(49,51,1)
(46,47,1)
(40,6,1)
(55,47,1)
(14,27,1)
(25,41,1)
(13,10,1)
(47,28,1)
(63,42,1)
(24,62,1)
(22,1,1)
(62,67,1)
(68,3,1)
(41,42,1)
(13,49,1)
(27,20,1)
(10,3,1)
(8,5,1)
(19,65,1)
(8,7,1)
(39,15,1)
(54,5,1)
(49,5,1)
(12,8,1)
(68,29,1)
(17,14,1)
(10,15,1)
(31,12,1)
(50,46,1)
(28,39,1)
(20,8,1)
(59,34,1)
(10,25,1)
(42,50,1)
(0,40,1)
(67,19,1)
(53,62,2)
(31,8,2)
(62,67,2)
(17,62,2)
(2,15,2)
(50,15,2)
(28,15,2)
(46,47,2)
(68,62,2)
(4,10,2)
(3,55,2)
(49,62,2)
(24,62,2)
(8,62,2)
(47,15,2)
(40,42,2)
(60,62,2)
(1,10,2)
(14,5,2)
(62,22,2)
(55,47,2)
(63,42,2)
(64,62,2)
(27,62,2)
(34,15,2)
(25,42,2)
(5,62,2)
(30,56,2)
(68,67,2)
(59,15,2)
(43,31,2)
(0,42,2)
(42,15,2)
(68,3,2)
(43,8,2)
(14,62,2)
(51,62,2)
(68,29,2)
(39,15,2)
(7,62,2)
(46,15,2)
(55,42,2)
(56,62,2)
(29,62,2)
(62,10,2)
(6,42,2)
(56,68,2)
(20,62,2)
(62,3,2)
(45,62,2)
(30,58,2)
(8,5,2)
(42,46,2)
(30,62,2)
(52,62,2)
(22,10,2)
(12,8,2)
(49,5,2)
(41,42,2)
(3,42,2)
(54,62,2)
(5,30,2)
(53,5,2)
-----------------------------------
(0,0)
(1,HELLO_STRING)
(2,inputBuffer)
(3,data = strtoul(inputBuffer, NULL, 0)
(4,data)
(5,myString = (wchar_t *)
(6,inputBuffer)
(7,NULL)
(8,myString == NULL)
(9,if(GLOBAL_CONST_TRUE)
(10,GLOBAL_CONST_TRUE)
(11,)
(12,1)
(13,RET)
(14,wcscpy(myString, HELLO_STRING)
(15,GLOBAL_CONST_TRUE)
(16,if (data > wcslen(HELLO_STRING)
(17,myString)
(18,if (myString == NULL)
(19,0)
(20,myString)
(21,)
(22,wcslen(HELLO_STRING)
(23,inputBuffer)
(24,myString)
(25,printLine("fgets()
(26,)
(27,HELLO_STRING)
(28,"")
(29,sizeof(wchar_t)
(30,(wchar_t *)
(31,-1)
(32,)
(33,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,CHAR_ARRAY_SIZE)
(35,)
(36,)
(37,)
(38,)
(39,inputBuffer)
(40,NULL)
(41,"fgets()
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,exit(-1)
(44,if(GLOBAL_CONST_TRUE)
(45,wchar_t)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,inputBuffer[CHAR_ARRAY_SIZE] = "")
(48,)
(49,free(myString)
(50,NULL)
(51,myString)
(52,data)
(53,printWLine(myString)
(54,myString)
(55,strtoul(inputBuffer, NULL, 0)
(56,malloc(data*sizeof(wchar_t)
(57,)
(58,wchar_t *)
(59,stdin)
(60,"Input is less than the length of the source string")
(61,myString)
(62,data > wcslen(HELLO_STRING)
(63,data)
(64,printLine("Input is less than the length of the source string")
(65,data)
(66,data)
(67,data = 0)
(68,data*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^