-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_02_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
32,33
34,35
34,36
36,37
37,38
37,39
38,39
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,31,33,35,40,42,47,48,51,52,55,60,63,65
-----computeFrom-----
13,14
13,15
24,25
24,26
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;LiteralExpression;CompoundStatement;NullStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_02_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_no_init_02_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(13,21,0)
(17,31,0)
(5,9,0)
(23,30,0)
(30,17,0)
(12,25,0)
(0,9,0)
(14,17,0)
(18,25,0)
(21,3,0)
(27,16,0)
(22,31,0)
(19,4,0)
(4,23,0)
(10,12,0)
(12,32,0)
(8,25,0)
(12,31,0)
(7,12,0)
(28,25,0)
(1,21,0)
(2,9,0)
(24,16,0)
(31,17,0)
(30,23,0)
(16,25,0)
(17,14,0)
(32,12,0)
(23,4,0)
(17,30,0)
(31,9,0)
(20,8,0)
(15,23,0)
(32,6,0)
(29,16,1)
(10,7,1)
(12,31,1)
(17,14,1)
(17,30,1)
(30,23,1)
(28,26,1)
(31,17,1)
(23,4,1)
(20,32,1)
(19,15,1)
(32,12,1)
(16,25,1)
(11,31,1)
(12,10,1)
(24,25,1)
(29,26,1)
(12,25,1)
(24,8,1)
(8,20,1)
(8,25,1)
(27,24,1)
(26,11,1)
(25,18,1)
(16,27,1)
(15,22,1)
(4,19,1)
(18,28,1)
(7,16,1)
(27,26,2)
(18,26,2)
(12,16,2)
(8,25,2)
(16,26,2)
(16,16,2)
(12,25,2)
(32,16,2)
(12,31,2)
(8,16,2)
(32,12,2)
(24,16,2)
(28,26,2)
(16,25,2)
(7,16,2)
(17,30,2)
(25,26,2)
(23,4,2)
(17,14,2)
(30,23,2)
(20,16,2)
(27,16,2)
(31,17,2)
(10,16,2)
(24,26,2)
-----------------------------------
(0,if(1)
(1,for(i=0; i<10; i++)
(2,data)
(3,)
(4,sizeof(int)
(5,if(1)
(6,)
(7,data)
(8,i++)
(9,)
(10,i)
(11,1)
(12,data[i])
(13,i)
(14,int *)
(15,10)
(16,i<10)
(17,(int *)
(18,0)
(19,int)
(20,i)
(21,)
(22,data)
(23,10*sizeof(int)
(24,i)
(25,i=0)
(26,1)
(27,10)
(28,i)
(29,RET)
(30,ALLOCA(10*sizeof(int)
(31,data = (int *)
(32,printIntLine(data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^