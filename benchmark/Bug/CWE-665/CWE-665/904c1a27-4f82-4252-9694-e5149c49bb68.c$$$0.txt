-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_17_bad()
{
    int i,j;
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
80,81
80,82
83,84
84,85
86,87
87,88
88,89
88,90
89,90
89,91
90,91
92,93
94,95
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
106,107
107,108
109,110
110,111
110,112
111,112
112,113
112,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
126,127
127,128
129,130
130,131
131,132
131,133
132,133
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,12,15,17,18,22,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,67,69,74,75,78,81,82,85,91,93,95,100,101,104,105,108,113,115,120,121,124,125,128,133,136,138
-----computeFrom-----
20,21
20,22
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
72,73
72,74
76,77
76,78
80,81
80,82
88,89
88,90
98,99
98,100
102,103
102,104
118,119
118,120
122,123
122,124
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_17_bad(){    int i,j;    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_17_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_17_bad
{    int i,j;    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(17,22,0)
(12,72,0)
(29,18,0)
(12,62,0)
(65,62,0)
(52,29,0)
(31,67,0)
(13,35,0)
(3,14,0)
(33,61,0)
(25,2,0)
(37,73,0)
(55,61,0)
(32,36,0)
(21,48,0)
(48,45,0)
(0,18,0)
(34,39,0)
(59,51,0)
(70,20,0)
(6,22,0)
(64,67,0)
(46,45,0)
(26,61,0)
(63,51,0)
(31,61,0)
(47,48,0)
(49,61,0)
(39,54,0)
(39,51,0)
(30,67,0)
(14,11,0)
(63,31,0)
(68,53,0)
(23,61,0)
(1,45,0)
(74,63,0)
(34,13,0)
(15,73,0)
(29,64,0)
(40,68,0)
(67,64,0)
(41,71,0)
(64,29,0)
(50,45,0)
(67,31,0)
(24,75,0)
(36,2,0)
(34,31,0)
(62,12,0)
(42,61,0)
(58,51,0)
(9,71,0)
(10,63,0)
(66,31,0)
(69,68,0)
(22,59,0)
(20,51,0)
(38,39,0)
(71,31,0)
(43,15,0)
(63,39,0)
(4,51,0)
(60,44,0)
(56,36,0)
(67,30,0)
(76,50,0)
(13,34,0)
(7,14,0)
(44,2,0)
(59,22,0)
(34,45,0)
(19,59,0)
(27,34,0)
(18,29,0)
(8,75,0)
(28,73,0)
(16,2,0)
(75,73,0)
(57,34,0)
(15,43,1)
(64,29,1)
(34,31,1)
(43,48,1)
(45,1,1)
(18,0,1)
(73,28,1)
(71,31,1)
(24,73,1)
(31,67,1)
(34,57,1)
(17,6,1)
(51,4,1)
(57,27,1)
(48,45,1)
(44,2,1)
(37,36,1)
(22,17,1)
(24,15,1)
(38,63,1)
(13,34,1)
(9,41,1)
(52,66,1)
(34,39,1)
(16,25,1)
(58,36,1)
(25,71,1)
(15,73,1)
(74,10,1)
(63,51,1)
(48,21,1)
(36,56,1)
(34,45,1)
(67,64,1)
(5,75,1)
(59,51,1)
(19,51,1)
(75,73,1)
(20,70,1)
(65,71,1)
(63,31,1)
(56,32,1)
(39,38,1)
(39,51,1)
(1,46,1)
(8,24,1)
(59,22,1)
(67,30,1)
(32,44,1)
(12,62,1)
(47,50,1)
(76,13,1)
(28,37,1)
(41,31,1)
(4,58,1)
(44,60,1)
(63,74,1)
(19,20,1)
(50,45,1)
(62,65,1)
(21,47,1)
(20,51,1)
(71,9,1)
(36,2,1)
(47,45,1)
(2,16,1)
(75,8,1)
(27,48,1)
(46,75,1)
(32,2,1)
(10,59,1)
(29,18,1)
(0,52,1)
(60,59,1)
(50,76,1)
(25,12,1)
(70,39,1)
(6,19,1)
(22,36,2)
(32,36,2)
(24,75,2)
(22,59,2)
(56,36,2)
(59,51,2)
(6,36,2)
(19,59,2)
(31,67,2)
(74,59,2)
(17,59,2)
(34,31,2)
(8,75,2)
(34,48,2)
(60,36,2)
(58,36,2)
(75,73,2)
(15,73,2)
(21,75,2)
(76,48,2)
(63,59,2)
(19,36,2)
(21,48,2)
(44,36,2)
(36,36,2)
(65,71,2)
(62,71,2)
(47,48,2)
(29,18,2)
(34,39,2)
(51,36,2)
(59,36,2)
(50,48,2)
(39,51,2)
(4,36,2)
(63,31,2)
(13,34,2)
(43,75,2)
(57,48,2)
(13,48,2)
(38,59,2)
(27,48,2)
(48,48,2)
(1,75,2)
(36,2,2)
(20,51,2)
(47,75,2)
(75,75,2)
(59,22,2)
(20,59,2)
(17,36,2)
(59,59,2)
(45,75,2)
(15,75,2)
(10,59,2)
(48,45,2)
(6,59,2)
(50,45,2)
(67,64,2)
(12,62,2)
(46,75,2)
(70,59,2)
(64,29,2)
(12,71,2)
(34,45,2)
(63,51,2)
(48,75,2)
(39,59,2)
(71,31,2)
(44,2,2)
(67,30,2)
-----------------------------------
(0,int)
(1,0)
(2,i = 0)
(3,for(i=0; i<10; i++)
(4,0)
(5,RET)
(6,10)
(7,i)
(8,1)
(9,NULL)
(10,data)
(11,)
(12,exit(-1)
(13,printIntLine(data[i])
(14,)
(15,j++)
(16,0)
(17,2)
(18,sizeof(int)
(19,i)
(20,i++)
(21,10)
(22,10/2)
(23,for(j = 0; j < 1; j++)
(24,j)
(25,i)
(26,data)
(27,data)
(28,0)
(29,10*sizeof(int)
(30,int *)
(31,data = (int *)
(32,i)
(33,for(i = 0; i < 1; i++)
(34,data[i])
(35,)
(36,i < 1)
(37,j)
(38,i)
(39,data[i] = i)
(40,i)
(41,data)
(42,j)
(43,j)
(44,i++)
(45,i=0)
(46,i)
(47,i)
(48,i<10)
(49,if (data == NULL)
(50,i++)
(51,i=0)
(52,10)
(53,)
(54,)
(55,i)
(56,1)
(57,i)
(58,i)
(59,i<(10/2)
(60,i)
(61,)
(62,-1)
(63,data[i])
(64,malloc(10*sizeof(int)
(65,1)
(66,data)
(67,(int *)
(68,)
(69,for(i=0; i<(10/2)
(70,i)
(71,data == NULL)
(72,)
(73,j = 0)
(74,i)
(75,j < 1)
(76,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^