-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_02_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
52,53
52,54
55,56
56,57
58,59
58,60
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
73,75
74,75
76,77
79,80
81,82
81,83
83,84
84,85
84,86
85,86
86,87
86,88
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
103,105
104,105
105,106
105,107
106,107
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
119,121
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,39,41,46,47,50,53,54,57,64,66,67,69,75,77,78,80,82,87,89,94,95,98,99,102,107,111,113,114,118,122,124,125
-----computeFrom-----
14,15
14,16
26,27
26,28
44,45
44,46
48,49
48,50
52,53
52,54
60,61
60,62
71,72
71,73
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_02_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_02_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(44,52,0)
(51,8,0)
(59,49,0)
(23,0,0)
(30,47,0)
(37,7,0)
(55,20,0)
(34,54,0)
(26,16,0)
(62,32,0)
(63,67,0)
(32,41,0)
(22,66,0)
(8,24,0)
(17,0,0)
(52,16,0)
(22,28,0)
(6,60,0)
(27,42,0)
(28,44,0)
(39,55,0)
(55,6,0)
(54,66,0)
(44,28,0)
(18,32,0)
(20,55,0)
(10,6,0)
(56,18,0)
(20,12,0)
(50,55,0)
(31,49,0)
(31,41,0)
(5,22,0)
(42,7,0)
(39,0,0)
(18,28,0)
(40,26,0)
(47,0,0)
(53,39,0)
(28,67,0)
(38,5,0)
(18,0,0)
(11,14,0)
(3,67,0)
(6,66,0)
(69,41,0)
(32,62,0)
(7,66,0)
(43,61,0)
(7,42,0)
(49,28,0)
(39,28,0)
(13,16,0)
(41,60,0)
(32,18,0)
(2,67,0)
(15,22,0)
(19,43,0)
(29,66,0)
(36,22,0)
(58,43,0)
(52,44,0)
(64,32,0)
(62,12,0)
(44,1,0)
(16,26,0)
(5,6,0)
(49,31,0)
(49,66,0)
(68,31,0)
(25,28,0)
(41,66,0)
(48,18,0)
(1,44,0)
(22,5,0)
(9,8,0)
(33,66,0)
(21,49,0)
(46,39,0)
(57,42,0)
(4,47,0)
(14,0,0)
(16,52,0)
(55,39,0)
(66,29,1)
(54,34,1)
(57,37,1)
(16,26,1)
(32,18,1)
(18,48,1)
(4,30,1)
(10,5,1)
(46,47,1)
(49,66,1)
(47,4,1)
(20,55,1)
(68,49,1)
(34,41,1)
(44,52,1)
(27,57,1)
(13,25,1)
(37,54,1)
(28,44,1)
(47,0,1)
(45,7,1)
(50,39,1)
(29,33,1)
(48,56,1)
(5,22,1)
(41,69,1)
(40,13,1)
(15,7,1)
(0,17,1)
(65,28,1)
(6,66,1)
(55,39,1)
(30,14,1)
(35,45,1)
(23,45,1)
(42,27,1)
(44,1,1)
(7,66,1)
(69,31,1)
(14,0,1)
(6,10,1)
(17,23,1)
(26,40,1)
(11,62,1)
(5,38,1)
(31,68,1)
(14,11,1)
(33,65,1)
(39,0,1)
(64,18,1)
(45,65,1)
(56,20,1)
(30,0,1)
(39,53,1)
(54,66,1)
(22,36,1)
(55,50,1)
(38,22,1)
(35,47,1)
(53,46,1)
(49,59,1)
(55,6,1)
(32,41,1)
(31,49,1)
(22,28,1)
(41,66,1)
(59,21,1)
(32,64,1)
(39,28,1)
(7,42,1)
(18,28,1)
(49,28,1)
(18,0,1)
(52,16,1)
(22,66,1)
(37,66,1)
(62,32,1)
(36,15,1)
(21,6,1)
(66,65,2)
(64,47,2)
(31,49,2)
(52,16,2)
(47,45,2)
(32,18,2)
(23,45,2)
(27,7,2)
(14,47,2)
(69,7,2)
(48,47,2)
(21,7,2)
(54,7,2)
(47,47,2)
(29,65,2)
(22,7,2)
(46,47,2)
(39,47,2)
(33,65,2)
(56,47,2)
(14,0,2)
(57,65,2)
(16,26,2)
(55,47,2)
(49,7,2)
(44,1,2)
(22,66,2)
(7,66,2)
(55,6,2)
(54,66,2)
(28,44,2)
(49,66,2)
(0,45,2)
(32,41,2)
(18,28,2)
(6,66,2)
(18,47,2)
(32,47,2)
(37,7,2)
(42,65,2)
(38,7,2)
(41,7,2)
(11,47,2)
(30,45,2)
(49,28,2)
(15,7,2)
(57,7,2)
(68,7,2)
(5,7,2)
(20,55,2)
(22,28,2)
(7,7,2)
(18,0,2)
(47,0,2)
(4,47,2)
(6,7,2)
(20,47,2)
(7,65,2)
(44,52,2)
(53,47,2)
(41,66,2)
(36,7,2)
(17,45,2)
(34,7,2)
(30,47,2)
(27,65,2)
(55,39,2)
(7,42,2)
(39,0,2)
(42,7,2)
(50,47,2)
(10,7,2)
(31,7,2)
(59,7,2)
(37,65,2)
(39,28,2)
(5,22,2)
(4,45,2)
(62,47,2)
(62,32,2)
-----------------------------------
(0,i=0)
(1,twoIntsStruct *)
(2,data)
(3,if(1)
(4,10)
(5,data[i].intOne)
(6,data[i].intOne = i)
(7,i<(10/2)
(8,)
(9,i)
(10,i)
(11,i)
(12,)
(13,10)
(14,i++)
(15,data)
(16,10*sizeof(twoIntsStruct)
(17,0)
(18,data[i])
(19,for(i=0; i<10; i++)
(20,printIntLine(data[i].intOne)
(21,data)
(22,data[i])
(23,i)
(24,)
(25,data)
(26,sizeof(twoIntsStruct)
(27,2)
(28,data = (twoIntsStruct *)
(29,0)
(30,i)
(31,data[i].intTwo)
(32,data[i].intTwo)
(33,i)
(34,i)
(35,RET)
(36,i)
(37,i)
(38,intOne)
(39,data[i])
(40,twoIntsStruct)
(41,data[i].intTwo = i)
(42,10/2)
(43,)
(44,(twoIntsStruct *)
(45,1)
(46,data)
(47,i<10)
(48,i)
(49,data[i])
(50,intOne)
(51,for(i=0; i<(10/2)
(52,ALLOCA(10*sizeof(twoIntsStruct)
(53,i)
(54,i++)
(55,data[i].intOne)
(56,data)
(57,10)
(58,i)
(59,i)
(60,)
(61,)
(62,printIntLine(data[i].intTwo)
(63,if(1)
(64,intTwo)
(65,1)
(66,i=0)
(67,)
(68,intTwo)
(69,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^