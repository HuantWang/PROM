-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Don't initialize data */
    ; /* empty statement needed for some flow variants */
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
44,45
44,46
45,46
46,47
46,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,43,47,49,54,55,58,59,62,67,70,72
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
52,53
52,54
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Don't initialize data */    ; /* empty statement needed for some flow variants */    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Don't initialize data */    ; /* empty statement needed for some flow variants */    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
;
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(11,2,0)
(10,17,0)
(19,29,0)
(12,31,0)
(27,18,0)
(3,18,0)
(25,17,0)
(14,23,0)
(32,28,0)
(13,23,0)
(21,20,0)
(19,3,0)
(4,30,0)
(20,21,0)
(12,16,0)
(22,18,0)
(23,3,0)
(2,11,0)
(20,26,0)
(34,21,0)
(16,12,0)
(28,18,0)
(29,9,0)
(15,3,0)
(2,16,0)
(3,2,0)
(7,17,0)
(19,17,0)
(6,31,0)
(35,19,0)
(1,12,0)
(0,28,0)
(29,19,0)
(8,10,0)
(31,12,0)
(16,2,0)
(30,17,0)
(2,3,0)
(24,19,0)
(5,10,0)
(34,23,1)
(25,23,1)
(14,13,1)
(29,19,1)
(7,25,1)
(25,20,1)
(24,35,1)
(31,6,1)
(30,17,1)
(16,12,1)
(12,31,1)
(3,2,1)
(35,10,1)
(13,3,1)
(4,29,1)
(10,17,1)
(19,3,1)
(5,30,1)
(5,17,1)
(23,3,1)
(21,34,1)
(23,14,1)
(10,8,1)
(30,4,1)
(19,24,1)
(2,16,1)
(2,11,1)
(33,10,1)
(1,15,1)
(17,7,1)
(6,1,1)
(19,17,1)
(8,5,1)
(20,21,1)
(30,17,2)
(20,23,2)
(30,10,2)
(3,2,2)
(21,23,2)
(23,3,2)
(19,10,2)
(8,10,2)
(29,10,2)
(4,10,2)
(5,10,2)
(34,23,2)
(12,31,2)
(19,3,2)
(16,12,2)
(24,10,2)
(10,17,2)
(20,21,2)
(35,10,2)
(2,11,2)
(29,19,2)
(10,10,2)
(19,17,2)
(2,16,2)
-----------------------------------
(0,for(i=0; i<10; i++)
(1,10)
(2,(int *)
(3,data = (int *)
(4,i)
(5,i)
(6,int)
(7,0)
(8,10)
(9,)
(10,i<10)
(11,int *)
(12,10*sizeof(int)
(13,data)
(14,NULL)
(15,data)
(16,malloc(10*sizeof(int)
(17,i=0)
(18,)
(19,data[i])
(20,exit(-1)
(21,-1)
(22,if (data == NULL)
(23,data == NULL)
(24,i)
(25,i)
(26,)
(27,data)
(28,)
(29,printIntLine(data[i])
(30,i++)
(31,sizeof(int)
(32,i)
(33,RET)
(34,1)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^