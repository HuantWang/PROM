-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_10_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
36,37
38,39
38,40
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
70,71
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,37,40,45,47,52,53,56,57,60,65,69,71,72,76,80,82,83
-----computeFrom-----
14,15
14,16
26,27
26,28
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_10_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_10_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_10_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(34,15,0)
(3,26,0)
(6,14,0)
(27,22,0)
(30,9,0)
(5,13,0)
(36,29,0)
(0,9,0)
(24,7,0)
(8,34,0)
(2,8,0)
(28,29,0)
(16,13,0)
(39,19,0)
(17,34,0)
(10,36,0)
(20,19,0)
(26,24,0)
(22,4,0)
(24,15,0)
(13,26,0)
(33,29,0)
(4,22,0)
(13,22,0)
(37,6,0)
(36,9,0)
(4,38,0)
(7,24,0)
(22,13,0)
(25,23,0)
(15,24,0)
(1,23,0)
(29,33,0)
(40,9,0)
(35,0,0)
(33,38,0)
(12,23,0)
(26,23,0)
(24,26,0)
(36,26,0)
(29,36,0)
(11,36,0)
(34,8,0)
(19,9,0)
(21,6,0)
(13,9,0)
(15,34,0)
(8,2,1)
(36,9,1)
(29,28,1)
(22,13,1)
(10,11,1)
(24,15,1)
(24,7,1)
(15,34,1)
(20,0,1)
(0,35,1)
(20,9,1)
(18,19,1)
(13,5,1)
(35,4,1)
(11,19,1)
(27,13,1)
(40,30,1)
(19,9,1)
(33,29,1)
(19,39,1)
(13,26,1)
(16,33,1)
(28,36,1)
(32,26,1)
(34,8,1)
(39,20,1)
(13,9,1)
(30,31,1)
(26,24,1)
(36,26,1)
(31,32,1)
(29,36,1)
(17,3,1)
(2,17,1)
(36,10,1)
(4,22,1)
(5,16,1)
(18,31,1)
(22,27,1)
(9,40,1)
(0,9,1)
(4,19,2)
(22,13,2)
(15,34,2)
(36,9,2)
(4,22,2)
(36,19,2)
(19,31,2)
(22,19,2)
(30,31,2)
(13,26,2)
(19,19,2)
(11,19,2)
(29,36,2)
(5,19,2)
(33,29,2)
(27,19,2)
(34,8,2)
(19,9,2)
(40,31,2)
(26,24,2)
(24,7,2)
(10,19,2)
(13,9,2)
(16,19,2)
(36,26,2)
(0,9,2)
(39,19,2)
(13,19,2)
(28,19,2)
(24,15,2)
(33,19,2)
(29,19,2)
(20,31,2)
(9,31,2)
(35,19,2)
(20,19,2)
(39,31,2)
(0,19,2)
-----------------------------------
(0,i++)
(1,data)
(2,twoIntsStruct)
(3,data)
(4,printIntLine(data[i].intTwo)
(5,i)
(6,)
(7,twoIntsStruct *)
(8,sizeof(twoIntsStruct)
(9,i=0)
(10,i)
(11,data)
(12,if(globalTrue)
(13,data[i])
(14,)
(15,ALLOCA(10*sizeof(twoIntsStruct)
(16,data)
(17,10)
(18,RET)
(19,i<10)
(20,i)
(21,for(i=0; i<10; i++)
(22,data[i].intTwo)
(23,)
(24,(twoIntsStruct *)
(25,if(globalTrue)
(26,data = (twoIntsStruct *)
(27,intTwo)
(28,intOne)
(29,data[i].intOne)
(30,i)
(31,globalTrue)
(32,globalTrue)
(33,printIntLine(data[i].intOne)
(34,10*sizeof(twoIntsStruct)
(35,i)
(36,data[i])
(37,i)
(38,)
(39,10)
(40,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^