-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_15_bad()
{
    int * data;
    int dataUninitArray[10];
    data = dataUninitArray;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i] = i;
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
27,29
27,30
27,31
27,32
27,33
28,29
30,31
30,32
31,32
32,33
32,34
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
46,47
46,48
49,50
50,51
52,53
53,54
54,55
54,56
55,56
55,57
56,57
58,59
60,61
64,65
65,66
65,67
66,67
70,71
70,72
72,73
72,74
72,75
72,76
72,77
72,78
73,74
75,76
75,77
76,77
77,78
77,79
79,80
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
87,88
87,89
88,89
91,92
92,93
94,95
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,26,29,33,35,40,41,44,47,48,51,57,59,61,62,63,67,68,69,71,74,78,80,85,86,89,90,93,98,101,103,104,105,109,110,111
-----computeFrom-----
20,21
20,22
38,39
38,40
42,43
42,44
46,47
46,48
54,55
54,56
83,84
83,85
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_15_bad(){    int * data;    int dataUninitArray[10];    data = dataUninitArray;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_declare_partial_init_15_bad
{    int * data;    int dataUninitArray[10];    data = dataUninitArray;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
int dataUninitArray[10];
int dataUninitArray[10];
int
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i] = i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i] = i;        }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(34,16,0)
(26,1,0)
(55,11,0)
(3,36,0)
(10,1,0)
(18,32,0)
(24,31,0)
(45,13,0)
(19,31,0)
(36,13,0)
(57,36,0)
(16,1,0)
(11,55,0)
(49,14,0)
(44,5,0)
(9,18,0)
(44,16,0)
(5,44,0)
(44,31,0)
(7,13,0)
(23,44,0)
(33,52,0)
(41,13,0)
(20,14,0)
(12,55,0)
(11,13,0)
(59,11,0)
(53,31,0)
(25,1,0)
(35,16,0)
(56,37,0)
(15,32,0)
(48,14,0)
(41,30,0)
(46,32,0)
(36,16,0)
(28,55,0)
(39,4,0)
(50,1,0)
(27,32,0)
(44,41,0)
(40,41,0)
(4,14,0)
(37,32,0)
(38,14,0)
(36,41,0)
(52,31,0)
(22,52,0)
(58,44,0)
(6,32,0)
(51,0,0)
(2,14,0)
(0,13,0)
(5,21,0)
(29,4,0)
(8,37,0)
(17,20,0)
(47,19,0)
(7,45,1)
(44,23,1)
(52,22,1)
(43,2,1)
(57,11,1)
(0,13,1)
(34,35,1)
(40,36,1)
(9,54,1)
(11,55,1)
(5,44,1)
(51,41,1)
(52,31,1)
(55,12,1)
(33,19,1)
(42,15,1)
(36,13,1)
(20,17,1)
(16,34,1)
(0,51,1)
(31,53,1)
(53,24,1)
(18,9,1)
(54,16,1)
(59,0,1)
(15,18,1)
(28,59,1)
(27,11,1)
(41,40,1)
(59,13,1)
(42,27,1)
(2,52,1)
(3,57,1)
(36,3,1)
(17,42,1)
(23,58,1)
(36,16,1)
(43,48,1)
(44,31,1)
(19,31,1)
(22,33,1)
(47,5,1)
(33,31,1)
(13,7,1)
(44,41,1)
(48,20,1)
(19,47,1)
(45,54,1)
(41,13,1)
(58,52,1)
(44,16,1)
(24,42,1)
(12,28,1)
(11,13,1)
(41,13,2)
(51,11,2)
(47,52,2)
(33,52,2)
(11,55,2)
(19,31,2)
(23,52,2)
(7,54,2)
(24,42,2)
(44,52,2)
(44,31,2)
(44,16,2)
(19,52,2)
(59,11,2)
(20,42,2)
(27,54,2)
(41,11,2)
(9,54,2)
(11,13,2)
(45,54,2)
(12,11,2)
(36,13,2)
(57,11,2)
(55,11,2)
(12,54,2)
(28,11,2)
(59,54,2)
(36,11,2)
(52,52,2)
(17,42,2)
(2,42,2)
(52,42,2)
(18,54,2)
(5,44,2)
(31,42,2)
(11,54,2)
(53,42,2)
(40,11,2)
(5,52,2)
(52,31,2)
(36,16,2)
(58,52,2)
(48,42,2)
(0,13,2)
(15,54,2)
(44,41,2)
(33,42,2)
(22,52,2)
(22,42,2)
(0,11,2)
(13,54,2)
(11,11,2)
(3,11,2)
(55,54,2)
(28,54,2)
-----------------------------------
(0,i++)
(1,)
(2,break;)
(3,i)
(4,)
(5,printIntLine(data[i])
(6,case 6:)
(7,0)
(8,i)
(9,"Benign, fixed string")
(10,data)
(11,i<(10/2)
(12,2)
(13,i=0)
(14,)
(15,break;)
(16,data = dataUninitArray)
(17,"Benign, fixed string")
(18,printLine("Benign, fixed string")
(19,i++)
(20,printLine("Benign, fixed string")
(21,)
(22,10)
(23,i)
(24,i)
(25,switch(6)
(26,switch(7)
(27,break;)
(28,10)
(29,for(i=0; i<10; i++)
(30,)
(31,i=0)
(32,)
(33,i)
(34,dataUninitArray)
(35,data)
(36,data[i])
(37,)
(38,case 7:)
(39,i)
(40,i)
(41,data[i] = i)
(42,7)
(43,RET)
(44,data[i])
(45,i)
(46,default:)
(47,i)
(48,break;)
(49,default:)
(50,dataUninitArray)
(51,i)
(52,i<10)
(53,0)
(54,6)
(55,10/2)
(56,for(i=0; i<(10/2)
(57,data)
(58,data)
(59,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^