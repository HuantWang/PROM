-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_02_bad()
{
    double * data;
    double dataUninitArray[10];
    data = dataUninitArray;
    if(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
34,35
34,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
44,45
44,46
45,46
48,49
49,50
51,52
52,53
53,54
53,55
54,55
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,26,28,30,35,37,42,43,46,47,50,55,58,60
-----computeFrom-----
20,21
20,22
40,41
40,42
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_02_bad(){    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_02_bad
{    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
double dataUninitArray[10];
double dataUninitArray[10];
double
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(10,12,0)
(6,12,0)
(11,12,0)
(18,23,0)
(0,6,0)
(26,6,0)
(17,6,0)
(24,23,0)
(5,16,0)
(13,23,0)
(7,20,0)
(14,23,0)
(16,15,0)
(1,24,0)
(9,23,0)
(6,24,0)
(17,22,0)
(8,24,0)
(25,11,0)
(4,12,0)
(27,20,0)
(6,17,0)
(20,12,0)
(19,16,0)
(12,4,1)
(27,11,1)
(11,12,1)
(2,21,1)
(24,1,1)
(27,12,1)
(0,20,1)
(2,20,1)
(25,17,1)
(26,0,1)
(17,6,1)
(4,10,1)
(20,12,1)
(7,27,1)
(20,7,1)
(3,24,1)
(6,26,1)
(6,12,1)
(6,24,1)
(11,25,1)
(1,8,1)
(21,3,1)
(10,21,1)
(0,20,2)
(11,12,2)
(7,20,2)
(17,20,2)
(17,6,2)
(6,24,2)
(6,20,2)
(12,21,2)
(25,20,2)
(20,20,2)
(6,12,2)
(20,21,2)
(4,21,2)
(27,20,2)
(20,12,2)
(7,21,2)
(10,21,2)
(27,21,2)
(26,20,2)
(11,20,2)
-----------------------------------
(0,data)
(1,dataUninitArray)
(2,RET)
(3,1)
(4,0)
(5,for(i=0; i<10; i++)
(6,data[i])
(7,10)
(8,data)
(9,if(1)
(10,i)
(11,i++)
(12,i=0)
(13,if(1)
(14,dataUninitArray)
(15,)
(16,)
(17,printDoubleLine(data[i])
(18,data)
(19,i)
(20,i<10)
(21,1)
(22,)
(23,)
(24,data = dataUninitArray)
(25,i)
(26,i)
(27,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^