-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
64,65
64,66
67,68
67,69
67,70
68,69
68,70
69,70
71,72
71,73
72,73
74,75
76,77
76,78
76,79
76,80
76,81
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
84,85
86,87
86,88
87,88
89,90
89,91
90,91
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
110,113
111,112
113,114
115,116
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,65,66,70,73,75,80,83,85,88,91,94,95,99,101,106,108,112,114,116,120,122,126,128,133,134
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
68,69
68,70
78,79
78,80
89,90
89,91
97,98
97,99
-----guardedBy-----
34,50
40,52
75,116
70,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(27,45,0)
(50,53,0)
(55,26,0)
(12,32,0)
(59,56,0)
(18,17,0)
(61,4,0)
(21,20,0)
(35,8,0)
(57,13,0)
(55,51,0)
(14,56,0)
(16,62,0)
(61,26,0)
(59,14,0)
(51,55,0)
(7,27,0)
(33,14,0)
(61,36,0)
(13,14,0)
(28,2,0)
(31,61,0)
(42,6,0)
(8,6,0)
(41,45,0)
(36,61,0)
(6,3,0)
(16,20,0)
(60,4,0)
(43,33,0)
(38,55,0)
(23,47,0)
(46,27,0)
(20,16,0)
(11,56,0)
(25,56,0)
(49,45,0)
(13,56,0)
(18,14,0)
(29,5,0)
(22,26,0)
(1,47,0)
(6,8,0)
(10,26,0)
(26,5,0)
(17,18,0)
(18,36,0)
(40,23,0)
(45,5,0)
(37,8,0)
(25,14,0)
(19,23,0)
(36,18,0)
(55,6,0)
(47,23,0)
(34,23,0)
(58,59,0)
(23,27,0)
(14,18,0)
(24,13,0)
(0,32,0)
(61,6,0)
(30,51,0)
(32,5,0)
(53,54,0)
(48,8,0)
(52,25,0)
(44,14,0)
(15,33,0)
(2,9,0)
(4,61,0)
(8,27,0)
(20,21,1)
(47,23,1)
(43,14,1)
(25,52,1)
(61,4,1)
(40,34,1)
(23,27,1)
(61,6,1)
(55,26,1)
(38,2,1)
(28,47,1)
(37,35,1)
(52,59,1)
(4,60,1)
(47,1,1)
(24,16,1)
(59,58,1)
(19,40,1)
(18,17,1)
(39,53,1)
(33,15,1)
(31,44,1)
(33,14,1)
(18,36,1)
(25,14,1)
(39,25,1)
(8,27,1)
(55,51,1)
(27,46,1)
(44,55,1)
(13,57,1)
(13,14,1)
(61,26,1)
(36,61,1)
(21,33,1)
(7,26,1)
(60,31,1)
(22,10,1)
(23,19,1)
(35,42,1)
(51,30,1)
(8,48,1)
(50,55,1)
(1,23,1)
(46,7,1)
(55,6,1)
(48,37,1)
(58,13,1)
(16,20,1)
(14,18,1)
(34,27,1)
(57,24,1)
(6,8,1)
(2,28,1)
(15,43,1)
(38,6,1)
(24,33,1)
(42,47,1)
(26,22,1)
(30,38,1)
(53,50,1)
(59,14,1)
(21,33,2)
(61,4,2)
(59,55,2)
(57,55,2)
(36,61,2)
(37,47,2)
(15,55,2)
(42,47,2)
(55,6,2)
(28,47,2)
(59,14,2)
(16,20,2)
(44,55,2)
(36,55,2)
(33,14,2)
(35,47,2)
(6,8,2)
(55,26,2)
(18,36,2)
(24,55,2)
(4,55,2)
(8,47,2)
(43,55,2)
(23,27,2)
(6,47,2)
(14,18,2)
(50,55,2)
(61,6,2)
(13,55,2)
(14,55,2)
(33,55,2)
(8,27,2)
(18,55,2)
(61,26,2)
(31,55,2)
(25,55,2)
(55,51,2)
(58,55,2)
(48,47,2)
(20,33,2)
(60,55,2)
(16,33,2)
(25,14,2)
(53,55,2)
(61,55,2)
(18,17,2)
(47,23,2)
(2,47,2)
(52,55,2)
(13,14,2)
-----------------------------------
(0,myString)
(1,NULL)
(2,printLine("fgets()
(3,)
(4,sizeof(char)
(5,)
(6,data = strtoul(inputBuffer, NULL, 0)
(7,inputBuffer)
(8,strtoul(inputBuffer, NULL, 0)
(9,)
(10,data)
(11,if (myString == NULL)
(12,if (data > strlen(HELLO_STRING)
(13,strcpy(myString, HELLO_STRING)
(14,myString = (char *)
(15,NULL)
(16,exit(-1)
(17,char *)
(18,(char *)
(19,stdin)
(20,-1)
(21,1)
(22,0)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,myString)
(25,free(myString)
(26,data = 0)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,"fgets()
(29,data)
(30,HELLO_STRING)
(31,data)
(32,)
(33,myString == NULL)
(34,inputBuffer)
(35,inputBuffer)
(36,malloc(data*sizeof(char)
(37,NULL)
(38,data)
(39,RET)
(40,CHAR_ARRAY_SIZE)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,data)
(43,myString)
(44,myString)
(45,)
(46,"")
(47,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,0)
(49,inputBuffer)
(50,"Input is less than the length of the source string")
(51,strlen(HELLO_STRING)
(52,myString)
(53,printLine("Input is less than the length of the source string")
(54,)
(55,data > strlen(HELLO_STRING)
(56,)
(57,HELLO_STRING)
(58,myString)
(59,printLine(myString)
(60,char)
(61,data*sizeof(char)
(62,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^