-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_15_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
48,49
48,50
48,51
48,52
48,53
48,54
49,50
54,55
55,56
55,57
56,57
60,61
60,62
62,63
62,64
62,65
62,66
62,67
62,68
63,64
65,66
65,67
66,67
67,68
67,69
69,70
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
81,82
82,83
84,85
84,86
85,86
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
104,105
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,47,50,51,52,53,57,58,59,61,64,68,70,75,76,79,80,83,88,92,94,95,99,103,105,106,107,108,112,113,114
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
73,74
73,75
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_15_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_15_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(32,52,0)
(38,30,0)
(3,45,0)
(26,40,0)
(11,23,0)
(15,0,0)
(29,10,0)
(0,51,0)
(20,22,0)
(31,10,0)
(43,40,0)
(19,28,0)
(5,19,0)
(2,54,0)
(20,5,0)
(51,60,0)
(16,53,0)
(18,10,0)
(61,53,0)
(27,47,0)
(31,8,0)
(19,5,0)
(18,28,0)
(13,20,0)
(7,8,0)
(51,28,0)
(48,30,0)
(33,60,0)
(10,31,0)
(17,60,0)
(59,26,0)
(9,40,0)
(14,53,0)
(46,19,0)
(21,40,0)
(22,20,0)
(12,53,0)
(37,28,0)
(54,53,0)
(36,22,0)
(56,51,0)
(30,60,0)
(23,53,0)
(4,54,0)
(42,45,0)
(52,49,0)
(41,45,0)
(55,51,0)
(50,33,0)
(28,19,0)
(10,18,0)
(39,18,0)
(52,32,0)
(7,0,0)
(58,18,0)
(57,45,0)
(5,20,0)
(44,32,0)
(0,7,0)
(18,60,0)
(47,28,0)
(6,40,0)
(19,46,0)
(34,47,0)
(28,45,0)
(51,0,0)
(1,60,0)
(9,26,1)
(38,33,1)
(51,60,1)
(35,12,1)
(50,31,1)
(30,48,1)
(14,23,1)
(7,0,1)
(34,27,1)
(35,14,1)
(10,29,1)
(30,60,1)
(15,51,1)
(38,60,1)
(55,30,1)
(23,11,1)
(5,20,1)
(52,32,1)
(58,7,1)
(47,28,1)
(33,60,1)
(0,51,1)
(60,17,1)
(56,55,1)
(24,47,1)
(0,15,1)
(29,18,1)
(31,10,1)
(26,59,1)
(21,24,1)
(18,39,1)
(28,19,1)
(18,60,1)
(51,56,1)
(51,28,1)
(36,13,1)
(59,24,1)
(11,25,1)
(10,18,1)
(39,58,1)
(25,21,1)
(48,38,1)
(22,36,1)
(47,34,1)
(27,28,1)
(20,22,1)
(33,50,1)
(1,25,1)
(17,1,1)
(13,37,1)
(24,52,1)
(18,28,1)
(25,9,1)
(12,30,1)
(19,5,1)
(44,47,1)
(19,46,1)
(32,44,1)
(21,24,2)
(28,19,2)
(1,25,2)
(60,25,2)
(23,25,2)
(30,30,2)
(30,25,2)
(0,30,2)
(18,60,2)
(17,25,2)
(26,24,2)
(19,5,2)
(58,30,2)
(44,47,2)
(51,30,2)
(32,47,2)
(51,28,2)
(59,24,2)
(31,30,2)
(56,30,2)
(18,28,2)
(52,47,2)
(38,30,2)
(11,25,2)
(14,25,2)
(20,22,2)
(5,20,2)
(55,30,2)
(48,30,2)
(38,25,2)
(7,0,2)
(10,30,2)
(10,18,2)
(50,30,2)
(9,24,2)
(47,28,2)
(52,32,2)
(48,25,2)
(30,60,2)
(29,30,2)
(51,60,2)
(7,30,2)
(15,30,2)
(12,25,2)
(33,60,2)
(18,30,2)
(33,30,2)
(0,51,2)
(31,10,2)
(39,30,2)
(19,46,2)
-----------------------------------
(0,data[i].intOne)
(1,i)
(2,for(i=0; i<10; i++)
(3,if (data == NULL)
(4,i)
(5,malloc(10*sizeof(twoIntsStruct)
(6,case 6:)
(7,printIntLine(data[i].intOne)
(8,)
(9,break;)
(10,data[i].intTwo)
(11,"Benign, fixed string")
(12,break;)
(13,10)
(14,break;)
(15,intOne)
(16,default:)
(17,0)
(18,data[i])
(19,(twoIntsStruct *)
(20,10*sizeof(twoIntsStruct)
(21,break;)
(22,sizeof(twoIntsStruct)
(23,printLine("Benign, fixed string")
(24,6)
(25,7)
(26,printLine("Benign, fixed string")
(27,data)
(28,data = (twoIntsStruct *)
(29,intTwo)
(30,i<10)
(31,printIntLine(data[i].intTwo)
(32,-1)
(33,i++)
(34,NULL)
(35,RET)
(36,twoIntsStruct)
(37,data)
(38,i)
(39,i)
(40,)
(41,data)
(42,switch(6)
(43,default:)
(44,1)
(45,)
(46,twoIntsStruct *)
(47,data == NULL)
(48,10)
(49,)
(50,i)
(51,data[i])
(52,exit(-1)
(53,)
(54,)
(55,data)
(56,i)
(57,switch(7)
(58,data)
(59,"Benign, fixed string")
(60,i=0)
(61,case 7:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^