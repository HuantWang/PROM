-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_05_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
50,51
50,52
51,52
52,53
52,54
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
65,66
66,67
66,68
69,70
70,71
72,73
72,74
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
82,83
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
90,91
93,94
95,96
95,97
96,97
98,99
99,100
99,101
100,101
101,102
101,103
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
118,120
119,120
120,121
120,122
121,122
123,124
123,125
124,125
124,126
125,126
127,128
130,131
131,132
131,133
132,133
134,135
134,136
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,48,53,55,60,61,64,67,68,71,78,80,81,83,89,91,92,94,97,102,104,109,110,113,114,117,122,126,128,129,133,137,139,140
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
58,59
58,60
62,63
62,64
66,67
66,68
74,75
74,76
85,86
85,87
107,108
107,109
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_05_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_05_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(13,15,0)
(6,21,0)
(51,49,0)
(59,56,0)
(55,12,0)
(50,33,0)
(1,54,0)
(47,20,0)
(17,25,0)
(19,62,0)
(21,75,0)
(11,9,0)
(29,3,0)
(24,48,0)
(51,14,0)
(20,49,0)
(63,11,0)
(68,49,0)
(10,2,0)
(15,23,0)
(9,51,0)
(12,25,0)
(54,33,0)
(42,75,0)
(22,19,0)
(62,19,0)
(9,11,0)
(56,23,0)
(33,54,0)
(25,12,0)
(39,35,0)
(16,68,0)
(8,61,0)
(4,53,0)
(74,77,0)
(60,75,0)
(13,36,0)
(29,13,0)
(31,61,0)
(43,23,0)
(36,49,0)
(61,38,0)
(41,2,0)
(43,21,0)
(71,56,0)
(2,21,0)
(65,54,0)
(13,29,0)
(33,49,0)
(76,68,0)
(55,74,0)
(45,11,0)
(53,23,0)
(64,49,0)
(76,36,0)
(52,12,0)
(15,13,0)
(72,75,0)
(68,76,0)
(37,49,0)
(24,30,0)
(77,74,0)
(35,27,0)
(12,55,0)
(68,21,0)
(62,3,0)
(44,43,0)
(18,15,0)
(74,21,0)
(67,23,0)
(46,36,0)
(57,15,0)
(11,49,0)
(36,14,0)
(70,23,0)
(15,21,0)
(74,55,0)
(5,68,0)
(19,51,0)
(48,24,0)
(19,43,0)
(7,35,0)
(66,13,0)
(28,48,0)
(58,9,0)
(73,76,0)
(0,43,0)
(11,21,0)
(21,74,0)
(34,75,0)
(69,51,0)
(43,19,0)
(74,55,1)
(53,4,1)
(51,69,1)
(59,71,1)
(47,36,1)
(53,23,1)
(18,57,1)
(26,32,1)
(5,51,1)
(11,63,1)
(9,11,1)
(58,11,1)
(9,58,1)
(10,41,1)
(40,26,1)
(68,16,1)
(52,6,1)
(33,49,1)
(68,21,1)
(50,49,1)
(43,21,1)
(74,77,1)
(13,15,1)
(67,26,1)
(46,76,1)
(15,23,1)
(48,28,1)
(57,62,1)
(19,22,1)
(76,68,1)
(37,64,1)
(73,68,1)
(36,46,1)
(15,21,1)
(13,36,1)
(51,49,1)
(66,15,1)
(56,59,1)
(29,13,1)
(19,43,1)
(71,23,1)
(2,10,1)
(43,44,1)
(68,49,1)
(16,5,1)
(25,17,1)
(44,0,1)
(36,49,1)
(12,25,1)
(54,1,1)
(20,49,1)
(45,33,1)
(2,21,1)
(19,51,1)
(64,32,1)
(55,12,1)
(70,67,1)
(22,43,1)
(1,65,1)
(11,49,1)
(11,21,1)
(28,2,1)
(0,56,1)
(71,53,1)
(13,66,1)
(4,29,1)
(20,47,1)
(41,21,1)
(65,50,1)
(15,18,1)
(23,70,1)
(49,37,1)
(33,54,1)
(21,74,1)
(17,52,1)
(50,20,1)
(56,23,1)
(43,23,1)
(32,2,1)
(76,73,1)
(24,48,1)
(69,9,1)
(40,56,1)
(62,19,1)
(63,45,1)
(26,33,1)
(32,24,1)
(13,36,2)
(0,56,2)
(1,32,2)
(65,33,2)
(16,33,2)
(20,49,2)
(50,32,2)
(37,32,2)
(13,56,2)
(62,56,2)
(58,33,2)
(23,26,2)
(56,26,2)
(53,23,2)
(63,33,2)
(5,33,2)
(76,68,2)
(74,77,2)
(15,21,2)
(45,33,2)
(18,56,2)
(33,32,2)
(47,33,2)
(54,33,2)
(74,55,2)
(59,56,2)
(69,33,2)
(24,48,2)
(67,26,2)
(29,13,2)
(71,26,2)
(56,23,2)
(22,56,2)
(68,49,2)
(54,32,2)
(43,23,2)
(15,56,2)
(36,33,2)
(73,33,2)
(15,23,2)
(70,26,2)
(19,56,2)
(76,33,2)
(4,56,2)
(51,49,2)
(43,56,2)
(71,56,2)
(49,32,2)
(11,21,2)
(56,56,2)
(36,49,2)
(62,19,2)
(68,33,2)
(59,26,2)
(9,33,2)
(44,56,2)
(33,49,2)
(21,74,2)
(28,2,2)
(2,21,2)
(13,15,2)
(57,56,2)
(24,2,2)
(46,33,2)
(48,2,2)
(43,21,2)
(11,33,2)
(9,11,2)
(55,12,2)
(11,49,2)
(33,33,2)
(1,33,2)
(65,32,2)
(68,21,2)
(20,33,2)
(19,51,2)
(33,54,2)
(29,56,2)
(50,33,2)
(51,33,2)
(19,43,2)
(12,25,2)
(66,56,2)
(64,32,2)
(53,56,2)
-----------------------------------
(0,data)
(1,2)
(2,data == NULL)
(3,)
(4,i)
(5,data)
(6,data)
(7,for(i=0; i<(10/2)
(8,i)
(9,data[i].intOne)
(10,NULL)
(11,data[i])
(12,10*sizeof(twoIntsStruct)
(13,data[i].intTwo)
(14,)
(15,data[i])
(16,i)
(17,twoIntsStruct)
(18,i)
(19,data[i].intOne)
(20,i++)
(21,data = (twoIntsStruct *)
(22,intOne)
(23,i=0)
(24,exit(-1)
(25,sizeof(twoIntsStruct)
(26,staticTrue)
(27,)
(28,1)
(29,printIntLine(data[i].intTwo)
(30,)
(31,for(i=0; i<10; i++)
(32,staticTrue)
(33,i<(10/2)
(34,if(staticTrue)
(35,)
(36,data[i].intTwo = i)
(37,0)
(38,)
(39,i)
(40,RET)
(41,data)
(42,data)
(43,data[i])
(44,i)
(45,data)
(46,i)
(47,i)
(48,-1)
(49,i=0)
(50,i)
(51,data[i].intOne = i)
(52,10)
(53,i++)
(54,10/2)
(55,malloc(10*sizeof(twoIntsStruct)
(56,i<10)
(57,data)
(58,intOne)
(59,10)
(60,if(staticTrue)
(61,)
(62,printIntLine(data[i].intOne)
(63,i)
(64,i)
(65,10)
(66,intTwo)
(67,i)
(68,data[i])
(69,i)
(70,0)
(71,i)
(72,if (data == NULL)
(73,intTwo)
(74,(twoIntsStruct *)
(75,)
(76,data[i].intTwo)
(77,twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^