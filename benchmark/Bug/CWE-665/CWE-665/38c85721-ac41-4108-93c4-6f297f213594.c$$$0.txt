-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_08_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
39,40
39,41
40,41
41,42
43,44
44,45
44,46
45,46
46,47
46,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
70,71
72,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,42,47,49,54,55,58,59,62,67,71,73,74,78,82,84,85
-----computeFrom-----
14,15
14,16
26,27
26,28
52,53
52,54
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_08_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_08_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(11,35,0)
(20,5,0)
(17,27,0)
(39,15,0)
(25,13,0)
(40,5,0)
(2,39,0)
(29,30,0)
(35,13,0)
(16,36,0)
(31,10,0)
(13,25,0)
(35,28,0)
(3,19,0)
(23,14,0)
(33,14,0)
(10,18,0)
(27,19,0)
(25,9,0)
(5,15,0)
(1,17,0)
(37,36,0)
(19,28,0)
(32,28,0)
(22,30,0)
(33,9,0)
(26,30,0)
(6,35,0)
(19,27,0)
(36,15,0)
(35,15,0)
(17,7,0)
(28,19,0)
(4,10,0)
(14,5,0)
(5,14,0)
(19,3,0)
(34,7,0)
(38,15,0)
(13,35,0)
(12,13,0)
(7,17,0)
(5,28,0)
(27,17,0)
(14,33,0)
(0,15,0)
(28,30,0)
(27,17,1)
(12,35,1)
(25,13,1)
(33,14,1)
(20,40,1)
(35,15,1)
(35,28,1)
(19,3,1)
(40,36,1)
(5,15,1)
(14,23,1)
(5,20,1)
(37,39,1)
(38,0,1)
(24,28,1)
(19,27,1)
(37,15,1)
(15,38,1)
(17,7,1)
(16,37,1)
(21,24,1)
(5,28,1)
(2,25,1)
(8,36,1)
(1,32,1)
(39,15,1)
(34,1,1)
(13,12,1)
(35,6,1)
(11,33,1)
(28,19,1)
(23,5,1)
(14,5,1)
(7,34,1)
(13,35,1)
(0,21,1)
(39,2,1)
(36,16,1)
(36,15,1)
(8,21,1)
(6,11,1)
(6,36,2)
(14,5,2)
(36,36,2)
(40,36,2)
(17,7,2)
(5,15,2)
(27,17,2)
(37,36,2)
(16,36,2)
(35,15,2)
(19,27,2)
(5,28,2)
(35,36,2)
(39,36,2)
(19,3,2)
(13,35,2)
(36,21,2)
(25,36,2)
(20,36,2)
(33,36,2)
(12,36,2)
(37,21,2)
(38,21,2)
(14,36,2)
(2,36,2)
(0,21,2)
(23,36,2)
(28,19,2)
(36,15,2)
(33,14,2)
(15,21,2)
(11,36,2)
(39,15,2)
(5,36,2)
(25,13,2)
(16,21,2)
(35,28,2)
(13,36,2)
-----------------------------------
(0,i)
(1,10)
(2,i)
(3,twoIntsStruct *)
(4,for(i=0; i<10; i++)
(5,data[i])
(6,i)
(7,sizeof(twoIntsStruct)
(8,RET)
(9,)
(10,)
(11,data)
(12,intTwo)
(13,data[i].intTwo)
(14,data[i].intOne)
(15,i=0)
(16,10)
(17,10*sizeof(twoIntsStruct)
(18,)
(19,(twoIntsStruct *)
(20,i)
(21,staticReturnsTrue()
(22,if(staticReturnsTrue()
(23,intOne)
(24,staticReturnsTrue()
(25,printIntLine(data[i].intTwo)
(26,data)
(27,ALLOCA(10*sizeof(twoIntsStruct)
(28,data = (twoIntsStruct *)
(29,if(staticReturnsTrue()
(30,)
(31,i)
(32,data)
(33,printIntLine(data[i].intOne)
(34,twoIntsStruct)
(35,data[i])
(36,i<10)
(37,i)
(38,0)
(39,i++)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^