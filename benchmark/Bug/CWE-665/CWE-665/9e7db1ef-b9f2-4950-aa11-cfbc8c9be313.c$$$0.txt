-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
41,82
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad(){    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad
{    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(36,21,0)
(42,19,0)
(6,31,0)
(25,37,0)
(4,31,0)
(44,39,0)
(32,19,0)
(23,0,0)
(18,34,0)
(21,10,0)
(40,0,0)
(18,35,0)
(0,23,0)
(11,35,0)
(28,34,0)
(12,19,0)
(7,11,0)
(34,18,0)
(43,30,0)
(31,10,0)
(39,0,0)
(26,35,0)
(33,43,0)
(1,12,0)
(17,22,0)
(35,10,0)
(11,5,0)
(5,23,0)
(20,24,0)
(12,0,0)
(27,11,0)
(8,18,0)
(22,20,0)
(20,22,0)
(13,23,0)
(38,7,0)
(16,2,0)
(14,10,0)
(2,0,0)
(15,39,0)
(5,11,0)
(11,7,0)
(37,35,0)
(37,21,0)
(3,32,0)
(23,13,0)
(29,32,0)
(0,19,0)
(41,21,0)
(23,5,0)
(35,37,0)
(2,19,0)
(32,0,0)
(9,43,1)
(36,41,1)
(2,0,1)
(44,15,1)
(23,5,1)
(11,7,1)
(11,35,1)
(27,40,1)
(1,32,1)
(9,2,1)
(26,21,1)
(35,37,1)
(12,1,1)
(34,28,1)
(32,0,1)
(20,22,1)
(39,0,1)
(3,29,1)
(39,44,1)
(22,17,1)
(15,0,1)
(21,36,1)
(38,27,1)
(2,16,1)
(37,25,1)
(17,39,1)
(7,38,1)
(32,3,1)
(37,21,1)
(18,34,1)
(29,20,1)
(12,0,1)
(29,39,1)
(0,23,1)
(8,35,1)
(33,18,1)
(5,11,1)
(43,33,1)
(16,12,1)
(25,26,1)
(28,8,1)
(18,35,1)
(23,13,1)
(40,18,1)
(32,18,2)
(35,37,2)
(20,22,2)
(5,18,2)
(2,18,2)
(7,18,2)
(23,18,2)
(17,39,2)
(40,18,2)
(23,13,2)
(44,18,2)
(23,5,2)
(22,39,2)
(0,23,2)
(15,18,2)
(11,7,2)
(12,0,2)
(27,18,2)
(43,18,2)
(18,34,2)
(2,0,2)
(11,18,2)
(39,18,2)
(3,18,2)
(33,18,2)
(38,18,2)
(39,0,2)
(18,35,2)
(32,0,2)
(16,18,2)
(0,18,2)
(12,18,2)
(11,35,2)
(5,11,2)
(1,18,2)
(20,39,2)
(29,18,2)
(37,21,2)
-----------------------------------
(0,myString = (char *)
(1,myString)
(2,free(myString)
(3,HELLO_STRING)
(4,myString)
(5,malloc(data*sizeof(char)
(6,if (data > strlen(HELLO_STRING)
(7,sizeof(char)
(8,data)
(9,RET)
(10,)
(11,data*sizeof(char)
(12,printLine(myString)
(13,char *)
(14,data)
(15,myString)
(16,myString)
(17,1)
(18,data > strlen(HELLO_STRING)
(19,)
(20,exit(-1)
(21,data = 0)
(22,-1)
(23,(char *)
(24,)
(25,data)
(26,data)
(27,data)
(28,HELLO_STRING)
(29,myString)
(30,)
(31,)
(32,strcpy(myString, HELLO_STRING)
(33,"Input is less than the length of the source string")
(34,strlen(HELLO_STRING)
(35,data = badSource(data)
(36,0)
(37,badSource(data)
(38,char)
(39,myString == NULL)
(40,myString)
(41,data)
(42,if (myString == NULL)
(43,printLine("Input is less than the length of the source string")
(44,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^