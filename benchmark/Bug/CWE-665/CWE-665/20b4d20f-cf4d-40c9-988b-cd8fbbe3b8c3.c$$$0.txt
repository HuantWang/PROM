-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_04_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
39,40
39,41
40,41
41,42
41,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
60,61
60,62
61,62
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,34,37,42,44,49,50,53,54,57,62,65,67
-----computeFrom-----
13,14
13,15
24,25
24,26
47,48
47,49
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_04_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_04_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(8,21,0)
(11,14,0)
(18,13,0)
(13,3,0)
(16,7,0)
(16,0,0)
(17,19,0)
(22,30,0)
(28,13,0)
(1,22,0)
(11,9,0)
(4,16,0)
(5,30,0)
(32,10,0)
(0,16,0)
(15,21,0)
(25,7,0)
(30,9,0)
(2,11,0)
(24,14,0)
(6,21,0)
(0,26,0)
(16,22,0)
(9,30,0)
(29,10,0)
(22,21,0)
(10,7,0)
(30,22,0)
(19,7,0)
(9,11,0)
(30,5,0)
(14,11,0)
(31,7,0)
(12,16,0)
(30,5,1)
(31,27,1)
(19,7,1)
(16,7,1)
(7,25,1)
(19,17,1)
(10,7,1)
(11,14,1)
(0,16,1)
(16,22,1)
(23,22,1)
(25,31,1)
(4,10,1)
(32,19,1)
(20,27,1)
(32,7,1)
(16,12,1)
(2,1,1)
(10,29,1)
(9,11,1)
(17,0,1)
(30,9,1)
(12,4,1)
(27,23,1)
(22,30,1)
(14,24,1)
(29,32,1)
(24,2,1)
(20,10,1)
(12,10,2)
(16,7,2)
(16,10,2)
(22,30,2)
(32,27,2)
(0,10,2)
(9,11,2)
(10,27,2)
(29,27,2)
(19,10,2)
(19,7,2)
(4,10,2)
(32,10,2)
(30,9,2)
(10,7,2)
(10,10,2)
(25,27,2)
(11,14,2)
(17,10,2)
(31,27,2)
(0,16,2)
(29,10,2)
(16,22,2)
(30,5,2)
(7,27,2)
-----------------------------------
(0,printDoubleLine(data[i])
(1,data)
(2,10)
(3,)
(4,data)
(5,double *)
(6,data)
(7,i=0)
(8,if(STATIC_CONST_TRUE)
(9,ALLOCA(10*sizeof(double)
(10,i<10)
(11,10*sizeof(double)
(12,i)
(13,)
(14,sizeof(double)
(15,if(STATIC_CONST_TRUE)
(16,data[i])
(17,i)
(18,i)
(19,i++)
(20,RET)
(21,)
(22,data = (double *)
(23,STATIC_CONST_TRUE)
(24,double)
(25,0)
(26,)
(27,STATIC_CONST_TRUE)
(28,for(i=0; i<10; i++)
(29,10)
(30,(double *)
(31,i)
(32,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^