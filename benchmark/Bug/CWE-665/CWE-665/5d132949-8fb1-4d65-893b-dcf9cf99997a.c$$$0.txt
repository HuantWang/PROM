-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_15_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i] = i;
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
32,33
32,34
32,35
32,36
32,37
32,38
33,34
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
80,81
80,82
81,82
82,83
82,84
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,31,34,38,40,45,46,49,52,53,56,62,64,66,67,68,72,73,74,76,79,83,85,90,91,94,95,98,103,106,108,109,110,114,115,116
-----computeFrom-----
13,14
13,15
24,25
24,26
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_15_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_15_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i] = i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i] = i;        }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(47,10,0)
(44,3,0)
(32,22,0)
(55,62,0)
(62,7,0)
(41,56,0)
(39,24,0)
(59,22,0)
(27,32,0)
(7,62,0)
(14,56,0)
(22,32,0)
(46,63,0)
(21,45,0)
(17,7,0)
(50,3,0)
(36,19,0)
(37,23,0)
(54,1,0)
(16,20,0)
(0,56,0)
(29,27,0)
(64,24,0)
(57,23,0)
(49,20,0)
(23,57,0)
(9,27,0)
(23,32,0)
(22,59,0)
(61,24,0)
(33,10,0)
(6,41,0)
(60,19,0)
(7,5,0)
(23,63,0)
(57,48,0)
(63,38,0)
(63,56,0)
(25,32,0)
(58,20,0)
(5,22,0)
(35,24,0)
(14,1,0)
(23,19,0)
(43,19,0)
(5,7,0)
(2,36,0)
(13,23,0)
(22,5,0)
(4,14,0)
(28,20,0)
(3,24,0)
(51,1,0)
(12,45,0)
(40,49,0)
(11,20,0)
(27,56,0)
(32,45,0)
(1,14,0)
(34,45,0)
(42,56,0)
(53,24,0)
(8,52,0)
(10,19,0)
(27,63,0)
(52,20,0)
(15,52,0)
(18,39,0)
(55,17,1)
(36,2,1)
(14,56,1)
(28,49,1)
(4,41,1)
(37,13,1)
(0,31,1)
(46,27,1)
(5,7,1)
(2,57,1)
(22,5,1)
(27,56,1)
(10,33,1)
(27,29,1)
(30,58,1)
(26,64,1)
(47,36,1)
(29,9,1)
(61,14,1)
(49,40,1)
(60,43,1)
(40,26,1)
(14,1,1)
(54,51,1)
(30,28,1)
(13,10,1)
(62,55,1)
(7,62,1)
(1,54,1)
(47,19,1)
(9,14,1)
(18,31,1)
(36,19,1)
(33,47,1)
(43,26,1)
(51,4,1)
(23,32,1)
(58,10,1)
(23,37,1)
(31,32,1)
(57,23,1)
(56,42,1)
(23,19,1)
(64,39,1)
(42,0,1)
(17,25,1)
(41,6,1)
(6,63,1)
(10,19,1)
(63,46,1)
(63,56,1)
(41,56,1)
(4,56,1)
(26,61,1)
(27,32,1)
(19,60,1)
(22,59,1)
(39,18,1)
(23,63,1)
(32,22,1)
(47,10,2)
(14,31,2)
(4,14,2)
(23,32,2)
(47,26,2)
(23,10,2)
(18,31,2)
(2,10,2)
(28,26,2)
(0,31,2)
(27,14,2)
(1,14,2)
(27,56,2)
(10,10,2)
(49,26,2)
(57,10,2)
(6,14,2)
(32,22,2)
(1,31,2)
(27,32,2)
(13,10,2)
(14,1,2)
(63,56,2)
(9,14,2)
(61,31,2)
(41,56,2)
(51,31,2)
(60,26,2)
(46,14,2)
(43,26,2)
(57,23,2)
(63,14,2)
(36,19,2)
(58,26,2)
(29,14,2)
(41,14,2)
(56,31,2)
(36,10,2)
(7,62,2)
(14,14,2)
(5,7,2)
(33,26,2)
(4,31,2)
(37,10,2)
(42,31,2)
(54,31,2)
(14,56,2)
(51,14,2)
(10,26,2)
(23,19,2)
(33,10,2)
(10,19,2)
(64,31,2)
(22,5,2)
(54,14,2)
(23,63,2)
(40,26,2)
(22,59,2)
(39,31,2)
(19,26,2)
-----------------------------------
(0,i)
(1,10/2)
(2,i)
(3,)
(4,i)
(5,ALLOCA(10*sizeof(int)
(6,i)
(7,10*sizeof(int)
(8,for(i=0; i<10; i++)
(9,data)
(10,i<10)
(11,default:)
(12,data)
(13,data)
(14,i<(10/2)
(15,i)
(16,case 7:)
(17,10)
(18,"Benign, fixed string")
(19,i=0)
(20,)
(21,switch(7)
(22,(int *)
(23,data[i])
(24,)
(25,data)
(26,7)
(27,data[i])
(28,break;)
(29,i)
(30,RET)
(31,6)
(32,data = (int *)
(33,10)
(34,switch(6)
(35,default:)
(36,i++)
(37,i)
(38,)
(39,printLine("Benign, fixed string")
(40,"Benign, fixed string")
(41,i++)
(42,0)
(43,i)
(44,for(i=0; i<(10/2)
(45,)
(46,i)
(47,i)
(48,)
(49,printLine("Benign, fixed string")
(50,i)
(51,10)
(52,)
(53,case 6:)
(54,2)
(55,int)
(56,i=0)
(57,printIntLine(data[i])
(58,break;)
(59,int *)
(60,0)
(61,break;)
(62,sizeof(int)
(63,data[i] = i)
(64,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^