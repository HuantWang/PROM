-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_03_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
37,38
39,40
39,41
40,41
40,42
43,44
44,45
44,46
45,46
46,47
46,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
70,71
72,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,35,36,38,41,42,47,49,54,55,58,59,62,67,71,73,74,78,82,84,85
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
40,41
40,42
52,53
52,54
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_03_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_03_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(9,2,0)
(24,2,0)
(29,13,0)
(30,18,0)
(15,31,0)
(37,18,0)
(35,24,0)
(8,41,0)
(14,10,0)
(41,35,0)
(27,41,0)
(0,2,0)
(24,35,0)
(10,16,0)
(19,28,0)
(22,13,0)
(21,10,0)
(22,40,0)
(24,5,0)
(2,24,0)
(34,3,0)
(40,43,0)
(5,24,0)
(7,8,0)
(34,0,0)
(3,43,0)
(0,16,0)
(38,16,0)
(6,26,0)
(13,2,0)
(25,16,0)
(33,26,0)
(36,0,0)
(2,26,0)
(0,34,0)
(13,16,0)
(11,26,0)
(3,34,0)
(20,13,0)
(44,34,0)
(4,38,0)
(41,8,0)
(31,39,0)
(12,16,0)
(40,22,0)
(13,22,0)
(42,28,0)
(17,31,0)
(1,22,0)
(35,41,0)
(32,0,0)
(38,4,1)
(19,2,1)
(37,28,1)
(30,37,1)
(0,2,1)
(41,8,1)
(23,10,1)
(32,36,1)
(13,20,1)
(42,19,1)
(20,29,1)
(13,2,1)
(14,38,1)
(10,21,1)
(24,5,1)
(1,13,1)
(3,34,1)
(4,3,1)
(23,18,1)
(28,42,1)
(40,22,1)
(34,0,1)
(8,7,1)
(22,13,1)
(27,9,1)
(29,10,1)
(21,14,1)
(25,18,1)
(0,32,1)
(44,0,1)
(24,35,1)
(12,25,1)
(18,30,1)
(35,41,1)
(10,16,1)
(7,27,1)
(38,16,1)
(0,16,1)
(34,44,1)
(16,12,1)
(22,1,1)
(2,24,1)
(36,40,1)
(14,16,1)
(13,16,1)
(10,10,2)
(29,10,2)
(1,10,2)
(4,10,2)
(3,10,2)
(0,10,2)
(25,18,2)
(24,35,2)
(12,18,2)
(2,24,2)
(13,10,2)
(10,16,2)
(32,10,2)
(14,18,2)
(13,16,2)
(21,10,2)
(13,2,2)
(24,5,2)
(44,10,2)
(35,41,2)
(36,10,2)
(38,16,2)
(14,10,2)
(3,34,2)
(38,10,2)
(34,10,2)
(40,22,2)
(10,18,2)
(34,0,2)
(0,16,2)
(40,10,2)
(20,10,2)
(0,2,2)
(41,8,2)
(16,18,2)
(22,10,2)
(22,13,2)
(21,18,2)
-----------------------------------
(0,data[i])
(1,intOne)
(2,data = (twoIntsStruct *)
(3,printIntLine(data[i].intTwo)
(4,i)
(5,twoIntsStruct *)
(6,if(5==5)
(7,twoIntsStruct)
(8,sizeof(twoIntsStruct)
(9,data)
(10,i<10)
(11,if(5==5)
(12,0)
(13,data[i])
(14,i)
(15,i)
(16,i=0)
(17,for(i=0; i<10; i++)
(18,5==5)
(19,5)
(20,i)
(21,10)
(22,data[i].intOne)
(23,RET)
(24,(twoIntsStruct *)
(25,i)
(26,)
(27,10)
(28,5==5)
(29,data)
(30,5)
(31,)
(32,i)
(33,data)
(34,data[i].intTwo)
(35,ALLOCA(10*sizeof(twoIntsStruct)
(36,data)
(37,5)
(38,i++)
(39,)
(40,printIntLine(data[i].intOne)
(41,10*sizeof(twoIntsStruct)
(42,5)
(43,)
(44,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^