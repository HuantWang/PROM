-----label-----
1
-----code-----
void CWE665_Improper_Initialization__wchar_t_cat_06_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100];
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */
        wcscat(data, source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
41,44
41,45
42,43
44,45
47,48
47,49
50,51
51,52
51,53
52,53
52,54
53,54
55,56
55,57
59,60
60,61
60,62
60,63
61,62
63,64
65,66
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,29,31,35,37,39,43,45,46,48,49,54,56,57,58,62,64,66,70,72
-----computeFrom-----
20,21
20,22
26,27
26,28
47,48
47,49
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__wchar_t_cat_06_bad(){    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }}
void
CWE665_Improper_Initialization__wchar_t_cat_06_bad()
CWE665_Improper_Initialization__wchar_t_cat_06_bad
{    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100];
wchar_t dataBuffer[100];
wchar_t
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscat(data, source);
wcscat(data, source)
wcscat
wcscat
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(4,7,0)
(10,17,0)
(8,0,0)
(6,8,0)
(15,11,0)
(3,11,0)
(7,8,0)
(16,11,0)
(14,0,0)
(18,15,0)
(13,0,0)
(7,11,0)
(2,0,0)
(9,7,0)
(15,8,0)
(11,0,0)
(12,17,0)
(5,8,0)
(10,12,1)
(15,18,1)
(9,16,1)
(18,7,1)
(1,15,1)
(12,8,1)
(4,9,1)
(15,8,1)
(16,17,1)
(8,5,1)
(7,8,1)
(5,6,1)
(17,10,1)
(7,4,1)
(7,8,2)
(15,8,2)
-----------------------------------
(0,)
(1,RET)
(2,data)
(3,source)
(4,source)
(5,dataBuffer)
(6,data)
(7,wcscat(data, source)
(8,data = dataBuffer)
(9,data)
(10,5)
(11,)
(12,STATIC_CONST_FIVE)
(13,dataBuffer)
(14,if(STATIC_CONST_FIVE==5)
(15,printWLine(data)
(16,'\\0')
(17,STATIC_CONST_FIVE==5)
(18,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^