-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_08_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
32,33
34,35
36,37
36,38
37,38
38,39
40,41
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,39,44,46,51,52,55,56,59,64,67,69
-----computeFrom-----
13,14
13,15
24,25
24,26
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_08_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_08_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(11,7,0)
(15,7,0)
(20,12,0)
(10,0,0)
(25,4,0)
(29,5,0)
(22,17,0)
(18,21,0)
(2,17,0)
(22,15,0)
(15,8,0)
(25,11,0)
(19,14,0)
(3,21,0)
(11,14,0)
(5,14,0)
(32,20,0)
(7,15,0)
(13,11,0)
(31,23,0)
(17,22,0)
(17,0,0)
(28,11,0)
(11,25,0)
(16,20,0)
(8,15,0)
(23,14,0)
(15,22,0)
(26,5,0)
(0,17,0)
(30,14,0)
(24,21,0)
(7,21,0)
(27,7,0)
(1,6,1)
(23,14,1)
(13,28,1)
(9,5,1)
(29,26,1)
(9,1,1)
(5,29,1)
(15,22,1)
(11,7,1)
(11,14,1)
(15,8,1)
(17,0,1)
(23,31,1)
(22,17,1)
(25,11,1)
(2,27,1)
(14,30,1)
(10,2,1)
(7,15,1)
(6,7,1)
(0,10,1)
(28,5,1)
(26,14,1)
(30,19,1)
(11,13,1)
(26,23,1)
(31,25,1)
(5,14,1)
(19,1,1)
(30,1,2)
(5,5,2)
(5,1,2)
(11,5,2)
(19,1,2)
(15,8,2)
(22,17,2)
(15,22,2)
(26,5,2)
(11,14,2)
(23,14,2)
(29,1,2)
(29,5,2)
(11,7,2)
(25,5,2)
(28,5,2)
(26,1,2)
(14,1,2)
(25,11,2)
(17,0,2)
(13,5,2)
(7,15,2)
(5,14,2)
(23,5,2)
(31,5,2)
-----------------------------------
(0,sizeof(double)
(1,staticReturnsTrue()
(2,10)
(3,if(staticReturnsTrue()
(4,)
(5,i<10)
(6,staticReturnsTrue()
(7,data = (double *)
(8,double *)
(9,RET)
(10,double)
(11,data[i])
(12,)
(13,i)
(14,i=0)
(15,(double *)
(16,i)
(17,10*sizeof(double)
(18,if(staticReturnsTrue()
(19,i)
(20,)
(21,)
(22,ALLOCA(10*sizeof(double)
(23,i++)
(24,data)
(25,printDoubleLine(data[i])
(26,i)
(27,data)
(28,data)
(29,10)
(30,0)
(31,i)
(32,for(i=0; i<10; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^