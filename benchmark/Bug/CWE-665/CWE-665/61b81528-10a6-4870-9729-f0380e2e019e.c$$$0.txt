-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_02_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
61,62
62,63
62,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
80,81
82,83
82,84
84,85
85,86
85,87
86,87
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
101,102
102,103
104,105
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,56,57,60,63,64,67,73,75,78,79,81,83,88,90,95,96,99,100,103,108,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
70,71
70,72
93,94
93,95
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_02_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_02_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(6,22,0)
(48,15,0)
(58,8,0)
(19,48,0)
(42,4,0)
(19,46,0)
(54,61,0)
(20,17,0)
(47,22,0)
(51,41,0)
(53,34,0)
(15,48,0)
(9,15,0)
(45,52,0)
(15,13,0)
(59,62,0)
(43,56,0)
(35,34,0)
(57,22,0)
(59,34,0)
(7,49,0)
(37,40,0)
(7,38,0)
(60,7,0)
(41,34,0)
(29,46,0)
(17,9,0)
(7,34,0)
(39,59,0)
(43,19,0)
(32,5,0)
(33,16,0)
(9,17,0)
(10,20,0)
(27,33,0)
(14,46,0)
(28,4,0)
(19,43,0)
(49,7,0)
(61,46,0)
(62,59,0)
(1,33,0)
(24,62,0)
(38,7,0)
(25,5,0)
(40,46,0)
(4,48,0)
(21,22,0)
(17,20,0)
(31,17,0)
(26,19,0)
(44,58,0)
(36,40,0)
(23,48,0)
(15,9,0)
(2,58,0)
(18,62,0)
(45,55,0)
(19,49,0)
(5,48,0)
(0,52,0)
(49,11,0)
(52,45,0)
(3,19,0)
(5,49,0)
(13,15,0)
(5,34,0)
(48,22,0)
(25,32,1)
(26,40,1)
(40,46,1)
(20,10,1)
(41,51,1)
(43,19,1)
(32,59,1)
(5,34,1)
(28,42,1)
(51,49,1)
(17,20,1)
(5,25,1)
(46,14,1)
(9,17,1)
(37,46,1)
(50,59,1)
(12,40,1)
(14,29,1)
(42,48,1)
(30,4,1)
(24,18,1)
(5,48,1)
(18,39,1)
(10,31,1)
(29,50,1)
(19,49,1)
(61,54,1)
(19,46,1)
(0,4,1)
(53,35,1)
(59,34,1)
(49,7,1)
(61,46,1)
(50,30,1)
(19,48,1)
(40,36,1)
(39,41,1)
(41,34,1)
(3,26,1)
(60,5,1)
(36,37,1)
(12,50,1)
(45,52,1)
(7,60,1)
(7,38,1)
(15,9,1)
(37,61,1)
(15,13,1)
(62,24,1)
(39,34,1)
(4,48,1)
(54,43,1)
(59,62,1)
(52,0,1)
(30,45,1)
(19,3,1)
(7,34,1)
(4,28,1)
(34,53,1)
(35,30,1)
(48,15,1)
(31,23,1)
(39,59,2)
(40,46,2)
(15,9,2)
(48,15,2)
(37,50,2)
(59,30,2)
(35,30,2)
(5,48,2)
(26,40,2)
(19,49,2)
(29,50,2)
(19,46,2)
(46,50,2)
(43,19,2)
(18,59,2)
(19,40,2)
(0,4,2)
(49,7,2)
(60,59,2)
(61,40,2)
(25,59,2)
(61,46,2)
(51,59,2)
(7,34,2)
(41,34,2)
(36,50,2)
(4,48,2)
(36,40,2)
(34,30,2)
(19,48,2)
(45,4,2)
(7,38,2)
(54,40,2)
(5,34,2)
(40,40,2)
(62,30,2)
(24,30,2)
(52,4,2)
(9,17,2)
(43,40,2)
(39,30,2)
(59,62,2)
(14,50,2)
(41,59,2)
(45,52,2)
(40,50,2)
(17,20,2)
(59,59,2)
(32,59,2)
(53,30,2)
(24,59,2)
(49,59,2)
(15,13,2)
(5,59,2)
(3,40,2)
(7,59,2)
(18,30,2)
(59,34,2)
(37,40,2)
(62,59,2)
-----------------------------------
(0,1)
(1,i)
(2,i)
(3,i)
(4,data == NULL)
(5,data[i])
(6,if (data == NULL)
(7,(double)
(8,)
(9,malloc(10*sizeof(double)
(10,double)
(11,)
(12,RET)
(13,double *)
(14,0)
(15,(double *)
(16,)
(17,10*sizeof(double)
(18,10)
(19,data[i])
(20,sizeof(double)
(21,if(1)
(22,)
(23,data)
(24,2)
(25,i)
(26,data)
(27,for(i=0; i<(10/2)
(28,NULL)
(29,i)
(30,1)
(31,10)
(32,data)
(33,)
(34,i=0)
(35,i)
(36,10)
(37,i)
(38,double)
(39,i)
(40,i<10)
(41,i++)
(42,data)
(43,printDoubleLine(data[i])
(44,for(i=0; i<10; i++)
(45,exit(-1)
(46,i=0)
(47,if(1)
(48,data = (double *)
(49,data[i] = (double)
(50,1)
(51,i)
(52,-1)
(53,0)
(54,i)
(55,)
(56,)
(57,data)
(58,)
(59,i<(10/2)
(60,i)
(61,i++)
(62,10/2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^