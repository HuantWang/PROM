-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_15_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
45,49
45,50
45,51
46,47
51,52
52,53
52,54
53,54
57,58
57,59
59,60
59,61
59,62
59,63
59,64
59,65
60,61
62,63
62,64
63,64
64,65
64,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
78,79
79,80
81,82
82,83
83,84
83,85
84,85
86,87
86,88
87,88
89,90
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,47,48,49,50,54,55,56,58,61,65,67,72,73,76,77,80,85,88,90,91,92,96,97,98
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
70,71
70,72
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_15_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_15_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,34,0)
(23,2,0)
(26,15,0)
(50,5,0)
(2,15,0)
(2,23,0)
(24,5,0)
(46,35,0)
(19,11,0)
(15,2,0)
(44,24,0)
(25,35,0)
(50,45,0)
(6,13,0)
(19,42,0)
(44,27,0)
(43,13,0)
(53,31,0)
(1,10,0)
(28,3,0)
(33,2,0)
(16,3,0)
(5,50,0)
(30,13,0)
(50,23,0)
(38,39,0)
(47,34,0)
(24,44,0)
(10,39,0)
(52,3,0)
(23,50,0)
(17,24,0)
(14,42,0)
(12,13,0)
(4,13,0)
(32,5,0)
(8,31,0)
(7,4,0)
(31,34,0)
(41,39,0)
(49,34,0)
(35,5,0)
(0,49,0)
(20,24,0)
(37,39,0)
(22,34,0)
(18,41,0)
(21,10,0)
(9,3,0)
(42,19,0)
(45,50,0)
(36,39,0)
(29,39,0)
(5,3,0)
(24,17,1)
(25,46,1)
(7,40,1)
(8,49,1)
(33,32,1)
(49,34,1)
(49,0,1)
(31,53,1)
(5,50,1)
(26,33,1)
(20,31,1)
(44,24,1)
(40,35,1)
(50,45,1)
(8,34,1)
(24,5,1)
(46,5,1)
(35,25,1)
(2,15,1)
(23,2,1)
(24,34,1)
(42,14,1)
(48,43,1)
(14,35,1)
(34,47,1)
(37,41,1)
(18,48,1)
(29,31,1)
(17,20,1)
(43,40,1)
(47,22,1)
(31,34,1)
(41,18,1)
(51,37,1)
(51,29,1)
(30,4,1)
(22,48,1)
(48,30,1)
(40,19,1)
(15,26,1)
(0,44,1)
(35,5,1)
(53,8,1)
(19,42,1)
(4,7,1)
(50,23,1)
(18,48,2)
(35,5,2)
(29,48,2)
(8,48,2)
(5,50,2)
(17,31,2)
(30,40,2)
(4,40,2)
(31,48,2)
(37,48,2)
(19,42,2)
(31,34,2)
(7,40,2)
(23,2,2)
(41,48,2)
(49,31,2)
(8,31,2)
(43,40,2)
(34,48,2)
(44,31,2)
(24,34,2)
(50,23,2)
(44,24,2)
(14,35,2)
(0,31,2)
(24,31,2)
(22,48,2)
(53,31,2)
(19,35,2)
(50,45,2)
(24,5,2)
(47,48,2)
(49,34,2)
(53,48,2)
(20,31,2)
(2,15,2)
(42,35,2)
(31,31,2)
-----------------------------------
(0,i)
(1,for(i=0; i<10; i++)
(2,10*sizeof(int)
(3,)
(4,printLine("Benign, fixed string")
(5,data = (int *)
(6,case 6:)
(7,"Benign, fixed string")
(8,i)
(9,if (data == NULL)
(10,)
(11,)
(12,default:)
(13,)
(14,1)
(15,sizeof(int)
(16,switch(7)
(17,i)
(18,"Benign, fixed string")
(19,exit(-1)
(20,data)
(21,i)
(22,i)
(23,malloc(10*sizeof(int)
(24,data[i])
(25,NULL)
(26,int)
(27,)
(28,switch(6)
(29,break;)
(30,break;)
(31,i<10)
(32,data)
(33,10)
(34,i=0)
(35,data == NULL)
(36,case 7:)
(37,break;)
(38,default:)
(39,)
(40,6)
(41,printLine("Benign, fixed string")
(42,-1)
(43,break;)
(44,printIntLine(data[i])
(45,int *)
(46,data)
(47,0)
(48,7)
(49,i++)
(50,(int *)
(51,RET)
(52,data)
(53,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^