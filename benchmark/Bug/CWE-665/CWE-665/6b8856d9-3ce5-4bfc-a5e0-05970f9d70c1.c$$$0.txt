-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_02_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
37,38
37,39
39,40
40,41
40,42
41,42
42,43
42,44
44,45
46,47
46,48
46,49
46,50
47,48
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
66,67
68,69
71,72
72,73
72,74
73,74
75,76
75,77
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,36,38,43,45,50,51,54,55,58,63,67,69,70,74,78,80,81
-----computeFrom-----
14,15
14,16
26,27
26,28
48,49
48,50
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;LiteralExpression;CompoundStatement;NullStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_02_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_02_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_02_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(0,3,0)
(21,13,0)
(39,30,0)
(26,22,0)
(31,5,0)
(29,31,0)
(16,18,0)
(6,20,0)
(20,21,0)
(16,3,0)
(9,2,0)
(12,22,0)
(32,2,0)
(2,14,0)
(28,33,0)
(18,34,0)
(40,3,0)
(19,20,0)
(20,14,0)
(24,26,0)
(22,26,0)
(1,31,0)
(23,5,0)
(13,8,0)
(33,35,0)
(18,16,0)
(7,14,0)
(1,8,0)
(5,16,0)
(13,21,0)
(12,18,0)
(38,14,0)
(5,14,0)
(17,21,0)
(21,20,0)
(15,22,0)
(34,18,0)
(22,12,0)
(30,14,0)
(10,16,0)
(20,16,0)
(5,31,0)
(18,12,0)
(27,33,0)
(11,3,0)
(4,5,0)
(31,1,0)
(17,20,1)
(25,16,1)
(22,26,1)
(18,34,1)
(5,14,1)
(20,19,1)
(32,30,1)
(5,16,1)
(6,1,1)
(9,32,1)
(36,37,1)
(37,25,1)
(31,29,1)
(21,20,1)
(15,10,1)
(16,18,1)
(31,5,1)
(4,23,1)
(13,21,1)
(26,24,1)
(29,5,1)
(32,14,1)
(1,31,1)
(24,15,1)
(39,13,1)
(20,16,1)
(12,22,1)
(18,12,1)
(14,7,1)
(5,4,1)
(2,14,1)
(30,14,1)
(2,9,1)
(19,6,1)
(30,39,1)
(20,14,1)
(23,2,1)
(36,2,1)
(7,38,1)
(21,17,1)
(38,37,1)
(16,18,2)
(7,37,2)
(19,2,2)
(22,26,2)
(5,2,2)
(32,37,2)
(1,31,2)
(17,2,2)
(21,2,2)
(14,37,2)
(32,2,2)
(13,21,2)
(30,14,2)
(5,14,2)
(5,16,2)
(12,22,2)
(21,20,2)
(2,2,2)
(39,2,2)
(9,2,2)
(29,2,2)
(18,12,2)
(30,2,2)
(31,5,2)
(9,37,2)
(20,2,2)
(20,14,2)
(13,2,2)
(23,2,2)
(6,2,2)
(1,2,2)
(31,2,2)
(4,2,2)
(2,14,2)
(38,37,2)
(18,34,2)
(20,16,2)
(2,37,2)
-----------------------------------
(0,if(1)
(1,printIntLine(data[i].intOne)
(2,i<10)
(3,)
(4,i)
(5,data[i])
(6,data)
(7,0)
(8,)
(9,10)
(10,data)
(11,data)
(12,ALLOCA(10*sizeof(twoIntsStruct)
(13,printIntLine(data[i].intTwo)
(14,i=0)
(15,10)
(16,data = (twoIntsStruct *)
(17,intTwo)
(18,(twoIntsStruct *)
(19,i)
(20,data[i])
(21,data[i].intTwo)
(22,10*sizeof(twoIntsStruct)
(23,data)
(24,twoIntsStruct)
(25,1)
(26,sizeof(twoIntsStruct)
(27,i)
(28,for(i=0; i<10; i++)
(29,intOne)
(30,i++)
(31,data[i].intOne)
(32,i)
(33,)
(34,twoIntsStruct *)
(35,)
(36,RET)
(37,1)
(38,i)
(39,i)
(40,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^