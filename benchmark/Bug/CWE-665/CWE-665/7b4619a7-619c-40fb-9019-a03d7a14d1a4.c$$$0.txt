-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        size_t sourceLen;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        sourceLen = strlen(source);
        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */
        strncat(data, source, sourceLen);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
26,29
26,30
27,28
29,30
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
40,41
40,42
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,6,8,9,15,17,20,22,24,28,30,31,33,34,39,41,42,43,47,50,52,56,58,60,62,66,68
-----computeFrom-----
32,33
32,34
36,37
36,38
40,41
40,42
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
{        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }
size_t sourceLen;
size_t sourceLen;
size_t
size_t
sourceLen
sourceLen
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
strncat(data, source, sourceLen);
strncat(data, source, sourceLen)
strncat
strncat
data
data
source
source
sourceLen
sourceLen
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(15,10,0)
(27,6,0)
(22,6,0)
(8,19,0)
(3,16,0)
(2,20,0)
(15,0,0)
(15,3,0)
(9,15,0)
(21,26,0)
(12,15,0)
(13,10,0)
(10,3,0)
(5,3,0)
(11,5,0)
(1,19,0)
(23,13,0)
(14,22,0)
(19,26,0)
(20,3,0)
(7,22,0)
(26,3,0)
(17,26,0)
(6,22,0)
(18,10,0)
(4,3,0)
(5,0,0)
(24,15,0)
(25,3,0)
(26,19,0)
(10,13,0)
(6,20,0)
(9,24,1)
(19,8,1)
(20,2,1)
(28,5,1)
(1,21,1)
(10,13,1)
(6,22,1)
(26,19,1)
(5,0,1)
(13,23,1)
(15,10,1)
(7,14,1)
(24,10,1)
(5,11,1)
(11,15,1)
(22,7,1)
(8,1,1)
(2,6,1)
(27,26,1)
(14,27,1)
(18,20,1)
(15,12,1)
(23,18,1)
(15,0,1)
(12,9,1)
(21,17,1)
(15,0,2)
(26,19,2)
(10,13,2)
(15,10,2)
(6,22,2)
(5,0,2)
-----------------------------------
(0,char * data)
(1,100)
(2,'\\0')
(3,)
(4,sourceLen)
(5,printLine(data)
(6,source[100-1])
(7,1)
(8,1)
(9,source)
(10,sourceLen = strlen(source)
(11,data)
(12,sourceLen)
(13,strlen(source)
(14,100)
(15,strncat(data, source, sourceLen)
(16,)
(17,source)
(18,sourceLen)
(19,100-1)
(20,source[100-1] = '\\0')
(21,'C')
(22,100-1)
(23,source)
(24,data)
(25,source)
(26,memset(source, 'C', 100-1)
(27,source)
(28,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^