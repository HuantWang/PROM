-----label-----
1
-----code-----
void CWE665_Improper_Initialization__char_ncat_12_bad()
{
    char * data;
    char dataBuffer[100];
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Properly initialize data */
        data[0] = '\0'; /* null terminate */
    }
    {
        size_t sourceLen;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        sourceLen = strlen(source);
        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */
        strncat(data, source, sourceLen);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
26,27
27,28
29,30
31,32
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,30,36,37,38,43,45,48,50,52,56,58,59,61,62,67,69,70,71,75,78,80,84,86,88,90,94,96
-----computeFrom-----
20,21
20,22
33,34
33,35
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__char_ncat_12_bad(){    char * data;    char dataBuffer[100];    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Properly initialize data */        data[0] = '\0'; /* null terminate */    }    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
void
CWE665_Improper_Initialization__char_ncat_12_bad()
CWE665_Improper_Initialization__char_ncat_12_bad
{    char * data;    char dataBuffer[100];    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Properly initialize data */        data[0] = '\0'; /* null terminate */    }    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100];
char dataBuffer[100];
char
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Properly initialize data */        data[0] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Properly initialize data */        data[0] = '\0'; /* null terminate */    }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }
size_t sourceLen;
size_t sourceLen;
size_t
size_t
sourceLen
sourceLen
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
strncat(data, source, sourceLen);
strncat(data, source, sourceLen)
strncat
strncat
data
data
source
source
sourceLen
sourceLen
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(9,29,0)
(13,36,0)
(15,29,0)
(23,40,0)
(12,26,0)
(21,13,0)
(16,1,0)
(36,9,0)
(24,27,0)
(24,9,0)
(11,28,0)
(30,29,0)
(8,9,0)
(39,28,0)
(18,24,0)
(22,10,0)
(3,24,0)
(31,1,0)
(5,29,0)
(36,13,0)
(19,13,0)
(14,36,0)
(2,27,0)
(27,29,0)
(26,11,0)
(24,31,0)
(25,27,0)
(33,22,0)
(28,9,0)
(38,10,0)
(32,36,0)
(17,22,0)
(40,9,0)
(1,31,0)
(35,9,0)
(22,27,0)
(10,6,0)
(7,31,0)
(20,24,0)
(11,26,0)
(40,27,0)
(31,9,0)
(4,11,0)
(0,26,0)
(23,24,1)
(16,7,1)
(4,36,1)
(24,31,1)
(12,4,1)
(22,27,1)
(3,31,1)
(2,25,1)
(40,27,1)
(22,17,1)
(31,1,1)
(28,39,1)
(39,11,1)
(21,14,1)
(17,33,1)
(34,27,1)
(10,38,1)
(7,28,1)
(18,3,1)
(33,34,1)
(37,40,1)
(24,27,1)
(32,34,1)
(27,2,1)
(14,32,1)
(32,10,1)
(13,19,1)
(19,21,1)
(24,20,1)
(1,16,1)
(38,22,1)
(36,13,1)
(11,26,1)
(20,18,1)
(26,0,1)
(40,23,1)
(0,12,1)
(24,27,2)
(24,31,2)
(33,34,2)
(31,1,2)
(17,34,2)
(11,26,2)
(22,34,2)
(10,34,2)
(22,27,2)
(36,13,2)
(40,27,2)
(38,34,2)
-----------------------------------
(0,1)
(1,strlen(source)
(2,dataBuffer)
(3,data)
(4,source)
(5,if(globalReturnsTrueOrFalse()
(6,)
(7,sourceLen)
(8,source)
(9,)
(10,data[0] = '\\0')
(11,source[100-1])
(12,100)
(13,100-1)
(14,'C')
(15,data)
(16,source)
(17,0)
(18,source)
(19,1)
(20,sourceLen)
(21,100)
(22,data[0])
(23,data)
(24,strncat(data, source, sourceLen)
(25,data)
(26,100-1)
(27,data = dataBuffer)
(28,source[100-1] = '\\0')
(29,)
(30,dataBuffer)
(31,sourceLen = strlen(source)
(32,source)
(33,data)
(34,globalReturnsTrueOrFalse()
(35,sourceLen)
(36,memset(source, 'C', 100-1)
(37,RET)
(38,'\\0')
(39,'\\0')
(40,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^