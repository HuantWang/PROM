-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_10_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,29,31,34,39,41,46,47,50,51,54,59,63,65,66,70,74,76,77
-----computeFrom-----
22,23
22,24
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_10_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_10_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_10_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(8,3,0)
(2,11,0)
(17,34,0)
(11,31,0)
(25,27,0)
(11,15,0)
(23,7,0)
(27,29,0)
(20,6,0)
(3,32,0)
(5,10,0)
(4,10,0)
(33,7,0)
(14,34,0)
(21,10,0)
(34,7,0)
(31,0,0)
(30,33,0)
(18,27,0)
(15,7,0)
(12,15,0)
(31,11,0)
(1,10,0)
(6,35,0)
(26,3,0)
(35,0,0)
(16,32,0)
(15,11,0)
(3,7,0)
(32,10,0)
(6,3,0)
(3,6,0)
(9,7,0)
(19,15,0)
(28,32,0)
(35,6,0)
(15,32,0)
(6,3,1)
(20,3,1)
(33,30,1)
(3,7,1)
(15,7,1)
(26,8,1)
(30,31,1)
(28,16,1)
(34,7,1)
(13,34,1)
(2,15,1)
(3,26,1)
(12,19,1)
(17,14,1)
(19,35,1)
(32,28,1)
(15,32,1)
(34,17,1)
(33,7,1)
(11,15,1)
(14,33,1)
(35,6,1)
(14,7,1)
(3,32,1)
(6,20,1)
(13,22,1)
(11,2,1)
(7,23,1)
(24,32,1)
(8,34,1)
(15,12,1)
(9,22,1)
(23,9,1)
(31,11,1)
(22,24,1)
(31,34,2)
(19,34,2)
(2,34,2)
(3,7,2)
(35,6,2)
(17,34,2)
(8,34,2)
(15,34,2)
(3,34,2)
(14,34,2)
(17,22,2)
(35,34,2)
(34,7,2)
(6,3,2)
(34,22,2)
(30,34,2)
(3,32,2)
(20,34,2)
(11,34,2)
(31,11,2)
(23,22,2)
(26,34,2)
(33,7,2)
(6,34,2)
(9,22,2)
(14,22,2)
(33,34,2)
(15,7,2)
(15,32,2)
(34,34,2)
(11,15,2)
(12,34,2)
(7,22,2)
-----------------------------------
(0,)
(1,if(globalTrue)
(2,intTwo)
(3,data[i])
(4,dataUninitArray)
(5,data)
(6,data[i].intOne)
(7,i=0)
(8,data)
(9,i)
(10,)
(11,data[i].intTwo)
(12,i)
(13,RET)
(14,i)
(15,data[i])
(16,data)
(17,10)
(18,i)
(19,data)
(20,intOne)
(21,if(globalTrue)
(22,globalTrue)
(23,0)
(24,globalTrue)
(25,for(i=0; i<10; i++)
(26,i)
(27,)
(28,dataUninitArray)
(29,)
(30,i)
(31,printIntLine(data[i].intTwo)
(32,data = dataUninitArray)
(33,i++)
(34,i<10)
(35,printIntLine(data[i].intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^