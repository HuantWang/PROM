-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(globalFive==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(24,45,0)
(38,36,0)
(30,10,0)
(42,17,0)
(21,24,0)
(46,19,0)
(10,30,0)
(46,22,0)
(5,2,0)
(6,4,0)
(29,41,0)
(29,12,0)
(2,36,0)
(19,46,0)
(46,12,0)
(29,22,0)
(8,22,0)
(22,43,0)
(0,36,0)
(47,36,0)
(13,22,0)
(29,30,0)
(15,27,0)
(2,45,0)
(45,10,0)
(26,28,0)
(16,18,0)
(37,12,0)
(39,47,0)
(3,17,0)
(53,12,0)
(45,36,0)
(44,0,0)
(30,29,0)
(33,24,0)
(35,27,0)
(41,29,0)
(47,45,0)
(10,45,0)
(7,6,0)
(31,11,0)
(20,18,0)
(9,27,0)
(11,31,0)
(51,28,0)
(0,45,0)
(25,29,0)
(18,14,0)
(23,46,0)
(22,8,0)
(1,41,0)
(10,40,0)
(52,11,0)
(50,19,0)
(12,27,0)
(48,45,0)
(34,2,0)
(40,10,0)
(31,49,0)
(32,0,1)
(22,8,1)
(24,21,1)
(29,22,1)
(5,34,1)
(0,44,1)
(23,28,1)
(11,52,1)
(52,24,1)
(10,30,1)
(46,19,1)
(3,42,1)
(28,26,1)
(42,12,1)
(26,51,1)
(46,12,1)
(34,24,1)
(34,31,1)
(46,22,1)
(51,22,1)
(13,17,1)
(0,45,1)
(1,25,1)
(29,41,1)
(7,46,1)
(19,50,1)
(44,47,1)
(30,29,1)
(51,17,1)
(32,28,1)
(12,37,1)
(8,13,1)
(24,45,1)
(33,45,1)
(10,40,1)
(2,45,1)
(25,48,1)
(50,23,1)
(32,6,1)
(48,46,1)
(31,11,1)
(21,33,1)
(2,5,1)
(6,7,1)
(47,45,1)
(41,1,1)
(29,12,1)
(37,53,1)
(47,39,1)
(45,10,1)
(39,2,1)
(17,3,1)
(10,30,2)
(0,45,2)
(24,46,2)
(1,46,2)
(2,45,2)
(29,12,2)
(21,46,2)
(45,46,2)
(46,19,2)
(52,24,2)
(47,46,2)
(34,46,2)
(47,45,2)
(7,46,2)
(46,28,2)
(22,17,2)
(0,46,2)
(33,46,2)
(13,17,2)
(31,24,2)
(29,41,2)
(6,46,2)
(44,46,2)
(22,8,2)
(50,28,2)
(45,10,2)
(2,46,2)
(30,46,2)
(30,29,2)
(24,45,2)
(46,12,2)
(10,46,2)
(39,46,2)
(29,22,2)
(19,28,2)
(48,46,2)
(29,46,2)
(8,17,2)
(5,46,2)
(23,28,2)
(11,24,2)
(31,11,2)
(46,22,2)
(41,46,2)
(25,46,2)
(10,40,2)
-----------------------------------
(0,free(myString)
(1,wchar_t)
(2,wcscpy(myString, HELLO_STRING)
(3,5)
(4,)
(5,HELLO_STRING)
(6,printLine("Input is less than the length of the source string")
(7,"Input is less than the length of the source string")
(8,rand()
(9,if(globalFive==5)
(10,(wchar_t *)
(11,-1)
(12,data = 0)
(13,data)
(14,)
(15,if(globalFive==5)
(16,if (data > wcslen(HELLO_STRING)
(17,globalFive==5)
(18,)
(19,wcslen(HELLO_STRING)
(20,myString)
(21,NULL)
(22,data = rand()
(23,data)
(24,myString == NULL)
(25,data)
(26,5)
(27,)
(28,globalFive==5)
(29,data*sizeof(wchar_t)
(30,malloc(data*sizeof(wchar_t)
(31,exit(-1)
(32,RET)
(33,myString)
(34,myString)
(35,data)
(36,)
(37,0)
(38,if (myString == NULL)
(39,myString)
(40,wchar_t *)
(41,sizeof(wchar_t)
(42,globalFive)
(43,)
(44,myString)
(45,myString = (wchar_t *)
(46,data > wcslen(HELLO_STRING)
(47,printWLine(myString)
(48,myString)
(49,)
(50,HELLO_STRING)
(51,globalFive)
(52,1)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^