-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
32,33
33,34
33,35
35,36
35,37
38,39
38,40
38,41
39,40
39,41
40,41
42,43
42,44
43,44
45,46
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
61,62
63,64
64,65
64,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,15,16,18,23,26,27,29,34,36,37,41,44,46,51,54,56,59,62,65,66,70,72,77,79,83,85,87,91,93,97,99,104,105,106
-----computeFrom-----
13,14
13,15
21,22
21,23
39,40
39,41
49,50
49,51
60,61
60,62
68,69
68,70
-----guardedBy-----
46,87
41,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(36,51,0)
(40,13,0)
(8,12,0)
(38,35,0)
(1,42,0)
(14,22,0)
(19,18,0)
(3,48,0)
(29,35,0)
(19,39,0)
(42,1,0)
(32,12,0)
(27,22,0)
(6,30,0)
(37,14,0)
(22,42,0)
(39,44,0)
(37,35,0)
(31,25,0)
(22,14,0)
(26,14,0)
(11,19,0)
(43,18,0)
(19,12,0)
(49,25,0)
(16,41,0)
(46,30,0)
(6,5,0)
(20,9,0)
(14,35,0)
(0,39,0)
(28,38,0)
(30,6,0)
(1,13,0)
(51,50,0)
(13,1,0)
(41,35,0)
(45,48,0)
(42,22,0)
(34,26,0)
(25,9,0)
(24,14,0)
(18,19,0)
(41,14,0)
(15,39,0)
(2,38,0)
(39,15,0)
(10,48,0)
(33,26,0)
(47,44,0)
(23,1,0)
(12,48,0)
(38,14,0)
(21,37,0)
(1,39,0)
(22,27,0)
(1,12,0)
(39,15,1)
(17,47,1)
(1,12,1)
(17,4,1)
(36,19,1)
(38,2,1)
(16,38,1)
(30,46,1)
(7,17,1)
(7,20,1)
(21,41,1)
(28,26,1)
(2,28,1)
(38,14,1)
(11,17,1)
(26,33,1)
(46,26,1)
(14,22,1)
(19,18,1)
(23,24,1)
(26,14,1)
(20,37,1)
(41,14,1)
(13,40,1)
(15,0,1)
(40,23,1)
(24,19,1)
(22,27,1)
(28,6,1)
(18,43,1)
(19,39,1)
(1,13,1)
(37,21,1)
(33,34,1)
(51,36,1)
(6,30,1)
(41,16,1)
(1,39,1)
(22,42,1)
(47,39,1)
(8,32,1)
(34,14,1)
(20,51,1)
(37,14,1)
(19,12,1)
(0,4,1)
(42,1,1)
(12,8,1)
(4,12,1)
(43,11,1)
(14,22,2)
(41,19,2)
(28,19,2)
(46,26,2)
(41,14,2)
(39,15,2)
(38,14,2)
(22,27,2)
(19,12,2)
(30,26,2)
(24,19,2)
(14,19,2)
(39,4,2)
(18,17,2)
(13,19,2)
(1,19,2)
(1,39,2)
(21,19,2)
(37,19,2)
(23,19,2)
(15,4,2)
(2,19,2)
(34,19,2)
(19,18,2)
(19,17,2)
(37,14,2)
(42,19,2)
(11,17,2)
(1,13,2)
(0,4,2)
(22,42,2)
(42,1,2)
(26,19,2)
(6,26,2)
(20,17,2)
(26,14,2)
(19,39,2)
(43,17,2)
(47,4,2)
(40,19,2)
(51,19,2)
(38,19,2)
(6,30,2)
(36,19,2)
(1,12,2)
(22,19,2)
(16,19,2)
(33,19,2)
-----------------------------------
(0,data)
(1,data*sizeof(wchar_t)
(2,HELLO_STRING)
(3,while(1)
(4,1)
(5,)
(6,exit(-1)
(7,RET)
(8,0)
(9,)
(10,data)
(11,data)
(12,data = 0)
(13,sizeof(wchar_t)
(14,myString = (wchar_t *)
(15,rand()
(16,myString)
(17,1)
(18,wcslen(HELLO_STRING)
(19,data > wcslen(HELLO_STRING)
(20,break;)
(21,myString)
(22,(wchar_t *)
(23,data)
(24,myString)
(25,)
(26,myString == NULL)
(27,wchar_t *)
(28,myString)
(29,if (myString == NULL)
(30,-1)
(31,myString)
(32,data)
(33,NULL)
(34,myString)
(35,)
(36,"Input is less than the length of the source string")
(37,free(myString)
(38,wcscpy(myString, HELLO_STRING)
(39,data = rand()
(40,wchar_t)
(41,printWLine(myString)
(42,malloc(data*sizeof(wchar_t)
(43,HELLO_STRING)
(44,)
(45,while(1)
(46,1)
(47,break;)
(48,)
(49,if (data > wcslen(HELLO_STRING)
(50,)
(51,printLine("Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^