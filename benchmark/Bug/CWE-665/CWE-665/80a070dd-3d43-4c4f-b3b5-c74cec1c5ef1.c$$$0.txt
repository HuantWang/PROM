-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,48,0)
(9,29,0)
(3,29,0)
(1,2,0)
(29,3,0)
(3,6,0)
(8,28,0)
(23,40,0)
(34,42,0)
(46,15,0)
(44,48,0)
(16,20,0)
(20,40,0)
(6,3,0)
(2,20,0)
(22,42,0)
(17,11,0)
(31,32,0)
(24,31,0)
(41,2,0)
(21,22,0)
(2,14,0)
(41,11,0)
(42,11,0)
(27,3,0)
(10,34,0)
(11,42,0)
(43,8,0)
(37,20,0)
(12,40,0)
(25,14,0)
(38,28,0)
(5,23,0)
(11,41,0)
(14,2,0)
(44,42,0)
(0,44,0)
(28,8,0)
(29,40,0)
(19,37,0)
(47,48,0)
(4,23,0)
(39,44,0)
(7,33,0)
(2,41,0)
(11,17,0)
(34,48,0)
(45,26,0)
(42,48,0)
(18,40,0)
(3,36,0)
(33,42,0)
(46,26,0)
(13,42,0)
(37,29,0)
(20,37,0)
(26,46,0)
(35,33,0)
(8,20,0)
(34,42,1)
(45,33,1)
(2,20,1)
(2,14,1)
(13,8,1)
(10,22,1)
(39,0,1)
(25,1,1)
(14,25,1)
(26,45,1)
(44,42,1)
(7,42,1)
(28,38,1)
(37,19,1)
(20,37,1)
(46,26,1)
(29,3,1)
(11,17,1)
(3,36,1)
(21,44,1)
(30,31,1)
(19,16,1)
(3,6,1)
(33,35,1)
(38,43,1)
(37,29,1)
(0,33,1)
(44,39,1)
(33,42,1)
(43,20,1)
(24,8,1)
(0,46,1)
(8,28,1)
(22,21,1)
(31,24,1)
(16,29,1)
(11,41,1)
(1,13,1)
(27,9,1)
(22,42,1)
(34,10,1)
(35,7,1)
(42,11,1)
(3,27,1)
(41,2,1)
(8,20,1)
(30,34,1)
(44,42,2)
(8,28,2)
(42,8,2)
(3,36,2)
(0,8,2)
(33,8,2)
(14,8,2)
(10,8,2)
(2,14,2)
(2,20,2)
(25,8,2)
(42,11,2)
(7,8,2)
(31,8,2)
(11,8,2)
(33,42,2)
(37,29,2)
(34,8,2)
(26,33,2)
(21,8,2)
(3,6,2)
(45,33,2)
(20,37,2)
(41,8,2)
(1,8,2)
(46,26,2)
(46,33,2)
(24,8,2)
(35,8,2)
(39,8,2)
(11,17,2)
(22,42,2)
(41,2,2)
(2,8,2)
(34,42,2)
(44,8,2)
(11,41,2)
(29,3,2)
(13,8,2)
(22,8,2)
(8,20,2)
-----------------------------------
(0,myString)
(1,data)
(2,data*sizeof(wchar_t)
(3,(size_t *)
(4,if (data > wcslen(HELLO_STRING)
(5,myString)
(6,size_t *)
(7,myString)
(8,data > wcslen(HELLO_STRING)
(9,dataPtr)
(10,myString)
(11,(wchar_t *)
(12,dataPtr)
(13,myString)
(14,sizeof(wchar_t)
(15,)
(16,data)
(17,wchar_t *)
(18,data)
(19,dataPtr)
(20,data = (*dataPtr)
(21,myString)
(22,printWLine(myString)
(23,)
(24,"Input is less than the length of the source string")
(25,wchar_t)
(26,-1)
(27,dataVoidPtr)
(28,wcslen(HELLO_STRING)
(29,* dataPtr = (size_t *)
(30,RET)
(31,printLine("Input is less than the length of the source string")
(32,)
(33,myString == NULL)
(34,free(myString)
(35,NULL)
(36,void * dataVoidPtr)
(37,*dataPtr)
(38,HELLO_STRING)
(39,HELLO_STRING)
(40,)
(41,malloc(data*sizeof(wchar_t)
(42,myString = (wchar_t *)
(43,data)
(44,wcscpy(myString, HELLO_STRING)
(45,1)
(46,exit(-1)
(47,if (myString == NULL)
(48,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^