-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_13_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
52,53
52,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
74,75
77,78
78,79
78,80
79,80
80,81
80,82
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
97,98
98,99
99,100
99,101
100,101
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,34,39,41,46,47,50,53,54,57,63,65,68,69,71,75,76,81,83,88,89,92,93,96,101,104,106
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
48,49
48,50
52,53
52,54
60,61
60,62
73,74
73,75
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_13_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_13_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_13_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(9,39,0)
(46,1,0)
(26,32,0)
(40,45,0)
(30,51,0)
(44,38,0)
(14,17,0)
(0,45,0)
(5,15,0)
(55,24,0)
(21,54,0)
(36,27,0)
(50,20,0)
(54,34,0)
(7,12,0)
(1,30,0)
(51,35,0)
(29,34,0)
(17,11,0)
(50,41,0)
(30,32,0)
(38,22,0)
(2,39,0)
(8,27,0)
(34,54,0)
(50,48,0)
(31,24,0)
(18,13,0)
(19,37,0)
(57,41,0)
(53,50,0)
(54,35,0)
(48,33,0)
(35,54,0)
(18,3,0)
(47,13,0)
(12,41,0)
(51,52,0)
(4,38,0)
(6,30,0)
(13,30,0)
(1,48,0)
(20,50,0)
(43,39,0)
(15,41,0)
(25,1,0)
(35,51,0)
(56,9,0)
(45,39,0)
(13,48,0)
(42,32,0)
(51,30,0)
(37,12,0)
(1,41,0)
(49,13,0)
(10,37,0)
(52,51,0)
(13,39,0)
(13,18,0)
(12,37,0)
(16,41,0)
(23,17,0)
(58,32,0)
(48,50,0)
(56,18,1)
(1,46,1)
(31,27,1)
(51,52,1)
(13,39,1)
(21,6,1)
(28,45,1)
(7,41,1)
(15,41,1)
(40,0,1)
(54,34,1)
(37,19,1)
(12,41,1)
(1,41,1)
(46,25,1)
(18,13,1)
(7,15,1)
(35,54,1)
(10,7,1)
(9,39,1)
(8,36,1)
(13,30,1)
(53,1,1)
(2,43,1)
(48,50,1)
(1,30,1)
(25,12,1)
(39,2,1)
(41,57,1)
(47,49,1)
(13,47,1)
(15,5,1)
(29,21,1)
(0,39,1)
(16,27,1)
(31,12,1)
(28,24,1)
(55,31,1)
(27,8,1)
(5,48,1)
(51,35,1)
(50,20,1)
(13,48,1)
(24,55,1)
(49,45,1)
(0,9,1)
(57,16,1)
(9,56,1)
(50,41,1)
(45,40,1)
(50,53,1)
(36,30,1)
(45,39,1)
(12,37,1)
(30,51,1)
(43,24,1)
(19,10,1)
(34,29,1)
(19,27,2)
(13,39,2)
(40,45,2)
(45,45,2)
(51,35,2)
(45,24,2)
(9,39,2)
(41,27,2)
(43,24,2)
(18,45,2)
(25,12,2)
(15,41,2)
(1,30,2)
(51,52,2)
(10,12,2)
(12,12,2)
(15,12,2)
(12,37,2)
(13,48,2)
(2,24,2)
(0,45,2)
(7,12,2)
(56,45,2)
(45,39,2)
(37,12,2)
(47,45,2)
(0,24,2)
(53,12,2)
(48,50,2)
(50,20,2)
(13,30,2)
(5,12,2)
(1,41,2)
(12,27,2)
(35,54,2)
(39,24,2)
(30,51,2)
(7,27,2)
(18,13,2)
(49,45,2)
(54,34,2)
(50,41,2)
(10,27,2)
(16,27,2)
(57,27,2)
(50,12,2)
(46,12,2)
(37,27,2)
(9,45,2)
(12,41,2)
(19,12,2)
(40,24,2)
(1,12,2)
(13,45,2)
(48,12,2)
-----------------------------------
(0,i)
(1,data[i])
(2,0)
(3,)
(4,for(i=0; i<(10/2)
(5,i)
(6,data)
(7,i)
(8,5)
(9,i++)
(10,10)
(11,)
(12,i<(10/2)
(13,data[i])
(14,i)
(15,i++)
(16,i)
(17,)
(18,printDoubleLine(data[i])
(19,2)
(20,double)
(21,10)
(22,)
(23,for(i=0; i<10; i++)
(24,GLOBAL_CONST_FIVE==5)
(25,data)
(26,if(GLOBAL_CONST_FIVE==5)
(27,GLOBAL_CONST_FIVE==5)
(28,RET)
(29,double)
(30,data = (double *)
(31,GLOBAL_CONST_FIVE)
(32,)
(33,)
(34,sizeof(double)
(35,ALLOCA(10*sizeof(double)
(36,GLOBAL_CONST_FIVE)
(37,10/2)
(38,)
(39,i=0)
(40,10)
(41,i=0)
(42,if(GLOBAL_CONST_FIVE==5)
(43,i)
(44,i)
(45,i<10)
(46,i)
(47,i)
(48,data[i] = (double)
(49,data)
(50,(double)
(51,(double *)
(52,double *)
(53,i)
(54,10*sizeof(double)
(55,5)
(56,i)
(57,0)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^