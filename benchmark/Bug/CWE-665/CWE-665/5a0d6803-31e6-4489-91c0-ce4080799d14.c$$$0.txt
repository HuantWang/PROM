-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,36,0)
(2,45,0)
(5,24,0)
(43,3,0)
(8,28,0)
(24,2,0)
(32,28,0)
(2,24,0)
(6,47,0)
(12,24,0)
(13,50,0)
(4,27,0)
(0,44,0)
(31,44,0)
(42,2,0)
(35,27,0)
(38,39,0)
(47,1,0)
(51,24,0)
(49,47,0)
(41,33,0)
(39,44,0)
(4,24,0)
(39,20,0)
(16,0,0)
(2,42,0)
(48,28,0)
(23,30,0)
(33,0,0)
(20,39,0)
(14,51,0)
(0,42,0)
(21,1,0)
(24,27,0)
(19,5,0)
(11,12,0)
(9,15,0)
(51,27,0)
(0,33,0)
(44,28,0)
(45,2,0)
(42,0,0)
(26,20,0)
(50,25,0)
(29,5,0)
(7,24,0)
(1,47,0)
(18,44,0)
(15,43,0)
(43,15,0)
(46,12,0)
(37,30,0)
(47,17,0)
(5,27,0)
(34,4,0)
(1,44,0)
(10,44,1)
(12,11,1)
(42,0,1)
(21,6,1)
(40,10,1)
(39,44,1)
(7,39,1)
(1,44,1)
(38,40,1)
(46,24,1)
(9,12,1)
(13,39,1)
(44,18,1)
(4,24,1)
(6,49,1)
(16,7,1)
(22,40,1)
(22,4,1)
(22,50,1)
(39,20,1)
(0,44,1)
(33,41,1)
(41,16,1)
(29,43,1)
(47,1,1)
(0,33,1)
(40,47,1)
(4,34,1)
(12,24,1)
(14,5,1)
(2,45,1)
(49,10,1)
(19,29,1)
(51,14,1)
(1,21,1)
(50,13,1)
(43,15,1)
(34,51,1)
(5,19,1)
(18,31,1)
(5,24,1)
(51,24,1)
(24,2,1)
(26,38,1)
(29,12,1)
(20,26,1)
(11,46,1)
(15,9,1)
(2,42,1)
(7,39,2)
(11,39,2)
(5,39,2)
(50,39,2)
(12,39,2)
(12,24,2)
(51,39,2)
(41,39,2)
(34,39,2)
(13,39,2)
(0,39,2)
(6,10,2)
(5,24,2)
(29,39,2)
(43,12,2)
(33,39,2)
(4,24,2)
(0,33,2)
(39,44,2)
(39,20,2)
(9,12,2)
(42,0,2)
(51,24,2)
(1,10,2)
(46,39,2)
(47,1,2)
(38,40,2)
(0,44,2)
(39,40,2)
(15,12,2)
(16,39,2)
(49,10,2)
(2,42,2)
(2,39,2)
(14,39,2)
(1,44,2)
(42,39,2)
(26,40,2)
(24,2,2)
(24,39,2)
(2,45,2)
(19,39,2)
(21,10,2)
(4,39,2)
(47,10,2)
(20,40,2)
(43,15,2)
-----------------------------------
(0,data*sizeof(wchar_t)
(1,&data)
(2,(wchar_t *)
(3,)
(4,free(myString)
(5,wcscpy(myString, HELLO_STRING)
(6,"%zu")
(7,myString)
(8,data)
(9,1)
(10,staticReturnsTrue()
(11,NULL)
(12,myString == NULL)
(13,"Input is less than the length of the source string")
(14,myString)
(15,-1)
(16,data)
(17,)
(18,0)
(19,HELLO_STRING)
(20,wcslen(HELLO_STRING)
(21,data)
(22,RET)
(23,myString)
(24,myString = (wchar_t *)
(25,)
(26,HELLO_STRING)
(27,)
(28,)
(29,myString)
(30,)
(31,data)
(32,if(staticReturnsTrue()
(33,sizeof(wchar_t)
(34,myString)
(35,if (myString == NULL)
(36,)
(37,if (data > wcslen(HELLO_STRING)
(38,data)
(39,data > wcslen(HELLO_STRING)
(40,staticReturnsTrue()
(41,wchar_t)
(42,malloc(data*sizeof(wchar_t)
(43,exit(-1)
(44,data = 0)
(45,wchar_t *)
(46,myString)
(47,fscanf(stdin, "%zu", &data)
(48,if(staticReturnsTrue()
(49,stdin)
(50,printLine("Input is less than the length of the source string")
(51,printWLine(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^