-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_pointer_12_bad()
{
    twoIntsStruct * data;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Initialize data */
        /* initialize both the pointer and the data pointed to */
        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        data->intOne = 5;
        data->intTwo = 6;
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        printIntLine(data->intOne);
        printIntLine(data->intTwo);
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        /* initialize both the pointer and the data pointed to */
        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        data->intOne = 5;
        data->intTwo = 6;
        printIntLine(data->intOne);
        printIntLine(data->intTwo);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
6,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
14,15
15,16
17,18
19,20
19,21
19,22
19,23
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
60,62
61,62
65,66
65,67
65,68
66,67
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
86,88
86,89
86,90
86,91
86,92
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
100,101
101,102
101,103
102,103
105,106
105,107
106,107
106,108
107,108
109,110
111,112
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
125,126
126,127
126,128
127,128
127,129
128,129
132,133
133,134
133,135
134,135
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
144,146
145,146
-----nextToken-----
2,4,9,11,12,16,18,23,27,29,32,36,37,41,43,48,50,55,56,57,62,63,64,68,73,76,77,81,84,85,90,94,96,99,103,104,108,110,115,117,122,123,124,129,130,131,135,138,139,143,146,147
-----computeFrom-----
21,22
21,23
39,40
39,41
52,53
52,54
59,60
59,61
88,89
88,90
106,107
106,108
119,120
119,121
126,127
126,128
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_pointer_12_bad(){    twoIntsStruct * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(data->intOne);        printIntLine(data->intTwo);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;        printIntLine(data->intOne);        printIntLine(data->intTwo);    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_pointer_12_bad()
CWE457_Use_of_Uninitialized_Variable__struct_pointer_12_bad
{    twoIntsStruct * data;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(data->intOne);        printIntLine(data->intTwo);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;        printIntLine(data->intOne);        printIntLine(data->intTwo);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Initialize data */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;    }
data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(twoIntsStruct))
malloc
malloc
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 5;
data->intOne = 5
data->intOne
data
data
intOne
5
data->intTwo = 6;
data->intTwo = 6
data->intTwo
data
data
intTwo
6
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(data->intOne);        printIntLine(data->intTwo);    }    else    {        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;        printIntLine(data->intOne);        printIntLine(data->intTwo);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        printIntLine(data->intOne);        printIntLine(data->intTwo);    }
printIntLine(data->intOne);
printIntLine(data->intOne)
printIntLine
printIntLine
data->intOne
data
data
intOne
printIntLine(data->intTwo);
printIntLine(data->intTwo)
printIntLine
printIntLine
data->intTwo
data
data
intTwo
{        /* FIX: Ensure data is initialized before use */        /* initialize both the pointer and the data pointed to */        data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        data->intOne = 5;        data->intTwo = 6;        printIntLine(data->intOne);        printIntLine(data->intTwo);    }
data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(twoIntsStruct))
malloc
malloc
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 5;
data->intOne = 5
data->intOne
data
data
intOne
5
data->intTwo = 6;
data->intTwo = 6
data->intTwo
data
data
intTwo
6
printIntLine(data->intOne);
printIntLine(data->intOne)
printIntLine
printIntLine
data->intOne
data
data
intOne
printIntLine(data->intTwo);
printIntLine(data->intTwo)
printIntLine
printIntLine
data->intTwo
data
data
intTwo
-----joern-----
(36,57,0)
(26,9,0)
(37,29,0)
(4,41,0)
(70,42,0)
(53,46,0)
(71,57,0)
(75,1,0)
(33,24,0)
(15,36,0)
(32,57,0)
(69,73,0)
(11,60,0)
(41,4,0)
(7,24,0)
(30,6,0)
(40,63,0)
(67,53,0)
(60,6,0)
(18,35,0)
(53,68,0)
(22,53,0)
(68,57,0)
(38,42,0)
(60,75,0)
(66,9,0)
(62,55,0)
(49,43,0)
(53,73,0)
(54,37,0)
(63,71,0)
(64,41,0)
(14,6,0)
(39,14,0)
(66,55,0)
(8,51,0)
(61,51,0)
(13,48,0)
(25,1,0)
(17,63,0)
(56,14,0)
(19,27,0)
(36,37,0)
(63,36,0)
(0,44,0)
(70,16,0)
(60,18,0)
(12,20,0)
(45,57,0)
(27,32,0)
(20,68,0)
(42,70,0)
(48,36,0)
(65,27,0)
(20,36,0)
(43,29,0)
(51,6,0)
(47,6,0)
(59,75,0)
(24,6,0)
(14,75,0)
(71,63,0)
(9,26,0)
(51,73,0)
(52,44,0)
(50,51,0)
(29,37,0)
(27,36,0)
(63,32,0)
(9,66,0)
(6,1,0)
(3,60,0)
(9,6,0)
(6,9,0)
(34,68,0)
(4,23,0)
(10,47,0)
(46,57,0)
(18,60,0)
(73,1,0)
(37,54,0)
(63,75,0)
(47,73,0)
(28,20,0)
(31,44,0)
(53,36,0)
(55,66,0)
(29,43,0)
(46,53,0)
(37,36,0)
(21,47,0)
(72,32,0)
(8,35,0)
(51,8,0)
(58,48,0)
(8,51,1)
(3,11,1)
(40,17,1)
(10,21,1)
(21,70,1)
(28,12,1)
(63,40,1)
(67,22,1)
(5,75,1)
(63,32,1)
(63,75,1)
(13,36,1)
(51,61,1)
(20,36,1)
(12,48,1)
(37,29,1)
(71,63,1)
(51,73,1)
(42,38,1)
(50,5,1)
(59,14,1)
(55,62,1)
(68,34,1)
(60,6,1)
(46,53,1)
(37,54,1)
(19,65,1)
(65,68,1)
(70,42,1)
(60,3,1)
(15,5,1)
(63,36,1)
(58,13,1)
(43,49,1)
(21,24,1)
(7,6,1)
(38,24,1)
(47,6,1)
(73,69,1)
(51,6,1)
(41,64,1)
(24,33,1)
(29,43,1)
(4,41,1)
(53,68,1)
(22,32,1)
(48,36,1)
(33,7,1)
(75,59,1)
(66,55,1)
(11,8,1)
(17,46,1)
(9,66,1)
(2,71,1)
(6,9,1)
(60,75,1)
(72,27,1)
(69,47,1)
(24,6,1)
(48,58,1)
(49,15,1)
(18,60,1)
(20,28,1)
(53,67,1)
(9,26,1)
(53,73,1)
(64,48,1)
(32,72,1)
(27,19,1)
(14,56,1)
(56,39,1)
(62,30,1)
(27,36,1)
(2,18,1)
(47,10,1)
(14,6,1)
(30,74,1)
(34,20,1)
(5,74,1)
(53,36,1)
(39,73,1)
(61,50,1)
(12,4,1)
(36,37,1)
(9,74,2)
(22,5,2)
(51,73,2)
(66,74,2)
(11,5,2)
(46,53,2)
(60,6,2)
(6,9,2)
(4,41,2)
(30,74,2)
(21,74,2)
(27,36,2)
(60,5,2)
(9,26,2)
(63,75,2)
(37,5,2)
(64,48,2)
(36,37,2)
(7,74,2)
(19,5,2)
(10,74,2)
(53,5,2)
(68,5,2)
(66,55,2)
(51,5,2)
(18,5,2)
(75,74,2)
(37,54,2)
(41,48,2)
(8,51,2)
(53,36,2)
(70,24,2)
(56,74,2)
(62,74,2)
(20,36,2)
(50,5,2)
(29,43,2)
(72,5,2)
(51,6,2)
(6,74,2)
(55,74,2)
(14,74,2)
(49,5,2)
(70,42,2)
(73,74,2)
(13,5,2)
(24,74,2)
(63,36,2)
(47,74,2)
(27,5,2)
(61,5,2)
(65,5,2)
(46,5,2)
(69,74,2)
(63,5,2)
(3,5,2)
(20,5,2)
(42,24,2)
(14,6,2)
(34,5,2)
(28,5,2)
(53,73,2)
(4,48,2)
(8,5,2)
(17,5,2)
(71,5,2)
(59,74,2)
(9,66,2)
(58,5,2)
(48,36,2)
(43,5,2)
(37,29,2)
(24,6,2)
(53,68,2)
(38,24,2)
(39,74,2)
(48,5,2)
(71,63,2)
(33,74,2)
(60,75,2)
(63,32,2)
(29,5,2)
(40,5,2)
(15,5,2)
(18,60,2)
(12,5,2)
(36,5,2)
(47,6,2)
(32,5,2)
(67,5,2)
-----------------------------------
(0,if(globalReturnsTrueOrFalse()
(1,)
(2,RET)
(3,intTwo)
(4,exit(-1)
(5,globalReturnsTrueOrFalse()
(6,data = (twoIntsStruct *)
(7,data)
(8,printIntLine(data->intOne)
(9,(twoIntsStruct *)
(10,intOne)
(11,data)
(12,data)
(13,data)
(14,data->intTwo)
(15,data)
(16,)
(17,data)
(18,printIntLine(data->intTwo)
(19,intTwo)
(20,data->intOne)
(21,data)
(22,data)
(23,)
(24,data == NULL)
(25,if (data == NULL)
(26,twoIntsStruct *)
(27,data->intTwo)
(28,intOne)
(29,malloc(sizeof(twoIntsStruct)
(30,data)
(31,if(globalReturnsTrueOrFalse()
(32,data->intTwo = 6)
(33,NULL)
(34,5)
(35,)
(36,data = (twoIntsStruct *)
(37,(twoIntsStruct *)
(38,1)
(39,data)
(40,intTwo)
(41,-1)
(42,-1)
(43,sizeof(twoIntsStruct)
(44,)
(45,if (data == NULL)
(46,printIntLine(data->intOne)
(47,data->intOne)
(48,data == NULL)
(49,twoIntsStruct)
(50,data)
(51,data->intOne)
(52,data)
(53,data->intOne)
(54,twoIntsStruct *)
(55,sizeof(twoIntsStruct)
(56,intTwo)
(57,)
(58,NULL)
(59,6)
(60,data->intTwo)
(61,intOne)
(62,twoIntsStruct)
(63,data->intTwo)
(64,1)
(65,data)
(66,malloc(sizeof(twoIntsStruct)
(67,intOne)
(68,data->intOne = 5)
(69,5)
(70,exit(-1)
(71,printIntLine(data->intTwo)
(72,6)
(73,data->intOne = 5)
(74,globalReturnsTrueOrFalse()
(75,data->intTwo = 6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^