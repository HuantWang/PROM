-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_01_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i] = i;
        }
    }
    /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
32,33
32,34
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
46,47
46,48
49,50
50,51
52,53
53,54
54,55
54,56
55,56
55,57
56,57
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
74,75
74,76
75,76
78,79
79,80
81,82
82,83
83,84
83,85
84,85
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,41,44,47,48,51,57,59,61,65,67,72,73,76,77,80,85,88,90
-----computeFrom-----
13,14
13,15
24,25
24,26
38,39
38,40
42,43
42,44
46,47
46,48
54,55
54,56
70,71
70,72
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_01_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_01_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_01_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }    /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

{        int i;        for(i=0; i<(10/2); i++)        {            data[i] = i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i] = i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i] = i;        }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i]);        }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(8,15,0)
(17,15,0)
(2,42,0)
(41,36,0)
(19,12,0)
(27,29,0)
(0,32,0)
(31,38,0)
(43,10,0)
(3,23,0)
(8,12,0)
(46,29,0)
(22,21,0)
(7,19,0)
(30,2,0)
(18,2,0)
(12,35,0)
(37,29,0)
(38,42,0)
(44,7,0)
(35,12,0)
(1,36,0)
(20,15,0)
(7,44,0)
(2,8,0)
(32,42,0)
(16,42,0)
(33,32,0)
(39,46,0)
(10,46,0)
(26,29,0)
(13,26,0)
(46,6,0)
(5,42,0)
(11,8,0)
(34,2,0)
(2,34,0)
(24,7,0)
(34,25,0)
(12,19,0)
(36,15,0)
(2,46,0)
(28,10,0)
(12,8,0)
(23,29,0)
(21,26,0)
(10,8,0)
(9,20,0)
(40,44,0)
(26,21,0)
(10,29,0)
(4,21,0)
(14,20,0)
(19,7,0)
(38,42,1)
(46,39,1)
(12,35,1)
(2,46,1)
(4,13,1)
(0,42,1)
(10,8,1)
(21,22,1)
(7,44,1)
(3,46,1)
(10,43,1)
(12,19,1)
(2,8,1)
(29,37,1)
(43,28,1)
(42,5,1)
(45,32,1)
(26,29,1)
(19,7,1)
(13,29,1)
(28,26,1)
(38,31,1)
(40,24,1)
(2,30,1)
(0,38,1)
(16,26,1)
(13,23,1)
(44,40,1)
(23,29,1)
(5,16,1)
(30,18,1)
(27,8,1)
(46,29,1)
(8,12,1)
(31,34,1)
(37,27,1)
(2,42,1)
(34,2,1)
(26,21,1)
(23,3,1)
(22,4,1)
(18,32,1)
(33,0,1)
(39,10,1)
(10,29,1)
(24,11,1)
(32,33,1)
(32,42,1)
(2,8,2)
(43,26,2)
(10,8,2)
(38,32,2)
(28,26,2)
(23,26,2)
(46,29,2)
(2,32,2)
(26,26,2)
(4,26,2)
(10,29,2)
(23,29,2)
(30,32,2)
(12,19,2)
(13,26,2)
(39,26,2)
(31,32,2)
(18,32,2)
(32,32,2)
(34,2,2)
(7,44,2)
(2,42,2)
(10,26,2)
(22,26,2)
(3,26,2)
(21,26,2)
(33,32,2)
(26,29,2)
(38,42,2)
(19,7,2)
(46,26,2)
(8,12,2)
(34,32,2)
(0,32,2)
(32,42,2)
(2,46,2)
(26,21,2)
(12,35,2)
-----------------------------------
(0,i)
(1,for(i=0; i<(10/2)
(2,data[i])
(3,i)
(4,10)
(5,0)
(6,)
(7,10*sizeof(int)
(8,data = (int *)
(9,i)
(10,data[i])
(11,data)
(12,(int *)
(13,i)
(14,for(i=0; i<10; i++)
(15,)
(16,i)
(17,data)
(18,data)
(19,ALLOCA(10*sizeof(int)
(20,)
(21,10/2)
(22,2)
(23,i++)
(24,10)
(25,)
(26,i<(10/2)
(27,i)
(28,data)
(29,i=0)
(30,i)
(31,i)
(32,i<10)
(33,10)
(34,printIntLine(data[i])
(35,int *)
(36,)
(37,0)
(38,i++)
(39,i)
(40,int)
(41,i)
(42,i=0)
(43,i)
(44,sizeof(int)
(45,RET)
(46,data[i] = i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^