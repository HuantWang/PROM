-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_10_bad()
{
    double * data;
    double dataUninitArray[10];
    data = dataUninitArray;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
50,51
51,52
53,54
54,55
55,56
55,57
56,57
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,29,32,37,39,44,45,48,49,52,57,60,62
-----computeFrom-----
20,21
20,22
42,43
42,44
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_10_bad(){    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_10_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_10_bad
{    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
double dataUninitArray[10];
double dataUninitArray[10];
double
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(6,17,0)
(26,0,0)
(27,19,0)
(2,12,0)
(18,0,0)
(25,10,0)
(7,1,0)
(4,1,0)
(8,19,0)
(9,0,0)
(20,15,0)
(11,10,0)
(2,1,0)
(14,24,0)
(16,0,0)
(1,15,0)
(19,10,0)
(17,10,0)
(3,14,0)
(1,2,0)
(1,10,0)
(13,15,0)
(15,0,0)
(23,14,0)
(7,4,1)
(10,25,1)
(22,21,1)
(2,1,1)
(8,27,1)
(5,15,1)
(27,17,1)
(11,21,1)
(1,7,1)
(4,19,1)
(17,10,1)
(6,2,1)
(22,19,1)
(15,13,1)
(25,11,1)
(19,8,1)
(1,15,1)
(21,5,1)
(1,10,1)
(27,10,1)
(17,6,1)
(19,10,1)
(13,20,1)
(1,15,2)
(19,21,2)
(25,21,2)
(1,19,2)
(1,10,2)
(8,19,2)
(11,21,2)
(2,1,2)
(4,19,2)
(6,19,2)
(8,21,2)
(19,10,2)
(19,19,2)
(2,19,2)
(7,19,2)
(27,21,2)
(10,21,2)
(17,10,2)
(17,19,2)
(27,19,2)
-----------------------------------
(0,)
(1,data[i])
(2,printDoubleLine(data[i])
(3,for(i=0; i<10; i++)
(4,data)
(5,globalTrue)
(6,i)
(7,i)
(8,10)
(9,dataUninitArray)
(10,i=0)
(11,i)
(12,)
(13,dataUninitArray)
(14,)
(15,data = dataUninitArray)
(16,if(globalTrue)
(17,i++)
(18,if(globalTrue)
(19,i<10)
(20,data)
(21,globalTrue)
(22,RET)
(23,i)
(24,)
(25,0)
(26,data)
(27,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^