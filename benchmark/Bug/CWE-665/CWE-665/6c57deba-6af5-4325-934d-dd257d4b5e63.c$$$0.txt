-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_15_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i] = (double)i;
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printDoubleLine(data[i]);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
32,33
32,34
32,35
32,36
32,37
32,38
33,34
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
73,74
74,75
74,76
75,76
79,80
79,81
81,82
81,83
81,84
81,85
81,86
81,87
82,83
84,85
84,86
85,86
86,87
86,88
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
115,116
116,117
116,118
117,118
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,31,34,38,40,45,46,49,52,53,56,62,64,67,68,70,71,72,76,77,78,80,83,87,89,94,95,98,99,102,107,110,112,113,114,118,119,120
-----computeFrom-----
13,14
13,15
24,25
24,26
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_15_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_15_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int i;        for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i] = (double)i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i] = (double)i;        }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printDoubleLine(data[i]);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printDoubleLine(data[i]);        }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,41,0)
(35,4,0)
(64,18,0)
(22,30,0)
(34,18,0)
(61,30,0)
(62,18,0)
(9,63,0)
(38,26,0)
(4,41,0)
(50,1,0)
(30,22,0)
(51,18,0)
(6,65,0)
(20,60,0)
(4,11,0)
(58,21,0)
(63,19,0)
(19,30,0)
(26,41,0)
(27,7,0)
(54,41,0)
(4,35,0)
(63,42,0)
(60,42,0)
(56,10,0)
(15,1,0)
(43,28,0)
(32,64,0)
(12,63,0)
(47,17,0)
(63,11,0)
(10,46,0)
(13,36,0)
(26,19,0)
(37,18,0)
(7,65,0)
(65,41,0)
(30,19,0)
(33,21,0)
(57,46,0)
(1,18,0)
(19,28,0)
(17,42,0)
(31,26,0)
(11,29,0)
(26,11,0)
(53,63,0)
(23,21,0)
(39,4,0)
(14,28,0)
(3,23,0)
(30,61,0)
(63,12,0)
(52,60,0)
(48,19,0)
(40,42,0)
(45,5,0)
(49,23,0)
(0,21,0)
(55,7,0)
(46,22,0)
(2,41,0)
(66,21,0)
(65,7,0)
(36,21,0)
(59,28,0)
(16,42,0)
(46,10,0)
(22,46,0)
(11,4,0)
(12,44,0)
(45,11,1)
(64,32,1)
(16,40,1)
(26,19,1)
(65,7,1)
(34,65,1)
(22,46,1)
(19,30,1)
(63,9,1)
(41,2,1)
(39,26,1)
(17,47,1)
(63,42,1)
(66,60,1)
(30,22,1)
(30,61,1)
(20,42,1)
(58,36,1)
(60,52,1)
(4,39,1)
(20,17,1)
(4,35,1)
(2,54,1)
(5,41,1)
(12,63,1)
(54,25,1)
(42,16,1)
(6,5,1)
(27,55,1)
(7,27,1)
(37,64,1)
(40,8,1)
(4,41,1)
(63,11,1)
(5,45,1)
(65,41,1)
(57,48,1)
(52,20,1)
(24,66,1)
(17,42,1)
(10,56,1)
(56,57,1)
(38,31,1)
(63,19,1)
(9,53,1)
(8,37,1)
(25,19,1)
(8,34,1)
(36,13,1)
(53,60,1)
(32,25,1)
(47,12,1)
(26,41,1)
(31,65,1)
(26,38,1)
(46,10,1)
(6,41,1)
(11,4,1)
(13,8,1)
(55,6,1)
(24,58,1)
(60,42,1)
(22,46,2)
(20,8,2)
(36,8,2)
(27,25,2)
(7,65,2)
(60,42,2)
(4,65,2)
(52,60,2)
(65,25,2)
(6,65,2)
(7,25,2)
(26,65,2)
(63,42,2)
(60,8,2)
(45,65,2)
(26,41,2)
(64,25,2)
(40,8,2)
(55,25,2)
(47,60,2)
(17,42,2)
(11,4,2)
(63,60,2)
(9,60,2)
(53,60,2)
(46,10,2)
(30,22,2)
(63,19,2)
(17,60,2)
(12,60,2)
(2,25,2)
(42,8,2)
(19,30,2)
(39,65,2)
(27,65,2)
(58,8,2)
(65,65,2)
(5,65,2)
(6,25,2)
(54,25,2)
(38,65,2)
(66,8,2)
(16,8,2)
(34,25,2)
(65,41,2)
(60,60,2)
(31,65,2)
(55,65,2)
(63,11,2)
(13,8,2)
(65,7,2)
(20,60,2)
(12,63,2)
(30,61,2)
(37,25,2)
(4,35,2)
(11,65,2)
(26,19,2)
(32,25,2)
(41,25,2)
(5,41,2)
(52,8,2)
(4,41,2)
-----------------------------------
(0,case 7:)
(1,)
(2,0)
(3,for(i=0; i<10; i++)
(4,(double)
(5,i++)
(6,i)
(7,10/2)
(8,7)
(9,i)
(10,sizeof(double)
(11,data[i] = (double)
(12,printDoubleLine(data[i])
(13,"Benign, fixed string")
(14,switch(7)
(15,i)
(16,0)
(17,i++)
(18,)
(19,data = (double *)
(20,i)
(21,)
(22,ALLOCA(10*sizeof(double)
(23,)
(24,RET)
(25,6)
(26,data[i])
(27,2)
(28,)
(29,)
(30,(double *)
(31,data)
(32,"Benign, fixed string")
(33,default:)
(34,break;)
(35,double)
(36,printLine("Benign, fixed string")
(37,break;)
(38,i)
(39,i)
(40,i)
(41,i=0)
(42,i=0)
(43,switch(6)
(44,)
(45,i)
(46,10*sizeof(double)
(47,i)
(48,data)
(49,i)
(50,for(i=0; i<(10/2)
(51,default:)
(52,10)
(53,data)
(54,i)
(55,10)
(56,double)
(57,10)
(58,break;)
(59,data)
(60,i<10)
(61,double *)
(62,case 6:)
(63,data[i])
(64,printLine("Benign, fixed string")
(65,i<(10/2)
(66,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^