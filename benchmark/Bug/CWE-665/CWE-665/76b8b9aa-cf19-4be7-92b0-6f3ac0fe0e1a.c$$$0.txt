-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_03_bad()
{
    double * data;
    double dataUninitArray[10];
    data = dataUninitArray;
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
52,53
53,54
55,56
56,57
57,58
57,59
58,59
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,28,30,33,34,39,41,46,47,50,51,54,59,62,64
-----computeFrom-----
20,21
20,22
26,27
26,28
32,33
32,34
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_03_bad(){    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_declare_no_init_03_bad
{    double * data;    double dataUninitArray[10];    data = dataUninitArray;    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
double dataUninitArray[10];
double dataUninitArray[10];
double
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(23,2,0)
(5,27,0)
(12,3,0)
(18,17,0)
(2,4,0)
(3,27,0)
(6,29,0)
(8,28,0)
(13,3,0)
(19,0,0)
(25,22,0)
(16,28,0)
(9,0,0)
(23,10,0)
(15,22,0)
(22,20,0)
(17,10,0)
(14,27,0)
(24,27,0)
(21,23,0)
(7,27,0)
(30,10,0)
(23,3,0)
(11,23,0)
(2,23,0)
(31,29,0)
(26,10,0)
(0,10,0)
(1,0,1)
(0,10,1)
(28,16,1)
(0,19,1)
(10,30,1)
(9,10,1)
(26,29,1)
(2,23,1)
(9,17,1)
(11,0,1)
(16,8,1)
(18,2,1)
(17,18,1)
(23,21,1)
(8,3,1)
(29,31,1)
(1,29,1)
(31,6,1)
(3,12,1)
(12,13,1)
(30,26,1)
(6,28,1)
(23,10,1)
(23,3,1)
(19,9,1)
(17,10,1)
(21,11,1)
(17,10,2)
(11,0,2)
(23,10,2)
(10,29,2)
(9,0,2)
(9,29,2)
(0,29,2)
(0,0,2)
(19,0,2)
(0,10,2)
(21,0,2)
(2,23,2)
(23,3,2)
(18,0,2)
(23,0,2)
(19,29,2)
(26,29,2)
(17,0,2)
(30,29,2)
(2,0,2)
-----------------------------------
(0,i<10)
(1,RET)
(2,printDoubleLine(data[i])
(3,data = dataUninitArray)
(4,)
(5,data)
(6,5)
(7,dataUninitArray)
(8,5)
(9,i)
(10,i=0)
(11,data)
(12,dataUninitArray)
(13,data)
(14,if(5==5)
(15,for(i=0; i<10; i++)
(16,5)
(17,i++)
(18,i)
(19,10)
(20,)
(21,i)
(22,)
(23,data[i])
(24,if(5==5)
(25,i)
(26,i)
(27,)
(28,5==5)
(29,5==5)
(30,0)
(31,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^