-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
43,44
44,45
44,46
46,47
46,48
49,50
49,51
49,52
50,51
50,52
51,52
53,54
53,55
54,55
56,57
58,59
58,60
58,61
58,62
58,63
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
113,114
113,115
114,115
119,120
120,121
120,122
121,122
-----nextToken-----
2,4,9,11,15,16,18,21,25,28,29,30,34,35,36,38,41,45,47,48,52,55,57,62,65,67,70,73,76,77,81,83,88,90,94,96,98,102,104,108,110,115,116,117,118,122,123,124
-----computeFrom-----
13,14
13,15
23,24
23,25
50,51
50,52
60,61
60,62
71,72
71,73
79,80
79,81
-----guardedBy-----
57,98
52,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(60,19,0)
(57,19,0)
(38,50,0)
(38,4,0)
(16,60,0)
(54,19,0)
(34,1,0)
(59,1,0)
(40,11,0)
(10,11,0)
(28,3,0)
(0,51,0)
(2,20,0)
(9,4,0)
(15,34,0)
(22,4,0)
(50,38,0)
(38,32,0)
(3,15,0)
(32,51,0)
(52,11,0)
(8,19,0)
(7,34,0)
(5,55,0)
(58,19,0)
(47,34,0)
(13,34,0)
(5,21,0)
(23,32,0)
(47,1,0)
(61,1,0)
(28,48,0)
(15,39,0)
(53,59,0)
(24,50,0)
(21,5,0)
(37,32,0)
(6,51,0)
(43,13,0)
(33,21,0)
(12,49,0)
(36,11,0)
(56,11,0)
(34,15,0)
(49,19,0)
(14,10,0)
(26,49,0)
(59,34,0)
(25,38,0)
(20,30,0)
(15,3,0)
(17,45,0)
(18,28,0)
(4,22,0)
(45,1,0)
(4,11,0)
(31,47,0)
(35,13,0)
(41,48,0)
(28,32,0)
(39,15,0)
(42,45,0)
(45,34,0)
(3,28,0)
(27,51,0)
(28,4,0)
(48,28,0)
(52,10,1)
(31,59,1)
(46,52,1)
(4,22,1)
(44,57,1)
(28,4,1)
(32,37,1)
(37,23,1)
(24,25,1)
(9,29,1)
(57,20,1)
(42,17,1)
(47,34,1)
(57,47,1)
(38,50,1)
(22,9,1)
(28,48,1)
(36,4,1)
(45,42,1)
(38,4,1)
(60,16,1)
(18,7,1)
(14,29,1)
(38,32,1)
(13,34,1)
(47,31,1)
(43,34,1)
(15,3,1)
(28,32,1)
(13,35,1)
(33,13,1)
(20,2,1)
(15,39,1)
(17,5,1)
(45,34,1)
(5,21,1)
(29,32,1)
(50,24,1)
(10,14,1)
(59,34,1)
(48,41,1)
(3,28,1)
(7,38,1)
(41,18,1)
(17,13,1)
(34,15,1)
(8,60,1)
(21,33,1)
(53,45,1)
(25,46,1)
(35,43,1)
(2,38,1)
(16,46,1)
(44,8,1)
(59,53,1)
(46,36,1)
(31,38,2)
(43,38,2)
(47,38,2)
(16,46,2)
(53,38,2)
(35,38,2)
(13,38,2)
(7,38,2)
(48,38,2)
(4,22,2)
(34,15,2)
(28,32,2)
(25,46,2)
(21,13,2)
(60,46,2)
(57,46,2)
(38,32,2)
(45,34,2)
(20,38,2)
(13,34,2)
(41,38,2)
(22,29,2)
(4,29,2)
(52,29,2)
(36,29,2)
(50,46,2)
(10,29,2)
(24,46,2)
(47,34,2)
(14,29,2)
(3,38,2)
(59,38,2)
(59,34,2)
(15,38,2)
(18,38,2)
(28,4,2)
(5,21,2)
(15,39,2)
(33,13,2)
(38,46,2)
(9,29,2)
(38,50,2)
(38,4,2)
(8,46,2)
(28,48,2)
(5,13,2)
(2,38,2)
(45,38,2)
(34,38,2)
(28,38,2)
(42,38,2)
(17,38,2)
(3,28,2)
(15,3,2)
-----------------------------------
(0,switch(7)
(1,)
(2,"Input is less than the length of the source string")
(3,malloc(data*sizeof(wchar_t)
(4,data = rand()
(5,exit(-1)
(6,switch(6)
(7,myString)
(8,break;)
(9,data)
(10,printLine("Benign, fixed string")
(11,)
(12,if (data > wcslen(HELLO_STRING)
(13,myString == NULL)
(14,"Benign, fixed string")
(15,(wchar_t *)
(16,"Benign, fixed string")
(17,myString)
(18,data)
(19,)
(20,printLine("Input is less than the length of the source string")
(21,-1)
(22,rand()
(23,data)
(24,HELLO_STRING)
(25,data)
(26,myString)
(27,data)
(28,data*sizeof(wchar_t)
(29,6)
(30,)
(31,myString)
(32,data = 0)
(33,1)
(34,myString = (wchar_t *)
(35,NULL)
(36,break;)
(37,0)
(38,data > wcslen(HELLO_STRING)
(39,wchar_t *)
(40,case 6:)
(41,wchar_t)
(42,HELLO_STRING)
(43,myString)
(44,RET)
(45,wcscpy(myString, HELLO_STRING)
(46,7)
(47,free(myString)
(48,sizeof(wchar_t)
(49,)
(50,wcslen(HELLO_STRING)
(51,)
(52,break;)
(53,myString)
(54,case 7:)
(55,)
(56,default:)
(57,break;)
(58,default:)
(59,printWLine(myString)
(60,printLine("Benign, fixed string")
(61,if (myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^