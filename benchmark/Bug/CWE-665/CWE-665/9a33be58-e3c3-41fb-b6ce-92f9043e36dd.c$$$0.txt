-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_04_bad()
{
    int * data;
    int dataUninitArray[10];
    data = dataUninitArray;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
50,51
51,52
53,54
54,55
55,56
55,57
56,57
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,29,32,37,39,44,45,48,49,52,57,60,62
-----computeFrom-----
20,21
20,22
42,43
42,44
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_04_bad(){    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_04_bad
{    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
int dataUninitArray[10];
int dataUninitArray[10];
int
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(21,2,0)
(2,12,0)
(3,12,0)
(4,11,0)
(24,10,0)
(1,3,0)
(15,23,0)
(18,3,0)
(9,7,0)
(19,7,0)
(4,3,0)
(20,24,0)
(13,25,0)
(3,23,0)
(5,23,0)
(26,25,0)
(22,25,0)
(23,25,0)
(14,12,0)
(8,24,0)
(16,25,0)
(7,12,0)
(27,12,0)
(3,4,0)
(15,5,1)
(6,23,1)
(14,27,1)
(3,12,1)
(0,7,1)
(7,12,1)
(21,4,1)
(2,12,1)
(18,7,1)
(23,15,1)
(2,21,1)
(19,2,1)
(27,17,1)
(3,1,1)
(12,14,1)
(17,6,1)
(0,17,1)
(1,18,1)
(19,12,1)
(3,23,1)
(7,9,1)
(9,19,1)
(4,3,1)
(2,7,2)
(3,12,2)
(12,17,2)
(3,7,2)
(27,17,2)
(14,17,2)
(18,7,2)
(4,3,2)
(3,23,2)
(21,7,2)
(7,17,2)
(7,12,2)
(9,17,2)
(19,7,2)
(7,7,2)
(1,7,2)
(19,17,2)
(2,12,2)
(9,7,2)
(4,7,2)
-----------------------------------
(0,RET)
(1,i)
(2,i++)
(3,data[i])
(4,printIntLine(data[i])
(5,data)
(6,STATIC_CONST_TRUE)
(7,i<10)
(8,i)
(9,10)
(10,)
(11,)
(12,i=0)
(13,if(STATIC_CONST_TRUE)
(14,0)
(15,dataUninitArray)
(16,dataUninitArray)
(17,STATIC_CONST_TRUE)
(18,data)
(19,i)
(20,for(i=0; i<10; i++)
(21,i)
(22,data)
(23,data = dataUninitArray)
(24,)
(25,)
(26,if(STATIC_CONST_TRUE)
(27,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^