-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
53,54
53,55
53,56
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
62,65
62,66
62,67
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
70,71
72,73
72,74
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
96,99
97,98
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
-----nextToken-----
2,4,9,11,15,16,20,22,23,26,31,33,36,40,42,45,49,51,52,56,59,61,66,69,71,74,77,80,81,85,87,92,94,98,100,102,106,108,112,114,119,120
-----computeFrom-----
13,14
13,15
54,55
54,56
64,65
64,66
75,76
75,77
83,84
83,85
-----guardedBy-----
61,102
56,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
{        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,6,0)
(45,30,0)
(34,52,0)
(23,26,0)
(12,45,0)
(44,2,0)
(3,40,0)
(0,1,0)
(52,11,0)
(35,15,0)
(39,18,0)
(24,4,0)
(17,26,0)
(39,4,0)
(15,37,0)
(2,35,0)
(30,18,0)
(19,6,0)
(16,38,0)
(26,6,0)
(28,43,0)
(14,38,0)
(47,30,0)
(1,45,0)
(54,48,0)
(43,11,0)
(35,2,0)
(8,3,0)
(7,35,0)
(48,45,0)
(42,13,0)
(4,39,0)
(22,39,0)
(32,6,0)
(53,43,0)
(3,27,0)
(10,40,0)
(40,26,0)
(39,40,0)
(29,1,0)
(50,15,0)
(16,36,0)
(18,39,0)
(30,47,0)
(41,9,0)
(46,27,0)
(52,45,0)
(38,16,0)
(40,6,0)
(25,42,0)
(27,3,0)
(20,37,0)
(5,40,0)
(21,11,0)
(30,45,0)
(48,11,0)
(18,30,0)
(51,9,0)
(2,37,0)
(33,15,0)
(6,37,0)
(45,11,0)
(26,15,0)
(43,45,0)
(31,2,0)
(23,17,1)
(53,1,1)
(14,1,1)
(45,30,1)
(3,40,1)
(40,26,1)
(43,28,1)
(1,29,1)
(30,47,1)
(39,4,1)
(31,15,1)
(12,3,1)
(5,26,1)
(28,53,1)
(15,50,1)
(17,2,1)
(16,38,1)
(44,31,1)
(26,15,1)
(0,45,1)
(40,10,1)
(27,46,1)
(48,45,1)
(22,12,1)
(2,35,1)
(43,45,1)
(8,40,1)
(54,52,1)
(52,45,1)
(46,8,1)
(35,7,1)
(34,43,1)
(4,24,1)
(26,23,1)
(39,40,1)
(52,34,1)
(25,3,1)
(48,54,1)
(1,45,1)
(3,27,1)
(49,42,1)
(10,5,1)
(42,25,1)
(29,0,1)
(49,48,1)
(30,18,1)
(38,14,1)
(7,44,1)
(53,16,1)
(24,22,1)
(18,39,1)
(50,33,1)
(35,15,1)
(34,3,2)
(28,3,2)
(24,3,2)
(29,3,2)
(53,3,2)
(26,15,2)
(54,3,2)
(12,3,2)
(1,45,2)
(3,27,2)
(52,3,2)
(43,45,2)
(30,3,2)
(25,3,2)
(45,30,2)
(22,3,2)
(16,38,2)
(16,1,2)
(1,3,2)
(2,35,2)
(30,18,2)
(3,40,2)
(39,4,2)
(52,45,2)
(43,3,2)
(35,15,2)
(30,47,2)
(39,40,2)
(18,3,2)
(18,39,2)
(42,3,2)
(14,1,2)
(38,1,2)
(48,3,2)
(40,26,2)
(45,3,2)
(0,3,2)
(48,45,2)
(39,3,2)
(4,3,2)
-----------------------------------
(0,myString)
(1,myString == NULL)
(2,fscanf(stdin, "%zu", &data)
(3,data > strlen(HELLO_STRING)
(4,sizeof(char)
(5,data)
(6,)
(7,data)
(8,data)
(9,)
(10,dataCopy)
(11,)
(12,myString)
(13,)
(14,1)
(15,data = 0)
(16,exit(-1)
(17,dataCopy)
(18,malloc(data*sizeof(char)
(19,dataCopy)
(20,data)
(21,if (myString == NULL)
(22,data)
(23,data)
(24,char)
(25,"Input is less than the length of the source string")
(26,dataCopy = data)
(27,strlen(HELLO_STRING)
(28,HELLO_STRING)
(29,NULL)
(30,(char *)
(31,stdin)
(32,data)
(33,data)
(34,myString)
(35,&data)
(36,)
(37,)
(38,-1)
(39,data*sizeof(char)
(40,data = dataCopy)
(41,if (data > strlen(HELLO_STRING)
(42,printLine("Input is less than the length of the source string")
(43,strcpy(myString, HELLO_STRING)
(44,"%zu")
(45,myString = (char *)
(46,HELLO_STRING)
(47,char *)
(48,free(myString)
(49,RET)
(50,0)
(51,myString)
(52,printLine(myString)
(53,myString)
(54,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^