-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,30,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108,109
-----computeFrom-----
13,14
13,15
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(15,23,0)
(19,35,0)
(25,49,0)
(40,6,0)
(22,7,0)
(49,25,0)
(36,32,0)
(42,47,0)
(18,34,0)
(7,22,0)
(39,48,0)
(4,7,0)
(25,48,0)
(46,17,0)
(18,10,0)
(2,42,0)
(17,47,0)
(23,48,0)
(8,48,0)
(30,13,0)
(22,1,0)
(34,18,0)
(47,35,0)
(41,35,0)
(3,50,0)
(20,8,0)
(8,33,0)
(14,36,0)
(5,13,0)
(12,48,0)
(51,47,0)
(53,42,0)
(43,15,0)
(34,8,0)
(23,15,0)
(16,19,0)
(27,49,0)
(9,32,0)
(11,15,0)
(37,21,0)
(38,33,0)
(19,47,0)
(8,34,0)
(6,35,0)
(47,18,0)
(17,35,0)
(18,47,0)
(50,31,0)
(15,21,0)
(44,13,0)
(10,18,0)
(48,13,0)
(33,8,0)
(26,25,0)
(24,36,0)
(0,23,0)
(6,47,0)
(45,17,0)
(18,10,1)
(7,4,1)
(40,17,1)
(8,48,1)
(22,7,1)
(8,33,1)
(9,50,1)
(19,16,1)
(48,39,1)
(52,37,1)
(43,11,1)
(34,8,1)
(46,42,1)
(16,6,1)
(46,22,1)
(23,0,1)
(52,29,1)
(17,45,1)
(51,25,1)
(6,47,1)
(19,47,1)
(23,48,1)
(3,25,1)
(37,15,1)
(27,26,1)
(47,18,1)
(50,3,1)
(42,2,1)
(4,42,1)
(33,38,1)
(25,49,1)
(28,9,1)
(6,40,1)
(11,29,1)
(39,12,1)
(20,51,1)
(15,23,1)
(26,52,1)
(29,48,1)
(2,53,1)
(53,47,1)
(9,19,1)
(45,46,1)
(25,48,1)
(28,52,1)
(38,20,1)
(49,27,1)
(17,47,1)
(42,47,1)
(0,43,1)
(18,34,1)
(2,25,2)
(25,52,2)
(16,25,2)
(47,25,2)
(49,52,2)
(42,25,2)
(6,47,2)
(34,25,2)
(6,25,2)
(8,33,2)
(22,7,2)
(19,25,2)
(19,47,2)
(0,29,2)
(18,25,2)
(40,25,2)
(26,52,2)
(15,23,2)
(42,47,2)
(11,29,2)
(20,25,2)
(17,47,2)
(34,8,2)
(7,42,2)
(18,34,2)
(51,25,2)
(17,25,2)
(45,25,2)
(18,10,2)
(37,29,2)
(43,29,2)
(25,49,2)
(50,25,2)
(25,48,2)
(38,25,2)
(22,42,2)
(8,48,2)
(4,42,2)
(23,29,2)
(47,18,2)
(23,48,2)
(53,25,2)
(33,25,2)
(9,52,2)
(15,29,2)
(46,25,2)
(27,52,2)
(8,25,2)
(3,25,2)
-----------------------------------
(0,data)
(1,)
(2,NULL)
(3,"Input is less than the length of the source string")
(4,1)
(5,while(1)
(6,printLine(myString)
(7,-1)
(8,data*sizeof(char)
(9,break;)
(10,char *)
(11,stdin)
(12,data)
(13,)
(14,if (data > strlen(HELLO_STRING)
(15,fscanf(stdin, "%zu", &data)
(16,myString)
(17,strcpy(myString, HELLO_STRING)
(18,(char *)
(19,free(myString)
(20,data)
(21,)
(22,exit(-1)
(23,&data)
(24,myString)
(25,data > strlen(HELLO_STRING)
(26,data)
(27,HELLO_STRING)
(28,RET)
(29,1)
(30,while(1)
(31,)
(32,)
(33,sizeof(char)
(34,malloc(data*sizeof(char)
(35,)
(36,)
(37,break;)
(38,char)
(39,0)
(40,myString)
(41,if (myString == NULL)
(42,myString == NULL)
(43,"%zu")
(44,data)
(45,HELLO_STRING)
(46,myString)
(47,myString = (char *)
(48,data = 0)
(49,strlen(HELLO_STRING)
(50,printLine("Input is less than the length of the source string")
(51,myString)
(52,1)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^