-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(5==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,28,31,34,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
18,19
18,20
33,34
33,35
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(18,29,0)
(41,26,0)
(25,1,0)
(52,26,0)
(16,2,0)
(20,53,0)
(39,16,0)
(38,34,0)
(50,3,0)
(27,51,0)
(2,16,0)
(51,37,0)
(35,26,0)
(48,28,0)
(52,37,0)
(37,51,0)
(45,3,0)
(36,32,0)
(55,25,0)
(47,40,0)
(10,28,0)
(41,37,0)
(14,52,0)
(18,13,0)
(51,27,0)
(40,37,0)
(29,18,0)
(31,30,0)
(28,30,0)
(46,26,0)
(12,13,0)
(33,52,0)
(13,3,0)
(39,51,0)
(44,2,0)
(15,3,0)
(30,28,0)
(51,39,0)
(7,13,0)
(9,29,0)
(21,40,0)
(0,32,0)
(30,13,0)
(24,19,0)
(54,53,0)
(22,19,0)
(25,55,0)
(37,26,0)
(35,37,0)
(42,18,0)
(16,13,0)
(16,39,0)
(19,11,0)
(5,35,0)
(4,16,0)
(6,37,0)
(49,41,0)
(17,55,0)
(28,23,0)
(34,43,0)
(54,28,1)
(21,37,1)
(52,33,1)
(0,13,1)
(51,27,1)
(39,16,1)
(18,29,1)
(16,13,1)
(30,31,1)
(42,53,1)
(32,36,1)
(20,54,1)
(40,47,1)
(48,10,1)
(14,25,1)
(5,52,1)
(41,37,1)
(47,21,1)
(55,17,1)
(34,38,1)
(18,13,1)
(33,14,1)
(28,30,1)
(4,6,1)
(8,34,1)
(6,18,1)
(16,2,1)
(25,55,1)
(13,7,1)
(14,40,1)
(38,18,1)
(35,5,1)
(2,44,1)
(54,32,1)
(37,51,1)
(41,49,1)
(9,42,1)
(10,32,1)
(7,12,1)
(17,40,1)
(49,35,1)
(36,0,1)
(31,48,1)
(30,13,1)
(8,53,1)
(8,41,1)
(29,9,1)
(44,4,1)
(52,37,1)
(53,20,1)
(40,37,1)
(51,39,1)
(35,37,1)
(37,18,2)
(10,32,2)
(6,18,2)
(34,18,2)
(41,18,2)
(42,53,2)
(35,37,2)
(44,18,2)
(39,16,2)
(48,32,2)
(47,18,2)
(28,30,2)
(37,51,2)
(51,18,2)
(40,37,2)
(52,18,2)
(9,53,2)
(38,18,2)
(31,32,2)
(30,32,2)
(41,37,2)
(17,40,2)
(39,18,2)
(33,18,2)
(18,29,2)
(52,37,2)
(29,53,2)
(18,53,2)
(16,2,2)
(55,40,2)
(35,18,2)
(51,27,2)
(28,32,2)
(40,18,2)
(30,13,2)
(16,18,2)
(25,55,2)
(51,39,2)
(5,18,2)
(49,18,2)
(2,18,2)
(16,13,2)
(18,13,2)
(14,18,2)
(4,18,2)
(21,18,2)
(25,40,2)
-----------------------------------
(0,5)
(1,)
(2,sizeof(char)
(3,)
(4,data)
(5,myString)
(6,myString)
(7,0)
(8,RET)
(9,HELLO_STRING)
(10,stdin)
(11,)
(12,data)
(13,data = 0)
(14,myString)
(15,if(5==5)
(16,data*sizeof(char)
(17,1)
(18,data > strlen(HELLO_STRING)
(19,)
(20,5)
(21,myString)
(22,myString)
(23,)
(24,if (data > strlen(HELLO_STRING)
(25,exit(-1)
(26,)
(27,char *)
(28,fscanf(stdin, "%zu", &data)
(29,strlen(HELLO_STRING)
(30,&data)
(31,data)
(32,5==5)
(33,HELLO_STRING)
(34,printLine("Input is less than the length of the source string")
(35,printLine(myString)
(36,5)
(37,myString = (char *)
(38,"Input is less than the length of the source string")
(39,malloc(data*sizeof(char)
(40,myString == NULL)
(41,free(myString)
(42,data)
(43,)
(44,char)
(45,if(5==5)
(46,if (myString == NULL)
(47,NULL)
(48,"%zu")
(49,myString)
(50,data)
(51,(char *)
(52,strcpy(myString, HELLO_STRING)
(53,5==5)
(54,5)
(55,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^