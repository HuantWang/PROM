-----label-----
1
-----code-----
void dandis_needlebook(int botulin_baddest,union themistian_ingles guffaws_butylates)
{
    int stonesoup_stack_size = 0;
  char *wanders_adonizing = 0;
  ++stonesoup_global_variable;
  botulin_baddest--;
  if (botulin_baddest > 0) {
    balkanite_hesychastic(botulin_baddest,guffaws_butylates);
    return ;
  }
  wanders_adonizing = ((char *)guffaws_butylates . launch_sherm);
    tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation");
    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE");
    /* STONESOUP: CROSSOVER-POINT (Uncontrolled Memory Allocation) */
    if (strlen(wanders_adonizing) > 1 &&
     wanders_adonizing[0] == '-') {
     stonesoup_printf("Input value is negative\n");
 } else {
        stonesoup_stack_size = strtoul(wanders_adonizing,0,0);
        stonesoup_printf("Allocating stack array\n");
        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");
     /* STONESOUP: TRIGGER-POINT (Uncontrolled Memory Allocation) */
        tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");
        char stonesoup_stack_string[stonesoup_stack_size];
        memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);
        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");
    }
    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER");
    tracepoint(stonesoup_trace, weakness_end);
;
  if (guffaws_butylates . launch_sherm != 0) 
    free(((char *)guffaws_butylates . launch_sherm));
stonesoup_close_printf_context();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
10,11
12,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
14,23
14,24
14,25
14,26
14,27
14,28
15,16
16,17
16,18
18,19
18,20
20,21
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
32,33
34,35
35,36
36,37
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
45,48
46,47
48,49
50,51
53,54
54,55
54,56
55,56
57,58
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
67,68
68,69
68,70
68,71
68,72
68,73
68,74
69,70
71,72
73,74
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
87,88
87,89
87,90
88,89
88,90
89,90
89,91
90,91
90,92
91,92
93,94
96,97
96,98
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
108,109
108,110
108,111
108,112
108,113
108,114
108,115
109,110
110,111
110,112
111,112
113,114
113,115
113,116
113,117
114,115
116,117
120,121
121,122
121,123
122,123
125,126
126,127
126,128
126,129
126,130
127,128
129,130
131,132
134,135
135,136
135,137
135,138
135,139
135,140
135,141
135,142
136,137
138,139
140,141
143,144
145,146
146,147
149,150
150,151
150,152
152,153
152,154
154,155
155,156
157,158
158,159
158,160
158,161
158,162
159,160
161,162
164,165
164,166
165,166
168,169
169,170
169,171
169,172
169,173
170,171
172,173
174,175
177,178
178,179
178,180
178,181
178,182
179,180
181,182
183,184
186,187
187,188
187,189
187,190
188,189
190,191
192,193
195,196
195,197
196,197
196,198
197,198
197,199
198,199
202,203
203,204
203,205
204,205
206,207
207,208
207,209
208,209
208,210
210,211
212,213
212,214
213,214
216,217
217,218
218,219
-----nextToken-----
2,4,6,8,11,13,17,19,21,24,26,27,29,33,37,41,42,47,49,51,52,56,60,62,65,66,70,72,74,75,76,77,81,83,85,86,92,94,95,99,100,101,106,107,112,115,117,118,119,123,124,128,130,132,133,137,139,141,142,144,147,148,151,153,156,160,162,163,166,167,171,173,175,176,180,182,184,185,189,191,193,194,199,200,201,205,209,211,214,215,219
-----computeFrom-----
39,40
39,41
54,55
54,56
88,89
88,90
89,90
89,91
96,97
96,98
110,111
110,112
164,165
164,166
196,197
196,198
-----guardedBy-----
41,49
199,214
200,215
-----guardedByNegation-----
99,117
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void dandis_needlebook(int botulin_baddest,union themistian_ingles guffaws_butylates){    int stonesoup_stack_size = 0;  char *wanders_adonizing = 0;  ++stonesoup_global_variable;  botulin_baddest--;  if (botulin_baddest > 0) {    balkanite_hesychastic(botulin_baddest,guffaws_butylates);    return ;  }  wanders_adonizing = ((char *)guffaws_butylates . launch_sherm);    tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation");    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE");    /* STONESOUP: CROSSOVER-POINT (Uncontrolled Memory Allocation) */    if (strlen(wanders_adonizing) > 1 &&     wanders_adonizing[0] == '-') {     stonesoup_printf("Input value is negative\n"); } else {        stonesoup_stack_size = strtoul(wanders_adonizing,0,0);        stonesoup_printf("Allocating stack array\n");        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");     /* STONESOUP: TRIGGER-POINT (Uncontrolled Memory Allocation) */        tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");        char stonesoup_stack_string[stonesoup_stack_size];        memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");    }    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER");    tracepoint(stonesoup_trace, weakness_end);;  if (guffaws_butylates . launch_sherm != 0)     free(((char *)guffaws_butylates . launch_sherm));stonesoup_close_printf_context();}
void
dandis_needlebook(int botulin_baddest,union themistian_ingles guffaws_butylates)
dandis_needlebook
int botulin_baddest
int
botulin_baddest
botulin_baddest
union themistian_ingles guffaws_butylates
union themistian_ingles
themistian_ingles
guffaws_butylates
guffaws_butylates
{    int stonesoup_stack_size = 0;  char *wanders_adonizing = 0;  ++stonesoup_global_variable;  botulin_baddest--;  if (botulin_baddest > 0) {    balkanite_hesychastic(botulin_baddest,guffaws_butylates);    return ;  }  wanders_adonizing = ((char *)guffaws_butylates . launch_sherm);    tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation");    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE");    /* STONESOUP: CROSSOVER-POINT (Uncontrolled Memory Allocation) */    if (strlen(wanders_adonizing) > 1 &&     wanders_adonizing[0] == '-') {     stonesoup_printf("Input value is negative\n"); } else {        stonesoup_stack_size = strtoul(wanders_adonizing,0,0);        stonesoup_printf("Allocating stack array\n");        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");     /* STONESOUP: TRIGGER-POINT (Uncontrolled Memory Allocation) */        tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");        char stonesoup_stack_string[stonesoup_stack_size];        memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");    }    tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER");    tracepoint(stonesoup_trace, weakness_end);;  if (guffaws_butylates . launch_sherm != 0)     free(((char *)guffaws_butylates . launch_sherm));stonesoup_close_printf_context();}
int stonesoup_stack_size = 0;
int stonesoup_stack_size = 0;
int
stonesoup_stack_size = 0
stonesoup_stack_size
= 0
0
char *wanders_adonizing = 0;
char *wanders_adonizing = 0;
char
*wanders_adonizing = 0
*
wanders_adonizing
= 0
0
++stonesoup_global_variable;
++stonesoup_global_variable
stonesoup_global_variable
stonesoup_global_variable
botulin_baddest--;
botulin_baddest--
botulin_baddest
botulin_baddest
if (botulin_baddest > 0) {    balkanite_hesychastic(botulin_baddest,guffaws_butylates);    return ;  }
botulin_baddest > 0
botulin_baddest
botulin_baddest
0
{    balkanite_hesychastic(botulin_baddest,guffaws_butylates);    return ;  }
balkanite_hesychastic(botulin_baddest,guffaws_butylates);
balkanite_hesychastic(botulin_baddest,guffaws_butylates)
balkanite_hesychastic
balkanite_hesychastic
botulin_baddest
botulin_baddest
guffaws_butylates
guffaws_butylates
return ;
wanders_adonizing = ((char *)guffaws_butylates . launch_sherm);
wanders_adonizing = ((char *)guffaws_butylates . launch_sherm)
wanders_adonizing
wanders_adonizing
((char *)guffaws_butylates . launch_sherm)
(char *)guffaws_butylates . launch_sherm
char *
char
*
*
guffaws_butylates . launch_sherm
guffaws_butylates
guffaws_butylates
launch_sherm
tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation");
tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
weakness_start
weakness_start
"CWE789"
"A"
"Uncontrolled Memory Allocation"
tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE");
tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
trace_point
trace_point
"CROSSOVER-POINT: BEFORE"
if (strlen(wanders_adonizing) > 1 &&     wanders_adonizing[0] == '-') {     stonesoup_printf("Input value is negative\n"); } else {        stonesoup_stack_size = strtoul(wanders_adonizing,0,0);        stonesoup_printf("Allocating stack array\n");        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");     /* STONESOUP: TRIGGER-POINT (Uncontrolled Memory Allocation) */        tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");        char stonesoup_stack_string[stonesoup_stack_size];        memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");    }
strlen(wanders_adonizing) > 1 &&     wanders_adonizing[0] == '-'
strlen(wanders_adonizing) > 1
strlen(wanders_adonizing)
strlen
strlen
wanders_adonizing
wanders_adonizing
1
wanders_adonizing[0] == '-'
wanders_adonizing[0]
wanders_adonizing
wanders_adonizing
0
'-'
{     stonesoup_printf("Input value is negative\n"); }
stonesoup_printf("Input value is negative\n");
stonesoup_printf("Input value is negative\n")
stonesoup_printf
stonesoup_printf
"Input value is negative\n"
{        stonesoup_stack_size = strtoul(wanders_adonizing,0,0);        stonesoup_printf("Allocating stack array\n");        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");     /* STONESOUP: TRIGGER-POINT (Uncontrolled Memory Allocation) */        tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");        char stonesoup_stack_string[stonesoup_stack_size];        memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);        tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");    }
stonesoup_stack_size = strtoul(wanders_adonizing,0,0);
stonesoup_stack_size = strtoul(wanders_adonizing,0,0)
stonesoup_stack_size
stonesoup_stack_size
strtoul(wanders_adonizing,0,0)
strtoul
strtoul
wanders_adonizing
wanders_adonizing
0
0
stonesoup_printf("Allocating stack array\n");
stonesoup_printf("Allocating stack array\n")
stonesoup_printf
stonesoup_printf
"Allocating stack array\n"
tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE");
tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
trace_point
trace_point
"TRIGGER-POINT: BEFORE"
tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE");
tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
variable_signed_integral
variable_signed_integral
"stonesoup_stack_size"
stonesoup_stack_size
stonesoup_stack_size
&stonesoup_stack_size
stonesoup_stack_size
stonesoup_stack_size
"TRIGGER-STATE"
char stonesoup_stack_string[stonesoup_stack_size];
char stonesoup_stack_string[stonesoup_stack_size];
char
stonesoup_stack_string[stonesoup_stack_size]
stonesoup_stack_string
[stonesoup_stack_size]
stonesoup_stack_size
stonesoup_stack_size
memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);
memset(stonesoup_stack_string,'x',stonesoup_stack_size - 1)
memset
memset
stonesoup_stack_string
stonesoup_stack_string
'x'
stonesoup_stack_size - 1
stonesoup_stack_size
stonesoup_stack_size
1
tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER");
tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
trace_point
trace_point
"TRIGGER-POINT: AFTER"
tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER");
tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER")
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
trace_point
trace_point
"CROSSOVER-POINT: AFTER"
tracepoint(stonesoup_trace, weakness_end);
tracepoint(stonesoup_trace, weakness_end)
tracepoint
tracepoint
stonesoup_trace
stonesoup_trace
weakness_end
weakness_end
;
if (guffaws_butylates . launch_sherm != 0)     free(((char *)guffaws_butylates . launch_sherm));
guffaws_butylates . launch_sherm != 0
guffaws_butylates . launch_sherm
guffaws_butylates
guffaws_butylates
launch_sherm
0
free(((char *)guffaws_butylates . launch_sherm));
free(((char *)guffaws_butylates . launch_sherm))
free
free
((char *)guffaws_butylates . launch_sherm)
(char *)guffaws_butylates . launch_sherm
char *
char
*
*
guffaws_butylates . launch_sherm
guffaws_butylates
guffaws_butylates
launch_sherm
stonesoup_close_printf_context();
stonesoup_close_printf_context()
stonesoup_close_printf_context
stonesoup_close_printf_context
-----joern-----
(71,25,0)
(57,71,0)
(27,22,0)
(85,99,0)
(58,37,0)
(66,71,0)
(70,97,0)
(20,14,0)
(82,67,0)
(86,90,0)
(36,90,0)
(15,4,0)
(84,2,0)
(17,20,0)
(97,28,0)
(5,19,0)
(0,24,0)
(42,90,0)
(41,57,0)
(95,26,0)
(31,36,0)
(104,91,0)
(67,82,0)
(77,81,0)
(96,75,0)
(80,23,0)
(100,44,0)
(80,65,0)
(15,24,0)
(94,69,0)
(69,65,0)
(52,99,0)
(67,26,0)
(8,35,0)
(83,70,0)
(97,70,0)
(53,37,0)
(26,69,0)
(13,97,0)
(98,47,0)
(51,70,0)
(49,97,0)
(78,52,0)
(26,67,0)
(80,81,0)
(46,35,0)
(39,35,0)
(14,28,0)
(16,90,0)
(79,28,0)
(12,19,0)
(49,28,0)
(18,91,0)
(2,90,0)
(34,15,0)
(32,2,0)
(21,79,0)
(56,49,0)
(82,47,0)
(29,14,0)
(81,80,0)
(69,26,0)
(24,25,0)
(50,37,0)
(93,87,0)
(45,35,0)
(38,52,0)
(60,70,0)
(89,90,0)
(43,65,0)
(20,97,0)
(10,49,0)
(15,34,0)
(6,90,0)
(1,49,0)
(48,49,0)
(52,30,0)
(75,90,0)
(70,65,0)
(65,80,0)
(62,14,0)
(49,3,0)
(33,82,0)
(52,25,0)
(59,44,0)
(68,19,0)
(35,90,0)
(64,87,0)
(19,90,0)
(71,57,0)
(102,90,0)
(73,49,0)
(4,15,0)
(14,20,0)
(105,28,0)
(47,65,0)
(3,49,0)
(54,3,0)
(22,90,0)
(107,44,0)
(9,90,0)
(37,28,0)
(65,90,0)
(101,6,0)
(44,28,0)
(92,74,0)
(87,30,0)
(103,22,0)
(36,30,0)
(3,97,0)
(106,71,0)
(24,15,0)
(40,20,0)
(81,25,0)
(55,75,0)
(76,92,0)
(23,80,0)
(88,81,0)
(72,2,0)
(47,82,0)
(63,69,0)
(7,35,0)
(61,85,0)
(11,24,0)
(91,90,0)
(36,30,1)
(81,77,1)
(61,9,1)
(61,85,1)
(71,25,1)
(82,33,1)
(48,1,1)
(39,46,1)
(34,15,1)
(6,101,1)
(67,82,1)
(59,107,1)
(97,70,1)
(88,43,1)
(66,91,1)
(50,79,1)
(7,45,1)
(83,60,1)
(75,96,1)
(78,87,1)
(24,0,1)
(44,100,1)
(49,3,1)
(32,84,1)
(20,17,1)
(55,22,1)
(57,71,1)
(69,65,1)
(65,80,1)
(3,97,1)
(100,59,1)
(76,67,1)
(68,12,1)
(72,44,1)
(26,95,1)
(63,82,1)
(36,31,1)
(107,14,1)
(79,21,1)
(87,93,1)
(47,65,1)
(18,104,1)
(104,2,1)
(96,55,1)
(14,20,1)
(38,78,1)
(35,39,1)
(49,97,1)
(0,11,1)
(69,94,1)
(101,75,1)
(3,54,1)
(70,65,1)
(45,8,1)
(15,4,1)
(43,87,1)
(22,27,1)
(9,34,1)
(41,71,1)
(1,10,1)
(98,19,1)
(10,56,1)
(81,25,1)
(19,68,1)
(15,24,1)
(80,81,1)
(53,58,1)
(51,13,1)
(95,69,1)
(60,51,1)
(80,23,1)
(33,47,1)
(40,29,1)
(92,76,1)
(2,32,1)
(26,69,1)
(84,72,1)
(9,57,1)
(56,37,1)
(20,97,1)
(27,103,1)
(8,65,1)
(52,30,1)
(67,26,1)
(17,40,1)
(87,30,1)
(62,49,1)
(94,63,1)
(46,7,1)
(54,48,1)
(21,97,1)
(11,57,1)
(77,88,1)
(106,66,1)
(49,73,1)
(82,47,1)
(37,53,1)
(73,3,1)
(70,83,1)
(64,36,1)
(13,67,1)
(85,52,1)
(93,64,1)
(91,18,1)
(72,92,1)
(5,35,1)
(71,106,1)
(31,6,1)
(52,25,1)
(47,98,1)
(52,38,1)
(29,62,1)
(12,5,1)
(58,50,1)
(57,41,1)
(24,25,1)
(56,67,2)
(70,65,2)
(107,67,2)
(88,87,2)
(54,67,2)
(67,82,2)
(7,87,2)
(87,30,2)
(60,67,2)
(95,82,2)
(83,67,2)
(78,87,2)
(52,30,2)
(91,87,2)
(14,20,2)
(36,30,2)
(49,67,2)
(65,80,2)
(73,67,2)
(15,4,2)
(71,25,2)
(92,67,2)
(8,87,2)
(49,97,2)
(40,67,2)
(32,87,2)
(47,65,2)
(34,15,2)
(57,87,2)
(18,87,2)
(17,67,2)
(24,57,2)
(80,81,2)
(71,87,2)
(47,87,2)
(80,87,2)
(51,67,2)
(94,82,2)
(3,97,2)
(100,67,2)
(35,87,2)
(15,57,2)
(33,87,2)
(59,67,2)
(52,87,2)
(85,87,2)
(97,70,2)
(10,67,2)
(104,87,2)
(67,26,2)
(63,82,2)
(79,67,2)
(77,87,2)
(29,67,2)
(24,25,2)
(80,23,2)
(9,87,2)
(67,87,2)
(12,87,2)
(58,67,2)
(3,67,2)
(45,87,2)
(62,67,2)
(34,57,2)
(19,87,2)
(5,87,2)
(82,47,2)
(52,25,2)
(69,65,2)
(53,67,2)
(68,87,2)
(14,67,2)
(37,67,2)
(81,25,2)
(38,87,2)
(39,87,2)
(41,87,2)
(13,67,2)
(50,67,2)
(82,87,2)
(49,3,2)
(26,69,2)
(106,87,2)
(70,67,2)
(61,85,2)
(44,67,2)
(15,24,2)
(66,87,2)
(76,67,2)
(84,87,2)
(48,67,2)
(65,87,2)
(11,57,2)
(0,57,2)
(43,87,2)
(69,82,2)
(1,67,2)
(98,87,2)
(72,87,2)
(2,87,2)
(20,97,2)
(20,67,2)
(21,67,2)
(81,87,2)
(97,67,2)
(57,71,2)
(26,82,2)
(46,87,2)
-----------------------------------
(0,launch_sherm)
(1,"stonesoup_stack_size")
(2,tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: AFTER")
(3,&stonesoup_stack_size)
(4,char *)
(5,stonesoup_trace)
(6,++stonesoup_global_variable)
(7,"CWE789")
(8,stonesoup_trace)
(9,stonesoup_close_printf_context()
(10,variable_signed_integral)
(11,guffaws_butylates)
(12,trace_point)
(13,stonesoup_stack_size)
(14,memset(stonesoup_stack_string,\'x\',stonesoup_stack_size - 1)
(15,(char *)
(16,if (guffaws_butylates . launch_sherm != 0)
(17,1)
(18,weakness_end)
(19,tracepoint(stonesoup_trace, trace_point, "CROSSOVER-POINT: BEFORE")
(20,stonesoup_stack_size - 1)
(21,"Allocating stack array\\n")
(22,stonesoup_stack_size = 0)
(23,char *)
(24,guffaws_butylates . launch_sherm)
(25,union themistian_ingles guffaws_butylates)
(26,wanders_adonizing[0] == \'-\')
(27,0)
(28,)
(29,\'x\')
(30,int botulin_baddest)
(31,botulin_baddest)
(32,"CROSSOVER-POINT: AFTER")
(33,1)
(34,free(((char *)
(35,tracepoint(stonesoup_trace, weakness_start, "CWE789", "A", "Uncontrolled Memory Allocation")
(36,botulin_baddest--)
(37,tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: BEFORE")
(38,guffaws_butylates)
(39,"Uncontrolled Memory Allocation")
(40,stonesoup_stack_size)
(41,0)
(42,if (botulin_baddest > 0)
(43,wanders_adonizing)
(44,tracepoint(stonesoup_trace, trace_point, "TRIGGER-POINT: AFTER")
(45,weakness_start)
(46,"A")
(47,strlen(wanders_adonizing)
(48,stonesoup_stack_size)
(49,tracepoint(stonesoup_trace, variable_signed_integral, "stonesoup_stack_size", stonesoup_stack_size, &stonesoup_stack_size, "TRIGGER-STATE")
(50,stonesoup_trace)
(51,wanders_adonizing)
(52,balkanite_hesychastic(botulin_baddest,guffaws_butylates)
(53,"TRIGGER-POINT: BEFORE")
(54,stonesoup_stack_size)
(55,wanders_adonizing)
(56,stonesoup_trace)
(57,guffaws_butylates . launch_sherm != 0)
(58,trace_point)
(59,trace_point)
(60,0)
(61,RET)
(62,stonesoup_stack_string)
(63,wanders_adonizing)
(64,botulin_baddest)
(65,wanders_adonizing = ((char *)
(66,guffaws_butylates)
(67,strlen(wanders_adonizing)
(68,"CROSSOVER-POINT: BEFORE")
(69,wanders_adonizing[0])
(70,strtoul(wanders_adonizing,0,0)
(71,guffaws_butylates . launch_sherm)
(72,stonesoup_trace)
(73,"TRIGGER-STATE")
(74,)
(75,*wanders_adonizing = 0)
(76,"Input value is negative\\n")
(77,launch_sherm)
(78,botulin_baddest)
(79,stonesoup_printf("Allocating stack array\\n")
(80,(char *)
(81,guffaws_butylates . launch_sherm)
(82,strlen(wanders_adonizing)
(83,0)
(84,trace_point)
(85,return ;)
(86,if (strlen(wanders_adonizing)
(87,botulin_baddest > 0)
(88,guffaws_butylates)
(89,wanders_adonizing)
(90,)
(91,tracepoint(stonesoup_trace, weakness_end)
(92,stonesoup_printf("Input value is negative\\n")
(93,0)
(94,0)
(95,\'-\')
(96,0)
(97,stonesoup_stack_size = strtoul(wanders_adonizing,0,0)
(98,wanders_adonizing)
(99,)
(100,"TRIGGER-POINT: AFTER")
(101,stonesoup_global_variable)
(102,stonesoup_stack_size)
(103,stonesoup_stack_size)
(104,stonesoup_trace)
(105,stonesoup_stack_string)
(106,launch_sherm)
(107,stonesoup_trace)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^