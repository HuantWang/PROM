-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_08_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
49,50
49,51
50,51
51,52
53,54
54,55
54,56
55,56
56,57
56,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,52,57,59,64,65,68,69,72,77,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_08_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_08_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(39,17,0)
(24,8,0)
(10,3,0)
(5,30,0)
(14,37,0)
(9,35,0)
(3,10,0)
(30,17,0)
(21,18,0)
(0,29,0)
(22,0,0)
(11,0,0)
(13,33,0)
(22,21,0)
(0,37,0)
(9,16,0)
(26,29,0)
(29,3,0)
(19,17,0)
(6,22,0)
(15,38,0)
(1,37,0)
(33,0,0)
(35,9,0)
(38,17,0)
(21,22,0)
(32,33,0)
(3,29,0)
(20,24,0)
(7,10,0)
(22,17,0)
(23,7,0)
(12,37,0)
(25,38,0)
(29,0,0)
(4,22,0)
(2,10,0)
(36,37,0)
(29,26,0)
(34,35,0)
(10,7,0)
(27,24,0)
(40,33,1)
(3,10,1)
(0,29,1)
(22,6,1)
(15,25,1)
(38,15,1)
(31,28,1)
(9,35,1)
(10,7,1)
(32,0,1)
(29,26,1)
(21,22,1)
(29,3,1)
(5,21,1)
(35,34,1)
(7,23,1)
(25,30,1)
(25,17,1)
(30,17,1)
(33,13,1)
(34,33,1)
(31,38,1)
(39,28,1)
(23,2,1)
(40,9,1)
(30,5,1)
(13,32,1)
(2,11,1)
(17,19,1)
(28,40,1)
(38,17,1)
(19,39,1)
(22,17,1)
(22,0,1)
(33,0,1)
(6,4,1)
(4,38,1)
(9,35,2)
(33,0,2)
(22,38,2)
(25,38,2)
(30,38,2)
(4,38,2)
(22,0,2)
(19,28,2)
(15,38,2)
(3,10,2)
(29,3,2)
(25,28,2)
(17,28,2)
(5,38,2)
(21,38,2)
(30,17,2)
(22,17,2)
(39,28,2)
(38,38,2)
(15,28,2)
(35,33,2)
(38,17,2)
(6,38,2)
(21,22,2)
(34,33,2)
(38,28,2)
(0,29,2)
(29,26,2)
(10,7,2)
(9,33,2)
-----------------------------------
(0,data = (double *)
(1,if (data == NULL)
(2,10)
(3,malloc(10*sizeof(double)
(4,data)
(5,i)
(6,i)
(7,sizeof(double)
(8,)
(9,exit(-1)
(10,10*sizeof(double)
(11,data)
(12,if(staticReturnsTrue()
(13,NULL)
(14,data)
(15,10)
(16,)
(17,i=0)
(18,)
(19,0)
(20,for(i=0; i<10; i++)
(21,printDoubleLine(data[i])
(22,data[i])
(23,double)
(24,)
(25,i)
(26,double *)
(27,i)
(28,staticReturnsTrue()
(29,(double *)
(30,i++)
(31,RET)
(32,data)
(33,data == NULL)
(34,1)
(35,-1)
(36,if(staticReturnsTrue()
(37,)
(38,i<10)
(39,i)
(40,staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^