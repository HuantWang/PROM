-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_04_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
55,56
55,57
56,57
57,58
57,59
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
90,92
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,48,50,53,58,60,65,66,69,70,73,78,82,84,85,89,93,95,96
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_04_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_04_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(24,22,0)
(5,32,0)
(38,29,0)
(35,28,0)
(10,1,0)
(47,23,0)
(23,6,0)
(8,46,0)
(6,22,0)
(0,35,0)
(7,6,0)
(33,29,0)
(1,10,0)
(47,33,0)
(34,31,0)
(30,22,0)
(15,32,0)
(4,34,0)
(37,42,0)
(5,10,0)
(17,8,0)
(33,47,0)
(44,32,0)
(23,47,0)
(42,6,0)
(7,32,0)
(9,5,0)
(7,34,0)
(6,23,0)
(48,33,0)
(46,19,0)
(26,10,0)
(25,7,0)
(39,11,0)
(5,6,0)
(23,43,0)
(41,22,0)
(46,8,0)
(40,22,0)
(34,7,0)
(13,42,0)
(27,35,0)
(10,5,0)
(1,3,0)
(43,23,0)
(31,3,0)
(29,33,0)
(31,34,0)
(12,6,0)
(20,7,0)
(36,32,0)
(2,44,0)
(18,44,0)
(16,5,0)
(11,32,0)
(2,18,1)
(25,20,1)
(15,36,1)
(46,8,1)
(7,32,1)
(20,44,1)
(9,16,1)
(14,45,1)
(5,9,1)
(10,26,1)
(11,32,1)
(1,10,1)
(5,6,1)
(44,2,1)
(17,42,1)
(23,47,1)
(4,7,1)
(48,12,1)
(21,44,1)
(11,39,1)
(33,29,1)
(10,5,1)
(29,38,1)
(45,46,1)
(36,14,1)
(23,43,1)
(31,34,1)
(38,48,1)
(6,23,1)
(7,6,1)
(18,32,1)
(5,32,1)
(42,37,1)
(44,32,1)
(32,15,1)
(42,6,1)
(18,11,1)
(8,17,1)
(34,4,1)
(39,1,1)
(7,25,1)
(21,14,1)
(26,5,1)
(16,31,1)
(47,33,1)
(37,13,1)
(34,7,1)
(13,6,1)
(45,42,1)
(34,44,2)
(23,47,2)
(26,44,2)
(7,32,2)
(44,44,2)
(4,44,2)
(15,14,2)
(31,44,2)
(44,32,2)
(33,29,2)
(5,32,2)
(44,14,2)
(5,6,2)
(36,14,2)
(1,10,2)
(25,44,2)
(23,43,2)
(9,44,2)
(7,6,2)
(7,44,2)
(46,42,2)
(39,44,2)
(1,44,2)
(8,42,2)
(18,14,2)
(32,14,2)
(18,44,2)
(11,44,2)
(47,33,2)
(31,34,2)
(5,44,2)
(42,6,2)
(46,8,2)
(16,44,2)
(20,44,2)
(11,32,2)
(6,23,2)
(34,7,2)
(2,14,2)
(10,5,2)
(17,42,2)
(10,44,2)
(2,44,2)
-----------------------------------
(0,for(i=0; i<10; i++)
(1,printIntLine(data[i].intTwo)
(2,10)
(3,)
(4,intOne)
(5,data[i])
(6,data = (twoIntsStruct *)
(7,data[i])
(8,-1)
(9,i)
(10,data[i].intTwo)
(11,i++)
(12,data)
(13,data)
(14,STATIC_CONST_TRUE)
(15,0)
(16,data)
(17,1)
(18,i)
(19,)
(20,data)
(21,RET)
(22,)
(23,(twoIntsStruct *)
(24,data)
(25,i)
(26,intTwo)
(27,i)
(28,)
(29,sizeof(twoIntsStruct)
(30,if (data == NULL)
(31,printIntLine(data[i].intOne)
(32,i=0)
(33,10*sizeof(twoIntsStruct)
(34,data[i].intOne)
(35,)
(36,i)
(37,NULL)
(38,twoIntsStruct)
(39,i)
(40,if(STATIC_CONST_TRUE)
(41,if(STATIC_CONST_TRUE)
(42,data == NULL)
(43,twoIntsStruct *)
(44,i<10)
(45,STATIC_CONST_TRUE)
(46,exit(-1)
(47,malloc(10*sizeof(twoIntsStruct)
(48,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^