-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
32,33
33,34
33,35
35,36
35,37
38,39
38,40
38,41
39,40
39,41
40,41
42,43
42,44
43,44
45,46
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
61,62
63,64
64,65
64,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,15,16,18,23,26,27,29,34,36,37,41,44,46,51,54,56,59,62,65,66,70,72,77,79,83,85,87,91,93,97,99,104,105,106
-----computeFrom-----
13,14
13,15
21,22
21,23
39,40
39,41
49,50
49,51
60,61
60,62
68,69
68,70
-----guardedBy-----
46,87
41,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(4,5,0)
(30,38,0)
(3,1,0)
(8,0,0)
(41,32,0)
(12,14,0)
(37,23,0)
(47,23,0)
(11,37,0)
(35,40,0)
(29,37,0)
(38,3,0)
(39,3,0)
(10,15,0)
(36,3,0)
(49,1,0)
(26,9,0)
(45,1,0)
(9,26,0)
(7,38,0)
(45,3,0)
(48,23,0)
(26,5,0)
(6,15,0)
(24,3,0)
(16,6,0)
(2,36,0)
(50,45,0)
(28,5,0)
(4,37,0)
(19,36,0)
(34,4,0)
(18,22,0)
(39,1,0)
(40,4,0)
(17,6,0)
(33,21,0)
(5,21,0)
(26,37,0)
(8,14,0)
(44,39,0)
(32,13,0)
(22,4,0)
(20,9,0)
(42,23,0)
(14,8,0)
(18,3,0)
(46,18,0)
(27,26,0)
(18,46,0)
(3,18,0)
(4,22,0)
(5,28,0)
(22,18,0)
(4,40,0)
(25,5,0)
(38,1,0)
(2,3,1)
(3,18,1)
(31,51,1)
(29,11,1)
(20,27,1)
(14,12,1)
(7,36,1)
(44,45,1)
(24,26,1)
(12,36,1)
(39,44,1)
(26,5,1)
(8,14,1)
(22,4,1)
(32,41,1)
(45,50,1)
(30,7,1)
(37,29,1)
(27,31,1)
(45,3,1)
(34,24,1)
(10,39,1)
(50,38,1)
(19,2,1)
(43,10,1)
(26,37,1)
(51,37,1)
(4,40,1)
(38,3,1)
(5,28,1)
(43,31,1)
(33,5,1)
(31,33,1)
(38,30,1)
(41,26,1)
(4,37,1)
(40,35,1)
(7,8,1)
(28,25,1)
(4,5,1)
(9,20,1)
(10,32,1)
(18,22,1)
(36,19,1)
(36,3,1)
(26,9,1)
(35,34,1)
(39,3,1)
(25,51,1)
(18,46,1)
(18,46,2)
(44,26,2)
(2,26,2)
(33,51,2)
(7,26,2)
(22,26,2)
(3,18,2)
(19,26,2)
(45,26,2)
(34,26,2)
(8,36,2)
(4,40,2)
(38,3,2)
(4,37,2)
(50,26,2)
(12,36,2)
(25,51,2)
(10,31,2)
(5,28,2)
(27,31,2)
(4,26,2)
(36,3,2)
(20,31,2)
(26,9,2)
(28,51,2)
(22,4,2)
(35,26,2)
(26,37,2)
(30,26,2)
(18,26,2)
(8,14,2)
(24,26,2)
(4,5,2)
(41,26,2)
(32,26,2)
(14,36,2)
(39,26,2)
(9,31,2)
(40,26,2)
(5,51,2)
(36,26,2)
(38,26,2)
(39,3,2)
(26,5,2)
(18,22,2)
(26,31,2)
(3,26,2)
(45,3,2)
-----------------------------------
(0,)
(1,)
(2,myString)
(3,myString = (char *)
(4,data*sizeof(char)
(5,data = rand()
(6,)
(7,myString)
(8,exit(-1)
(9,strlen(HELLO_STRING)
(10,break;)
(11,data)
(12,1)
(13,)
(14,-1)
(15,)
(16,if (data > strlen(HELLO_STRING)
(17,myString)
(18,(char *)
(19,NULL)
(20,HELLO_STRING)
(21,)
(22,malloc(data*sizeof(char)
(23,)
(24,myString)
(25,data)
(26,data > strlen(HELLO_STRING)
(27,data)
(28,rand()
(29,0)
(30,HELLO_STRING)
(31,1)
(32,printLine("Input is less than the length of the source string")
(33,break;)
(34,data)
(35,char)
(36,myString == NULL)
(37,data = 0)
(38,strcpy(myString, HELLO_STRING)
(39,free(myString)
(40,sizeof(char)
(41,"Input is less than the length of the source string")
(42,while(1)
(43,RET)
(44,myString)
(45,printLine(myString)
(46,char *)
(47,while(1)
(48,data)
(49,if (myString == NULL)
(50,myString)
(51,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^