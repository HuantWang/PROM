-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
49,52
49,53
50,51
52,53
54,55
57,58
58,59
59,60
59,61
60,61
63,64
63,65
65,66
66,67
66,68
67,68
68,69
68,70
70,71
70,72
73,74
73,75
73,76
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
82,85
82,86
82,87
83,84
84,85
84,86
85,86
87,88
87,89
88,89
88,90
90,91
92,93
92,94
93,94
95,96
95,97
96,97
98,99
99,100
99,101
102,103
102,104
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
116,119
117,118
119,120
121,122
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
135,136
136,137
137,138
137,139
138,139
-----nextToken-----
2,4,9,11,15,16,18,23,25,28,30,35,37,39,41,43,48,51,53,55,56,61,62,64,69,71,72,76,79,81,86,89,91,94,97,100,101,105,107,112,114,118,120,122,126,128,132,134,139,140
-----computeFrom-----
13,14
13,15
32,33
32,34
46,47
46,48
74,75
74,76
84,85
84,86
95,96
95,97
103,104
103,105
-----guardedBy-----
37,53
43,55
81,122
76,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,39,0)
(7,37,0)
(54,47,0)
(25,49,0)
(67,17,0)
(35,40,0)
(61,37,0)
(61,33,0)
(36,43,0)
(65,53,0)
(39,13,0)
(50,51,0)
(3,41,0)
(63,49,0)
(47,60,0)
(1,37,0)
(57,8,0)
(18,51,0)
(30,27,0)
(17,33,0)
(45,57,0)
(17,11,0)
(32,20,0)
(64,35,0)
(14,44,0)
(28,53,0)
(56,20,0)
(52,35,0)
(16,20,0)
(34,33,0)
(27,16,0)
(33,17,0)
(1,33,0)
(4,23,0)
(23,67,0)
(0,23,0)
(67,23,0)
(44,6,0)
(21,49,0)
(33,37,0)
(8,46,0)
(51,33,0)
(24,61,0)
(22,4,0)
(57,64,0)
(43,33,0)
(31,53,0)
(62,1,0)
(12,47,0)
(19,59,0)
(55,8,0)
(15,35,0)
(20,49,0)
(53,41,0)
(23,4,0)
(13,26,0)
(58,64,0)
(66,57,0)
(13,39,0)
(16,27,0)
(17,67,0)
(59,10,0)
(11,17,0)
(23,20,0)
(23,8,0)
(8,57,0)
(53,64,0)
(16,8,0)
(48,1,0)
(41,53,0)
(38,16,0)
(43,37,0)
(29,57,0)
(5,64,0)
(48,13,1)
(14,16,1)
(2,42,1)
(42,59,1)
(16,8,1)
(38,42,1)
(27,30,1)
(67,23,1)
(64,58,1)
(20,56,1)
(41,53,1)
(23,20,1)
(61,33,1)
(5,68,1)
(2,61,1)
(48,51,1)
(51,33,1)
(59,19,1)
(29,66,1)
(42,8,1)
(53,64,1)
(39,9,1)
(18,33,1)
(19,41,1)
(17,11,1)
(41,3,1)
(42,68,1)
(31,65,1)
(65,28,1)
(0,34,1)
(33,17,1)
(8,57,1)
(3,53,1)
(51,50,1)
(55,41,1)
(28,64,1)
(43,33,1)
(9,51,1)
(53,31,1)
(36,1,1)
(57,64,1)
(45,29,1)
(62,48,1)
(57,45,1)
(66,55,1)
(58,5,1)
(22,0,1)
(4,22,1)
(2,44,1)
(16,27,1)
(68,20,1)
(34,16,1)
(23,8,1)
(16,20,1)
(43,36,1)
(50,18,1)
(44,14,1)
(56,32,1)
(13,39,1)
(1,62,1)
(23,4,1)
(1,33,1)
(17,67,1)
(24,43,1)
(30,38,1)
(61,24,1)
(30,42,2)
(38,42,2)
(34,16,2)
(33,16,2)
(50,16,2)
(1,33,2)
(65,68,2)
(33,17,2)
(13,51,2)
(66,41,2)
(36,16,2)
(22,16,2)
(23,20,2)
(41,53,2)
(39,51,2)
(17,67,2)
(19,41,2)
(4,16,2)
(58,68,2)
(31,68,2)
(18,16,2)
(61,33,2)
(48,16,2)
(1,16,2)
(8,57,2)
(62,16,2)
(41,68,2)
(57,64,2)
(51,33,2)
(44,16,2)
(43,33,2)
(53,68,2)
(5,68,2)
(27,42,2)
(59,41,2)
(61,16,2)
(67,16,2)
(17,11,2)
(9,51,2)
(29,41,2)
(16,42,2)
(45,41,2)
(23,4,2)
(8,41,2)
(28,68,2)
(3,68,2)
(14,16,2)
(24,16,2)
(17,16,2)
(13,39,2)
(16,20,2)
(51,16,2)
(23,16,2)
(16,8,2)
(57,41,2)
(0,16,2)
(53,64,2)
(64,68,2)
(23,8,2)
(16,27,2)
(55,41,2)
(67,23,2)
(43,16,2)
-----------------------------------
(0,data)
(1,strcpy(myString, HELLO_STRING)
(2,RET)
(3,NULL)
(4,sizeof(char)
(5,inputBuffer)
(6,)
(7,if (myString == NULL)
(8,data = strtoul(inputBuffer, NULL, 0)
(9,1)
(10,)
(11,char *)
(12,myString)
(13,exit(-1)
(14,"Input is less than the length of the source string")
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,data > strlen(HELLO_STRING)
(17,(char *)
(18,myString)
(19,"fgets()
(20,data = 0)
(21,if(1)
(22,char)
(23,data*sizeof(char)
(24,myString)
(25,if(1)
(26,)
(27,strlen(HELLO_STRING)
(28,inputBuffer)
(29,NULL)
(30,HELLO_STRING)
(31,stdin)
(32,data)
(33,myString = (char *)
(34,myString)
(35,)
(36,myString)
(37,)
(38,data)
(39,-1)
(40,)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,1)
(43,printLine(myString)
(44,printLine("Input is less than the length of the source string")
(45,0)
(46,)
(47,)
(48,myString)
(49,)
(50,NULL)
(51,myString == NULL)
(52,inputBuffer)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,if (data > strlen(HELLO_STRING)
(55,data)
(56,0)
(57,strtoul(inputBuffer, NULL, 0)
(58,"")
(59,printLine("fgets()
(60,)
(61,free(myString)
(62,HELLO_STRING)
(63,data)
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
(65,CHAR_ARRAY_SIZE)
(66,inputBuffer)
(67,malloc(data*sizeof(char)
(68,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^