-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_11_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
64,65
66,67
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,30,32,36,41,43,48,49,52,53,56,61,65,67,68,72,76,78,79
-----computeFrom-----
22,23
22,24
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_11_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_11_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_11_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(33,8,0)
(29,23,0)
(30,9,0)
(16,31,0)
(2,8,0)
(5,10,0)
(21,30,0)
(9,3,0)
(27,3,0)
(6,15,0)
(13,8,0)
(30,8,0)
(34,2,0)
(29,10,0)
(17,15,0)
(0,9,0)
(14,13,0)
(13,10,0)
(15,30,0)
(12,3,0)
(19,13,0)
(10,13,0)
(32,3,0)
(13,9,0)
(6,23,0)
(26,8,0)
(10,29,0)
(28,31,0)
(31,11,0)
(1,30,0)
(35,24,0)
(30,15,0)
(18,3,0)
(22,9,0)
(15,6,0)
(25,2,0)
(24,8,0)
(14,19,1)
(9,22,1)
(10,5,1)
(35,6,1)
(1,29,1)
(33,26,1)
(17,30,1)
(10,13,1)
(19,2,1)
(20,9,1)
(13,14,1)
(5,13,1)
(2,8,1)
(15,17,1)
(24,8,1)
(7,20,1)
(22,0,1)
(30,21,1)
(25,34,1)
(34,24,1)
(24,35,1)
(13,9,1)
(29,10,1)
(4,2,1)
(34,8,1)
(6,15,1)
(4,7,1)
(2,25,1)
(26,7,1)
(15,30,1)
(8,33,1)
(30,9,1)
(21,1,1)
(13,8,1)
(30,8,1)
(25,2,2)
(30,9,2)
(33,7,2)
(13,9,2)
(14,2,2)
(17,2,2)
(30,2,2)
(5,2,2)
(15,30,2)
(30,8,2)
(19,2,2)
(21,2,2)
(2,2,2)
(24,2,2)
(34,7,2)
(8,7,2)
(10,2,2)
(26,7,2)
(2,7,2)
(15,2,2)
(29,2,2)
(6,15,2)
(35,2,2)
(13,8,2)
(29,10,2)
(34,2,2)
(13,2,2)
(10,13,2)
(6,2,2)
(25,7,2)
(1,2,2)
(2,8,2)
(24,8,2)
-----------------------------------
(0,data)
(1,data)
(2,i<10)
(3,)
(4,RET)
(5,intOne)
(6,printIntLine(data[i].intTwo)
(7,globalReturnsTrue()
(8,i=0)
(9,data = dataUninitArray)
(10,data[i].intOne)
(11,)
(12,data)
(13,data[i])
(14,i)
(15,data[i].intTwo)
(16,i)
(17,intTwo)
(18,if(globalReturnsTrue()
(19,data)
(20,globalReturnsTrue()
(21,i)
(22,dataUninitArray)
(23,)
(24,i++)
(25,10)
(26,i)
(27,dataUninitArray)
(28,for(i=0; i<10; i++)
(29,printIntLine(data[i].intOne)
(30,data[i])
(31,)
(32,if(globalReturnsTrue()
(33,0)
(34,i)
(35,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^