-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_06_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
41,43
42,43
45,46
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
62,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,37,39,43,44,49,51,56,57,60,61,64,69,73,75,76,80,84,86,87
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
41,42
41,43
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_06_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_06_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_06_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(34,13,0)
(21,1,0)
(3,43,0)
(6,13,0)
(38,19,0)
(28,34,0)
(19,1,0)
(0,6,0)
(29,41,0)
(39,4,0)
(7,20,0)
(2,9,0)
(26,2,0)
(31,36,0)
(40,25,0)
(6,32,0)
(9,2,0)
(2,19,0)
(8,10,0)
(44,19,0)
(17,32,0)
(5,39,0)
(43,3,0)
(24,43,0)
(33,13,0)
(19,2,0)
(1,43,0)
(32,6,0)
(16,32,0)
(30,6,0)
(35,14,0)
(9,18,0)
(22,34,0)
(20,41,0)
(32,16,0)
(12,39,0)
(41,20,0)
(23,14,0)
(1,25,0)
(42,25,0)
(27,25,0)
(19,13,0)
(36,13,0)
(16,18,0)
(43,1,0)
(3,41,0)
(41,3,0)
(6,1,0)
(43,24,0)
(15,13,0)
(37,10,0)
(15,33,1)
(13,15,1)
(20,7,1)
(8,1,1)
(1,43,1)
(9,2,1)
(29,21,1)
(3,41,1)
(10,37,1)
(44,34,1)
(32,17,1)
(34,28,1)
(14,35,1)
(2,26,1)
(43,24,1)
(30,0,1)
(11,14,1)
(22,36,1)
(26,19,1)
(11,34,1)
(35,23,1)
(6,13,1)
(32,6,1)
(0,9,1)
(33,14,1)
(6,1,1)
(19,13,1)
(19,1,1)
(37,8,1)
(36,13,1)
(7,29,1)
(6,30,1)
(36,31,1)
(28,22,1)
(31,16,1)
(2,19,1)
(41,20,1)
(17,6,1)
(23,10,1)
(34,13,1)
(43,3,1)
(38,44,1)
(22,13,1)
(16,32,1)
(19,38,1)
(0,34,2)
(36,34,2)
(34,13,2)
(32,34,2)
(34,14,2)
(19,34,2)
(31,34,2)
(9,34,2)
(34,34,2)
(16,32,2)
(43,24,2)
(36,13,2)
(32,6,2)
(28,34,2)
(19,1,2)
(38,34,2)
(17,34,2)
(41,20,2)
(3,41,2)
(6,1,2)
(6,13,2)
(43,3,2)
(28,14,2)
(16,34,2)
(1,43,2)
(2,19,2)
(30,34,2)
(19,13,2)
(22,34,2)
(22,14,2)
(15,14,2)
(2,34,2)
(6,34,2)
(26,34,2)
(13,14,2)
(44,34,2)
(33,14,2)
(9,2,2)
-----------------------------------
(0,data)
(1,data = (twoIntsStruct *)
(2,data[i].intOne)
(3,ALLOCA(10*sizeof(twoIntsStruct)
(4,)
(5,i)
(6,data[i])
(7,twoIntsStruct)
(8,STATIC_CONST_FIVE)
(9,printIntLine(data[i].intOne)
(10,STATIC_CONST_FIVE==5)
(11,RET)
(12,for(i=0; i<10; i++)
(13,i=0)
(14,STATIC_CONST_FIVE==5)
(15,0)
(16,printIntLine(data[i].intTwo)
(17,intTwo)
(18,)
(19,data[i])
(20,sizeof(twoIntsStruct)
(21,data)
(22,i)
(23,STATIC_CONST_FIVE)
(24,twoIntsStruct *)
(25,)
(26,intOne)
(27,if(STATIC_CONST_FIVE==5)
(28,10)
(29,10)
(30,i)
(31,i)
(32,data[i].intTwo)
(33,i)
(34,i<10)
(35,5)
(36,i++)
(37,5)
(38,i)
(39,)
(40,if(STATIC_CONST_FIVE==5)
(41,10*sizeof(twoIntsStruct)
(42,data)
(43,(twoIntsStruct *)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^