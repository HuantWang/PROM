-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_16_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    while(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
61,62
62,63
62,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
80,81
83,84
83,85
85,86
85,87
86,87
86,88
87,88
88,89
88,90
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,56,57,60,63,64,67,73,75,78,79,81,82,84,89,91,96,97,100,101,104,109,112,114,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
70,71
70,72
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_16_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_16_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }        break;    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }        break;    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
break;
-----joern-----
(18,55,0)
(60,9,0)
(38,64,0)
(31,39,0)
(8,50,0)
(59,0,0)
(32,47,0)
(54,22,0)
(37,17,0)
(34,52,0)
(64,21,0)
(9,60,0)
(16,45,0)
(42,14,0)
(25,55,0)
(56,21,0)
(5,22,0)
(10,35,0)
(33,35,0)
(45,16,0)
(55,5,0)
(57,52,0)
(39,9,0)
(52,0,0)
(14,19,0)
(29,0,0)
(62,10,0)
(45,20,0)
(5,45,0)
(39,35,0)
(63,60,0)
(52,9,0)
(60,0,0)
(15,6,0)
(50,47,0)
(31,41,0)
(39,31,0)
(20,45,0)
(40,17,0)
(28,59,0)
(17,37,0)
(60,27,0)
(27,60,0)
(16,21,0)
(58,19,0)
(48,22,0)
(36,50,0)
(1,39,0)
(4,46,0)
(26,6,0)
(13,22,0)
(11,35,0)
(45,5,0)
(12,30,0)
(61,39,0)
(2,5,0)
(30,46,0)
(52,5,0)
(23,0,0)
(51,14,0)
(6,35,0)
(37,3,0)
(39,5,0)
(44,30,0)
(21,64,0)
(19,0,0)
(53,22,0)
(19,14,0)
(21,16,0)
(9,7,0)
(39,35,1)
(60,0,1)
(9,60,1)
(51,42,1)
(23,24,1)
(56,2,1)
(34,19,1)
(0,29,1)
(55,18,1)
(25,5,1)
(16,21,1)
(14,51,1)
(58,0,1)
(61,6,1)
(64,38,1)
(21,64,1)
(29,23,1)
(57,34,1)
(19,0,1)
(59,0,1)
(35,33,1)
(38,56,1)
(49,24,1)
(39,1,1)
(10,35,1)
(6,15,1)
(45,20,1)
(19,14,1)
(10,62,1)
(11,49,1)
(49,32,1)
(40,55,1)
(26,35,1)
(39,5,1)
(39,9,1)
(4,6,1)
(6,35,1)
(59,28,1)
(17,40,1)
(55,5,1)
(52,57,1)
(60,63,1)
(31,39,1)
(18,25,1)
(62,31,1)
(45,16,1)
(42,58,1)
(33,11,1)
(52,5,1)
(24,37,1)
(32,19,1)
(1,61,1)
(28,9,1)
(5,45,1)
(26,10,1)
(43,4,1)
(24,55,1)
(52,0,1)
(58,59,1)
(63,52,1)
(60,27,1)
(43,49,1)
(37,17,1)
(15,26,1)
(9,60,2)
(52,19,2)
(1,6,2)
(6,6,2)
(52,5,2)
(39,6,2)
(17,55,2)
(58,24,2)
(39,9,2)
(19,19,2)
(29,24,2)
(16,21,2)
(59,0,2)
(45,16,2)
(58,19,2)
(51,24,2)
(63,19,2)
(55,5,2)
(40,55,2)
(39,35,2)
(34,19,2)
(45,20,2)
(61,6,2)
(6,35,2)
(26,6,2)
(42,19,2)
(62,6,2)
(39,5,2)
(6,49,2)
(31,39,2)
(0,24,2)
(33,49,2)
(19,14,2)
(15,6,2)
(4,49,2)
(21,64,2)
(11,49,2)
(32,24,2)
(31,6,2)
(60,0,2)
(14,24,2)
(9,19,2)
(5,45,2)
(19,24,2)
(59,19,2)
(23,24,2)
(10,35,2)
(60,27,2)
(52,0,2)
(35,49,2)
(51,19,2)
(28,19,2)
(57,19,2)
(26,49,2)
(42,24,2)
(15,49,2)
(10,6,2)
(19,0,2)
(14,19,2)
(60,19,2)
(37,55,2)
(37,17,2)
-----------------------------------
(0,i=0)
(1,i)
(2,data)
(3,)
(4,break;)
(5,data = (double *)
(6,i<10)
(7,)
(8,for(i=0; i<(10/2)
(9,data[i] = (double)
(10,i++)
(11,i)
(12,for(i=0; i<10; i++)
(13,if (data == NULL)
(14,10/2)
(15,10)
(16,malloc(10*sizeof(double)
(17,-1)
(18,NULL)
(19,i<(10/2)
(20,double *)
(21,10*sizeof(double)
(22,)
(23,i)
(24,1)
(25,data)
(26,i)
(27,double)
(28,i)
(29,0)
(30,)
(31,printDoubleLine(data[i])
(32,break;)
(33,0)
(34,data)
(35,i=0)
(36,i)
(37,exit(-1)
(38,double)
(39,data[i])
(40,1)
(41,)
(42,10)
(43,RET)
(44,i)
(45,(double *)
(46,)
(47,)
(48,while(1)
(49,1)
(50,)
(51,2)
(52,data[i])
(53,data)
(54,while(1)
(55,data == NULL)
(56,10)
(57,i)
(58,i)
(59,i++)
(60,(double)
(61,data)
(62,i)
(63,i)
(64,sizeof(double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^