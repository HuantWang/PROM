-----label-----
1
-----code-----
static void badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink()
badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(17,1,0)
(22,1,0)
(13,38,0)
(24,38,0)
(20,10,0)
(25,0,0)
(35,3,0)
(24,9,0)
(36,37,0)
(38,24,0)
(1,37,0)
(22,37,0)
(26,0,0)
(3,32,0)
(7,3,0)
(31,33,0)
(10,6,0)
(38,1,0)
(6,12,0)
(9,3,0)
(6,10,0)
(11,22,0)
(9,24,0)
(23,1,0)
(0,1,0)
(28,9,0)
(2,18,0)
(40,32,0)
(15,23,0)
(38,13,0)
(33,21,0)
(1,38,0)
(19,32,0)
(23,37,0)
(9,18,0)
(27,3,0)
(29,8,0)
(16,17,0)
(27,8,0)
(17,37,0)
(4,1,0)
(39,19,0)
(14,27,0)
(5,19,0)
(18,9,0)
(34,17,0)
(8,27,0)
(27,3,1)
(30,23,1)
(9,18,1)
(22,11,1)
(10,20,1)
(24,9,1)
(34,16,1)
(26,1,1)
(17,34,1)
(31,27,1)
(28,4,1)
(30,33,1)
(7,35,1)
(16,6,1)
(17,1,1)
(25,26,1)
(2,28,1)
(23,1,1)
(8,29,1)
(38,13,1)
(20,0,1)
(15,22,1)
(0,25,1)
(38,24,1)
(16,0,1)
(29,14,1)
(4,27,1)
(18,2,1)
(23,15,1)
(6,10,1)
(33,31,1)
(3,7,1)
(14,3,1)
(9,3,1)
(11,17,1)
(22,1,1)
(0,1,1)
(27,8,1)
(1,38,1)
(34,27,2)
(28,27,2)
(17,1,2)
(2,27,2)
(22,1,2)
(31,27,2)
(6,10,2)
(6,0,2)
(4,27,2)
(17,27,2)
(16,27,2)
(20,0,2)
(1,27,2)
(25,27,2)
(22,27,2)
(0,1,2)
(24,27,2)
(9,18,2)
(1,38,2)
(18,27,2)
(11,27,2)
(26,27,2)
(38,13,2)
(33,27,2)
(23,1,2)
(9,3,2)
(38,27,2)
(9,27,2)
(0,27,2)
(15,27,2)
(38,24,2)
(27,8,2)
(27,3,2)
(10,0,2)
(23,27,2)
(24,9,2)
-----------------------------------
(0,myString == NULL)
(1,myString = (char *)
(2,char)
(3,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData)
(4,myString)
(5,myString)
(6,exit(-1)
(7,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData)
(8,strlen(HELLO_STRING)
(9,data*sizeof(char)
(10,-1)
(11,myString)
(12,)
(13,char *)
(14,data)
(15,myString)
(16,myString)
(17,strcpy(myString, HELLO_STRING)
(18,sizeof(char)
(19,)
(20,1)
(21,)
(22,printLine(myString)
(23,free(myString)
(24,malloc(data*sizeof(char)
(25,NULL)
(26,myString)
(27,data > strlen(HELLO_STRING)
(28,data)
(29,HELLO_STRING)
(30,RET)
(31,"Input is less than the length of the source string")
(32,)
(33,printLine("Input is less than the length of the source string")
(34,HELLO_STRING)
(35,data)
(36,if (myString == NULL)
(37,)
(38,(char *)
(39,if (data > strlen(HELLO_STRING)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^