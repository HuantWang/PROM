-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_11_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
51,52
51,53
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
71,72
71,73
72,73
73,74
75,76
76,77
76,78
77,78
78,79
78,80
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
92,93
93,94
95,96
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,38,40,45,46,49,52,53,56,62,64,67,68,70,74,79,81,86,87,90,91,94,99,102,104
-----computeFrom-----
13,14
13,15
24,25
24,26
43,44
43,45
47,48
47,49
51,52
51,53
59,60
59,61
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_11_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_11_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_11_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(45,44,0)
(6,28,0)
(4,27,0)
(20,47,0)
(21,4,0)
(4,10,0)
(11,25,0)
(14,3,0)
(9,10,0)
(5,28,0)
(27,26,0)
(49,36,0)
(0,27,0)
(3,27,0)
(15,3,0)
(51,28,0)
(37,9,0)
(23,4,0)
(16,44,0)
(18,26,0)
(3,30,0)
(42,6,0)
(3,10,0)
(43,26,0)
(14,48,0)
(0,39,0)
(46,26,0)
(29,52,0)
(17,1,0)
(28,6,0)
(9,36,0)
(9,35,0)
(0,33,0)
(8,30,0)
(10,38,0)
(31,52,0)
(32,29,0)
(44,40,0)
(3,14,0)
(1,30,0)
(4,36,0)
(52,39,0)
(39,0,0)
(12,36,0)
(35,9,0)
(19,11,0)
(39,52,0)
(22,36,0)
(10,9,0)
(13,49,0)
(53,47,0)
(7,3,0)
(54,27,0)
(27,0,0)
(52,29,0)
(6,36,0)
(34,30,0)
(33,0,0)
(47,30,0)
(41,11,0)
(0,33,1)
(42,36,1)
(37,4,1)
(29,32,1)
(4,36,1)
(50,47,1)
(21,23,1)
(31,54,1)
(50,2,1)
(27,0,1)
(4,21,1)
(30,34,1)
(20,30,1)
(9,37,1)
(23,6,1)
(17,14,1)
(8,2,1)
(47,53,1)
(0,39,1)
(5,51,1)
(4,27,1)
(6,28,1)
(34,8,1)
(20,1,1)
(49,36,1)
(3,15,1)
(49,13,1)
(12,22,1)
(32,31,1)
(24,27,1)
(28,5,1)
(2,6,1)
(47,30,1)
(1,30,1)
(52,29,1)
(13,10,1)
(2,24,1)
(51,42,1)
(6,36,1)
(1,17,1)
(36,12,1)
(3,30,1)
(3,27,1)
(3,10,1)
(14,3,1)
(10,9,1)
(39,52,1)
(42,49,1)
(15,7,1)
(9,35,1)
(9,36,1)
(7,47,1)
(53,20,1)
(22,24,1)
(17,47,2)
(6,36,2)
(30,2,2)
(5,6,2)
(14,47,2)
(4,27,2)
(3,47,2)
(42,6,2)
(47,47,2)
(13,6,2)
(10,9,2)
(20,2,2)
(14,3,2)
(8,2,2)
(47,30,2)
(4,36,2)
(1,30,2)
(4,6,2)
(6,28,2)
(3,30,2)
(37,6,2)
(28,6,2)
(51,6,2)
(6,6,2)
(3,27,2)
(51,24,2)
(6,24,2)
(9,36,2)
(20,47,2)
(34,2,2)
(28,24,2)
(9,6,2)
(49,6,2)
(27,0,2)
(21,6,2)
(49,36,2)
(15,47,2)
(39,52,2)
(36,24,2)
(9,35,2)
(23,6,2)
(0,33,2)
(7,47,2)
(53,47,2)
(0,39,2)
(12,24,2)
(1,47,2)
(3,10,2)
(22,24,2)
(47,2,2)
(52,29,2)
(10,6,2)
(42,24,2)
(5,24,2)
(53,2,2)
-----------------------------------
(0,(double *)
(1,i++)
(2,globalReturnsTrue()
(3,data[i])
(4,data[i])
(5,2)
(6,i<(10/2)
(7,data)
(8,i)
(9,(double)
(10,data[i] = (double)
(11,)
(12,0)
(13,i)
(14,printDoubleLine(data[i])
(15,i)
(16,i)
(17,i)
(18,if(globalReturnsTrue()
(19,i)
(20,i)
(21,i)
(22,i)
(23,data)
(24,globalReturnsTrue()
(25,)
(26,)
(27,data = (double *)
(28,10/2)
(29,sizeof(double)
(30,i=0)
(31,10)
(32,double)
(33,double *)
(34,0)
(35,double)
(36,i=0)
(37,i)
(38,)
(39,ALLOCA(10*sizeof(double)
(40,)
(41,for(i=0; i<(10/2)
(42,i)
(43,data)
(44,)
(45,for(i=0; i<10; i++)
(46,if(globalReturnsTrue()
(47,i<10)
(48,)
(49,i++)
(50,RET)
(51,10)
(52,10*sizeof(double)
(53,10)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^