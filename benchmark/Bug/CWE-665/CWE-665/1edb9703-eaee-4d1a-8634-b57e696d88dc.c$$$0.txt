-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_17_bad()
{
    int i,j;
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
75,76
76,77
78,79
79,80
79,81
80,81
81,82
81,83
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
95,96
96,97
98,99
99,100
100,101
100,102
101,102
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,12,15,17,18,22,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,64,69,70,73,74,77,82,84,89,90,93,94,97,102,105,107
-----computeFrom-----
20,21
20,22
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
67,68
67,69
71,72
71,73
87,88
87,89
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_17_bad(){    int i,j;    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_17_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_no_init_17_bad
{    int i,j;    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(18,37,0)
(15,8,0)
(29,2,0)
(21,39,0)
(37,39,0)
(25,39,0)
(41,4,0)
(3,28,0)
(24,7,0)
(20,49,0)
(52,37,0)
(4,40,0)
(50,31,0)
(10,37,0)
(37,7,0)
(44,9,0)
(53,32,0)
(30,7,0)
(43,49,0)
(28,3,0)
(26,8,0)
(32,53,0)
(49,20,0)
(22,49,0)
(31,7,0)
(39,3,0)
(23,25,0)
(13,56,0)
(12,7,0)
(22,3,0)
(53,35,0)
(46,2,0)
(52,33,0)
(1,20,0)
(0,8,0)
(55,26,0)
(3,39,0)
(3,22,0)
(37,52,0)
(48,9,0)
(17,24,0)
(27,32,0)
(14,9,0)
(54,25,0)
(34,46,0)
(6,9,0)
(47,46,0)
(19,9,0)
(51,2,0)
(56,2,0)
(16,26,0)
(42,24,0)
(38,8,0)
(49,22,0)
(39,9,0)
(5,9,0)
(45,15,0)
(11,4,0)
(30,12,1)
(56,2,1)
(26,8,1)
(15,45,1)
(25,54,1)
(1,43,1)
(34,2,1)
(17,42,1)
(51,29,1)
(32,27,1)
(36,46,1)
(7,30,1)
(18,24,1)
(24,17,1)
(25,39,1)
(24,7,1)
(53,32,1)
(37,39,1)
(2,51,1)
(47,34,1)
(31,7,1)
(49,20,1)
(3,22,1)
(20,1,1)
(0,53,1)
(3,28,1)
(56,13,1)
(55,15,1)
(12,46,1)
(43,21,1)
(10,18,1)
(38,0,1)
(46,47,1)
(37,10,1)
(37,7,1)
(46,2,1)
(34,56,1)
(26,16,1)
(13,24,1)
(22,49,1)
(50,52,1)
(0,25,1)
(27,25,1)
(8,38,1)
(39,3,1)
(42,7,1)
(31,50,1)
(16,55,1)
(23,39,1)
(52,37,1)
(54,23,1)
(29,26,1)
(42,31,1)
(55,8,1)
(15,8,1)
(45,26,1)
(52,37,2)
(37,24,2)
(46,2,2)
(25,39,2)
(42,24,2)
(47,46,2)
(18,24,2)
(37,7,2)
(3,22,2)
(26,8,2)
(31,24,2)
(24,24,2)
(16,26,2)
(42,46,2)
(52,24,2)
(53,32,2)
(24,7,2)
(56,46,2)
(15,8,2)
(31,7,2)
(10,24,2)
(45,26,2)
(49,20,2)
(39,3,2)
(17,46,2)
(37,39,2)
(55,26,2)
(56,2,2)
(15,26,2)
(13,46,2)
(22,49,2)
(30,46,2)
(32,25,2)
(7,46,2)
(50,24,2)
(3,28,2)
(34,46,2)
(27,25,2)
(12,46,2)
(53,25,2)
(24,46,2)
(46,46,2)
(26,26,2)
(17,24,2)
-----------------------------------
(0,i)
(1,double)
(2,j = 0)
(3,(double *)
(4,)
(5,data)
(6,j)
(7,i=0)
(8,i = 0)
(9,)
(10,i)
(11,for(i=0; i<10; i++)
(12,i)
(13,j)
(14,for(i = 0; i < 1; i++)
(15,i++)
(16,1)
(17,10)
(18,data)
(19,for(j = 0; j < 1; j++)
(20,sizeof(double)
(21,data)
(22,malloc(10*sizeof(double)
(23,data)
(24,i<10)
(25,data == NULL)
(26,i < 1)
(27,1)
(28,double *)
(29,j)
(30,0)
(31,i++)
(32,-1)
(33,)
(34,j)
(35,)
(36,RET)
(37,data[i])
(38,0)
(39,data = (double *)
(40,)
(41,i)
(42,i)
(43,10)
(44,if (data == NULL)
(45,i)
(46,j < 1)
(47,1)
(48,i)
(49,10*sizeof(double)
(50,i)
(51,0)
(52,printDoubleLine(data[i])
(53,exit(-1)
(54,NULL)
(55,i)
(56,j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^