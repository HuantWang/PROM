-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_16_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    while(1)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
35,37
38,39
38,40
40,41
40,42
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,36,37,39,44,46,51,52,55,56,59,64,68,70,71,75,79,81,82,83
-----computeFrom-----
14,15
14,16
26,27
26,28
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_16_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_16_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

while(1)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
-----joern-----
(18,6,0)
(38,20,0)
(3,28,0)
(19,3,0)
(39,26,0)
(26,25,0)
(33,20,0)
(41,23,0)
(0,25,0)
(18,13,0)
(27,7,0)
(13,14,0)
(24,13,0)
(41,24,0)
(42,9,0)
(13,18,0)
(1,14,0)
(9,42,0)
(5,24,0)
(10,26,0)
(24,28,0)
(12,24,0)
(11,41,0)
(34,22,0)
(42,40,0)
(16,14,0)
(2,9,0)
(30,13,0)
(0,17,0)
(43,3,0)
(26,28,0)
(4,14,0)
(24,41,0)
(25,0,0)
(22,28,0)
(23,17,0)
(23,41,0)
(40,42,0)
(25,26,0)
(40,18,0)
(6,18,0)
(32,31,0)
(18,40,0)
(15,25,0)
(35,42,0)
(36,28,0)
(26,13,0)
(20,31,0)
(8,28,0)
(25,15,1)
(18,40,1)
(34,23,1)
(19,43,1)
(8,36,1)
(23,41,1)
(29,13,1)
(43,28,1)
(41,24,1)
(27,29,1)
(13,18,1)
(24,13,1)
(22,34,1)
(41,11,1)
(35,30,1)
(2,35,1)
(42,9,1)
(43,22,1)
(26,28,1)
(3,19,1)
(24,12,1)
(21,29,1)
(21,27,1)
(37,21,1)
(28,8,1)
(39,3,1)
(0,25,1)
(10,39,1)
(25,26,1)
(37,32,1)
(22,28,1)
(18,6,1)
(36,21,1)
(24,28,1)
(26,10,1)
(12,5,1)
(3,28,1)
(9,2,1)
(11,24,1)
(15,26,1)
(26,13,1)
(40,42,1)
(32,3,1)
(5,0,1)
(26,28,2)
(22,28,2)
(24,3,2)
(41,24,2)
(36,21,2)
(32,21,2)
(19,3,2)
(3,28,2)
(34,3,2)
(5,3,2)
(0,3,2)
(18,40,2)
(13,18,2)
(23,3,2)
(43,21,2)
(11,3,2)
(26,13,2)
(25,3,2)
(12,3,2)
(39,3,2)
(40,42,2)
(15,3,2)
(0,25,2)
(10,3,2)
(43,3,2)
(42,9,2)
(26,3,2)
(41,3,2)
(8,21,2)
(23,41,2)
(24,28,2)
(19,21,2)
(28,21,2)
(22,3,2)
(3,21,2)
(24,13,2)
(25,26,2)
(18,6,2)
(27,29,2)
(3,3,2)
-----------------------------------
(0,printIntLine(data[i].intOne)
(1,while(1)
(2,twoIntsStruct)
(3,i<10)
(4,data)
(5,data)
(6,twoIntsStruct *)
(7,)
(8,0)
(9,sizeof(twoIntsStruct)
(10,i)
(11,intTwo)
(12,i)
(13,data = (twoIntsStruct *)
(14,)
(15,intOne)
(16,while(1)
(17,)
(18,(twoIntsStruct *)
(19,10)
(20,)
(21,1)
(22,i++)
(23,printIntLine(data[i].intTwo)
(24,data[i])
(25,data[i].intOne)
(26,data[i])
(27,break;)
(28,i=0)
(29,1)
(30,data)
(31,)
(32,break;)
(33,for(i=0; i<10; i++)
(34,i)
(35,10)
(36,i)
(37,RET)
(38,i)
(39,data)
(40,ALLOCA(10*sizeof(twoIntsStruct)
(41,data[i].intTwo)
(42,10*sizeof(twoIntsStruct)
(43,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^