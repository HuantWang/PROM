-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_08_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
84,85
84,86
85,86
86,87
88,89
89,90
89,91
90,91
91,92
91,93
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,58,59,62,65,66,69,75,77,80,81,83,87,92,94,99,100,103,104,107,112,115,117
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_08_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_08_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(39,49,0)
(5,38,0)
(15,27,0)
(49,59,0)
(53,34,0)
(6,17,0)
(9,20,0)
(48,61,0)
(59,49,0)
(56,11,0)
(19,31,0)
(4,45,0)
(20,10,0)
(51,29,0)
(2,57,0)
(7,27,0)
(49,12,0)
(59,32,0)
(42,53,0)
(1,30,0)
(14,3,0)
(35,9,0)
(21,62,0)
(22,62,0)
(11,56,0)
(11,27,0)
(33,19,0)
(12,49,0)
(9,61,0)
(31,19,0)
(9,59,0)
(11,28,0)
(27,62,0)
(37,43,0)
(8,3,0)
(41,31,0)
(43,27,0)
(43,59,0)
(17,24,0)
(45,4,0)
(31,28,0)
(28,11,0)
(40,62,0)
(20,9,0)
(23,29,0)
(50,62,0)
(16,57,0)
(55,61,0)
(47,51,0)
(49,29,0)
(4,54,0)
(51,57,0)
(9,27,0)
(46,7,0)
(30,61,0)
(44,7,0)
(3,61,0)
(28,31,0)
(38,29,0)
(26,53,0)
(60,43,0)
(13,29,0)
(52,45,0)
(25,17,0)
(57,51,0)
(43,29,0)
(27,11,0)
(36,9,0)
(27,11,1)
(59,49,1)
(46,27,1)
(49,12,1)
(4,45,1)
(11,56,1)
(58,7,1)
(49,39,1)
(35,3,1)
(29,13,1)
(55,48,1)
(60,51,1)
(16,2,1)
(9,27,1)
(51,29,1)
(20,9,1)
(7,27,1)
(0,58,1)
(14,8,1)
(38,5,1)
(23,58,1)
(8,61,1)
(28,31,1)
(2,47,1)
(58,4,1)
(45,52,1)
(8,30,1)
(9,59,1)
(52,7,1)
(18,3,1)
(57,16,1)
(47,29,1)
(13,23,1)
(11,28,1)
(5,59,1)
(7,44,1)
(37,60,1)
(1,20,1)
(38,29,1)
(47,38,1)
(3,61,1)
(39,43,1)
(41,15,1)
(43,29,1)
(19,33,1)
(33,41,1)
(18,0,1)
(30,61,1)
(61,55,1)
(36,35,1)
(49,29,1)
(3,14,1)
(43,37,1)
(44,46,1)
(51,57,1)
(9,36,1)
(31,19,1)
(43,27,1)
(48,0,1)
(30,1,1)
(0,51,1)
(9,61,1)
(5,51,2)
(35,3,2)
(3,61,2)
(43,29,2)
(8,0,2)
(51,29,2)
(3,3,2)
(47,58,2)
(47,51,2)
(43,51,2)
(38,51,2)
(60,51,2)
(36,3,2)
(27,11,2)
(20,3,2)
(1,3,2)
(4,7,2)
(11,28,2)
(14,0,2)
(9,59,2)
(57,58,2)
(7,27,2)
(52,7,2)
(49,51,2)
(59,51,2)
(16,51,2)
(13,58,2)
(8,3,2)
(49,12,2)
(51,51,2)
(2,51,2)
(16,58,2)
(48,0,2)
(38,29,2)
(14,3,2)
(45,7,2)
(20,9,2)
(29,58,2)
(3,0,2)
(59,49,2)
(9,27,2)
(61,0,2)
(30,3,2)
(37,51,2)
(23,58,2)
(2,58,2)
(43,27,2)
(30,61,2)
(55,0,2)
(39,51,2)
(51,58,2)
(9,61,2)
(9,3,2)
(51,57,2)
(11,56,2)
(31,19,2)
(28,31,2)
(4,45,2)
(57,51,2)
(49,29,2)
-----------------------------------
(0,staticReturnsTrue()
(1,i)
(2,10)
(3,i<10)
(4,exit(-1)
(5,i)
(6,i)
(7,data == NULL)
(8,i)
(9,data[i])
(10,)
(11,(double *)
(12,double)
(13,0)
(14,10)
(15,data)
(16,2)
(17,)
(18,RET)
(19,sizeof(double)
(20,printDoubleLine(data[i])
(21,if (data == NULL)
(22,data)
(23,i)
(24,)
(25,for(i=0; i<(10/2)
(26,for(i=0; i<10; i++)
(27,data = (double *)
(28,malloc(10*sizeof(double)
(29,i=0)
(30,i++)
(31,10*sizeof(double)
(32,)
(33,double)
(34,)
(35,data)
(36,i)
(37,i)
(38,i++)
(39,i)
(40,if(staticReturnsTrue()
(41,10)
(42,i)
(43,data[i])
(44,NULL)
(45,-1)
(46,data)
(47,i)
(48,i)
(49,(double)
(50,if(staticReturnsTrue()
(51,i<(10/2)
(52,1)
(53,)
(54,)
(55,0)
(56,double *)
(57,10/2)
(58,staticReturnsTrue()
(59,data[i] = (double)
(60,data)
(61,i=0)
(62,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^