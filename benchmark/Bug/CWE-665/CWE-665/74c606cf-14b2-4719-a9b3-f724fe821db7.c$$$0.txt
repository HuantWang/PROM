-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(17,5,0)
(38,39,0)
(23,22,0)
(22,17,0)
(32,13,0)
(25,22,0)
(25,28,0)
(6,22,0)
(24,4,0)
(3,23,0)
(11,22,0)
(30,33,0)
(18,6,0)
(43,6,0)
(30,5,0)
(17,16,0)
(17,22,0)
(42,19,0)
(7,12,0)
(11,28,0)
(40,33,0)
(22,28,0)
(16,17,0)
(30,19,0)
(36,22,0)
(2,19,0)
(42,14,0)
(8,12,0)
(4,0,0)
(5,17,0)
(27,4,0)
(14,42,0)
(21,41,0)
(26,11,0)
(34,42,0)
(29,30,0)
(1,28,0)
(4,19,0)
(39,31,0)
(7,35,0)
(5,30,0)
(20,25,0)
(23,28,0)
(9,14,0)
(12,7,0)
(37,25,0)
(19,41,0)
(15,13,0)
(13,41,0)
(33,30,0)
(19,4,0)
(30,19,1)
(42,19,1)
(8,6,1)
(37,6,1)
(40,29,1)
(23,3,1)
(29,36,1)
(43,18,1)
(5,30,1)
(7,12,1)
(23,22,1)
(11,26,1)
(10,11,1)
(20,37,1)
(24,27,1)
(17,16,1)
(3,25,1)
(17,5,1)
(33,40,1)
(42,14,1)
(4,0,1)
(22,17,1)
(27,2,1)
(38,42,1)
(9,34,1)
(25,22,1)
(6,43,1)
(4,24,1)
(19,4,1)
(11,22,1)
(30,33,1)
(12,8,1)
(18,22,1)
(34,19,1)
(39,38,1)
(6,22,1)
(37,7,1)
(26,23,1)
(10,39,1)
(14,9,1)
(36,42,1)
(25,20,1)
(30,33,2)
(20,42,2)
(43,42,2)
(18,42,2)
(4,0,2)
(22,42,2)
(30,42,2)
(6,22,2)
(17,5,2)
(33,42,2)
(25,42,2)
(23,42,2)
(5,30,2)
(17,16,2)
(17,42,2)
(5,42,2)
(7,12,2)
(6,42,2)
(38,42,2)
(40,42,2)
(3,42,2)
(23,22,2)
(42,14,2)
(11,42,2)
(42,19,2)
(29,42,2)
(12,6,2)
(25,22,2)
(37,42,2)
(11,22,2)
(26,42,2)
(30,19,2)
(22,17,2)
(39,42,2)
(19,4,2)
(36,42,2)
(8,6,2)
(7,6,2)
-----------------------------------
(0,size_t dataArray[])
(1,if (myString == NULL)
(2,data)
(3,myString)
(4,dataArray[2])
(5,malloc(data*sizeof(wchar_t)
(6,myString == NULL)
(7,exit(-1)
(8,1)
(9,HELLO_STRING)
(10,RET)
(11,free(myString)
(12,-1)
(13,)
(14,wcslen(HELLO_STRING)
(15,if (data > wcslen(HELLO_STRING)
(16,wchar_t *)
(17,(wchar_t *)
(18,myString)
(19,data = dataArray[2])
(20,HELLO_STRING)
(21,data)
(22,myString = (wchar_t *)
(23,printWLine(myString)
(24,2)
(25,wcscpy(myString, HELLO_STRING)
(26,myString)
(27,dataArray)
(28,)
(29,data)
(30,data*sizeof(wchar_t)
(31,)
(32,myString)
(33,sizeof(wchar_t)
(34,data)
(35,)
(36,myString)
(37,myString)
(38,"Input is less than the length of the source string")
(39,printLine("Input is less than the length of the source string")
(40,wchar_t)
(41,)
(42,data > wcslen(HELLO_STRING)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^