-----label-----
1
-----code-----
void CWE665_Improper_Initialization__char_cat_04_bad()
{
    char * data;
    char dataBuffer[100];
    data = dataBuffer;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */
        strcat(data, source);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
30,31
30,32
30,33
30,34
30,35
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
58,59
58,60
58,61
59,60
61,62
63,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,29,33,35,37,41,43,44,46,47,52,54,55,56,60,62,64,68,70
-----computeFrom-----
20,21
20,22
45,46
45,47
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__char_cat_04_bad(){    char * data;    char dataBuffer[100];    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
void
CWE665_Improper_Initialization__char_cat_04_bad()
CWE665_Improper_Initialization__char_cat_04_bad
{    char * data;    char dataBuffer[100];    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100];
char dataBuffer[100];
char
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_TRUE)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(4,16,0)
(10,8,0)
(7,8,0)
(19,12,0)
(15,28,0)
(23,9,0)
(0,22,0)
(25,5,0)
(22,20,0)
(13,9,0)
(11,24,0)
(16,24,0)
(5,9,0)
(26,5,0)
(21,9,0)
(3,24,0)
(26,12,0)
(8,5,0)
(28,5,0)
(24,16,0)
(14,20,0)
(16,5,0)
(18,12,0)
(1,20,0)
(6,26,0)
(20,22,0)
(22,28,0)
(8,12,0)
(12,9,0)
(2,16,0)
(17,26,1)
(11,2,1)
(7,10,1)
(4,27,1)
(22,20,1)
(6,8,1)
(14,0,1)
(1,14,1)
(2,4,1)
(26,12,1)
(3,11,1)
(28,15,1)
(8,12,1)
(16,24,1)
(8,7,1)
(20,1,1)
(10,28,1)
(19,18,1)
(26,6,1)
(24,3,1)
(27,12,1)
(12,19,1)
(0,16,1)
(15,22,1)
(26,12,2)
(8,12,2)
(22,20,2)
(16,24,2)
-----------------------------------
(0,source)
(1,1)
(2,'C')
(3,1)
(4,source)
(5,)
(6,data)
(7,source)
(8,strcat(data, source)
(9,)
(10,data)
(11,100)
(12,data = dataBuffer)
(13,data)
(14,100)
(15,'\\0')
(16,memset(source, 'C', 100-1)
(17,RET)
(18,data)
(19,dataBuffer)
(20,100-1)
(21,dataBuffer)
(22,source[100-1])
(23,if(STATIC_CONST_TRUE)
(24,100-1)
(25,source)
(26,printLine(data)
(27,STATIC_CONST_TRUE)
(28,source[100-1] = '\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^