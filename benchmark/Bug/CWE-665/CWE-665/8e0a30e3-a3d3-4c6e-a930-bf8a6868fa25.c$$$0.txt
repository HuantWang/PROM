-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_15_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Partially initialize data */
    {
        int i;
        for(i=0; i<(10/2); i++)
        {
            data[i].intOne = i;
            data[i].intTwo = i;
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
35,36
35,37
35,38
35,39
35,40
35,41
36,37
38,39
38,40
39,40
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
54,55
54,56
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
67,68
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
78,79
81,82
85,86
86,87
86,88
87,88
91,92
91,93
93,94
93,95
93,96
93,97
93,98
93,99
94,95
96,97
96,98
97,98
98,99
98,100
100,101
102,103
102,104
102,105
102,106
103,104
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
115,116
115,117
116,117
117,118
117,119
118,119
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
131,132
131,133
132,133
132,134
133,134
135,136
140,141
141,142
141,143
142,143
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,34,37,41,43,48,49,52,55,56,59,66,68,69,71,77,79,80,82,83,84,88,89,90,92,95,99,101,106,107,110,111,114,119,123,125,126,130,134,136,137,138,139,143,144,145
-----computeFrom-----
14,15
14,16
26,27
26,28
46,47
46,48
50,51
50,52
54,55
54,56
62,63
62,64
73,74
73,75
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_15_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_partial_init_15_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

switch(6)    {    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Partially initialize data */    {        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int i;        for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }    }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)        {            data[i].intOne = i;            data[i].intTwo = i;        }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{            data[i].intOne = i;            data[i].intTwo = i;        }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(76,18,0)
(46,78,0)
(64,20,0)
(56,12,0)
(40,47,0)
(63,3,0)
(46,47,0)
(80,30,0)
(26,46,0)
(39,40,0)
(46,65,0)
(79,53,0)
(19,47,0)
(73,66,0)
(56,47,0)
(73,22,0)
(22,73,0)
(0,32,0)
(37,59,0)
(20,41,0)
(65,66,0)
(31,56,0)
(67,53,0)
(25,10,0)
(22,24,0)
(41,47,0)
(50,81,0)
(51,12,0)
(74,18,0)
(62,63,0)
(5,58,0)
(33,58,0)
(61,18,0)
(42,30,0)
(3,63,0)
(75,45,0)
(57,22,0)
(36,3,0)
(75,40,0)
(65,59,0)
(16,66,0)
(8,46,0)
(81,53,0)
(45,47,0)
(7,67,0)
(40,75,0)
(48,79,0)
(4,40,0)
(27,75,0)
(68,67,0)
(43,47,0)
(45,21,0)
(13,24,0)
(44,78,0)
(70,63,0)
(28,79,0)
(71,58,0)
(49,60,0)
(63,45,0)
(38,59,0)
(1,18,0)
(9,3,0)
(69,59,0)
(63,62,0)
(34,65,0)
(52,61,0)
(78,46,0)
(77,12,0)
(6,58,0)
(41,21,0)
(62,60,0)
(23,41,0)
(72,45,0)
(11,53,0)
(3,53,0)
(66,73,0)
(40,65,0)
(20,49,0)
(66,65,0)
(12,56,0)
(79,20,0)
(49,20,0)
(3,65,0)
(17,18,0)
(24,22,0)
(10,47,0)
(20,79,0)
(29,32,0)
(55,5,0)
(66,16,0)
(79,65,0)
(35,53,0)
(32,18,0)
(78,41,0)
(54,58,0)
(30,58,0)
(9,36,1)
(7,81,1)
(31,10,1)
(54,56,1)
(35,11,1)
(55,15,1)
(77,51,1)
(63,45,1)
(43,15,1)
(70,3,1)
(74,61,1)
(46,65,1)
(68,7,1)
(78,46,1)
(8,56,1)
(3,53,1)
(51,31,1)
(79,53,1)
(75,27,1)
(36,49,1)
(13,57,1)
(57,34,1)
(53,35,1)
(45,72,1)
(14,54,1)
(23,78,1)
(47,19,1)
(65,66,1)
(2,17,1)
(40,65,1)
(73,22,1)
(31,47,1)
(44,46,1)
(39,41,1)
(66,73,1)
(14,33,1)
(2,74,1)
(75,40,1)
(10,25,1)
(62,63,1)
(81,53,1)
(41,47,1)
(48,67,1)
(28,48,1)
(61,52,1)
(79,65,1)
(40,4,1)
(78,44,1)
(56,47,1)
(46,47,1)
(46,26,1)
(3,65,1)
(67,53,1)
(26,8,1)
(15,65,1)
(45,47,1)
(66,16,1)
(40,47,1)
(52,14,1)
(33,5,1)
(20,41,1)
(24,13,1)
(67,68,1)
(20,79,1)
(50,62,1)
(22,24,1)
(11,14,1)
(72,75,1)
(63,70,1)
(49,20,1)
(5,55,1)
(10,47,1)
(25,45,1)
(17,67,1)
(27,40,1)
(20,64,1)
(81,50,1)
(56,12,1)
(63,3,1)
(79,28,1)
(12,77,1)
(41,23,1)
(3,9,1)
(7,53,1)
(19,43,1)
(64,79,1)
(4,39,1)
(63,45,2)
(67,53,2)
(3,65,2)
(9,67,2)
(67,14,2)
(46,56,2)
(51,15,2)
(31,56,2)
(55,15,2)
(27,56,2)
(43,15,2)
(40,65,2)
(5,15,2)
(41,47,2)
(3,53,2)
(65,66,2)
(46,65,2)
(62,67,2)
(51,56,2)
(63,3,2)
(54,15,2)
(56,47,2)
(64,67,2)
(46,47,2)
(66,73,2)
(23,56,2)
(39,56,2)
(61,14,2)
(31,15,2)
(53,14,2)
(56,15,2)
(45,56,2)
(68,67,2)
(22,24,2)
(33,15,2)
(78,56,2)
(44,56,2)
(56,12,2)
(79,53,2)
(4,56,2)
(20,79,2)
(12,15,2)
(17,14,2)
(35,14,2)
(40,56,2)
(20,41,2)
(67,67,2)
(75,56,2)
(77,15,2)
(52,14,2)
(28,67,2)
(79,65,2)
(36,67,2)
(41,56,2)
(77,56,2)
(49,20,2)
(8,56,2)
(10,56,2)
(10,47,2)
(68,14,2)
(45,47,2)
(20,67,2)
(19,15,2)
(72,56,2)
(81,67,2)
(56,56,2)
(75,40,2)
(66,16,2)
(40,47,2)
(7,67,2)
(47,15,2)
(12,56,2)
(48,67,2)
(73,22,2)
(74,14,2)
(79,67,2)
(50,67,2)
(11,14,2)
(49,67,2)
(26,56,2)
(78,46,2)
(25,56,2)
(62,63,2)
(63,67,2)
(3,67,2)
(81,53,2)
(70,67,2)
(7,14,2)
-----------------------------------
(0,for(i=0; i<10; i++)
(1,default:)
(2,RET)
(3,data[i])
(4,i)
(5,printLine("Benign, fixed string")
(6,default:)
(7,i)
(8,data)
(9,i)
(10,i++)
(11,i)
(12,10/2)
(13,twoIntsStruct)
(14,7)
(15,6)
(16,twoIntsStruct *)
(17,break;)
(18,)
(19,0)
(20,data[i].intOne)
(21,)
(22,10*sizeof(twoIntsStruct)
(23,i)
(24,sizeof(twoIntsStruct)
(25,i)
(26,i)
(27,intTwo)
(28,i)
(29,i)
(30,)
(31,i)
(32,)
(33,break;)
(34,data)
(35,0)
(36,data)
(37,switch(6)
(38,switch(7)
(39,data)
(40,data[i])
(41,data[i].intOne = i)
(42,i)
(43,i)
(44,intOne)
(45,data[i].intTwo = i)
(46,data[i])
(47,i=0)
(48,data)
(49,printIntLine(data[i].intOne)
(50,i)
(51,10)
(52,"Benign, fixed string")
(53,i=0)
(54,break;)
(55,"Benign, fixed string")
(56,i<(10/2)
(57,10)
(58,)
(59,)
(60,)
(61,printLine("Benign, fixed string")
(62,printIntLine(data[i].intTwo)
(63,data[i].intTwo)
(64,intOne)
(65,data = (twoIntsStruct *)
(66,(twoIntsStruct *)
(67,i<10)
(68,10)
(69,data)
(70,intTwo)
(71,case 6:)
(72,i)
(73,ALLOCA(10*sizeof(twoIntsStruct)
(74,break;)
(75,data[i].intTwo)
(76,case 7:)
(77,2)
(78,data[i].intOne)
(79,data[i])
(80,for(i=0; i<(10/2)
(81,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^