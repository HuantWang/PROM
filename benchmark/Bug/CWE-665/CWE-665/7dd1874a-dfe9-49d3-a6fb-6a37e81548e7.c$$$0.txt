-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(29,15,0)
(38,35,0)
(17,28,0)
(35,21,0)
(28,21,0)
(20,12,0)
(31,30,0)
(19,16,0)
(28,12,0)
(1,36,0)
(0,8,0)
(40,21,0)
(39,15,0)
(10,24,0)
(21,8,0)
(18,23,0)
(34,20,0)
(27,22,0)
(15,5,0)
(36,30,0)
(35,30,0)
(23,27,0)
(3,40,0)
(32,16,0)
(21,28,0)
(37,8,0)
(35,4,0)
(26,40,0)
(33,8,0)
(7,30,0)
(6,21,0)
(12,20,0)
(24,20,0)
(16,30,0)
(27,23,0)
(2,8,0)
(25,35,0)
(12,28,0)
(20,24,0)
(4,35,0)
(4,14,0)
(28,17,0)
(34,6,1)
(40,21,1)
(26,3,1)
(38,25,1)
(35,30,1)
(12,20,1)
(21,28,1)
(35,21,1)
(30,31,1)
(36,30,1)
(18,40,1)
(28,12,1)
(32,30,1)
(32,36,1)
(35,38,1)
(7,13,1)
(25,16,1)
(20,24,1)
(4,35,1)
(1,4,1)
(36,1,1)
(19,32,1)
(28,17,1)
(40,26,1)
(24,10,1)
(9,40,1)
(10,34,1)
(16,19,1)
(11,13,1)
(3,21,1)
(31,7,1)
(23,18,1)
(11,16,1)
(13,9,1)
(9,27,1)
(27,23,1)
(16,30,1)
(40,21,2)
(4,35,2)
(35,16,2)
(32,16,2)
(19,13,2)
(7,13,2)
(19,16,2)
(38,16,2)
(16,30,2)
(4,16,2)
(36,30,2)
(28,17,2)
(21,28,2)
(23,40,2)
(32,13,2)
(16,13,2)
(27,40,2)
(35,21,2)
(31,13,2)
(35,30,2)
(25,16,2)
(28,12,2)
(36,16,2)
(1,16,2)
(16,16,2)
(30,13,2)
(27,23,2)
(20,24,2)
(12,20,2)
(18,40,2)
-----------------------------------
(0,if (data == NULL)
(1,i)
(2,if(staticTrue)
(3,data)
(4,printIntLine(data[i])
(5,)
(6,data)
(7,i)
(8,)
(9,staticTrue)
(10,int)
(11,RET)
(12,malloc(10*sizeof(int)
(13,staticTrue)
(14,)
(15,)
(16,i<10)
(17,int *)
(18,1)
(19,10)
(20,10*sizeof(int)
(21,data = (int *)
(22,)
(23,-1)
(24,sizeof(int)
(25,data)
(26,NULL)
(27,exit(-1)
(28,(int *)
(29,for(i=0; i<10; i++)
(30,i=0)
(31,0)
(32,i)
(33,if(staticTrue)
(34,10)
(35,data[i])
(36,i++)
(37,data)
(38,i)
(39,i)
(40,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^