-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(15,25,0)
(32,20,0)
(15,28,0)
(17,47,0)
(1,51,0)
(39,45,0)
(39,47,0)
(35,8,0)
(18,36,0)
(34,46,0)
(15,8,0)
(25,51,0)
(53,15,0)
(12,46,0)
(10,17,0)
(14,45,0)
(19,28,0)
(8,15,0)
(11,3,0)
(23,36,0)
(29,47,0)
(44,51,0)
(30,51,0)
(26,6,0)
(43,35,0)
(5,32,0)
(33,24,0)
(35,43,0)
(20,32,0)
(46,45,0)
(0,25,0)
(27,28,0)
(28,19,0)
(15,53,0)
(8,35,0)
(45,47,0)
(46,47,0)
(20,28,0)
(9,25,0)
(49,39,0)
(38,20,0)
(20,25,0)
(45,35,0)
(36,31,0)
(16,6,0)
(40,7,0)
(37,7,0)
(2,53,0)
(6,26,0)
(52,50,0)
(13,15,0)
(35,45,0)
(42,33,0)
(48,3,0)
(17,45,0)
(7,45,0)
(28,41,0)
(26,22,0)
(21,50,0)
(45,35,1)
(11,25,1)
(20,28,1)
(14,20,1)
(38,50,1)
(35,43,1)
(26,6,1)
(4,50,1)
(3,48,1)
(39,49,1)
(21,52,1)
(15,25,1)
(19,27,1)
(20,25,1)
(27,3,1)
(7,45,1)
(7,37,1)
(12,26,1)
(48,11,1)
(25,9,1)
(52,28,1)
(10,39,1)
(46,45,1)
(49,46,1)
(4,17,1)
(4,33,1)
(33,42,1)
(17,10,1)
(16,7,1)
(15,28,1)
(17,45,1)
(8,15,1)
(28,19,1)
(12,7,1)
(13,14,1)
(32,5,1)
(9,0,1)
(50,21,1)
(2,13,1)
(53,2,1)
(39,45,1)
(40,45,1)
(15,53,1)
(34,12,1)
(52,3,1)
(42,20,1)
(37,40,1)
(5,38,1)
(46,34,1)
(6,16,1)
(35,8,1)
(20,32,1)
(34,20,2)
(8,15,2)
(46,45,2)
(33,20,2)
(46,20,2)
(40,20,2)
(53,20,2)
(15,28,2)
(39,45,2)
(7,45,2)
(13,20,2)
(15,53,2)
(28,3,2)
(42,20,2)
(26,6,2)
(35,43,2)
(5,50,2)
(6,7,2)
(38,50,2)
(45,35,2)
(15,20,2)
(27,3,2)
(35,20,2)
(19,3,2)
(20,28,2)
(45,20,2)
(20,25,2)
(49,20,2)
(14,20,2)
(17,20,2)
(39,20,2)
(12,20,2)
(8,20,2)
(10,20,2)
(20,50,2)
(2,20,2)
(7,20,2)
(17,45,2)
(16,7,2)
(15,25,2)
(20,32,2)
(35,8,2)
(37,20,2)
(26,7,2)
(28,19,2)
(32,50,2)
-----------------------------------
(0,data)
(1,data)
(2,char)
(3,staticFive==5)
(4,RET)
(5,HELLO_STRING)
(6,-1)
(7,myString == NULL)
(8,malloc(data*sizeof(char)
(9,0)
(10,myString)
(11,staticFive)
(12,myString)
(13,data)
(14,myString)
(15,data*sizeof(char)
(16,1)
(17,free(myString)
(18,if (data > strlen(HELLO_STRING)
(19,rand()
(20,data > strlen(HELLO_STRING)
(21,5)
(22,)
(23,myString)
(24,)
(25,data = 0)
(26,exit(-1)
(27,data)
(28,data = rand()
(29,if (myString == NULL)
(30,if(staticFive==5)
(31,)
(32,strlen(HELLO_STRING)
(33,printLine("Input is less than the length of the source string")
(34,HELLO_STRING)
(35,(char *)
(36,)
(37,NULL)
(38,data)
(39,printLine(myString)
(40,myString)
(41,)
(42,"Input is less than the length of the source string")
(43,char *)
(44,if(staticFive==5)
(45,myString = (char *)
(46,strcpy(myString, HELLO_STRING)
(47,)
(48,5)
(49,myString)
(50,staticFive==5)
(51,)
(52,staticFive)
(53,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^