-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_12_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
46,49
47,48
48,49
50,51
52,53
53,54
53,55
54,55
55,56
55,57
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
72,74
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
82,83
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
90,91
93,94
95,96
95,97
95,98
96,97
97,98
99,100
100,101
100,102
101,102
102,103
102,104
104,105
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
119,120
119,121
120,121
121,122
121,123
122,123
124,125
124,126
125,126
125,127
126,127
128,129
131,132
132,133
132,134
133,134
135,136
135,137
136,137
136,138
137,138
139,140
142,143
142,144
143,144
143,145
144,145
145,146
145,147
147,148
149,150
149,151
149,152
149,153
150,151
151,152
151,153
152,153
155,156
155,157
156,157
159,160
160,161
162,163
162,164
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
177,179
178,179
180,181
183,184
185,186
185,187
186,187
187,188
187,189
189,190
191,192
191,193
191,194
191,195
192,193
193,194
193,195
194,195
197,198
197,199
198,199
201,202
202,203
204,205
204,206
205,206
206,207
206,208
207,208
209,210
209,211
210,211
210,212
211,212
213,214
216,217
217,218
217,219
218,219
220,221
220,222
221,222
221,223
222,223
224,225
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,49,51,56,58,63,64,67,68,71,78,80,81,83,89,91,92,94,98,103,105,110,111,114,115,118,123,127,129,130,134,138,140,141,146,148,153,154,157,158,161,168,170,171,173,179,181,182,184,188,190,195,196,199,200,203,208,212,214,215,219,223,225,226
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
61,62
61,63
65,66
65,67
74,75
74,76
85,86
85,87
108,109
108,110
112,113
112,114
151,152
151,153
155,156
155,157
164,165
164,166
175,176
175,177
193,194
193,195
197,198
197,199
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_12_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_12_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(10*sizeof(twoIntsStruct))
malloc
malloc
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(1,88,0)
(106,25,0)
(40,82,0)
(113,116,0)
(106,29,0)
(11,95,0)
(105,109,0)
(63,31,0)
(114,68,0)
(82,108,0)
(93,6,0)
(46,103,0)
(70,71,0)
(68,23,0)
(3,64,0)
(13,115,0)
(45,23,0)
(18,115,0)
(118,116,0)
(77,47,0)
(125,108,0)
(49,48,0)
(27,21,0)
(86,48,0)
(112,53,0)
(94,115,0)
(109,49,0)
(5,48,0)
(35,74,0)
(90,64,0)
(67,30,0)
(8,72,0)
(83,24,0)
(2,25,0)
(29,64,0)
(110,108,0)
(122,91,0)
(47,49,0)
(46,49,0)
(19,53,0)
(97,104,0)
(89,35,0)
(93,21,0)
(59,110,0)
(107,79,0)
(91,122,0)
(117,55,0)
(116,61,0)
(62,46,0)
(109,115,0)
(90,55,0)
(50,53,0)
(92,87,0)
(22,121,0)
(41,6,0)
(55,49,0)
(23,58,0)
(35,49,0)
(87,74,0)
(15,108,0)
(84,104,0)
(6,93,0)
(12,66,0)
(37,31,0)
(109,29,0)
(122,35,0)
(75,64,0)
(24,83,0)
(73,122,0)
(119,95,0)
(3,101,0)
(100,109,0)
(64,58,0)
(78,60,0)
(29,109,0)
(103,46,0)
(30,82,0)
(3,125,0)
(79,0,0)
(35,122,0)
(81,61,0)
(51,3,0)
(121,53,0)
(82,30,0)
(65,90,0)
(55,53,0)
(104,85,0)
(95,108,0)
(126,56,0)
(36,49,0)
(42,121,0)
(49,21,0)
(17,12,0)
(20,81,0)
(123,107,0)
(55,90,0)
(69,48,0)
(71,49,0)
(2,24,0)
(46,108,0)
(23,53,0)
(6,88,0)
(56,53,0)
(102,29,0)
(79,107,0)
(47,74,0)
(68,50,0)
(82,49,0)
(21,27,0)
(72,74,0)
(83,49,0)
(26,74,0)
(91,32,0)
(120,24,0)
(33,47,0)
(29,106,0)
(16,46,0)
(57,50,0)
(98,48,0)
(110,52,0)
(54,87,0)
(60,108,0)
(21,49,0)
(64,53,0)
(24,2,0)
(88,6,0)
(96,108,0)
(9,13,0)
(31,115,0)
(99,83,0)
(14,74,0)
(30,110,0)
(21,93,0)
(124,12,0)
(4,35,0)
(125,52,0)
(76,71,0)
(10,82,0)
(101,32,0)
(24,23,0)
(3,47,0)
(122,110,0)
(28,55,0)
(80,83,0)
(103,125,0)
(38,125,0)
(83,115,0)
(34,103,0)
(47,3,0)
(122,23,0)
(50,49,0)
(50,68,0)
(101,3,0)
(44,81,0)
(111,50,0)
(117,28,1)
(74,14,1)
(50,57,1)
(108,96,1)
(112,19,1)
(71,70,1)
(47,49,1)
(51,47,1)
(50,49,1)
(13,9,1)
(38,103,1)
(6,88,1)
(68,114,1)
(83,49,1)
(15,7,1)
(110,108,1)
(76,49,1)
(47,77,1)
(95,108,1)
(3,51,1)
(101,3,1)
(18,94,1)
(114,50,1)
(125,108,1)
(99,106,1)
(39,79,1)
(46,49,1)
(35,49,1)
(68,50,1)
(22,53,1)
(54,92,1)
(70,76,1)
(83,80,1)
(103,46,1)
(23,45,1)
(31,37,1)
(75,90,1)
(46,16,1)
(49,21,1)
(109,105,1)
(59,30,1)
(57,111,1)
(50,53,1)
(79,107,1)
(9,2,1)
(46,108,1)
(65,55,1)
(107,123,1)
(96,15,1)
(11,60,1)
(82,108,1)
(119,11,1)
(88,1,1)
(24,120,1)
(30,82,1)
(42,22,1)
(7,121,1)
(123,71,1)
(45,68,1)
(30,67,1)
(13,115,1)
(67,82,1)
(109,49,1)
(56,53,1)
(7,39,1)
(73,35,1)
(43,31,1)
(60,108,1)
(19,39,1)
(3,64,1)
(55,117,1)
(106,29,1)
(93,6,1)
(35,74,1)
(63,13,1)
(83,115,1)
(62,95,1)
(37,63,1)
(126,23,1)
(122,23,1)
(21,93,1)
(109,115,1)
(100,31,1)
(64,53,1)
(24,83,1)
(43,87,1)
(1,41,1)
(122,110,1)
(28,121,1)
(121,42,1)
(115,18,1)
(35,89,1)
(31,115,1)
(64,75,1)
(111,64,1)
(103,34,1)
(4,101,1)
(56,126,1)
(26,95,1)
(8,91,1)
(41,36,1)
(87,54,1)
(82,49,1)
(105,100,1)
(60,78,1)
(3,47,1)
(14,26,1)
(71,49,1)
(55,53,1)
(23,53,1)
(10,40,1)
(121,53,1)
(80,99,1)
(78,110,1)
(94,7,1)
(72,8,1)
(72,74,1)
(90,55,1)
(91,122,1)
(90,65,1)
(122,35,1)
(29,102,1)
(125,38,1)
(11,108,1)
(22,56,1)
(77,33,1)
(29,64,1)
(53,112,1)
(34,46,1)
(102,109,1)
(47,74,1)
(40,125,1)
(3,125,1)
(63,115,1)
(2,24,1)
(29,109,1)
(33,87,1)
(39,71,1)
(16,62,1)
(55,49,1)
(110,59,1)
(89,4,1)
(82,10,1)
(24,23,1)
(122,73,1)
(21,27,1)
(92,72,1)
(92,74,1)
(95,119,1)
(120,83,1)
(87,74,1)
(109,49,2)
(75,121,2)
(82,108,2)
(87,87,2)
(121,121,2)
(103,46,2)
(2,24,2)
(29,31,2)
(77,87,2)
(35,87,2)
(95,108,2)
(92,87,2)
(62,95,2)
(3,47,2)
(26,7,2)
(112,39,2)
(29,109,2)
(29,64,2)
(59,95,2)
(122,110,2)
(55,49,2)
(119,7,2)
(21,27,2)
(87,7,2)
(13,115,2)
(101,87,2)
(22,121,2)
(30,82,2)
(63,7,2)
(63,31,2)
(46,95,2)
(107,71,2)
(95,7,2)
(125,95,2)
(80,31,2)
(60,95,2)
(11,95,2)
(37,7,2)
(31,7,2)
(109,31,2)
(28,121,2)
(31,115,2)
(83,115,2)
(23,53,2)
(37,31,2)
(35,74,2)
(94,7,2)
(68,50,2)
(115,7,2)
(74,7,2)
(91,87,2)
(47,87,2)
(23,121,2)
(42,121,2)
(110,108,2)
(82,49,2)
(95,95,2)
(47,74,2)
(78,95,2)
(46,49,2)
(2,31,2)
(108,7,2)
(24,23,2)
(4,87,2)
(67,95,2)
(34,95,2)
(103,95,2)
(93,6,2)
(126,121,2)
(101,3,2)
(38,95,2)
(99,31,2)
(122,23,2)
(119,95,2)
(31,31,2)
(54,87,2)
(100,31,2)
(10,95,2)
(122,35,2)
(6,88,2)
(90,55,2)
(54,7,2)
(114,121,2)
(24,83,2)
(120,31,2)
(16,95,2)
(72,74,2)
(79,107,2)
(11,7,2)
(24,31,2)
(106,29,2)
(121,53,2)
(111,121,2)
(56,53,2)
(51,87,2)
(102,31,2)
(64,53,2)
(53,39,2)
(125,108,2)
(90,121,2)
(46,108,2)
(105,31,2)
(50,49,2)
(19,39,2)
(96,7,2)
(65,121,2)
(47,49,2)
(49,21,2)
(42,39,2)
(122,87,2)
(22,39,2)
(3,125,2)
(15,7,2)
(18,7,2)
(71,49,2)
(83,49,2)
(8,87,2)
(89,87,2)
(117,121,2)
(50,53,2)
(40,95,2)
(14,7,2)
(3,87,2)
(73,87,2)
(21,93,2)
(50,121,2)
(72,87,2)
(110,95,2)
(106,31,2)
(30,95,2)
(56,121,2)
(79,71,2)
(92,7,2)
(123,71,2)
(64,121,2)
(3,64,2)
(33,87,2)
(109,115,2)
(60,108,2)
(13,31,2)
(55,121,2)
(9,31,2)
(83,31,2)
(55,53,2)
(121,39,2)
(57,121,2)
(82,95,2)
(87,74,2)
(45,121,2)
(35,49,2)
(91,122,2)
(68,121,2)
-----------------------------------
(0,)
(1,twoIntsStruct)
(2,printIntLine(data[i].intTwo)
(3,data[i].intOne)
(4,data)
(5,if(globalReturnsTrueOrFalse()
(6,10*sizeof(twoIntsStruct)
(7,globalReturnsTrueOrFalse()
(8,i)
(9,i)
(10,i)
(11,i)
(12,)
(13,i++)
(14,0)
(15,i)
(16,i)
(17,for(i=0; i<10; i++)
(18,0)
(19,i)
(20,for(i=0; i<10; i++)
(21,(twoIntsStruct *)
(22,i)
(23,data[i].intTwo = i)
(24,data[i].intTwo)
(25,)
(26,i)
(27,twoIntsStruct *)
(28,data)
(29,data[i].intOne)
(30,data[i].intTwo)
(31,i<10)
(32,)
(33,data)
(34,intOne)
(35,data[i])
(36,data)
(37,10)
(38,i)
(39,globalReturnsTrueOrFalse()
(40,data)
(41,10)
(42,10)
(43,RET)
(44,i)
(45,i)
(46,data[i])
(47,data[i])
(48,)
(49,data = (twoIntsStruct *)
(50,data[i])
(51,intOne)
(52,)
(53,i=0)
(54,10)
(55,data[i])
(56,i++)
(57,i)
(58,)
(59,i)
(60,i++)
(61,)
(62,data)
(63,i)
(64,data[i].intOne = i)
(65,intOne)
(66,)
(67,intTwo)
(68,data[i].intTwo)
(69,if (data == NULL)
(70,NULL)
(71,data == NULL)
(72,i++)
(73,intTwo)
(74,i=0)
(75,i)
(76,data)
(77,i)
(78,i)
(79,exit(-1)
(80,i)
(81,)
(82,data[i])
(83,data[i])
(84,i)
(85,)
(86,data)
(87,i<10)
(88,sizeof(twoIntsStruct)
(89,i)
(90,data[i].intOne)
(91,printIntLine(data[i].intTwo)
(92,i)
(93,malloc(10*sizeof(twoIntsStruct)
(94,i)
(95,i<10)
(96,0)
(97,for(i=0; i<10; i++)
(98,if(globalReturnsTrueOrFalse()
(99,data)
(100,data)
(101,printIntLine(data[i].intOne)
(102,intOne)
(103,data[i].intOne)
(104,)
(105,i)
(106,printIntLine(data[i].intOne)
(107,-1)
(108,i=0)
(109,data[i])
(110,data[i].intTwo = i)
(111,data)
(112,0)
(113,i)
(114,intTwo)
(115,i=0)
(116,)
(117,i)
(118,for(i=0; i<10; i++)
(119,10)
(120,intTwo)
(121,i<10)
(122,data[i].intTwo)
(123,1)
(124,i)
(125,data[i].intOne = i)
(126,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^