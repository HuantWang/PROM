-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
49,50
49,51
50,51
50,52
53,54
54,55
54,56
55,56
56,57
56,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,48,51,52,57,59,64,65,68,69,72,77,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
50,51
50,52
62,63
62,64
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(40,37,0)
(5,21,0)
(43,29,0)
(6,44,0)
(36,24,0)
(7,43,0)
(12,16,0)
(6,37,0)
(19,6,0)
(22,40,0)
(12,32,0)
(10,18,0)
(37,30,0)
(17,16,0)
(24,8,0)
(44,6,0)
(24,39,0)
(0,18,0)
(44,2,0)
(11,18,0)
(21,5,0)
(31,30,0)
(27,30,0)
(20,43,0)
(39,24,0)
(26,6,0)
(6,18,0)
(8,24,0)
(8,5,0)
(16,12,0)
(34,40,0)
(33,13,0)
(38,23,0)
(42,23,0)
(4,37,0)
(41,39,0)
(5,37,0)
(5,8,0)
(1,10,0)
(35,11,0)
(9,13,0)
(25,18,0)
(3,30,0)
(28,10,0)
(14,30,0)
(37,5,0)
(36,4,1)
(10,28,1)
(1,18,1)
(6,18,1)
(34,37,1)
(28,1,1)
(15,10,1)
(16,17,1)
(25,0,1)
(33,23,1)
(40,37,1)
(17,40,1)
(18,25,1)
(1,11,1)
(19,26,1)
(11,35,1)
(41,36,1)
(13,9,1)
(35,44,1)
(37,5,1)
(6,37,1)
(11,18,1)
(44,6,1)
(23,38,1)
(10,18,1)
(40,22,1)
(6,19,1)
(22,34,1)
(15,13,1)
(38,42,1)
(42,40,1)
(5,21,1)
(42,12,1)
(24,39,1)
(26,10,1)
(12,16,1)
(9,33,1)
(0,13,1)
(8,24,1)
(5,8,1)
(39,41,1)
(24,39,2)
(1,13,2)
(11,18,2)
(6,37,2)
(6,10,2)
(17,40,2)
(12,16,2)
(19,10,2)
(12,40,2)
(5,21,2)
(8,24,2)
(25,13,2)
(0,13,2)
(35,10,2)
(6,18,2)
(44,10,2)
(28,10,2)
(10,13,2)
(18,13,2)
(28,13,2)
(44,6,2)
(37,5,2)
(1,10,2)
(16,40,2)
(10,10,2)
(40,37,2)
(26,10,2)
(11,10,2)
(5,8,2)
(10,18,2)
-----------------------------------
(0,i)
(1,i)
(2,)
(3,if (data == NULL)
(4,data)
(5,(int *)
(6,data[i])
(7,i)
(8,malloc(10*sizeof(int)
(9,5)
(10,i<10)
(11,i++)
(12,exit(-1)
(13,5==5)
(14,if(5==5)
(15,RET)
(16,-1)
(17,1)
(18,i=0)
(19,i)
(20,for(i=0; i<10; i++)
(21,int *)
(22,NULL)
(23,5==5)
(24,10*sizeof(int)
(25,0)
(26,data)
(27,data)
(28,10)
(29,)
(30,)
(31,if(5==5)
(32,)
(33,5)
(34,data)
(35,i)
(36,10)
(37,data = (int *)
(38,5)
(39,sizeof(int)
(40,data == NULL)
(41,int)
(42,5)
(43,)
(44,printIntLine(data[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^