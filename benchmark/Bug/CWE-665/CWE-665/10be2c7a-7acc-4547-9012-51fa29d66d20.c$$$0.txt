-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
203,204
203,205
205,206
206,207
206,208
207,208
208,209
208,210
210,211
210,212
213,214
213,215
213,216
214,215
214,216
215,216
217,218
217,219
218,219
220,221
222,223
222,224
222,225
222,226
222,227
223,224
224,225
224,226
225,226
227,228
227,229
228,229
228,230
230,231
232,233
232,234
233,234
235,236
235,237
236,237
238,239
239,240
239,241
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
253,254
255,256
256,257
256,258
256,259
257,258
259,260
261,262
263,264
264,265
264,266
265,266
267,268
269,270
270,271
270,272
271,272
273,274
275,276
276,277
277,278
277,279
278,279
-----nextToken-----
2,4,9,11,15,16,18,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,187,188,189,193,195,200,202,204,209,211,212,216,219,221,226,229,231,234,237,240,241,245,247,252,254,258,260,262,266,268,272,274,279,280
-----computeFrom-----
13,14
13,15
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
191,192
191,193
214,215
214,216
224,225
224,226
235,236
235,237
243,244
243,245
-----guardedBy-----
193,202
221,262
216,237
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(115,89,0)
(123,91,0)
(61,49,0)
(45,29,0)
(125,91,0)
(162,66,0)
(59,82,0)
(31,85,0)
(142,125,0)
(86,160,0)
(97,146,0)
(119,97,0)
(34,33,0)
(93,115,0)
(108,65,0)
(120,158,0)
(60,63,0)
(63,66,0)
(106,65,0)
(136,27,0)
(16,117,0)
(157,49,0)
(130,17,0)
(33,125,0)
(164,140,0)
(81,160,0)
(49,107,0)
(42,85,0)
(74,65,0)
(135,110,0)
(85,112,0)
(132,81,0)
(29,152,0)
(111,51,0)
(100,26,0)
(114,125,0)
(70,50,0)
(133,76,0)
(96,16,0)
(131,146,0)
(83,0,0)
(54,27,0)
(1,112,0)
(139,153,0)
(114,56,0)
(27,33,0)
(81,141,0)
(124,23,0)
(0,49,0)
(163,80,0)
(117,134,0)
(140,146,0)
(76,125,0)
(147,146,0)
(144,82,0)
(152,146,0)
(70,39,0)
(129,97,0)
(66,63,0)
(64,119,0)
(2,69,0)
(98,142,0)
(148,76,0)
(81,132,0)
(31,80,0)
(14,33,0)
(48,147,0)
(82,144,0)
(103,110,0)
(12,31,0)
(77,6,0)
(20,163,0)
(51,147,0)
(158,97,0)
(11,152,0)
(28,106,0)
(23,152,0)
(134,117,0)
(97,33,0)
(117,16,0)
(29,45,0)
(10,42,0)
(8,135,0)
(101,65,0)
(112,1,0)
(92,91,0)
(114,26,0)
(143,47,0)
(112,134,0)
(72,4,0)
(144,63,0)
(140,25,0)
(102,91,0)
(99,119,0)
(151,17,0)
(5,142,0)
(25,140,0)
(91,125,0)
(63,144,0)
(13,88,0)
(110,146,0)
(156,146,0)
(78,115,0)
(166,75,0)
(37,49,0)
(105,62,0)
(4,85,0)
(117,152,0)
(50,70,0)
(109,49,0)
(41,49,0)
(47,79,0)
(26,49,0)
(52,49,0)
(22,119,0)
(122,131,0)
(144,125,0)
(150,31,0)
(19,85,0)
(40,45,0)
(110,135,0)
(152,23,0)
(33,97,0)
(126,160,0)
(24,138,0)
(141,81,0)
(128,106,0)
(55,51,0)
(138,140,0)
(77,146,0)
(17,130,0)
(76,26,0)
(32,117,0)
(160,81,0)
(158,64,0)
(58,146,0)
(155,159,0)
(165,129,0)
(117,106,0)
(17,77,0)
(161,80,0)
(112,85,0)
(57,25,0)
(85,80,0)
(35,33,0)
(121,26,0)
(68,23,0)
(129,131,0)
(88,144,0)
(7,0,0)
(44,158,0)
(9,97,0)
(167,144,0)
(90,23,0)
(38,130,0)
(4,80,0)
(137,114,0)
(94,129,0)
(64,158,0)
(144,88,0)
(149,50,0)
(73,75,0)
(127,6,0)
(163,85,0)
(18,42,0)
(75,146,0)
(46,49,0)
(119,64,0)
(125,146,0)
(30,146,0)
(63,60,0)
(140,138,0)
(6,77,0)
(43,49,0)
(71,141,0)
(145,125,0)
(87,146,0)
(113,29,0)
(134,112,0)
(154,95,0)
(15,103,0)
(3,132,0)
(53,49,0)
(33,27,0)
(67,130,0)
(29,106,0)
(21,103,0)
(54,136,1)
(92,145,1)
(76,133,1)
(129,165,1)
(135,8,1)
(42,85,1)
(17,130,1)
(20,31,1)
(140,25,1)
(96,32,1)
(148,2,1)
(119,97,1)
(75,166,1)
(76,125,1)
(119,22,1)
(7,83,1)
(110,135,1)
(24,142,1)
(86,84,1)
(84,152,1)
(152,23,1)
(116,47,1)
(44,119,1)
(131,122,1)
(120,44,1)
(31,85,1)
(3,81,1)
(72,163,1)
(82,59,1)
(162,167,1)
(21,77,1)
(36,106,1)
(57,164,1)
(9,82,1)
(100,0,1)
(148,139,1)
(14,27,1)
(144,63,1)
(45,40,1)
(47,143,1)
(42,18,1)
(67,38,1)
(98,125,1)
(114,125,1)
(4,72,1)
(55,140,1)
(166,73,1)
(102,123,1)
(82,144,1)
(17,151,1)
(150,42,1)
(88,13,1)
(130,67,1)
(155,104,1)
(33,125,1)
(22,99,1)
(132,81,1)
(2,142,1)
(136,34,1)
(163,20,1)
(124,68,1)
(5,98,1)
(129,97,1)
(23,90,1)
(158,120,1)
(147,48,1)
(63,60,1)
(167,110,1)
(142,125,1)
(0,7,1)
(19,29,1)
(35,9,1)
(28,128,1)
(81,160,1)
(104,76,1)
(114,26,1)
(123,92,1)
(33,14,1)
(118,36,1)
(148,84,1)
(99,97,1)
(111,55,1)
(143,29,1)
(26,121,1)
(122,129,1)
(34,35,1)
(70,50,1)
(32,19,1)
(113,118,1)
(68,11,1)
(151,130,1)
(73,132,1)
(165,94,1)
(150,70,1)
(137,76,1)
(8,103,1)
(63,66,1)
(48,51,1)
(138,24,1)
(105,132,1)
(4,85,1)
(139,64,1)
(134,117,1)
(112,1,1)
(38,147,1)
(97,33,1)
(141,71,1)
(103,15,1)
(59,144,1)
(12,150,1)
(121,100,1)
(106,28,1)
(50,149,1)
(64,119,1)
(31,12,1)
(13,63,1)
(117,152,1)
(163,85,1)
(16,96,1)
(18,10,1)
(132,3,1)
(117,106,1)
(160,126,1)
(29,152,1)
(144,125,1)
(149,42,1)
(114,137,1)
(148,105,1)
(140,138,1)
(66,162,1)
(64,158,1)
(91,102,1)
(6,127,1)
(83,36,1)
(142,5,1)
(158,97,1)
(81,141,1)
(40,113,1)
(29,106,1)
(118,155,1)
(127,17,1)
(154,82,1)
(85,112,1)
(11,131,1)
(90,124,1)
(104,114,1)
(33,27,1)
(116,4,1)
(145,75,1)
(125,91,1)
(94,64,1)
(118,104,1)
(112,134,1)
(15,21,1)
(10,85,1)
(126,86,1)
(148,154,1)
(133,148,1)
(86,26,1)
(77,6,1)
(51,111,1)
(29,45,1)
(116,118,1)
(117,16,1)
(164,138,1)
(76,26,1)
(25,57,1)
(144,88,1)
(27,54,1)
(71,160,1)
(140,142,2)
(126,36,2)
(92,132,2)
(158,97,2)
(29,118,2)
(9,82,2)
(26,36,2)
(119,82,2)
(163,29,2)
(155,104,2)
(34,82,2)
(31,29,2)
(68,64,2)
(132,81,2)
(147,142,2)
(120,119,2)
(135,142,2)
(3,84,2)
(125,91,2)
(20,29,2)
(117,29,2)
(75,132,2)
(97,82,2)
(81,141,2)
(76,36,2)
(55,142,2)
(144,63,2)
(13,142,2)
(70,42,2)
(45,118,2)
(121,36,2)
(73,132,2)
(154,82,2)
(4,29,2)
(164,142,2)
(132,36,2)
(25,142,2)
(15,142,2)
(96,29,2)
(167,142,2)
(160,84,2)
(85,29,2)
(59,142,2)
(19,29,2)
(24,142,2)
(166,132,2)
(122,64,2)
(83,36,2)
(32,29,2)
(132,84,2)
(5,132,2)
(97,33,2)
(158,119,2)
(4,85,2)
(151,142,2)
(2,142,2)
(134,29,2)
(17,142,2)
(150,29,2)
(98,132,2)
(48,142,2)
(50,42,2)
(160,36,2)
(6,142,2)
(114,125,2)
(54,82,2)
(63,142,2)
(0,36,2)
(145,132,2)
(82,142,2)
(31,85,2)
(11,64,2)
(140,138,2)
(23,64,2)
(82,144,2)
(114,26,2)
(165,64,2)
(35,82,2)
(129,97,2)
(33,82,2)
(125,132,2)
(67,142,2)
(14,82,2)
(140,25,2)
(112,29,2)
(33,27,2)
(70,50,2)
(22,82,2)
(100,36,2)
(38,142,2)
(81,36,2)
(88,142,2)
(21,142,2)
(131,64,2)
(86,84,2)
(63,66,2)
(57,142,2)
(18,29,2)
(143,29,2)
(40,118,2)
(142,132,2)
(16,29,2)
(76,26,2)
(33,125,2)
(144,142,2)
(99,82,2)
(64,119,2)
(12,29,2)
(51,142,2)
(103,142,2)
(111,142,2)
(117,16,2)
(64,158,2)
(134,117,2)
(149,42,2)
(162,142,2)
(114,76,2)
(137,76,2)
(42,85,2)
(81,84,2)
(141,84,2)
(81,160,2)
(44,119,2)
(94,64,2)
(124,64,2)
(119,97,2)
(10,29,2)
(85,112,2)
(141,36,2)
(133,36,2)
(129,64,2)
(86,36,2)
(152,64,2)
(71,36,2)
(29,106,2)
(8,142,2)
(76,125,2)
(112,134,2)
(127,142,2)
(71,84,2)
(112,1,2)
(152,23,2)
(63,60,2)
(130,142,2)
(144,88,2)
(110,135,2)
(29,152,2)
(139,64,2)
(105,132,2)
(3,36,2)
(72,29,2)
(144,125,2)
(110,142,2)
(102,132,2)
(27,82,2)
(90,64,2)
(47,29,2)
(126,84,2)
(77,6,2)
(17,130,2)
(77,142,2)
(117,152,2)
(66,142,2)
(117,106,2)
(91,132,2)
(113,118,2)
(138,142,2)
(163,85,2)
(104,36,2)
(29,45,2)
(42,29,2)
(7,36,2)
(123,132,2)
(148,36,2)
(84,64,2)
(64,82,2)
(142,125,2)
(136,82,2)
-----------------------------------
(0,wsaDataInit = 0)
(1,char *)
(2,break;)
(3,NO_ERROR)
(4,free(myString)
(5,INVALID_SOCKET)
(6,inet_addr(IP_ADDRESS)
(7,0)
(8,TCP_PORT)
(9,recvResult)
(10,myString)
(11,data)
(12,HELLO_STRING)
(13,service)
(14,0)
(15,sin_port)
(16,sizeof(char)
(17,service.sin_addr.s_addr)
(18,NULL)
(19,myString)
(20,myString)
(21,service)
(22,SOCKET_ERROR)
(23,strtoul(inputBuffer, NULL, 0)
(24,service)
(25,sizeof(service)
(26,connectSocket = INVALID_SOCKET)
(27,CHAR_ARRAY_SIZE - 1)
(28,0)
(29,data > strlen(HELLO_STRING)
(30,if (connectSocket == INVALID_SOCKET)
(31,strcpy(myString, HELLO_STRING)
(32,data)
(33,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(34,inputBuffer)
(35,connectSocket)
(36,1)
(37,if (connectSocket != INVALID_SOCKET)
(38,service)
(39,)
(40,HELLO_STRING)
(41,do)
(42,myString == NULL)
(43,if (wsaDataInit)
(44,recvResult)
(45,strlen(HELLO_STRING)
(46,recvResult)
(47,printLine("Input is less than the length of the source string")
(48,AF_INET)
(49,)
(50,-1)
(51,service.sin_family)
(52,service)
(53,wsaData)
(54,1)
(55,service)
(56,)
(57,service)
(58,if (WSAStartup(MAKEWORD(2,2)
(59,SOCKET_ERROR)
(60,struct sockaddr*)
(61,wsaDataInit)
(62,)
(63,(struct sockaddr*)
(64,recvResult == SOCKET_ERROR || recvResult == 0)
(65,)
(66,&service)
(67,sin_addr)
(68,inputBuffer)
(69,)
(70,exit(-1)
(71,wsaData)
(72,myString)
(73,wsaDataInit)
(74,if(1)
(75,wsaDataInit = 1)
(76,connectSocket != INVALID_SOCKET)
(77,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(78,if (data > strlen(HELLO_STRING)
(79,)
(80,)
(81,WSAStartup(MAKEWORD(2,2)
(82,connect(connectSocket, (struct sockaddr*)
(83,wsaDataInit)
(84,0)
(85,myString = (char *)
(86,2)
(87,if (recvResult == SOCKET_ERROR || recvResult == 0)
(88,sizeof(service)
(89,)
(90,0)
(91,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(92,AF_INET)
(93,myString)
(94,inputBuffer)
(95,)
(96,char)
(97,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(98,connectSocket)
(99,recvResult)
(100,connectSocket)
(101,if(1)
(102,IPPROTO_TCP)
(103,service.sin_port)
(104,wsaDataInit)
(105,break;)
(106,data = 0)
(107,)
(108,data)
(109,inputBuffer)
(110,service.sin_port = htons(TCP_PORT)
(111,sin_family)
(112,(char *)
(113,data)
(114,CLOSE_SOCKET(connectSocket)
(115,)
(116,RET)
(117,data*sizeof(char)
(118,1)
(119,recvResult == SOCKET_ERROR)
(120,0)
(121,INVALID_SOCKET)
(122,\'\\0\')
(123,SOCK_STREAM)
(124,NULL)
(125,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(126,2)
(127,IP_ADDRESS)
(128,data)
(129,inputBuffer[recvResult])
(130,service.sin_addr)
(131,inputBuffer[recvResult] = \'\\0\')
(132,WSAStartup(MAKEWORD(2,2)
(133,INVALID_SOCKET)
(134,malloc(data*sizeof(char)
(135,htons(TCP_PORT)
(136,CHAR_ARRAY_SIZE)
(137,connectSocket)
(138,&service)
(139,break;)
(140,memset(&service, 0, sizeof(service)
(141,&wsaData)
(142,connectSocket == INVALID_SOCKET)
(143,"Input is less than the length of the source string")
(144,connect(connectSocket, (struct sockaddr*)
(145,connectSocket)
(146,)
(147,service.sin_family = AF_INET)
(148,connectSocket)
(149,1)
(150,myString)
(151,s_addr)
(152,data = strtoul(inputBuffer, NULL, 0)
(153,)
(154,break;)
(155,WSACleanup()
(156,if (connect(connectSocket, (struct sockaddr*)
(157,connectSocket)
(158,recvResult == 0)
(159,)
(160,MAKEWORD(2,2)
(161,if (myString == NULL)
(162,service)
(163,printLine(myString)
(164,0)
(165,recvResult)
(166,1)
(167,connectSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^