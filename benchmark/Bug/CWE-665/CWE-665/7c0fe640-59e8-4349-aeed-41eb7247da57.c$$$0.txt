-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_15_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Use data without initializing it */
    {
        int i;
        for(i=0; i<10; i++)
        {
            printIntLine(data[i].intOne);
            printIntLine(data[i].intTwo);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
29,32
29,33
29,34
29,35
30,31
35,36
36,37
36,38
37,38
41,42
41,43
43,44
43,45
43,46
43,47
43,48
43,49
44,45
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
62,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,31,32,33,34,38,39,40,42,45,49,51,56,57,60,61,64,69,73,75,76,80,84,86,87,88,89,93,94,95
-----computeFrom-----
22,23
22,24
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_15_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_15_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_no_init_15_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
switch(6)    {    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Use data without initializing it */    {        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }    }
int i;
int i;
int
i
i
for(i=0; i<10; i++)        {            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{            printIntLine(data[i].intOne);            printIntLine(data[i].intTwo);        }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(47,43,0)
(32,28,0)
(8,3,0)
(3,34,0)
(15,47,0)
(1,29,0)
(17,10,0)
(22,18,0)
(5,39,0)
(40,39,0)
(8,28,0)
(44,24,0)
(7,39,0)
(25,11,0)
(24,23,0)
(4,11,0)
(2,11,0)
(28,43,0)
(16,23,0)
(35,10,0)
(3,8,0)
(12,18,0)
(20,34,0)
(20,23,0)
(9,13,0)
(28,10,0)
(24,10,0)
(6,39,0)
(21,25,0)
(24,43,0)
(18,43,0)
(38,13,0)
(10,39,0)
(14,29,0)
(0,13,0)
(41,43,0)
(28,8,0)
(42,43,0)
(45,8,0)
(27,11,0)
(48,28,0)
(33,13,0)
(23,24,0)
(31,13,0)
(19,11,0)
(23,20,0)
(30,9,0)
(29,13,0)
(46,24,0)
(12,43,1)
(45,28,1)
(38,9,1)
(26,4,1)
(30,26,1)
(44,18,1)
(2,36,1)
(32,20,1)
(4,25,1)
(43,41,1)
(8,28,1)
(24,46,1)
(16,24,1)
(3,8,1)
(9,30,1)
(10,17,1)
(47,15,1)
(24,43,1)
(0,18,1)
(41,42,1)
(18,43,1)
(18,22,1)
(24,10,1)
(17,35,1)
(48,32,1)
(28,48,1)
(23,16,1)
(8,45,1)
(42,26,1)
(21,36,1)
(22,12,1)
(37,38,1)
(25,21,1)
(28,43,1)
(23,24,1)
(47,43,1)
(28,10,1)
(37,0,1)
(36,10,1)
(15,3,1)
(12,47,1)
(26,2,1)
(46,44,1)
(20,23,1)
(16,18,2)
(25,36,2)
(12,26,2)
(21,36,2)
(47,43,2)
(28,18,2)
(47,18,2)
(41,26,2)
(18,18,2)
(48,18,2)
(12,18,2)
(18,26,2)
(20,18,2)
(18,43,2)
(4,36,2)
(2,36,2)
(22,26,2)
(8,28,2)
(24,10,2)
(23,24,2)
(3,18,2)
(42,26,2)
(45,18,2)
(8,18,2)
(0,26,2)
(32,18,2)
(24,18,2)
(23,18,2)
(3,8,2)
(28,43,2)
(15,18,2)
(43,26,2)
(28,10,2)
(9,26,2)
(24,43,2)
(22,18,2)
(44,18,2)
(38,26,2)
(20,23,2)
(30,26,2)
(46,18,2)
-----------------------------------
(0,break;)
(1,i)
(2,break;)
(3,printIntLine(data[i].intTwo)
(4,break;)
(5,data)
(6,switch(7)
(7,switch(6)
(8,data[i].intTwo)
(9,printLine("Benign, fixed string")
(10,data = dataUninitArray)
(11,)
(12,i)
(13,)
(14,for(i=0; i<10; i++)
(15,i)
(16,intOne)
(17,dataUninitArray)
(18,i<10)
(19,case 6:)
(20,printIntLine(data[i].intOne)
(21,"Benign, fixed string")
(22,10)
(23,data[i].intOne)
(24,data[i])
(25,printLine("Benign, fixed string")
(26,7)
(27,default:)
(28,data[i])
(29,)
(30,"Benign, fixed string")
(31,case 7:)
(32,data)
(33,default:)
(34,)
(35,data)
(36,6)
(37,RET)
(38,break;)
(39,)
(40,dataUninitArray)
(41,0)
(42,i)
(43,i=0)
(44,data)
(45,intTwo)
(46,i)
(47,i++)
(48,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^