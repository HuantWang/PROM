-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_09_bad()
{
    int * data;
    data = (int *)ALLOCA(10*sizeof(int));
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
49,50
50,51
50,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
59,61
60,61
62,63
64,65
66,67
66,68
67,68
69,70
70,71
70,72
71,72
72,73
72,74
74,75
76,77
76,78
76,79
76,80
77,78
78,79
78,80
79,80
82,83
82,84
83,84
86,87
87,88
89,90
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,37,39,44,45,48,51,52,55,61,63,65,68,73,75,80,81,84,85,88,93,96,98
-----computeFrom-----
13,14
13,15
24,25
24,26
42,43
42,44
46,47
46,48
50,51
50,52
58,59
58,60
78,79
78,80
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_09_bad(){    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_09_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_alloca_partial_init_09_bad
{    int * data;    data = (int *)ALLOCA(10*sizeof(int));    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)ALLOCA(10*sizeof(int));
data = (int *)ALLOCA(10*sizeof(int))
data
data
(int *)ALLOCA(10*sizeof(int))
int *
int
*
*
ALLOCA(10*sizeof(int))
ALLOCA
ALLOCA
10*sizeof(int)
10
sizeof(int)
int
int

if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(5,38,0)
(42,50,0)
(9,39,0)
(26,45,0)
(19,26,0)
(34,51,0)
(0,52,0)
(36,17,0)
(39,28,0)
(20,38,0)
(39,13,0)
(47,14,0)
(29,11,0)
(1,36,0)
(28,15,0)
(50,52,0)
(43,13,0)
(9,12,0)
(3,25,0)
(50,39,0)
(16,52,0)
(38,0,0)
(50,12,0)
(28,39,0)
(44,6,0)
(37,9,0)
(28,33,0)
(46,52,0)
(23,14,0)
(30,12,0)
(6,11,0)
(51,14,0)
(9,14,0)
(11,6,0)
(22,39,0)
(33,28,0)
(7,13,0)
(12,52,0)
(48,0,0)
(9,21,0)
(27,50,0)
(21,32,0)
(4,26,0)
(6,15,0)
(15,6,0)
(25,14,0)
(10,16,0)
(21,9,0)
(2,25,0)
(12,35,0)
(41,13,0)
(24,52,0)
(31,36,0)
(15,28,0)
(40,9,0)
(0,38,0)
(8,25,1)
(0,52,1)
(9,37,1)
(49,39,1)
(16,52,1)
(25,2,1)
(14,47,1)
(3,14,1)
(51,34,1)
(48,16,1)
(18,0,1)
(6,11,1)
(34,21,1)
(50,27,1)
(3,51,1)
(10,12,1)
(8,18,1)
(30,50,1)
(21,9,1)
(51,14,1)
(9,39,1)
(46,24,1)
(24,49,1)
(37,40,1)
(9,14,1)
(47,23,1)
(42,0,1)
(2,3,1)
(38,20,1)
(44,22,1)
(28,15,1)
(12,52,1)
(9,12,1)
(11,29,1)
(40,25,1)
(12,30,1)
(39,28,1)
(50,39,1)
(28,33,1)
(50,52,1)
(25,14,1)
(20,5,1)
(15,6,1)
(48,52,1)
(0,38,1)
(23,18,1)
(18,49,1)
(5,48,1)
(16,10,1)
(27,42,1)
(29,44,1)
(52,46,1)
(23,18,2)
(42,0,2)
(25,25,2)
(50,0,2)
(37,25,2)
(16,0,2)
(21,9,2)
(38,0,2)
(9,39,2)
(28,33,2)
(51,14,2)
(15,6,2)
(21,25,2)
(48,0,2)
(5,49,2)
(25,14,2)
(3,25,2)
(0,52,2)
(25,18,2)
(50,52,2)
(2,25,2)
(40,25,2)
(48,49,2)
(28,15,2)
(2,18,2)
(10,0,2)
(9,25,2)
(51,25,2)
(0,49,2)
(24,49,2)
(9,14,2)
(27,0,2)
(47,18,2)
(0,0,2)
(52,49,2)
(16,52,2)
(38,49,2)
(5,0,2)
(12,52,2)
(20,0,2)
(46,49,2)
(3,18,2)
(34,25,2)
(14,18,2)
(9,12,2)
(50,39,2)
(0,38,2)
(30,0,2)
(12,0,2)
(6,11,2)
(39,28,2)
(20,49,2)
-----------------------------------
(0,i<(10/2)
(1,for(i=0; i<(10/2)
(2,10)
(3,i)
(4,for(i=0; i<10; i++)
(5,10)
(6,10*sizeof(int)
(7,data)
(8,RET)
(9,data[i])
(10,i)
(11,sizeof(int)
(12,data[i] = i)
(13,)
(14,i=0)
(15,ALLOCA(10*sizeof(int)
(16,i++)
(17,)
(18,GLOBAL_CONST_TRUE)
(19,i)
(20,2)
(21,printIntLine(data[i])
(22,data)
(23,i)
(24,i)
(25,i<10)
(26,)
(27,i)
(28,(int *)
(29,int)
(30,i)
(31,i)
(32,)
(33,int *)
(34,i)
(35,)
(36,)
(37,i)
(38,10/2)
(39,data = (int *)
(40,data)
(41,if(GLOBAL_CONST_TRUE)
(42,data)
(43,if(GLOBAL_CONST_TRUE)
(44,10)
(45,)
(46,0)
(47,0)
(48,i)
(49,GLOBAL_CONST_TRUE)
(50,data[i])
(51,i++)
(52,i=0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^