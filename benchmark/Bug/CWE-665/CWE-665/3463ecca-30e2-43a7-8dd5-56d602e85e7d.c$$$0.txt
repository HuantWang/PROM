-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
60,74
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
185,190
186,187
188,189
190,191
192,193
192,194
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
218,219
219,220
219,221
220,221
222,223
222,224
222,225
222,226
223,224
225,226
227,228
231,232
231,233
232,233
232,234
233,234
235,236
237,238
238,239
239,240
239,241
240,241
242,243
244,245
244,246
245,246
245,247
246,247
248,249
250,251
251,252
252,253
252,254
253,254
255,256
257,258
257,259
258,259
260,261
261,262
261,263
262,263
263,264
263,265
265,266
265,267
268,269
268,270
268,271
269,270
269,271
270,271
272,273
272,274
273,274
275,276
277,278
277,279
277,280
277,281
277,282
278,279
279,280
279,281
280,281
282,283
282,284
283,284
283,285
285,286
287,288
287,289
288,289
290,291
290,292
291,292
293,294
294,295
294,296
297,298
297,299
298,299
298,300
299,300
301,302
303,304
304,305
305,306
305,307
306,307
308,309
310,311
311,312
311,313
311,314
312,313
314,315
316,317
318,319
319,320
319,321
320,321
322,323
324,325
325,326
325,327
326,327
328,329
330,331
331,332
332,333
332,334
333,334
-----nextToken-----
2,4,9,11,15,16,19,24,26,30,32,36,38,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,111,116,117,120,122,127,129,133,135,138,142,144,146,151,153,155,157,159,163,166,168,170,172,176,178,180,184,187,189,191,194,195,196,201,203,206,207,209,214,216,217,221,224,226,228,229,230,234,236,241,243,247,249,254,256,259,264,266,267,271,274,276,281,284,286,289,292,295,296,300,302,307,309,313,315,317,321,323,327,329,334,335
-----computeFrom-----
13,14
13,15
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
113,114
113,115
124,125
124,126
148,149
148,150
161,162
161,163
174,175
174,176
182,183
182,184
192,193
192,194
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
219,220
219,221
232,233
232,234
245,246
245,247
269,270
269,271
279,280
279,281
290,291
290,292
298,299
298,300
-----guardedBy-----
234,243
247,256
276,317
271,292
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(147,110,0)
(107,66,0)
(40,157,0)
(197,101,0)
(81,175,0)
(53,17,0)
(177,113,0)
(19,70,0)
(72,21,0)
(121,8,0)
(89,43,0)
(5,41,0)
(95,36,0)
(116,151,0)
(182,84,0)
(79,55,0)
(131,36,0)
(120,58,0)
(191,117,0)
(180,110,0)
(6,130,0)
(166,47,0)
(51,76,0)
(47,97,0)
(150,96,0)
(152,112,0)
(39,129,0)
(26,31,0)
(78,42,0)
(4,113,0)
(194,53,0)
(55,100,0)
(67,129,0)
(155,98,0)
(144,34,0)
(130,36,0)
(117,41,0)
(143,183,0)
(28,41,0)
(135,68,0)
(17,180,0)
(72,97,0)
(75,55,0)
(2,21,0)
(110,147,0)
(130,177,0)
(88,104,0)
(115,66,0)
(84,182,0)
(30,44,0)
(113,36,0)
(133,97,0)
(138,134,0)
(94,96,0)
(157,174,0)
(57,98,0)
(97,98,0)
(112,149,0)
(37,85,0)
(7,135,0)
(55,75,0)
(154,196,0)
(164,115,0)
(122,135,0)
(196,34,0)
(184,91,0)
(54,47,0)
(25,100,0)
(112,113,0)
(141,146,0)
(56,95,0)
(64,36,0)
(50,58,0)
(140,15,0)
(139,70,0)
(188,176,0)
(3,135,0)
(185,136,0)
(15,36,0)
(15,76,0)
(145,67,0)
(34,36,0)
(60,93,0)
(134,138,0)
(20,170,0)
(114,72,0)
(159,45,0)
(126,56,0)
(115,127,0)
(9,36,0)
(33,134,0)
(44,30,0)
(125,177,0)
(168,192,0)
(158,149,0)
(70,177,0)
(80,174,0)
(71,69,0)
(195,95,0)
(193,84,0)
(183,147,0)
(134,130,0)
(13,98,0)
(66,107,0)
(190,42,0)
(23,14,0)
(43,149,0)
(42,29,0)
(127,115,0)
(12,21,0)
(147,174,0)
(91,184,0)
(77,21,0)
(31,117,0)
(186,127,0)
(177,70,0)
(132,36,0)
(119,6,0)
(85,184,0)
(59,11,0)
(110,108,0)
(178,175,0)
(187,32,0)
(34,8,0)
(129,67,0)
(16,102,0)
(66,97,0)
(77,1,0)
(73,107,0)
(74,75,0)
(180,17,0)
(189,66,0)
(117,31,0)
(66,115,0)
(129,36,0)
(45,101,0)
(128,36,0)
(173,45,0)
(22,135,0)
(46,43,0)
(109,161,0)
(52,84,0)
(86,177,0)
(17,41,0)
(100,36,0)
(110,180,0)
(11,36,0)
(124,135,0)
(83,135,0)
(98,97,0)
(181,36,0)
(66,136,0)
(115,164,0)
(32,113,0)
(97,36,0)
(8,34,0)
(156,6,0)
(84,97,0)
(82,182,0)
(183,174,0)
(56,130,0)
(103,93,0)
(47,113,0)
(192,165,0)
(184,85,0)
(172,39,0)
(167,17,0)
(106,77,0)
(87,183,0)
(171,76,0)
(65,14,0)
(63,76,0)
(142,135,0)
(123,175,0)
(27,11,0)
(117,15,0)
(170,147,0)
(41,175,0)
(93,97,0)
(58,135,0)
(96,184,0)
(112,90,0)
(38,147,0)
(43,113,0)
(179,135,0)
(99,135,0)
(35,39,0)
(44,62,0)
(169,135,0)
(49,56,0)
(113,47,0)
(111,130,0)
(48,135,0)
(148,47,0)
(24,30,0)
(6,138,0)
(76,15,0)
(138,6,0)
(21,135,0)
(105,149,0)
(0,177,0)
(137,134,0)
(149,135,0)
(170,174,0)
(108,110,0)
(118,32,0)
(136,66,0)
(10,72,0)
(77,97,0)
(17,53,0)
(17,15,0)
(34,196,0)
(184,96,0)
(162,91,0)
(101,36,0)
(14,147,0)
(61,75,0)
(177,130,0)
(157,147,0)
(47,97,1)
(57,155,1)
(77,106,1)
(143,14,1)
(61,74,1)
(112,149,1)
(17,15,1)
(16,182,1)
(70,139,1)
(19,0,1)
(195,56,1)
(177,70,1)
(194,167,1)
(56,130,1)
(107,73,1)
(136,185,1)
(66,107,1)
(91,162,1)
(6,130,1)
(112,113,1)
(160,153,1)
(18,192,1)
(44,30,1)
(129,67,1)
(118,113,1)
(98,13,1)
(136,66,1)
(115,127,1)
(26,191,1)
(188,32,1)
(84,193,1)
(18,160,1)
(50,120,1)
(89,72,1)
(196,154,1)
(186,189,1)
(133,11,1)
(153,41,1)
(75,61,1)
(173,159,1)
(167,38,1)
(63,171,1)
(0,125,1)
(103,60,1)
(93,103,1)
(147,110,1)
(172,35,1)
(18,157,1)
(27,85,1)
(182,84,1)
(162,96,1)
(111,32,1)
(127,186,1)
(72,97,1)
(140,95,1)
(54,148,1)
(77,21,1)
(160,163,1)
(130,177,1)
(49,138,1)
(114,141,1)
(157,147,1)
(46,89,1)
(43,46,1)
(97,98,1)
(114,188,1)
(13,57,1)
(121,144,1)
(84,97,1)
(114,109,1)
(158,21,1)
(43,113,1)
(114,92,1)
(34,8,1)
(2,12,1)
(152,43,1)
(5,28,1)
(94,150,1)
(59,27,1)
(32,113,1)
(192,168,1)
(37,184,1)
(170,20,1)
(114,16,1)
(93,97,1)
(17,53,1)
(171,140,1)
(65,147,1)
(73,115,1)
(183,147,1)
(189,129,1)
(149,105,1)
(117,41,1)
(10,114,1)
(150,92,1)
(35,100,1)
(74,101,1)
(157,40,1)
(109,136,1)
(82,84,1)
(25,55,1)
(53,194,1)
(66,97,1)
(184,91,1)
(14,147,1)
(56,126,1)
(45,173,1)
(184,96,1)
(170,147,1)
(166,4,1)
(76,51,1)
(72,10,1)
(145,39,1)
(66,115,1)
(60,97,1)
(101,197,1)
(43,149,1)
(193,52,1)
(33,6,1)
(191,160,1)
(86,70,1)
(163,43,1)
(34,196,1)
(55,79,1)
(120,153,1)
(38,117,1)
(85,184,1)
(85,37,1)
(106,72,1)
(30,24,1)
(47,54,1)
(117,31,1)
(134,130,1)
(116,163,1)
(72,21,1)
(20,183,1)
(177,86,1)
(126,49,1)
(159,34,1)
(14,23,1)
(117,15,1)
(119,156,1)
(115,164,1)
(187,118,1)
(150,149,1)
(21,2,1)
(163,112,1)
(87,143,1)
(138,6,1)
(88,93,1)
(40,170,1)
(8,121,1)
(112,152,1)
(144,196,1)
(177,113,1)
(180,17,1)
(41,5,1)
(12,58,1)
(138,134,1)
(134,137,1)
(125,111,1)
(55,75,1)
(24,14,1)
(139,19,1)
(23,65,1)
(143,44,1)
(137,33,1)
(197,45,1)
(183,87,1)
(58,50,1)
(155,133,1)
(96,94,1)
(39,172,1)
(71,85,1)
(4,182,1)
(105,158,1)
(160,116,1)
(32,187,1)
(148,166,1)
(95,195,1)
(89,77,1)
(52,136,1)
(67,145,1)
(77,97,1)
(79,75,1)
(114,88,1)
(156,130,1)
(141,138,1)
(185,66,1)
(110,180,1)
(17,41,1)
(100,25,1)
(11,59,1)
(51,63,1)
(92,15,1)
(6,119,1)
(15,76,1)
(168,117,1)
(110,108,1)
(31,26,1)
(154,93,1)
(114,71,1)
(182,82,1)
(113,47,1)
(91,153,2)
(46,153,2)
(15,76,2)
(119,32,2)
(148,182,2)
(134,130,2)
(84,136,2)
(77,97,2)
(2,153,2)
(117,15,2)
(67,93,2)
(92,138,2)
(97,85,2)
(112,149,2)
(27,85,2)
(34,93,2)
(13,85,2)
(11,85,2)
(66,97,2)
(196,93,2)
(188,32,2)
(66,93,2)
(37,92,2)
(184,91,2)
(40,117,2)
(72,97,2)
(192,117,2)
(17,41,2)
(107,93,2)
(17,53,2)
(54,182,2)
(55,75,2)
(32,182,2)
(189,93,2)
(177,70,2)
(38,117,2)
(43,149,2)
(127,93,2)
(112,43,2)
(138,6,2)
(105,153,2)
(168,117,2)
(6,32,2)
(17,15,2)
(111,32,2)
(109,136,2)
(59,85,2)
(45,93,2)
(166,182,2)
(74,93,2)
(57,85,2)
(112,113,2)
(56,138,2)
(85,92,2)
(103,85,2)
(140,138,2)
(17,117,2)
(97,98,2)
(26,160,2)
(197,93,2)
(14,147,2)
(15,138,2)
(114,153,2)
(91,92,2)
(43,153,2)
(129,93,2)
(52,136,2)
(125,32,2)
(118,182,2)
(66,107,2)
(76,138,2)
(33,6,2)
(55,93,2)
(133,85,2)
(94,153,2)
(184,153,2)
(89,153,2)
(96,92,2)
(12,153,2)
(115,164,2)
(180,17,2)
(37,153,2)
(75,93,2)
(177,32,2)
(35,93,2)
(138,32,2)
(84,97,2)
(87,117,2)
(85,184,2)
(136,93,2)
(147,117,2)
(141,138,2)
(0,32,2)
(34,8,2)
(70,32,2)
(126,138,2)
(163,153,2)
(47,182,2)
(191,160,2)
(51,138,2)
(43,113,2)
(150,92,2)
(121,93,2)
(82,136,2)
(115,93,2)
(170,117,2)
(155,85,2)
(23,117,2)
(85,153,2)
(31,160,2)
(66,115,2)
(20,117,2)
(49,138,2)
(172,93,2)
(150,153,2)
(44,14,2)
(170,147,2)
(30,14,2)
(156,32,2)
(14,117,2)
(157,117,2)
(21,153,2)
(182,136,2)
(171,138,2)
(193,136,2)
(159,93,2)
(145,93,2)
(162,92,2)
(10,153,2)
(194,117,2)
(152,43,2)
(167,117,2)
(6,130,2)
(130,32,2)
(184,96,2)
(195,138,2)
(32,113,2)
(177,113,2)
(137,6,2)
(149,153,2)
(34,196,2)
(183,117,2)
(158,153,2)
(138,134,2)
(186,93,2)
(110,180,2)
(53,117,2)
(96,153,2)
(110,108,2)
(100,93,2)
(185,93,2)
(47,97,2)
(143,117,2)
(106,72,2)
(25,93,2)
(63,138,2)
(93,85,2)
(182,84,2)
(44,30,2)
(101,93,2)
(71,85,2)
(58,153,2)
(113,182,2)
(8,93,2)
(95,138,2)
(72,153,2)
(50,153,2)
(144,93,2)
(4,182,2)
(162,153,2)
(116,163,2)
(147,110,2)
(173,93,2)
(77,21,2)
(183,147,2)
(73,93,2)
(65,117,2)
(113,47,2)
(93,97,2)
(130,177,2)
(129,67,2)
(117,31,2)
(94,92,2)
(136,66,2)
(117,41,2)
(24,14,2)
(154,93,2)
(117,160,2)
(79,93,2)
(88,93,2)
(187,182,2)
(56,130,2)
(115,127,2)
(86,32,2)
(60,85,2)
(180,117,2)
(98,85,2)
(110,117,2)
(120,153,2)
(19,32,2)
(77,72,2)
(157,147,2)
(16,182,2)
(39,93,2)
(184,92,2)
(72,21,2)
(61,93,2)
(134,6,2)
(139,32,2)
-----------------------------------
(0,inputBuffer)
(1,)
(2,INVALID_SOCKET)
(3,recvResult)
(4,acceptSocket)
(5,0)
(6,recvResult == SOCKET_ERROR)
(7,if (wsaDataInit)
(8,sizeof(service)
(9,if (acceptSocket == SOCKET_ERROR)
(10,INVALID_SOCKET)
(11,wsaDataInit = 1)
(12,listenSocket)
(13,IPPROTO_TCP)
(14,myString == NULL)
(15,data = strtoul(inputBuffer, NULL, 0)
(16,break;)
(17,data*sizeof(char)
(18,RET)
(19,CHAR_ARRAY_SIZE)
(20,myString)
(21,listenSocket = INVALID_SOCKET)
(22,listenSocket)
(23,NULL)
(24,1)
(25,INADDR_ANY)
(26,HELLO_STRING)
(27,wsaDataInit)
(28,data)
(29,)
(30,-1)
(31,strlen(HELLO_STRING)
(32,acceptSocket == SOCKET_ERROR)
(33,recvResult)
(34,memset(&service, 0, sizeof(service)
(35,service)
(36,)
(37,NO_ERROR)
(38,myString)
(39,service.sin_port)
(40,myString)
(41,data = 0)
(42,)
(43,acceptSocket != INVALID_SOCKET)
(44,exit(-1)
(45,service.sin_family)
(46,INVALID_SOCKET)
(47,accept(listenSocket, NULL, NULL)
(48,service)
(49,inputBuffer)
(50,0)
(51,0)
(52,listenSocket)
(53,sizeof(char)
(54,NULL)
(55,service.sin_addr.s_addr)
(56,inputBuffer[recvResult])
(57,SOCK_STREAM)
(58,wsaDataInit = 0)
(59,1)
(60,listenSocket)
(61,sin_addr)
(62,)
(63,NULL)
(64,if (bind(listenSocket, (struct sockaddr*)
(65,myString)
(66,bind(listenSocket, (struct sockaddr*)
(67,htons(TCP_PORT)
(68,)
(69,)
(70,CHAR_ARRAY_SIZE - 1)
(71,break;)
(72,listenSocket != INVALID_SOCKET)
(73,service)
(74,service)
(75,service.sin_addr)
(76,strtoul(inputBuffer, NULL, 0)
(77,CLOSE_SOCKET(listenSocket)
(78,if (data > strlen(HELLO_STRING)
(79,s_addr)
(80,if (myString == NULL)
(81,if(GLOBAL_CONST_TRUE)
(82,SOCKET_ERROR)
(83,do)
(84,listen(listenSocket, LISTEN_BACKLOG)
(85,WSAStartup(MAKEWORD(2,2)
(86,0)
(87,HELLO_STRING)
(88,break;)
(89,acceptSocket)
(90,)
(91,&wsaData)
(92,0)
(93,listenSocket == INVALID_SOCKET)
(94,2)
(95,inputBuffer[recvResult] = \'\\0\')
(96,MAKEWORD(2,2)
(97,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(98,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(99,wsaData)
(100,service.sin_addr.s_addr = INADDR_ANY)
(101,service.sin_family = AF_INET)
(102,)
(103,INVALID_SOCKET)
(104,)
(105,INVALID_SOCKET)
(106,listenSocket)
(107,sizeof(service)
(108,char *)
(109,break;)
(110,(char *)
(111,recvResult)
(112,CLOSE_SOCKET(acceptSocket)
(113,acceptSocket = accept(listenSocket, NULL, NULL)
(114,listenSocket)
(115,(struct sockaddr*)
(116,WSACleanup()
(117,data > strlen(HELLO_STRING)
(118,acceptSocket)
(119,SOCKET_ERROR)
(120,wsaDataInit)
(121,service)
(122,wsaDataInit)
(123,data)
(124,acceptSocket)
(125,acceptSocket)
(126,recvResult)
(127,&service)
(128,if (listen(listenSocket, LISTEN_BACKLOG)
(129,service.sin_port = htons(TCP_PORT)
(130,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(131,if (WSAStartup(MAKEWORD(2,2)
(132,if (recvResult == SOCKET_ERROR || recvResult == 0)
(133,listenSocket)
(134,recvResult == 0)
(135,)
(136,bind(listenSocket, (struct sockaddr*)
(137,0)
(138,recvResult == SOCKET_ERROR || recvResult == 0)
(139,1)
(140,data)
(141,break;)
(142,if (listenSocket != INVALID_SOCKET)
(143,myString)
(144,0)
(145,TCP_PORT)
(146,)
(147,myString = (char *)
(148,NULL)
(149,acceptSocket = INVALID_SOCKET)
(150,2)
(151,)
(152,acceptSocket)
(153,GLOBAL_CONST_TRUE)
(154,service)
(155,AF_INET)
(156,recvResult)
(157,free(myString)
(158,acceptSocket)
(159,service)
(160,GLOBAL_CONST_TRUE)
(161,)
(162,wsaData)
(163,wsaDataInit)
(164,struct sockaddr*)
(165,)
(166,listenSocket)
(167,data)
(168,"Input is less than the length of the source string")
(169,if (acceptSocket != INVALID_SOCKET)
(170,printLine(myString)
(171,inputBuffer)
(172,sin_port)
(173,sin_family)
(174,)
(175,)
(176,)
(177,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(178,if(GLOBAL_CONST_TRUE)
(179,inputBuffer)
(180,malloc(data*sizeof(char)
(181,if (listenSocket == INVALID_SOCKET)
(182,listen(listenSocket, LISTEN_BACKLOG)
(183,strcpy(myString, HELLO_STRING)
(184,WSAStartup(MAKEWORD(2,2)
(185,SOCKET_ERROR)
(186,service)
(187,SOCKET_ERROR)
(188,break;)
(189,listenSocket)
(190,myString)
(191,data)
(192,printLine("Input is less than the length of the source string")
(193,LISTEN_BACKLOG)
(194,char)
(195,\'\\0\')
(196,&service)
(197,AF_INET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^