-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_05_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataUninitArray[10];
    data = dataUninitArray;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
35,36
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
43,44
43,45
44,45
46,47
47,48
47,49
50,51
51,52
53,54
53,55
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
60,61
63,64
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
71,72
74,75
76,77
76,78
77,78
79,80
80,81
80,82
81,82
82,83
82,84
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
104,106
105,106
105,107
106,107
108,109
111,112
112,113
112,114
113,114
115,116
115,117
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,29,34,36,41,42,45,48,49,52,59,61,62,64,70,72,73,75,78,83,85,90,91,94,95,98,103,107,109,110,114,118,120,121
-----computeFrom-----
22,23
22,24
39,40
39,41
43,44
43,45
47,48
47,49
55,56
55,57
66,67
66,68
88,89
88,90
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_05_bad(){    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_05_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_declare_partial_init_05_bad
{    twoIntsStruct * data;    twoIntsStruct dataUninitArray[10];    data = dataUninitArray;    if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataUninitArray[10];
twoIntsStruct dataUninitArray[10];
twoIntsStruct
twoIntsStruct
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(staticTrue)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(staticTrue)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(54,52,0)
(2,27,0)
(28,3,0)
(35,26,0)
(28,18,0)
(26,46,0)
(15,35,0)
(7,22,0)
(6,25,0)
(17,45,0)
(25,32,0)
(35,42,0)
(0,14,0)
(32,25,0)
(19,27,0)
(64,24,0)
(12,27,0)
(8,19,0)
(41,61,0)
(10,24,0)
(23,52,0)
(11,59,0)
(53,34,0)
(13,30,0)
(57,24,0)
(43,45,0)
(8,12,0)
(52,42,0)
(32,18,0)
(52,30,0)
(44,1,0)
(52,25,0)
(42,24,0)
(25,52,0)
(9,24,0)
(58,42,0)
(45,3,0)
(60,0,0)
(3,45,0)
(21,26,0)
(33,46,0)
(39,48,0)
(36,35,0)
(50,8,0)
(20,27,0)
(16,48,0)
(25,46,0)
(59,27,0)
(22,27,0)
(19,8,0)
(37,1,0)
(1,51,0)
(31,61,0)
(56,19,0)
(62,0,0)
(63,42,0)
(45,42,0)
(35,27,0)
(48,30,0)
(46,27,0)
(3,28,0)
(40,3,0)
(29,19,0)
(12,49,0)
(61,59,0)
(4,30,0)
(46,49,0)
(45,30,0)
(3,12,0)
(59,61,0)
(34,30,0)
(5,12,0)
(19,42,0)
(26,35,0)
(20,2,1)
(12,5,1)
(55,38,1)
(35,15,1)
(35,27,1)
(50,19,1)
(8,50,1)
(19,42,1)
(6,52,1)
(25,6,1)
(48,30,1)
(27,20,1)
(23,48,1)
(22,27,1)
(3,45,1)
(13,38,1)
(36,59,1)
(45,17,1)
(30,4,1)
(52,42,1)
(32,25,1)
(35,42,1)
(25,46,1)
(53,28,1)
(45,30,1)
(39,30,1)
(59,27,1)
(38,47,1)
(40,45,1)
(47,42,1)
(3,12,1)
(8,19,1)
(31,11,1)
(38,59,1)
(21,35,1)
(52,30,1)
(42,63,1)
(11,27,1)
(52,54,1)
(19,27,1)
(39,34,1)
(16,39,1)
(45,42,1)
(22,7,1)
(33,26,1)
(34,30,1)
(17,43,1)
(48,16,1)
(25,52,1)
(4,13,1)
(59,61,1)
(34,53,1)
(55,48,1)
(7,12,1)
(3,40,1)
(56,29,1)
(5,8,1)
(46,27,1)
(29,46,1)
(63,58,1)
(28,3,1)
(15,36,1)
(12,27,1)
(61,41,1)
(26,35,1)
(11,22,1)
(41,31,1)
(46,33,1)
(2,47,1)
(54,23,1)
(43,32,1)
(26,21,1)
(19,56,1)
(15,59,2)
(16,38,2)
(13,38,2)
(48,38,2)
(31,47,2)
(34,30,2)
(16,48,2)
(32,48,2)
(2,47,2)
(50,59,2)
(25,48,2)
(53,48,2)
(45,48,2)
(35,42,2)
(36,59,2)
(48,30,2)
(19,27,2)
(6,48,2)
(39,48,2)
(35,59,2)
(61,59,2)
(4,38,2)
(11,47,2)
(27,47,2)
(52,42,2)
(8,59,2)
(20,47,2)
(56,59,2)
(28,48,2)
(48,48,2)
(45,30,2)
(19,42,2)
(59,59,2)
(11,59,2)
(3,12,2)
(31,59,2)
(35,27,2)
(39,38,2)
(33,59,2)
(54,48,2)
(12,59,2)
(7,59,2)
(28,3,2)
(59,27,2)
(59,47,2)
(25,52,2)
(52,30,2)
(21,59,2)
(34,48,2)
(32,25,2)
(17,48,2)
(46,59,2)
(59,61,2)
(30,38,2)
(3,48,2)
(41,47,2)
(5,59,2)
(41,59,2)
(61,47,2)
(40,48,2)
(8,19,2)
(26,35,2)
(26,59,2)
(45,42,2)
(52,48,2)
(43,48,2)
(25,46,2)
(3,45,2)
(29,59,2)
(19,59,2)
(23,48,2)
(12,27,2)
(22,27,2)
(46,27,2)
(22,59,2)
-----------------------------------
(0,)
(1,)
(2,i)
(3,data[i].intTwo)
(4,0)
(5,i)
(6,intOne)
(7,i)
(8,data[i].intTwo)
(9,if(staticTrue)
(10,data)
(11,i)
(12,data[i].intTwo = i)
(13,i)
(14,)
(15,i)
(16,10)
(17,i)
(18,)
(19,data[i])
(20,0)
(21,intOne)
(22,i++)
(23,data)
(24,)
(25,data[i].intOne)
(26,data[i].intOne)
(27,i=0)
(28,printIntLine(data[i].intTwo)
(29,data)
(30,i=0)
(31,10)
(32,printIntLine(data[i].intOne)
(33,i)
(34,i++)
(35,data[i])
(36,data)
(37,for(i=0; i<(10/2)
(38,staticTrue)
(39,i)
(40,intTwo)
(41,2)
(42,data = dataUninitArray)
(43,data)
(44,i)
(45,data[i])
(46,data[i].intOne = i)
(47,staticTrue)
(48,i<10)
(49,)
(50,intTwo)
(51,)
(52,data[i])
(53,i)
(54,i)
(55,RET)
(56,i)
(57,if(staticTrue)
(58,data)
(59,i<(10/2)
(60,for(i=0; i<10; i++)
(61,10/2)
(62,i)
(63,dataUninitArray)
(64,dataUninitArray)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^