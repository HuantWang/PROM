-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_13_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
41,43
42,43
45,46
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
62,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,37,39,43,44,49,51,56,57,60,61,64,69,73,75,76,80,84,86,87
-----computeFrom-----
14,15
14,16
26,27
26,28
34,35
34,36
41,42
41,43
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_13_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_13_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_13_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(22,11,0)
(28,10,0)
(6,34,0)
(2,38,0)
(13,27,0)
(43,10,0)
(32,14,0)
(21,30,0)
(38,34,0)
(21,16,0)
(7,12,0)
(3,14,0)
(26,11,0)
(36,29,0)
(29,24,0)
(14,11,0)
(30,14,0)
(19,39,0)
(34,38,0)
(30,21,0)
(10,28,0)
(1,29,0)
(8,12,0)
(39,10,0)
(27,11,0)
(35,15,0)
(20,27,0)
(23,4,0)
(9,30,0)
(10,39,0)
(42,38,0)
(28,16,0)
(18,41,0)
(37,26,0)
(0,4,0)
(6,15,0)
(34,6,0)
(31,11,0)
(33,42,0)
(44,41,0)
(39,11,0)
(6,5,0)
(5,6,0)
(14,15,0)
(39,15,0)
(15,6,0)
(15,4,0)
(14,30,0)
(17,4,0)
(38,42,0)
(25,39,0)
(6,34,1)
(39,15,1)
(9,14,1)
(20,26,1)
(30,9,1)
(27,13,1)
(12,7,1)
(6,5,1)
(18,12,1)
(43,39,1)
(11,31,1)
(10,43,1)
(37,28,1)
(13,20,1)
(40,27,1)
(33,2,1)
(14,11,1)
(14,3,1)
(27,11,1)
(26,11,1)
(21,30,1)
(41,44,1)
(31,22,1)
(40,41,1)
(8,15,1)
(39,11,1)
(15,6,1)
(2,35,1)
(25,19,1)
(3,32,1)
(32,27,1)
(10,39,1)
(22,41,1)
(28,10,1)
(26,37,1)
(34,38,1)
(30,14,1)
(38,42,1)
(19,21,1)
(44,18,1)
(39,25,1)
(14,15,1)
(7,8,1)
(42,33,1)
(20,11,1)
(30,14,2)
(9,27,2)
(14,11,2)
(27,11,2)
(13,27,2)
(14,15,2)
(11,41,2)
(26,27,2)
(25,27,2)
(20,27,2)
(39,15,2)
(10,39,2)
(27,27,2)
(6,5,2)
(43,27,2)
(3,27,2)
(10,27,2)
(37,27,2)
(31,41,2)
(22,41,2)
(19,27,2)
(21,30,2)
(27,41,2)
(38,42,2)
(30,27,2)
(28,27,2)
(39,27,2)
(13,41,2)
(15,6,2)
(20,41,2)
(34,38,2)
(28,10,2)
(14,27,2)
(32,27,2)
(39,11,2)
(26,11,2)
(21,27,2)
(6,34,2)
-----------------------------------
(0,data)
(1,for(i=0; i<10; i++)
(2,10)
(3,i)
(4,)
(5,twoIntsStruct *)
(6,(twoIntsStruct *)
(7,5)
(8,GLOBAL_CONST_FIVE)
(9,intOne)
(10,data[i].intTwo)
(11,i=0)
(12,GLOBAL_CONST_FIVE==5)
(13,10)
(14,data[i])
(15,data = (twoIntsStruct *)
(16,)
(17,if(GLOBAL_CONST_FIVE==5)
(18,GLOBAL_CONST_FIVE)
(19,data)
(20,i)
(21,printIntLine(data[i].intOne)
(22,i)
(23,if(GLOBAL_CONST_FIVE==5)
(24,)
(25,i)
(26,i++)
(27,i<10)
(28,printIntLine(data[i].intTwo)
(29,)
(30,data[i].intOne)
(31,0)
(32,data)
(33,twoIntsStruct)
(34,ALLOCA(10*sizeof(twoIntsStruct)
(35,data)
(36,i)
(37,i)
(38,10*sizeof(twoIntsStruct)
(39,data[i])
(40,RET)
(41,GLOBAL_CONST_FIVE==5)
(42,sizeof(twoIntsStruct)
(43,intTwo)
(44,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^