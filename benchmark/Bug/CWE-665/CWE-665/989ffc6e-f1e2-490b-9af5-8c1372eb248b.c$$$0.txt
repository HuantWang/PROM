-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_12_bad()
{
    int * data;
    int dataUninitArray[10];
    data = dataUninitArray;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i] = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
26,27
27,28
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
44,45
44,46
45,46
48,49
49,50
51,52
52,53
53,54
53,55
54,55
54,56
55,56
57,58
59,60
61,62
61,63
61,64
62,63
63,64
65,66
66,67
66,68
67,68
68,69
68,70
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
86,87
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
95,97
96,97
96,98
97,98
98,99
98,100
100,101
102,103
102,104
102,105
102,106
103,104
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
115,116
116,117
117,118
117,119
118,119
118,120
119,120
121,122
123,124
125,126
125,127
126,127
127,128
127,129
129,130
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
137,138
137,139
138,139
141,142
142,143
144,145
145,146
146,147
146,148
147,148
149,150
149,151
150,151
152,153
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,30,35,37,42,43,46,47,50,56,58,60,64,69,71,76,77,80,81,84,89,92,94,99,101,106,107,110,111,114,120,122,124,128,130,135,136,139,140,143,148,151,153
-----computeFrom-----
20,21
20,22
40,41
40,42
44,45
44,46
53,54
53,55
74,75
74,76
78,79
78,80
104,105
104,106
108,109
108,110
117,118
117,119
133,134
133,135
137,138
137,139
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_12_bad(){    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_declare_no_init_12_bad
{    int * data;    int dataUninitArray[10];    data = dataUninitArray;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
int dataUninitArray[10];
int dataUninitArray[10];
int
dataUninitArray[10]
dataUninitArray
[10]
10
data = dataUninitArray;
data = dataUninitArray
data
data
dataUninitArray
dataUninitArray
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(13,66,0)
(29,54,0)
(70,52,0)
(14,23,0)
(49,40,0)
(38,39,0)
(15,43,0)
(23,69,0)
(46,41,0)
(10,37,0)
(64,39,0)
(18,33,0)
(0,42,0)
(6,66,0)
(24,29,0)
(52,23,0)
(43,34,0)
(51,67,0)
(37,47,0)
(21,26,0)
(0,26,0)
(19,42,0)
(31,26,0)
(14,54,0)
(42,50,0)
(57,0,0)
(14,25,0)
(73,41,0)
(79,9,0)
(5,36,0)
(52,5,0)
(40,34,0)
(11,66,0)
(60,67,0)
(52,66,0)
(44,30,0)
(23,41,0)
(8,66,0)
(12,39,0)
(21,23,0)
(74,14,0)
(1,0,0)
(33,61,0)
(5,52,0)
(26,39,0)
(55,9,0)
(68,39,0)
(42,62,0)
(25,63,0)
(21,41,0)
(20,62,0)
(7,62,0)
(0,62,0)
(22,16,0)
(35,62,0)
(78,54,0)
(71,40,0)
(9,54,0)
(76,20,0)
(30,62,0)
(32,37,0)
(56,26,0)
(72,13,0)
(28,23,0)
(58,33,0)
(67,41,0)
(17,52,0)
(48,21,0)
(4,43,0)
(59,21,0)
(45,6,0)
(52,26,0)
(52,42,0)
(53,54,0)
(27,13,0)
(14,26,0)
(3,14,0)
(16,41,0)
(25,14,0)
(77,30,0)
(16,22,1)
(6,66,1)
(70,17,1)
(46,73,1)
(3,74,1)
(20,62,1)
(65,9,1)
(66,8,1)
(72,6,1)
(24,25,1)
(14,54,1)
(77,20,1)
(75,2,1)
(8,11,1)
(62,35,1)
(59,48,1)
(44,77,1)
(7,75,1)
(20,76,1)
(51,60,1)
(1,57,1)
(9,79,1)
(52,70,1)
(60,41,1)
(52,26,1)
(78,53,1)
(76,42,1)
(41,46,1)
(0,26,1)
(54,78,1)
(30,62,1)
(11,30,1)
(42,62,1)
(74,9,1)
(57,30,1)
(21,59,1)
(67,41,1)
(21,26,1)
(0,62,1)
(75,67,1)
(13,66,1)
(29,54,1)
(13,27,1)
(42,19,1)
(14,26,1)
(35,7,1)
(22,23,1)
(67,51,1)
(52,42,1)
(31,56,1)
(9,54,1)
(23,28,1)
(29,24,1)
(60,16,1)
(14,23,1)
(19,0,1)
(48,67,1)
(72,66,1)
(0,1,1)
(77,62,1)
(5,52,1)
(65,13,1)
(17,13,1)
(79,55,1)
(28,21,1)
(73,2,1)
(6,45,1)
(30,44,1)
(16,41,1)
(52,66,1)
(23,41,1)
(53,75,1)
(55,29,1)
(14,3,1)
(45,5,1)
(21,41,1)
(55,54,1)
(25,14,1)
(26,31,1)
(2,26,1)
(27,72,1)
(52,23,1)
(29,54,2)
(30,30,2)
(7,75,2)
(1,30,2)
(41,2,2)
(8,75,2)
(72,75,2)
(46,2,2)
(21,26,2)
(11,75,2)
(60,2,2)
(9,54,2)
(25,14,2)
(19,30,2)
(14,54,2)
(6,66,2)
(23,67,2)
(70,13,2)
(55,9,2)
(73,2,2)
(67,41,2)
(52,26,2)
(13,66,2)
(35,75,2)
(16,41,2)
(44,75,2)
(48,67,2)
(77,75,2)
(0,26,2)
(21,67,2)
(0,30,2)
(42,30,2)
(76,30,2)
(14,23,2)
(66,75,2)
(30,75,2)
(55,75,2)
(53,75,2)
(74,9,2)
(54,75,2)
(51,2,2)
(67,67,2)
(30,62,2)
(3,9,2)
(79,9,2)
(27,75,2)
(67,2,2)
(59,67,2)
(20,62,2)
(9,75,2)
(72,13,2)
(21,41,2)
(60,67,2)
(25,9,2)
(16,67,2)
(79,75,2)
(14,9,2)
(0,62,2)
(9,9,2)
(13,75,2)
(24,9,2)
(22,67,2)
(14,26,2)
(78,75,2)
(42,62,2)
(29,9,2)
(5,13,2)
(52,13,2)
(57,30,2)
(52,23,2)
(13,13,2)
(77,30,2)
(62,75,2)
(27,13,2)
(20,30,2)
(52,42,2)
(23,41,2)
(52,66,2)
(5,52,2)
(28,67,2)
(44,30,2)
(51,67,2)
(45,13,2)
(6,13,2)
(17,13,2)
-----------------------------------
(0,data[i])
(1,i)
(2,globalReturnsTrueOrFalse()
(3,i)
(4,i)
(5,printIntLine(data[i])
(6,i++)
(7,i)
(8,0)
(9,i<10)
(10,i)
(11,i)
(12,if(globalReturnsTrueOrFalse()
(13,i<10)
(14,data[i])
(15,for(i=0; i<10; i++)
(16,i++)
(17,data)
(18,for(i=0; i<10; i++)
(19,i)
(20,i++)
(21,data[i])
(22,i)
(23,data[i] = i)
(24,i)
(25,printIntLine(data[i])
(26,data = dataUninitArray)
(27,10)
(28,i)
(29,i++)
(30,i<10)
(31,dataUninitArray)
(32,for(i=0; i<10; i++)
(33,)
(34,)
(35,0)
(36,)
(37,)
(38,data)
(39,)
(40,)
(41,i=0)
(42,data[i] = i)
(43,)
(44,10)
(45,i)
(46,0)
(47,)
(48,data)
(49,for(i=0; i<10; i++)
(50,)
(51,10)
(52,data[i])
(53,i)
(54,i=0)
(55,i)
(56,data)
(57,data)
(58,i)
(59,i)
(60,i)
(61,)
(62,i=0)
(63,)
(64,if(globalReturnsTrueOrFalse()
(65,RET)
(66,i=0)
(67,i<10)
(68,dataUninitArray)
(69,)
(70,i)
(71,i)
(72,i)
(73,i)
(74,data)
(75,globalReturnsTrueOrFalse()
(76,i)
(77,i)
(78,0)
(79,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^