-----label-----
1
-----code-----
void CWE665_Improper_Initialization__char_cat_02_bad()
{
    char * data;
    char dataBuffer[100];
    data = dataBuffer;
    if(1)
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */
        strcat(data, source);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
29,30
29,31
29,32
29,33
29,34
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
52,53
52,54
56,57
57,58
57,59
57,60
58,59
60,61
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,26,28,32,34,36,40,42,43,45,46,51,53,54,55,59,61,63,67,69
-----computeFrom-----
20,21
20,22
44,45
44,46
48,49
48,50
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__char_cat_02_bad(){    char * data;    char dataBuffer[100];    data = dataBuffer;    if(1)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
void
CWE665_Improper_Initialization__char_cat_02_bad()
CWE665_Improper_Initialization__char_cat_02_bad
{    char * data;    char dataBuffer[100];    data = dataBuffer;    if(1)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100];
char dataBuffer[100];
char
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
1
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(1,26,0)
(14,15,0)
(13,25,0)
(20,3,0)
(26,25,0)
(18,10,0)
(6,8,0)
(28,26,0)
(9,18,0)
(8,15,0)
(18,23,0)
(12,28,0)
(19,28,0)
(22,0,0)
(11,25,0)
(17,23,0)
(0,26,0)
(28,3,0)
(7,26,0)
(10,3,0)
(23,18,0)
(15,3,0)
(5,25,0)
(15,8,0)
(27,23,0)
(24,15,0)
(21,10,0)
(16,8,0)
(3,25,0)
(0,3,0)
(19,10,1)
(17,27,1)
(8,6,1)
(22,28,1)
(2,0,1)
(28,26,1)
(14,4,1)
(28,12,1)
(4,26,1)
(10,21,1)
(27,9,1)
(24,14,1)
(0,22,1)
(6,16,1)
(9,15,1)
(1,7,1)
(16,24,1)
(18,23,1)
(12,19,1)
(15,8,1)
(23,17,1)
(26,1,1)
(21,18,1)
(0,26,1)
(0,26,2)
(15,8,2)
(18,23,2)
(28,26,2)
-----------------------------------
(0,printLine(data)
(1,dataBuffer)
(2,RET)
(3,)
(4,1)
(5,dataBuffer)
(6,1)
(7,data)
(8,100-1)
(9,source)
(10,source[100-1] = '\\0')
(11,if(1)
(12,source)
(13,data)
(14,source)
(15,memset(source, 'C', 100-1)
(16,100)
(17,1)
(18,source[100-1])
(19,data)
(20,source)
(21,'\\0')
(22,data)
(23,100-1)
(24,'C')
(25,)
(26,data = dataBuffer)
(27,100)
(28,strcat(data, source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^