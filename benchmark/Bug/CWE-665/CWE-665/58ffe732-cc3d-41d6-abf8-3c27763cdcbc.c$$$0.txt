-----label-----
1
-----code-----
void CWE665_Improper_Initialization__wchar_t_cat_03_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100];
    data = dataBuffer;
    if(5==5)
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */
        wcscat(data, source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
40,43
40,44
41,42
43,44
46,47
46,48
49,50
50,51
50,52
51,52
51,53
52,53
54,55
54,56
58,59
59,60
59,61
59,62
60,61
62,63
64,65
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,27,28,30,34,36,38,42,44,45,47,48,53,55,56,57,61,63,65,69,71
-----computeFrom-----
20,21
20,22
26,27
26,28
46,47
46,48
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__wchar_t_cat_03_bad(){    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    if(5==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }}
void
CWE665_Improper_Initialization__wchar_t_cat_03_bad()
CWE665_Improper_Initialization__wchar_t_cat_03_bad
{    wchar_t * data;    wchar_t dataBuffer[100];    data = dataBuffer;    if(5==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100];
wchar_t dataBuffer[100];
wchar_t
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */        wcscat(data, source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscat(data, source);
wcscat(data, source)
wcscat
wcscat
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(13,9,0)
(12,9,0)
(11,0,0)
(16,5,0)
(6,10,0)
(8,5,0)
(8,10,0)
(1,9,0)
(3,4,0)
(4,10,0)
(18,0,0)
(17,5,0)
(4,5,0)
(14,8,0)
(10,9,0)
(7,8,0)
(15,10,0)
(5,9,0)
(0,18,1)
(7,14,1)
(8,7,1)
(3,8,1)
(11,10,1)
(2,4,1)
(8,10,1)
(18,11,1)
(4,3,1)
(10,6,1)
(6,15,1)
(14,17,1)
(17,0,1)
(4,10,1)
(4,10,2)
(8,10,2)
-----------------------------------
(0,5==5)
(1,if(5==5)
(2,RET)
(3,data)
(4,printWLine(data)
(5,)
(6,dataBuffer)
(7,source)
(8,wcscat(data, source)
(9,)
(10,data = dataBuffer)
(11,5)
(12,data)
(13,dataBuffer)
(14,data)
(15,data)
(16,source)
(17,'\\0')
(18,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^