-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(5,28,0)
(43,45,0)
(32,39,0)
(48,31,0)
(26,43,0)
(1,40,0)
(15,12,0)
(34,31,0)
(40,30,0)
(6,30,0)
(3,30,0)
(17,8,0)
(5,35,0)
(20,32,0)
(10,33,0)
(35,0,0)
(4,39,0)
(12,15,0)
(15,44,0)
(3,24,0)
(15,39,0)
(12,5,0)
(28,5,0)
(31,35,0)
(29,35,0)
(39,30,0)
(32,23,0)
(33,35,0)
(29,0,0)
(7,3,0)
(2,33,0)
(21,35,0)
(22,0,0)
(31,0,0)
(36,29,0)
(9,24,0)
(21,0,0)
(38,40,0)
(23,32,0)
(14,3,0)
(39,7,0)
(24,3,0)
(41,44,0)
(18,7,0)
(19,8,0)
(35,5,0)
(46,21,0)
(24,25,0)
(44,15,0)
(24,9,0)
(11,35,0)
(27,24,0)
(5,12,0)
(19,16,0)
(37,30,0)
(8,19,0)
(13,15,0)
(7,39,0)
(42,23,0)
(18,4,1)
(19,8,1)
(33,35,1)
(35,5,1)
(3,24,1)
(4,3,1)
(31,35,1)
(31,48,1)
(43,26,1)
(34,33,1)
(44,41,1)
(12,15,1)
(7,3,1)
(27,14,1)
(47,21,1)
(15,44,1)
(33,2,1)
(46,29,1)
(5,12,1)
(2,10,1)
(11,32,1)
(39,7,1)
(32,39,1)
(15,39,1)
(41,13,1)
(10,35,1)
(34,19,1)
(17,33,1)
(21,46,1)
(29,36,1)
(13,11,1)
(24,25,1)
(29,35,1)
(24,27,1)
(20,39,1)
(42,20,1)
(48,34,1)
(32,23,1)
(7,18,1)
(26,32,1)
(36,31,1)
(23,42,1)
(21,35,1)
(8,17,1)
(47,43,1)
(5,28,1)
(24,9,1)
(26,32,2)
(48,32,2)
(7,3,2)
(13,32,2)
(35,5,2)
(8,33,2)
(32,39,2)
(3,24,2)
(31,32,2)
(29,35,2)
(15,44,2)
(36,32,2)
(12,32,2)
(5,32,2)
(33,32,2)
(5,12,2)
(44,32,2)
(12,15,2)
(15,39,2)
(24,9,2)
(39,7,2)
(21,32,2)
(15,32,2)
(46,32,2)
(35,32,2)
(10,32,2)
(2,32,2)
(24,25,2)
(32,23,2)
(5,28,2)
(34,32,2)
(33,35,2)
(11,32,2)
(31,35,2)
(19,33,2)
(21,35,2)
(17,33,2)
(43,32,2)
(29,32,2)
(19,8,2)
(41,32,2)
-----------------------------------
(0,)
(1,myString)
(2,NULL)
(3,* dataPtr = (size_t *)
(4,data)
(5,(char *)
(6,dataPtr)
(7,*dataPtr)
(8,-1)
(9,size_t *)
(10,myString)
(11,myString)
(12,malloc(data*sizeof(char)
(13,data)
(14,dataPtr)
(15,data*sizeof(char)
(16,)
(17,1)
(18,dataPtr)
(19,exit(-1)
(20,data)
(21,free(myString)
(22,if (myString == NULL)
(23,strlen(HELLO_STRING)
(24,(size_t *)
(25,void * dataVoidPtr)
(26,"Input is less than the length of the source string")
(27,dataVoidPtr)
(28,char *)
(29,printLine(myString)
(30,)
(31,strcpy(myString, HELLO_STRING)
(32,data > strlen(HELLO_STRING)
(33,myString == NULL)
(34,myString)
(35,myString = (char *)
(36,myString)
(37,data)
(38,if (data > strlen(HELLO_STRING)
(39,data = (*dataPtr)
(40,)
(41,char)
(42,HELLO_STRING)
(43,printLine("Input is less than the length of the source string")
(44,sizeof(char)
(45,)
(46,myString)
(47,RET)
(48,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^