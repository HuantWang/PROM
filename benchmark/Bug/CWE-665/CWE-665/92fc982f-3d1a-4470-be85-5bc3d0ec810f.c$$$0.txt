-----label-----
1
-----code-----
void CWE665_Improper_Initialization__char_cat_11_bad()
{
    char * data;
    char dataBuffer[100];
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */
        strcat(data, source);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
40,43
40,44
41,42
43,44
46,47
46,48
49,50
50,51
50,52
51,52
51,53
52,53
54,55
54,56
58,59
59,60
59,61
59,62
60,61
62,63
64,65
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,28,30,34,36,38,42,44,45,47,48,53,55,56,57,61,63,65,69,71
-----computeFrom-----
20,21
20,22
46,47
46,48
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__char_cat_11_bad(){    char * data;    char dataBuffer[100];    data = dataBuffer;    if(globalReturnsTrue())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
void
CWE665_Improper_Initialization__char_cat_11_bad()
CWE665_Improper_Initialization__char_cat_11_bad
{    char * data;    char dataBuffer[100];    data = dataBuffer;    if(globalReturnsTrue())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100];
char dataBuffer[100];
char
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: If data is not initialized properly, strcat() may not function correctly */        strcat(data, source);        printLine(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(28,16,0)
(20,1,0)
(10,22,0)
(27,10,0)
(22,0,0)
(23,1,0)
(14,10,0)
(26,1,0)
(19,16,0)
(3,1,0)
(5,25,0)
(16,1,0)
(2,19,0)
(8,2,0)
(25,16,0)
(25,3,0)
(24,19,0)
(17,16,0)
(15,0,0)
(7,2,0)
(21,22,0)
(4,25,0)
(17,3,0)
(6,17,0)
(0,16,0)
(13,19,0)
(12,3,0)
(9,3,0)
(22,10,0)
(19,2,0)
(27,14,1)
(3,9,1)
(25,5,1)
(13,11,1)
(17,3,1)
(0,15,1)
(19,2,1)
(4,0,1)
(18,17,1)
(11,3,1)
(25,3,1)
(17,6,1)
(15,22,1)
(22,10,1)
(14,21,1)
(5,4,1)
(8,7,1)
(24,13,1)
(7,24,1)
(9,12,1)
(21,19,1)
(6,25,1)
(2,8,1)
(10,27,1)
(17,3,2)
(22,10,2)
(25,3,2)
(19,2,2)
-----------------------------------
(0,source[100-1] = '\\0')
(1,)
(2,100-1)
(3,data = dataBuffer)
(4,data)
(5,source)
(6,data)
(7,100)
(8,1)
(9,dataBuffer)
(10,100-1)
(11,globalReturnsTrue()
(12,data)
(13,source)
(14,100)
(15,'\\0')
(16,)
(17,printLine(data)
(18,RET)
(19,memset(source, 'C', 100-1)
(20,if(globalReturnsTrue()
(21,source)
(22,source[100-1])
(23,data)
(24,'C')
(25,strcat(data, source)
(26,dataBuffer)
(27,1)
(28,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^