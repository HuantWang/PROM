-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_08_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
80,81
80,82
81,82
82,83
84,85
85,86
85,87
86,87
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
101,102
102,103
104,105
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,58,59,62,65,66,69,75,77,79,83,88,90,95,96,99,100,103,108,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
93,94
93,95
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_08_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_08_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_08_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(33,12,0)
(58,1,0)
(57,34,0)
(50,4,0)
(21,9,0)
(17,10,0)
(55,44,0)
(43,23,0)
(41,9,0)
(1,58,0)
(45,38,0)
(20,34,0)
(11,14,0)
(29,52,0)
(36,46,0)
(0,4,0)
(31,9,0)
(42,24,0)
(44,55,0)
(48,14,0)
(10,2,0)
(51,60,0)
(53,38,0)
(55,46,0)
(10,1,0)
(49,39,0)
(39,46,0)
(6,0,0)
(25,41,0)
(23,9,0)
(19,55,0)
(56,46,0)
(12,46,0)
(28,2,0)
(23,10,0)
(55,10,0)
(5,51,0)
(22,2,0)
(34,41,0)
(23,31,0)
(38,40,0)
(58,4,0)
(32,30,0)
(55,31,0)
(14,10,0)
(44,35,0)
(15,1,0)
(30,9,0)
(13,55,0)
(3,51,0)
(37,9,0)
(1,10,0)
(26,2,0)
(47,31,0)
(4,58,0)
(16,12,0)
(24,29,0)
(4,0,0)
(59,23,0)
(27,2,0)
(1,15,0)
(41,34,0)
(31,8,0)
(29,24,0)
(7,29,1)
(58,4,1)
(37,21,1)
(16,33,1)
(32,31,1)
(11,10,1)
(6,50,1)
(12,46,1)
(41,9,1)
(55,10,1)
(25,9,1)
(33,46,1)
(9,37,1)
(30,9,1)
(12,16,1)
(46,36,1)
(55,31,1)
(25,30,1)
(23,9,1)
(59,43,1)
(56,54,1)
(48,11,1)
(44,55,1)
(4,0,1)
(33,39,1)
(39,49,1)
(14,10,1)
(1,15,1)
(55,13,1)
(42,14,1)
(14,48,1)
(55,46,1)
(49,44,1)
(36,56,1)
(43,41,1)
(30,32,1)
(7,14,1)
(21,7,1)
(41,34,1)
(34,20,1)
(31,9,1)
(57,25,1)
(24,42,1)
(18,12,1)
(13,19,1)
(0,6,1)
(31,47,1)
(23,10,1)
(54,41,1)
(1,58,1)
(50,17,1)
(23,59,1)
(29,24,1)
(54,7,1)
(18,54,1)
(39,46,1)
(20,57,1)
(19,12,1)
(10,1,1)
(47,23,1)
(41,7,2)
(42,14,2)
(59,41,2)
(41,9,2)
(39,12,2)
(29,14,2)
(58,4,2)
(9,7,2)
(14,10,2)
(12,46,2)
(57,41,2)
(56,54,2)
(49,12,2)
(34,41,2)
(10,1,2)
(34,7,2)
(44,55,2)
(23,41,2)
(20,41,2)
(24,14,2)
(36,54,2)
(1,58,2)
(13,12,2)
(4,0,2)
(39,46,2)
(43,41,2)
(25,41,2)
(55,10,2)
(55,46,2)
(21,7,2)
(55,12,2)
(1,15,2)
(30,41,2)
(44,12,2)
(23,10,2)
(16,12,2)
(19,12,2)
(31,9,2)
(31,41,2)
(12,12,2)
(41,34,2)
(33,12,2)
(33,54,2)
(41,41,2)
(37,7,2)
(23,9,2)
(25,7,2)
(29,24,2)
(12,54,2)
(20,7,2)
(32,41,2)
(16,54,2)
(30,9,2)
(55,31,2)
(46,54,2)
(47,41,2)
(57,7,2)
-----------------------------------
(0,sizeof(int)
(1,(int *)
(2,)
(3,for(i=0; i<(10/2)
(4,10*sizeof(int)
(5,i)
(6,int)
(7,staticReturnsTrue()
(8,)
(9,i=0)
(10,data = (int *)
(11,data)
(12,i<10)
(13,i)
(14,data == NULL)
(15,int *)
(16,10)
(17,data)
(18,RET)
(19,data)
(20,2)
(21,i)
(22,if (data == NULL)
(23,data[i])
(24,-1)
(25,i)
(26,data)
(27,if(staticReturnsTrue()
(28,if(staticReturnsTrue()
(29,exit(-1)
(30,i++)
(31,data[i] = i)
(32,i)
(33,i)
(34,10/2)
(35,)
(36,0)
(37,0)
(38,)
(39,i++)
(40,)
(41,i<(10/2)
(42,1)
(43,data)
(44,printIntLine(data[i])
(45,i)
(46,i=0)
(47,i)
(48,NULL)
(49,i)
(50,10)
(51,)
(52,)
(53,for(i=0; i<10; i++)
(54,staticReturnsTrue()
(55,data[i])
(56,i)
(57,10)
(58,malloc(10*sizeof(int)
(59,i)
(60,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^