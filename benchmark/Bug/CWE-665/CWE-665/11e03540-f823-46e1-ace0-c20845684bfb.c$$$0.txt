-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_12_bad()
{
    twoIntsStruct * data;
    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Completely initialize data */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
    else
    {
        /* FIX: Ensure data is initialized before use */
        {
            int i;
            for(i=0; i<10; i++)
            {
                data[i].intOne = i;
                data[i].intTwo = i;
            }
        }
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i].intOne);
                printIntLine(data[i].intTwo);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
18,19
18,20
19,20
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
39,40
40,41
40,42
41,42
42,43
42,44
44,45
46,47
46,48
46,49
46,50
47,48
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
66,67
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
80,81
82,83
82,84
82,85
83,84
84,85
86,87
87,88
87,89
88,89
89,90
89,91
91,92
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
103,104
104,105
106,107
106,108
107,108
108,109
108,110
109,110
111,112
111,113
112,113
112,114
113,114
115,116
118,119
119,120
119,121
120,121
122,123
122,124
123,124
123,125
124,125
126,127
129,130
129,131
130,131
130,132
131,132
132,133
132,134
134,135
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
142,143
142,144
143,144
146,147
147,148
149,150
149,151
150,151
151,152
151,153
152,153
152,154
153,154
153,155
154,155
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
167,168
170,171
172,173
172,174
173,174
174,175
174,176
176,177
178,179
178,180
178,181
178,182
179,180
180,181
180,182
181,182
184,185
184,186
185,186
188,189
189,190
191,192
191,193
192,193
193,194
193,195
194,195
196,197
196,198
197,198
197,199
198,199
200,201
203,204
204,205
204,206
205,206
207,208
207,209
208,209
208,210
209,210
211,212
-----nextToken-----
2,4,9,11,12,16,20,22,25,27,31,32,36,38,43,45,50,51,54,55,58,65,67,68,70,76,78,79,81,85,90,92,97,98,101,102,105,110,114,116,117,121,125,127,128,133,135,140,141,144,145,148,155,157,158,160,166,168,169,171,175,177,182,183,186,187,190,195,199,201,202,206,210,212,213
-----computeFrom-----
14,15
14,16
26,27
26,28
48,49
48,50
52,53
52,54
61,62
61,63
72,73
72,74
95,96
95,97
99,100
99,101
138,139
138,140
142,143
142,144
151,152
151,153
162,163
162,164
180,181
180,182
184,185
184,186
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_12_bad(){    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_12_bad()
CWE457_Use_of_Uninitialized_Variable__struct_array_alloca_no_init_12_bad
{    twoIntsStruct * data;    data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(10*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(10*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
10*sizeof(twoIntsStruct)
10
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Completely initialize data */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }    else    {        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
{        /* FIX: Ensure data is initialized before use */        {            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                data[i].intOne = i;                data[i].intTwo = i;            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                data[i].intOne = i;                data[i].intTwo = i;            }
data[i].intOne = i;
data[i].intOne = i
data[i].intOne
data[i]
data
data
i
i
intOne
i
i
data[i].intTwo = i;
data[i].intTwo = i
data[i].intTwo
data[i]
data
data
i
i
intTwo
i
i
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i].intOne);                printIntLine(data[i].intTwo);            }
printIntLine(data[i].intOne);
printIntLine(data[i].intOne)
printIntLine
printIntLine
data[i].intOne
data[i]
data
data
i
i
intOne
printIntLine(data[i].intTwo);
printIntLine(data[i].intTwo)
printIntLine
printIntLine
data[i].intTwo
data[i]
data
data
i
i
intTwo
-----joern-----
(28,7,0)
(15,56,0)
(1,107,0)
(2,107,0)
(18,57,0)
(52,77,0)
(97,43,0)
(58,97,0)
(103,116,0)
(85,10,0)
(39,62,0)
(87,1,0)
(90,7,0)
(15,4,0)
(80,108,0)
(27,15,0)
(95,112,0)
(70,28,0)
(108,80,0)
(100,28,0)
(115,32,0)
(43,1,0)
(70,77,0)
(55,9,0)
(8,1,0)
(97,58,0)
(98,4,0)
(54,103,0)
(29,102,0)
(90,74,0)
(46,55,0)
(8,36,0)
(84,8,0)
(13,74,0)
(82,31,0)
(77,0,0)
(48,13,0)
(108,99,0)
(70,91,0)
(92,31,0)
(22,1,0)
(80,19,0)
(19,36,0)
(77,36,0)
(49,11,0)
(57,110,0)
(93,19,0)
(110,57,0)
(20,88,0)
(117,29,0)
(17,62,0)
(110,19,0)
(10,31,0)
(5,60,0)
(43,97,0)
(58,116,0)
(62,1,0)
(47,107,0)
(44,88,0)
(32,25,0)
(24,55,0)
(79,107,0)
(57,1,0)
(104,8,0)
(67,35,0)
(56,15,0)
(65,118,0)
(91,70,0)
(1,98,0)
(62,63,0)
(86,97,0)
(69,105,0)
(109,113,0)
(43,25,0)
(103,54,0)
(53,87,0)
(35,1,0)
(11,36,0)
(112,28,0)
(34,92,0)
(51,11,0)
(112,95,0)
(33,74,0)
(89,25,0)
(14,29,0)
(19,0,0)
(4,15,0)
(72,90,0)
(45,13,0)
(73,104,0)
(12,31,0)
(68,95,0)
(35,70,0)
(23,43,0)
(75,110,0)
(38,43,0)
(70,35,0)
(81,87,0)
(37,98,0)
(80,92,0)
(60,36,0)
(57,36,0)
(87,54,0)
(88,31,0)
(16,57,0)
(91,99,0)
(40,56,0)
(96,105,0)
(94,32,0)
(113,74,0)
(64,36,0)
(6,3,0)
(78,80,0)
(114,70,0)
(41,112,0)
(50,74,0)
(101,8,0)
(71,95,0)
(3,25,0)
(98,37,0)
(104,77,0)
(8,104,0)
(98,1,0)
(66,118,0)
(105,59,0)
(87,25,0)
(63,90,0)
(54,28,0)
(63,62,0)
(4,98,0)
(54,87,0)
(26,36,0)
(42,92,0)
(92,80,0)
(95,74,0)
(80,90,0)
(28,74,0)
(35,31,0)
(62,74,0)
(97,90,0)
(76,35,0)
(92,1,0)
(95,1,0)
(30,63,0)
(61,54,0)
(111,25,0)
(118,9,0)
(100,112,1)
(91,70,1)
(90,74,1)
(89,111,1)
(51,60,1)
(54,87,1)
(28,100,1)
(28,74,1)
(15,56,1)
(32,25,1)
(113,74,1)
(3,25,1)
(8,1,1)
(57,36,1)
(43,1,1)
(81,53,1)
(38,32,1)
(57,1,1)
(87,81,1)
(6,103,1)
(41,95,1)
(58,97,1)
(82,12,1)
(77,36,1)
(23,38,1)
(109,28,1)
(19,93,1)
(11,36,1)
(112,95,1)
(84,19,1)
(80,78,1)
(18,11,1)
(86,43,1)
(104,73,1)
(17,13,1)
(113,109,1)
(56,40,1)
(49,51,1)
(52,104,1)
(88,20,1)
(57,16,1)
(63,30,1)
(35,31,1)
(43,23,1)
(62,74,1)
(48,74,1)
(92,1,1)
(73,8,1)
(62,39,1)
(40,27,1)
(51,36,1)
(80,92,1)
(50,106,1)
(60,5,1)
(94,25,1)
(4,15,1)
(54,28,1)
(20,44,1)
(8,101,1)
(110,75,1)
(78,92,1)
(67,108,1)
(21,106,1)
(8,36,1)
(108,80,1)
(62,1,1)
(80,19,1)
(83,88,1)
(30,62,1)
(27,22,1)
(85,91,1)
(63,62,1)
(25,89,1)
(98,37,1)
(48,113,1)
(77,52,1)
(115,94,1)
(95,1,1)
(45,48,1)
(19,36,1)
(13,74,1)
(35,76,1)
(13,45,1)
(94,3,1)
(95,71,1)
(32,115,1)
(110,57,1)
(42,88,1)
(76,67,1)
(80,90,1)
(68,90,1)
(61,87,1)
(26,21,1)
(44,31,1)
(53,58,1)
(101,84,1)
(75,57,1)
(74,33,1)
(1,98,1)
(10,85,1)
(114,35,1)
(12,11,1)
(97,90,1)
(64,26,1)
(92,34,1)
(88,31,1)
(95,74,1)
(104,8,1)
(92,31,1)
(11,49,1)
(98,4,1)
(33,50,1)
(35,1,1)
(70,114,1)
(97,43,1)
(106,1,1)
(87,1,1)
(3,6,1)
(70,28,1)
(5,77,1)
(43,25,1)
(44,10,1)
(83,32,1)
(10,31,1)
(16,18,1)
(60,36,1)
(93,110,1)
(39,17,1)
(21,13,1)
(70,35,1)
(70,77,1)
(97,86,1)
(103,54,1)
(111,21,1)
(31,82,1)
(112,41,1)
(87,25,1)
(71,68,1)
(36,64,1)
(90,72,1)
(54,61,1)
(72,63,1)
(34,42,1)
(80,90,2)
(20,21,2)
(54,28,2)
(49,21,2)
(114,88,2)
(77,36,2)
(85,88,2)
(115,32,2)
(48,13,2)
(62,13,2)
(67,88,2)
(113,13,2)
(92,88,2)
(109,13,2)
(51,11,2)
(97,90,2)
(16,11,2)
(60,11,2)
(32,32,2)
(35,31,2)
(53,32,2)
(43,1,2)
(54,32,2)
(26,21,2)
(73,11,2)
(62,74,2)
(5,11,2)
(30,13,2)
(11,11,2)
(92,31,2)
(88,88,2)
(19,11,2)
(63,62,2)
(60,36,2)
(91,88,2)
(94,21,2)
(111,21,2)
(48,106,2)
(91,70,2)
(104,11,2)
(80,19,2)
(10,31,2)
(32,25,2)
(70,28,2)
(13,13,2)
(13,74,2)
(115,21,2)
(86,32,2)
(18,11,2)
(19,36,2)
(76,88,2)
(100,13,2)
(95,74,2)
(35,88,2)
(61,32,2)
(57,36,2)
(70,88,2)
(1,98,2)
(87,1,2)
(57,1,2)
(95,13,2)
(32,21,2)
(8,1,2)
(45,13,2)
(64,21,2)
(28,13,2)
(51,21,2)
(81,32,2)
(41,13,2)
(31,21,2)
(57,11,2)
(3,32,2)
(75,11,2)
(110,57,2)
(103,32,2)
(3,25,2)
(94,32,2)
(6,32,2)
(97,43,2)
(74,106,2)
(25,21,2)
(50,106,2)
(84,11,2)
(71,13,2)
(97,32,2)
(77,11,2)
(112,95,2)
(11,21,2)
(88,21,2)
(39,13,2)
(45,106,2)
(70,35,2)
(44,21,2)
(17,13,2)
(35,1,2)
(4,15,2)
(87,25,2)
(90,74,2)
(98,4,2)
(11,36,2)
(98,37,2)
(49,11,2)
(38,32,2)
(28,74,2)
(44,88,2)
(108,88,2)
(20,88,2)
(58,32,2)
(62,1,2)
(52,11,2)
(93,11,2)
(63,13,2)
(72,13,2)
(43,32,2)
(80,92,2)
(8,11,2)
(87,32,2)
(12,21,2)
(33,106,2)
(54,87,2)
(78,88,2)
(68,13,2)
(90,13,2)
(70,77,2)
(58,97,2)
(108,80,2)
(95,1,2)
(15,56,2)
(112,13,2)
(8,36,2)
(110,11,2)
(113,74,2)
(34,88,2)
(43,25,2)
(13,106,2)
(36,21,2)
(10,88,2)
(103,54,2)
(88,31,2)
(101,11,2)
(92,1,2)
(104,8,2)
(82,21,2)
(89,21,2)
(80,88,2)
(23,32,2)
(42,88,2)
-----------------------------------
(0,)
(1,data = (twoIntsStruct *)
(2,data)
(3,i++)
(4,ALLOCA(10*sizeof(twoIntsStruct)
(5,i)
(6,i)
(7,)
(8,data[i])
(9,)
(10,i++)
(11,i<10)
(12,i)
(13,i<10)
(14,i)
(15,10*sizeof(twoIntsStruct)
(16,i)
(17,data)
(18,data)
(19,data[i].intOne = i)
(20,10)
(21,globalReturnsTrueOrFalse()
(22,data)
(23,i)
(24,i)
(25,i=0)
(26,i)
(27,10)
(28,data[i].intTwo = i)
(29,)
(30,intOne)
(31,i=0)
(32,i<10)
(33,0)
(34,i)
(35,data[i])
(36,i=0)
(37,twoIntsStruct *)
(38,data)
(39,i)
(40,twoIntsStruct)
(41,intTwo)
(42,data)
(43,data[i])
(44,i)
(45,10)
(46,for(i=0; i<10; i++)
(47,if(globalReturnsTrueOrFalse()
(48,i)
(49,10)
(50,i)
(51,i)
(52,i)
(53,data)
(54,data[i].intTwo)
(55,)
(56,sizeof(twoIntsStruct)
(57,data[i])
(58,printIntLine(data[i].intOne)
(59,)
(60,i++)
(61,intTwo)
(62,data[i])
(63,data[i].intOne)
(64,0)
(65,i)
(66,for(i=0; i<10; i++)
(67,data)
(68,data)
(69,i)
(70,data[i].intTwo)
(71,i)
(72,i)
(73,intTwo)
(74,i=0)
(75,intOne)
(76,i)
(77,data[i].intTwo = i)
(78,intOne)
(79,if(globalReturnsTrueOrFalse()
(80,data[i].intOne)
(81,i)
(82,0)
(83,RET)
(84,data)
(85,i)
(86,intOne)
(87,data[i])
(88,i<10)
(89,0)
(90,data[i].intOne = i)
(91,printIntLine(data[i].intTwo)
(92,data[i])
(93,i)
(94,i)
(95,data[i])
(96,for(i=0; i<10; i++)
(97,data[i].intOne)
(98,(twoIntsStruct *)
(99,)
(100,i)
(101,i)
(102,)
(103,printIntLine(data[i].intTwo)
(104,data[i].intTwo)
(105,)
(106,globalReturnsTrueOrFalse()
(107,)
(108,printIntLine(data[i].intOne)
(109,i)
(110,data[i].intOne)
(111,i)
(112,data[i].intTwo)
(113,i++)
(114,intTwo)
(115,10)
(116,)
(117,for(i=0; i<10; i++)
(118,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^