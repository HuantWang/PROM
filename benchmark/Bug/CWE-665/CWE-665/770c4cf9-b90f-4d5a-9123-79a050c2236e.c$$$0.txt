-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(18,25,0)
(12,20,0)
(29,39,0)
(7,37,0)
(23,39,0)
(16,20,0)
(8,15,0)
(20,36,0)
(23,30,0)
(22,32,0)
(15,18,0)
(10,34,0)
(32,22,0)
(25,17,0)
(33,9,0)
(40,32,0)
(17,34,0)
(37,34,0)
(39,23,0)
(15,6,0)
(26,17,0)
(31,22,0)
(17,25,0)
(18,15,0)
(4,34,0)
(35,5,0)
(13,10,0)
(15,20,0)
(11,5,0)
(38,25,0)
(5,17,0)
(3,26,0)
(6,15,0)
(2,26,0)
(22,20,0)
(14,36,0)
(5,34,0)
(37,17,0)
(28,17,0)
(25,18,0)
(24,0,0)
(1,6,0)
(21,0,0)
(10,17,0)
(0,36,0)
(19,33,0)
(25,38,0)
(16,12,1)
(11,26,1)
(22,20,1)
(3,17,1)
(32,40,1)
(11,23,1)
(13,5,1)
(40,31,1)
(10,17,1)
(15,20,1)
(27,37,1)
(7,10,1)
(25,38,1)
(19,22,1)
(28,22,1)
(26,17,1)
(23,39,1)
(39,29,1)
(33,19,1)
(25,18,1)
(27,33,1)
(22,32,1)
(1,8,1)
(15,6,1)
(5,35,1)
(8,28,1)
(31,20,1)
(18,15,1)
(37,17,1)
(2,3,1)
(5,17,1)
(10,13,1)
(6,1,1)
(26,2,1)
(29,26,1)
(20,16,1)
(17,25,1)
(35,11,1)
(37,7,1)
(17,25,2)
(5,22,2)
(37,17,2)
(23,39,2)
(22,20,2)
(26,17,2)
(2,22,2)
(23,26,2)
(15,22,2)
(28,22,2)
(5,17,2)
(22,32,2)
(10,22,2)
(6,22,2)
(35,22,2)
(8,22,2)
(13,22,2)
(33,22,2)
(39,26,2)
(18,15,2)
(3,22,2)
(29,26,2)
(11,22,2)
(1,22,2)
(25,38,2)
(15,6,2)
(26,22,2)
(15,20,2)
(37,22,2)
(17,22,2)
(18,22,2)
(10,17,2)
(25,22,2)
(7,22,2)
(19,22,2)
(25,18,2)
-----------------------------------
(0,)
(1,char)
(2,NULL)
(3,myString)
(4,if (myString == NULL)
(5,strcpy(myString, HELLO_STRING)
(6,sizeof(char)
(7,myString)
(8,data)
(9,)
(10,printLine(myString)
(11,myString)
(12,data)
(13,myString)
(14,data)
(15,data*sizeof(char)
(16,CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData)
(17,myString = (char *)
(18,malloc(data*sizeof(char)
(19,"Input is less than the length of the source string")
(20,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData)
(21,myString)
(22,data > strlen(HELLO_STRING)
(23,exit(-1)
(24,if (data > strlen(HELLO_STRING)
(25,(char *)
(26,myString == NULL)
(27,RET)
(28,myString)
(29,1)
(30,)
(31,data)
(32,strlen(HELLO_STRING)
(33,printLine("Input is less than the length of the source string")
(34,)
(35,HELLO_STRING)
(36,)
(37,free(myString)
(38,char *)
(39,-1)
(40,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^