-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_03_bad()
{
    double * data;
    data = (double *)ALLOCA(10*sizeof(double));
    if(5==5)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
34,35
36,37
36,38
37,38
37,39
40,41
41,42
41,43
42,43
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,32,33,35,38,39,44,46,51,52,55,56,59,64,67,69
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
37,38
37,39
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_03_bad(){    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_03_bad
{    double * data;    data = (double *)ALLOCA(10*sizeof(double));    if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)ALLOCA(10*sizeof(double));
data = (double *)ALLOCA(10*sizeof(double))
data
data
(double *)ALLOCA(10*sizeof(double))
double *
double
*
*
ALLOCA(10*sizeof(double))
ALLOCA
ALLOCA
10*sizeof(double)
10
sizeof(double)
double
double

if(5==5)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(30,16,0)
(20,28,0)
(31,10,0)
(24,34,0)
(7,24,0)
(13,12,0)
(28,36,0)
(6,29,0)
(10,36,0)
(35,10,0)
(19,20,0)
(0,11,0)
(2,29,0)
(8,25,0)
(17,31,0)
(26,21,0)
(14,29,0)
(28,20,0)
(24,29,0)
(33,24,0)
(22,21,0)
(9,16,0)
(27,28,0)
(10,31,0)
(5,25,0)
(24,20,0)
(20,16,0)
(34,1,0)
(25,29,0)
(15,0,0)
(18,0,0)
(36,10,0)
(34,24,0)
(28,27,0)
(3,14,0)
(36,28,0)
(32,16,0)
(23,12,0)
(34,24,1)
(8,5,1)
(33,7,1)
(4,21,1)
(29,6,1)
(17,35,1)
(31,17,1)
(21,22,1)
(3,34,1)
(23,13,1)
(36,10,1)
(25,29,1)
(7,25,1)
(35,19,1)
(24,29,1)
(25,8,1)
(28,36,1)
(5,29,1)
(4,25,1)
(14,3,1)
(13,20,1)
(6,2,1)
(26,12,1)
(24,33,1)
(10,31,1)
(28,27,1)
(14,29,1)
(24,20,1)
(5,14,1)
(22,26,1)
(12,23,1)
(20,28,1)
(2,21,1)
(2,21,2)
(28,36,2)
(25,21,2)
(3,25,2)
(7,25,2)
(28,27,2)
(20,28,2)
(25,25,2)
(8,25,2)
(10,31,2)
(24,29,2)
(34,24,2)
(8,21,2)
(29,21,2)
(34,25,2)
(6,21,2)
(24,20,2)
(33,25,2)
(5,21,2)
(5,25,2)
(36,10,2)
(14,29,2)
(25,29,2)
(14,25,2)
(24,25,2)
-----------------------------------
(0,)
(1,)
(2,i)
(3,i)
(4,RET)
(5,i)
(6,0)
(7,data)
(8,10)
(9,if(5==5)
(10,10*sizeof(double)
(11,)
(12,5==5)
(13,5)
(14,i++)
(15,for(i=0; i<10; i++)
(16,)
(17,double)
(18,i)
(19,data)
(20,data = (double *)
(21,5==5)
(22,5)
(23,5)
(24,data[i])
(25,i<10)
(26,5)
(27,double *)
(28,(double *)
(29,i=0)
(30,if(5==5)
(31,sizeof(double)
(32,data)
(33,i)
(34,printDoubleLine(data[i])
(35,10)
(36,ALLOCA(10*sizeof(double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^