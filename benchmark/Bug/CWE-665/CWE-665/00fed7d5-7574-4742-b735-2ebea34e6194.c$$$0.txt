-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType myStruct){    size_t data = myStruct.structFirst;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,26,0)
(27,26,0)
(22,29,0)
(6,33,0)
(36,25,0)
(40,23,0)
(2,39,0)
(24,28,0)
(3,0,0)
(11,28,0)
(27,20,0)
(15,0,0)
(26,0,0)
(38,11,0)
(25,28,0)
(35,17,0)
(10,24,0)
(26,27,0)
(28,25,0)
(16,12,0)
(9,17,0)
(39,28,0)
(40,19,0)
(5,42,0)
(42,31,0)
(29,37,0)
(32,23,0)
(37,26,0)
(12,33,0)
(25,36,0)
(41,25,0)
(7,37,0)
(4,27,0)
(33,12,0)
(30,3,0)
(37,36,0)
(34,9,0)
(9,28,0)
(24,17,0)
(13,24,0)
(12,26,0)
(1,11,0)
(36,37,0)
(39,17,0)
(23,40,0)
(43,28,0)
(25,41,0)
(37,29,0)
(28,17,0)
(8,3,0)
(21,27,0)
(10,11,1)
(18,9,1)
(6,16,1)
(11,28,1)
(34,39,1)
(12,26,1)
(40,23,1)
(22,7,1)
(27,20,1)
(36,37,1)
(37,29,1)
(18,42,1)
(9,34,1)
(37,26,1)
(5,12,1)
(1,38,1)
(24,28,1)
(43,12,1)
(13,10,1)
(39,28,1)
(29,22,1)
(25,36,1)
(25,41,1)
(38,28,1)
(12,33,1)
(23,32,1)
(21,4,1)
(27,21,1)
(39,2,1)
(10,40,1)
(2,24,1)
(16,26,1)
(32,11,1)
(9,28,1)
(33,6,1)
(4,14,1)
(26,27,1)
(24,13,1)
(7,43,1)
(42,5,1)
(11,1,1)
(28,25,1)
(11,28,2)
(40,23,2)
(34,12,2)
(10,12,2)
(12,33,2)
(5,12,2)
(9,12,2)
(29,12,2)
(37,26,2)
(12,26,2)
(13,12,2)
(43,12,2)
(25,36,2)
(38,12,2)
(25,41,2)
(36,37,2)
(22,12,2)
(37,29,2)
(42,12,2)
(27,20,2)
(37,12,2)
(32,11,2)
(11,12,2)
(39,28,2)
(2,12,2)
(28,12,2)
(36,12,2)
(1,12,2)
(25,12,2)
(40,11,2)
(26,27,2)
(39,12,2)
(7,12,2)
(24,28,2)
(28,25,2)
(24,12,2)
(9,28,2)
(23,11,2)
-----------------------------------
(0,)
(1,NULL)
(2,myString)
(3,)
(4,myStruct)
(5,"Input is less than the length of the source string")
(6,HELLO_STRING)
(7,data)
(8,myString)
(9,free(myString)
(10,myString)
(11,myString == NULL)
(12,data > wcslen(HELLO_STRING)
(13,HELLO_STRING)
(14,data)
(15,data)
(16,data)
(17,)
(18,RET)
(19,)
(20,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_67_structType myStruct)
(21,structFirst)
(22,wchar_t)
(23,-1)
(24,wcscpy(myString, HELLO_STRING)
(25,(wchar_t *)
(26,data = myStruct.structFirst)
(27,myStruct.structFirst)
(28,myString = (wchar_t *)
(29,sizeof(wchar_t)
(30,if (data > wcslen(HELLO_STRING)
(31,)
(32,1)
(33,wcslen(HELLO_STRING)
(34,myString)
(35,if (myString == NULL)
(36,malloc(data*sizeof(wchar_t)
(37,data*sizeof(wchar_t)
(38,myString)
(39,printWLine(myString)
(40,exit(-1)
(41,wchar_t *)
(42,printLine("Input is less than the length of the source string")
(43,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^