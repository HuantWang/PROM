-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,25,28,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
23,24
23,25
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(48,23,0)
(8,20,0)
(42,11,0)
(44,29,0)
(3,20,0)
(45,3,0)
(20,3,0)
(37,5,0)
(0,17,0)
(35,28,0)
(4,2,0)
(9,25,0)
(26,48,0)
(16,5,0)
(2,49,0)
(3,5,0)
(15,23,0)
(34,48,0)
(10,14,0)
(17,23,0)
(15,48,0)
(11,42,0)
(41,15,0)
(3,2,0)
(14,48,0)
(33,34,0)
(14,23,0)
(44,31,0)
(43,39,0)
(42,48,0)
(13,3,0)
(13,42,0)
(5,39,0)
(19,2,0)
(32,34,0)
(18,19,0)
(19,5,0)
(21,15,0)
(46,39,0)
(2,22,0)
(19,40,0)
(40,19,0)
(48,42,0)
(3,13,0)
(17,48,0)
(6,39,0)
(1,35,0)
(42,13,0)
(22,2,0)
(12,31,0)
(31,44,0)
(27,25,0)
(25,30,0)
(47,40,0)
(36,23,0)
(15,21,1)
(14,10,1)
(38,35,1)
(2,22,1)
(18,24,1)
(3,2,1)
(22,4,1)
(17,48,1)
(17,0,1)
(24,2,1)
(42,13,1)
(21,41,1)
(24,7,1)
(40,47,1)
(20,8,1)
(38,14,1)
(47,18,1)
(42,11,1)
(3,5,1)
(16,37,1)
(3,20,1)
(15,48,1)
(13,3,1)
(12,34,1)
(19,40,1)
(14,48,1)
(34,48,1)
(5,16,1)
(48,42,1)
(26,19,1)
(35,1,1)
(10,17,1)
(1,19,1)
(41,34,1)
(31,12,1)
(41,44,1)
(33,32,1)
(44,31,1)
(38,24,1)
(0,15,1)
(7,5,1)
(8,45,1)
(32,48,1)
(34,33,1)
(4,7,1)
(19,5,1)
(19,2,1)
(45,26,1)
(14,19,2)
(22,7,2)
(45,19,2)
(2,7,2)
(15,19,2)
(14,48,2)
(48,42,2)
(18,24,2)
(17,48,2)
(13,3,2)
(41,19,2)
(2,22,2)
(19,24,2)
(31,34,2)
(3,5,2)
(19,5,2)
(40,24,2)
(42,11,2)
(1,19,2)
(47,24,2)
(44,34,2)
(35,19,2)
(0,19,2)
(3,19,2)
(15,48,2)
(12,34,2)
(20,19,2)
(3,20,2)
(17,19,2)
(4,7,2)
(33,19,2)
(8,19,2)
(48,19,2)
(13,19,2)
(19,40,2)
(34,48,2)
(26,19,2)
(42,13,2)
(44,31,2)
(19,2,2)
(21,19,2)
(3,2,2)
(42,19,2)
(34,19,2)
(10,19,2)
(32,19,2)
-----------------------------------
(0,myString)
(1,"Input is less than the length of the source string")
(2,data = rand()
(3,data*sizeof(wchar_t)
(4,data)
(5,data = 0)
(6,if(staticReturnsTrue()
(7,staticReturnsTrue()
(8,wchar_t)
(9,myString)
(10,myString)
(11,wchar_t *)
(12,1)
(13,malloc(data*sizeof(wchar_t)
(14,free(myString)
(15,wcscpy(myString, HELLO_STRING)
(16,0)
(17,printWLine(myString)
(18,data)
(19,data > wcslen(HELLO_STRING)
(20,sizeof(wchar_t)
(21,HELLO_STRING)
(22,rand()
(23,)
(24,staticReturnsTrue()
(25,)
(26,myString)
(27,if (data > wcslen(HELLO_STRING)
(28,)
(29,)
(30,)
(31,-1)
(32,myString)
(33,NULL)
(34,myString == NULL)
(35,printLine("Input is less than the length of the source string")
(36,if (myString == NULL)
(37,data)
(38,RET)
(39,)
(40,wcslen(HELLO_STRING)
(41,myString)
(42,(wchar_t *)
(43,if(staticReturnsTrue()
(44,exit(-1)
(45,data)
(46,data)
(47,HELLO_STRING)
(48,myString = (wchar_t *)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^