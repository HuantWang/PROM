-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_03_bad()
{
    double * data;
    data = (double *)malloc(10*sizeof(double));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = (double)i;
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printDoubleLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
49,50
50,51
50,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
84,85
84,86
85,86
85,87
88,89
89,90
89,91
90,91
91,92
91,93
93,94
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
105,106
106,107
108,109
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,51,53,58,59,62,65,66,69,75,77,80,81,83,86,87,92,94,99,100,103,104,107,112,115,117
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
72,73
72,74
85,86
85,87
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_03_bad(){    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_03_bad()
CWE457_Use_of_Uninitialized_Variable__double_array_malloc_partial_init_03_bad
{    double * data;    data = (double *)malloc(10*sizeof(double));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }}
double * data;
double * data;
double
* data
*
data
data = (double *)malloc(10*sizeof(double));
data = (double *)malloc(10*sizeof(double))
data
data
(double *)malloc(10*sizeof(double))
double *
double
*
*
malloc(10*sizeof(double))
malloc
malloc
10*sizeof(double)
10
sizeof(double)
double
double

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = (double)i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = (double)i;            }
data[i] = (double)i;
data[i] = (double)i
data[i]
data
data
i
i
(double)i
double
double

i
i
if(5==5)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
5==5
5
5
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printDoubleLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printDoubleLine(data[i]);            }
printDoubleLine(data[i]);
printDoubleLine(data[i])
printDoubleLine
printDoubleLine
data[i]
data
data
i
i
-----joern-----
(4,26,0)
(26,4,0)
(43,44,0)
(6,43,0)
(14,0,0)
(13,48,0)
(25,40,0)
(26,32,0)
(44,43,0)
(20,24,0)
(31,41,0)
(3,45,0)
(12,13,0)
(28,17,0)
(42,66,0)
(54,23,0)
(41,40,0)
(16,8,0)
(1,27,0)
(64,44,0)
(4,40,0)
(24,19,0)
(9,0,0)
(33,11,0)
(4,63,0)
(21,11,0)
(0,27,0)
(62,35,0)
(65,46,0)
(13,12,0)
(53,57,0)
(45,40,0)
(18,35,0)
(0,9,0)
(17,27,0)
(57,8,0)
(51,45,0)
(59,39,0)
(36,17,0)
(45,8,0)
(43,40,0)
(46,65,0)
(39,8,0)
(8,57,0)
(45,26,0)
(63,4,0)
(10,66,0)
(8,11,0)
(0,26,0)
(56,13,0)
(0,8,0)
(47,24,0)
(15,40,0)
(9,29,0)
(66,38,0)
(52,65,0)
(49,23,0)
(37,11,0)
(22,4,0)
(50,39,0)
(2,27,0)
(46,60,0)
(30,5,0)
(48,13,0)
(57,48,0)
(34,11,0)
(61,12,0)
(58,0,0)
(48,57,0)
(5,27,0)
(57,53,0)
(55,44,0)
(22,45,1)
(7,17,1)
(14,58,1)
(55,64,1)
(64,6,1)
(15,23,1)
(36,28,1)
(49,39,1)
(12,61,1)
(57,48,1)
(27,1,1)
(0,27,1)
(1,2,1)
(17,27,1)
(7,35,1)
(25,15,1)
(48,13,1)
(61,56,1)
(30,9,1)
(6,41,1)
(62,43,1)
(0,26,1)
(46,65,1)
(28,27,1)
(4,40,1)
(23,54,1)
(9,0,1)
(44,55,1)
(45,8,1)
(59,8,1)
(26,4,1)
(13,12,1)
(35,18,1)
(0,8,1)
(4,22,1)
(5,30,1)
(17,36,1)
(43,44,1)
(6,40,1)
(45,3,1)
(41,31,1)
(43,40,1)
(39,50,1)
(45,40,1)
(8,57,1)
(54,49,1)
(0,14,1)
(31,26,1)
(51,43,1)
(39,8,1)
(28,5,1)
(62,23,1)
(52,39,1)
(50,59,1)
(58,17,1)
(41,40,1)
(49,46,1)
(57,53,1)
(56,16,1)
(18,62,1)
(65,52,1)
(3,51,1)
(4,63,1)
(5,27,1)
(2,35,1)
(40,25,1)
(55,23,2)
(17,17,2)
(5,17,2)
(57,53,2)
(43,40,2)
(9,0,2)
(44,23,2)
(1,35,2)
(6,23,2)
(46,65,2)
(27,35,2)
(0,27,2)
(40,23,2)
(5,27,2)
(44,43,2)
(51,43,2)
(65,39,2)
(45,43,2)
(9,17,2)
(28,35,2)
(55,43,2)
(64,23,2)
(17,27,2)
(46,39,2)
(36,35,2)
(30,17,2)
(48,13,2)
(43,44,2)
(3,43,2)
(14,17,2)
(13,12,2)
(43,43,2)
(43,23,2)
(39,8,2)
(45,40,2)
(4,40,2)
(8,57,2)
(45,8,2)
(28,17,2)
(41,40,2)
(0,17,2)
(17,35,2)
(64,43,2)
(4,43,2)
(26,43,2)
(25,23,2)
(36,17,2)
(6,43,2)
(57,48,2)
(0,26,2)
(22,43,2)
(31,43,2)
(26,4,2)
(4,63,2)
(0,8,2)
(41,43,2)
(52,39,2)
(15,23,2)
(58,17,2)
(2,35,2)
-----------------------------------
(0,data[i])
(1,0)
(2,i)
(3,i)
(4,(double)
(5,i++)
(6,i)
(7,RET)
(8,data = (double *)
(9,printDoubleLine(data[i])
(10,i)
(11,)
(12,sizeof(double)
(13,10*sizeof(double)
(14,i)
(15,i)
(16,data)
(17,i<10)
(18,5)
(19,)
(20,i)
(21,if (data == NULL)
(22,i)
(23,5==5)
(24,)
(25,0)
(26,data[i] = (double)
(27,i=0)
(28,i)
(29,)
(30,i)
(31,i)
(32,)
(33,if(5==5)
(34,data)
(35,5==5)
(36,10)
(37,if(5==5)
(38,)
(39,data == NULL)
(40,i=0)
(41,i++)
(42,for(i=0; i<10; i++)
(43,i<(10/2)
(44,10/2)
(45,data[i])
(46,exit(-1)
(47,for(i=0; i<(10/2)
(48,malloc(10*sizeof(double)
(49,5)
(50,NULL)
(51,data)
(52,1)
(53,double *)
(54,5)
(55,2)
(56,10)
(57,(double *)
(58,data)
(59,data)
(60,)
(61,double)
(62,5)
(63,double)
(64,10)
(65,-1)
(66,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^