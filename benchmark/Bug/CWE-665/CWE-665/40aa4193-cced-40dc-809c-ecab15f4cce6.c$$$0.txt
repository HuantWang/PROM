-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,69,73,75,79,81,86,87
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
-----guardedBy-----
41,69
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61_bad(){    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61_bad
{    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data);
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data)
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(27,7,0)
(11,36,0)
(16,6,0)
(11,20,0)
(6,20,0)
(28,7,0)
(5,23,0)
(19,3,0)
(34,16,0)
(31,33,0)
(20,15,0)
(34,33,0)
(35,33,0)
(25,20,0)
(36,15,0)
(35,22,0)
(13,29,0)
(17,31,0)
(6,16,0)
(1,35,0)
(10,34,0)
(16,34,0)
(2,36,0)
(6,29,0)
(29,6,0)
(31,22,0)
(0,3,0)
(4,8,0)
(12,27,0)
(27,20,0)
(14,36,0)
(18,33,0)
(3,15,0)
(33,34,0)
(21,35,0)
(26,6,0)
(34,10,0)
(33,22,0)
(20,11,0)
(7,27,0)
(8,30,0)
(32,11,0)
(23,22,0)
(23,33,0)
(9,15,0)
(26,18,1)
(33,34,1)
(27,20,1)
(16,6,1)
(36,2,1)
(5,35,1)
(31,17,1)
(11,36,1)
(20,11,1)
(23,33,1)
(4,27,1)
(35,1,1)
(23,5,1)
(34,10,1)
(13,26,1)
(18,27,1)
(31,33,1)
(2,14,1)
(6,29,1)
(28,12,1)
(25,36,1)
(6,20,1)
(17,23,1)
(32,25,1)
(7,28,1)
(12,20,1)
(34,16,1)
(11,32,1)
(8,4,1)
(29,13,1)
(24,31,1)
(35,33,1)
(1,21,1)
(21,33,1)
(24,8,1)
(27,7,1)
(31,27,2)
(4,27,2)
(33,27,2)
(34,27,2)
(34,10,2)
(33,34,2)
(1,27,2)
(23,27,2)
(20,11,2)
(27,7,2)
(21,27,2)
(8,27,2)
(6,20,2)
(11,36,2)
(18,27,2)
(6,27,2)
(23,33,2)
(5,27,2)
(13,27,2)
(27,20,2)
(31,33,2)
(6,29,2)
(16,27,2)
(35,33,2)
(26,27,2)
(17,27,2)
(34,16,2)
(35,27,2)
(16,6,2)
(29,27,2)
-----------------------------------
(0,myString)
(1,HELLO_STRING)
(2,0)
(3,)
(4,"Input is less than the length of the source string")
(5,myString)
(6,data*sizeof(wchar_t)
(7,wcslen(HELLO_STRING)
(8,printLine("Input is less than the length of the source string")
(9,data)
(10,wchar_t *)
(11,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data)
(12,data)
(13,wchar_t)
(14,data)
(15,)
(16,malloc(data*sizeof(wchar_t)
(17,myString)
(18,myString)
(19,if (data > wcslen(HELLO_STRING)
(20,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(data)
(21,myString)
(22,)
(23,printWLine(myString)
(24,RET)
(25,data)
(26,data)
(27,data > wcslen(HELLO_STRING)
(28,HELLO_STRING)
(29,sizeof(wchar_t)
(30,)
(31,free(myString)
(32,data)
(33,myString = (wchar_t *)
(34,(wchar_t *)
(35,wcscpy(myString, HELLO_STRING)
(36,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^