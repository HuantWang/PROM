-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_16_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    while(1)
    {
        /* POTENTIAL FLAW: Partially initialize data */
        {
            int i;
            for(i=0; i<(10/2); i++)
            {
                data[i] = i;
            }
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
46,47
46,48
47,48
48,49
48,50
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
61,62
62,63
62,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
71,73
72,73
74,75
76,77
79,80
79,81
81,82
81,83
82,83
82,84
83,84
84,85
84,86
86,87
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
98,99
99,100
101,102
102,103
103,104
103,105
104,105
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,56,57,60,63,64,67,73,75,77,78,80,85,87,92,93,96,97,100,105,108,110,111
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
70,71
70,72
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_16_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }        break;    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_16_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_partial_init_16_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }        break;    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
while(1)    {        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }        break;    }
1
{        /* POTENTIAL FLAW: Partially initialize data */        {            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }        break;    }
{            int i;            for(i=0; i<(10/2); i++)            {                data[i] = i;            }        }
int i;
int i;
int
i
i
for(i=0; i<(10/2); i++)            {                data[i] = i;            }
i=0;
i=0
i
i
0
i<(10/2)
i
i
(10/2)
10/2
10
2
i++
i
i
{                data[i] = i;            }
data[i] = i;
data[i] = i
data[i]
data
data
i
i
i
i
break;
while(1)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }        break;    }
1
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }        break;    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
break;
-----joern-----
(59,39,0)
(5,56,0)
(32,26,0)
(38,12,0)
(42,36,0)
(22,37,0)
(37,41,0)
(40,56,0)
(28,13,0)
(22,18,0)
(39,50,0)
(6,37,0)
(23,41,0)
(43,6,0)
(62,38,0)
(18,56,0)
(33,36,0)
(12,38,0)
(53,0,0)
(52,41,0)
(50,39,0)
(24,6,0)
(12,3,0)
(26,32,0)
(51,0,0)
(17,52,0)
(35,58,0)
(37,19,0)
(47,30,0)
(30,26,0)
(57,41,0)
(30,47,0)
(48,50,0)
(39,41,0)
(9,13,0)
(7,6,0)
(25,45,0)
(55,18,0)
(54,51,0)
(30,18,0)
(18,30,0)
(20,2,0)
(27,45,0)
(49,22,0)
(32,2,0)
(6,18,0)
(58,11,0)
(46,37,0)
(60,42,0)
(7,61,0)
(45,0,0)
(22,41,0)
(2,32,0)
(6,7,0)
(15,56,0)
(26,30,0)
(14,58,0)
(8,42,0)
(10,56,0)
(13,18,0)
(1,11,0)
(6,0,0)
(21,32,0)
(4,0,0)
(31,50,0)
(44,22,0)
(2,20,1)
(49,39,1)
(30,26,1)
(12,38,1)
(41,57,1)
(16,33,1)
(34,13,1)
(24,43,1)
(4,16,1)
(45,0,1)
(37,46,1)
(6,0,1)
(39,50,1)
(38,62,1)
(6,37,1)
(27,0,1)
(20,21,1)
(16,34,1)
(34,12,1)
(22,41,1)
(37,41,1)
(28,18,1)
(31,48,1)
(62,13,1)
(43,45,1)
(50,31,1)
(29,16,1)
(29,1,1)
(18,30,1)
(51,0,1)
(53,4,1)
(0,53,1)
(13,18,1)
(23,34,1)
(44,49,1)
(7,6,1)
(21,55,1)
(27,51,1)
(39,41,1)
(22,44,1)
(9,28,1)
(13,9,1)
(57,23,1)
(48,59,1)
(59,41,1)
(26,32,1)
(59,52,1)
(54,7,1)
(25,27,1)
(52,17,1)
(17,37,1)
(30,47,1)
(1,45,1)
(6,24,1)
(46,22,1)
(33,39,1)
(52,41,1)
(32,2,1)
(6,18,1)
(22,18,1)
(51,54,1)
(45,25,1)
(48,39,2)
(49,39,2)
(59,34,2)
(50,34,2)
(48,34,2)
(52,39,2)
(30,26,2)
(37,39,2)
(53,16,2)
(12,38,2)
(4,16,2)
(6,37,2)
(31,39,2)
(26,32,2)
(37,41,2)
(7,6,2)
(45,0,2)
(27,16,2)
(22,41,2)
(7,45,2)
(25,45,2)
(57,34,2)
(33,34,2)
(18,30,2)
(6,18,2)
(39,50,2)
(6,0,2)
(43,45,2)
(46,39,2)
(32,2,2)
(41,34,2)
(45,45,2)
(39,39,2)
(31,34,2)
(30,47,2)
(38,13,2)
(22,18,2)
(59,39,2)
(23,34,2)
(50,39,2)
(22,39,2)
(13,18,2)
(1,16,2)
(51,0,2)
(12,13,2)
(45,16,2)
(54,45,2)
(62,13,2)
(17,39,2)
(24,45,2)
(27,45,2)
(44,39,2)
(6,45,2)
(0,16,2)
(25,16,2)
(51,45,2)
(52,41,2)
(39,34,2)
(39,41,2)
-----------------------------------
(0,i=0)
(1,break;)
(2,sizeof(int)
(3,)
(4,i)
(5,if (data == NULL)
(6,data[i])
(7,printIntLine(data[i])
(8,for(i=0; i<(10/2)
(9,NULL)
(10,while(1)
(11,)
(12,exit(-1)
(13,data == NULL)
(14,for(i=0; i<10; i++)
(15,data)
(16,1)
(17,i)
(18,data = (int *)
(19,)
(20,int)
(21,10)
(22,data[i])
(23,i)
(24,i)
(25,10)
(26,malloc(10*sizeof(int)
(27,i)
(28,data)
(29,RET)
(30,(int *)
(31,2)
(32,10*sizeof(int)
(33,break;)
(34,1)
(35,i)
(36,)
(37,data[i] = i)
(38,-1)
(39,i<(10/2)
(40,while(1)
(41,i=0)
(42,)
(43,data)
(44,i)
(45,i<10)
(46,i)
(47,int *)
(48,10)
(49,data)
(50,10/2)
(51,i++)
(52,i++)
(53,0)
(54,i)
(55,data)
(56,)
(57,0)
(58,)
(59,i)
(60,i)
(61,)
(62,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^