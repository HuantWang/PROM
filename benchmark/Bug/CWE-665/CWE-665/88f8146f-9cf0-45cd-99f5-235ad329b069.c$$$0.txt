-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
57,58
57,59
60,61
60,62
60,63
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
69,74
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
83,84
85,86
86,87
86,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
124,125
124,126
125,126
-----nextToken-----
2,4,9,11,15,17,21,22,26,28,29,32,37,38,40,45,47,51,52,56,58,59,63,66,68,73,76,78,81,84,87,88,92,94,99,101,105,107,109,113,115,119,121,126,127
-----computeFrom-----
19,20
19,21
34,35
34,36
61,62
61,63
71,72
71,73
82,83
82,84
90,91
90,92
-----guardedBy-----
68,109
63,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(31,45,0)
(14,7,0)
(7,32,0)
(1,2,0)
(32,41,0)
(38,2,0)
(15,46,0)
(25,38,0)
(34,9,0)
(46,15,0)
(35,2,0)
(16,32,0)
(43,5,0)
(11,36,0)
(56,44,0)
(12,14,0)
(50,21,0)
(10,26,0)
(7,14,0)
(28,21,0)
(52,46,0)
(26,21,0)
(14,46,0)
(4,14,0)
(9,41,0)
(36,46,0)
(29,41,0)
(30,11,0)
(41,32,0)
(45,47,0)
(47,45,0)
(41,23,0)
(27,15,0)
(55,35,0)
(37,41,0)
(47,20,0)
(32,16,0)
(37,23,0)
(46,26,0)
(9,23,0)
(28,38,0)
(51,55,0)
(44,41,0)
(22,28,0)
(29,23,0)
(8,43,0)
(19,37,0)
(39,41,0)
(17,26,0)
(58,36,0)
(32,7,0)
(53,10,0)
(49,4,0)
(40,55,0)
(6,21,0)
(35,21,0)
(38,28,0)
(18,15,0)
(2,21,0)
(54,2,0)
(57,35,0)
(33,28,0)
(0,9,0)
(42,23,0)
(36,11,0)
(14,4,0)
(3,10,0)
(48,44,0)
(13,29,0)
(36,11,1)
(0,44,1)
(24,37,1)
(13,9,1)
(57,55,1)
(33,22,1)
(31,44,1)
(35,57,1)
(49,12,1)
(18,27,1)
(0,47,1)
(29,13,1)
(32,7,1)
(19,29,1)
(35,2,1)
(24,43,1)
(37,41,1)
(2,54,1)
(56,41,1)
(38,25,1)
(9,41,1)
(7,14,1)
(32,16,1)
(25,33,1)
(27,52,1)
(30,58,1)
(54,1,1)
(12,39,1)
(37,19,1)
(15,18,1)
(46,15,1)
(14,4,1)
(36,46,1)
(44,48,1)
(47,45,1)
(44,41,1)
(48,56,1)
(43,8,1)
(28,38,1)
(14,46,1)
(45,31,1)
(52,35,1)
(22,2,1)
(4,49,1)
(11,30,1)
(29,41,1)
(51,40,1)
(40,28,1)
(41,32,1)
(8,36,1)
(34,0,1)
(58,46,1)
(39,36,1)
(55,51,1)
(38,2,1)
(9,34,1)
(47,44,2)
(19,36,2)
(12,36,2)
(41,36,2)
(46,15,2)
(31,44,2)
(14,46,2)
(32,36,2)
(45,44,2)
(7,36,2)
(8,36,2)
(36,46,2)
(9,36,2)
(43,36,2)
(9,41,2)
(14,4,2)
(0,36,2)
(35,2,2)
(28,38,2)
(13,36,2)
(32,16,2)
(36,11,2)
(49,36,2)
(29,41,2)
(44,36,2)
(38,2,2)
(29,36,2)
(37,36,2)
(39,36,2)
(56,36,2)
(32,7,2)
(4,36,2)
(44,41,2)
(37,41,2)
(48,36,2)
(41,32,2)
(47,45,2)
(7,14,2)
(34,36,2)
(14,36,2)
-----------------------------------
(0,myString)
(1,data)
(2,data = 0)
(3,myString)
(4,sizeof(char)
(5,)
(6,myUnion)
(7,malloc(data*sizeof(char)
(8,"Input is less than the length of the source string")
(9,strcpy(myString, HELLO_STRING)
(10,)
(11,strlen(HELLO_STRING)
(12,data)
(13,myString)
(14,data*sizeof(char)
(15,myUnion.unionSecond)
(16,char *)
(17,data)
(18,unionSecond)
(19,myString)
(20,)
(21,)
(22,stdin)
(23,)
(24,RET)
(25,data)
(26,)
(27,myUnion)
(28,fscanf(stdin, "%zu", &data)
(29,printLine(myString)
(30,HELLO_STRING)
(31,1)
(32,(char *)
(33,"%zu")
(34,HELLO_STRING)
(35,myUnion.unionFirst = data)
(36,data > strlen(HELLO_STRING)
(37,free(myString)
(38,&data)
(39,myString)
(40,myUnion)
(41,myString = (char *)
(42,if (myString == NULL)
(43,printLine("Input is less than the length of the source string")
(44,myString == NULL)
(45,-1)
(46,data = myUnion.unionSecond)
(47,exit(-1)
(48,NULL)
(49,char)
(50,data)
(51,unionFirst)
(52,data)
(53,if (data > strlen(HELLO_STRING)
(54,0)
(55,myUnion.unionFirst)
(56,myString)
(57,data)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^