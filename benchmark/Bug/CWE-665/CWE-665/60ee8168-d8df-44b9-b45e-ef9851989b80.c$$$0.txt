-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,23,26,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(47,6,0)
(26,40,0)
(30,43,0)
(38,22,0)
(27,40,0)
(2,21,0)
(42,8,0)
(33,26,0)
(1,46,0)
(41,11,0)
(44,13,0)
(29,44,0)
(44,29,0)
(14,28,0)
(46,3,0)
(13,0,0)
(48,17,0)
(31,0,0)
(37,14,0)
(22,0,0)
(23,42,0)
(14,37,0)
(24,42,0)
(13,44,0)
(0,22,0)
(34,41,0)
(25,26,0)
(19,43,0)
(38,6,0)
(17,6,0)
(10,46,0)
(0,31,0)
(4,44,0)
(9,15,0)
(22,6,0)
(49,39,0)
(43,22,0)
(39,42,0)
(21,22,0)
(0,13,0)
(39,26,0)
(15,39,0)
(12,29,0)
(39,15,0)
(35,21,0)
(36,22,0)
(20,38,0)
(17,22,0)
(42,23,0)
(16,40,0)
(45,37,0)
(7,40,0)
(43,6,0)
(44,26,0)
(44,42,0)
(17,22,1)
(43,19,1)
(30,21,1)
(33,25,1)
(43,22,1)
(22,0,1)
(44,42,1)
(45,21,1)
(34,39,1)
(32,41,1)
(42,23,1)
(48,43,1)
(32,38,1)
(32,5,1)
(44,29,1)
(17,48,1)
(12,4,1)
(39,26,1)
(23,24,1)
(39,42,1)
(4,36,1)
(38,20,1)
(5,42,1)
(21,2,1)
(18,26,1)
(14,37,1)
(26,33,1)
(2,35,1)
(24,18,1)
(39,15,1)
(13,44,1)
(41,34,1)
(29,12,1)
(38,22,1)
(21,22,1)
(0,13,1)
(15,9,1)
(35,22,1)
(37,45,1)
(44,26,1)
(36,39,1)
(30,14,1)
(9,49,1)
(19,30,1)
(0,31,1)
(20,17,1)
(5,18,1)
(49,5,1)
(2,39,2)
(34,39,2)
(22,39,2)
(15,5,2)
(39,5,2)
(39,42,2)
(42,23,2)
(44,39,2)
(12,39,2)
(37,21,2)
(0,31,2)
(21,39,2)
(0,13,2)
(42,18,2)
(21,22,2)
(14,37,2)
(24,18,2)
(38,39,2)
(9,5,2)
(14,21,2)
(22,0,2)
(36,39,2)
(19,39,2)
(13,44,2)
(0,39,2)
(49,5,2)
(4,39,2)
(43,22,2)
(38,22,2)
(35,39,2)
(20,39,2)
(17,22,2)
(45,21,2)
(17,39,2)
(29,39,2)
(48,39,2)
(41,39,2)
(43,39,2)
(44,42,2)
(30,39,2)
(13,39,2)
(23,18,2)
(44,29,2)
(39,15,2)
(39,26,2)
(44,26,2)
-----------------------------------
(0,(char *)
(1,myString)
(2,NULL)
(3,)
(4,data)
(5,1)
(6,)
(7,data)
(8,)
(9,HELLO_STRING)
(10,if (data > strlen(HELLO_STRING)
(11,)
(12,char)
(13,malloc(data*sizeof(char)
(14,exit(-1)
(15,strlen(HELLO_STRING)
(16,if(1)
(17,printLine(myString)
(18,1)
(19,HELLO_STRING)
(20,myString)
(21,myString == NULL)
(22,myString = (char *)
(23,rand()
(24,data)
(25,data)
(26,data = 0)
(27,if(1)
(28,)
(29,sizeof(char)
(30,myString)
(31,char *)
(32,RET)
(33,0)
(34,"Input is less than the length of the source string")
(35,myString)
(36,myString)
(37,-1)
(38,free(myString)
(39,data > strlen(HELLO_STRING)
(40,)
(41,printLine("Input is less than the length of the source string")
(42,data = rand()
(43,strcpy(myString, HELLO_STRING)
(44,data*sizeof(char)
(45,1)
(46,)
(47,if (myString == NULL)
(48,myString)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^