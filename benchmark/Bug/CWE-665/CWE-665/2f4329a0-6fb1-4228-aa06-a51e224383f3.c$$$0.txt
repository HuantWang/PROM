-----label-----
1
-----code-----
void CWE665_Improper_Initialization__char_ncat_15_bad()
{
    char * data;
    char dataBuffer[100];
    data = dataBuffer;
    switch(6)
    {
    case 6:
        /* FLAW: Do not initialize data */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        size_t sourceLen;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        sourceLen = strlen(source);
        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */
        strncat(data, source, sourceLen);
        printLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
27,29
27,30
27,31
27,32
27,33
28,29
33,34
34,35
34,36
35,36
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,14,16,18,22,24,26,29,30,31,32,36,37,38,43,45,48,50,52,56,58,59,61,62,67,69,70,71,75,78,80,84,86,88,90,94,96
-----computeFrom-----
20,21
20,22
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE665_Improper_Initialization__char_ncat_15_bad(){    char * data;    char dataBuffer[100];    data = dataBuffer;    switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
void
CWE665_Improper_Initialization__char_ncat_15_bad()
CWE665_Improper_Initialization__char_ncat_15_bad
{    char * data;    char dataBuffer[100];    data = dataBuffer;    switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100];
char dataBuffer[100];
char
dataBuffer[100]
dataBuffer
[100]
100
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Do not initialize data */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        size_t sourceLen;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        sourceLen = strlen(source);        /* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */        strncat(data, source, sourceLen);        printLine(data);    }
size_t sourceLen;
size_t sourceLen;
size_t
size_t
sourceLen
sourceLen
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
strncat(data, source, sourceLen);
strncat(data, source, sourceLen)
strncat
strncat
data
data
source
source
sourceLen
sourceLen
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(7,12,0)
(10,16,0)
(8,6,0)
(9,12,0)
(18,16,0)
(21,8,0)
(29,16,0)
(33,16,0)
(15,1,0)
(34,40,0)
(5,0,0)
(12,29,0)
(31,16,0)
(20,31,0)
(22,2,0)
(12,24,0)
(27,6,0)
(13,24,0)
(3,12,0)
(35,6,0)
(0,29,0)
(14,2,0)
(24,40,0)
(4,29,0)
(4,31,0)
(39,1,0)
(12,31,0)
(26,5,0)
(6,8,0)
(6,29,0)
(41,1,0)
(5,2,0)
(2,5,0)
(37,4,0)
(24,29,0)
(25,15,0)
(11,31,0)
(32,29,0)
(36,8,0)
(19,0,0)
(23,29,0)
(38,1,0)
(40,24,0)
(17,1,0)
(31,11,1)
(35,27,1)
(25,28,1)
(24,40,1)
(14,26,1)
(8,36,1)
(12,31,1)
(3,9,1)
(22,14,1)
(26,6,1)
(37,12,1)
(40,34,1)
(13,0,1)
(30,4,1)
(28,31,1)
(27,39,1)
(2,22,1)
(27,38,1)
(4,31,1)
(19,5,1)
(5,2,1)
(11,20,1)
(36,21,1)
(7,24,1)
(12,3,1)
(6,8,1)
(38,28,1)
(21,35,1)
(15,25,1)
(12,24,1)
(0,19,1)
(34,13,1)
(9,7,1)
(4,37,1)
(39,15,1)
(12,24,2)
(5,2,2)
(38,28,2)
(6,8,2)
(12,31,2)
(39,28,2)
(25,28,2)
(15,28,2)
(4,31,2)
(24,40,2)
-----------------------------------
(0,source[100-1] = \'\\0\')
(1,)
(2,100-1)
(3,sourceLen)
(4,printLine(data)
(5,source[100-1])
(6,memset(source, \'C\', 100-1)
(7,data)
(8,100-1)
(9,source)
(10,switch(6)
(11,dataBuffer)
(12,strncat(data, source, sourceLen)
(13,sourceLen)
(14,100)
(15,printLine("Benign, fixed string")
(16,)
(17,default:)
(18,data)
(19,\'\\0\')
(20,data)
(21,100)
(22,1)
(23,sourceLen)
(24,sourceLen = strlen(source)
(25,"Benign, fixed string")
(26,source)
(27,source)
(28,6)
(29,)
(30,RET)
(31,data = dataBuffer)
(32,source)
(33,dataBuffer)
(34,source)
(35,\'C\')
(36,1)
(37,data)
(38,break;)
(39,break;)
(40,strlen(source)
(41,case 6:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^