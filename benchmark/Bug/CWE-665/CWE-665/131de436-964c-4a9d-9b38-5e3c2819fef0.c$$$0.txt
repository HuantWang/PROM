-----label-----
1
-----code-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad()
{
    int * data;
    data = (int *)malloc(10*sizeof(int));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Don't initialize data */
        ; /* empty statement needed for some flow variants */
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use data without initializing it */
        {
            int i;
            for(i=0; i<10; i++)
            {
                printIntLine(data[i]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
52,54
53,54
54,55
54,56
56,57
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,47,50,55,57,62,63,66,67,70,75,78,80
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad(){    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
void
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad()
CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad
{    int * data;    data = (int *)malloc(10*sizeof(int));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }}
int * data;
int * data;
int
* data
*
data
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Don't initialize data */        ; /* empty statement needed for some flow variants */    }
;
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use data without initializing it */        {            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }    }
{            int i;            for(i=0; i<10; i++)            {                printIntLine(data[i]);            }        }
int i;
int i;
int
i
i
for(i=0; i<10; i++)            {                printIntLine(data[i]);            }
i=0;
i=0
i
i
0
i<10
i
i
10
i++
i
i
{                printIntLine(data[i]);            }
printIntLine(data[i]);
printIntLine(data[i])
printIntLine
printIntLine
data[i]
data
data
i
i
-----joern-----
(39,0,0)
(2,23,0)
(4,12,0)
(6,25,0)
(35,0,0)
(22,8,0)
(14,12,0)
(17,26,0)
(32,14,0)
(33,23,0)
(24,1,0)
(28,12,0)
(24,0,0)
(34,26,0)
(7,12,0)
(23,14,0)
(36,37,0)
(20,26,0)
(10,8,0)
(11,37,0)
(0,24,0)
(13,12,0)
(19,14,0)
(8,22,0)
(38,17,0)
(37,26,0)
(27,5,0)
(25,3,0)
(14,32,0)
(40,32,0)
(27,31,0)
(9,5,0)
(32,40,0)
(5,27,0)
(32,22,0)
(8,18,0)
(0,14,0)
(22,32,0)
(29,18,0)
(30,25,0)
(18,8,0)
(0,26,0)
(24,0,1)
(37,11,1)
(23,14,1)
(8,18,1)
(9,23,1)
(16,27,1)
(15,21,1)
(36,26,1)
(35,37,1)
(21,16,1)
(22,8,1)
(0,26,1)
(17,38,1)
(26,34,1)
(27,5,1)
(14,32,1)
(32,40,1)
(23,2,1)
(5,9,1)
(17,26,1)
(38,24,1)
(2,33,1)
(11,36,1)
(33,14,1)
(20,21,1)
(39,35,1)
(0,14,1)
(32,22,1)
(16,23,1)
(0,39,1)
(36,17,1)
(10,19,1)
(34,20,1)
(37,26,1)
(18,29,1)
(29,10,1)
(15,37,1)
(17,37,2)
(0,37,2)
(27,23,2)
(26,21,2)
(32,22,2)
(14,32,2)
(39,37,2)
(11,37,2)
(11,21,2)
(8,18,2)
(5,23,2)
(36,37,2)
(27,5,2)
(35,37,2)
(22,8,2)
(24,0,2)
(36,21,2)
(17,26,2)
(24,37,2)
(23,14,2)
(37,37,2)
(9,23,2)
(37,26,2)
(20,21,2)
(32,40,2)
(0,14,2)
(34,21,2)
(37,21,2)
(38,37,2)
(0,26,2)
-----------------------------------
(0,data[i])
(1,)
(2,NULL)
(3,)
(4,data)
(5,-1)
(6,for(i=0; i<10; i++)
(7,if (data == NULL)
(8,10*sizeof(int)
(9,1)
(10,10)
(11,10)
(12,)
(13,if(STATIC_CONST_TRUE)
(14,data = (int *)
(15,RET)
(16,STATIC_CONST_TRUE)
(17,i++)
(18,sizeof(int)
(19,data)
(20,i)
(21,STATIC_CONST_TRUE)
(22,malloc(10*sizeof(int)
(23,data == NULL)
(24,printIntLine(data[i])
(25,)
(26,i=0)
(27,exit(-1)
(28,if(STATIC_CONST_TRUE)
(29,int)
(30,i)
(31,)
(32,(int *)
(33,data)
(34,0)
(35,data)
(36,i)
(37,i<10)
(38,i)
(39,i)
(40,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^