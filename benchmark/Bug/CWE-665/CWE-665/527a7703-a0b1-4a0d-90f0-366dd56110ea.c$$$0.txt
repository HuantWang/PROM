-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(5==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,19,20,25,28,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
30,31
30,32
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(5==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,15,0)
(13,8,0)
(3,48,0)
(43,12,0)
(31,34,0)
(53,25,0)
(34,22,0)
(3,5,0)
(44,33,0)
(21,32,0)
(30,20,0)
(26,1,0)
(27,9,0)
(13,17,0)
(40,4,0)
(51,22,0)
(9,13,0)
(48,3,0)
(49,53,0)
(1,26,0)
(23,9,0)
(12,34,0)
(29,3,0)
(18,17,0)
(15,3,0)
(17,48,0)
(39,34,0)
(14,32,0)
(52,13,0)
(16,52,0)
(4,13,0)
(19,8,0)
(38,30,0)
(4,8,0)
(5,24,0)
(45,33,0)
(3,34,0)
(17,13,0)
(5,36,0)
(36,5,0)
(0,22,0)
(41,37,0)
(35,11,0)
(11,13,0)
(6,22,0)
(47,4,0)
(7,30,0)
(52,8,0)
(1,46,0)
(12,5,0)
(2,13,0)
(42,5,0)
(11,8,0)
(12,37,0)
(28,26,0)
(17,18,0)
(37,12,0)
(48,17,0)
(10,15,0)
(23,13,1)
(40,1,1)
(26,28,1)
(29,2,1)
(50,11,1)
(34,31,1)
(21,14,1)
(44,45,1)
(50,53,1)
(11,13,1)
(9,13,1)
(49,12,1)
(36,42,1)
(43,32,1)
(14,5,1)
(31,39,1)
(16,4,1)
(52,16,1)
(28,9,1)
(12,5,1)
(1,26,1)
(11,35,1)
(33,44,1)
(14,33,1)
(12,34,1)
(41,43,1)
(10,29,1)
(47,40,1)
(40,9,1)
(4,47,1)
(3,5,1)
(13,17,1)
(4,13,1)
(50,32,1)
(3,34,1)
(3,15,1)
(32,21,1)
(42,33,1)
(52,13,1)
(53,49,1)
(37,41,1)
(27,23,1)
(15,10,1)
(45,34,1)
(35,52,1)
(48,3,1)
(12,37,1)
(9,27,1)
(2,12,1)
(17,18,1)
(5,36,1)
(17,48,1)
(3,34,2)
(29,12,2)
(3,5,2)
(4,13,2)
(3,15,2)
(15,12,2)
(52,12,2)
(43,32,2)
(35,12,2)
(16,12,2)
(49,12,2)
(27,12,2)
(12,32,2)
(37,32,2)
(11,13,2)
(12,37,2)
(10,12,2)
(48,12,2)
(12,34,2)
(41,32,2)
(5,36,2)
(17,48,2)
(47,12,2)
(48,3,2)
(17,12,2)
(40,12,2)
(2,12,2)
(4,12,2)
(5,33,2)
(13,17,2)
(36,33,2)
(42,33,2)
(26,9,2)
(13,12,2)
(53,12,2)
(28,9,2)
(9,13,2)
(23,12,2)
(3,12,2)
(1,26,2)
(52,13,2)
(17,18,2)
(12,5,2)
(11,12,2)
(9,12,2)
(1,9,2)
-----------------------------------
(0,data)
(1,exit(-1)
(2,myString)
(3,data*sizeof(wchar_t)
(4,wcscpy(myString, HELLO_STRING)
(5,data = rand()
(6,if(5==5)
(7,myString)
(8,)
(9,myString == NULL)
(10,wchar_t)
(11,free(myString)
(12,data > wcslen(HELLO_STRING)
(13,myString = (wchar_t *)
(14,5)
(15,sizeof(wchar_t)
(16,myString)
(17,(wchar_t *)
(18,wchar_t *)
(19,if (myString == NULL)
(20,)
(21,5)
(22,)
(23,myString)
(24,)
(25,)
(26,-1)
(27,NULL)
(28,1)
(29,data)
(30,)
(31,0)
(32,5==5)
(33,5==5)
(34,data = 0)
(35,myString)
(36,rand()
(37,wcslen(HELLO_STRING)
(38,if (data > wcslen(HELLO_STRING)
(39,data)
(40,myString)
(41,HELLO_STRING)
(42,data)
(43,data)
(44,5)
(45,5)
(46,)
(47,HELLO_STRING)
(48,malloc(data*sizeof(wchar_t)
(49,"Input is less than the length of the source string")
(50,RET)
(51,if(5==5)
(52,printWLine(myString)
(53,printLine("Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^