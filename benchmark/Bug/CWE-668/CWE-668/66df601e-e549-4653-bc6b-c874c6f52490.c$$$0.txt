-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_char_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fprintf(pFile, "User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
26,27
27,28
27,29
29,30
29,31
29,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
57,58
58,59
58,60
60,61
60,62
60,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
69,72
72,73
73,74
73,75
73,76
74,75
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
117,118
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
124,125
128,129
128,130
128,131
129,130
129,131
130,131
130,132
130,133
130,134
130,135
130,136
130,137
131,132
133,134
135,136
137,138
139,140
141,142
143,144
144,145
147,148
147,149
148,149
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
165,166
166,167
166,168
166,169
166,170
167,168
169,170
172,173
174,175
174,176
175,176
177,178
178,179
179,180
179,181
180,181
182,183
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,32,34,38,40,42,46,48,51,53,54,56,59,61,62,64,68,70,71,75,76,77,82,84,85,87,89,94,95,100,101,102,106,109,111,115,116,122,125,126,127,132,134,136,138,140,142,145,146,151,152,156,158,163,164,168,170,171,173,176,181,183
-----computeFrom-----
13,14
13,15
17,18
17,19
79,80
79,81
97,98
97,99
104,105
104,106
113,114
113,115
119,120
119,121
123,124
123,125
129,130
129,131
-----guardedBy-----
84,100
115,125
145,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_char_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_char_17_bad()
CWE534_Info_Exposure_Debug_Log__w32_char_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(pFile, "User attempted access with password: %s\n", password);
fprintf(pFile, "User attempted access with password: %s\n", password)
fprintf
fprintf
pFile
pFile
"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(18,92,0)
(57,1,0)
(58,18,0)
(60,51,0)
(32,82,0)
(49,31,0)
(41,18,0)
(95,18,0)
(35,76,0)
(94,29,0)
(50,18,0)
(55,59,0)
(42,70,0)
(40,6,0)
(76,6,0)
(67,29,0)
(46,56,0)
(72,52,0)
(80,76,0)
(84,75,0)
(70,29,0)
(34,3,0)
(13,48,0)
(73,78,0)
(48,62,0)
(64,70,0)
(47,20,0)
(1,37,0)
(18,50,0)
(26,9,0)
(51,20,0)
(22,56,0)
(5,52,0)
(6,49,0)
(2,9,0)
(36,30,0)
(12,19,0)
(10,31,0)
(43,18,0)
(21,82,0)
(46,1,0)
(52,31,0)
(14,36,0)
(25,11,0)
(68,59,0)
(93,29,0)
(56,46,0)
(28,29,0)
(12,51,0)
(39,29,0)
(63,83,0)
(65,31,0)
(49,6,0)
(52,29,0)
(61,56,0)
(78,62,0)
(71,17,0)
(88,29,0)
(24,3,0)
(31,29,0)
(87,29,0)
(82,27,0)
(85,82,0)
(69,52,0)
(83,59,0)
(29,4,0)
(81,79,0)
(90,20,0)
(75,29,0)
(79,59,0)
(36,31,0)
(23,92,0)
(56,6,0)
(44,75,0)
(30,15,0)
(11,15,0)
(82,31,0)
(27,82,0)
(8,71,0)
(46,31,0)
(6,29,0)
(16,29,0)
(18,31,0)
(18,70,0)
(74,36,0)
(38,12,0)
(92,18,0)
(77,49,0)
(0,50,0)
(18,3,0)
(53,18,0)
(33,30,0)
(91,29,0)
(54,46,0)
(52,51,0)
(20,51,0)
(7,79,0)
(89,27,0)
(86,29,0)
(51,29,0)
(3,29,0)
(52,69,1)
(70,64,1)
(69,72,1)
(3,24,1)
(47,60,1)
(1,57,1)
(18,50,1)
(64,42,1)
(83,63,1)
(45,52,1)
(11,25,1)
(0,53,1)
(59,55,1)
(5,78,1)
(21,85,1)
(95,1,1)
(56,22,1)
(8,92,1)
(27,89,1)
(61,54,1)
(38,45,1)
(42,3,1)
(83,59,1)
(52,31,1)
(20,90,1)
(49,31,1)
(50,0,1)
(13,92,1)
(71,8,1)
(46,56,1)
(66,79,1)
(74,14,1)
(40,27,1)
(89,82,1)
(54,76,1)
(65,79,1)
(72,5,1)
(73,48,1)
(31,10,1)
(18,3,1)
(18,31,1)
(76,80,1)
(7,81,1)
(40,30,1)
(81,59,1)
(78,73,1)
(90,47,1)
(6,49,1)
(63,12,1)
(44,31,1)
(52,51,1)
(85,32,1)
(84,44,1)
(34,75,1)
(12,38,1)
(95,76,1)
(82,21,1)
(60,70,1)
(79,59,1)
(25,27,1)
(10,65,1)
(57,46,1)
(24,34,1)
(51,20,1)
(46,31,1)
(63,45,1)
(82,31,1)
(48,13,1)
(76,6,1)
(77,40,1)
(12,51,1)
(79,7,1)
(92,18,1)
(55,68,1)
(53,58,1)
(5,71,1)
(80,35,1)
(23,18,1)
(22,61,1)
(33,36,1)
(56,6,1)
(81,83,1)
(75,84,1)
(27,82,1)
(36,74,1)
(32,51,1)
(14,11,1)
(41,43,1)
(43,95,1)
(36,31,1)
(58,41,1)
(49,77,1)
(35,6,1)
(18,70,1)
(92,23,1)
(30,33,1)
(84,79,2)
(36,31,2)
(50,79,2)
(27,82,2)
(76,6,2)
(1,76,2)
(77,79,2)
(51,79,2)
(70,79,2)
(51,20,2)
(45,79,2)
(18,79,2)
(3,79,2)
(49,79,2)
(35,79,2)
(61,76,2)
(10,79,2)
(56,76,2)
(49,31,2)
(12,45,2)
(6,79,2)
(27,79,2)
(52,79,2)
(82,79,2)
(64,79,2)
(21,79,2)
(83,79,2)
(56,6,2)
(23,79,2)
(42,79,2)
(18,3,2)
(0,79,2)
(12,51,2)
(69,79,2)
(18,31,2)
(82,31,2)
(57,76,2)
(81,79,2)
(74,27,2)
(46,56,2)
(6,49,2)
(25,27,2)
(38,45,2)
(83,59,2)
(65,79,2)
(20,79,2)
(47,79,2)
(73,92,2)
(63,79,2)
(80,79,2)
(18,50,2)
(71,92,2)
(95,79,2)
(46,76,2)
(92,79,2)
(34,79,2)
(5,79,2)
(41,79,2)
(11,27,2)
(92,18,2)
(32,79,2)
(40,79,2)
(90,79,2)
(78,92,2)
(31,79,2)
(46,31,2)
(43,79,2)
(22,76,2)
(7,79,2)
(53,79,2)
(33,27,2)
(18,70,2)
(58,79,2)
(76,79,2)
(52,51,2)
(44,79,2)
(24,79,2)
(52,31,2)
(36,27,2)
(14,27,2)
(75,79,2)
(13,92,2)
(72,79,2)
(54,76,2)
(60,79,2)
(85,79,2)
(48,92,2)
(30,27,2)
(8,92,2)
(89,79,2)
(79,59,2)
(79,79,2)
-----------------------------------
(0,pHandle)
(1,password[passwordLen-1] = \\\'\\\\0\\\')
(2,for(j = 0; j < 1; j++)
(3,* username = "User")
(4,)
(5,pFile)
(6,passwordLen = strlen(password)
(7,1)
(8,"Unable to login.")
(9,)
(10,"")
(11,printLine("fgets()
(12,fclose(pFile)
(13,"User logged in successfully.")
(14,password)
(15,)
(16,passwordLen)
(17,)
(18,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(19,)
(20,fopen("debug.txt", "a+")
(21,stdin)
(22,1)
(23,0)
(24,"User")
(25,"fgets()
(26,j)
(27,fgets(password, 100, stdin)
(28,password)
(29,)
(30,password[0] = \\\'\\\\0\\\')
(31,password[100] = "")
(32,password)
(33,\\\'\\\\0\\\')
(34,username)
(35,passwordLen)
(36,password[0])
(37,)
(38,pFile)
(39,username)
(40,passwordLen)
(41,password)
(42,domain)
(43,domain)
(44,passwordLen)
(45,pFile)
(46,password[passwordLen-1])
(47,"debug.txt")
(48,printLine("User logged in successfully.")
(49,strlen(password)
(50,&pHandle)
(51,* pFile = fopen("debug.txt", "a+")
(52,fprintf(pFile, "User attempted access with password: %s\\\\n", password)
(53,LOGON32_PROVIDER_DEFAULT)
(54,password)
(55,0)
(56,passwordLen-1)
(57,\\\'\\\\0\\\')
(58,LOGON32_LOGON_NETWORK)
(59,j = 0)
(60,pFile)
(61,passwordLen)
(62,)
(63,j)
(64,"Domain")
(65,password)
(66,RET)
(67,domain)
(68,j)
(69,password)
(70,* domain = "Domain")
(71,printLine("Unable to login.")
(72,"User attempted access with password: %s\\\\n")
(73,pHandle)
(74,0)
(75,passwordLen = 0)
(76,passwordLen > 0)
(77,password)
(78,CloseHandle(pHandle)
(79,j < 1)
(80,0)
(81,j)
(82,fgets(password, 100, stdin)
(83,j++)
(84,0)
(85,100)
(86,if (passwordLen > 0)
(87,pHandle)
(88,if (fgets(password, 100, stdin)
(89,NULL)
(90,"a+")
(91,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(92,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(93,if (pFile)
(94,pFile)
(95,username)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
