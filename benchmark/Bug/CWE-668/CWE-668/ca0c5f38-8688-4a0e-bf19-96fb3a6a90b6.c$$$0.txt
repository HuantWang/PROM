-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_10_bad()
{
    if(globalTrue)
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
54,55
55,56
55,57
57,58
57,59
57,60
60,61
62,63
63,64
63,65
64,65
64,66
65,66
69,70
69,71
70,71
70,72
71,72
71,73
71,74
71,75
72,73
74,75
77,78
79,80
81,82
81,83
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
103,104
103,105
104,105
104,106
105,106
108,109
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
115,116
119,120
119,121
119,122
120,121
120,122
121,122
121,123
121,124
121,125
121,126
121,127
121,128
122,123
124,125
126,127
128,129
130,131
132,133
134,135
135,136
138,139
138,140
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
150,151
151,152
152,153
152,154
153,154
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,39,43,45,48,50,51,53,56,58,59,61,66,67,68,73,75,76,78,80,85,86,91,92,93,97,100,102,106,107,113,116,117,118,123,125,127,129,131,133,136,137,142,143,147,149,154,155
-----computeFrom-----
26,27
26,28
63,64
63,65
70,71
70,72
88,89
88,90
95,96
95,97
104,105
104,106
110,111
110,112
114,115
114,116
120,121
120,122
-----guardedBy-----
75,91
106,116
136,149
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_10_bad(){    if(globalTrue)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_10_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_10_bad
{    if(globalTrue)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
if(globalTrue)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
globalTrue
globalTrue
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(65,10,0)
(45,75,0)
(72,52,0)
(0,82,0)
(7,48,0)
(31,36,0)
(79,70,0)
(48,7,0)
(23,3,0)
(17,48,0)
(28,52,0)
(10,65,0)
(74,28,0)
(63,53,0)
(52,3,0)
(41,81,0)
(54,64,0)
(5,55,0)
(76,82,0)
(38,65,0)
(6,47,0)
(73,5,0)
(53,7,0)
(28,15,0)
(8,7,0)
(68,16,0)
(61,23,0)
(79,7,0)
(44,3,0)
(75,3,0)
(51,3,0)
(26,9,0)
(53,47,0)
(34,16,0)
(37,70,0)
(21,75,0)
(70,47,0)
(20,28,0)
(82,55,0)
(76,7,0)
(43,3,0)
(24,65,0)
(46,68,0)
(30,57,0)
(42,23,0)
(3,13,0)
(15,28,0)
(35,52,0)
(29,26,0)
(28,83,0)
(18,26,0)
(48,17,0)
(68,7,0)
(77,67,0)
(56,6,0)
(9,26,0)
(11,68,0)
(83,28,0)
(32,24,0)
(14,77,0)
(25,15,0)
(28,7,0)
(80,47,0)
(22,3,0)
(1,70,0)
(27,3,0)
(48,10,0)
(40,9,0)
(79,77,0)
(81,49,0)
(28,23,0)
(19,79,0)
(78,76,0)
(62,6,0)
(64,33,0)
(50,83,0)
(58,28,0)
(39,3,0)
(47,3,0)
(47,53,0)
(65,24,0)
(7,3,0)
(2,3,0)
(57,33,0)
(69,28,0)
(10,48,0)
(26,7,0)
(60,26,0)
(66,3,0)
(71,76,0)
(4,28,0)
(70,79,0)
(16,3,0)
(48,17,1)
(28,23,1)
(79,70,1)
(6,47,1)
(78,71,1)
(26,18,1)
(15,25,1)
(48,10,1)
(4,69,1)
(70,1,1)
(82,0,1)
(28,7,1)
(5,73,1)
(72,23,1)
(42,75,1)
(63,80,1)
(41,83,1)
(11,52,1)
(53,7,1)
(38,8,1)
(74,4,1)
(46,11,1)
(75,21,1)
(62,56,1)
(47,53,1)
(32,38,1)
(14,79,1)
(54,57,1)
(19,6,1)
(58,77,1)
(61,42,1)
(1,37,1)
(50,28,1)
(53,63,1)
(20,58,1)
(40,26,1)
(26,7,1)
(68,46,1)
(29,16,1)
(37,19,1)
(7,48,1)
(73,9,1)
(52,35,1)
(28,15,1)
(45,7,1)
(57,30,1)
(35,72,1)
(68,7,1)
(76,7,1)
(30,83,1)
(9,26,1)
(71,5,1)
(23,61,1)
(0,76,1)
(81,41,1)
(16,34,1)
(80,82,1)
(6,62,1)
(69,20,1)
(21,45,1)
(56,47,1)
(28,52,1)
(60,29,1)
(12,59,1)
(12,64,1)
(8,59,1)
(10,65,1)
(34,68,1)
(77,14,1)
(79,7,1)
(58,6,1)
(80,9,1)
(9,40,1)
(76,78,1)
(83,50,1)
(18,60,1)
(64,54,1)
(70,47,1)
(24,32,1)
(12,81,1)
(83,28,1)
(25,74,1)
(65,24,1)
(65,24,2)
(79,70,2)
(47,59,2)
(80,59,2)
(75,59,2)
(71,9,2)
(38,59,2)
(23,59,2)
(16,59,2)
(45,59,2)
(41,83,2)
(48,17,2)
(8,59,2)
(28,7,2)
(21,59,2)
(83,59,2)
(5,9,2)
(0,9,2)
(79,6,2)
(52,59,2)
(76,7,2)
(34,59,2)
(6,47,2)
(63,59,2)
(53,59,2)
(24,59,2)
(19,6,2)
(30,83,2)
(68,7,2)
(40,59,2)
(70,47,2)
(48,10,2)
(65,59,2)
(9,26,2)
(73,9,2)
(64,83,2)
(4,59,2)
(77,6,2)
(25,59,2)
(32,59,2)
(37,6,2)
(81,83,2)
(79,7,2)
(9,59,2)
(78,9,2)
(48,59,2)
(10,65,2)
(7,48,2)
(53,7,2)
(28,59,2)
(70,6,2)
(28,52,2)
(42,59,2)
(74,59,2)
(47,53,2)
(60,59,2)
(35,59,2)
(57,83,2)
(6,59,2)
(14,6,2)
(83,28,2)
(10,59,2)
(28,15,2)
(7,59,2)
(11,59,2)
(58,59,2)
(46,59,2)
(69,59,2)
(72,59,2)
(56,59,2)
(28,23,2)
(68,59,2)
(29,59,2)
(82,9,2)
(1,6,2)
(76,9,2)
(26,59,2)
(61,59,2)
(18,59,2)
(50,59,2)
(62,59,2)
(54,83,2)
(15,59,2)
(20,59,2)
(26,7,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,1)
(2,hUser)
(3,)
(4,LOGON32_LOGON_NETWORK)
(5,printLine("fgets()
(6,passwordLen > 0)
(7,* password = (char *)
(8,password)
(9,fgets(password, 100, stdin)
(10,ALLOCA(100*sizeof(char)
(11,password)
(12,RET)
(13,)
(14,\\\'\\\\0\\\')
(15,&hUser)
(16,password[0] = \\\'\\\\0\\\')
(17,char *)
(18,stdin)
(19,password)
(20,domain)
(21,0)
(22,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(23,* username = "User")
(24,sizeof(char)
(25,hUser)
(26,fgets(password, 100, stdin)
(27,passwordLen)
(28,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(29,password)
(30,"User logged in successfully.")
(31,if(globalTrue)
(32,char)
(33,)
(34,\\\'\\\\0\\\')
(35,"Domain")
(36,)
(37,passwordLen)
(38,100)
(39,if (fgets(password, 100, stdin)
(40,NULL)
(41,"Unable to login.")
(42,username)
(43,domain)
(44,if (passwordLen > 0)
(45,passwordLen)
(46,0)
(47,passwordLen = strlen(password)
(48,(char *)
(49,)
(50,0)
(51,password)
(52,* domain = "Domain")
(53,strlen(password)
(54,hUser)
(55,)
(56,passwordLen)
(57,printLine("User logged in successfully.")
(58,username)
(59,globalTrue)
(60,100)
(61,"User")
(62,0)
(63,password)
(64,CloseHandle(hUser)
(65,100*sizeof(char)
(66,username)
(67,)
(68,password[0])
(69,password)
(70,passwordLen-1)
(71,password)
(72,domain)
(73,"fgets()
(74,LOGON32_PROVIDER_DEFAULT)
(75,passwordLen = 0)
(76,password[0])
(77,password[passwordLen-1] = \\\'\\\\0\\\')
(78,0)
(79,password[passwordLen-1])
(80,passwordLen)
(81,printLine("Unable to login.")
(82,password[0] = \\\'\\\\0\\\')
(83,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
