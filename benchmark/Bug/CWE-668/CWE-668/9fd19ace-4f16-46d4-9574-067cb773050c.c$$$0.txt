-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_31_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
        PUTENV(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
121,123
121,124
122,123
123,124
123,125
125,126
125,127
125,128
128,129
129,130
131,132
132,133
132,134
134,135
134,136
134,137
137,138
138,139
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126,127,130,133,135,136,139,143,145
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_31_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_31_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_31_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(13,6,0)
(49,43,0)
(54,42,0)
(40,42,0)
(47,18,0)
(21,6,0)
(9,8,0)
(33,54,0)
(2,40,0)
(53,23,0)
(34,49,0)
(25,1,0)
(35,49,0)
(54,8,0)
(6,43,0)
(32,43,0)
(0,21,0)
(16,7,0)
(37,15,0)
(19,23,0)
(15,49,0)
(0,1,0)
(42,36,0)
(28,6,0)
(15,6,0)
(51,3,0)
(31,7,0)
(23,42,0)
(39,35,0)
(44,35,0)
(7,31,0)
(23,6,0)
(35,15,0)
(3,42,0)
(29,4,0)
(3,24,0)
(31,23,0)
(30,42,0)
(24,14,0)
(8,54,0)
(22,3,0)
(21,0,0)
(24,31,0)
(38,47,0)
(14,24,0)
(26,43,0)
(11,35,0)
(52,18,0)
(31,24,0)
(45,31,0)
(17,39,0)
(12,49,0)
(36,43,0)
(40,6,0)
(27,54,0)
(41,0,0)
(39,49,0)
(24,3,0)
(48,36,0)
(50,36,0)
(46,25,0)
(20,15,0)
(10,21,0)
(23,31,0)
(42,40,0)
(35,15,1)
(31,23,1)
(3,42,1)
(23,42,1)
(41,7,1)
(0,21,1)
(31,24,1)
(15,6,1)
(33,27,1)
(16,31,1)
(15,37,1)
(10,41,1)
(35,44,1)
(37,20,1)
(40,6,1)
(54,42,1)
(20,52,1)
(23,19,1)
(30,6,1)
(42,40,1)
(39,35,1)
(45,24,1)
(24,3,1)
(38,7,1)
(6,13,1)
(47,38,1)
(5,39,1)
(2,30,1)
(23,6,1)
(22,23,1)
(20,8,1)
(46,0,1)
(7,16,1)
(44,11,1)
(20,46,1)
(52,47,1)
(31,45,1)
(17,35,1)
(3,51,1)
(51,22,1)
(21,10,1)
(7,31,1)
(54,33,1)
(19,53,1)
(27,42,1)
(13,28,1)
(21,6,1)
(8,54,1)
(40,2,1)
(53,8,1)
(24,14,1)
(8,9,1)
(28,26,1)
(39,17,1)
(11,15,1)
(9,54,1)
(8,54,2)
(52,7,2)
(35,15,2)
(21,7,2)
(19,8,2)
(47,7,2)
(24,14,2)
(46,7,2)
(54,42,2)
(41,7,2)
(16,8,2)
(15,6,2)
(24,8,2)
(7,31,2)
(3,42,2)
(45,8,2)
(23,8,2)
(10,7,2)
(23,6,2)
(31,23,2)
(0,21,2)
(3,8,2)
(24,3,2)
(31,8,2)
(7,8,2)
(22,8,2)
(53,8,2)
(31,24,2)
(21,6,2)
(23,42,2)
(51,8,2)
(39,35,2)
(40,6,2)
(42,40,2)
(0,7,2)
(38,7,2)
-----------------------------------
(0,dataLen = wcslen(data)
(1,)
(2,data)
(3,250-dataLen)
(4,)
(5,RET)
(6,data = dataBuffer)
(7,fgetws(data+dataLen, (int)
(8,250-dataLen > 1)
(9,1)
(10,data)
(11,data)
(12,data)
(13,dataBuffer)
(14,int)
(15,* dataCopy = data)
(16,NULL)
(17,data)
(18,)
(19,dataLen)
(20,dataCopy)
(21,wcslen(data)
(22,250)
(23,data+dataLen)
(24,(int)
(25,)
(26,"PATH=")
(27,250)
(28,data)
(29,if (fgetws(data+dataLen, (int)
(30,dataLen)
(31,fgetws(data+dataLen, (int)
(32,data)
(33,dataLen)
(34,dataCopy)
(35,* data = dataCopy)
(36,)
(37,data)
(38,"fgetws()
(39,PUTENV(data)
(40,wcslen(data)
(41,dataLen)
(42,dataLen = wcslen(data)
(43,)
(44,dataCopy)
(45,stdin)
(46,\\\'\\\\0\\\')
(47,printLine("fgetws()
(48,if (250-dataLen > 1)
(49,)
(50,dataLen)
(51,dataLen)
(52,\\\'\\\\0\\\')
(53,data)
(54,250-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
