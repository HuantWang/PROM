-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_11_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,123,125
-----computeFrom-----
22,23
22,24
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_11_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_11_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_11_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(45,13,0)
(15,39,0)
(38,20,0)
(44,12,0)
(30,28,0)
(51,1,0)
(16,12,0)
(27,12,0)
(6,49,0)
(56,10,0)
(57,24,0)
(58,23,0)
(16,13,0)
(21,8,0)
(39,8,0)
(18,25,0)
(0,15,0)
(34,57,0)
(28,39,0)
(54,39,0)
(29,35,0)
(43,44,0)
(10,57,0)
(50,42,0)
(25,39,0)
(10,28,0)
(26,13,0)
(7,13,0)
(19,29,0)
(28,10,0)
(4,5,0)
(58,57,0)
(10,42,0)
(47,45,0)
(46,8,0)
(39,25,0)
(57,20,0)
(35,29,0)
(8,33,0)
(17,44,0)
(1,57,0)
(5,10,0)
(55,15,0)
(20,57,0)
(29,39,0)
(42,10,0)
(9,8,0)
(10,5,0)
(5,4,0)
(61,35,0)
(12,13,0)
(3,23,0)
(25,12,0)
(11,60,0)
(48,12,0)
(40,28,0)
(53,24,0)
(12,45,0)
(44,49,0)
(59,29,0)
(60,2,0)
(32,20,0)
(22,13,0)
(44,39,0)
(41,1,0)
(28,12,0)
(36,58,0)
(5,15,0)
(37,16,0)
(49,2,0)
(31,45,0)
(15,5,0)
(10,5,1)
(5,15,1)
(37,14,1)
(40,30,1)
(52,16,1)
(10,57,1)
(39,25,1)
(58,57,1)
(10,56,1)
(38,34,1)
(12,45,1)
(19,59,1)
(0,28,1)
(55,0,1)
(42,50,1)
(61,29,1)
(59,39,1)
(28,39,1)
(10,28,1)
(6,44,1)
(16,12,1)
(58,36,1)
(42,10,1)
(48,45,1)
(28,40,1)
(17,60,1)
(28,12,1)
(30,1,1)
(25,12,1)
(34,35,1)
(36,49,1)
(35,29,1)
(37,35,1)
(44,43,1)
(57,20,1)
(41,51,1)
(11,42,1)
(54,14,1)
(43,17,1)
(50,10,1)
(51,57,1)
(60,11,1)
(56,5,1)
(15,55,1)
(5,4,1)
(16,37,1)
(35,61,1)
(25,18,1)
(18,54,1)
(45,47,1)
(44,12,1)
(29,39,1)
(36,42,1)
(15,39,1)
(20,32,1)
(37,1,1)
(47,31,1)
(27,48,1)
(14,12,1)
(49,6,1)
(29,19,1)
(1,57,1)
(12,27,1)
(44,39,1)
(37,58,1)
(32,38,1)
(1,41,1)
(42,1,2)
(51,35,2)
(10,28,2)
(5,15,2)
(0,1,2)
(10,1,2)
(49,42,2)
(36,1,2)
(12,45,2)
(38,35,2)
(15,1,2)
(30,1,2)
(40,1,2)
(19,14,2)
(5,4,2)
(57,35,2)
(20,35,2)
(29,14,2)
(59,14,2)
(61,14,2)
(5,1,2)
(35,14,2)
(50,1,2)
(15,39,2)
(28,1,2)
(18,14,2)
(28,12,2)
(11,42,2)
(44,42,2)
(6,42,2)
(54,14,2)
(39,25,2)
(57,20,2)
(39,14,2)
(25,14,2)
(10,5,2)
(42,10,2)
(43,42,2)
(10,57,2)
(44,39,2)
(41,35,2)
(55,1,2)
(44,12,2)
(1,57,2)
(34,35,2)
(60,42,2)
(58,57,2)
(25,12,2)
(16,12,2)
(35,29,2)
(28,39,2)
(17,42,2)
(56,1,2)
(32,35,2)
(29,39,2)
(1,35,2)
(58,1,2)
-----------------------------------
(0,250)
(1,pFile != NULL)
(2,)
(3,if (fgets(data+dataLen, (int)
(4,int)
(5,(int)
(6,\\\'\\\\0\\\')
(7,dataBuffer)
(8,)
(9,pFile)
(10,fgets(data+dataLen, (int)
(11,"fgets()
(12,data = dataBuffer)
(13,)
(14,globalReturnsTrue()
(15,250-dataLen)
(16,PUTENV(data)
(17,data)
(18,data)
(19,dataLen)
(20,fopen(FILENAME, "r")
(21,if (250-dataLen > 1)
(22,data)
(23,)
(24,)
(25,strlen(data)
(26,if(globalReturnsTrue()
(27,dataBuffer)
(28,data+dataLen)
(29,250-dataLen)
(30,data)
(31,dataBuffer)
(32,"r")
(33,)
(34,pFile)
(35,250-dataLen > 1)
(36,pFile)
(37,data)
(38,FILENAME)
(39,dataLen = strlen(data)
(40,dataLen)
(41,NULL)
(42,fgets(data+dataLen, (int)
(43,dataLen)
(44,data[dataLen])
(45,dataBuffer[250] = "PATH=")
(46,dataLen)
(47,"PATH=")
(48,data)
(49,data[dataLen] = \\\'\\\\0\\\')
(50,NULL)
(51,pFile)
(52,RET)
(53,if (pFile != NULL)
(54,dataLen)
(55,dataLen)
(56,pFile)
(57,pFile = fopen(FILENAME, "r")
(58,fclose(pFile)
(59,250)
(60,printLine("fgets()
(61,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
