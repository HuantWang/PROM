-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66_bad()
{
    char * data;
    char * dataArray[5];
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
36,37
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
75,78
75,79
75,80
75,81
75,82
75,83
75,84
75,85
75,86
75,87
75,88
75,89
76,77
77,78
77,79
78,79
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
102,103
105,106
106,107
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
132,134
133,134
136,137
136,138
137,138
139,140
141,142
141,143
142,143
142,144
143,144
143,145
143,146
143,147
144,145
146,147
148,149
148,150
149,150
149,151
150,151
152,153
154,155
155,156
157,158
158,159
159,160
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
169,172
169,173
169,174
170,171
172,173
174,175
174,176
175,176
175,177
177,178
179,180
180,181
180,182
181,182
183,184
185,186
185,187
186,187
187,188
187,189
190,191
191,192
191,193
192,193
192,194
194,195
198,199
198,200
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
216,217
216,218
217,218
219,220
219,221
220,221
222,223
223,224
223,225
227,228
228,229
228,230
229,230
231,232
231,233
231,234
232,233
234,235
237,238
237,239
238,239
240,241
241,242
242,243
242,244
243,244
244,245
247,248
248,249
248,250
249,250
251,252
251,253
251,254
252,253
254,255
257,258
257,259
258,259
260,261
261,262
262,263
262,264
263,264
264,265
268,269
268,270
269,270
269,271
270,271
272,273
274,275
275,276
276,277
276,278
277,278
279,280
281,282
282,283
282,284
283,284
283,285
284,285
287,288
289,290
290,291
290,292
291,292
293,294
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,28,32,34,38,40,44,46,49,51,52,56,58,61,65,67,71,73,79,82,84,86,88,92,94,96,100,103,104,108,113,114,116,122,123,124,127,129,134,135,138,140,145,147,151,153,156,160,162,164,168,171,173,176,178,182,184,188,189,193,195,196,197,202,204,207,208,210,215,218,221,224,225,226,230,233,235,236,239,245,246,250,253,255,256,259,265,266,267,271,273,278,280,285,286,288,292,294
-----computeFrom-----
30,31
30,32
77,78
77,79
90,91
90,92
110,111
110,112
118,119
118,120
131,132
131,133
142,143
142,144
166,167
166,168
180,181
180,182
185,186
185,187
191,192
191,193
192,193
192,194
199,200
199,201
200,201
200,202
205,206
205,207
212,213
212,214
216,217
216,218
219,220
219,221
228,229
228,230
242,243
242,244
248,249
248,250
262,263
262,264
269,270
269,271
282,283
282,284
-----guardedBy-----
271,280
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66_bad(){    char * data;    char * dataArray[5];    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray);}
void
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66_bad()
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66_bad
{    char * data;    char * dataArray[5];    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray);}
char * data;
char * data;
char
* data
*
data
char * dataArray[5];
char * dataArray[5];
char
* dataArray[5]
*
dataArray
[5]
5
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (250 - dataLen - 1)
sizeof(char)
char
char

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray);
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray)
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink
dataArray
dataArray
-----joern-----
(85,64,0)
(73,61,0)
(23,165,0)
(101,87,0)
(63,110,0)
(174,71,0)
(109,37,0)
(165,152,0)
(145,172,0)
(166,23,0)
(45,147,0)
(69,120,0)
(62,152,0)
(86,81,0)
(86,90,0)
(172,135,0)
(164,113,0)
(26,86,0)
(158,114,0)
(76,25,0)
(173,69,0)
(3,158,0)
(161,68,0)
(143,61,0)
(51,64,0)
(172,126,0)
(140,29,0)
(20,3,0)
(126,101,0)
(87,47,0)
(89,140,0)
(88,171,0)
(152,147,0)
(28,58,0)
(120,140,0)
(53,48,0)
(97,80,0)
(153,147,0)
(163,78,0)
(141,101,0)
(127,138,0)
(110,138,0)
(135,147,0)
(13,63,0)
(52,37,0)
(79,163,0)
(126,99,0)
(94,39,0)
(73,148,0)
(126,172,0)
(154,23,0)
(64,85,0)
(96,42,0)
(56,135,0)
(39,55,0)
(90,95,0)
(125,77,0)
(168,152,0)
(167,81,0)
(162,148,0)
(112,79,0)
(61,73,0)
(87,101,0)
(66,80,0)
(44,85,0)
(90,42,0)
(38,160,0)
(82,117,0)
(100,44,0)
(158,3,0)
(75,108,0)
(17,119,0)
(115,74,0)
(92,71,0)
(36,56,0)
(5,86,0)
(118,75,0)
(50,148,0)
(49,0,0)
(169,58,0)
(31,148,0)
(65,148,0)
(119,24,0)
(14,172,0)
(158,68,0)
(1,148,0)
(77,130,0)
(42,90,0)
(149,147,0)
(18,5,0)
(134,148,0)
(170,102,0)
(48,7,0)
(44,29,0)
(87,63,0)
(72,47,0)
(175,48,0)
(23,117,0)
(74,119,0)
(27,165,0)
(120,69,0)
(39,165,0)
(172,138,0)
(102,147,0)
(70,114,0)
(110,63,0)
(25,75,0)
(124,34,0)
(140,60,0)
(86,5,0)
(69,135,0)
(104,101,0)
(43,152,0)
(139,0,0)
(22,152,0)
(37,152,0)
(11,147,0)
(119,148,0)
(63,87,0)
(101,117,0)
(83,56,0)
(129,7,0)
(122,148,0)
(24,119,0)
(71,73,0)
(130,135,0)
(133,110,0)
(93,152,0)
(130,147,0)
(64,29,0)
(127,135,0)
(59,64,0)
(58,34,0)
(84,130,0)
(95,90,0)
(103,50,0)
(119,74,0)
(98,138,0)
(105,157,0)
(56,50,0)
(30,153,0)
(32,116,0)
(157,148,0)
(142,163,0)
(135,153,0)
(46,152,0)
(85,44,0)
(156,150,0)
(67,127,0)
(35,106,0)
(57,66,0)
(29,101,0)
(117,148,0)
(121,152,0)
(136,120,0)
(47,87,0)
(101,126,0)
(117,0,0)
(132,157,0)
(86,117,0)
(69,65,0)
(144,33,0)
(146,152,0)
(6,60,0)
(128,152,0)
(81,86,0)
(7,48,0)
(50,56,0)
(155,135,0)
(159,171,0)
(39,117,0)
(101,29,0)
(79,50,0)
(80,66,0)
(80,135,0)
(151,148,0)
(123,80,0)
(29,148,0)
(2,29,0)
(54,153,0)
(10,165,0)
(8,110,0)
(12,152,0)
(134,113,0)
(7,134,0)
(171,117,0)
(68,158,0)
(99,126,0)
(114,158,0)
(66,148,0)
(138,152,0)
(21,148,0)
(40,114,0)
(15,135,0)
(113,134,0)
(9,77,0)
(0,117,0)
(16,0,0)
(140,120,0)
(137,65,0)
(34,148,0)
(90,86,0)
(60,140,0)
(19,44,0)
(25,66,0)
(120,138,0)
(131,24,0)
(138,127,0)
(49,16,1)
(90,42,1)
(135,153,1)
(5,18,1)
(23,117,1)
(9,38,1)
(158,114,1)
(165,27,1)
(163,142,1)
(87,47,1)
(53,175,1)
(159,88,1)
(41,23,1)
(161,158,1)
(125,9,1)
(18,86,1)
(107,102,1)
(172,145,1)
(98,165,1)
(63,110,1)
(83,36,1)
(88,117,1)
(134,113,1)
(68,161,1)
(175,34,1)
(86,81,1)
(101,117,1)
(126,99,1)
(84,77,1)
(90,95,1)
(127,67,1)
(144,85,1)
(52,109,1)
(67,98,1)
(117,0,1)
(6,89,1)
(154,144,1)
(15,153,1)
(124,58,1)
(167,90,1)
(101,141,1)
(61,143,1)
(10,37,1)
(69,120,1)
(143,71,1)
(123,57,1)
(132,105,1)
(156,5,1)
(56,135,1)
(36,103,1)
(139,82,1)
(145,14,1)
(154,35,1)
(79,50,1)
(120,138,1)
(50,56,1)
(4,91,1)
(110,133,1)
(57,111,1)
(92,174,1)
(97,123,1)
(4,75,1)
(59,44,1)
(39,165,1)
(77,125,1)
(17,74,1)
(113,164,1)
(3,20,1)
(135,155,1)
(130,135,1)
(154,32,1)
(34,124,1)
(154,4,1)
(153,30,1)
(82,157,1)
(89,136,1)
(2,5,1)
(120,140,1)
(23,166,1)
(48,53,1)
(42,96,1)
(136,173,1)
(101,87,1)
(109,135,1)
(41,39,1)
(157,132,1)
(80,135,1)
(172,135,1)
(20,114,1)
(39,94,1)
(104,2,1)
(131,17,1)
(75,118,1)
(138,127,1)
(24,131,1)
(133,8,1)
(164,7,1)
(9,41,1)
(111,50,1)
(65,137,1)
(169,28,1)
(142,79,1)
(158,3,1)
(38,41,1)
(103,65,1)
(39,117,1)
(86,90,1)
(19,29,1)
(140,29,1)
(14,104,1)
(80,97,1)
(174,134,1)
(40,138,1)
(74,115,1)
(110,138,1)
(112,111,1)
(60,6,1)
(37,52,1)
(141,87,1)
(119,74,1)
(81,167,1)
(172,138,1)
(79,112,1)
(58,169,1)
(119,24,1)
(68,158,1)
(100,19,1)
(166,154,1)
(30,54,1)
(57,163,1)
(73,61,1)
(87,63,1)
(171,159,1)
(23,165,1)
(173,85,1)
(91,66,1)
(8,13,1)
(154,156,1)
(44,100,1)
(27,10,1)
(29,101,1)
(13,47,1)
(64,51,1)
(47,72,1)
(85,64,1)
(118,25,1)
(155,15,1)
(105,68,1)
(85,44,1)
(101,126,1)
(140,60,1)
(26,73,1)
(126,172,1)
(66,80,1)
(76,91,1)
(127,135,1)
(170,130,1)
(64,29,1)
(5,86,1)
(16,139,1)
(70,40,1)
(86,117,1)
(115,171,1)
(35,171,1)
(25,76,1)
(28,119,1)
(40,4,1)
(102,170,1)
(94,23,1)
(114,70,1)
(32,68,1)
(171,117,1)
(7,48,1)
(130,84,1)
(25,66,1)
(72,126,1)
(0,49,1)
(7,129,1)
(44,29,1)
(129,48,1)
(69,135,1)
(71,92,1)
(56,83,1)
(96,26,1)
(137,69,1)
(51,59,1)
(90,42,2)
(61,171,2)
(40,4,2)
(64,44,2)
(111,85,2)
(159,68,2)
(34,171,2)
(110,5,2)
(110,138,2)
(140,29,2)
(76,91,2)
(174,171,2)
(50,85,2)
(118,91,2)
(104,5,2)
(23,165,2)
(169,171,2)
(59,44,2)
(172,5,2)
(126,99,2)
(89,85,2)
(42,171,2)
(7,48,2)
(101,87,2)
(136,85,2)
(85,64,2)
(119,171,2)
(86,117,2)
(14,5,2)
(142,111,2)
(126,5,2)
(39,117,2)
(86,171,2)
(101,126,2)
(167,171,2)
(137,85,2)
(141,5,2)
(133,5,2)
(143,171,2)
(20,4,2)
(26,171,2)
(75,91,2)
(51,44,2)
(63,110,2)
(101,117,2)
(60,85,2)
(157,68,2)
(127,135,2)
(68,4,2)
(64,29,2)
(140,85,2)
(120,138,2)
(90,95,2)
(66,80,2)
(58,171,2)
(29,5,2)
(85,44,2)
(24,171,2)
(69,135,2)
(161,4,2)
(87,47,2)
(171,68,2)
(134,113,2)
(8,5,2)
(94,23,2)
(132,68,2)
(103,85,2)
(7,171,2)
(158,4,2)
(172,138,2)
(23,117,2)
(53,171,2)
(72,5,2)
(47,5,2)
(131,171,2)
(135,153,2)
(91,85,2)
(86,81,2)
(5,86,2)
(38,41,2)
(3,4,2)
(81,171,2)
(145,5,2)
(114,4,2)
(66,85,2)
(134,171,2)
(117,0,2)
(50,56,2)
(13,5,2)
(32,68,2)
(164,171,2)
(68,158,2)
(100,5,2)
(124,171,2)
(5,171,2)
(144,85,2)
(80,85,2)
(69,85,2)
(80,135,2)
(63,5,2)
(112,111,2)
(85,5,2)
(28,171,2)
(65,85,2)
(73,171,2)
(101,5,2)
(88,68,2)
(82,68,2)
(19,5,2)
(105,68,2)
(44,29,2)
(49,68,2)
(16,68,2)
(171,117,2)
(2,5,2)
(90,171,2)
(0,68,2)
(71,171,2)
(175,171,2)
(140,60,2)
(73,61,2)
(48,171,2)
(86,90,2)
(158,114,2)
(56,135,2)
(29,101,2)
(79,111,2)
(119,24,2)
(83,85,2)
(25,66,2)
(173,85,2)
(163,111,2)
(39,23,2)
(117,68,2)
(123,85,2)
(172,135,2)
(44,5,2)
(57,85,2)
(56,85,2)
(158,3,2)
(25,91,2)
(4,85,2)
(36,85,2)
(6,85,2)
(39,165,2)
(119,74,2)
(18,171,2)
(87,5,2)
(130,135,2)
(120,140,2)
(92,171,2)
(156,5,2)
(138,127,2)
(139,68,2)
(69,120,2)
(79,50,2)
(115,171,2)
(35,171,2)
(96,171,2)
(17,171,2)
(113,171,2)
(129,171,2)
(87,63,2)
(97,85,2)
(74,171,2)
(120,85,2)
(126,172,2)
(70,4,2)
-----------------------------------
(0,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(1,if (connect(connectSocket, (struct sockaddr*)
(2,recvResult)
(3,&wsaData)
(4,0)
(5,connect(connectSocket, (struct sockaddr*)
(6,char)
(7,service.sin_addr.s_addr)
(8,dataLen)
(9,dataArray)
(10,connectSocket)
(11,dataArray)
(12,wsaData)
(13,250)
(14,data)
(15,data)
(16,SOCK_STREAM)
(17,0)
(18,SOCKET_ERROR)
(19,recvResult)
(20,wsaData)
(21,if (replace)
(22,do)
(23,connectSocket != INVALID_SOCKET)
(24,sizeof(service)
(25,*replace)
(26,connectSocket)
(27,INVALID_SOCKET)
(28,service)
(29,recvResult = recv(connectSocket, (char *)
(30,"PATH=")
(31,if (recvResult == SOCKET_ERROR || recvResult == 0)
(32,break;)
(33,)
(34,service.sin_family = AF_INET)
(35,break;)
(36,data)
(37,wsaDataInit = 0)
(38,WSACleanup()
(39,CLOSE_SOCKET(connectSocket)
(40,2)
(41,wsaDataInit)
(42,&service)
(43,replace)
(44,recvResult == SOCKET_ERROR)
(45,dataBuffer)
(46,if (wsaDataInit)
(47,sizeof(char)
(48,service.sin_addr)
(49,IPPROTO_TCP)
(50,replace = strchr(data, \\\'\\\\r\\\')
(51,0)
(52,0)
(53,sin_addr)
(54,dataBuffer)
(55,)
(56,strchr(data, \\\'\\\\r\\\')
(57,replace)
(58,service.sin_family)
(59,recvResult)
(60,sizeof(char)
(61,htons(TCP_PORT)
(62,if (connectSocket != INVALID_SOCKET)
(63,250 - dataLen - 1)
(64,recvResult == 0)
(65,data[dataLen + recvResult / sizeof(char)
(66,replace = strchr(data, \\\'\\\\n\\\')
(67,data)
(68,WSAStartup(MAKEWORD(2,2)
(69,data[dataLen + recvResult / sizeof(char)
(70,2)
(71,service.sin_port)
(72,char)
(73,service.sin_port = htons(TCP_PORT)
(74,&service)
(75,*replace = \\\'\\\\0\\\')
(76,replace)
(77,dataArray[2])
(78,)
(79,*replace)
(80,strchr(data, \\\'\\\\n\\\')
(81,sizeof(service)
(82,connectSocket)
(83,\\\'\\\\r\\\')
(84,data)
(85,recvResult == SOCKET_ERROR || recvResult == 0)
(86,connect(connectSocket, (struct sockaddr*)
(87,sizeof(char)
(88,connectSocket)
(89,recvResult)
(90,(struct sockaddr*)
(91,replace)
(92,sin_port)
(93,recvResult)
(94,connectSocket)
(95,struct sockaddr*)
(96,service)
(97,\\\'\\\\n\\\')
(98,dataLen)
(99,char *)
(100,SOCKET_ERROR)
(101,recv(connectSocket, (char *)
(102,CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_66b_badSink(dataArray)
(103,replace)
(104,connectSocket)
(105,wsaDataInit)
(106,)
(107,RET)
(108,)
(109,wsaDataInit)
(110,dataLen - 1)
(111,replace)
(112,replace)
(113,inet_addr(IP_ADDRESS)
(114,MAKEWORD(2,2)
(115,service)
(116,)
(117,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(118,\\\'\\\\0\\\')
(119,memset(&service, 0, sizeof(service)
(120,dataLen + recvResult / sizeof(char)
(121,wsaDataInit)
(122,if (WSAStartup(MAKEWORD(2,2)
(123,data)
(124,AF_INET)
(125,2)
(126,(char *)
(127,strlen(data)
(128,connectSocket)
(129,s_addr)
(130,dataArray[2] = data)
(131,service)
(132,1)
(133,1)
(134,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(135,data = dataBuffer)
(136,dataLen)
(137,\\\'\\\\0\\\')
(138,dataLen = strlen(data)
(139,AF_INET)
(140,recvResult / sizeof(char)
(141,0)
(142,\\\'\\\\0\\\')
(143,TCP_PORT)
(144,break;)
(145,dataLen)
(146,service)
(147,)
(148,)
(149,data)
(150,)
(151,if (replace)
(152,)
(153,dataBuffer[250] = "PATH=")
(154,connectSocket)
(155,dataBuffer)
(156,break;)
(157,wsaDataInit = 1)
(158,WSAStartup(MAKEWORD(2,2)
(159,INVALID_SOCKET)
(160,)
(161,NO_ERROR)
(162,if (connectSocket == INVALID_SOCKET)
(163,*replace = \\\'\\\\0\\\')
(164,IP_ADDRESS)
(165,connectSocket = INVALID_SOCKET)
(166,INVALID_SOCKET)
(167,service)
(168,dataLen)
(169,sin_family)
(170,dataArray)
(171,connectSocket == INVALID_SOCKET)
(172,data + dataLen)
(173,data)
(174,service)
(175,service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
