-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_09_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_09_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_09_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_09_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(GLOBAL_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(1,57,0)
(73,23,0)
(19,45,0)
(65,0,0)
(24,26,0)
(18,0,0)
(0,18,0)
(51,18,0)
(43,26,0)
(63,10,0)
(56,53,0)
(43,6,0)
(67,14,0)
(72,62,0)
(26,53,0)
(71,2,0)
(32,70,0)
(31,56,0)
(40,1,0)
(60,17,0)
(33,36,0)
(44,46,0)
(39,15,0)
(21,2,0)
(39,43,0)
(3,35,0)
(2,56,0)
(55,53,0)
(30,51,0)
(15,41,0)
(70,33,0)
(16,39,0)
(4,48,0)
(49,36,0)
(66,15,0)
(29,48,0)
(62,52,0)
(0,43,0)
(58,1,0)
(8,58,0)
(1,46,0)
(38,41,0)
(5,57,0)
(23,35,0)
(13,6,0)
(42,0,0)
(53,35,0)
(2,43,0)
(25,39,0)
(56,51,0)
(46,1,0)
(28,35,0)
(14,35,0)
(34,4,0)
(57,9,0)
(54,14,0)
(48,4,0)
(33,70,0)
(20,43,0)
(7,32,0)
(10,53,0)
(11,57,0)
(70,10,0)
(26,43,0)
(46,53,0)
(64,70,0)
(27,36,0)
(10,70,0)
(59,4,0)
(47,10,0)
(33,37,0)
(53,14,0)
(51,56,0)
(22,53,0)
(17,52,0)
(41,69,0)
(15,53,0)
(4,1,0)
(58,17,0)
(23,53,0)
(18,51,0)
(56,2,0)
(37,33,0)
(15,39,0)
(70,32,0)
(36,33,0)
(10,1,0)
(61,35,0)
(36,1,0)
(58,53,0)
(68,58,0)
(55,22,1)
(36,49,1)
(23,73,1)
(68,62,1)
(66,18,1)
(23,53,1)
(21,71,1)
(1,46,1)
(0,43,1)
(51,30,1)
(15,53,1)
(41,38,1)
(10,53,1)
(17,60,1)
(56,2,1)
(40,50,1)
(46,44,1)
(8,68,1)
(25,16,1)
(20,32,1)
(14,54,1)
(48,4,1)
(2,43,1)
(15,39,1)
(58,53,1)
(7,70,1)
(46,53,1)
(32,7,1)
(44,40,1)
(58,1,1)
(32,70,1)
(43,26,1)
(26,53,1)
(10,1,1)
(54,67,1)
(72,32,1)
(18,51,1)
(26,24,1)
(38,15,1)
(16,66,1)
(39,43,1)
(50,53,1)
(56,53,1)
(73,50,1)
(63,48,1)
(10,47,1)
(0,42,1)
(49,27,1)
(65,43,1)
(60,58,1)
(64,33,1)
(70,10,1)
(59,34,1)
(34,1,1)
(53,14,1)
(73,48,1)
(22,14,1)
(33,37,1)
(30,56,1)
(29,4,1)
(71,31,1)
(58,8,1)
(73,17,1)
(70,64,1)
(62,72,1)
(27,10,1)
(73,18,1)
(48,29,1)
(18,0,1)
(24,20,1)
(51,56,1)
(36,1,1)
(4,1,1)
(47,63,1)
(70,33,1)
(53,55,1)
(12,23,1)
(4,59,1)
(42,65,1)
(31,0,1)
(33,36,1)
(73,41,1)
(39,25,1)
(2,21,1)
(26,53,2)
(8,32,2)
(56,0,2)
(58,53,2)
(7,48,2)
(70,10,2)
(33,36,2)
(18,0,2)
(18,51,2)
(36,1,2)
(64,48,2)
(56,2,2)
(2,43,2)
(51,56,2)
(36,48,2)
(53,14,2)
(30,0,2)
(0,32,2)
(68,32,2)
(25,18,2)
(58,1,2)
(10,1,2)
(10,53,2)
(24,32,2)
(38,18,2)
(41,18,2)
(16,18,2)
(1,50,2)
(51,0,2)
(33,48,2)
(26,32,2)
(70,48,2)
(31,0,2)
(4,1,2)
(21,0,2)
(39,43,2)
(15,53,2)
(4,50,2)
(18,32,2)
(72,32,2)
(56,53,2)
(40,50,2)
(20,32,2)
(71,0,2)
(65,32,2)
(48,4,2)
(10,48,2)
(15,39,2)
(46,53,2)
(66,18,2)
(49,48,2)
(70,33,2)
(0,43,2)
(43,32,2)
(48,50,2)
(32,70,2)
(1,46,2)
(2,0,2)
(47,48,2)
(44,50,2)
(32,48,2)
(46,50,2)
(34,50,2)
(42,32,2)
(60,32,2)
(58,32,2)
(39,18,2)
(15,18,2)
(33,37,2)
(29,50,2)
(23,53,2)
(17,32,2)
(59,50,2)
(63,48,2)
(27,48,2)
(62,32,2)
(43,26,2)
-----------------------------------
(0,dataLen > 0)
(1,dataLen = strlen(data)
(2,dataLen-1)
(3,data)
(4,250-dataLen)
(5,dataLen)
(6,)
(7,NULL)
(8,dataLen)
(9,)
(10,data+dataLen)
(11,if (250-dataLen > 1)
(12,RET)
(13,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(14,dataBuffer[250] = "PATH=")
(15,data[dataLen-1])
(16,dataLen)
(17,data[dataLen] = \\\'\\\\0\\\')
(18,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(19,if (fgets(data+dataLen, (int)
(20,dataLen)
(21,1)
(22,data)
(23,PUTENV(data)
(24,data)
(25,1)
(26,strlen(data)
(27,250)
(28,dataBuffer)
(29,1)
(30,\\\'\\\\n\\\')
(31,data)
(32,fgets(data+dataLen, (int)
(33,(int)
(34,250)
(35,)
(36,250-dataLen)
(37,int)
(38,\\\'\\\\0\\\')
(39,dataLen-1)
(40,dataLen)
(41,data[dataLen-1] = \\\'\\\\0\\\')
(42,0)
(43,dataLen = strlen(data)
(44,data)
(45,)
(46,strlen(data)
(47,dataLen)
(48,250-dataLen > 1)
(49,dataLen)
(50,GLOBAL_CONST_TRUE)
(51,data[dataLen-1] == \\\'\\\\n\\\')
(52,)
(53,data = dataBuffer)
(54,"PATH=")
(55,dataBuffer)
(56,data[dataLen-1])
(57,)
(58,data[dataLen])
(59,dataLen)
(60,\\\'\\\\0\\\')
(61,if(GLOBAL_CONST_TRUE)
(62,printLine("fgets()
(63,data)
(64,stdin)
(65,dataLen)
(66,data)
(67,dataBuffer)
(68,data)
(69,)
(70,fgets(data+dataLen, (int)
(71,dataLen)
(72,"fgets()
(73,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
