-----label-----
1
-----code-----
void CWE256_Plaintext_Storage_of_Password__w32_char_34_bad()
{
    char * data;
    CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType myUnion;
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        FILE *pFile;
        pFile = fopen("passwords.txt", "r");
        if (pFile != NULL)
        {
            /* POTENTIAL FLAW: Read the password from a file */
            if (fgets(data, 100, pFile) == NULL)
            {
                data[0] = '\0';
            }
            fclose(pFile);
        }
        else
        {
            data[0] = '\0';
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            /* POTENTIAL FLAW: Attempt to login user with password from the source */
            if (LogonUserA(
                        username,
                        domain,
                        data,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
46,47
50,51
50,52
50,53
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
65,66
67,68
69,70
70,71
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
86,88
87,88
91,92
92,93
92,94
93,94
93,95
94,95
97,98
99,100
99,101
100,101
101,102
101,103
103,104
103,105
103,106
106,107
107,108
107,109
108,109
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
121,122
121,123
121,124
124,125
126,127
127,128
127,129
129,130
129,131
129,132
132,133
134,135
134,136
134,137
135,136
135,137
136,137
136,138
136,139
136,140
136,141
136,142
136,143
137,138
139,140
141,142
143,144
145,146
147,148
149,150
150,151
153,154
153,155
154,155
155,156
155,157
156,157
159,160
160,161
160,162
161,162
163,164
165,166
166,167
167,168
167,169
168,169
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,26,30,32,37,39,40,44,47,48,49,53,55,61,63,64,66,68,74,75,76,80,82,88,89,90,95,96,98,102,104,105,109,110,115,117,120,122,123,125,128,130,131,133,138,140,142,144,146,148,151,152,157,158,162,164,169,170
-----computeFrom-----
28,29
28,30
42,43
42,44
51,52
51,53
58,59
58,60
71,72
71,73
85,86
85,87
92,93
92,94
135,136
135,137
-----guardedBy-----
55,68
53,82
63,74
151,164
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE256_Plaintext_Storage_of_Password__w32_char_34_bad(){    char * data;    CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType myUnion;    char dataBuffer[100] = "";    data = dataBuffer;    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }}
void
CWE256_Plaintext_Storage_of_Password__w32_char_34_bad()
CWE256_Plaintext_Storage_of_Password__w32_char_34_bad
{    char * data;    CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType myUnion;    char dataBuffer[100] = "";    data = dataBuffer;    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }}
char * data;
char * data;
char
* data
*
data
CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType myUnion;
CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType myUnion;
CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType
CWE256_Plaintext_Storage_of_Password__w32_char_34_unionType
myUnion
myUnion
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }
pFile != NULL
pFile
pFile
NULL
NULL
{            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }
if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }
fgets(data, 100, pFile) == NULL
fgets(data, 100, pFile)
fgets
fgets
data
data
100
pFile
pFile
NULL
NULL
{                data[0] = '\0';            }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{            data[0] = '\0';        }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
data
data
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(18,3,0)
(20,40,0)
(11,20,0)
(71,65,0)
(44,79,0)
(2,66,0)
(24,70,0)
(5,34,0)
(65,58,0)
(10,30,0)
(25,78,0)
(48,5,0)
(58,40,0)
(58,65,0)
(69,20,0)
(70,20,0)
(15,77,0)
(5,48,0)
(77,41,0)
(46,19,0)
(76,69,0)
(7,43,0)
(19,66,0)
(63,83,0)
(53,17,0)
(55,20,0)
(43,79,0)
(5,58,0)
(30,66,0)
(38,12,0)
(83,78,0)
(43,30,0)
(74,5,0)
(28,75,0)
(23,5,0)
(4,40,0)
(35,34,0)
(51,59,0)
(39,16,0)
(5,70,0)
(62,17,0)
(64,37,0)
(7,3,0)
(21,28,0)
(51,78,0)
(84,51,0)
(83,28,0)
(14,69,0)
(13,27,0)
(57,66,0)
(40,66,0)
(31,38,0)
(82,7,0)
(0,37,0)
(52,59,0)
(61,12,0)
(16,27,0)
(9,78,0)
(6,5,0)
(68,7,0)
(49,8,0)
(7,78,0)
(80,83,0)
(79,43,0)
(36,20,0)
(37,8,0)
(1,66,0)
(34,5,0)
(56,19,0)
(67,61,0)
(8,66,0)
(72,65,0)
(54,58,0)
(32,51,0)
(47,43,0)
(29,20,0)
(59,22,0)
(60,48,0)
(45,5,0)
(78,66,0)
(73,5,0)
(17,43,0)
(81,79,0)
(50,7,0)
(5,69,0)
(16,43,0)
(42,30,0)
(3,7,0)
(78,19,0)
(8,78,0)
(33,70,0)
(51,78,1)
(74,45,1)
(71,54,1)
(39,28,1)
(17,43,1)
(61,67,1)
(8,78,1)
(33,24,1)
(48,60,1)
(21,83,1)
(73,23,1)
(28,21,1)
(68,82,1)
(24,58,1)
(35,6,1)
(39,3,1)
(81,47,1)
(78,9,1)
(8,49,1)
(80,3,1)
(7,43,1)
(45,73,1)
(26,77,1)
(50,68,1)
(83,78,1)
(32,17,1)
(26,61,1)
(76,14,1)
(60,5,1)
(82,17,1)
(78,19,1)
(84,32,1)
(53,43,1)
(23,69,1)
(34,35,1)
(51,84,1)
(0,64,1)
(5,34,1)
(67,38,1)
(49,37,1)
(3,18,1)
(25,19,1)
(6,74,1)
(69,76,1)
(46,56,1)
(44,81,1)
(64,16,1)
(9,25,1)
(16,39,1)
(77,15,1)
(17,62,1)
(7,78,1)
(7,50,1)
(14,70,1)
(79,44,1)
(43,79,1)
(38,31,1)
(72,71,1)
(63,80,1)
(70,33,1)
(18,7,1)
(52,51,1)
(54,8,1)
(19,46,1)
(62,53,1)
(15,48,1)
(3,7,1)
(65,72,1)
(58,65,1)
(16,43,1)
(59,52,1)
(83,63,1)
(31,48,1)
(64,59,1)
(5,70,1)
(5,69,1)
(37,0,1)
(47,78,1)
(48,5,1)
(5,58,1)
(15,48,2)
(28,3,2)
(3,17,2)
(38,48,2)
(78,19,2)
(5,58,2)
(82,17,2)
(5,34,2)
(67,48,2)
(16,17,2)
(58,65,2)
(32,17,2)
(48,5,2)
(80,3,2)
(17,43,2)
(68,17,2)
(7,43,2)
(83,78,2)
(7,17,2)
(7,78,2)
(63,3,2)
(51,78,2)
(77,48,2)
(52,17,2)
(59,17,2)
(39,17,2)
(8,78,2)
(18,17,2)
(3,7,2)
(50,17,2)
(16,43,2)
(51,17,2)
(21,3,2)
(61,48,2)
(84,17,2)
(5,70,2)
(31,48,2)
(43,79,2)
(83,3,2)
(5,69,2)
-----------------------------------
(0,unionFirst)
(1,dataBuffer)
(2,myUnion)
(3,fgets(data, 100, pFile)
(4,data)
(5,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(6,LOGON32_PROVIDER_DEFAULT)
(7,fgets(data, 100, pFile)
(8,myUnion.unionFirst = data)
(9,dataBuffer)
(10,pFile)
(11,pHandle)
(12,)
(13,if (fgets(data, 100, pFile)
(14,domain)
(15,"Unable to login.")
(16,fclose(pFile)
(17,pFile != NULL)
(18,NULL)
(19,dataBuffer[100] = "")
(20,)
(21,\\\'\\\\0\\\')
(22,)
(23,username)
(24,username)
(25,data)
(26,RET)
(27,)
(28,data[0] = \\\'\\\\0\\\')
(29,username)
(30,)
(31,"User logged in successfully.")
(32,data)
(33,"User")
(34,&pHandle)
(35,pHandle)
(36,domain)
(37,myUnion.unionFirst)
(38,printLine("User logged in successfully.")
(39,pFile)
(40,)
(41,)
(42,if (pFile != NULL)
(43,pFile = fopen("passwords.txt", "r")
(44,"r")
(45,data)
(46,"")
(47,pFile)
(48,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(49,data)
(50,pFile)
(51,data[0])
(52,\\\'\\\\0\\\')
(53,pFile)
(54,data)
(55,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(56,dataBuffer)
(57,data)
(58,* data = myUnion.unionSecond)
(59,data[0] = \\\'\\\\0\\\')
(60,0)
(61,CloseHandle(pHandle)
(62,NULL)
(63,0)
(64,myUnion)
(65,myUnion.unionSecond)
(66,)
(67,pHandle)
(68,100)
(69,* domain = "Domain")
(70,* username = "User")
(71,myUnion)
(72,unionSecond)
(73,domain)
(74,LOGON32_LOGON_NETWORK)
(75,)
(76,"Domain")
(77,printLine("Unable to login.")
(78,data = dataBuffer)
(79,fopen("passwords.txt", "r")
(80,data)
(81,"passwords.txt")
(82,data)
(83,data[0])
(84,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
