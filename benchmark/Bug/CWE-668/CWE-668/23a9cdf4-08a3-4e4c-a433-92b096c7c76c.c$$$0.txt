-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_14_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalFive==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,132
-----computeFrom-----
22,23
22,24
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_14_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_14_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_14_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(28,63,0)
(27,29,0)
(75,36,0)
(6,32,0)
(33,24,0)
(21,29,0)
(54,31,0)
(61,5,0)
(67,58,0)
(34,64,0)
(5,34,0)
(41,33,0)
(32,31,0)
(9,67,0)
(67,29,0)
(15,64,0)
(74,8,0)
(49,72,0)
(0,7,0)
(22,33,0)
(26,34,0)
(43,73,0)
(20,54,0)
(65,67,0)
(17,4,0)
(66,34,0)
(12,33,0)
(62,43,0)
(60,33,0)
(40,22,0)
(21,72,0)
(66,19,0)
(4,34,0)
(59,22,0)
(3,21,0)
(4,41,0)
(2,32,0)
(16,31,0)
(50,10,0)
(14,12,0)
(71,29,0)
(30,10,0)
(22,59,0)
(72,69,0)
(33,12,0)
(29,43,0)
(31,32,0)
(32,6,0)
(5,29,0)
(21,34,0)
(8,66,0)
(31,54,0)
(2,29,0)
(42,24,0)
(19,33,0)
(45,43,0)
(47,41,0)
(59,8,0)
(1,64,0)
(58,67,0)
(35,27,0)
(38,44,0)
(29,5,0)
(34,10,0)
(31,27,0)
(48,27,0)
(8,59,0)
(11,69,0)
(7,10,0)
(52,10,0)
(66,8,0)
(44,18,0)
(27,34,0)
(68,34,0)
(57,2,0)
(27,31,0)
(25,19,0)
(7,34,0)
(64,10,0)
(4,44,0)
(46,41,0)
(37,11,0)
(55,22,0)
(32,2,0)
(12,34,0)
(13,58,0)
(70,2,0)
(51,21,0)
(39,19,0)
(19,66,0)
(56,66,0)
(41,4,0)
(53,63,0)
(12,34,1)
(67,29,1)
(49,21,1)
(47,46,1)
(14,60,1)
(31,16,1)
(51,11,1)
(41,47,1)
(0,44,1)
(46,17,1)
(0,63,1)
(32,2,1)
(48,58,1)
(41,33,1)
(57,27,1)
(23,7,1)
(39,25,1)
(55,40,1)
(5,61,1)
(37,54,1)
(67,65,1)
(59,22,1)
(53,28,1)
(35,48,1)
(68,64,1)
(19,33,1)
(5,34,1)
(13,67,1)
(34,26,1)
(21,34,1)
(0,59,1)
(31,27,1)
(4,34,1)
(0,72,1)
(70,57,1)
(54,31,1)
(4,41,1)
(12,14,1)
(7,34,1)
(17,59,1)
(72,49,1)
(33,12,1)
(1,15,1)
(27,29,1)
(16,32,1)
(29,5,1)
(19,39,1)
(40,33,1)
(8,74,1)
(26,68,1)
(65,9,1)
(21,29,1)
(66,34,1)
(27,35,1)
(71,63,1)
(32,6,1)
(58,13,1)
(2,29,1)
(7,0,1)
(22,55,1)
(25,56,1)
(38,4,1)
(9,29,1)
(59,8,1)
(28,34,1)
(20,31,1)
(56,22,1)
(66,19,1)
(3,51,1)
(11,37,1)
(60,54,1)
(2,70,1)
(21,3,1)
(44,38,1)
(0,58,1)
(34,64,1)
(61,71,1)
(63,53,1)
(22,33,1)
(64,1,1)
(58,67,1)
(54,20,1)
(27,34,1)
(8,66,1)
(74,66,1)
(31,32,1)
(59,22,2)
(25,22,2)
(56,22,2)
(66,22,2)
(59,54,2)
(21,29,2)
(39,22,2)
(5,34,2)
(46,59,2)
(3,54,2)
(2,29,2)
(51,54,2)
(12,34,2)
(13,63,2)
(41,59,2)
(19,22,2)
(31,32,2)
(22,54,2)
(33,12,2)
(7,34,2)
(35,58,2)
(48,58,2)
(32,6,2)
(49,54,2)
(61,63,2)
(34,64,2)
(20,58,2)
(59,8,2)
(2,58,2)
(71,63,2)
(29,63,2)
(70,58,2)
(32,58,2)
(37,54,2)
(14,54,2)
(9,63,2)
(19,33,2)
(4,34,2)
(58,63,2)
(4,41,2)
(27,58,2)
(8,66,2)
(47,59,2)
(12,54,2)
(54,31,2)
(65,63,2)
(21,34,2)
(66,19,2)
(27,34,2)
(74,22,2)
(17,59,2)
(40,54,2)
(33,54,2)
(54,58,2)
(27,29,2)
(66,34,2)
(32,2,2)
(60,54,2)
(8,22,2)
(41,33,2)
(16,58,2)
(5,63,2)
(31,27,2)
(55,54,2)
(44,59,2)
(29,5,2)
(22,33,2)
(67,63,2)
(58,67,2)
(67,29,2)
(57,58,2)
(31,58,2)
(21,54,2)
(11,54,2)
(72,54,2)
(38,59,2)
(4,59,2)
-----------------------------------
(0,data)
(1,"PATH=")
(2,250-dataLen)
(3,dataLen)
(4,data[dataLen-1])
(5,strlen(data)
(6,int)
(7,PUTENV(data)
(8,data[dataLen-1] == \\\'\\\\n\\\')
(9,250)
(10,)
(11,printLine("fgets()
(12,strlen(data)
(13,1)
(14,data)
(15,dataBuffer)
(16,stdin)
(17,data)
(18,)
(19,dataLen-1)
(20,NULL)
(21,data[dataLen])
(22,dataLen > 0)
(23,RET)
(24,)
(25,dataLen)
(26,dataBuffer)
(27,data+dataLen)
(28,globalFive)
(29,dataLen = strlen(data)
(30,data)
(31,fgets(data+dataLen, (int)
(32,(int)
(33,dataLen = strlen(data)
(34,data = dataBuffer)
(35,dataLen)
(36,)
(37,"fgets()
(38,\\\'\\\\0\\\')
(39,1)
(40,dataLen)
(41,dataLen-1)
(42,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(43,)
(44,data[dataLen-1] = \\\'\\\\0\\\')
(45,dataLen)
(46,dataLen)
(47,1)
(48,data)
(49,\\\'\\\\0\\\')
(50,if(globalFive==5)
(51,data)
(52,dataBuffer)
(53,5)
(54,fgets(data+dataLen, (int)
(55,0)
(56,data)
(57,250)
(58,250-dataLen > 1)
(59,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(60,dataLen)
(61,data)
(62,if (250-dataLen > 1)
(63,globalFive==5)
(64,dataBuffer[250] = "PATH=")
(65,dataLen)
(66,data[dataLen-1])
(67,250-dataLen)
(68,data)
(69,)
(70,dataLen)
(71,dataLen)
(72,data[dataLen] = \\\'\\\\0\\\')
(73,)
(74,\\\'\\\\n\\\')
(75,if (fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
