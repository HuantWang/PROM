-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (250-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
62,64
63,64
63,65
64,65
64,66
66,67
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
77,78
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
89,91
89,92
89,93
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
101,102
102,103
102,104
104,105
106,107
108,109
110,111
110,112
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,35,39,41,46,48,52,54,58,60,61,65,67,68,73,76,78,79,83,85,91,94,96,99,100,103,105,107,109,114,115,120,122,123,127,129,133,135
-----computeFrom-----
37,38
37,39
63,64
63,65
64,65
64,66
71,72
71,73
81,82
81,83
88,89
88,90
92,93
92,94
102,103
102,104
117,118
117,119
-----guardedBy-----
67,122
85,109
83,129
94,120
105,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_44_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(44,22,0)
(19,6,0)
(62,40,0)
(1,51,0)
(40,50,0)
(16,30,0)
(0,2,0)
(62,58,0)
(23,2,0)
(37,0,0)
(2,60,0)
(40,22,0)
(28,51,0)
(24,6,0)
(51,49,0)
(53,34,0)
(48,36,0)
(11,40,0)
(2,6,0)
(17,49,0)
(27,59,0)
(57,6,0)
(61,2,0)
(24,60,0)
(60,24,0)
(60,26,0)
(34,7,0)
(15,26,0)
(29,6,0)
(45,49,0)
(47,62,0)
(54,0,0)
(55,49,0)
(2,0,0)
(46,24,0)
(29,36,0)
(0,40,0)
(20,40,0)
(41,0,0)
(32,49,0)
(16,60,0)
(0,54,0)
(36,7,0)
(38,16,0)
(41,59,0)
(8,17,0)
(57,49,0)
(22,40,0)
(52,58,0)
(56,22,0)
(6,17,0)
(26,49,0)
(42,11,0)
(31,26,0)
(4,17,0)
(21,26,0)
(13,41,0)
(59,60,0)
(41,13,0)
(3,59,0)
(30,16,0)
(25,60,0)
(43,57,0)
(9,11,0)
(14,6,0)
(10,30,0)
(5,50,0)
(59,41,0)
(0,41,0)
(18,29,0)
(29,60,0)
(12,54,0)
(35,29,0)
(39,16,0)
(6,49,0)
(48,29,1)
(41,13,1)
(10,16,1)
(0,40,1)
(60,24,1)
(19,17,1)
(54,0,1)
(38,60,1)
(23,11,1)
(61,23,1)
(11,42,1)
(0,37,1)
(57,43,1)
(51,1,1)
(39,38,1)
(43,62,1)
(36,48,1)
(22,44,1)
(41,59,1)
(54,12,1)
(12,0,1)
(30,16,1)
(46,25,1)
(62,40,1)
(2,60,1)
(42,9,1)
(0,2,1)
(47,54,1)
(43,11,1)
(16,39,1)
(2,61,1)
(44,56,1)
(1,28,1)
(20,30,1)
(29,6,1)
(9,40,1)
(11,40,1)
(59,27,1)
(33,57,1)
(18,34,1)
(53,54,1)
(0,41,1)
(30,10,1)
(43,30,1)
(62,47,1)
(37,41,1)
(40,22,1)
(25,6,1)
(24,46,1)
(3,2,1)
(27,3,1)
(57,6,1)
(8,4,1)
(17,8,1)
(34,53,1)
(2,6,1)
(56,20,1)
(59,60,1)
(47,36,1)
(4,51,1)
(29,35,1)
(29,60,1)
(6,14,1)
(14,19,1)
(6,17,1)
(35,18,1)
(24,6,1)
(16,60,1)
(59,60,2)
(35,54,2)
(12,11,2)
(40,22,2)
(0,2,2)
(62,11,2)
(44,30,2)
(54,11,2)
(36,54,2)
(40,30,2)
(9,30,2)
(54,0,2)
(2,6,2)
(29,6,2)
(41,13,2)
(2,60,2)
(2,11,2)
(41,59,2)
(37,11,2)
(23,11,2)
(22,30,2)
(11,30,2)
(53,54,2)
(27,11,2)
(24,6,2)
(48,54,2)
(34,54,2)
(0,41,2)
(29,54,2)
(41,11,2)
(60,24,2)
(0,11,2)
(62,40,2)
(42,30,2)
(56,30,2)
(6,17,2)
(61,11,2)
(59,11,2)
(3,11,2)
(30,16,2)
(16,60,2)
(0,40,2)
(11,40,2)
(57,6,2)
(47,11,2)
(29,60,2)
(18,54,2)
(20,30,2)
-----------------------------------
(0,fgets(data+dataLen, (int)
(1,badSink)
(2,data+dataLen)
(3,250)
(4,dataBuffer)
(5,if (pFile != NULL)
(6,data = dataBuffer)
(7,)
(8,"PATH=")
(9,pFile)
(10,1)
(11,pFile != NULL)
(12,NULL)
(13,int)
(14,dataBuffer)
(15,pFile)
(16,250-dataLen)
(17,dataBuffer[250] = "PATH=")
(18,data)
(19,data)
(20,pFile)
(21,if (250-dataLen > 1)
(22,fopen(FILENAME, "r")
(23,data)
(24,strlen(data)
(25,dataLen)
(26,)
(27,dataLen)
(28,funcPtr)
(29,data[dataLen])
(30,250-dataLen > 1)
(31,dataLen)
(32,dataBuffer)
(33,RET)
(34,printLine("fgets()
(35,dataLen)
(36,data[dataLen] = \\\'\\\\0\\\')
(37,pFile)
(38,250)
(39,dataLen)
(40,pFile = fopen(FILENAME, "r")
(41,(int)
(42,NULL)
(43,data)
(44,"r")
(45,data)
(46,data)
(47,pFile)
(48,\\\'\\\\0\\\')
(49,)
(50,)
(51,(*funcPtr)
(52,if (fgets(data+dataLen, (int)
(53,"fgets()
(54,fgets(data+dataLen, (int)
(55,funcPtr)
(56,FILENAME)
(57,funcPtr(data)
(58,)
(59,250-dataLen)
(60,dataLen = strlen(data)
(61,dataLen)
(62,fclose(pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
