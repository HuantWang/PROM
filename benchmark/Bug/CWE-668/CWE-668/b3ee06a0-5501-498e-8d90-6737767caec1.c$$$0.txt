-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_08_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(staticReturnsTrue())
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,129,131
-----computeFrom-----
22,23
22,24
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_08_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_08_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_08_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(40,49,0)
(39,35,0)
(47,53,0)
(27,51,0)
(5,0,0)
(49,40,0)
(52,62,0)
(53,20,0)
(64,7,0)
(29,50,0)
(64,40,0)
(71,7,0)
(51,16,0)
(12,9,0)
(68,72,0)
(42,45,0)
(49,51,0)
(63,27,0)
(28,67,0)
(36,3,0)
(51,35,0)
(45,51,0)
(65,19,0)
(15,45,0)
(9,12,0)
(37,29,0)
(42,53,0)
(27,65,0)
(50,29,0)
(21,52,0)
(33,21,0)
(55,31,0)
(69,41,0)
(0,60,0)
(60,12,0)
(9,51,0)
(41,58,0)
(44,26,0)
(61,51,0)
(0,51,0)
(18,49,0)
(26,51,0)
(70,54,0)
(48,41,0)
(17,42,0)
(40,72,0)
(46,60,0)
(31,21,0)
(1,49,0)
(29,12,0)
(32,52,0)
(30,40,0)
(50,67,0)
(67,0,0)
(27,42,0)
(0,67,0)
(8,9,0)
(64,56,0)
(58,41,0)
(57,29,0)
(12,3,0)
(66,58,0)
(22,38,0)
(60,0,0)
(41,42,0)
(45,42,0)
(59,65,0)
(35,16,0)
(6,53,0)
(4,35,0)
(31,12,0)
(26,16,0)
(13,27,0)
(56,64,0)
(7,42,0)
(21,31,0)
(21,51,0)
(40,64,0)
(23,16,0)
(43,16,0)
(72,40,0)
(34,12,0)
(14,31,0)
(54,19,0)
(49,42,0)
(24,51,0)
(67,50,0)
(73,7,0)
(7,64,0)
(25,16,0)
(11,60,0)
(64,56,1)
(70,72,1)
(55,14,1)
(27,63,1)
(59,27,1)
(49,1,1)
(65,59,1)
(45,51,1)
(44,58,1)
(68,40,1)
(58,66,1)
(60,12,1)
(0,60,1)
(13,54,1)
(51,24,1)
(67,28,1)
(31,12,1)
(27,42,1)
(44,65,1)
(10,51,1)
(42,45,1)
(29,12,1)
(29,37,1)
(11,46,1)
(50,67,1)
(57,12,1)
(60,11,1)
(58,41,1)
(61,35,1)
(72,68,1)
(2,26,1)
(31,55,1)
(12,9,1)
(54,70,1)
(9,51,1)
(46,5,1)
(35,39,1)
(50,29,1)
(18,58,1)
(33,50,1)
(24,61,1)
(69,42,1)
(40,64,1)
(28,0,1)
(41,42,1)
(39,4,1)
(67,0,1)
(7,71,1)
(72,40,1)
(1,18,1)
(66,41,1)
(15,17,1)
(8,34,1)
(0,51,1)
(26,51,1)
(26,44,1)
(49,42,1)
(7,42,1)
(41,48,1)
(44,50,1)
(73,49,1)
(30,64,1)
(34,72,1)
(5,29,1)
(71,73,1)
(51,35,1)
(40,49,1)
(45,15,1)
(44,52,1)
(44,10,1)
(9,8,1)
(17,10,1)
(21,51,1)
(64,7,1)
(21,31,1)
(14,33,1)
(27,51,1)
(52,32,1)
(40,30,1)
(49,51,1)
(48,69,1)
(63,13,1)
(37,57,1)
(32,21,1)
(21,51,2)
(13,72,2)
(8,72,2)
(5,29,2)
(52,50,2)
(9,51,2)
(60,29,2)
(40,58,2)
(46,29,2)
(51,35,2)
(55,50,2)
(1,58,2)
(12,72,2)
(50,29,2)
(58,41,2)
(41,42,2)
(50,72,2)
(15,10,2)
(50,67,2)
(59,72,2)
(72,58,2)
(29,12,2)
(64,58,2)
(67,29,2)
(18,58,2)
(49,42,2)
(29,72,2)
(49,51,2)
(41,10,2)
(21,50,2)
(27,72,2)
(42,10,2)
(72,40,2)
(71,58,2)
(31,12,2)
(0,29,2)
(11,29,2)
(17,10,2)
(28,29,2)
(60,12,2)
(40,64,2)
(14,50,2)
(64,7,2)
(7,42,2)
(42,45,2)
(27,42,2)
(45,51,2)
(66,10,2)
(37,72,2)
(49,58,2)
(58,10,2)
(70,72,2)
(73,58,2)
(67,0,2)
(32,50,2)
(68,58,2)
(33,50,2)
(7,58,2)
(63,72,2)
(21,31,2)
(65,72,2)
(0,51,2)
(0,60,2)
(9,72,2)
(34,72,2)
(40,49,2)
(12,9,2)
(26,51,2)
(30,58,2)
(27,51,2)
(64,56,2)
(45,10,2)
(69,10,2)
(54,72,2)
(57,72,2)
(31,50,2)
(48,10,2)
-----------------------------------
(0,data[dataLen-1])
(1,dataLen)
(2,RET)
(3,)
(4,dataBuffer)
(5,data)
(6,if (250-dataLen > 1)
(7,250-dataLen)
(8,data)
(9,strlen(data)
(10,staticReturnsTrue()
(11,1)
(12,dataLen = strlen(data)
(13,data)
(14,dataLen)
(15,data)
(16,)
(17,dataLen)
(18,data)
(19,)
(20,)
(21,data[dataLen-1])
(22,if (fgets(data+dataLen, (int)
(23,if(staticReturnsTrue()
(24,dataBuffer)
(25,dataBuffer)
(26,PUTENV(data)
(27,data[dataLen])
(28,\\\'\\\\n\\\')
(29,dataLen > 0)
(30,stdin)
(31,dataLen-1)
(32,\\\'\\\\0\\\')
(33,data)
(34,dataLen)
(35,dataBuffer[250] = "PATH=")
(36,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,0)
(38,)
(39,"PATH=")
(40,fgets(data+dataLen, (int)
(41,250-dataLen)
(42,dataLen = strlen(data)
(43,data)
(44,data)
(45,strlen(data)
(46,dataLen)
(47,dataLen)
(48,dataLen)
(49,data+dataLen)
(50,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(51,data = dataBuffer)
(52,data[dataLen-1] = \\\'\\\\0\\\')
(53,)
(54,printLine("fgets()
(55,1)
(56,int)
(57,dataLen)
(58,250-dataLen > 1)
(59,\\\'\\\\0\\\')
(60,dataLen-1)
(61,data)
(62,)
(63,dataLen)
(64,(int)
(65,data[dataLen] = \\\'\\\\0\\\')
(66,1)
(67,data[dataLen-1] == \\\'\\\\n\\\')
(68,NULL)
(69,250)
(70,"fgets()
(71,dataLen)
(72,fgets(data+dataLen, (int)
(73,250)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
