-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_15_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
29,32
29,33
29,34
29,35
30,31
32,33
32,34
32,35
32,36
32,37
32,38
32,39
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
47,48
47,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
72,75
72,76
72,77
72,78
72,79
72,80
72,81
72,82
72,83
72,84
72,85
72,86
73,74
74,75
74,76
75,76
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
94,95
95,96
95,97
95,98
95,99
96,97
98,99
99,100
102,103
103,104
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
114,115
115,116
115,117
116,117
116,118
117,118
117,119
118,119
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
140,142
140,143
140,144
141,142
143,144
145,146
145,147
146,147
146,148
147,148
149,150
151,152
152,153
154,155
155,156
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
166,171
167,168
169,170
171,172
171,173
172,173
172,174
174,175
176,177
177,178
177,179
178,179
180,181
182,183
182,184
183,184
184,185
184,186
187,188
188,189
188,190
189,190
189,191
191,192
195,196
195,197
196,197
196,198
197,198
197,199
198,199
200,201
202,203
202,204
203,204
206,207
208,209
209,210
209,211
210,211
210,212
211,212
213,214
213,215
214,215
216,217
216,218
217,218
219,220
220,221
220,222
224,225
225,226
225,227
226,227
228,229
228,230
228,231
229,230
231,232
234,235
234,236
235,236
237,238
238,239
239,240
239,241
240,241
241,242
244,245
245,246
245,247
246,247
248,249
248,250
248,251
249,250
251,252
254,255
254,256
255,256
257,258
258,259
259,260
259,261
260,261
261,262
265,266
265,267
266,267
266,268
267,268
269,270
271,272
272,273
273,274
273,275
274,275
276,277
280,281
281,282
281,283
282,283
286,287
287,288
287,289
288,289
290,291
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,31,35,37,41,43,46,48,49,53,55,58,62,64,68,70,76,79,81,83,85,89,91,93,97,100,101,105,110,111,113,119,120,121,124,126,131,132,135,137,142,144,148,150,153,157,159,161,165,168,170,173,175,179,181,185,186,190,192,193,194,199,201,204,205,207,212,215,218,221,222,223,227,230,232,233,236,242,243,247,250,252,253,256,262,263,264,268,270,275,277,278,279,283,284,285,289,291
-----computeFrom-----
22,23
22,24
74,75
74,76
87,88
87,89
107,108
107,109
115,116
115,117
128,129
128,130
139,140
139,141
163,164
163,165
177,178
177,179
182,183
182,184
188,189
188,190
189,190
189,191
196,197
196,198
197,198
197,199
202,203
202,204
209,210
209,211
213,214
213,215
216,217
216,218
225,226
225,227
239,240
239,241
245,246
245,247
259,260
259,261
266,267
266,268
-----guardedBy-----
268,277
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_15_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_15_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_15_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(145,77,0)
(37,13,0)
(36,60,0)
(131,132,0)
(96,77,0)
(108,49,0)
(103,90,0)
(2,117,0)
(16,1,0)
(102,77,0)
(24,87,0)
(70,51,0)
(114,81,0)
(80,43,0)
(116,43,0)
(51,117,0)
(13,3,0)
(76,39,0)
(32,17,0)
(70,102,0)
(77,63,0)
(18,6,0)
(147,148,0)
(84,6,0)
(120,34,0)
(64,70,0)
(141,60,0)
(133,19,0)
(86,36,0)
(30,17,0)
(144,60,0)
(57,93,0)
(49,90,0)
(121,13,0)
(31,34,0)
(122,63,0)
(135,60,0)
(48,77,0)
(117,93,0)
(15,51,0)
(48,19,0)
(68,57,0)
(130,6,0)
(136,63,0)
(99,43,0)
(146,90,0)
(90,103,0)
(123,0,0)
(136,35,0)
(53,26,0)
(60,6,0)
(0,123,0)
(7,87,0)
(57,45,0)
(12,139,0)
(111,43,0)
(58,43,0)
(34,67,0)
(3,43,0)
(97,102,0)
(35,136,0)
(91,93,0)
(5,60,0)
(10,113,0)
(48,41,0)
(33,20,0)
(75,30,0)
(110,3,0)
(93,45,0)
(41,61,0)
(42,1,0)
(85,72,0)
(128,63,0)
(79,49,0)
(104,45,0)
(9,148,0)
(106,146,0)
(14,43,0)
(20,49,0)
(50,81,0)
(107,103,0)
(122,35,0)
(149,90,0)
(126,6,0)
(138,60,0)
(49,108,0)
(59,129,0)
(150,6,0)
(102,97,0)
(142,88,0)
(78,112,0)
(77,48,0)
(102,70,0)
(17,30,0)
(0,43,0)
(134,122,0)
(146,1,0)
(90,43,0)
(88,90,0)
(29,60,0)
(118,89,0)
(11,0,0)
(47,123,0)
(92,94,0)
(0,94,0)
(81,43,0)
(127,136,0)
(98,61,0)
(119,45,0)
(63,77,0)
(112,69,0)
(26,90,0)
(25,43,0)
(77,102,0)
(23,43,0)
(49,30,0)
(26,52,0)
(125,60,0)
(83,60,0)
(63,43,0)
(67,99,0)
(82,136,0)
(69,112,0)
(132,69,0)
(113,116,0)
(100,73,0)
(101,61,0)
(116,113,0)
(143,108,0)
(61,41,0)
(19,48,0)
(95,88,0)
(1,60,0)
(26,1,0)
(70,93,0)
(46,60,0)
(124,103,0)
(54,45,0)
(69,132,0)
(87,116,0)
(30,49,0)
(61,51,0)
(27,60,0)
(94,0,0)
(56,93,0)
(74,146,0)
(30,75,0)
(51,60,0)
(41,48,0)
(8,36,0)
(62,67,0)
(115,43,0)
(35,122,0)
(49,20,0)
(109,70,0)
(67,34,0)
(117,51,0)
(71,103,0)
(28,126,0)
(4,55,0)
(148,69,0)
(99,140,0)
(66,122,0)
(21,140,0)
(105,41,0)
(140,99,0)
(69,148,0)
(77,90,0)
(2,15,1)
(57,93,1)
(113,10,1)
(49,30,1)
(130,137,1)
(0,94,1)
(106,40,1)
(15,1,1)
(137,26,1)
(148,147,1)
(145,48,1)
(22,93,1)
(40,65,1)
(76,137,1)
(106,85,1)
(103,124,1)
(4,112,1)
(146,1,1)
(56,54,1)
(50,114,1)
(146,74,1)
(106,4,1)
(94,92,1)
(142,95,1)
(10,87,1)
(19,133,1)
(130,76,1)
(66,134,1)
(11,94,1)
(105,19,1)
(133,102,1)
(53,146,1)
(17,32,1)
(96,128,1)
(38,57,1)
(26,1,1)
(44,58,1)
(79,116,1)
(100,20,1)
(35,136,1)
(70,93,1)
(136,82,1)
(69,132,1)
(82,127,1)
(132,131,1)
(26,90,1)
(116,113,1)
(98,101,1)
(49,90,1)
(150,126,1)
(85,88,1)
(59,35,1)
(149,81,1)
(33,49,1)
(32,79,1)
(20,33,1)
(95,90,1)
(48,41,1)
(140,21,1)
(34,31,1)
(131,148,1)
(109,64,1)
(114,112,1)
(61,51,1)
(101,105,1)
(117,2,1)
(65,118,1)
(20,49,1)
(120,3,1)
(9,51,1)
(71,149,1)
(143,30,1)
(48,19,1)
(64,96,1)
(77,145,1)
(118,44,1)
(106,100,1)
(124,107,1)
(62,34,1)
(36,8,1)
(88,90,1)
(21,67,1)
(107,71,1)
(81,50,1)
(0,123,1)
(122,63,1)
(42,36,1)
(78,69,1)
(92,88,1)
(69,148,1)
(67,34,1)
(77,102,1)
(67,62,1)
(90,103,1)
(88,142,1)
(136,63,1)
(110,13,1)
(12,65,1)
(112,69,1)
(31,120,1)
(9,40,1)
(65,44,1)
(16,42,1)
(93,91,1)
(102,70,1)
(58,35,1)
(134,136,1)
(122,66,1)
(28,22,1)
(70,51,1)
(128,20,1)
(30,75,1)
(106,59,1)
(41,61,1)
(26,53,1)
(63,77,1)
(68,150,1)
(35,122,1)
(49,108,1)
(77,90,1)
(37,0,1)
(24,99,1)
(108,143,1)
(91,56,1)
(40,12,1)
(57,68,1)
(137,146,1)
(87,7,1)
(30,17,1)
(47,11,1)
(121,37,1)
(146,90,1)
(86,22,1)
(1,16,1)
(147,9,1)
(13,121,1)
(99,140,1)
(74,106,1)
(61,98,1)
(8,86,1)
(7,24,1)
(77,48,1)
(51,117,1)
(123,47,1)
(70,109,1)
(3,110,1)
(112,78,1)
(127,63,1)
(102,97,1)
(68,130,1)
(117,93,1)
(126,28,1)
(26,146,2)
(24,88,2)
(35,20,2)
(30,88,2)
(136,20,2)
(69,148,2)
(116,113,2)
(109,20,2)
(102,70,2)
(88,112,2)
(116,88,2)
(79,88,2)
(63,20,2)
(132,22,2)
(69,40,2)
(113,88,2)
(30,17,2)
(40,35,2)
(149,112,2)
(20,49,2)
(92,88,2)
(31,88,2)
(1,22,2)
(59,35,2)
(51,22,2)
(58,35,2)
(145,20,2)
(51,117,2)
(136,63,2)
(126,22,2)
(112,40,2)
(41,20,2)
(49,90,2)
(108,88,2)
(67,88,2)
(132,40,2)
(88,90,2)
(64,20,2)
(121,88,2)
(20,88,2)
(44,35,2)
(26,90,2)
(8,22,2)
(69,132,2)
(117,22,2)
(67,34,2)
(74,22,2)
(146,22,2)
(13,88,2)
(30,75,2)
(9,40,2)
(148,22,2)
(0,94,2)
(128,20,2)
(3,88,2)
(26,1,2)
(19,20,2)
(86,22,2)
(15,22,2)
(71,112,2)
(133,20,2)
(33,88,2)
(35,136,2)
(81,112,2)
(17,88,2)
(61,20,2)
(118,44,2)
(48,20,2)
(146,90,2)
(127,20,2)
(102,20,2)
(0,123,2)
(77,20,2)
(114,112,2)
(100,20,2)
(78,40,2)
(99,88,2)
(32,88,2)
(124,112,2)
(123,88,2)
(49,88,2)
(61,51,2)
(90,103,2)
(63,77,2)
(134,136,2)
(78,22,2)
(102,97,2)
(7,88,2)
(146,1,2)
(49,108,2)
(28,22,2)
(66,136,2)
(112,22,2)
(77,102,2)
(50,112,2)
(70,20,2)
(147,22,2)
(96,20,2)
(70,51,2)
(77,48,2)
(16,22,2)
(65,35,2)
(2,22,2)
(12,65,2)
(35,122,2)
(106,22,2)
(117,93,2)
(103,112,2)
(90,112,2)
(62,88,2)
(48,19,2)
(69,22,2)
(57,93,2)
(98,20,2)
(150,22,2)
(137,22,2)
(53,146,2)
(130,22,2)
(41,61,2)
(76,137,2)
(85,88,2)
(21,88,2)
(37,88,2)
(82,20,2)
(107,112,2)
(77,90,2)
(101,20,2)
(122,136,2)
(148,40,2)
(110,88,2)
(36,22,2)
(140,88,2)
(48,41,2)
(143,88,2)
(0,88,2)
(105,20,2)
(9,22,2)
(120,88,2)
(142,112,2)
(131,22,2)
(70,93,2)
(42,22,2)
(99,140,2)
(10,88,2)
(34,88,2)
(122,63,2)
(112,69,2)
(94,88,2)
(147,40,2)
(87,88,2)
(95,112,2)
(4,112,2)
(131,40,2)
(49,30,2)
(47,88,2)
(11,88,2)
-----------------------------------
(0,memset(&service, 0, sizeof(service)
(1,connectSocket = INVALID_SOCKET)
(2,data)
(3,service.sin_family = AF_INET)
(4,break;)
(5,wsaDataInit)
(6,)
(7,sin_port)
(8,0)
(9,2)
(10,TCP_PORT)
(11,0)
(12,\\\'\\\\0\\\')
(13,service.sin_family)
(14,if (connectSocket == INVALID_SOCKET)
(15,dataLen)
(16,INVALID_SOCKET)
(17,&service)
(18,default:)
(19,sizeof(wchar_t)
(20,connect(connectSocket, (struct sockaddr*)
(21,IP_ADDRESS)
(22,6)
(23,if (recvResult == SOCKET_ERROR || recvResult == 0)
(24,service)
(25,if (WSAStartup(MAKEWORD(2,2)
(26,CLOSE_SOCKET(connectSocket)
(27,wsaData)
(28,"Benign, fixed string")
(29,if (connectSocket != INVALID_SOCKET)
(30,(struct sockaddr*)
(31,sin_addr)
(32,service)
(33,SOCKET_ERROR)
(34,service.sin_addr)
(35,recvResult == SOCKET_ERROR || recvResult == 0)
(36,wsaDataInit = 0)
(37,service)
(38,RET)
(39,)
(40,0)
(41,250 - dataLen - 1)
(42,connectSocket)
(43,)
(44,replace)
(45,)
(46,replace)
(47,service)
(48,sizeof(wchar_t)
(49,connect(connectSocket, (struct sockaddr*)
(50,1)
(51,dataLen = wcslen(data)
(52,)
(53,connectSocket)
(54,"PATH=")
(55,)
(56,data)
(57,PUTENV(data)
(58,\\\'\\\\0\\\')
(59,break;)
(60,)
(61,dataLen - 1)
(62,s_addr)
(63,recvResult = recv(connectSocket, (char *)
(64,data)
(65,replace)
(66,0)
(67,service.sin_addr.s_addr)
(68,data)
(69,WSAStartup(MAKEWORD(2,2)
(70,data + dataLen)
(71,AF_INET)
(72,)
(73,)
(74,INVALID_SOCKET)
(75,struct sockaddr*)
(76,WSACleanup()
(77,recv(connectSocket, (char *)
(78,NO_ERROR)
(79,connectSocket)
(80,if (connect(connectSocket, (struct sockaddr*)
(81,wsaDataInit = 1)
(82,SOCKET_ERROR)
(83,connectSocket)
(84,case 6:)
(85,break;)
(86,wsaDataInit)
(87,service.sin_port)
(88,connectSocket == INVALID_SOCKET)
(89,)
(90,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(91,dataBuffer)
(92,service)
(93,data = dataBuffer)
(94,&service)
(95,connectSocket)
(96,connectSocket)
(97,char *)
(98,1)
(99,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(100,break;)
(101,dataLen)
(102,(char *)
(103,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(104,data)
(105,250)
(106,connectSocket)
(107,SOCK_STREAM)
(108,sizeof(service)
(109,dataLen)
(110,AF_INET)
(111,if (replace)
(112,WSAStartup(MAKEWORD(2,2)
(113,htons(TCP_PORT)
(114,wsaDataInit)
(115,if (replace)
(116,service.sin_port = htons(TCP_PORT)
(117,wcslen(data)
(118,\\\'\\\\0\\\')
(119,switch(6)
(120,service)
(121,sin_family)
(122,recvResult == 0)
(123,sizeof(service)
(124,IPPROTO_TCP)
(125,service)
(126,printLine("Benign, fixed string")
(127,recvResult)
(128,recvResult)
(129,)
(130,break;)
(131,wsaData)
(132,&wsaData)
(133,wchar_t)
(134,recvResult)
(135,dataLen)
(136,recvResult == SOCKET_ERROR)
(137,wsaDataInit)
(138,do)
(139,)
(140,inet_addr(IP_ADDRESS)
(141,if (wsaDataInit)
(142,INVALID_SOCKET)
(143,service)
(144,recvResult)
(145,0)
(146,connectSocket != INVALID_SOCKET)
(147,2)
(148,MAKEWORD(2,2)
(149,connectSocket)
(150,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
