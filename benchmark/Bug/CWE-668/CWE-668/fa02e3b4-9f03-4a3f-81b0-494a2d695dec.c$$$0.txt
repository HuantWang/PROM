-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_08_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(staticReturnsTrue())
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,123,125
-----computeFrom-----
22,23
22,24
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_08_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_08_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_08_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(36,15,0)
(59,50,0)
(8,47,0)
(22,5,0)
(15,30,0)
(50,35,0)
(6,9,0)
(44,61,0)
(51,38,0)
(59,32,0)
(2,28,0)
(29,52,0)
(25,41,0)
(24,45,0)
(59,30,0)
(19,26,0)
(42,50,0)
(48,3,0)
(18,19,0)
(30,15,0)
(53,29,0)
(37,7,0)
(32,1,0)
(57,61,0)
(7,46,0)
(49,31,0)
(29,35,0)
(12,11,0)
(26,19,0)
(20,28,0)
(21,9,0)
(11,61,0)
(60,52,0)
(28,35,0)
(38,46,0)
(26,11,0)
(41,11,0)
(41,35,0)
(9,30,0)
(13,59,0)
(54,35,0)
(5,52,0)
(30,17,0)
(1,32,0)
(28,11,0)
(35,5,0)
(40,26,0)
(31,32,0)
(34,35,0)
(0,50,0)
(27,31,0)
(32,31,0)
(28,38,0)
(45,3,0)
(43,52,0)
(45,30,0)
(55,61,0)
(50,11,0)
(4,17,0)
(56,5,0)
(11,41,0)
(59,47,0)
(31,11,0)
(10,52,0)
(35,52,0)
(58,15,0)
(50,59,0)
(32,59,0)
(47,59,0)
(61,33,0)
(16,30,0)
(14,26,0)
(51,28,1)
(59,13,1)
(45,30,1)
(53,9,1)
(25,12,1)
(38,51,1)
(24,47,1)
(56,22,1)
(47,59,1)
(6,21,1)
(13,32,1)
(16,19,1)
(39,29,1)
(37,47,1)
(20,7,1)
(42,0,1)
(0,9,1)
(30,15,1)
(50,11,1)
(28,11,1)
(18,26,1)
(47,8,1)
(9,6,1)
(54,5,1)
(49,27,1)
(59,50,1)
(59,30,1)
(7,37,1)
(9,30,1)
(24,38,1)
(19,26,1)
(19,18,1)
(27,50,1)
(36,16,1)
(31,11,1)
(58,36,1)
(15,58,1)
(26,11,1)
(35,34,1)
(12,23,1)
(32,1,1)
(53,45,1)
(26,14,1)
(28,2,1)
(53,23,1)
(34,54,1)
(41,25,1)
(29,35,1)
(50,35,1)
(2,20,1)
(5,56,1)
(21,30,1)
(14,40,1)
(53,19,1)
(32,31,1)
(40,11,1)
(59,32,1)
(45,24,1)
(31,49,1)
(29,53,1)
(23,35,1)
(41,35,1)
(50,42,1)
(8,59,1)
(28,35,1)
(11,41,1)
(35,5,1)
(36,19,2)
(28,35,2)
(40,23,2)
(42,9,2)
(30,15,2)
(59,9,2)
(21,19,2)
(58,19,2)
(59,50,2)
(59,32,2)
(29,35,2)
(50,9,2)
(11,41,2)
(38,47,2)
(19,26,2)
(6,19,2)
(45,30,2)
(19,23,2)
(12,23,2)
(32,9,2)
(18,23,2)
(31,11,2)
(13,9,2)
(41,35,2)
(31,9,2)
(2,47,2)
(35,5,2)
(47,9,2)
(9,19,2)
(8,9,2)
(25,23,2)
(45,9,2)
(30,19,2)
(7,47,2)
(28,47,2)
(27,9,2)
(26,23,2)
(0,9,2)
(41,23,2)
(24,9,2)
(47,59,2)
(26,11,2)
(16,19,2)
(32,1,2)
(32,31,2)
(9,30,2)
(49,9,2)
(50,35,2)
(14,23,2)
(51,47,2)
(20,47,2)
(15,19,2)
(50,11,2)
(59,30,2)
(28,11,2)
(11,23,2)
(37,47,2)
-----------------------------------
(0,data)
(1,int)
(2,dataLen)
(3,)
(4,if (pFile != NULL)
(5,dataBuffer[250] = "PATH=")
(6,NULL)
(7,printLine("fgets()
(8,NULL)
(9,pFile != NULL)
(10,data)
(11,dataLen = strlen(data)
(12,dataLen)
(13,pFile)
(14,dataLen)
(15,fopen(FILENAME, "r")
(16,pFile)
(17,)
(18,1)
(19,250-dataLen > 1)
(20,data)
(21,pFile)
(22,dataBuffer)
(23,staticReturnsTrue()
(24,pFile)
(25,data)
(26,250-dataLen)
(27,250)
(28,data[dataLen])
(29,PUTENV(data)
(30,pFile = fopen(FILENAME, "r")
(31,250-dataLen)
(32,(int)
(33,)
(34,dataBuffer)
(35,data = dataBuffer)
(36,FILENAME)
(37,"fgets()
(38,data[dataLen] = \\\'\\\\0\\\')
(39,RET)
(40,250)
(41,strlen(data)
(42,dataLen)
(43,dataBuffer)
(44,if (250-dataLen > 1)
(45,fclose(pFile)
(46,)
(47,fgets(data+dataLen, (int)
(48,if (fgets(data+dataLen, (int)
(49,dataLen)
(50,data+dataLen)
(51,\\\'\\\\0\\\')
(52,)
(53,data)
(54,data)
(55,pFile)
(56,"PATH=")
(57,dataLen)
(58,"r")
(59,fgets(data+dataLen, (int)
(60,if(staticReturnsTrue()
(61,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
