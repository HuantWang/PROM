-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_04_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(STATIC_CONST_TRUE)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_04_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_04_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_04_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_TRUE)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(6,49,0)
(14,0,0)
(40,44,0)
(66,0,0)
(9,25,0)
(2,12,0)
(44,67,0)
(51,2,0)
(47,58,0)
(64,27,0)
(73,69,0)
(67,41,0)
(28,58,0)
(5,25,0)
(2,52,0)
(54,27,0)
(11,44,0)
(45,34,0)
(14,69,0)
(30,50,0)
(12,36,0)
(62,0,0)
(11,4,0)
(48,47,0)
(11,42,0)
(42,46,0)
(70,41,0)
(23,46,0)
(22,14,0)
(31,53,0)
(57,17,0)
(18,50,0)
(34,67,0)
(24,62,0)
(10,53,0)
(60,39,0)
(17,25,0)
(41,71,0)
(39,10,0)
(35,49,0)
(16,54,0)
(17,69,0)
(39,17,0)
(58,33,0)
(49,67,0)
(8,26,0)
(38,42,0)
(46,67,0)
(69,62,0)
(34,69,0)
(29,52,0)
(53,58,0)
(55,69,0)
(53,10,0)
(46,42,0)
(10,39,0)
(68,18,0)
(15,30,0)
(21,12,0)
(61,52,0)
(32,20,0)
(67,34,0)
(58,47,0)
(46,69,0)
(7,54,0)
(17,39,0)
(47,69,0)
(52,2,0)
(54,67,0)
(27,54,0)
(65,33,0)
(25,17,0)
(69,0,0)
(25,58,0)
(49,18,0)
(19,41,0)
(52,58,0)
(3,0,0)
(42,20,0)
(20,42,0)
(72,44,0)
(63,0,0)
(1,62,0)
(49,69,0)
(44,11,0)
(56,67,0)
(4,11,0)
(13,53,0)
(2,69,0)
(37,46,0)
(42,11,0)
(57,53,1)
(2,52,1)
(56,59,1)
(34,45,1)
(59,69,1)
(10,53,1)
(12,21,1)
(42,38,1)
(13,31,1)
(22,10,1)
(31,58,1)
(15,20,1)
(2,69,1)
(22,27,1)
(73,55,1)
(17,69,1)
(42,46,1)
(22,18,1)
(47,69,1)
(52,29,1)
(53,58,1)
(35,6,1)
(62,1,1)
(20,42,1)
(44,67,1)
(14,22,1)
(22,12,1)
(25,9,1)
(49,35,1)
(67,34,1)
(16,67,1)
(69,73,1)
(64,54,1)
(25,58,1)
(1,24,1)
(34,69,1)
(11,4,1)
(29,61,1)
(7,16,1)
(55,62,1)
(6,30,1)
(49,69,1)
(51,10,1)
(32,42,1)
(10,39,1)
(40,46,1)
(46,37,1)
(27,64,1)
(54,67,1)
(69,62,1)
(5,57,1)
(27,54,1)
(68,49,1)
(17,25,1)
(42,11,1)
(49,67,1)
(58,47,1)
(48,28,1)
(47,48,1)
(61,51,1)
(38,11,1)
(45,56,1)
(54,7,1)
(28,20,1)
(44,72,1)
(18,68,1)
(21,2,1)
(22,59,1)
(72,40,1)
(9,5,1)
(11,44,1)
(39,17,1)
(30,15,1)
(46,67,1)
(60,17,1)
(14,69,1)
(23,27,1)
(46,69,1)
(39,60,1)
(53,13,1)
(52,58,1)
(43,14,1)
(37,23,1)
(20,32,1)
(72,27,2)
(49,20,2)
(25,58,2)
(5,53,2)
(40,27,2)
(28,20,2)
(45,59,2)
(42,27,2)
(2,10,2)
(49,69,2)
(47,20,2)
(51,10,2)
(31,20,2)
(52,58,2)
(46,27,2)
(6,20,2)
(68,20,2)
(2,52,2)
(46,69,2)
(17,53,2)
(9,53,2)
(30,20,2)
(32,27,2)
(10,39,2)
(17,69,2)
(27,59,2)
(10,20,2)
(67,59,2)
(10,53,2)
(69,62,2)
(13,20,2)
(11,27,2)
(58,47,2)
(16,59,2)
(34,69,2)
(56,59,2)
(29,10,2)
(42,11,2)
(37,27,2)
(23,27,2)
(64,59,2)
(25,53,2)
(48,20,2)
(34,59,2)
(17,25,2)
(27,54,2)
(58,20,2)
(21,10,2)
(53,20,2)
(61,10,2)
(60,53,2)
(11,4,2)
(42,46,2)
(18,20,2)
(11,44,2)
(35,20,2)
(54,59,2)
(7,59,2)
(57,53,2)
(54,67,2)
(15,20,2)
(67,34,2)
(44,67,2)
(47,69,2)
(39,53,2)
(14,69,2)
(20,42,2)
(53,58,2)
(12,10,2)
(2,69,2)
(20,27,2)
(49,67,2)
(52,10,2)
(44,27,2)
(46,67,2)
(38,27,2)
(39,17,2)
-----------------------------------
(0,)
(1,"PATH=")
(2,data[dataLen-1])
(3,data)
(4,int)
(5,dataLen)
(6,data)
(7,dataLen)
(8,if (fgets(data+dataLen, (int)
(9,1)
(10,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(11,(int)
(12,data[dataLen-1] = \\\'\\\\0\\\')
(13,0)
(14,PUTENV(data)
(15,"fgets()
(16,250)
(17,data[dataLen-1])
(18,data[dataLen] = \\\'\\\\0\\\')
(19,dataLen)
(20,fgets(data+dataLen, (int)
(21,\\\'\\\\0\\\')
(22,data)
(23,data)
(24,dataBuffer)
(25,dataLen-1)
(26,)
(27,250-dataLen > 1)
(28,dataLen)
(29,1)
(30,printLine("fgets()
(31,dataLen)
(32,NULL)
(33,)
(34,strlen(data)
(35,dataLen)
(36,)
(37,dataLen)
(38,stdin)
(39,data[dataLen-1] == \\\'\\\\n\\\')
(40,250)
(41,)
(42,fgets(data+dataLen, (int)
(43,RET)
(44,250-dataLen)
(45,data)
(46,data+dataLen)
(47,strlen(data)
(48,data)
(49,data[dataLen])
(50,)
(51,data)
(52,dataLen-1)
(53,dataLen > 0)
(54,250-dataLen)
(55,data)
(56,dataLen)
(57,data)
(58,dataLen = strlen(data)
(59,STATIC_CONST_TRUE)
(60,\\\'\\\\n\\\')
(61,dataLen)
(62,dataBuffer[250] = "PATH=")
(63,if(STATIC_CONST_TRUE)
(64,1)
(65,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(66,dataBuffer)
(67,dataLen = strlen(data)
(68,\\\'\\\\0\\\')
(69,data = dataBuffer)
(70,if (250-dataLen > 1)
(71,)
(72,dataLen)
(73,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
