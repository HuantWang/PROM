-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_11_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,129,131
-----computeFrom-----
22,23
22,24
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_11_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_11_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_11_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(25,23,0)
(23,68,0)
(64,60,0)
(62,70,0)
(42,35,0)
(26,70,0)
(0,40,0)
(43,60,0)
(29,15,0)
(37,32,0)
(32,37,0)
(64,27,0)
(8,21,0)
(35,37,0)
(37,67,0)
(36,51,0)
(66,36,0)
(26,9,0)
(63,46,0)
(40,59,0)
(4,22,0)
(53,68,0)
(65,18,0)
(38,32,0)
(13,37,0)
(61,23,0)
(54,14,0)
(62,68,0)
(33,68,0)
(9,11,0)
(20,56,0)
(70,18,0)
(65,70,0)
(33,64,0)
(69,62,0)
(17,18,0)
(35,11,0)
(3,27,0)
(5,70,0)
(16,26,0)
(72,12,0)
(6,33,0)
(11,9,0)
(70,14,0)
(1,18,0)
(34,9,0)
(2,35,0)
(48,46,0)
(73,33,0)
(28,67,0)
(36,70,0)
(41,64,0)
(14,18,0)
(68,62,0)
(27,23,0)
(56,70,0)
(36,22,0)
(22,36,0)
(30,8,0)
(57,15,0)
(22,37,0)
(11,35,0)
(46,37,0)
(33,70,0)
(58,22,0)
(23,27,0)
(71,47,0)
(56,68,0)
(32,70,0)
(27,3,0)
(19,18,0)
(39,65,0)
(47,15,0)
(10,59,0)
(68,8,0)
(15,68,0)
(46,26,0)
(51,49,0)
(55,14,0)
(52,10,0)
(15,47,0)
(26,46,0)
(56,10,0)
(64,33,0)
(50,70,0)
(7,8,0)
(60,64,0)
(9,26,0)
(27,64,0)
(24,56,0)
(31,51,0)
(22,58,1)
(51,31,1)
(32,38,1)
(0,60,1)
(27,23,1)
(63,16,1)
(69,53,1)
(33,70,1)
(15,57,1)
(70,5,1)
(13,60,1)
(64,27,1)
(68,62,1)
(39,45,1)
(56,24,1)
(9,34,1)
(29,68,1)
(35,37,1)
(26,70,1)
(47,71,1)
(41,27,1)
(33,68,1)
(14,55,1)
(2,37,1)
(39,47,1)
(32,70,1)
(43,64,1)
(36,70,1)
(11,9,1)
(65,70,1)
(25,33,1)
(55,54,1)
(46,48,1)
(24,20,1)
(46,37,1)
(56,70,1)
(33,6,1)
(66,11,1)
(52,56,1)
(38,13,1)
(44,65,1)
(27,3,1)
(62,69,1)
(39,51,1)
(45,70,1)
(15,68,1)
(31,36,1)
(16,35,1)
(9,26,1)
(62,70,1)
(56,68,1)
(73,47,1)
(71,15,1)
(60,43,1)
(64,41,1)
(70,14,1)
(48,63,1)
(47,15,1)
(23,61,1)
(53,45,1)
(36,22,1)
(61,25,1)
(4,66,1)
(39,11,1)
(11,35,1)
(64,33,1)
(42,2,1)
(50,14,1)
(10,52,1)
(23,68,1)
(37,32,1)
(6,73,1)
(35,42,1)
(39,10,1)
(65,39,1)
(40,0,1)
(60,64,1)
(20,40,1)
(58,4,1)
(57,29,1)
(22,37,1)
(26,46,1)
(5,50,1)
(34,26,1)
(25,47,2)
(68,45,2)
(10,60,2)
(68,62,2)
(20,60,2)
(9,26,2)
(23,68,2)
(23,47,2)
(15,68,2)
(34,35,2)
(27,47,2)
(63,35,2)
(48,35,2)
(15,45,2)
(35,60,2)
(31,11,2)
(22,11,2)
(4,11,2)
(46,35,2)
(33,47,2)
(46,37,2)
(65,70,2)
(36,70,2)
(62,45,2)
(64,27,2)
(69,45,2)
(26,46,2)
(0,60,2)
(33,70,2)
(56,70,2)
(36,22,2)
(53,45,2)
(60,47,2)
(57,45,2)
(9,35,2)
(11,60,2)
(60,64,2)
(47,45,2)
(37,32,2)
(71,45,2)
(38,60,2)
(24,60,2)
(36,11,2)
(40,60,2)
(70,14,2)
(66,11,2)
(29,45,2)
(41,47,2)
(32,70,2)
(11,9,2)
(32,60,2)
(26,70,2)
(56,60,2)
(61,47,2)
(42,60,2)
(73,47,2)
(64,47,2)
(13,60,2)
(43,47,2)
(16,35,2)
(56,68,2)
(64,33,2)
(22,37,2)
(27,3,2)
(62,70,2)
(51,11,2)
(6,47,2)
(11,35,2)
(47,15,2)
(37,60,2)
(27,23,2)
(33,68,2)
(26,35,2)
(2,60,2)
(58,11,2)
(52,60,2)
(35,37,2)
-----------------------------------
(0,"fgets()
(1,dataBuffer)
(2,dataLen)
(3,int)
(4,dataLen)
(5,dataBuffer)
(6,dataLen)
(7,if (250-dataLen > 1)
(8,)
(9,data[dataLen-1] == \\\'\\\\n\\\')
(10,data[dataLen] = \\\'\\\\0\\\')
(11,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,)
(13,dataLen)
(14,dataBuffer[250] = "PATH=")
(15,250-dataLen)
(16,data)
(17,data)
(18,)
(19,if(globalReturnsTrue()
(20,data)
(21,)
(22,dataLen-1)
(23,250-dataLen)
(24,dataLen)
(25,250)
(26,data[dataLen-1])
(27,(int)
(28,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(29,250)
(30,dataLen)
(31,\\\'\\\\0\\\')
(32,strlen(data)
(33,data+dataLen)
(34,\\\'\\\\n\\\')
(35,dataLen > 0)
(36,data[dataLen-1])
(37,dataLen = strlen(data)
(38,data)
(39,data)
(40,printLine("fgets()
(41,stdin)
(42,0)
(43,NULL)
(44,RET)
(45,globalReturnsTrue()
(46,dataLen-1)
(47,250-dataLen > 1)
(48,1)
(49,)
(50,data)
(51,data[dataLen-1] = \\\'\\\\0\\\')
(52,\\\'\\\\0\\\')
(53,dataLen)
(54,dataBuffer)
(55,"PATH=")
(56,data[dataLen])
(57,dataLen)
(58,1)
(59,)
(60,fgets(data+dataLen, (int)
(61,dataLen)
(62,strlen(data)
(63,dataLen)
(64,fgets(data+dataLen, (int)
(65,PUTENV(data)
(66,data)
(67,)
(68,dataLen = strlen(data)
(69,data)
(70,data = dataBuffer)
(71,1)
(72,if (fgets(data+dataLen, (int)
(73,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
