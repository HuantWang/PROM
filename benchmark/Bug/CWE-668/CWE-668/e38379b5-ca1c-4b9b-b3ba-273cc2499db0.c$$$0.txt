-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_18_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    goto source;
source:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
29,30
29,31
31,32
31,33
31,34
31,35
31,36
31,37
31,38
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
71,74
71,75
71,76
71,77
71,78
71,79
71,80
71,81
71,82
71,83
71,84
71,85
72,73
73,74
73,75
74,75
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
98,99
101,102
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
135,136
137,138
137,139
138,139
138,140
139,140
139,141
139,142
139,143
140,141
142,143
144,145
144,146
145,146
145,147
146,147
148,149
150,151
151,152
153,154
154,155
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
165,170
166,167
168,169
170,171
170,172
171,172
171,173
173,174
175,176
176,177
176,178
177,178
179,180
181,182
181,183
182,183
183,184
183,185
186,187
187,188
187,189
188,189
188,190
190,191
194,195
194,196
195,196
195,197
196,197
196,198
197,198
199,200
201,202
201,203
202,203
205,206
207,208
208,209
208,210
209,210
209,211
210,211
212,213
212,214
213,214
215,216
215,217
216,217
218,219
219,220
219,221
223,224
224,225
224,226
225,226
227,228
227,229
227,230
228,229
230,231
233,234
233,235
234,235
236,237
237,238
238,239
238,240
239,240
240,241
243,244
244,245
244,246
245,246
247,248
247,249
247,250
248,249
250,251
253,254
253,255
254,255
256,257
257,258
258,259
258,260
259,260
260,261
264,265
264,266
265,266
265,267
266,267
268,269
270,271
271,272
272,273
272,274
273,274
275,276
277,278
278,279
278,280
279,280
281,282
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,30,34,36,40,42,45,47,48,52,54,57,61,63,67,69,75,78,80,82,84,88,90,92,96,99,100,104,109,110,112,118,119,120,123,125,130,131,134,136,141,143,147,149,152,156,158,160,164,167,169,172,174,178,180,184,185,189,191,192,193,198,200,203,204,206,211,214,217,220,221,222,226,229,231,232,235,241,242,246,249,251,252,255,261,262,263,267,269,274,276,280,282
-----computeFrom-----
22,23
22,24
73,74
73,75
86,87
86,88
106,107
106,108
114,115
114,116
127,128
127,129
138,139
138,140
162,163
162,164
176,177
176,178
181,182
181,183
187,188
187,189
188,189
188,190
195,196
195,197
196,197
196,198
201,202
201,203
208,209
208,210
212,213
212,214
215,216
215,217
224,225
224,226
238,239
238,240
244,245
244,246
258,259
258,260
265,266
265,267
-----guardedBy-----
267,276
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_18_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_18_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_18_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
source
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(26,54,0)
(41,37,0)
(19,4,0)
(112,126,0)
(127,60,0)
(99,86,0)
(57,35,0)
(66,55,0)
(86,85,0)
(98,41,0)
(58,125,0)
(46,68,0)
(5,123,0)
(35,57,0)
(118,126,0)
(54,26,0)
(138,19,0)
(15,98,0)
(20,125,0)
(60,141,0)
(41,28,0)
(42,70,0)
(69,81,0)
(52,60,0)
(104,67,0)
(21,56,0)
(129,31,0)
(72,37,0)
(83,60,0)
(122,60,0)
(101,97,0)
(79,123,0)
(28,13,0)
(40,91,0)
(80,125,0)
(142,60,0)
(36,85,0)
(70,89,0)
(91,13,0)
(27,63,0)
(74,28,0)
(67,59,0)
(63,110,0)
(135,81,0)
(68,60,0)
(16,52,0)
(41,98,0)
(137,68,0)
(55,140,0)
(70,13,0)
(65,119,0)
(2,95,0)
(102,29,0)
(117,89,0)
(95,4,0)
(57,70,0)
(14,20,0)
(139,28,0)
(70,108,0)
(125,60,0)
(87,28,0)
(43,13,0)
(59,67,0)
(106,85,0)
(112,85,0)
(123,141,0)
(74,137,0)
(130,123,0)
(111,90,0)
(140,85,0)
(68,130,0)
(34,119,0)
(145,91,0)
(25,19,0)
(88,13,0)
(23,146,0)
(28,41,0)
(130,68,0)
(136,137,0)
(10,60,0)
(51,60,0)
(0,54,0)
(43,125,0)
(94,56,0)
(13,85,0)
(71,86,0)
(62,52,0)
(20,13,0)
(48,26,0)
(6,43,0)
(137,123,0)
(4,19,0)
(53,12,0)
(76,60,0)
(74,17,0)
(84,141,0)
(107,57,0)
(77,85,0)
(146,112,0)
(108,70,0)
(59,63,0)
(44,137,0)
(8,13,0)
(75,60,0)
(81,98,0)
(128,88,0)
(93,65,0)
(92,35,0)
(114,67,0)
(124,85,0)
(4,95,0)
(119,85,0)
(86,18,0)
(67,110,0)
(38,130,0)
(4,29,0)
(126,112,0)
(63,59,0)
(26,140,0)
(39,85,0)
(9,60,0)
(32,22,0)
(121,88,0)
(144,108,0)
(96,79,0)
(49,85,0)
(79,141,0)
(28,110,0)
(105,1,0)
(50,110,0)
(13,88,0)
(30,141,0)
(109,63,0)
(61,65,0)
(29,4,0)
(57,107,0)
(28,74,0)
(113,88,0)
(103,85,0)
(131,123,0)
(70,57,0)
(37,41,0)
(24,141,0)
(45,18,0)
(137,74,0)
(86,99,0)
(89,70,0)
(115,54,0)
(20,100,0)
(18,86,0)
(82,73,0)
(98,81,0)
(81,68,0)
(33,146,0)
(110,28,0)
(17,74,0)
(78,99,0)
(140,55,0)
(11,43,0)
(120,141,0)
(56,85,0)
(133,60,0)
(110,85,0)
(108,144,1)
(25,138,1)
(125,58,1)
(86,18,1)
(70,57,1)
(140,55,1)
(14,43,1)
(84,123,1)
(53,47,1)
(35,92,1)
(41,98,1)
(57,35,1)
(47,43,1)
(64,79,1)
(56,21,1)
(71,18,1)
(115,0,1)
(80,52,1)
(66,26,1)
(96,53,1)
(16,62,1)
(59,63,1)
(19,25,1)
(98,81,1)
(63,109,1)
(59,67,1)
(52,16,1)
(28,139,1)
(109,27,1)
(6,129,1)
(104,63,1)
(61,86,1)
(112,126,1)
(6,101,1)
(81,135,1)
(110,28,1)
(114,104,1)
(146,33,1)
(139,41,1)
(102,4,1)
(28,41,1)
(4,95,1)
(70,108,1)
(121,113,1)
(138,68,1)
(41,37,1)
(74,137,1)
(21,94,1)
(50,89,1)
(135,69,1)
(86,99,1)
(11,6,1)
(74,17,1)
(48,54,1)
(44,87,1)
(57,107,1)
(72,74,1)
(20,14,1)
(144,57,1)
(70,13,1)
(63,110,1)
(128,8,1)
(118,146,1)
(145,13,1)
(138,134,1)
(3,7,1)
(32,89,1)
(47,20,1)
(87,50,1)
(92,42,1)
(123,5,1)
(26,54,1)
(49,59,1)
(79,123,1)
(68,130,1)
(33,23,1)
(26,48,1)
(69,15,1)
(119,34,1)
(131,120,1)
(88,121,1)
(89,117,1)
(13,88,1)
(23,140,1)
(43,125,1)
(54,115,1)
(95,2,1)
(7,49,1)
(55,66,1)
(34,65,1)
(137,68,1)
(43,13,1)
(94,29,1)
(6,105,1)
(82,3,1)
(89,70,1)
(93,61,1)
(2,19,1)
(117,70,1)
(15,37,1)
(99,78,1)
(6,32,1)
(5,131,1)
(28,13,1)
(3,111,1)
(20,125,1)
(101,29,1)
(43,11,1)
(96,47,1)
(42,112,1)
(134,3,1)
(46,125,1)
(105,59,1)
(29,102,1)
(27,110,1)
(78,71,1)
(67,110,1)
(79,96,1)
(0,119,1)
(136,44,1)
(67,114,1)
(38,46,1)
(111,7,1)
(37,72,1)
(29,4,1)
(4,19,1)
(134,82,1)
(65,93,1)
(130,38,1)
(45,91,1)
(18,45,1)
(81,68,1)
(62,84,1)
(40,145,1)
(8,56,1)
(58,80,1)
(137,136,1)
(137,123,1)
(113,128,1)
(129,91,1)
(91,13,1)
(91,40,1)
(6,134,1)
(28,74,1)
(126,118,1)
(130,123,1)
(20,13,1)
(121,29,2)
(28,13,2)
(74,137,2)
(43,13,2)
(59,63,2)
(71,91,2)
(140,55,2)
(144,91,2)
(91,29,2)
(86,91,2)
(102,134,2)
(4,19,2)
(35,91,2)
(34,91,2)
(13,88,2)
(86,18,2)
(40,29,2)
(61,91,2)
(18,91,2)
(2,134,2)
(41,89,2)
(135,89,2)
(23,91,2)
(3,59,2)
(117,91,2)
(115,91,2)
(89,70,2)
(145,29,2)
(92,91,2)
(26,54,2)
(126,91,2)
(137,89,2)
(87,89,2)
(33,91,2)
(98,89,2)
(91,13,2)
(21,29,2)
(65,91,2)
(53,47,2)
(7,59,2)
(70,13,2)
(68,130,2)
(41,37,2)
(114,63,2)
(88,29,2)
(111,7,2)
(113,29,2)
(28,74,2)
(67,110,2)
(108,91,2)
(48,91,2)
(54,91,2)
(19,134,2)
(93,91,2)
(81,89,2)
(26,91,2)
(130,123,2)
(66,91,2)
(57,107,2)
(29,4,2)
(41,98,2)
(119,91,2)
(28,41,2)
(104,63,2)
(8,29,2)
(70,57,2)
(74,17,2)
(110,89,2)
(139,89,2)
(134,59,2)
(101,29,2)
(45,91,2)
(0,91,2)
(37,89,2)
(146,91,2)
(136,89,2)
(89,91,2)
(63,89,2)
(86,99,2)
(78,91,2)
(55,91,2)
(98,81,2)
(63,110,2)
(29,134,2)
(49,59,2)
(128,29,2)
(14,43,2)
(57,91,2)
(59,89,2)
(70,91,2)
(109,89,2)
(79,123,2)
(57,35,2)
(27,89,2)
(81,68,2)
(32,89,2)
(59,67,2)
(25,134,2)
(28,89,2)
(137,68,2)
(15,89,2)
(138,134,2)
(44,89,2)
(4,95,2)
(4,134,2)
(70,108,2)
(67,63,2)
(94,29,2)
(118,91,2)
(112,126,2)
(110,28,2)
(42,91,2)
(95,134,2)
(137,123,2)
(56,29,2)
(72,89,2)
(20,125,2)
(43,125,2)
(112,91,2)
(20,13,2)
(99,91,2)
(13,29,2)
(74,89,2)
(140,91,2)
(129,91,2)
(82,3,2)
(105,59,2)
(20,43,2)
(50,89,2)
(69,89,2)
-----------------------------------
(0,service)
(1,)
(2,wsaData)
(3,replace)
(4,WSAStartup(MAKEWORD(2,2)
(5,dataBuffer)
(6,connectSocket)
(7,replace)
(8,connectSocket)
(9,wsaData)
(10,dataLen)
(11,INVALID_SOCKET)
(12,)
(13,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(14,connectSocket)
(15,250)
(16,0)
(17,char *)
(18,&service)
(19,MAKEWORD(2,2)
(20,CLOSE_SOCKET(connectSocket)
(21,1)
(22,)
(23,service)
(24,source:)
(25,2)
(26,service.sin_addr.s_addr)
(27,recvResult)
(28,recv(connectSocket, (char *)
(29,WSAStartup(MAKEWORD(2,2)
(30,data)
(31,)
(32,break;)
(33,sin_port)
(34,AF_INET)
(35,&service)
(36,if (recvResult == SOCKET_ERROR || recvResult == 0)
(37,sizeof(wchar_t)
(38,data)
(39,if (connectSocket == INVALID_SOCKET)
(40,INVALID_SOCKET)
(41,sizeof(wchar_t)
(42,connectSocket)
(43,connectSocket != INVALID_SOCKET)
(44,data)
(45,service)
(46,dataLen)
(47,wsaDataInit)
(48,s_addr)
(49,\\'\\\\0\\')
(50,recvResult)
(51,replace)
(52,wsaDataInit = 0)
(53,WSACleanup()
(54,service.sin_addr)
(55,inet_addr(IP_ADDRESS)
(56,wsaDataInit = 1)
(57,(struct sockaddr*)
(58,INVALID_SOCKET)
(59,recvResult == SOCKET_ERROR || recvResult == 0)
(60,)
(61,service)
(62,wsaDataInit)
(63,recvResult == SOCKET_ERROR)
(64,RET)
(65,service.sin_family)
(66,IP_ADDRESS)
(67,recvResult == 0)
(68,dataLen = wcslen(data)
(69,dataLen)
(70,connect(connectSocket, (struct sockaddr*)
(71,0)
(72,wchar_t)
(73,)
(74,(char *)
(75,if (connectSocket != INVALID_SOCKET)
(76,do)
(77,if (connect(connectSocket, (struct sockaddr*)
(78,service)
(79,PUTENV(data)
(80,connectSocket)
(81,dataLen - 1)
(82,\\\'\\\\0\\\')
(83,wsaDataInit)
(84,goto source;)
(85,)
(86,memset(&service, 0, sizeof(service)
(87,connectSocket)
(88,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(89,connect(connectSocket, (struct sockaddr*)
(90,)
(91,connectSocket == INVALID_SOCKET)
(92,service)
(93,sin_family)
(94,wsaDataInit)
(95,&wsaData)
(96,data)
(97,)
(98,250 - dataLen - 1)
(99,sizeof(service)
(100,)
(101,break;)
(102,NO_ERROR)
(103,if (replace)
(104,recvResult)
(105,break;)
(106,if (replace)
(107,struct sockaddr*)
(108,sizeof(service)
(109,SOCKET_ERROR)
(110,recvResult = recv(connectSocket, (char *)
(111,\\\'\\\\0\\\')
(112,service.sin_port = htons(TCP_PORT)
(113,SOCK_STREAM)
(114,0)
(115,sin_addr)
(116,\\\'\\\\0\\\')
(117,SOCKET_ERROR)
(118,TCP_PORT)
(119,service.sin_family = AF_INET)
(120,"PATH=")
(121,IPPROTO_TCP)
(122,if (wsaDataInit)
(123,data = dataBuffer)
(124,if (WSAStartup(MAKEWORD(2,2)
(125,connectSocket = INVALID_SOCKET)
(126,htons(TCP_PORT)
(127,recvResult)
(128,AF_INET)
(129,break;)
(130,wcslen(data)
(131,data)
(132,\\'\\\\0\\')
(133,connectSocket)
(134,0)
(135,1)
(136,dataLen)
(137,data + dataLen)
(138,2)
(139,0)
(140,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(141,)
(142,service)
(143,\\'\\\\0\\')
(144,service)
(145,connectSocket)
(146,service.sin_port)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
