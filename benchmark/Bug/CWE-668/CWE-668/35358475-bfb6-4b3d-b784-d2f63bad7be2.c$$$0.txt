-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(25,37,0)
(60,47,0)
(18,2,0)
(4,34,0)
(46,26,0)
(1,4,0)
(61,40,0)
(32,60,0)
(52,34,0)
(53,34,0)
(47,26,0)
(27,11,0)
(44,60,0)
(29,22,0)
(58,14,0)
(35,54,0)
(40,18,0)
(16,2,0)
(26,23,0)
(39,0,0)
(17,23,0)
(4,12,0)
(28,15,0)
(63,12,0)
(62,55,0)
(54,23,0)
(44,38,0)
(38,44,0)
(38,17,0)
(43,52,0)
(52,23,0)
(2,62,0)
(3,2,0)
(12,4,0)
(5,18,0)
(34,52,0)
(8,12,0)
(20,62,0)
(37,49,0)
(59,23,0)
(0,47,0)
(15,47,0)
(17,15,0)
(57,38,0)
(9,0,0)
(17,38,0)
(4,1,0)
(47,14,0)
(15,17,0)
(60,44,0)
(56,62,0)
(59,27,0)
(52,2,0)
(30,47,0)
(50,7,0)
(36,15,0)
(18,40,0)
(39,37,0)
(21,59,0)
(51,54,0)
(12,2,0)
(7,11,0)
(42,27,0)
(26,47,0)
(33,52,0)
(34,22,0)
(39,23,0)
(19,39,0)
(2,3,0)
(34,4,0)
(59,2,0)
(41,17,0)
(22,34,0)
(31,60,0)
(48,45,0)
(6,3,0)
(54,55,0)
(24,0,0)
(0,39,0)
(3,23,0)
(13,18,0)
(10,59,0)
(51,40,1)
(53,4,1)
(41,60,1)
(39,0,1)
(51,44,1)
(34,52,1)
(21,7,1)
(24,19,1)
(47,26,1)
(39,23,1)
(4,12,1)
(61,18,1)
(38,57,1)
(34,53,1)
(59,2,1)
(52,43,1)
(34,4,1)
(0,9,1)
(27,42,1)
(5,2,1)
(50,22,1)
(22,34,1)
(29,34,1)
(19,44,1)
(17,15,1)
(12,2,1)
(9,24,1)
(52,23,1)
(36,28,1)
(31,47,1)
(38,17,1)
(4,1,1)
(13,5,1)
(44,60,1)
(63,52,1)
(37,25,1)
(3,6,1)
(59,10,1)
(26,46,1)
(25,39,1)
(44,38,1)
(40,18,1)
(35,54,1)
(59,23,1)
(18,13,1)
(30,22,1)
(0,47,1)
(12,8,1)
(26,23,1)
(22,29,1)
(3,23,1)
(51,27,1)
(54,23,1)
(52,2,1)
(8,63,1)
(51,37,1)
(33,40,1)
(32,31,1)
(40,61,1)
(46,30,1)
(18,2,1)
(15,36,1)
(6,16,1)
(54,51,1)
(2,3,1)
(15,47,1)
(43,33,1)
(60,32,1)
(57,17,1)
(7,50,1)
(42,59,1)
(10,21,1)
(60,47,1)
(17,23,1)
(28,41,1)
(2,3,2)
(36,60,2)
(34,52,2)
(63,40,2)
(60,47,2)
(41,60,2)
(59,2,2)
(29,40,2)
(57,60,2)
(60,22,2)
(0,44,2)
(39,23,2)
(47,26,2)
(15,60,2)
(26,23,2)
(0,47,2)
(31,22,2)
(39,44,2)
(17,23,2)
(7,22,2)
(52,2,2)
(27,22,2)
(4,1,2)
(28,60,2)
(19,44,2)
(44,60,2)
(4,12,2)
(10,22,2)
(12,40,2)
(34,4,2)
(17,60,2)
(30,22,2)
(46,22,2)
(8,40,2)
(52,23,2)
(38,17,2)
(53,40,2)
(54,23,2)
(3,23,2)
(22,40,2)
(38,60,2)
(26,22,2)
(39,0,2)
(18,2,2)
(32,22,2)
(59,22,2)
(43,40,2)
(35,54,2)
(22,34,2)
(50,22,2)
(44,38,2)
(47,22,2)
(52,40,2)
(37,44,2)
(4,40,2)
(59,23,2)
(15,47,2)
(21,22,2)
(25,44,2)
(44,22,2)
(33,40,2)
(9,44,2)
(24,44,2)
(34,40,2)
(12,2,2)
(17,15,2)
(42,22,2)
(40,18,2)
-----------------------------------
(0,dataLen-1)
(1,int)
(2,dataLen = strlen(data)
(3,strlen(data)
(4,(int)
(5,250)
(6,data)
(7,printLine("fgets()
(8,dataLen)
(9,1)
(10,dataLen)
(11,)
(12,250-dataLen)
(13,dataLen)
(14,)
(15,dataLen-1)
(16,dataLen)
(17,data[dataLen-1])
(18,250-dataLen)
(19,data)
(20,if (250-dataLen > 1)
(21,data)
(22,fgets(data+dataLen, (int)
(23,char * data)
(24,dataLen)
(25,\\\'\\\\0\\\')
(26,strlen(data)
(27,data[dataLen] = \\\'\\\\0\\\')
(28,dataLen)
(29,NULL)
(30,dataLen)
(31,dataLen)
(32,0)
(33,data)
(34,fgets(data+dataLen, (int)
(35,RET)
(36,1)
(37,data[dataLen-1] = \\\'\\\\0\\\')
(38,data[dataLen-1] == \\\'\\\\n\\\')
(39,data[dataLen-1])
(40,250-dataLen > 1)
(41,data)
(42,\\\'\\\\0\\\')
(43,dataLen)
(44,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,)
(46,data)
(47,dataLen = strlen(data)
(48,if (fgets(data+dataLen, (int)
(49,)
(50,"fgets()
(51,data)
(52,data+dataLen)
(53,stdin)
(54,return data;)
(55,)
(56,dataLen)
(57,\\\'\\\\n\\\')
(58,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,data[dataLen])
(60,dataLen > 0)
(61,1)
(62,)
(63,250)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
