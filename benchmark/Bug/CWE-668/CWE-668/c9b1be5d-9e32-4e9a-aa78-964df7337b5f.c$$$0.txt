-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_34_bad()
{
    char * data;
    CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType myUnion;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
        PUTENV(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
129,131
130,131
133,134
135,136
135,137
136,137
137,138
137,139
139,140
139,141
139,142
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,26,30,32,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,131,132,134,138,140,141,145,146,150,152
-----computeFrom-----
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
128,129
128,130
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_34_bad(){    char * data;    CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType myUnion;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_34_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_34_bad
{    char * data;    CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType myUnion;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
char * data;
char * data;
char
* data
*
data
CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType myUnion;
CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType myUnion;
CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType
CWE427_Uncontrolled_Search_Path_Element__char_console_34_unionType
myUnion
myUnion
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(33,68,0)
(43,1,0)
(28,1,0)
(16,53,0)
(79,1,0)
(51,36,0)
(45,46,0)
(69,9,0)
(38,46,0)
(1,35,0)
(43,16,0)
(37,35,0)
(5,37,0)
(71,35,0)
(60,25,0)
(26,42,0)
(32,34,0)
(58,60,0)
(55,29,0)
(42,1,0)
(7,74,0)
(46,25,0)
(24,36,0)
(14,25,0)
(44,22,0)
(28,62,0)
(40,79,0)
(77,24,0)
(63,1,0)
(9,1,0)
(80,81,0)
(62,28,0)
(9,35,0)
(36,66,0)
(32,10,0)
(48,30,0)
(61,81,0)
(24,30,0)
(64,61,0)
(30,24,0)
(27,29,0)
(65,37,0)
(2,74,0)
(51,32,0)
(66,36,0)
(81,35,0)
(39,83,0)
(18,62,0)
(34,32,0)
(76,57,0)
(67,24,0)
(42,34,0)
(12,9,0)
(32,51,0)
(17,16,0)
(43,36,0)
(50,51,0)
(79,83,0)
(0,22,0)
(74,28,0)
(25,60,0)
(72,29,0)
(79,3,0)
(70,52,0)
(72,81,0)
(74,25,0)
(36,37,0)
(42,36,0)
(20,43,0)
(23,53,0)
(31,46,0)
(56,34,0)
(10,32,0)
(73,3,0)
(59,66,0)
(62,38,0)
(25,57,0)
(3,4,0)
(78,69,0)
(82,1,0)
(19,72,0)
(1,22,0)
(47,42,0)
(13,35,0)
(61,72,0)
(66,1,0)
(68,34,0)
(6,28,0)
(54,83,0)
(60,1,0)
(28,74,0)
(83,25,0)
(46,38,0)
(75,36,0)
(41,69,0)
(15,51,0)
(22,35,0)
(34,42,0)
(49,43,0)
(29,72,0)
(34,68,0)
(21,35,0)
(83,79,0)
(8,23,0)
(38,62,0)
(51,15,1)
(34,42,1)
(56,32,1)
(24,36,1)
(66,59,1)
(68,33,1)
(16,17,1)
(67,36,1)
(43,20,1)
(66,1,1)
(6,46,1)
(9,12,1)
(54,39,1)
(46,45,1)
(78,38,1)
(31,25,1)
(19,9,1)
(51,36,1)
(28,1,1)
(11,61,1)
(34,56,1)
(62,18,1)
(3,73,1)
(83,54,1)
(72,29,1)
(48,24,1)
(83,25,1)
(7,2,1)
(79,83,1)
(50,42,1)
(61,64,1)
(77,67,1)
(25,60,1)
(33,34,1)
(18,28,1)
(12,69,1)
(23,8,1)
(17,43,1)
(36,66,1)
(43,1,1)
(73,79,1)
(78,16,1)
(8,68,1)
(9,1,1)
(64,72,1)
(30,24,1)
(34,32,1)
(75,1,1)
(40,38,1)
(42,26,1)
(46,25,1)
(26,47,1)
(74,25,1)
(78,3,1)
(49,23,1)
(2,6,1)
(30,48,1)
(55,27,1)
(78,30,1)
(60,58,1)
(47,30,1)
(38,46,1)
(24,77,1)
(15,50,1)
(44,0,1)
(68,34,1)
(27,19,1)
(41,78,1)
(74,7,1)
(61,72,1)
(32,10,1)
(28,74,1)
(42,36,1)
(62,28,1)
(63,22,1)
(22,44,1)
(69,41,1)
(14,68,1)
(29,55,1)
(38,62,1)
(45,31,1)
(1,22,1)
(39,40,1)
(32,51,1)
(79,1,1)
(20,49,1)
(59,75,1)
(42,1,1)
(82,63,1)
(58,14,1)
(60,1,1)
(43,36,1)
(1,82,1)
(74,25,2)
(8,68,2)
(9,1,2)
(42,30,2)
(7,46,2)
(25,60,2)
(42,36,2)
(83,38,2)
(31,68,2)
(32,30,2)
(23,68,2)
(28,1,2)
(34,30,2)
(15,30,2)
(14,68,2)
(74,46,2)
(18,46,2)
(73,38,2)
(49,68,2)
(60,68,2)
(28,74,2)
(45,68,2)
(72,29,2)
(46,25,2)
(83,25,2)
(79,38,2)
(34,32,2)
(43,1,2)
(79,1,2)
(28,46,2)
(16,68,2)
(3,38,2)
(42,1,2)
(61,72,2)
(58,68,2)
(50,30,2)
(25,68,2)
(54,38,2)
(66,1,2)
(62,28,2)
(51,30,2)
(51,36,2)
(36,66,2)
(68,30,2)
(56,30,2)
(2,46,2)
(62,46,2)
(32,10,2)
(39,38,2)
(1,22,2)
(40,38,2)
(20,68,2)
(60,1,2)
(38,46,2)
(47,30,2)
(43,68,2)
(38,68,2)
(38,62,2)
(30,24,2)
(17,68,2)
(24,36,2)
(33,30,2)
(46,68,2)
(79,83,2)
(6,46,2)
(26,30,2)
(32,51,2)
(43,36,2)
(34,42,2)
(68,34,2)
-----------------------------------
(0,dataBuffer)
(1,data = dataBuffer)
(2,dataLen)
(3,data[dataLen-1] = \\\'\\\\0\\\')
(4,)
(5,if (250-dataLen > 1)
(6,data)
(7,1)
(8,"fgets()
(9,myUnion.unionFirst = data)
(10,int)
(11,RET)
(12,data)
(13,dataBuffer)
(14,dataLen)
(15,dataLen)
(16,data[dataLen] = \\\'\\\\0\\\')
(17,\\\'\\\\0\\\')
(18,\\\'\\\\n\\\')
(19,data)
(20,dataLen)
(21,data)
(22,dataBuffer[250] = "PATH=")
(23,printLine("fgets()
(24,250-dataLen)
(25,dataLen = strlen(data)
(26,dataLen)
(27,myUnion)
(28,data[dataLen-1])
(29,myUnion.unionSecond)
(30,250-dataLen > 1)
(31,dataLen)
(32,(int)
(33,NULL)
(34,fgets(data+dataLen, (int)
(35,)
(36,dataLen = strlen(data)
(37,)
(38,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(39,dataLen)
(40,data)
(41,unionFirst)
(42,data+dataLen)
(43,data[dataLen])
(44,"PATH=")
(45,0)
(46,dataLen > 0)
(47,data)
(48,1)
(49,data)
(50,250)
(51,250-dataLen)
(52,)
(53,)
(54,1)
(55,unionSecond)
(56,stdin)
(57,)
(58,data)
(59,data)
(60,strlen(data)
(61,PUTENV(data)
(62,data[dataLen-1] == \\\'\\\\n\\\')
(63,data)
(64,data)
(65,dataLen)
(66,strlen(data)
(67,250)
(68,fgets(data+dataLen, (int)
(69,myUnion.unionFirst)
(70,if (fgets(data+dataLen, (int)
(71,myUnion)
(72,* data = myUnion.unionSecond)
(73,\\\'\\\\0\\\')
(74,dataLen-1)
(75,dataLen)
(76,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(77,dataLen)
(78,myUnion)
(79,data[dataLen-1])
(80,data)
(81,)
(82,dataBuffer)
(83,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
