-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_16_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    while(1)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
        break;
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
45,47
47,48
50,51
51,52
51,53
51,54
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
65,66
66,67
66,68
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
94,95
94,96
95,96
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
106,107
110,111
110,112
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
118,120
119,120
121,122
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,40,42,46,48,49,55,58,60,63,64,67,69,71,73,78,81,83,88,89,93,96,97,98,104,107,108,109,114,115,120,122,123,124,128,130
-----computeFrom-----
22,23
22,24
44,45
44,46
45,46
45,47
52,53
52,54
56,57
56,58
66,67
66,68
76,77
76,78
85,86
85,87
86,87
86,88
90,91
90,92
94,95
94,96
101,102
101,103
105,106
105,107
117,118
117,119
-----guardedBy-----
48,122
58,104
69,107
93,104
96,107
-----guardedByNegation-----
58,120
69,122
-----lastLexicalUse-----
58,120
69,122
-----jump-----
58,120
69,122
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_16_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    while(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_16_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_16_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    while(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        break;    }
1
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        break;    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
break;
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(24,12,0)
(46,20,0)
(73,50,0)
(16,46,0)
(32,20,0)
(67,18,0)
(18,12,0)
(26,28,0)
(18,37,0)
(48,52,0)
(34,47,0)
(60,52,0)
(25,72,0)
(16,71,0)
(19,17,0)
(27,36,0)
(29,17,0)
(2,74,0)
(17,40,0)
(17,29,0)
(30,74,0)
(47,34,0)
(46,16,0)
(69,52,0)
(64,71,0)
(4,5,0)
(42,28,0)
(39,29,0)
(74,20,0)
(71,25,0)
(25,50,0)
(57,37,0)
(22,67,0)
(20,74,0)
(31,1,0)
(1,25,0)
(3,62,0)
(36,17,0)
(47,26,0)
(72,18,0)
(41,72,0)
(45,57,0)
(8,46,0)
(7,38,0)
(12,37,0)
(35,40,0)
(52,17,0)
(68,26,0)
(44,25,0)
(67,17,0)
(15,1,0)
(49,12,0)
(20,46,0)
(56,36,0)
(26,47,0)
(4,18,0)
(33,71,0)
(70,9,0)
(5,58,0)
(28,26,0)
(11,69,0)
(10,40,0)
(36,26,0)
(29,18,0)
(71,16,0)
(14,37,0)
(67,70,0)
(40,63,0)
(1,4,0)
(43,62,0)
(6,18,0)
(0,4,0)
(4,1,0)
(51,5,0)
(54,55,0)
(26,36,0)
(13,18,0)
(62,47,0)
(55,9,0)
(36,18,0)
(74,25,0)
(57,18,0)
(52,69,0)
(21,63,0)
(72,25,0)
(47,62,0)
(59,37,0)
(65,67,0)
(62,17,0)
(20,18,0)
(61,37,0)
(66,70,0)
(62,3,1)
(46,20,1)
(36,18,1)
(52,17,1)
(17,29,1)
(30,32,1)
(29,18,1)
(11,52,1)
(8,20,1)
(69,52,1)
(0,16,1)
(67,18,1)
(57,45,1)
(21,70,1)
(36,17,1)
(51,4,1)
(41,44,1)
(70,66,1)
(64,25,1)
(53,57,1)
(56,69,1)
(6,13,1)
(45,21,1)
(18,6,1)
(26,68,1)
(49,24,1)
(4,1,1)
(27,56,1)
(13,12,1)
(28,26,1)
(28,42,1)
(21,69,1)
(48,60,1)
(2,30,1)
(45,23,1)
(69,11,1)
(26,47,1)
(5,51,1)
(12,49,1)
(62,17,1)
(32,71,1)
(60,17,1)
(47,34,1)
(36,27,1)
(18,12,1)
(65,55,1)
(72,41,1)
(54,28,1)
(72,18,1)
(3,43,1)
(33,64,1)
(16,71,1)
(20,18,1)
(67,17,1)
(19,23,1)
(4,18,1)
(23,18,1)
(46,8,1)
(68,47,1)
(1,25,1)
(57,18,1)
(16,46,1)
(29,39,1)
(21,5,1)
(44,28,1)
(71,25,1)
(31,15,1)
(74,2,1)
(52,48,1)
(1,31,1)
(66,67,1)
(67,22,1)
(42,26,1)
(15,0,1)
(43,36,1)
(55,54,1)
(47,62,1)
(74,25,1)
(20,74,1)
(26,36,1)
(25,72,1)
(71,33,1)
(22,65,1)
(21,16,1)
(39,19,1)
(8,71,2)
(17,29,2)
(46,71,2)
(15,16,2)
(21,23,2)
(47,69,2)
(67,17,2)
(30,71,2)
(52,23,2)
(74,71,2)
(47,34,2)
(48,23,2)
(25,28,2)
(67,18,2)
(74,25,2)
(43,69,2)
(62,17,2)
(20,18,2)
(0,16,2)
(26,36,2)
(29,23,2)
(36,18,2)
(65,28,2)
(72,28,2)
(47,62,2)
(4,1,2)
(33,28,2)
(39,23,2)
(28,26,2)
(20,74,2)
(55,28,2)
(1,25,2)
(60,23,2)
(41,28,2)
(56,69,2)
(71,28,2)
(71,25,2)
(19,23,2)
(46,20,2)
(17,23,2)
(51,16,2)
(28,69,2)
(54,28,2)
(72,18,2)
(31,16,2)
(36,17,2)
(18,12,2)
(70,28,2)
(22,28,2)
(69,52,2)
(4,16,2)
(68,69,2)
(44,28,2)
(32,71,2)
(67,28,2)
(16,46,2)
(66,28,2)
(25,72,2)
(52,17,2)
(26,47,2)
(2,71,2)
(36,69,2)
(29,18,2)
(57,18,2)
(62,69,2)
(4,18,2)
(16,71,2)
(3,69,2)
(69,23,2)
(5,16,2)
(26,69,2)
(20,71,2)
(64,28,2)
(42,69,2)
(11,23,2)
(16,28,2)
(1,16,2)
(27,69,2)
-----------------------------------
(0,data)
(1,dataLen-1)
(2,1)
(3,dataLen)
(4,data[dataLen-1])
(5,data[dataLen-1] = \\\'\\\\0\\\')
(6,dataBuffer)
(7,if (fgets(data+dataLen, (int)
(8,\\\'\\\\n\\\')
(9,)
(10,dataLen)
(11,1)
(12,dataBuffer[250] = "PATH=")
(13,data)
(14,while(1)
(15,dataLen)
(16,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,dataLen = strlen(data)
(18,data = dataBuffer)
(19,dataLen)
(20,data[dataLen-1])
(21,break;)
(22,dataLen)
(23,1)
(24,dataBuffer)
(25,dataLen = strlen(data)
(26,fgets(data+dataLen, (int)
(27,dataLen)
(28,fgets(data+dataLen, (int)
(29,strlen(data)
(30,dataLen)
(31,1)
(32,data)
(33,0)
(34,int)
(35,if (250-dataLen > 1)
(36,data+dataLen)
(37,)
(38,)
(39,data)
(40,)
(41,data)
(42,NULL)
(43,250)
(44,dataLen)
(45,data)
(46,data[dataLen-1] == \\\'\\\\n\\\')
(47,(int)
(48,dataLen)
(49,"PATH=")
(50,)
(51,\\\'\\\\0\\\')
(52,250-dataLen)
(53,RET)
(54,"fgets()
(55,printLine("fgets()
(56,data)
(57,PUTENV(data)
(58,)
(59,dataBuffer)
(60,250)
(61,data)
(62,250-dataLen)
(63,)
(64,dataLen)
(65,data)
(66,\\\'\\\\0\\\')
(67,data[dataLen])
(68,stdin)
(69,250-dataLen > 1)
(70,data[dataLen] = \\\'\\\\0\\\')
(71,dataLen > 0)
(72,strlen(data)
(73,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(74,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
