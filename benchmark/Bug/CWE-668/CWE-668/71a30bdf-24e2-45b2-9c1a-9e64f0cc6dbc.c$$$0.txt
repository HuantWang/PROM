-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_free_01_bad()
{
    {
        wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (password == NULL) {exit(-1);}
        size_t passwordLen = 0;
        HANDLE hUser;
        wchar_t * username = L"User";
        wchar_t * domain = L"Domain";
        /* Initialize password */
        password[0] = L'\0';
        if (fgetws(password, 100, stdin) == NULL)
        {
            printLine("fgetws() failed");
            /* Restore NUL terminator if fgetws fails */
            password[0] = L'\0';
        }
        /* Remove the carriage return from the string that is inserted by fgetws() */
        passwordLen = wcslen(password);
        if (passwordLen > 0)
        {
            password[passwordLen-1] = L'\0';
        }
        /* Use the password in LogonUser() to establish that it is "sensitive" */
        if (LogonUserW(
                    username,
                    domain,
                    password,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &hUser) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(hUser);
        }
        else
        {
            printLine("Unable to login.");
        }
        /* FLAW: free() password without clearing the password buffer */
        free(password);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
6,14
6,15
6,16
6,17
6,18
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
64,65
64,66
66,67
66,68
66,69
69,70
71,72
72,73
72,74
73,74
73,75
74,75
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
117,118
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
124,125
128,129
128,130
128,131
129,130
129,131
130,131
130,132
130,133
130,134
130,135
130,136
130,137
131,132
133,134
135,136
137,138
139,140
141,142
143,144
144,145
147,148
147,149
148,149
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,44,46,48,52,54,57,59,60,62,65,67,68,70,75,76,77,82,84,85,87,89,94,95,100,101,102,106,109,111,115,116,122,125,126,127,132,134,136,138,140,142,145,146,151,152,156,158,163,164,168,170
-----computeFrom-----
22,23
22,24
29,30
29,31
72,73
72,74
79,80
79,81
97,98
97,99
104,105
104,106
113,114
113,115
119,120
119,121
123,124
123,125
129,130
129,131
-----guardedBy-----
84,100
115,125
145,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_free_01_bad(){    {        wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));        if (password == NULL) {exit(-1);}        size_t passwordLen = 0;        HANDLE hUser;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* Initialize password */        password[0] = L'\0';        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: free() password without clearing the password buffer */        free(password);    }}
void
CWE244_Heap_Inspection__w32_wchar_t_free_01_bad()
CWE244_Heap_Inspection__w32_wchar_t_free_01_bad
{    {        wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));        if (password == NULL) {exit(-1);}        size_t passwordLen = 0;        HANDLE hUser;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* Initialize password */        password[0] = L'\0';        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: free() password without clearing the password buffer */        free(password);    }}
{        wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));        if (password == NULL) {exit(-1);}        size_t passwordLen = 0;        HANDLE hUser;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* Initialize password */        password[0] = L'\0';        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: free() password without clearing the password buffer */        free(password);    }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }
passwordLen > 0
passwordLen
passwordLen
0
{            password[passwordLen-1] = L'\0';        }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }
LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0
LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{            printLine("User logged in successfully.");            CloseHandle(hUser);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
free(password);
free(password)
free
free
password
password
-----joern-----
(10,12,0)
(68,16,0)
(15,62,0)
(21,62,0)
(0,56,0)
(12,62,0)
(5,30,0)
(63,61,0)
(49,45,0)
(55,18,0)
(4,62,0)
(30,5,0)
(32,46,0)
(36,30,0)
(62,70,0)
(26,22,0)
(46,18,0)
(53,62,0)
(56,40,0)
(61,12,0)
(3,44,0)
(65,16,0)
(11,49,0)
(6,62,0)
(43,62,0)
(28,62,0)
(25,62,0)
(8,49,0)
(20,22,0)
(5,44,0)
(49,12,0)
(9,45,0)
(44,5,0)
(42,10,0)
(48,24,0)
(12,36,0)
(60,39,0)
(38,66,0)
(23,20,0)
(19,36,0)
(10,62,0)
(39,2,0)
(31,22,0)
(56,62,0)
(17,62,0)
(59,49,0)
(24,41,0)
(34,61,0)
(40,12,0)
(50,55,0)
(57,5,0)
(36,12,0)
(14,22,0)
(51,49,0)
(37,64,0)
(52,40,0)
(40,56,0)
(27,41,0)
(54,49,0)
(67,62,0)
(36,19,0)
(33,12,0)
(1,62,0)
(49,11,0)
(22,20,0)
(69,11,0)
(66,35,0)
(47,6,0)
(45,49,0)
(16,56,0)
(30,36,0)
(29,60,0)
(58,6,0)
(7,49,0)
(39,60,0)
(22,12,0)
(61,12,1)
(46,32,1)
(65,68,1)
(16,56,1)
(45,9,1)
(48,20,1)
(14,31,1)
(58,47,1)
(44,3,1)
(40,12,1)
(40,52,1)
(59,8,1)
(67,53,1)
(22,12,1)
(26,14,1)
(32,45,1)
(37,16,1)
(6,58,1)
(61,63,1)
(42,55,1)
(49,12,1)
(39,60,1)
(50,46,1)
(42,66,1)
(7,59,1)
(63,34,1)
(20,23,1)
(51,37,1)
(49,11,1)
(11,69,1)
(34,12,1)
(0,27,1)
(29,61,1)
(56,40,1)
(38,45,1)
(45,49,1)
(3,57,1)
(68,56,1)
(5,44,1)
(31,21,1)
(23,22,1)
(57,33,1)
(0,20,1)
(16,65,1)
(69,54,1)
(10,42,1)
(53,6,1)
(27,24,1)
(22,26,1)
(47,39,1)
(24,48,1)
(52,0,1)
(47,61,1)
(10,12,1)
(30,5,1)
(66,38,1)
(54,7,1)
(21,67,1)
(9,49,1)
(12,36,1)
(60,29,1)
(36,19,1)
(8,51,1)
(51,16,1)
(36,30,1)
(20,22,1)
(13,10,1)
(55,50,1)
(32,45,2)
(24,20,2)
(39,60,2)
(22,12,2)
(60,61,2)
(66,45,2)
(56,40,2)
(38,45,2)
(49,11,2)
(10,12,2)
(27,20,2)
(46,45,2)
(55,45,2)
(49,12,2)
(39,61,2)
(50,45,2)
(37,16,2)
(36,19,2)
(16,56,2)
(12,36,2)
(30,5,2)
(40,12,2)
(29,61,2)
(36,30,2)
(5,44,2)
(45,49,2)
(61,12,2)
(48,20,2)
(20,22,2)
-----------------------------------
(0,passwordLen)
(1,if (password == NULL)
(2,)
(3,wchar_t)
(4,passwordLen)
(5,100*sizeof(wchar_t)
(6,passwordLen = 0)
(7,LOGON32_LOGON_NETWORK)
(8,domain)
(9,0)
(10,free(password)
(11,&hUser)
(12,* password = (wchar_t *)
(13,RET)
(14,100)
(15,if (passwordLen > 0)
(16,passwordLen > 0)
(17,if (LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(18,)
(19,wchar_t *)
(20,fgetws(password, 100, stdin)
(21,\\\'\\\\0\\\')
(22,fgetws(password, 100, stdin)
(23,NULL)
(24,printLine("fgetws()
(25,password)
(26,stdin)
(27,\\\'\\\\0\\\')
(28,hUser)
(29,1)
(30,malloc(100*sizeof(wchar_t)
(31,password)
(32,"User logged in successfully.")
(33,password)
(34,password)
(35,)
(36,(wchar_t *)
(37,\\\'\\\\0\\\')
(38,"Unable to login.")
(39,exit(-1)
(40,wcslen(password)
(41,)
(42,password)
(43,if (fgetws(password, 100, stdin)
(44,sizeof(wchar_t)
(45,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(46,printLine("User logged in successfully.")
(47,passwordLen)
(48,"fgetws()
(49,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(50,hUser)
(51,username)
(52,password)
(53,"User")
(54,LOGON32_PROVIDER_DEFAULT)
(55,CloseHandle(hUser)
(56,passwordLen = wcslen(password)
(57,100)
(58,0)
(59,password)
(60,-1)
(61,password == NULL)
(62,)
(63,NULL)
(64,)
(65,0)
(66,printLine("Unable to login.")
(67,"Domain")
(68,passwordLen)
(69,hUser)
(70,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
