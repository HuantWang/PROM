-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        FILE *pFile;
        pFile = fopen("passwords.txt", "r");
        if (pFile != NULL)
        {
            /* POTENTIAL FLAW: Read the password from a file */
            if (fgets(data, 100, pFile) == NULL)
            {
                data[0] = '\0';
            }
            fclose(pFile);
        }
        else
        {
            data[0] = '\0';
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
24,26
24,27
25,26
29,30
29,31
29,32
30,31
30,32
31,32
33,34
35,36
35,37
36,37
36,38
37,38
37,39
38,39
38,40
38,41
38,42
39,40
41,42
44,45
46,47
48,49
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
65,67
66,67
70,71
71,72
-----nextToken-----
2,4,5,7,9,10,16,18,19,23,26,27,28,32,34,40,42,43,45,47,53,54,55,59,61,67,68,69,72
-----computeFrom-----
21,22
21,23
30,31
30,32
37,38
37,39
50,51
50,52
64,65
64,66
-----guardedBy-----
34,47
32,61
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }    return data;}
{        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }    }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }        else        {            data[0] = '\0';        }
pFile != NULL
pFile
pFile
NULL
NULL
{            /* POTENTIAL FLAW: Read the password from a file */            if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }            fclose(pFile);        }
if (fgets(data, 100, pFile) == NULL)            {                data[0] = '\0';            }
fgets(data, 100, pFile) == NULL
fgets(data, 100, pFile)
fgets
fgets
data
data
100
pFile
pFile
NULL
NULL
{                data[0] = '\0';            }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{            data[0] = '\0';        }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(14,22,0)
(22,4,0)
(20,14,0)
(32,14,0)
(11,33,0)
(24,32,0)
(34,26,0)
(5,12,0)
(1,34,0)
(34,4,0)
(21,32,0)
(8,18,0)
(35,29,0)
(31,32,0)
(0,27,0)
(15,5,0)
(7,27,0)
(32,21,0)
(19,29,0)
(37,14,0)
(25,22,0)
(36,33,0)
(9,22,0)
(10,37,0)
(32,26,0)
(7,14,0)
(6,17,0)
(30,7,0)
(23,18,0)
(14,29,0)
(18,26,0)
(18,6,0)
(33,26,0)
(28,32,0)
(13,21,0)
(3,6,0)
(2,34,0)
(29,14,0)
(33,5,0)
(16,37,0)
(23,21,1)
(5,15,1)
(32,14,1)
(35,20,1)
(30,21,1)
(16,14,1)
(33,26,1)
(28,24,1)
(7,14,1)
(29,19,1)
(10,16,1)
(30,6,1)
(31,28,1)
(1,34,1)
(24,37,1)
(6,3,1)
(32,26,1)
(33,11,1)
(3,18,1)
(2,7,1)
(21,32,1)
(36,37,1)
(8,23,1)
(34,26,1)
(14,29,1)
(18,26,1)
(21,13,1)
(37,10,1)
(32,31,1)
(19,35,1)
(2,5,1)
(15,33,1)
(37,14,1)
(34,2,1)
(18,8,1)
(13,32,1)
(7,30,1)
(11,36,1)
(3,21,2)
(36,37,2)
(28,37,2)
(1,34,2)
(13,37,2)
(21,32,2)
(24,37,2)
(37,14,2)
(18,26,2)
(6,21,2)
(31,37,2)
(5,37,2)
(33,37,2)
(7,37,2)
(14,29,2)
(23,21,2)
(34,26,2)
(32,37,2)
(7,14,2)
(8,21,2)
(32,26,2)
(30,37,2)
(32,14,2)
(33,26,2)
(11,37,2)
(21,37,2)
(15,37,2)
(18,21,2)
-----------------------------------
(0,if (fgets(data, 100, pFile)
(1,RET)
(2,data)
(3,\\\'\\\\0\\\')
(4,)
(5,data[0] = \\\'\\\\0\\\')
(6,data[0] = \\\'\\\\0\\\')
(7,fclose(pFile)
(8,0)
(9,pFile)
(10,NULL)
(11,0)
(12,)
(13,NULL)
(14,pFile = fopen("passwords.txt", "r")
(15,\\\'\\\\0\\\')
(16,pFile)
(17,)
(18,data[0])
(19,"r")
(20,pFile)
(21,fgets(data, 100, pFile)
(22,)
(23,data)
(24,data)
(25,if (pFile != NULL)
(26,char * data)
(27,)
(28,100)
(29,fopen("passwords.txt", "r")
(30,pFile)
(31,pFile)
(32,fgets(data, 100, pFile)
(33,data[0])
(34,return data;)
(35,"passwords.txt")
(36,data)
(37,pFile != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
