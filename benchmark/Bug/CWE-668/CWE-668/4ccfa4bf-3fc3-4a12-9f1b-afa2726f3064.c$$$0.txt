-----label-----
1
-----code-----
void CWE377_Insecure_Temporary_File__char_w32GetTempFileName_15_bad()
{
    switch(6)
    {
    case 6:
    {
        char filename[MAX_PATH] = "";
        int fileDesc;
        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,
        * leading to an inescapable race condition when we try to open it again. */
        if (GetTempFileNameA(".", "bad", 0, filename) == 0)
        {
            exit(1);
        }
        printLine(filename);
        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */
        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
        if (fileDesc != -1)
        {
            printLine("Temporary file was opened...now closing file");
            CLOSE(fileDesc);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
18,19
20,21
22,23
23,24
23,25
25,26
27,28
27,29
28,29
28,30
29,30
29,31
29,32
29,33
29,34
30,31
35,36
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
54,58
55,56
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,7,10,14,16,19,21,24,26,31,32,33,34,36,37,42,43,47,49,53,56,58,61,63,66,68,72,74,79,80,84,86,87,88,92,93,94
-----computeFrom-----
28,29
28,30
51,52
51,53
59,60
59,61
64,65
64,66
70,71
70,72
-----guardedBy-----
72,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE377_Insecure_Temporary_File__char_w32GetTempFileName_15_bad(){    switch(6)    {    case 6:    {        char filename[MAX_PATH] = "";        int fileDesc;        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,        * leading to an inescapable race condition when we try to open it again. */        if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }        printLine(filename);        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);        if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE377_Insecure_Temporary_File__char_w32GetTempFileName_15_bad()
CWE377_Insecure_Temporary_File__char_w32GetTempFileName_15_bad
{    switch(6)    {    case 6:    {        char filename[MAX_PATH] = "";        int fileDesc;        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,        * leading to an inescapable race condition when we try to open it again. */        if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }        printLine(filename);        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);        if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        char filename[MAX_PATH] = "";        int fileDesc;        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,        * leading to an inescapable race condition when we try to open it again. */        if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }        printLine(filename);        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);        if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char filename[MAX_PATH] = "";        int fileDesc;        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,        * leading to an inescapable race condition when we try to open it again. */        if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }        printLine(filename);        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);        if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char filename[MAX_PATH] = "";        int fileDesc;        /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,        * leading to an inescapable race condition when we try to open it again. */        if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }        printLine(filename);        /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);        if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }    }
char filename[MAX_PATH] = "";
char filename[MAX_PATH] = "";
char
filename[MAX_PATH] = ""
filename
[MAX_PATH]
MAX_PATH
MAX_PATH
= ""
""
int fileDesc;
int fileDesc;
int
fileDesc
fileDesc
if (GetTempFileNameA(".", "bad", 0, filename) == 0)        {            exit(1);        }
GetTempFileNameA(".", "bad", 0, filename) == 0
GetTempFileNameA(".", "bad", 0, filename)
GetTempFileNameA
GetTempFileNameA
"."
"bad"
0
filename
filename
0
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
printLine(filename);
printLine(filename)
printLine
printLine
filename
filename
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
fileDesc
fileDesc
OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
OPEN
OPEN
filename
filename
O_RDWR|O_CREAT
O_RDWR
O_RDWR
O_CREAT
O_CREAT
S_IREAD|S_IWRITE
S_IREAD
S_IREAD
S_IWRITE
S_IWRITE
if (fileDesc != -1)        {            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }
fileDesc != -1
fileDesc
fileDesc
-1
1
{            printLine("Temporary file was opened...now closing file");            CLOSE(fileDesc);        }
printLine("Temporary file was opened...now closing file");
printLine("Temporary file was opened...now closing file")
printLine
printLine
"Temporary file was opened...now closing file"
CLOSE(fileDesc);
CLOSE(fileDesc)
CLOSE
CLOSE
fileDesc
fileDesc
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(29,23,0)
(22,26,0)
(39,7,0)
(37,24,0)
(23,26,0)
(5,15,0)
(10,26,0)
(11,4,0)
(4,44,0)
(18,4,0)
(0,8,0)
(17,15,0)
(47,23,0)
(19,8,0)
(25,44,0)
(32,44,0)
(41,8,0)
(0,4,0)
(33,4,0)
(7,40,0)
(32,26,0)
(31,42,0)
(2,45,0)
(38,44,0)
(0,45,0)
(4,0,0)
(20,16,0)
(12,15,0)
(26,44,0)
(45,0,0)
(35,44,0)
(36,32,0)
(48,5,0)
(0,26,0)
(23,29,0)
(1,33,0)
(44,15,0)
(8,0,0)
(3,23,0)
(46,23,0)
(42,33,0)
(30,23,0)
(9,44,0)
(14,11,0)
(11,27,0)
(6,45,0)
(33,42,0)
(43,29,0)
(13,0,0)
(49,15,0)
(21,15,0)
(16,27,0)
(5,48,1)
(18,32,1)
(26,10,1)
(22,28,1)
(3,26,1)
(49,33,1)
(31,1,1)
(29,43,1)
(2,8,1)
(0,45,1)
(47,46,1)
(42,31,1)
(45,6,1)
(21,5,1)
(0,26,1)
(23,30,1)
(34,49,1)
(14,16,1)
(13,18,1)
(43,23,1)
(16,20,1)
(46,3,1)
(49,11,1)
(8,19,1)
(34,21,1)
(4,0,1)
(41,13,1)
(0,8,1)
(32,26,1)
(7,39,1)
(36,29,1)
(33,4,1)
(39,29,1)
(20,33,1)
(48,28,1)
(1,4,1)
(29,23,1)
(32,36,1)
(6,2,1)
(19,41,1)
(10,22,1)
(11,4,1)
(33,42,1)
(30,47,1)
(11,14,1)
(36,7,1)
(23,26,1)
(4,28,2)
(32,28,2)
(19,28,2)
(1,28,2)
(4,0,2)
(29,23,2)
(47,28,2)
(6,28,2)
(41,28,2)
(11,4,2)
(30,28,2)
(2,28,2)
(3,28,2)
(11,33,2)
(13,28,2)
(21,28,2)
(23,28,2)
(48,28,2)
(14,33,2)
(8,28,2)
(0,28,2)
(31,28,2)
(29,28,2)
(33,28,2)
(33,42,2)
(43,28,2)
(16,33,2)
(0,8,2)
(0,45,2)
(5,28,2)
(23,26,2)
(46,28,2)
(33,4,2)
(0,26,2)
(49,28,2)
(39,29,2)
(36,28,2)
(18,28,2)
(10,28,2)
(32,26,2)
(22,28,2)
(42,28,2)
(26,28,2)
(20,33,2)
(7,29,2)
(45,28,2)
-----------------------------------
(0,OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(1,fileDesc)
(2,S_IREAD)
(3,".")
(4,fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(5,printLine("Benign, fixed string")
(6,S_IWRITE)
(7,exit(1)
(8,O_RDWR|O_CREAT)
(9,if (GetTempFileNameA(".", "bad", 0, filename)
(10,"")
(11,CLOSE(fileDesc)
(12,case 6:)
(13,filename)
(14,fileDesc)
(15,)
(16,printLine("Temporary file was opened...now closing file")
(17,default:)
(18,fileDesc)
(19,O_CREAT)
(20,"Temporary file was opened...now closing file")
(21,break;)
(22,filename)
(23,GetTempFileNameA(".", "bad", 0, filename)
(24,)
(25,filename)
(26,filename[MAX_PATH] = "")
(27,)
(28,6)
(29,GetTempFileNameA(".", "bad", 0, filename)
(30,filename)
(31,1)
(32,printLine(filename)
(33,fileDesc != -1)
(34,RET)
(35,if (fileDesc != -1)
(36,filename)
(37,switch(6)
(38,fileDesc)
(39,1)
(40,)
(41,O_RDWR)
(42,-1)
(43,0)
(44,)
(45,S_IREAD|S_IWRITE)
(46,"bad")
(47,0)
(48,"Benign, fixed string")
(49,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
