-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_17_bad()
{
    int i;
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
35,36
38,39
38,40
39,40
42,43
43,44
45,46
46,47
46,48
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
61,63
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
69,71
69,72
69,73
70,71
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
81,82
82,83
82,84
84,85
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
116,117
117,118
117,119
118,119
118,120
119,120
121,122
121,123
122,123
126,127
126,128
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
137,138
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,25,29,31,36,37,40,41,44,50,52,56,58,62,64,65,71,74,76,79,80,83,85,87,89,94,97,99,104,105,109,112,113,114,120,123,124,125,130,131,136,138,139,143,145
-----computeFrom-----
27,28
27,29
34,35
34,36
38,39
38,40
60,61
60,62
61,62
61,63
68,69
68,70
72,73
72,74
82,83
82,84
92,93
92,94
101,102
101,103
102,103
102,104
106,107
106,108
110,111
110,112
117,118
117,119
121,122
121,123
133,134
133,135
-----guardedBy-----
64,138
74,120
85,123
109,120
112,123
-----guardedByNegation-----
74,136
85,138
-----lastLexicalUse-----
74,136
85,138
-----jump-----
74,136
85,138
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_17_bad(){    int i;    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_17_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_17_bad
{    int i;    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(15,49,0)
(21,55,0)
(38,21,0)
(0,36,0)
(53,41,0)
(38,49,0)
(20,36,0)
(50,35,0)
(29,22,0)
(24,48,0)
(25,22,0)
(28,3,0)
(9,3,0)
(7,43,0)
(44,23,0)
(48,24,0)
(51,7,0)
(17,19,0)
(40,4,0)
(24,39,0)
(16,36,0)
(43,7,0)
(49,7,0)
(52,33,0)
(7,49,0)
(49,15,0)
(22,21,0)
(30,43,0)
(35,36,0)
(21,26,0)
(23,41,0)
(13,38,0)
(46,3,0)
(32,31,0)
(10,38,0)
(2,55,0)
(49,38,0)
(19,39,0)
(48,41,0)
(55,21,0)
(22,25,0)
(8,25,0)
(14,26,0)
(34,3,0)
(1,21,0)
(27,22,0)
(47,41,0)
(11,52,0)
(54,35,0)
(4,41,0)
(42,48,0)
(41,3,0)
(4,7,0)
(12,4,0)
(7,4,0)
(45,24,0)
(55,41,0)
(37,26,0)
(26,18,0)
(4,21,0)
(56,33,0)
(6,0,0)
(23,3,0)
(48,41,1)
(40,25,1)
(36,20,1)
(35,36,1)
(24,48,1)
(23,44,1)
(0,36,1)
(2,1,1)
(56,52,1)
(55,2,1)
(47,28,1)
(50,0,1)
(7,51,1)
(8,22,1)
(51,49,1)
(29,21,1)
(41,53,1)
(30,7,1)
(54,50,1)
(49,15,1)
(25,8,1)
(16,41,1)
(6,17,1)
(38,21,1)
(4,21,1)
(25,22,1)
(53,47,1)
(38,13,1)
(0,6,1)
(50,36,1)
(12,40,1)
(43,7,1)
(1,35,1)
(22,21,1)
(6,56,1)
(45,43,1)
(23,41,1)
(7,49,1)
(42,45,1)
(22,27,1)
(11,43,1)
(35,54,1)
(21,55,1)
(52,11,1)
(44,35,1)
(4,12,1)
(48,42,1)
(49,38,1)
(20,16,1)
(27,29,1)
(5,23,1)
(6,25,1)
(17,24,1)
(10,4,1)
(55,41,1)
(13,10,1)
(7,4,1)
(43,30,1)
(4,41,1)
(54,35,2)
(49,38,2)
(4,21,2)
(43,7,2)
(12,25,2)
(21,35,2)
(11,43,2)
(42,43,2)
(13,25,2)
(35,35,2)
(55,41,2)
(49,15,2)
(29,35,2)
(7,25,2)
(25,22,2)
(45,43,2)
(43,25,2)
(51,25,2)
(48,43,2)
(38,25,2)
(38,21,2)
(23,41,2)
(35,36,2)
(24,43,2)
(8,35,2)
(56,43,2)
(21,55,2)
(7,49,2)
(10,25,2)
(27,35,2)
(0,35,2)
(2,35,2)
(22,21,2)
(22,35,2)
(24,48,2)
(50,35,2)
(48,41,2)
(49,25,2)
(1,35,2)
(4,41,2)
(55,35,2)
(40,25,2)
(17,43,2)
(4,25,2)
(6,35,2)
(0,36,2)
(52,43,2)
(25,35,2)
(7,4,2)
(30,25,2)
-----------------------------------
(0,i++)
(1,dataLen)
(2,data)
(3,)
(4,data+dataLen)
(5,RET)
(6,i)
(7,fgetws(data+dataLen, (int)
(8,1)
(9,data)
(10,250)
(11,"fgetws()
(12,dataLen)
(13,dataLen)
(14,if (250-dataLen > 1)
(15,int)
(16,i)
(17,\\\'\\\\0\\\')
(18,)
(19,)
(20,0)
(21,dataLen = wcslen(data)
(22,250-dataLen)
(23,PUTENV(data)
(24,dataLen = wcslen(data)
(25,250-dataLen > 1)
(26,)
(27,dataLen)
(28,"PATH=")
(29,250)
(30,NULL)
(31,)
(32,if (fgetws(data+dataLen, (int)
(33,)
(34,for(i = 0; i < 1; i++)
(35,i < 1)
(36,i = 0)
(37,dataLen)
(38,250-dataLen)
(39,)
(40,data)
(41,data = dataBuffer)
(42,data)
(43,fgetws(data+dataLen, (int)
(44,data)
(45,dataLen)
(46,i)
(47,data)
(48,wcslen(data)
(49,(int)
(50,i)
(51,stdin)
(52,printLine("fgetws()
(53,dataBuffer)
(54,1)
(55,wcslen(data)
(56,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
