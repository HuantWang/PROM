-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66_bad()
{
    wchar_t * data;
    wchar_t * dataArray[5];
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    /* put data in array */
    dataArray[2] = data;
    CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
56,57
56,58
56,59
57,58
57,59
58,59
58,60
58,61
58,62
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
71,72
71,73
73,74
75,76
77,78
79,80
79,81
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
96,98
97,98
99,100
99,101
100,101
104,105
105,106
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
131,133
132,133
135,136
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,28,32,34,39,41,45,47,51,53,54,60,63,65,68,69,72,74,76,78,83,86,88,93,94,98,101,102,103,109,112,113,114,119,120,125,127,128,133,134,136,140,142
-----computeFrom-----
30,31
30,32
49,50
49,51
50,51
50,52
57,58
57,59
61,62
61,63
71,72
71,73
81,82
81,83
90,91
90,92
91,92
91,93
95,96
95,97
99,100
99,101
106,107
106,108
110,111
110,112
122,123
122,124
130,131
130,132
-----guardedBy-----
53,127
63,109
74,112
98,109
101,112
-----guardedByNegation-----
63,125
74,127
-----lastLexicalUse-----
63,125
74,127
-----jump-----
63,125
74,127
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66_bad(){    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66_bad
{    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataArray[5];
wchar_t * dataArray[5];
wchar_t
* dataArray[5]
*
dataArray
[5]
5
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray);
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray)
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink
dataArray
dataArray
-----joern-----
(44,38,0)
(34,9,0)
(48,2,0)
(50,38,0)
(31,44,0)
(16,33,0)
(49,5,0)
(28,30,0)
(10,9,0)
(15,5,0)
(26,16,0)
(36,19,0)
(18,3,0)
(2,38,0)
(22,11,0)
(21,26,0)
(40,1,0)
(43,30,0)
(9,30,0)
(23,15,0)
(35,30,0)
(13,23,0)
(17,30,0)
(14,26,0)
(33,3,0)
(11,6,0)
(6,38,0)
(7,2,0)
(2,5,0)
(37,33,0)
(39,31,0)
(29,15,0)
(3,33,0)
(42,16,0)
(19,32,0)
(44,30,0)
(25,32,0)
(33,16,0)
(0,4,0)
(20,38,0)
(26,5,0)
(15,23,0)
(5,9,0)
(33,2,0)
(47,6,0)
(27,31,0)
(38,30,0)
(24,45,0)
(6,11,0)
(16,42,0)
(2,33,0)
(8,17,0)
(51,44,0)
(41,40,0)
(16,26,0)
(4,5,0)
(46,15,0)
(4,38,0)
(5,4,0)
(11,1,0)
(22,3,1)
(19,36,1)
(2,38,1)
(14,21,1)
(12,17,1)
(39,25,1)
(3,18,1)
(17,8,1)
(4,0,1)
(27,39,1)
(7,48,1)
(8,44,1)
(3,33,1)
(4,38,1)
(51,31,1)
(16,26,1)
(0,49,1)
(33,37,1)
(41,11,1)
(13,15,1)
(26,5,1)
(37,16,1)
(31,27,1)
(2,7,1)
(23,13,1)
(23,15,1)
(46,29,1)
(47,22,1)
(44,51,1)
(20,28,1)
(29,5,1)
(25,19,1)
(18,33,1)
(39,41,1)
(6,47,1)
(5,4,1)
(15,5,1)
(48,23,1)
(6,38,1)
(16,42,1)
(11,6,1)
(38,50,1)
(21,2,1)
(26,14,1)
(15,46,1)
(33,2,1)
(2,5,1)
(33,16,1)
(49,38,1)
(39,23,1)
(50,20,1)
(36,3,1)
(44,38,1)
(44,38,2)
(21,23,2)
(48,23,2)
(22,3,2)
(18,23,2)
(2,38,2)
(3,33,2)
(5,4,2)
(33,16,2)
(15,5,2)
(36,3,2)
(2,23,2)
(23,15,2)
(16,26,2)
(25,3,2)
(3,23,2)
(33,2,2)
(11,6,2)
(7,23,2)
(14,23,2)
(16,42,2)
(6,3,2)
(47,3,2)
(2,5,2)
(6,38,2)
(33,23,2)
(26,23,2)
(11,3,2)
(19,3,2)
(41,3,2)
(4,38,2)
(26,5,2)
(37,23,2)
(16,23,2)
-----------------------------------
(0,data)
(1,)
(2,data+dataLen)
(3,fgetws(data+dataLen, (int)
(4,wcslen(data)
(5,dataLen = wcslen(data)
(6,wcslen(data)
(7,dataLen)
(8,dataArray)
(9,)
(10,if (250-dataLen > 1)
(11,dataLen = wcslen(data)
(12,RET)
(13,1)
(14,dataLen)
(15,250-dataLen)
(16,(int)
(17,CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_66b_badSink(dataArray)
(18,NULL)
(19,printLine("fgetws()
(20,data)
(21,250)
(22,dataLen)
(23,250-dataLen > 1)
(24,if (fgetws(data+dataLen, (int)
(25,\\\'\\\\0\\\')
(26,250-dataLen)
(27,2)
(28,"PATH=")
(29,250)
(30,)
(31,dataArray[2])
(32,)
(33,fgetws(data+dataLen, (int)
(34,dataLen)
(35,dataArray)
(36,"fgetws()
(37,stdin)
(38,data = dataBuffer)
(39,dataArray)
(40,)
(41,\\\'\\\\0\\\')
(42,int)
(43,data)
(44,dataArray[2] = data)
(45,)
(46,dataLen)
(47,data)
(48,data)
(49,dataLen)
(50,dataBuffer)
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
