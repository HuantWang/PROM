-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            WSADATA wsaData;
            BOOL wsaDataInit = FALSE;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            struct sockaddr_in service;
            int recvResult;
            do
            {
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
                listenSocket = socket(PF_INET, SOCK_STREAM, 0);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(LISTEN_PORT);
                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
                {
                    break;
                }
                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == INVALID_SOCKET)
                {
                    break;
                }
                /* INCIDENTAL CWE 188 - reliance on data memory layout
                 * recv and friends return "number of bytes" received
                 * char's on our system, however, may not be "octets" (8-bit
                 * bytes) but could be just about anything.  Also,
                 * even if the external environment is ASCII or UTF8,
                 * the ANSI/ISO C standard does not dictate that the
                 * character set used by the actual language or character
                 * constants matches.
                 *
                 * In practice none of these are usually issues...
                 */
                /* FLAW: read the new hostname from a network socket */
                recvResult = recv(acceptSocket, data, 100 - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                data[recvResult] = '\0';
            }
            while (0);
            if (acceptSocket != INVALID_SOCKET)
            {
                closesocket(acceptSocket);
            }
            if (listenSocket != INVALID_SOCKET)
            {
                closesocket(listenSocket);
            }
            if (wsaDataInit)
            {
                WSACleanup();
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
27,29
29,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
62,77
63,64
63,65
64,65
64,66
65,66
65,67
65,68
66,67
68,69
68,70
68,71
69,70
73,74
74,75
76,77
78,79
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
89,91
89,92
89,93
90,91
92,93
94,95
97,98
97,99
98,99
98,100
99,100
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
110,111
113,114
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
141,143
142,143
144,145
146,147
146,148
147,148
147,149
148,149
150,151
150,152
150,153
150,154
151,152
153,154
155,156
155,157
156,157
156,158
157,158
159,160
161,162
162,163
164,165
165,166
166,167
168,169
170,171
170,172
171,172
171,173
172,173
174,175
174,176
174,177
175,176
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
188,189
190,191
192,193
194,195
196,197
196,198
197,198
197,199
198,199
200,201
202,203
204,205
205,206
205,207
206,207
208,209
208,210
208,211
208,212
208,213
209,210
211,212
213,214
215,216
215,217
219,220
219,221
220,221
220,222
221,222
221,223
222,223
224,225
226,227
226,228
227,228
230,231
232,233
233,234
233,235
234,235
234,236
235,236
237,238
241,242
241,243
242,243
242,244
243,244
245,246
247,248
248,249
249,250
249,251
250,251
252,253
254,255
254,256
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
267,268
267,269
268,269
270,271
271,272
272,273
273,274
275,276
276,277
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,31,35,37,40,44,46,49,53,55,58,60,67,70,71,72,75,77,79,83,84,88,91,93,95,96,100,102,104,108,111,112,116,121,122,124,130,131,132,134,139,140,143,145,149,152,154,158,160,163,167,169,173,176,178,180,182,186,189,191,193,195,199,201,203,207,210,212,214,216,217,218,223,225,228,229,231,236,238,239,240,244,246,251,253,257,259,264,266,269,274,277
-----computeFrom-----
64,65
64,66
81,82
81,83
86,87
86,88
98,99
98,100
118,119
118,120
126,127
126,128
136,137
136,138
147,148
147,149
171,172
171,173
184,185
184,186
197,198
197,199
205,206
205,207
215,216
215,217
220,221
220,222
221,222
221,223
226,227
226,228
233,234
233,235
242,243
242,244
255,256
255,257
-----guardedBy-----
244,253
257,266
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    return data;}
if(badStatic)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
badStatic
badStatic
{        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
{            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);
{                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                    break;                }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                    break;                }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)                {                    break;                }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(acceptSocket);            }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(listenSocket);            }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)            {                WSACleanup();            }
wsaDataInit
wsaDataInit
{                WSACleanup();            }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
return data;
data
data
-----joern-----
(2,64,0)
(134,125,0)
(76,140,0)
(147,121,0)
(84,140,0)
(82,54,0)
(86,126,0)
(52,78,0)
(108,42,0)
(139,42,0)
(36,131,0)
(15,147,0)
(75,77,0)
(11,14,0)
(33,78,0)
(30,117,0)
(22,57,0)
(35,93,0)
(53,82,0)
(28,60,0)
(64,147,0)
(93,100,0)
(144,131,0)
(41,82,0)
(54,82,0)
(79,134,0)
(32,42,0)
(101,121,0)
(146,87,0)
(17,136,0)
(69,118,0)
(138,44,0)
(74,84,0)
(47,133,0)
(38,22,0)
(13,147,0)
(110,140,0)
(117,20,0)
(107,84,0)
(92,152,0)
(48,42,0)
(27,140,0)
(88,132,0)
(117,135,0)
(39,42,0)
(135,140,0)
(13,1,0)
(150,92,0)
(96,147,0)
(21,124,0)
(57,140,0)
(114,60,0)
(98,87,0)
(142,140,0)
(70,76,0)
(84,44,0)
(81,42,0)
(111,36,0)
(13,69,0)
(46,140,0)
(19,136,0)
(60,140,0)
(103,140,0)
(152,147,0)
(104,132,0)
(135,78,0)
(72,42,0)
(59,52,0)
(87,42,0)
(57,22,0)
(130,140,0)
(122,57,0)
(25,36,0)
(29,100,0)
(115,121,0)
(55,76,0)
(102,66,0)
(42,23,0)
(97,121,0)
(149,125,0)
(89,54,0)
(44,84,0)
(88,20,0)
(95,41,0)
(24,148,0)
(109,148,0)
(105,152,0)
(84,74,0)
(4,3,0)
(127,22,0)
(79,135,0)
(11,147,0)
(43,79,0)
(0,42,0)
(112,96,0)
(93,57,0)
(10,93,0)
(78,52,0)
(71,91,0)
(78,20,0)
(90,152,0)
(64,126,0)
(91,100,0)
(31,42,0)
(13,151,0)
(82,41,0)
(69,13,0)
(78,57,0)
(5,77,0)
(123,140,0)
(117,103,0)
(7,103,0)
(128,54,0)
(68,12,0)
(129,52,0)
(136,55,0)
(67,22,0)
(143,11,0)
(11,126,0)
(151,13,0)
(49,69,0)
(126,42,0)
(120,79,0)
(125,134,0)
(69,49,0)
(78,135,0)
(6,151,0)
(26,96,0)
(22,147,0)
(134,79,0)
(3,130,0)
(106,83,0)
(130,3,0)
(45,55,0)
(152,92,0)
(55,136,0)
(63,88,0)
(8,100,0)
(131,140,0)
(99,125,0)
(118,69,0)
(119,62,0)
(37,117,0)
(18,13,0)
(85,126,0)
(51,140,0)
(91,50,0)
(121,147,0)
(147,140,0)
(125,135,0)
(100,42,0)
(40,64,0)
(91,57,0)
(148,130,0)
(141,118,0)
(153,135,0)
(61,78,0)
(137,53,0)
(58,74,0)
(77,57,0)
(80,16,0)
(116,88,0)
(56,42,0)
(82,53,0)
(73,1,0)
(1,13,0)
(9,78,0)
(107,44,1)
(19,131,1)
(96,112,1)
(33,52,1)
(111,84,1)
(3,4,1)
(93,57,1)
(101,115,1)
(90,105,1)
(129,61,1)
(10,35,1)
(65,64,1)
(30,134,1)
(88,20,1)
(116,88,1)
(119,77,1)
(99,149,1)
(85,86,1)
(144,36,1)
(92,152,1)
(6,69,1)
(100,29,1)
(131,144,1)
(11,147,1)
(40,2,1)
(134,79,1)
(114,28,1)
(146,94,1)
(121,101,1)
(122,92,1)
(117,37,1)
(86,87,1)
(13,147,1)
(117,135,1)
(80,134,1)
(60,114,1)
(59,129,1)
(95,82,1)
(13,151,1)
(35,80,1)
(78,52,1)
(82,53,1)
(78,33,1)
(57,22,1)
(93,10,1)
(147,121,1)
(77,57,1)
(84,74,1)
(125,99,1)
(8,126,1)
(112,26,1)
(35,102,1)
(9,153,1)
(126,85,1)
(138,96,1)
(69,49,1)
(91,71,1)
(69,118,1)
(103,7,1)
(137,54,1)
(13,69,1)
(47,96,1)
(43,125,1)
(11,126,1)
(102,41,1)
(127,67,1)
(79,135,1)
(89,128,1)
(128,34,1)
(35,68,1)
(63,21,1)
(96,147,1)
(98,146,1)
(54,89,1)
(52,59,1)
(91,100,1)
(55,45,1)
(37,30,1)
(35,119,1)
(115,97,1)
(29,8,1)
(135,78,1)
(153,77,1)
(82,54,1)
(58,107,1)
(71,93,1)
(141,18,1)
(87,98,1)
(34,103,1)
(2,93,1)
(35,47,1)
(117,20,1)
(65,11,1)
(120,43,1)
(2,91,1)
(68,1,1)
(73,130,1)
(134,125,1)
(64,40,1)
(41,95,1)
(15,60,1)
(4,148,1)
(64,126,1)
(118,141,1)
(130,3,1)
(36,25,1)
(78,57,1)
(152,90,1)
(63,94,1)
(84,44,1)
(18,73,1)
(64,147,1)
(148,24,1)
(26,147,1)
(7,117,1)
(44,138,1)
(74,58,1)
(97,15,1)
(63,65,1)
(143,64,1)
(76,70,1)
(79,120,1)
(136,17,1)
(38,127,1)
(150,1,1)
(151,6,1)
(93,100,1)
(70,55,1)
(5,57,1)
(128,100,1)
(75,5,1)
(17,19,1)
(11,143,1)
(1,13,1)
(41,82,1)
(61,9,1)
(109,76,1)
(78,20,1)
(55,136,1)
(106,92,1)
(35,106,1)
(45,136,1)
(67,122,1)
(125,135,1)
(24,109,1)
(91,57,1)
(25,111,1)
(35,34,1)
(152,147,1)
(77,75,1)
(53,137,1)
(88,63,1)
(105,150,1)
(149,135,1)
(22,147,1)
(22,38,1)
(21,65,1)
(28,41,1)
(13,69,2)
(4,96,2)
(98,94,2)
(41,94,2)
(144,96,2)
(90,1,2)
(126,94,2)
(120,125,2)
(146,94,2)
(84,74,2)
(147,41,2)
(30,134,2)
(1,96,2)
(54,34,2)
(135,77,2)
(149,77,2)
(91,57,2)
(13,151,2)
(78,57,2)
(67,92,2)
(22,147,2)
(65,94,2)
(78,52,2)
(64,147,2)
(118,96,2)
(35,94,2)
(82,94,2)
(129,77,2)
(41,82,2)
(109,96,2)
(36,96,2)
(70,96,2)
(130,96,2)
(58,96,2)
(3,96,2)
(128,94,2)
(33,77,2)
(127,92,2)
(137,94,2)
(97,41,2)
(93,100,2)
(92,152,2)
(69,96,2)
(86,94,2)
(57,92,2)
(107,96,2)
(100,94,2)
(82,53,2)
(77,92,2)
(101,41,2)
(121,41,2)
(134,77,2)
(24,96,2)
(91,100,2)
(134,79,2)
(61,77,2)
(69,118,2)
(96,41,2)
(57,22,2)
(122,92,2)
(102,41,2)
(91,93,2)
(11,147,2)
(38,92,2)
(103,134,2)
(22,92,2)
(153,77,2)
(59,77,2)
(117,134,2)
(117,135,2)
(112,41,2)
(64,94,2)
(147,121,2)
(89,34,2)
(11,64,2)
(111,96,2)
(76,96,2)
(26,41,2)
(68,1,2)
(10,94,2)
(19,96,2)
(151,96,2)
(69,49,2)
(71,93,2)
(105,1,2)
(85,94,2)
(130,3,2)
(53,94,2)
(74,96,2)
(117,20,2)
(138,96,2)
(73,96,2)
(75,92,2)
(44,96,2)
(84,96,2)
(54,94,2)
(53,34,2)
(141,96,2)
(13,147,2)
(28,41,2)
(78,77,2)
(152,1,2)
(6,96,2)
(9,77,2)
(2,94,2)
(128,34,2)
(116,88,2)
(43,125,2)
(7,134,2)
(82,34,2)
(125,135,2)
(115,41,2)
(79,135,2)
(55,136,2)
(131,96,2)
(125,77,2)
(92,1,2)
(134,125,2)
(29,94,2)
(80,134,2)
(150,1,2)
(77,57,2)
(135,78,2)
(89,94,2)
(25,96,2)
(87,94,2)
(84,44,2)
(34,134,2)
(45,96,2)
(1,13,2)
(11,126,2)
(13,96,2)
(88,20,2)
(37,134,2)
(143,64,2)
(82,54,2)
(8,94,2)
(93,57,2)
(55,96,2)
(52,77,2)
(95,94,2)
(114,41,2)
(152,147,2)
(136,96,2)
(96,147,2)
(106,92,2)
(148,96,2)
(79,125,2)
(137,34,2)
(99,77,2)
(17,96,2)
(40,94,2)
(93,94,2)
(18,96,2)
(95,34,2)
(47,96,2)
(15,41,2)
(78,20,2)
(119,77,2)
(60,41,2)
(21,65,2)
(64,126,2)
(5,92,2)
(41,34,2)
-----------------------------------
(0,do)
(1,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(2,listenSocket)
(3,htons(LISTEN_PORT)
(4,LISTEN_PORT)
(5,acceptSocket)
(6,service)
(7,'\\\\0')
(8,acceptSocket)
(9,acceptSocket)
(10,INVALID_SOCKET)
(11,closesocket(listenSocket)
(12,)
(13,bind(listenSocket, (struct sockaddr*)
(14,)
(15,listenSocket)
(16,)
(17,sin_addr)
(18,listenSocket)
(19,service)
(20,char * data)
(21,WSACleanup()
(22,accept(listenSocket, NULL, NULL)
(23,)
(24,sin_port)
(25,sin_family)
(26,listenSocket)
(27,if (recvResult == SOCKET_ERROR || recvResult == 0)
(28,wsaDataInit)
(29,INVALID_SOCKET)
(30,data)
(31,wsaData)
(32,recvResult)
(33,0)
(34,0)
(35,acceptSocket)
(36,service.sin_family)
(37,recvResult)
(38,NULL)
(39,if (acceptSocket != INVALID_SOCKET)
(40,INVALID_SOCKET)
(41,WSAStartup(MAKEWORD(2,2)
(42,)
(43,recvResult)
(44,&service)
(45,s_addr)
(46,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(47,break;)
(48,if (wsaDataInit)
(49,struct sockaddr*)
(50,)
(51,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(52,100 - 1)
(53,&wsaData)
(54,MAKEWORD(2,2)
(55,service.sin_addr.s_addr)
(56,acceptSocket)
(57,acceptSocket = accept(listenSocket, NULL, NULL)
(58,service)
(59,1)
(60,wsaDataInit = 1)
(61,data)
(62,)
(63,data)
(64,listenSocket != INVALID_SOCKET)
(65,wsaDataInit)
(66,)
(67,listenSocket)
(68,break;)
(69,(struct sockaddr*)
(70,INADDR_ANY)
(71,acceptSocket)
(72,listenSocket)
(73,SOCKET_ERROR)
(74,sizeof(service)
(75,INVALID_SOCKET)
(76,service.sin_addr.s_addr = INADDR_ANY)
(77,acceptSocket == INVALID_SOCKET)
(78,recv(acceptSocket, data, 100 - 1, 0)
(79,recvResult == 0)
(80,break;)
(81,wsaDataInit)
(82,WSAStartup(MAKEWORD(2,2)
(83,)
(84,memset(&service, 0, sizeof(service)
(85,INVALID_SOCKET)
(86,listenSocket)
(87,wsaDataInit = FALSE)
(88,return data;)
(89,2)
(90,LISTEN_BACKLOG)
(91,closesocket(acceptSocket)
(92,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(93,acceptSocket != INVALID_SOCKET)
(94,badStatic)
(95,NO_ERROR)
(96,listenSocket == INVALID_SOCKET)
(97,PF_INET)
(98,FALSE)
(99,SOCKET_ERROR)
(100,acceptSocket = INVALID_SOCKET)
(101,0)
(102,break;)
(103,data[recvResult] = '\\\\0')
(104,if(badStatic)
(105,listenSocket)
(106,break;)
(107,0)
(108,service)
(109,service)
(110,if (listenSocket == INVALID_SOCKET)
(111,service)
(112,INVALID_SOCKET)
(113,\'\\\\0\')
(114,1)
(115,SOCK_STREAM)
(116,RET)
(117,data[recvResult])
(118,&service)
(119,break;)
(120,0)
(121,socket(PF_INET, SOCK_STREAM, 0)
(122,acceptSocket)
(123,if (WSAStartup(MAKEWORD(2,2)
(124,)
(125,recvResult == SOCKET_ERROR)
(126,listenSocket = INVALID_SOCKET)
(127,NULL)
(128,2)
(129,100)
(130,service.sin_port = htons(LISTEN_PORT)
(131,service.sin_family = AF_INET)
(132,)
(133,)
(134,recvResult == SOCKET_ERROR || recvResult == 0)
(135,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(136,service.sin_addr)
(137,wsaData)
(138,service)
(139,if (listenSocket != INVALID_SOCKET)
(140,)
(141,service)
(142,if (acceptSocket == INVALID_SOCKET)
(143,listenSocket)
(144,AF_INET)
(145,data[recvResult] = \'\\\\0\')
(146,wsaDataInit)
(147,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(148,service.sin_port)
(149,recvResult)
(150,SOCKET_ERROR)
(151,sizeof(service)
(152,listen(listenSocket, LISTEN_BACKLOG)
(153,recvResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
