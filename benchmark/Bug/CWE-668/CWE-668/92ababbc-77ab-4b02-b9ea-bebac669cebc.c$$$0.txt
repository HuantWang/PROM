-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_51_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_51_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_51_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_51_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data);
CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data)
CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink
data
data
-----joern-----
(22,62,0)
(29,57,0)
(8,10,0)
(44,27,0)
(48,3,0)
(6,1,0)
(49,27,0)
(1,57,0)
(70,43,0)
(33,46,0)
(21,42,0)
(53,54,0)
(55,31,0)
(43,29,0)
(63,59,0)
(64,60,0)
(43,35,0)
(58,30,0)
(30,37,0)
(25,37,0)
(57,50,0)
(26,29,0)
(18,31,0)
(61,1,0)
(66,22,0)
(70,36,0)
(27,55,0)
(40,31,0)
(29,37,0)
(39,9,0)
(69,52,0)
(19,54,0)
(0,49,0)
(43,70,0)
(70,30,0)
(10,68,0)
(27,49,0)
(52,6,0)
(23,43,0)
(42,3,0)
(37,7,0)
(42,52,0)
(34,52,0)
(20,22,0)
(35,43,0)
(14,57,0)
(60,59,0)
(12,24,0)
(3,17,0)
(45,49,0)
(2,50,0)
(65,29,0)
(31,55,0)
(5,35,0)
(7,37,0)
(15,0,0)
(19,37,0)
(49,0,0)
(1,6,0)
(11,57,0)
(4,6,0)
(52,42,0)
(55,27,0)
(56,50,0)
(57,62,0)
(6,24,0)
(59,60,0)
(0,6,0)
(30,70,0)
(7,57,0)
(31,6,0)
(49,57,0)
(9,62,0)
(50,62,0)
(38,30,0)
(41,59,0)
(59,37,0)
(51,0,0)
(29,43,0)
(16,62,0)
(9,57,0)
(47,19,0)
(54,68,0)
(13,19,0)
(36,70,0)
(32,7,0)
(28,62,0)
(19,57,0)
(37,22,0)
(42,57,0)
(45,31,1)
(54,53,1)
(14,50,1)
(3,48,1)
(70,36,1)
(58,38,1)
(29,57,1)
(67,9,1)
(59,37,1)
(23,70,1)
(42,57,1)
(55,27,1)
(35,5,1)
(18,40,1)
(49,0,1)
(6,1,1)
(19,37,1)
(35,43,1)
(44,49,1)
(9,57,1)
(31,18,1)
(37,7,1)
(70,30,1)
(43,70,1)
(59,41,1)
(40,6,1)
(65,26,1)
(42,52,1)
(7,32,1)
(52,6,1)
(30,37,1)
(49,57,1)
(1,57,1)
(48,42,1)
(27,44,1)
(8,35,1)
(43,29,1)
(29,65,1)
(63,37,1)
(57,50,1)
(25,57,1)
(9,39,1)
(31,6,1)
(39,60,1)
(55,31,1)
(53,19,1)
(26,60,1)
(4,35,1)
(61,4,1)
(52,34,1)
(39,55,1)
(29,37,1)
(39,3,1)
(1,61,1)
(39,54,1)
(21,55,1)
(7,57,1)
(10,8,1)
(13,47,1)
(51,45,1)
(0,15,1)
(15,51,1)
(34,69,1)
(30,58,1)
(64,59,1)
(11,14,1)
(60,59,1)
(57,11,1)
(27,49,1)
(19,57,1)
(60,64,1)
(32,25,1)
(69,21,1)
(43,23,1)
(50,2,1)
(41,63,1)
(5,43,1)
(47,10,1)
(38,29,1)
(0,6,1)
(19,13,1)
(2,56,1)
(23,60,2)
(42,55,2)
(30,37,2)
(21,55,2)
(4,35,2)
(47,35,2)
(49,0,2)
(42,57,2)
(0,6,2)
(53,35,2)
(55,31,2)
(52,6,2)
(70,30,2)
(6,35,2)
(19,35,2)
(13,35,2)
(18,35,2)
(57,50,2)
(60,59,2)
(37,7,2)
(38,60,2)
(31,35,2)
(30,60,2)
(59,37,2)
(44,31,2)
(61,35,2)
(40,35,2)
(27,49,2)
(3,55,2)
(29,37,2)
(0,31,2)
(42,52,2)
(65,60,2)
(52,55,2)
(70,36,2)
(43,70,2)
(51,31,2)
(34,55,2)
(45,31,2)
(5,60,2)
(27,31,2)
(9,57,2)
(43,60,2)
(43,29,2)
(1,35,2)
(19,57,2)
(8,35,2)
(31,6,2)
(55,35,2)
(1,57,2)
(49,31,2)
(58,60,2)
(49,57,2)
(35,60,2)
(26,60,2)
(48,55,2)
(29,60,2)
(19,37,2)
(35,43,2)
(29,57,2)
(6,1,2)
(70,60,2)
(54,35,2)
(15,31,2)
(69,55,2)
(10,35,2)
(7,57,2)
(55,27,2)
-----------------------------------
(0,dataLen-1)
(1,strlen(data)
(2,"PATH=")
(3,data[dataLen-1] = \\\'\\\\0\\\')
(4,dataLen)
(5,NULL)
(6,dataLen = strlen(data)
(7,strlen(data)
(8,"fgets()
(9,CWE427_Uncontrolled_Search_Path_Element__char_console_51b_badSink(data)
(10,printLine("fgets()
(11,dataBuffer)
(12,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(13,dataLen)
(14,data)
(15,1)
(16,dataBuffer)
(17,)
(18,0)
(19,data[dataLen])
(20,dataLen)
(21,data)
(22,)
(23,stdin)
(24,)
(25,dataLen)
(26,data)
(27,data[dataLen-1] == \\\'\\\\n\\\')
(28,data)
(29,data+dataLen)
(30,250-dataLen)
(31,dataLen > 0)
(32,data)
(33,if (fgets(data+dataLen, (int)
(34,1)
(35,fgets(data+dataLen, (int)
(36,int)
(37,dataLen = strlen(data)
(38,250)
(39,data)
(40,dataLen)
(41,dataLen)
(42,data[dataLen-1])
(43,fgets(data+dataLen, (int)
(44,\\\'\\\\n\\\')
(45,data)
(46,)
(47,data)
(48,\\\'\\\\0\\\')
(49,data[dataLen-1])
(50,dataBuffer[250] = "PATH=")
(51,dataLen)
(52,dataLen-1)
(53,\\\'\\\\0\\\')
(54,data[dataLen] = \\\'\\\\0\\\')
(55,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(56,dataBuffer)
(57,data = dataBuffer)
(58,dataLen)
(59,250-dataLen)
(60,250-dataLen > 1)
(61,data)
(62,)
(63,250)
(64,1)
(65,dataLen)
(66,if (250-dataLen > 1)
(67,RET)
(68,)
(69,dataLen)
(70,(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
