-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_64_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,127
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_64_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_64_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_64_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data);
CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data)
CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink
&data
data
data
-----joern-----
(61,0,0)
(62,16,0)
(39,15,0)
(6,0,0)
(49,0,0)
(2,41,0)
(38,25,0)
(69,61,0)
(15,12,0)
(7,28,0)
(20,61,0)
(45,26,0)
(9,28,0)
(15,31,0)
(53,21,0)
(42,7,0)
(22,0,0)
(66,26,0)
(23,26,0)
(58,16,0)
(55,0,0)
(16,26,0)
(8,3,0)
(44,37,0)
(27,42,0)
(18,6,0)
(59,52,0)
(52,59,0)
(28,7,0)
(59,3,0)
(39,21,0)
(65,59,0)
(63,52,0)
(14,47,0)
(46,1,0)
(25,61,0)
(24,9,0)
(35,61,0)
(70,12,0)
(13,26,0)
(52,61,0)
(26,55,0)
(56,51,0)
(36,0,0)
(66,39,0)
(16,1,0)
(12,15,0)
(7,42,0)
(10,65,0)
(43,6,0)
(24,59,0)
(45,61,0)
(60,13,0)
(42,59,0)
(12,26,0)
(37,29,0)
(1,29,0)
(32,65,0)
(21,39,0)
(71,59,0)
(13,51,0)
(48,12,0)
(25,36,0)
(35,2,0)
(51,13,0)
(17,24,0)
(16,61,0)
(40,45,0)
(9,61,0)
(61,6,0)
(5,2,0)
(35,65,0)
(19,66,0)
(68,55,0)
(64,13,0)
(67,39,0)
(34,24,0)
(66,61,0)
(31,15,0)
(54,9,0)
(15,39,0)
(4,55,0)
(30,35,0)
(11,66,0)
(9,24,0)
(65,35,0)
(28,9,0)
(39,66,0)
(33,28,0)
(50,42,0)
(26,45,0)
(36,25,0)
(9,24,1)
(45,61,1)
(58,37,1)
(16,26,1)
(45,40,1)
(34,54,1)
(46,16,1)
(17,34,1)
(16,62,1)
(38,7,1)
(38,1,1)
(61,20,1)
(28,9,1)
(35,61,1)
(20,69,1)
(23,61,1)
(6,43,1)
(57,36,1)
(36,25,1)
(40,23,1)
(30,7,1)
(42,27,1)
(39,66,1)
(67,15,1)
(62,58,1)
(44,21,1)
(66,26,1)
(16,61,1)
(19,11,1)
(7,42,1)
(56,13,1)
(13,60,1)
(43,18,1)
(38,51,1)
(39,15,1)
(10,32,1)
(7,28,1)
(65,59,1)
(69,6,1)
(15,12,1)
(12,26,1)
(66,61,1)
(61,6,1)
(37,44,1)
(48,70,1)
(59,52,1)
(2,5,1)
(64,26,1)
(35,65,1)
(15,31,1)
(1,46,1)
(52,63,1)
(60,64,1)
(24,59,1)
(52,61,1)
(25,38,1)
(50,59,1)
(71,21,1)
(21,39,1)
(24,17,1)
(25,61,1)
(13,26,1)
(27,50,1)
(5,35,1)
(42,59,1)
(51,13,1)
(53,39,1)
(51,56,1)
(32,30,1)
(28,33,1)
(63,71,1)
(66,19,1)
(9,61,1)
(54,42,1)
(38,2,1)
(11,51,1)
(33,9,1)
(65,10,1)
(26,45,1)
(12,48,1)
(21,53,1)
(70,66,1)
(39,67,1)
(7,42,2)
(62,21,2)
(10,7,2)
(26,45,2)
(1,21,2)
(16,26,2)
(28,42,2)
(46,21,2)
(35,7,2)
(17,42,2)
(25,61,2)
(66,26,2)
(27,21,2)
(9,42,2)
(16,21,2)
(32,7,2)
(15,12,2)
(70,51,2)
(19,51,2)
(28,9,2)
(52,61,2)
(42,59,2)
(11,51,2)
(51,13,2)
(9,61,2)
(58,21,2)
(7,21,2)
(48,51,2)
(39,15,2)
(50,21,2)
(5,7,2)
(37,21,2)
(21,51,2)
(45,61,2)
(63,21,2)
(39,51,2)
(21,39,2)
(42,21,2)
(66,61,2)
(16,61,2)
(13,26,2)
(35,61,2)
(66,51,2)
(53,51,2)
(30,7,2)
(59,52,2)
(54,42,2)
(9,24,2)
(12,51,2)
(71,21,2)
(2,7,2)
(61,6,2)
(15,31,2)
(12,26,2)
(7,28,2)
(33,42,2)
(35,65,2)
(44,21,2)
(24,42,2)
(59,21,2)
(34,42,2)
(65,59,2)
(24,59,2)
(36,25,2)
(15,51,2)
(67,51,2)
(52,21,2)
(65,7,2)
(39,66,2)
-----------------------------------
(0,)
(1,data[dataLen] = \\\'\\\\0\\\')
(2,data[dataLen-1] = \\\'\\\\0\\\')
(3,)
(4,if (250-dataLen > 1)
(5,\\\'\\\\0\\\')
(6,dataBuffer[250] = "PATH=")
(7,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(8,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(9,data[dataLen-1])
(10,1)
(11,data)
(12,250-dataLen)
(13,250-dataLen)
(14,if (fgets(data+dataLen, (int)
(15,(int)
(16,data[dataLen])
(17,1)
(18,dataBuffer)
(19,dataLen)
(20,dataBuffer)
(21,fgets(data+dataLen, (int)
(22,dataBuffer)
(23,dataLen)
(24,dataLen-1)
(25,&data)
(26,dataLen = strlen(data)
(27,0)
(28,data[dataLen-1] == \\\'\\\\n\\\')
(29,)
(30,data)
(31,int)
(32,dataLen)
(33,\\\'\\\\n\\\')
(34,dataLen)
(35,data[dataLen-1])
(36,CWE427_Uncontrolled_Search_Path_Element__char_console_64b_badSink(&data)
(37,printLine("fgets()
(38,data)
(39,fgets(data+dataLen, (int)
(40,data)
(41,)
(42,dataLen > 0)
(43,"PATH=")
(44,"fgets()
(45,strlen(data)
(46,\\\'\\\\0\\\')
(47,)
(48,dataLen)
(49,data)
(50,dataLen)
(51,250-dataLen > 1)
(52,strlen(data)
(53,NULL)
(54,data)
(55,)
(56,1)
(57,RET)
(58,data)
(59,dataLen = strlen(data)
(60,dataLen)
(61,data = dataBuffer)
(62,dataLen)
(63,data)
(64,250)
(65,dataLen-1)
(66,data+dataLen)
(67,stdin)
(68,dataLen)
(69,data)
(70,250)
(71,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
