-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_10_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalTrue)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_10_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_10_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_10_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalTrue
globalTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(62,45,0)
(12,8,0)
(38,58,0)
(65,30,0)
(15,24,0)
(12,9,0)
(25,69,0)
(20,45,0)
(69,5,0)
(50,19,0)
(8,12,0)
(73,9,0)
(59,47,0)
(65,56,0)
(39,65,0)
(32,34,0)
(30,2,0)
(54,20,0)
(51,59,0)
(36,59,0)
(35,3,0)
(40,56,0)
(30,42,0)
(72,64,0)
(68,69,0)
(27,56,0)
(11,9,0)
(42,30,0)
(6,14,0)
(47,59,0)
(19,42,0)
(36,20,0)
(24,34,0)
(28,26,0)
(21,40,0)
(4,33,0)
(0,9,0)
(63,2,0)
(59,69,0)
(47,56,0)
(0,40,0)
(49,73,0)
(67,24,0)
(18,73,0)
(1,64,0)
(8,56,0)
(70,0,0)
(64,59,0)
(73,58,0)
(44,42,0)
(42,44,0)
(64,14,0)
(40,0,0)
(26,34,0)
(2,30,0)
(38,8,0)
(58,38,0)
(61,34,0)
(30,65,0)
(7,12,0)
(13,38,0)
(60,12,0)
(57,34,0)
(56,34,0)
(23,36,0)
(16,36,0)
(52,8,0)
(14,64,0)
(43,30,0)
(41,56,0)
(9,33,0)
(26,56,0)
(53,37,0)
(46,0,0)
(22,47,0)
(29,9,0)
(48,35,0)
(19,59,0)
(40,35,0)
(58,73,0)
(42,19,0)
(36,56,0)
(31,62,0)
(65,59,0)
(11,56,0)
(17,19,0)
(66,11,0)
(8,38,0)
(56,24,0)
(9,11,0)
(10,65,0)
(14,64,1)
(42,44,1)
(60,7,1)
(26,28,1)
(38,8,1)
(9,11,1)
(11,66,1)
(19,59,1)
(18,49,1)
(28,71,1)
(71,56,1)
(23,62,1)
(15,67,1)
(12,60,1)
(17,65,1)
(30,65,1)
(12,9,1)
(31,2,1)
(8,56,1)
(58,73,1)
(62,31,1)
(41,24,1)
(47,22,1)
(2,30,1)
(36,56,1)
(65,39,1)
(36,16,1)
(26,56,1)
(24,15,1)
(39,10,1)
(70,46,1)
(35,48,1)
(0,70,1)
(27,41,1)
(28,35,1)
(64,1,1)
(22,51,1)
(51,71,1)
(28,14,1)
(29,2,1)
(40,56,1)
(58,38,1)
(50,17,1)
(28,58,1)
(36,59,1)
(52,73,1)
(47,56,1)
(63,30,1)
(2,63,1)
(49,9,1)
(20,54,1)
(7,52,1)
(56,24,1)
(0,9,1)
(56,27,1)
(64,59,1)
(8,12,1)
(21,58,1)
(10,14,1)
(30,43,1)
(30,42,1)
(48,40,1)
(42,19,1)
(66,29,1)
(14,6,1)
(19,50,1)
(73,9,1)
(46,21,1)
(16,23,1)
(72,59,1)
(38,13,1)
(54,36,1)
(65,59,1)
(1,72,1)
(6,64,1)
(43,42,1)
(11,56,1)
(73,18,1)
(40,0,1)
(55,26,1)
(59,47,1)
(65,56,1)
(13,8,1)
(28,20,1)
(72,71,2)
(58,2,2)
(30,14,2)
(59,47,2)
(49,2,2)
(48,58,2)
(21,58,2)
(2,30,2)
(65,14,2)
(40,58,2)
(36,2,2)
(2,14,2)
(0,58,2)
(40,0,2)
(0,9,2)
(14,71,2)
(43,14,2)
(12,9,2)
(10,14,2)
(42,44,2)
(58,73,2)
(29,2,2)
(36,56,2)
(12,73,2)
(51,71,2)
(8,73,2)
(63,14,2)
(9,11,2)
(64,71,2)
(38,73,2)
(39,14,2)
(20,2,2)
(52,73,2)
(42,14,2)
(11,2,2)
(47,71,2)
(60,73,2)
(8,12,2)
(36,59,2)
(70,58,2)
(54,2,2)
(58,38,2)
(30,42,2)
(31,2,2)
(1,71,2)
(66,2,2)
(47,56,2)
(56,24,2)
(62,2,2)
(73,9,2)
(64,59,2)
(46,58,2)
(7,73,2)
(16,2,2)
(9,2,2)
(22,71,2)
(8,56,2)
(35,58,2)
(23,2,2)
(40,56,2)
(73,2,2)
(14,64,2)
(6,71,2)
(26,56,2)
(65,56,2)
(18,2,2)
(42,19,2)
(59,71,2)
(30,65,2)
(11,56,2)
(19,59,2)
(50,14,2)
(17,14,2)
(65,59,2)
(38,8,2)
(13,73,2)
(19,14,2)
-----------------------------------
(0,dataLen-1)
(1,dataLen)
(2,fgets(data+dataLen, (int)
(3,)
(4,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,)
(6,1)
(7,dataLen)
(8,data[dataLen-1])
(9,dataLen = strlen(data)
(10,data)
(11,strlen(data)
(12,dataLen-1)
(13,\\\'\\\\n\\\')
(14,250-dataLen > 1)
(15,"PATH=")
(16,dataLen)
(17,250)
(18,0)
(19,250-dataLen)
(20,data[dataLen] = \\\'\\\\0\\\')
(21,data)
(22,data)
(23,data)
(24,dataBuffer[250] = "PATH=")
(25,if (250-dataLen > 1)
(26,PUTENV(data)
(27,dataBuffer)
(28,data)
(29,dataLen)
(30,fgets(data+dataLen, (int)
(31,"fgets()
(32,data)
(33,)
(34,)
(35,data[dataLen-1] = \\\'\\\\0\\\')
(36,data[dataLen])
(37,)
(38,data[dataLen-1] == \\\'\\\\n\\\')
(39,dataLen)
(40,data[dataLen-1])
(41,data)
(42,(int)
(43,stdin)
(44,int)
(45,)
(46,dataLen)
(47,strlen(data)
(48,\\\'\\\\0\\\')
(49,dataLen)
(50,dataLen)
(51,dataLen)
(52,data)
(53,if (fgets(data+dataLen, (int)
(54,\\\'\\\\0\\\')
(55,RET)
(56,data = dataBuffer)
(57,if(globalTrue)
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,dataLen = strlen(data)
(60,1)
(61,dataBuffer)
(62,printLine("fgets()
(63,NULL)
(64,250-dataLen)
(65,data+dataLen)
(66,data)
(67,dataBuffer)
(68,dataLen)
(69,)
(70,1)
(71,globalTrue)
(72,250)
(73,dataLen > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
