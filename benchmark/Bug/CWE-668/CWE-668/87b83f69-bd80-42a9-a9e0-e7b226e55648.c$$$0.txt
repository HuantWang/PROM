-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
    else
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(char));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
38,39
38,40
38,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
51,52
51,53
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
101,103
101,104
102,103
102,104
103,104
103,105
103,106
103,107
103,108
103,109
103,110
104,105
106,107
108,109
110,111
112,113
114,115
116,117
117,118
120,121
120,122
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
132,133
133,134
134,135
134,136
135,136
138,139
139,140
139,141
139,142
139,143
139,144
139,145
139,146
139,147
139,148
139,149
139,150
140,141
141,142
141,143
143,144
143,145
143,146
145,146
147,148
149,150
150,151
150,152
151,152
153,154
153,155
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
166,167
166,168
166,169
169,170
171,172
172,173
172,174
174,175
174,176
174,177
177,178
179,180
179,181
180,181
180,182
181,182
181,183
181,184
181,185
182,183
184,185
187,188
189,190
191,192
191,193
192,193
193,194
193,195
194,195
197,198
198,199
198,200
199,200
199,201
200,201
204,205
205,206
205,207
206,207
208,209
208,210
209,210
211,212
213,214
213,215
214,215
214,216
215,216
218,219
219,220
220,221
220,222
221,222
221,223
222,223
224,225
224,226
225,226
229,230
229,231
229,232
230,231
230,232
231,232
231,233
231,234
231,235
231,236
231,237
231,238
232,233
234,235
236,237
238,239
240,241
242,243
244,245
245,246
248,249
248,250
249,250
250,251
250,252
251,252
254,255
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
266,267
267,268
267,269
268,269
270,271
270,272
271,272
273,274
275,276
276,277
276,278
276,279
277,278
279,280
281,282
281,283
282,283
284,285
285,286
285,287
-----nextToken-----
2,4,9,14,16,18,20,24,26,28,32,34,37,39,40,42,45,47,48,50,55,57,58,60,62,67,68,73,74,75,79,82,84,88,89,95,98,99,100,105,107,109,111,113,115,118,119,124,125,129,131,136,137,142,144,146,148,152,154,156,160,162,165,167,168,170,173,175,176,178,183,185,186,188,190,195,196,201,202,203,207,210,212,216,217,223,226,227,228,233,235,237,239,241,243,246,247,252,253,257,259,264,265,269,272,274,278,280,283,286,287
-----computeFrom-----
52,53
52,54
70,71
70,72
77,78
77,79
86,87
86,88
92,93
92,94
96,97
96,98
102,103
102,104
180,181
180,182
198,199
198,200
205,206
205,207
214,215
214,216
220,221
220,222
224,225
224,226
230,231
230,232
267,268
267,269
281,282
281,283
-----guardedBy-----
57,73
88,98
118,131
185,201
216,226
246,259
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_12_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

-----joern-----
(103,115,0)
(38,31,0)
(39,45,0)
(102,50,0)
(16,132,0)
(149,151,0)
(135,136,0)
(74,128,0)
(113,87,0)
(62,49,0)
(1,93,0)
(144,140,0)
(102,77,0)
(124,118,0)
(119,99,0)
(131,55,0)
(12,151,0)
(75,142,0)
(71,19,0)
(57,145,0)
(137,142,0)
(19,71,0)
(63,41,0)
(143,37,0)
(112,66,0)
(43,49,0)
(23,22,0)
(97,5,0)
(25,68,0)
(87,128,0)
(88,87,0)
(146,27,0)
(140,151,0)
(80,102,0)
(19,126,0)
(120,2,0)
(72,4,0)
(48,63,0)
(3,4,0)
(108,71,0)
(13,45,0)
(114,13,0)
(109,19,0)
(69,35,0)
(147,56,0)
(85,126,0)
(17,44,0)
(127,76,0)
(78,22,0)
(32,49,0)
(133,45,0)
(45,49,0)
(33,147,0)
(70,151,0)
(116,41,0)
(117,74,0)
(13,114,0)
(128,74,0)
(36,41,0)
(110,128,0)
(104,41,0)
(101,151,0)
(83,45,0)
(53,78,0)
(122,49,0)
(39,60,0)
(19,26,0)
(130,49,0)
(107,31,0)
(151,45,0)
(147,2,0)
(2,27,0)
(55,142,0)
(3,27,0)
(5,60,0)
(148,127,0)
(67,3,0)
(4,3,0)
(151,136,0)
(115,49,0)
(151,140,0)
(40,41,0)
(95,145,0)
(74,27,0)
(51,5,0)
(19,145,0)
(0,49,0)
(37,45,0)
(86,13,0)
(10,93,0)
(27,41,0)
(88,118,0)
(90,79,0)
(82,13,0)
(18,87,0)
(91,90,0)
(50,102,0)
(73,50,0)
(151,115,0)
(42,13,0)
(150,99,0)
(87,88,0)
(99,49,0)
(128,41,0)
(141,142,0)
(100,88,0)
(111,60,0)
(26,19,0)
(60,49,0)
(60,39,0)
(6,19,0)
(37,78,0)
(20,49,0)
(2,41,0)
(126,41,0)
(49,24,0)
(96,19,0)
(93,49,0)
(9,19,0)
(106,56,0)
(121,49,0)
(102,45,0)
(64,41,0)
(65,69,0)
(8,92,0)
(54,27,0)
(2,147,0)
(92,89,0)
(52,69,0)
(30,25,0)
(14,19,0)
(34,126,0)
(31,128,0)
(142,27,0)
(4,41,0)
(118,58,0)
(129,26,0)
(61,115,0)
(35,68,0)
(69,27,0)
(147,4,0)
(84,77,0)
(81,23,0)
(145,41,0)
(19,27,0)
(47,35,0)
(44,76,0)
(142,55,0)
(41,139,0)
(134,41,0)
(94,16,0)
(28,114,0)
(136,151,0)
(105,15,0)
(21,41,0)
(98,37,0)
(77,29,0)
(15,79,0)
(56,147,0)
(59,151,0)
(123,41,0)
(88,27,0)
(7,50,0)
(125,39,0)
(50,60,0)
(11,63,0)
(151,93,0)
(13,45,1)
(138,127,1)
(65,52,1)
(59,149,1)
(111,78,1)
(9,96,1)
(53,37,1)
(114,28,1)
(31,128,1)
(54,46,1)
(56,106,1)
(88,87,1)
(34,85,1)
(143,23,1)
(25,30,1)
(73,7,1)
(55,131,1)
(44,17,1)
(15,105,1)
(84,102,1)
(108,19,1)
(103,61,1)
(80,5,1)
(95,126,1)
(111,114,1)
(142,137,1)
(120,4,1)
(151,115,1)
(114,13,1)
(19,126,1)
(69,65,1)
(138,2,1)
(147,56,1)
(93,10,1)
(81,114,1)
(70,77,1)
(5,97,1)
(83,46,1)
(8,71,1)
(74,117,1)
(87,128,1)
(90,91,1)
(37,98,1)
(50,60,1)
(149,101,1)
(1,115,1)
(141,145,1)
(71,108,1)
(3,67,1)
(109,6,1)
(75,141,1)
(119,150,1)
(14,109,1)
(19,27,1)
(128,74,1)
(131,142,1)
(60,39,1)
(125,111,1)
(142,27,1)
(137,75,1)
(19,26,1)
(63,11,1)
(151,136,1)
(136,135,1)
(42,82,1)
(31,38,1)
(117,110,1)
(133,83,1)
(91,71,1)
(27,146,1)
(61,99,1)
(18,113,1)
(39,125,1)
(4,3,1)
(101,12,1)
(33,120,1)
(69,27,1)
(19,145,1)
(52,25,1)
(85,63,1)
(26,129,1)
(106,33,1)
(10,1,1)
(50,73,1)
(2,27,1)
(37,45,1)
(2,147,1)
(110,35,1)
(88,27,1)
(100,31,1)
(7,80,1)
(87,18,1)
(98,143,1)
(105,90,1)
(97,51,1)
(13,86,1)
(71,19,1)
(86,42,1)
(70,5,1)
(12,70,1)
(151,45,1)
(74,27,1)
(23,81,1)
(138,16,1)
(99,119,1)
(145,57,1)
(72,15,1)
(47,69,1)
(140,151,1)
(135,59,1)
(35,47,1)
(57,95,1)
(67,72,1)
(3,27,1)
(96,31,1)
(127,148,1)
(55,142,1)
(5,60,1)
(72,92,1)
(82,93,1)
(39,45,1)
(77,84,1)
(38,107,1)
(102,50,1)
(129,14,1)
(126,34,1)
(151,93,1)
(118,124,1)
(6,9,1)
(30,55,1)
(150,45,1)
(113,100,1)
(51,60,1)
(110,55,1)
(144,151,1)
(48,27,1)
(17,140,1)
(45,133,1)
(11,48,1)
(140,144,1)
(107,128,1)
(96,118,1)
(147,4,1)
(124,88,1)
(146,54,1)
(92,8,1)
(16,94,1)
(78,53,1)
(102,45,1)
(115,103,1)
(28,13,1)
(148,44,1)
(94,140,1)
(88,31,2)
(65,55,2)
(140,151,2)
(67,46,2)
(47,55,2)
(33,46,2)
(135,46,2)
(84,5,2)
(147,46,2)
(15,71,2)
(125,46,2)
(69,55,2)
(78,114,2)
(57,46,2)
(8,71,2)
(127,140,2)
(150,46,2)
(100,31,2)
(60,39,2)
(133,46,2)
(147,56,2)
(141,46,2)
(5,60,2)
(5,46,2)
(128,74,2)
(26,46,2)
(114,13,2)
(131,46,2)
(2,27,2)
(137,46,2)
(23,114,2)
(85,46,2)
(151,46,2)
(148,140,2)
(6,46,2)
(4,3,2)
(92,71,2)
(80,5,2)
(73,5,2)
(82,46,2)
(37,114,2)
(45,46,2)
(39,45,2)
(117,46,2)
(13,45,2)
(126,46,2)
(69,27,2)
(27,46,2)
(120,46,2)
(97,46,2)
(59,46,2)
(2,46,2)
(38,46,2)
(140,46,2)
(50,5,2)
(129,46,2)
(91,71,2)
(74,46,2)
(72,46,2)
(19,26,2)
(151,45,2)
(25,55,2)
(74,27,2)
(75,46,2)
(50,60,2)
(30,55,2)
(108,46,2)
(94,140,2)
(143,114,2)
(113,31,2)
(11,46,2)
(42,46,2)
(3,27,2)
(71,19,2)
(107,46,2)
(99,46,2)
(1,46,2)
(106,46,2)
(109,46,2)
(16,140,2)
(102,50,2)
(96,46,2)
(111,46,2)
(51,46,2)
(144,46,2)
(114,46,2)
(147,4,2)
(88,27,2)
(87,31,2)
(87,128,2)
(77,5,2)
(48,46,2)
(63,46,2)
(19,145,2)
(4,46,2)
(124,31,2)
(103,46,2)
(2,147,2)
(151,136,2)
(35,55,2)
(105,71,2)
(71,46,2)
(55,46,2)
(60,46,2)
(12,46,2)
(19,126,2)
(28,46,2)
(3,46,2)
(142,27,2)
(93,46,2)
(102,5,2)
(17,140,2)
(54,46,2)
(151,93,2)
(88,87,2)
(145,46,2)
(61,46,2)
(18,31,2)
(19,27,2)
(95,46,2)
(86,46,2)
(13,46,2)
(146,46,2)
(115,46,2)
(31,128,2)
(44,140,2)
(151,115,2)
(14,46,2)
(19,46,2)
(102,45,2)
(128,46,2)
(9,46,2)
(110,46,2)
(53,114,2)
(83,46,2)
(70,46,2)
(118,31,2)
(142,46,2)
(56,46,2)
(7,5,2)
(119,46,2)
(52,55,2)
(90,71,2)
(101,46,2)
(31,46,2)
(149,46,2)
(136,46,2)
(37,45,2)
(39,46,2)
(81,114,2)
(34,46,2)
(10,46,2)
(55,142,2)
(98,114,2)
-----------------------------------
(0,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(1,domain)
(2,SecureZeroMemory(password, passwordLen * sizeof(char)
(3,strlen(password)
(4,passwordLen = strlen(password)
(5,passwordLen > 0)
(6,password)
(7,passwordLen)
(8,"Unable to login.")
(9,domain)
(10,"Domain")
(11,0)
(12,domain)
(13,fgets(password, 100, stdin)
(14,LOGON32_PROVIDER_DEFAULT)
(15,CloseHandle(hUser)
(16,printLine("Unable to login.")
(17,"User logged in successfully.")
(18,1)
(19,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(20,password)
(21,username)
(22,)
(23,printLine("fgets()
(24,)
(25,printLine("fgets()
(26,&hUser)
(27,password[100] = "")
(28,NULL)
(29,)
(30,"fgets()
(31,passwordLen > 0)
(32,if (passwordLen > 0)
(33,passwordLen)
(34,"User")
(35,password[0] = \\\'\\\\0\\\')
(36,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(37,password[0])
(38,0)
(39,strlen(password)
(40,if (passwordLen > 0)
(41,)
(42,100)
(43,username)
(44,printLine("User logged in successfully.")
(45,password[100] = "")
(46,globalReturnsTrueOrFalse()
(47,\\\'\\\\0\\\')
(48,passwordLen)
(49,)
(50,passwordLen-1)
(51,passwordLen)
(52,password)
(53,\\\'\\\\0\\\')
(54,password)
(55,fgets(password, 100, stdin)
(56,sizeof(char)
(57,"Domain")
(58,)
(59,LOGON32_PROVIDER_DEFAULT)
(60,passwordLen = strlen(password)
(61,username)
(62,passwordLen)
(63,passwordLen = 0)
(64,passwordLen)
(65,0)
(66,)
(67,password)
(68,)
(69,password[0])
(70,username)
(71,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(72,passwordLen)
(73,1)
(74,strlen(password)
(75,100)
(76,)
(77,password[passwordLen-1] = \\\'\\\\0\\\')
(78,password[0] = \\\'\\\\0\\\')
(79,)
(80,password)
(81,"fgets()
(82,password)
(83,password)
(84,\\\'\\\\0\\\')
(85,username)
(86,stdin)
(87,passwordLen-1)
(88,password[passwordLen-1])
(89,)
(90,printLine("User logged in successfully.")
(91,"User logged in successfully.")
(92,printLine("Unable to login.")
(93,* domain = "Domain")
(94,"Unable to login.")
(95,domain)
(96,username)
(97,0)
(98,0)
(99,passwordLen = 0)
(100,password)
(101,password)
(102,password[passwordLen-1])
(103,"User")
(104,password)
(105,hUser)
(106,char)
(107,passwordLen)
(108,0)
(109,LOGON32_LOGON_NETWORK)
(110,passwordLen)
(111,passwordLen)
(112,if(globalReturnsTrueOrFalse()
(113,passwordLen)
(114,fgets(password, 100, stdin)
(115,* username = "User")
(116,domain)
(117,password)
(118,password[passwordLen-1] = \\\'\\\\0\\\')
(119,0)
(120,password)
(121,hUser)
(122,domain)
(123,hUser)
(124,\\\'\\\\0\\\')
(125,password)
(126,* username = "User")
(127,CloseHandle(hUser)
(128,passwordLen = strlen(password)
(129,hUser)
(130,if (fgets(password, 100, stdin)
(131,NULL)
(132,)
(133,"")
(134,if (fgets(password, 100, stdin)
(135,hUser)
(136,&hUser)
(137,stdin)
(138,RET)
(139,)
(140,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(141,password)
(142,fgets(password, 100, stdin)
(143,password)
(144,0)
(145,* domain = "Domain")
(146,"")
(147,passwordLen * sizeof(char)
(148,hUser)
(149,LOGON32_LOGON_NETWORK)
(150,passwordLen)
(151,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
