-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_06_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,132
-----computeFrom-----
22,23
22,24
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_06_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_06_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_06_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(69,32,0)
(48,17,0)
(52,47,0)
(27,43,0)
(23,48,0)
(17,63,0)
(41,47,0)
(60,40,0)
(14,43,0)
(56,28,0)
(48,8,0)
(29,61,0)
(71,17,0)
(34,70,0)
(55,43,0)
(0,22,0)
(12,21,0)
(37,47,0)
(69,10,0)
(43,55,0)
(2,22,0)
(12,75,0)
(44,73,0)
(32,61,0)
(73,52,0)
(12,66,0)
(65,55,0)
(75,53,0)
(64,12,0)
(61,73,0)
(57,63,0)
(58,53,0)
(50,52,0)
(63,52,0)
(54,27,0)
(4,74,0)
(66,52,0)
(6,36,0)
(49,40,0)
(26,36,0)
(0,17,0)
(30,36,0)
(55,65,0)
(20,4,0)
(35,53,0)
(25,10,0)
(31,7,0)
(52,36,0)
(61,67,0)
(43,27,0)
(53,75,0)
(69,52,0)
(63,17,0)
(70,27,0)
(66,12,0)
(47,36,0)
(30,52,0)
(33,65,0)
(18,69,0)
(10,13,0)
(38,28,0)
(62,65,0)
(32,69,0)
(16,32,0)
(42,21,0)
(39,66,0)
(3,32,0)
(15,52,0)
(24,67,0)
(22,0,0)
(75,11,0)
(72,30,0)
(27,70,0)
(21,12,0)
(66,17,0)
(11,75,0)
(53,17,0)
(8,74,0)
(1,48,0)
(46,66,0)
(17,40,0)
(70,61,0)
(27,52,0)
(9,8,0)
(75,12,0)
(59,0,0)
(40,51,0)
(68,36,0)
(73,61,0)
(48,52,0)
(65,61,0)
(5,70,0)
(19,0,0)
(66,52,1)
(29,21,1)
(33,62,1)
(9,48,1)
(69,32,1)
(39,46,1)
(21,12,1)
(16,18,1)
(44,29,1)
(27,52,1)
(57,71,1)
(32,3,1)
(21,42,1)
(72,8,1)
(50,47,1)
(12,64,1)
(72,10,1)
(63,52,1)
(17,63,1)
(48,52,1)
(69,52,1)
(30,52,1)
(53,17,1)
(0,19,1)
(4,20,1)
(0,17,1)
(30,72,1)
(23,4,1)
(46,22,1)
(65,33,1)
(54,65,1)
(27,70,1)
(3,16,1)
(45,30,1)
(56,38,1)
(66,39,1)
(25,69,1)
(10,25,1)
(64,75,1)
(42,12,1)
(38,52,1)
(20,21,1)
(73,44,1)
(22,2,1)
(59,17,1)
(53,58,1)
(52,15,1)
(2,0,1)
(48,1,1)
(62,61,1)
(55,43,1)
(43,14,1)
(72,22,1)
(75,11,1)
(1,23,1)
(41,37,1)
(14,27,1)
(12,66,1)
(8,9,1)
(28,56,1)
(34,54,1)
(5,34,1)
(19,59,1)
(32,61,1)
(63,57,1)
(47,41,1)
(61,73,1)
(18,55,1)
(35,66,1)
(43,27,1)
(55,65,1)
(66,17,1)
(71,28,1)
(70,61,1)
(65,61,1)
(12,75,1)
(48,17,1)
(52,47,1)
(22,0,1)
(70,5,1)
(75,53,1)
(58,35,1)
(72,28,1)
(15,50,1)
(72,55,1)
(73,52,1)
(22,0,2)
(12,22,2)
(48,17,2)
(69,32,2)
(54,65,2)
(23,21,2)
(4,21,2)
(73,52,2)
(2,28,2)
(65,21,2)
(75,11,2)
(52,47,2)
(12,66,2)
(71,28,2)
(17,28,2)
(18,55,2)
(48,52,2)
(66,52,2)
(22,28,2)
(32,55,2)
(9,21,2)
(5,65,2)
(69,52,2)
(53,22,2)
(55,21,2)
(63,28,2)
(75,22,2)
(12,75,2)
(43,65,2)
(14,65,2)
(1,21,2)
(39,22,2)
(61,73,2)
(19,28,2)
(48,21,2)
(8,21,2)
(0,17,2)
(16,55,2)
(20,21,2)
(27,65,2)
(70,65,2)
(17,63,2)
(43,27,2)
(58,22,2)
(30,52,2)
(0,28,2)
(57,28,2)
(63,52,2)
(59,28,2)
(44,21,2)
(66,22,2)
(21,22,2)
(27,70,2)
(42,22,2)
(66,17,2)
(25,55,2)
(35,22,2)
(64,22,2)
(27,52,2)
(73,21,2)
(3,55,2)
(61,21,2)
(69,55,2)
(55,43,2)
(70,61,2)
(65,61,2)
(53,17,2)
(34,65,2)
(46,22,2)
(21,12,2)
(75,53,2)
(62,21,2)
(10,55,2)
(55,65,2)
(29,21,2)
(32,61,2)
(33,21,2)
-----------------------------------
(0,250-dataLen)
(1,dataLen)
(2,1)
(3,1)
(4,printLine("fgets()
(5,1)
(6,data)
(7,)
(8,data[dataLen] = \\\'\\\\0\\\')
(9,\\\'\\\\0\\\')
(10,data[dataLen-1] = \\\'\\\\0\\\')
(11,int)
(12,fgets(data+dataLen, (int)
(13,)
(14,\\\'\\\\n\\\')
(15,dataBuffer)
(16,dataLen)
(17,dataLen = strlen(data)
(18,data)
(19,dataLen)
(20,"fgets()
(21,fgets(data+dataLen, (int)
(22,250-dataLen > 1)
(23,data)
(24,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(25,\\\'\\\\0\\\')
(26,dataBuffer)
(27,data[dataLen-1])
(28,STATIC_CONST_FIVE==5)
(29,dataLen)
(30,PUTENV(data)
(31,if (fgets(data+dataLen, (int)
(32,dataLen-1)
(33,0)
(34,dataLen)
(35,250)
(36,)
(37,dataBuffer)
(38,STATIC_CONST_FIVE)
(39,dataLen)
(40,)
(41,"PATH=")
(42,NULL)
(43,data[dataLen-1] == \\\'\\\\n\\\')
(44,data)
(45,RET)
(46,data)
(47,dataBuffer[250] = "PATH=")
(48,data[dataLen])
(49,dataLen)
(50,data)
(51,)
(52,data = dataBuffer)
(53,250-dataLen)
(54,data)
(55,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(56,5)
(57,data)
(58,dataLen)
(59,250)
(60,if (250-dataLen > 1)
(61,dataLen = strlen(data)
(62,dataLen)
(63,strlen(data)
(64,stdin)
(65,dataLen > 0)
(66,data+dataLen)
(67,)
(68,if(STATIC_CONST_FIVE==5)
(69,data[dataLen-1])
(70,dataLen-1)
(71,dataLen)
(72,data)
(73,strlen(data)
(74,)
(75,(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
