-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_03_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(5==5)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,123,125
-----computeFrom-----
22,23
22,24
28,29
28,30
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_03_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_03_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_03_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
5==5
5
5
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(36,2,0)
(16,8,0)
(43,60,0)
(23,5,0)
(55,19,0)
(61,27,0)
(7,52,0)
(34,16,0)
(44,16,0)
(11,17,0)
(35,56,0)
(32,60,0)
(27,56,0)
(46,49,0)
(6,8,0)
(33,7,0)
(47,50,0)
(37,16,0)
(54,34,0)
(12,19,0)
(17,52,0)
(10,2,0)
(25,23,0)
(9,40,0)
(34,51,0)
(59,5,0)
(13,37,0)
(30,44,0)
(29,22,0)
(51,40,0)
(56,16,0)
(51,34,0)
(37,7,0)
(37,27,0)
(41,15,0)
(29,45,0)
(49,26,0)
(34,27,0)
(20,45,0)
(3,2,0)
(18,8,0)
(48,51,0)
(14,16,0)
(38,49,0)
(44,8,0)
(63,10,0)
(57,8,0)
(2,10,0)
(22,29,0)
(50,23,0)
(27,49,0)
(32,23,0)
(62,1,0)
(58,32,0)
(2,27,0)
(42,1,0)
(4,16,0)
(28,37,0)
(15,8,0)
(51,29,0)
(16,15,0)
(40,51,0)
(56,27,0)
(29,51,0)
(31,45,0)
(39,34,0)
(45,29,0)
(23,50,0)
(0,49,0)
(24,50,0)
(45,27,0)
(21,15,0)
(19,23,0)
(51,23,0)
(40,51,1)
(7,33,1)
(34,39,1)
(10,2,1)
(45,27,1)
(51,48,1)
(56,16,1)
(41,21,1)
(14,15,1)
(34,16,1)
(30,10,1)
(34,27,1)
(42,62,1)
(20,34,1)
(9,51,1)
(37,13,1)
(27,56,1)
(25,10,1)
(29,45,1)
(16,4,1)
(32,23,1)
(51,29,1)
(37,27,1)
(13,28,1)
(10,63,1)
(56,35,1)
(47,25,1)
(36,27,1)
(33,37,1)
(11,40,1)
(55,12,1)
(30,19,1)
(37,16,1)
(61,1,1)
(24,47,1)
(58,7,1)
(44,30,1)
(63,2,1)
(50,24,1)
(32,58,1)
(30,32,1)
(16,15,1)
(31,20,1)
(51,23,1)
(45,31,1)
(2,3,1)
(51,34,1)
(2,27,1)
(58,40,1)
(53,44,1)
(15,41,1)
(23,50,1)
(19,23,1)
(19,55,1)
(17,11,1)
(35,61,1)
(39,54,1)
(30,1,1)
(3,36,1)
(62,16,1)
(4,14,1)
(28,17,1)
(54,19,1)
(44,16,1)
(12,23,1)
(48,29,1)
(29,22,1)
(1,42,1)
(40,9,1)
(25,10,2)
(35,1,2)
(29,45,2)
(51,23,2)
(29,22,2)
(24,10,2)
(9,19,2)
(23,50,2)
(56,16,2)
(54,19,2)
(29,19,2)
(2,1,2)
(40,51,2)
(40,19,2)
(37,40,2)
(23,10,2)
(19,10,2)
(51,34,2)
(27,1,2)
(10,2,2)
(20,19,2)
(16,15,2)
(32,19,2)
(27,56,2)
(47,10,2)
(28,40,2)
(19,23,2)
(17,40,2)
(32,23,2)
(37,16,2)
(2,27,2)
(45,27,2)
(3,1,2)
(34,16,2)
(11,40,2)
(33,40,2)
(34,27,2)
(51,19,2)
(63,1,2)
(10,1,2)
(44,16,2)
(51,29,2)
(50,10,2)
(56,1,2)
(13,40,2)
(34,19,2)
(36,1,2)
(61,1,2)
(45,19,2)
(12,10,2)
(37,27,2)
(55,10,2)
(58,19,2)
(31,19,2)
(39,19,2)
(48,19,2)
(7,40,2)
-----------------------------------
(0,dataLen)
(1,5==5)
(2,250-dataLen)
(3,dataLen)
(4,dataBuffer)
(5,)
(6,if(5==5)
(7,data[dataLen] = \\\'\\\\0\\\')
(8,)
(9,NULL)
(10,250-dataLen > 1)
(11,"fgets()
(12,pFile)
(13,dataLen)
(14,data)
(15,dataBuffer[250] = "PATH=")
(16,data = dataBuffer)
(17,printLine("fgets()
(18,dataBuffer)
(19,pFile != NULL)
(20,250)
(21,dataBuffer)
(22,int)
(23,pFile = fopen(FILENAME, "r")
(24,"r")
(25,pFile)
(26,)
(27,dataLen = strlen(data)
(28,data)
(29,(int)
(30,data)
(31,dataLen)
(32,fclose(pFile)
(33,\\\'\\\\0\\\')
(34,data+dataLen)
(35,data)
(36,250)
(37,data[dataLen])
(38,pFile)
(39,dataLen)
(40,fgets(data+dataLen, (int)
(41,"PATH=")
(42,5)
(43,if (fgets(data+dataLen, (int)
(44,PUTENV(data)
(45,250-dataLen)
(46,if (250-dataLen > 1)
(47,FILENAME)
(48,pFile)
(49,)
(50,fopen(FILENAME, "r")
(51,fgets(data+dataLen, (int)
(52,)
(53,RET)
(54,data)
(55,NULL)
(56,strlen(data)
(57,data)
(58,pFile)
(59,if (pFile != NULL)
(60,)
(61,dataLen)
(62,5)
(63,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
