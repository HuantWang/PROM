-----label-----
1
-----code-----
void CWE256_Plaintext_Storage_of_Password__w32_wchar_t_15_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        FILE *pFile;
        pFile = fopen("passwords.txt", "r");
        if (pFile != NULL)
        {
            /* POTENTIAL FLAW: Read the password from a file */
            if (fgetws(data, 100, pFile) == NULL)
            {
                data[0] = L'\0';
            }
            fclose(pFile);
        }
        else
        {
            data[0] = L'\0';
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        HANDLE pHandle;
        wchar_t * username = L"User";
        wchar_t * domain = L"Domain";
        /* POTENTIAL FLAW: Attempt to login user with password from the source */
        if (LogonUserW(
                    username,
                    domain,
                    data,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &pHandle) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(pHandle);
        }
        else
        {
            printLine("Unable to login.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
29,32
29,33
29,34
29,35
30,31
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
49,50
49,51
49,52
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
58,60
58,61
58,62
59,60
61,62
64,65
66,67
68,69
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
85,87
86,87
92,93
93,94
93,95
94,95
98,99
98,100
100,101
100,102
100,103
100,104
100,105
100,106
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
113,114
113,115
113,116
116,117
118,119
119,120
119,121
121,122
121,123
121,124
124,125
126,127
126,128
126,129
127,128
127,129
128,129
128,130
128,131
128,132
128,133
128,134
128,135
129,130
131,132
133,134
135,136
137,138
139,140
141,142
142,143
145,146
145,147
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
155,156
157,158
158,159
159,160
159,161
160,161
165,166
166,167
166,168
167,168
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,31,36,38,39,43,46,47,48,52,54,60,62,63,65,67,73,74,75,79,81,87,88,89,90,91,95,96,97,99,102,107,109,112,114,115,117,120,122,123,125,130,132,134,136,138,140,143,144,149,150,154,156,161,162,163,164,168,169,170
-----computeFrom-----
22,23
22,24
41,42
41,43
50,51
50,52
57,58
57,59
70,71
70,72
84,85
84,86
127,128
127,129
-----guardedBy-----
54,67
52,81
62,73
143,156
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE256_Plaintext_Storage_of_Password__w32_wchar_t_15_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    switch(6)    {    case 6:    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* POTENTIAL FLAW: Attempt to login user with password from the source */        if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE256_Plaintext_Storage_of_Password__w32_wchar_t_15_bad()
CWE256_Plaintext_Storage_of_Password__w32_wchar_t_15_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    switch(6)    {    case 6:    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* POTENTIAL FLAW: Attempt to login user with password from the source */        if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }
pFile != NULL
pFile
pFile
NULL
NULL
{            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }
if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }
fgetws(data, 100, pFile) == NULL
fgetws(data, 100, pFile)
fgetws
fgetws
data
data
100
pFile
pFile
NULL
NULL
{                data[0] = L'\0';            }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{            data[0] = L'\0';        }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* POTENTIAL FLAW: Attempt to login user with password from the source */        if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* POTENTIAL FLAW: Attempt to login user with password from the source */        if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        /* POTENTIAL FLAW: Attempt to login user with password from the source */        if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }    }
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }
LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0
LogonUserW(                    username,                    domain,                    data,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
data
data
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{            printLine("User logged in successfully.");            CloseHandle(pHandle);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(38,23,0)
(56,53,0)
(14,27,0)
(22,8,0)
(29,33,0)
(17,45,0)
(39,8,0)
(34,25,0)
(38,68,0)
(31,41,0)
(58,67,0)
(68,38,0)
(45,36,0)
(3,68,0)
(26,16,0)
(60,25,0)
(37,36,0)
(16,38,0)
(50,14,0)
(4,54,0)
(15,30,0)
(33,36,0)
(21,25,0)
(49,36,0)
(8,67,0)
(41,21,0)
(51,23,0)
(71,36,0)
(10,27,0)
(23,20,0)
(6,38,0)
(55,4,0)
(57,58,0)
(21,45,0)
(62,41,0)
(65,67,0)
(32,23,0)
(44,8,0)
(64,67,0)
(42,20,0)
(28,67,0)
(27,14,0)
(46,69,0)
(40,48,0)
(11,15,0)
(19,20,0)
(66,38,0)
(38,16,0)
(69,13,0)
(52,38,0)
(7,36,0)
(48,30,0)
(5,13,0)
(14,21,0)
(43,45,0)
(61,67,0)
(25,21,0)
(59,20,0)
(18,8,0)
(35,12,0)
(72,38,0)
(14,23,0)
(0,21,0)
(70,14,0)
(63,38,0)
(24,20,0)
(69,21,0)
(47,14,0)
(34,0,1)
(35,27,1)
(31,62,1)
(22,2,1)
(11,68,1)
(2,71,1)
(55,68,1)
(15,11,1)
(9,23,1)
(57,2,1)
(26,63,1)
(48,40,1)
(58,57,1)
(68,38,1)
(62,21,1)
(61,4,1)
(6,39,1)
(70,47,1)
(68,3,1)
(2,37,1)
(29,9,1)
(4,55,1)
(56,41,1)
(65,58,1)
(1,61,1)
(46,35,1)
(27,10,1)
(47,41,1)
(50,70,1)
(37,56,1)
(3,38,1)
(46,27,1)
(51,32,1)
(37,69,1)
(10,14,1)
(23,51,1)
(33,29,1)
(63,52,1)
(14,21,1)
(66,72,1)
(32,19,1)
(38,23,1)
(72,6,1)
(61,48,1)
(60,34,1)
(27,14,1)
(41,21,1)
(52,66,1)
(1,65,1)
(38,16,1)
(69,21,1)
(41,31,1)
(69,46,1)
(71,33,1)
(39,22,1)
(16,26,1)
(14,23,1)
(14,50,1)
(21,25,1)
(25,60,1)
(40,15,1)
(0,9,1)
(22,2,2)
(37,9,2)
(33,9,2)
(63,2,2)
(70,41,2)
(48,68,2)
(34,9,2)
(47,41,2)
(41,21,2)
(14,23,2)
(56,41,2)
(0,9,2)
(38,16,2)
(69,21,2)
(10,41,2)
(27,41,2)
(6,2,2)
(29,9,2)
(68,38,2)
(21,9,2)
(16,2,2)
(60,9,2)
(3,2,2)
(65,2,2)
(58,2,2)
(15,68,2)
(66,2,2)
(14,21,2)
(39,2,2)
(62,9,2)
(26,2,2)
(38,2,2)
(55,68,2)
(4,68,2)
(21,25,2)
(27,14,2)
(31,9,2)
(69,41,2)
(61,2,2)
(14,41,2)
(11,68,2)
(41,9,2)
(71,9,2)
(50,41,2)
(46,41,2)
(38,23,2)
(72,2,2)
(35,27,2)
(25,9,2)
(68,2,2)
(52,2,2)
(40,68,2)
(57,2,2)
-----------------------------------
(0,pFile)
(1,RET)
(2,7)
(3,0)
(4,printLine("Unable to login.")
(5,if (fgetws(data, 100, pFile)
(6,username)
(7,case 6:)
(8,)
(9,6)
(10,NULL)
(11,"User logged in successfully.")
(12,)
(13,)
(14,fgetws(data, 100, pFile)
(15,printLine("User logged in successfully.")
(16,&pHandle)
(17,if (pFile != NULL)
(18,pHandle)
(19,"")
(20,)
(21,pFile = fopen("passwords.txt", "r")
(22,"User")
(23,data = dataBuffer)
(24,switch(7)
(25,fopen("passwords.txt", "r")
(26,pHandle)
(27,fgetws(data, 100, pFile)
(28,case 7:)
(29,"Benign, fixed string")
(30,)
(31,NULL)
(32,data)
(33,printLine("Benign, fixed string")
(34,"passwords.txt")
(35,\\\'\\\\0\\\')
(36,)
(37,break;)
(38,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    data,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(39,"Domain")
(40,pHandle)
(41,pFile != NULL)
(42,switch(6)
(43,pFile)
(44,if (LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    data,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(45,)
(46,pFile)
(47,data)
(48,CloseHandle(pHandle)
(49,default:)
(50,pFile)
(51,dataBuffer)
(52,LOGON32_LOGON_NETWORK)
(53,)
(54,)
(55,"Unable to login.")
(56,\\\'\\\\0\\\')
(57,"Benign, fixed string")
(58,printLine("Benign, fixed string")
(59,data)
(60,"r")
(61,break;)
(62,pFile)
(63,LOGON32_PROVIDER_DEFAULT)
(64,default:)
(65,break;)
(66,data)
(67,)
(68,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    data,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(69,fclose(pFile)
(70,100)
(71,break;)
(72,domain)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
