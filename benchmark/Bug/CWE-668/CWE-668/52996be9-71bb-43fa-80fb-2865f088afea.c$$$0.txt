-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_67_bad()
{
    char * data;
    CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType myStruct;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    myStruct.structFirst = data;
    CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
129,131
130,131
133,134
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,26,30,32,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,131,132,134,138,140
-----computeFrom-----
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
128,129
128,130
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_67_bad(){    char * data;    CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType myStruct;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myStruct.structFirst = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_67_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_67_bad
{    char * data;    CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType myStruct;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myStruct.structFirst = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct);}
char * data;
char * data;
char
* data
*
data
CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType myStruct;
CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType myStruct;
CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType
CWE427_Uncontrolled_Search_Path_Element__char_console_67_structType
myStruct
myStruct
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
myStruct.structFirst = data;
myStruct.structFirst = data
myStruct.structFirst
myStruct
myStruct
structFirst
data
data
CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct);
CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct)
CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink
myStruct
myStruct
-----joern-----
(39,25,0)
(74,69,0)
(50,38,0)
(62,73,0)
(6,14,0)
(73,55,0)
(35,38,0)
(51,9,0)
(36,58,0)
(69,35,0)
(53,70,0)
(25,70,0)
(9,51,0)
(14,38,0)
(71,38,0)
(37,14,0)
(44,69,0)
(76,34,0)
(57,53,0)
(19,45,0)
(64,45,0)
(36,37,0)
(32,71,0)
(70,25,0)
(60,16,0)
(58,36,0)
(38,68,0)
(73,38,0)
(24,72,0)
(23,66,0)
(20,45,0)
(70,53,0)
(72,24,0)
(26,58,0)
(9,41,0)
(43,41,0)
(53,57,0)
(67,20,0)
(12,61,0)
(1,29,0)
(66,14,0)
(49,48,0)
(61,45,0)
(53,34,0)
(37,36,0)
(4,38,0)
(75,10,0)
(24,61,0)
(13,37,0)
(8,72,0)
(40,34,0)
(14,66,0)
(71,24,0)
(54,62,0)
(56,75,0)
(10,75,0)
(30,16,0)
(21,75,0)
(28,71,0)
(34,24,0)
(15,73,0)
(68,45,0)
(38,45,0)
(31,68,0)
(0,24,0)
(5,9,0)
(66,9,0)
(73,62,0)
(35,45,0)
(55,52,0)
(33,30,0)
(51,38,0)
(72,38,0)
(18,45,0)
(70,71,0)
(2,35,0)
(16,65,0)
(42,66,0)
(47,58,0)
(11,10,0)
(27,51,0)
(71,70,0)
(30,24,0)
(75,24,0)
(48,65,0)
(58,9,0)
(14,37,0)
(22,61,0)
(62,9,0)
(34,53,0)
(59,30,0)
(46,55,0)
(30,38,0)
(7,62,0)
(17,68,0)
(3,70,0)
(62,7,1)
(31,17,1)
(38,68,1)
(30,38,1)
(26,9,1)
(2,69,1)
(69,44,1)
(13,14,1)
(58,47,1)
(33,48,1)
(71,24,1)
(20,67,1)
(66,9,1)
(39,70,1)
(60,30,1)
(46,73,1)
(40,71,1)
(34,76,1)
(49,25,1)
(63,20,1)
(37,14,1)
(3,53,1)
(68,31,1)
(55,46,1)
(21,24,1)
(58,9,1)
(47,26,1)
(4,68,1)
(50,4,1)
(8,0,1)
(6,58,1)
(10,75,1)
(74,55,1)
(71,28,1)
(51,38,1)
(37,13,1)
(48,49,1)
(9,51,1)
(66,42,1)
(54,15,1)
(42,23,1)
(70,53,1)
(70,71,1)
(15,36,1)
(25,70,1)
(67,35,1)
(74,16,1)
(27,5,1)
(5,25,1)
(30,59,1)
(76,40,1)
(0,38,1)
(30,24,1)
(7,54,1)
(53,34,1)
(59,33,1)
(72,8,1)
(74,10,1)
(75,24,1)
(75,56,1)
(28,32,1)
(24,72,1)
(73,62,1)
(56,21,1)
(35,38,1)
(11,75,1)
(25,39,1)
(14,66,1)
(14,38,1)
(51,27,1)
(16,60,1)
(62,9,1)
(73,38,1)
(10,11,1)
(72,38,1)
(35,2,1)
(23,6,1)
(71,38,1)
(32,10,1)
(53,57,1)
(34,24,1)
(36,37,1)
(74,36,1)
(38,50,1)
(70,3,1)
(44,74,1)
(36,58,1)
(13,58,2)
(6,58,2)
(25,10,2)
(71,10,2)
(35,38,2)
(46,36,2)
(7,36,2)
(14,66,2)
(30,38,2)
(38,68,2)
(75,24,2)
(37,14,2)
(36,58,2)
(70,10,2)
(28,10,2)
(14,38,2)
(72,38,2)
(25,70,2)
(36,37,2)
(70,53,2)
(26,25,2)
(24,72,2)
(73,36,2)
(71,24,2)
(30,25,2)
(34,24,2)
(53,34,2)
(71,38,2)
(62,36,2)
(66,9,2)
(47,25,2)
(9,51,2)
(58,9,2)
(62,9,2)
(14,58,2)
(53,10,2)
(55,36,2)
(16,25,2)
(58,25,2)
(73,38,2)
(76,10,2)
(73,62,2)
(9,25,2)
(48,25,2)
(36,25,2)
(60,25,2)
(27,25,2)
(5,25,2)
(33,25,2)
(10,75,2)
(23,58,2)
(39,10,2)
(3,10,2)
(34,10,2)
(49,25,2)
(53,57,2)
(66,58,2)
(54,36,2)
(40,10,2)
(42,58,2)
(51,25,2)
(32,10,2)
(59,25,2)
(15,36,2)
(30,24,2)
(70,71,2)
(51,38,2)
(37,58,2)
-----------------------------------
(0,dataLen)
(1,if (fgets(data+dataLen, (int)
(2,data)
(3,stdin)
(4,data)
(5,dataLen)
(6,data)
(7,1)
(8,data)
(9,dataLen = strlen(data)
(10,250-dataLen > 1)
(11,1)
(12,dataLen)
(13,\\\'\\\\n\\\')
(14,data[dataLen-1])
(15,data)
(16,data[dataLen] = \\\'\\\\0\\\')
(17,dataBuffer)
(18,myStruct)
(19,data)
(20,CWE427_Uncontrolled_Search_Path_Element__char_console_67b_badSink(myStruct)
(21,250)
(22,if (250-dataLen > 1)
(23,dataLen)
(24,dataLen = strlen(data)
(25,fgets(data+dataLen, (int)
(26,dataLen)
(27,data)
(28,dataLen)
(29,)
(30,data[dataLen])
(31,"PATH=")
(32,data)
(33,data)
(34,250-dataLen)
(35,myStruct.structFirst = data)
(36,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,data[dataLen-1] == \\\'\\\\n\\\')
(38,data = dataBuffer)
(39,NULL)
(40,250)
(41,)
(42,1)
(43,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(44,structFirst)
(45,)
(46,\\\'\\\\0\\\')
(47,0)
(48,printLine("fgets()
(49,"fgets()
(50,dataBuffer)
(51,strlen(data)
(52,)
(53,(int)
(54,dataLen)
(55,data[dataLen-1] = \\\'\\\\0\\\')
(56,dataLen)
(57,int)
(58,dataLen > 0)
(59,dataLen)
(60,\\\'\\\\0\\\')
(61,)
(62,dataLen-1)
(63,RET)
(64,dataBuffer)
(65,)
(66,dataLen-1)
(67,myStruct)
(68,dataBuffer[250] = "PATH=")
(69,myStruct.structFirst)
(70,fgets(data+dataLen, (int)
(71,data+dataLen)
(72,strlen(data)
(73,data[dataLen-1])
(74,myStruct)
(75,250-dataLen)
(76,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
