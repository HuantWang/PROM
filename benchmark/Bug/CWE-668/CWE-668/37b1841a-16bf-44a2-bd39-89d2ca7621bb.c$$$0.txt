-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
37,38
37,39
38,39
38,40
40,41
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
62,64
63,64
63,65
63,66
63,67
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
75,76
76,77
76,78
78,79
80,81
82,83
84,85
84,86
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,39,41,42,47,50,52,53,57,59,65,68,70,73,74,77,79,81,83,88,89,94,96,97,101,103,106
-----computeFrom-----
37,38
37,39
38,39
38,40
45,46
45,47
55,56
55,57
62,63
62,64
66,67
66,68
76,77
76,78
91,92
91,93
-----guardedBy-----
41,96
59,83
57,103
68,94
79,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
badStatic
badStatic
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(8,33,0)
(42,11,0)
(52,36,0)
(24,17,0)
(23,33,0)
(20,26,0)
(26,0,0)
(12,7,0)
(20,46,0)
(41,16,0)
(7,36,0)
(14,44,0)
(5,40,0)
(15,46,0)
(36,13,0)
(28,35,0)
(35,46,0)
(47,18,0)
(40,21,0)
(51,43,0)
(34,38,0)
(7,43,0)
(26,20,0)
(22,17,0)
(3,20,0)
(18,36,0)
(16,0,0)
(40,33,0)
(32,20,0)
(13,36,0)
(20,3,0)
(16,40,0)
(45,33,0)
(11,54,0)
(21,40,0)
(50,54,0)
(33,49,0)
(17,22,0)
(2,22,0)
(9,16,0)
(53,3,0)
(36,38,0)
(37,26,0)
(16,48,0)
(48,1,0)
(22,40,0)
(30,11,0)
(46,15,0)
(27,35,0)
(46,20,0)
(21,0,0)
(46,35,0)
(10,48,0)
(35,40,0)
(6,13,0)
(29,13,0)
(26,40,0)
(44,1,0)
(20,36,0)
(31,26,0)
(39,22,0)
(19,18,0)
(11,0,0)
(4,21,0)
(30,25,1)
(53,20,1)
(30,18,1)
(46,15,1)
(7,36,1)
(20,36,1)
(26,40,1)
(12,3,1)
(20,32,1)
(30,7,1)
(16,9,1)
(22,39,1)
(26,0,1)
(3,53,1)
(12,48,1)
(41,44,1)
(17,24,1)
(27,28,1)
(4,5,1)
(10,16,1)
(46,35,1)
(32,46,1)
(13,6,1)
(6,29,1)
(47,36,1)
(39,2,1)
(37,18,1)
(22,40,1)
(52,17,1)
(5,25,1)
(16,0,1)
(20,46,1)
(16,40,1)
(3,20,1)
(11,30,1)
(9,41,1)
(18,19,1)
(11,0,1)
(29,52,1)
(30,17,1)
(48,10,1)
(21,0,1)
(42,11,1)
(19,47,1)
(18,36,1)
(40,21,1)
(44,14,1)
(36,13,1)
(24,22,1)
(26,31,1)
(35,27,1)
(2,40,1)
(17,22,1)
(21,4,1)
(28,26,1)
(31,37,1)
(20,26,1)
(14,3,1)
(7,12,1)
(35,40,1)
(20,26,2)
(17,25,2)
(27,18,2)
(16,0,2)
(7,18,2)
(26,18,2)
(20,46,2)
(11,0,2)
(46,15,2)
(13,17,2)
(52,17,2)
(26,40,2)
(36,17,2)
(16,40,2)
(12,18,2)
(46,18,2)
(17,22,2)
(3,18,2)
(9,3,2)
(37,18,2)
(16,3,2)
(36,13,2)
(41,3,2)
(42,11,2)
(7,36,2)
(18,36,2)
(10,3,2)
(20,36,2)
(3,20,2)
(4,25,2)
(47,17,2)
(19,17,2)
(40,25,2)
(39,25,2)
(44,3,2)
(21,25,2)
(53,18,2)
(40,21,2)
(29,17,2)
(6,17,2)
(18,17,2)
(46,35,2)
(26,0,2)
(24,25,2)
(20,18,2)
(21,0,2)
(22,40,2)
(35,40,2)
(31,18,2)
(28,18,2)
(22,25,2)
(14,3,2)
(2,25,2)
(5,25,2)
(35,18,2)
(32,18,2)
(48,3,2)
-----------------------------------
(0,char * data)
(1,)
(2,250)
(3,fgets(data+dataLen, (int)
(4,data)
(5,dataLen)
(6,"r")
(7,fclose(pFile)
(8,if (250-dataLen > 1)
(9,dataLen)
(10,\\\'\\\\0\\\')
(11,return data;)
(12,pFile)
(13,fopen(FILENAME, "r")
(14,"fgets()
(15,int)
(16,data[dataLen])
(17,250-dataLen > 1)
(18,pFile != NULL)
(19,NULL)
(20,fgets(data+dataLen, (int)
(21,strlen(data)
(22,250-dataLen)
(23,pFile)
(24,1)
(25,badStatic)
(26,data+dataLen)
(27,dataLen)
(28,250)
(29,FILENAME)
(30,data)
(31,dataLen)
(32,pFile)
(33,)
(34,if (pFile != NULL)
(35,250-dataLen)
(36,pFile = fopen(FILENAME, "r")
(37,data)
(38,)
(39,dataLen)
(40,dataLen = strlen(data)
(41,data)
(42,RET)
(43,)
(44,printLine("fgets()
(45,dataLen)
(46,(int)
(47,pFile)
(48,data[dataLen] = \\\'\\\\0\\\')
(49,)
(50,if(badStatic)
(51,if (fgets(data+dataLen, (int)
(52,pFile)
(53,NULL)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
