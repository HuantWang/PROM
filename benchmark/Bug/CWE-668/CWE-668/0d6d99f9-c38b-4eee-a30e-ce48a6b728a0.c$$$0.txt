-----label-----
1
-----code-----
void CWE535_Info_Exposure_Shell_Error__w32_char_03_bad()
{
    if(5==5)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to stderr */
            fprintf(stderr, "User attempted access with password: %s\n", password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
38,39
38,40
38,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
51,52
51,53
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
101,103
101,104
102,103
102,104
103,104
103,105
103,106
103,107
103,108
103,109
103,110
104,105
106,107
108,109
110,111
112,113
114,115
116,117
117,118
120,121
120,122
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
132,133
133,134
134,135
134,136
135,136
138,139
139,140
139,141
139,142
139,143
140,141
142,143
145,146
-----nextToken-----
2,4,8,9,14,16,18,20,24,26,28,32,34,37,39,40,42,45,47,48,50,55,57,58,60,62,67,68,73,74,75,79,82,84,88,89,95,98,99,100,105,107,109,111,113,115,118,119,124,125,129,131,136,137,141,143,144,146
-----computeFrom-----
7,8
7,9
52,53
52,54
70,71
70,72
77,78
77,79
86,87
86,88
92,93
92,94
96,97
96,98
102,103
102,104
-----guardedBy-----
57,73
88,98
118,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
void CWE535_Info_Exposure_Shell_Error__w32_char_03_bad(){    if(5==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }}
void
CWE535_Info_Exposure_Shell_Error__w32_char_03_bad()
CWE535_Info_Exposure_Shell_Error__w32_char_03_bad
{    if(5==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }}
if(5==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }
5==5
5
5
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(stderr, "User attempted access with password: %s\n", password);
fprintf(stderr, "User attempted access with password: %s\n", password)
fprintf
fprintf
stderr
stderr
"User attempted access with password: %s\n"
password
password
-----joern-----
(44,48,0)
(67,3,0)
(75,76,0)
(56,65,0)
(16,73,0)
(1,23,0)
(52,18,0)
(37,3,0)
(47,42,0)
(4,42,0)
(18,42,0)
(62,13,0)
(54,70,0)
(72,4,0)
(19,5,0)
(31,76,0)
(27,77,0)
(38,67,0)
(30,22,0)
(48,42,0)
(5,67,0)
(17,4,0)
(42,14,0)
(40,46,0)
(28,55,0)
(3,42,0)
(10,17,0)
(50,76,0)
(0,8,0)
(36,18,0)
(25,64,0)
(2,76,0)
(13,46,0)
(35,63,0)
(4,8,0)
(45,41,0)
(71,13,0)
(63,22,0)
(76,2,0)
(77,67,0)
(46,22,0)
(34,67,0)
(43,3,0)
(55,54,0)
(29,60,0)
(11,67,0)
(9,67,0)
(67,5,0)
(21,42,0)
(7,63,0)
(12,57,0)
(51,67,0)
(61,60,0)
(8,22,0)
(66,42,0)
(73,65,0)
(20,42,0)
(8,4,0)
(33,22,0)
(58,42,0)
(55,22,0)
(57,70,0)
(67,77,0)
(41,15,0)
(63,42,0)
(24,63,0)
(67,22,0)
(13,4,0)
(74,56,0)
(39,55,0)
(22,42,0)
(49,54,0)
(67,48,0)
(69,48,0)
(26,17,0)
(46,23,0)
(76,22,0)
(23,78,0)
(53,2,0)
(68,42,0)
(6,42,0)
(32,42,0)
(46,13,0)
(18,36,1)
(11,34,1)
(39,28,1)
(12,2,1)
(34,17,1)
(72,54,1)
(7,56,1)
(67,48,1)
(46,22,1)
(53,76,1)
(52,22,1)
(72,2,1)
(22,33,1)
(63,22,1)
(59,63,1)
(13,4,1)
(1,46,1)
(48,44,1)
(3,43,1)
(17,4,1)
(46,13,1)
(17,26,1)
(49,55,1)
(50,31,1)
(51,38,1)
(4,8,1)
(37,48,1)
(13,62,1)
(2,76,1)
(75,50,1)
(77,67,1)
(24,7,1)
(74,73,1)
(7,41,1)
(67,3,1)
(55,22,1)
(33,30,1)
(27,67,1)
(59,60,1)
(8,0,1)
(69,18,1)
(67,22,1)
(76,75,1)
(28,57,1)
(34,23,1)
(8,22,1)
(23,1,1)
(16,77,1)
(9,51,1)
(26,10,1)
(2,53,1)
(55,39,1)
(73,16,1)
(10,4,1)
(40,17,1)
(19,9,1)
(30,60,1)
(29,61,1)
(45,77,1)
(35,24,1)
(57,12,1)
(31,3,1)
(43,37,1)
(67,5,1)
(54,49,1)
(76,22,1)
(5,19,1)
(0,72,1)
(63,35,1)
(36,52,1)
(56,74,1)
(71,40,1)
(44,69,1)
(38,11,1)
(41,45,1)
(77,27,1)
(62,71,1)
(60,29,1)
(67,60,2)
(46,17,2)
(77,60,2)
(38,60,2)
(50,60,2)
(30,60,2)
(39,2,2)
(2,60,2)
(57,2,2)
(62,17,2)
(67,22,2)
(51,60,2)
(74,77,2)
(45,77,2)
(4,60,2)
(53,60,2)
(56,77,2)
(8,60,2)
(43,60,2)
(31,60,2)
(19,60,2)
(63,60,2)
(1,17,2)
(35,60,2)
(40,17,2)
(67,48,2)
(5,60,2)
(69,60,2)
(17,4,2)
(48,60,2)
(63,22,2)
(46,13,2)
(72,60,2)
(44,60,2)
(26,60,2)
(76,60,2)
(36,60,2)
(73,77,2)
(52,60,2)
(54,2,2)
(24,60,2)
(27,60,2)
(55,2,2)
(49,2,2)
(41,77,2)
(46,22,2)
(76,22,2)
(16,77,2)
(37,60,2)
(2,76,2)
(55,22,2)
(13,4,2)
(3,60,2)
(9,60,2)
(0,60,2)
(13,17,2)
(17,60,2)
(8,22,2)
(71,17,2)
(4,8,2)
(75,60,2)
(10,60,2)
(18,60,2)
(11,60,2)
(34,60,2)
(7,60,2)
(67,3,2)
(77,67,2)
(33,60,2)
(23,17,2)
(67,5,2)
(22,60,2)
(28,2,2)
(12,2,2)
-----------------------------------
(0,password)
(1,\\\'\\\\0\\\')
(2,fgets(password, 100, stdin)
(3,* domain = "Domain")
(4,passwordLen = strlen(password)
(5,&pHandle)
(6,username)
(7,stderr)
(8,strlen(password)
(9,LOGON32_PROVIDER_DEFAULT)
(10,passwordLen)
(11,domain)
(12,"fgets()
(13,passwordLen-1)
(14,)
(15,)
(16,"User logged in successfully.")
(17,passwordLen > 0)
(18,passwordLen = 0)
(19,pHandle)
(20,domain)
(21,password)
(22,password[100] = "")
(23,password[passwordLen-1] = \\\'\\\\0\\\')
(24,"User attempted access with password: %s\\\\n")
(25,if(5==5)
(26,0)
(27,0)
(28,password)
(29,5)
(30,password)
(31,password)
(32,pHandle)
(33,"")
(34,username)
(35,password)
(36,0)
(37,domain)
(38,password)
(39,0)
(40,password)
(41,printLine("Unable to login.")
(42,)
(43,"Domain")
(44,"User")
(45,"Unable to login.")
(46,password[passwordLen-1])
(47,passwordLen)
(48,* username = "User")
(49,\\\'\\\\0\\\')
(50,100)
(51,LOGON32_LOGON_NETWORK)
(52,passwordLen)
(53,NULL)
(54,password[0] = \\\'\\\\0\\\')
(55,password[0])
(56,CloseHandle(pHandle)
(57,printLine("fgets()
(58,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(59,RET)
(60,5==5)
(61,5)
(62,1)
(63,fprintf(stderr, "User attempted access with password: %s\\\\n", password)
(64,)
(65,)
(66,if (passwordLen > 0)
(67,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(68,if (fgets(password, 100, stdin)
(69,username)
(70,)
(71,passwordLen)
(72,passwordLen)
(73,printLine("User logged in successfully.")
(74,pHandle)
(75,stdin)
(76,fgets(password, 100, stdin)
(77,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(78,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
