-----label-----
1
-----code-----
void CWE256_Plaintext_Storage_of_Password__w32_char_16_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    while(1)
    {
        {
            FILE *pFile;
            pFile = fopen("passwords.txt", "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read the password from a file */
                if (fgets(data, 100, pFile) == NULL)
                {
                    data[0] = '\0';
                }
                fclose(pFile);
            }
            else
            {
                data[0] = '\0';
            }
        }
        break;
    }
    while(1)
    {
        {
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            /* POTENTIAL FLAW: Attempt to login user with password from the source */
            if (LogonUserA(
                        username,
                        domain,
                        data,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
30,31
30,32
30,33
31,32
32,33
32,34
33,34
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
43,44
47,48
47,49
47,50
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
62,63
64,65
66,67
67,68
68,69
68,70
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
83,85
84,85
89,90
89,91
91,92
91,93
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
102,103
102,104
102,105
105,106
107,108
108,109
108,110
110,111
110,112
110,113
113,114
115,116
115,117
115,118
116,117
116,118
117,118
117,119
117,120
117,121
117,122
117,123
117,124
118,119
120,121
122,123
124,125
126,127
128,129
130,131
131,132
134,135
134,136
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
149,150
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,37,41,44,45,46,50,52,58,60,61,63,65,71,72,73,77,79,85,86,87,88,90,96,98,101,103,104,106,109,111,112,114,119,121,123,125,127,129,132,133,138,139,143,145,150,151,152
-----computeFrom-----
22,23
22,24
39,40
39,41
48,49
48,50
55,56
55,57
68,69
68,70
82,83
82,84
116,117
116,118
-----guardedBy-----
52,65
50,79
60,71
132,145
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE256_Plaintext_Storage_of_Password__w32_char_16_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    while(1)    {        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }        }        break;    }    while(1)    {        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }        break;    }}
void
CWE256_Plaintext_Storage_of_Password__w32_char_16_bad()
CWE256_Plaintext_Storage_of_Password__w32_char_16_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    while(1)    {        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }        }        break;    }    while(1)    {        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }        break;    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }        }        break;    }
1
{        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }        }        break;    }
{            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }        }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }            else            {                data[0] = '\0';            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read the password from a file */                if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }                fclose(pFile);            }
if (fgets(data, 100, pFile) == NULL)                {                    data[0] = '\0';                }
fgets(data, 100, pFile) == NULL
fgets(data, 100, pFile)
fgets
fgets
data
data
100
pFile
pFile
NULL
NULL
{                    data[0] = '\0';                }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{                data[0] = '\0';            }
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
while(1)    {        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }        break;    }
1
{        {            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }        break;    }
{            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
data
data
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
break;
-----joern-----
(35,12,0)
(46,39,0)
(6,51,0)
(3,14,0)
(45,14,0)
(73,21,0)
(66,57,0)
(24,14,0)
(38,16,0)
(51,39,0)
(49,21,0)
(21,47,0)
(25,36,0)
(74,59,0)
(62,73,0)
(18,59,0)
(16,34,0)
(52,8,0)
(22,78,0)
(70,48,0)
(75,74,0)
(23,34,0)
(7,12,0)
(5,21,0)
(14,45,0)
(32,13,0)
(19,21,0)
(61,39,0)
(59,45,0)
(59,74,0)
(71,72,0)
(37,73,0)
(12,45,0)
(41,16,0)
(67,25,0)
(51,32,0)
(1,16,0)
(42,16,0)
(50,66,0)
(77,32,0)
(16,1,0)
(58,41,0)
(16,73,0)
(63,16,0)
(8,28,0)
(40,11,0)
(27,11,0)
(48,25,0)
(45,8,0)
(72,68,0)
(65,54,0)
(39,11,0)
(0,76,0)
(15,8,0)
(29,54,0)
(11,54,0)
(43,59,0)
(33,21,0)
(34,21,0)
(26,16,0)
(39,54,0)
(20,28,0)
(53,34,0)
(16,41,0)
(17,54,0)
(10,54,0)
(69,45,0)
(64,48,0)
(60,47,0)
(76,55,0)
(4,59,0)
(2,1,0)
(78,55,0)
(56,68,0)
(16,39,0)
(48,39,0)
(59,39,0)
(31,51,0)
(72,45,0)
(44,16,0)
(16,39,1)
(79,39,1)
(32,77,1)
(58,16,1)
(72,71,1)
(75,59,1)
(26,44,1)
(24,3,1)
(66,50,1)
(76,0,1)
(16,1,1)
(31,6,1)
(71,74,1)
(64,74,1)
(50,41,1)
(77,51,1)
(6,12,1)
(41,16,1)
(40,27,1)
(48,39,1)
(48,70,1)
(71,25,1)
(53,73,1)
(7,45,1)
(4,12,1)
(38,42,1)
(39,61,1)
(0,41,1)
(42,26,1)
(35,7,1)
(16,34,1)
(63,38,1)
(61,46,1)
(59,39,1)
(30,60,1)
(67,48,1)
(2,63,1)
(70,64,1)
(22,76,1)
(51,39,1)
(45,14,1)
(25,67,1)
(12,35,1)
(59,43,1)
(3,69,1)
(78,22,1)
(59,45,1)
(43,18,1)
(11,40,1)
(60,78,1)
(72,45,1)
(23,53,1)
(41,58,1)
(60,66,1)
(9,20,1)
(51,31,1)
(74,59,1)
(73,62,1)
(37,9,1)
(30,9,1)
(1,2,1)
(44,34,1)
(20,72,1)
(18,4,1)
(62,37,1)
(9,79,1)
(16,73,1)
(69,79,1)
(34,23,1)
(12,45,1)
(20,32,1)
(74,75,1)
(46,11,1)
(14,24,1)
(39,11,1)
(74,59,2)
(41,16,2)
(25,74,2)
(45,14,2)
(26,9,2)
(43,12,2)
(60,9,2)
(75,12,2)
(51,12,2)
(69,79,2)
(3,79,2)
(39,11,2)
(62,9,2)
(45,79,2)
(0,41,2)
(18,12,2)
(51,39,2)
(23,9,2)
(16,73,2)
(7,79,2)
(16,1,2)
(63,9,2)
(59,12,2)
(16,9,2)
(73,9,2)
(59,45,2)
(72,45,2)
(1,9,2)
(41,9,2)
(53,9,2)
(72,12,2)
(59,39,2)
(24,79,2)
(16,34,2)
(31,12,2)
(48,74,2)
(44,9,2)
(64,74,2)
(76,41,2)
(71,12,2)
(12,79,2)
(50,41,2)
(58,9,2)
(48,39,2)
(70,74,2)
(37,9,2)
(22,41,2)
(4,12,2)
(14,79,2)
(67,74,2)
(16,39,2)
(2,9,2)
(78,41,2)
(34,9,2)
(32,12,2)
(66,41,2)
(20,79,2)
(38,9,2)
(12,45,2)
(35,79,2)
(6,12,2)
(74,12,2)
(42,9,2)
(77,12,2)
-----------------------------------
(0,"User logged in successfully.")
(1,&pHandle)
(2,pHandle)
(3,"passwords.txt")
(4,data)
(5,username)
(6,data)
(7,pFile)
(8,)
(9,1)
(10,while(1)
(11,dataBuffer[100] = "")
(12,pFile != NULL)
(13,)
(14,fopen("passwords.txt", "r")
(15,if (pFile != NULL)
(16,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(17,while(1)
(18,100)
(19,pHandle)
(20,break;)
(21,)
(22,pHandle)
(23,"Domain")
(24,"r")
(25,data[0] = \\\'\\\\0\\\')
(26,domain)
(27,dataBuffer)
(28,)
(29,data)
(30,RET)
(31,0)
(32,data[0] = \\\'\\\\0\\\')
(33,domain)
(34,* domain = "Domain")
(35,NULL)
(36,)
(37,username)
(38,LOGON32_LOGON_NETWORK)
(39,data = dataBuffer)
(40,"")
(41,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(42,data)
(43,pFile)
(44,username)
(45,pFile = fopen("passwords.txt", "r")
(46,data)
(47,)
(48,data[0])
(49,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(50,"Unable to login.")
(51,data[0])
(52,pFile)
(53,domain)
(54,)
(55,)
(56,if (fgets(data, 100, pFile)
(57,)
(58,0)
(59,fgets(data, 100, pFile)
(60,break;)
(61,dataBuffer)
(62,"User")
(63,LOGON32_PROVIDER_DEFAULT)
(64,data)
(65,dataBuffer)
(66,printLine("Unable to login.")
(67,\\\'\\\\0\\\')
(68,)
(69,pFile)
(70,0)
(71,pFile)
(72,fclose(pFile)
(73,* username = "User")
(74,fgets(data, 100, pFile)
(75,NULL)
(76,printLine("User logged in successfully.")
(77,\\\'\\\\0\\\')
(78,CloseHandle(pHandle)
(79,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
