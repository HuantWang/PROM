-----label-----
1
-----code-----
void CWE535_Info_Exposure_Shell_Error__w32_char_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to stderr */
            fprintf(stderr, "User attempted access with password: %s\n", password);
        }
    }
    else
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Do not write sensitive data to stderr */
            fprintf(stderr, "User attempted access\n");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
38,39
38,40
38,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
51,52
51,53
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
101,103
101,104
102,103
102,104
103,104
103,105
103,106
103,107
103,108
103,109
103,110
104,105
106,107
108,109
110,111
112,113
114,115
116,117
117,118
120,121
120,122
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
132,133
133,134
134,135
134,136
135,136
138,139
139,140
139,141
139,142
139,143
140,141
142,143
145,146
147,148
148,149
148,150
148,151
148,152
148,153
148,154
148,155
148,156
148,157
148,158
149,150
150,151
150,152
152,153
152,154
152,155
154,155
156,157
158,159
159,160
159,161
160,161
162,163
162,164
164,165
166,167
167,168
167,169
168,169
170,171
172,173
173,174
173,175
175,176
175,177
175,178
178,179
180,181
181,182
181,183
183,184
183,185
183,186
186,187
188,189
188,190
189,190
189,191
190,191
190,192
190,193
190,194
191,192
193,194
196,197
198,199
200,201
200,202
201,202
202,203
202,204
203,204
206,207
207,208
207,209
208,209
208,210
209,210
213,214
214,215
214,216
215,216
217,218
217,219
218,219
220,221
222,223
222,224
223,224
223,225
224,225
227,228
228,229
229,230
229,231
230,231
230,232
231,232
233,234
233,235
234,235
238,239
238,240
238,241
239,240
239,241
240,241
240,242
240,243
240,244
240,245
240,246
240,247
241,242
243,244
245,246
247,248
249,250
251,252
253,254
254,255
257,258
257,259
258,259
259,260
259,261
260,261
263,264
264,265
264,266
265,266
267,268
269,270
270,271
271,272
271,273
272,273
275,276
276,277
276,278
276,279
277,278
279,280
-----nextToken-----
2,4,9,14,16,18,20,24,26,28,32,34,37,39,40,42,45,47,48,50,55,57,58,60,62,67,68,73,74,75,79,82,84,88,89,95,98,99,100,105,107,109,111,113,115,118,119,124,125,129,131,136,137,141,143,144,146,151,153,155,157,161,163,165,169,171,174,176,177,179,182,184,185,187,192,194,195,197,199,204,205,210,211,212,216,219,221,225,226,232,235,236,237,242,244,246,248,250,252,255,256,261,262,266,268,273,274,278,280,281
-----computeFrom-----
52,53
52,54
70,71
70,72
77,78
77,79
86,87
86,88
92,93
92,94
96,97
96,98
102,103
102,104
189,190
189,191
207,208
207,209
214,215
214,216
223,224
223,225
229,230
229,231
233,234
233,235
239,240
239,241
-----guardedBy-----
57,73
88,98
118,131
194,210
225,235
255,268
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE535_Info_Exposure_Shell_Error__w32_char_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }}
void
CWE535_Info_Exposure_Shell_Error__w32_char_12_bad()
CWE535_Info_Exposure_Shell_Error__w32_char_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }}
if(globalReturnsTrueOrFalse())    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to stderr */            fprintf(stderr, "User attempted access with password: %s\n", password);        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(stderr, "User attempted access with password: %s\n", password);
fprintf(stderr, "User attempted access with password: %s\n", password)
fprintf
fprintf
stderr
stderr
"User attempted access with password: %s\n"
password
password
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(stderr, "User attempted access\n");
fprintf(stderr, "User attempted access\n")
fprintf
fprintf
stderr
stderr
"User attempted access\n"
-----joern-----
(139,61,0)
(5,19,0)
(89,116,0)
(102,6,0)
(123,114,0)
(79,27,0)
(50,41,0)
(128,64,0)
(123,86,0)
(146,79,0)
(48,79,0)
(117,88,0)
(56,1,0)
(10,68,0)
(72,100,0)
(31,27,0)
(98,134,0)
(34,100,0)
(66,137,0)
(63,79,0)
(22,118,0)
(111,79,0)
(69,34,0)
(148,37,0)
(90,88,0)
(120,16,0)
(21,137,0)
(137,24,0)
(41,74,0)
(15,114,0)
(60,68,0)
(57,58,0)
(32,26,0)
(137,44,0)
(6,102,0)
(88,16,0)
(122,95,0)
(99,142,0)
(53,100,0)
(137,40,0)
(5,142,0)
(27,16,0)
(79,88,0)
(29,68,0)
(25,79,0)
(124,53,0)
(73,44,0)
(148,64,0)
(129,142,0)
(127,123,0)
(85,34,0)
(75,16,0)
(19,76,0)
(105,44,0)
(106,3,0)
(30,25,0)
(133,16,0)
(64,53,0)
(136,95,0)
(143,133,0)
(37,148,0)
(37,100,0)
(18,79,0)
(20,6,0)
(91,22,0)
(92,27,0)
(59,137,0)
(113,116,0)
(125,37,0)
(145,139,0)
(16,144,0)
(2,1,0)
(23,79,0)
(71,16,0)
(35,3,0)
(103,41,0)
(107,19,0)
(49,136,0)
(79,114,0)
(141,58,0)
(5,114,0)
(116,114,0)
(36,123,0)
(130,1,0)
(104,134,0)
(131,17,0)
(26,9,0)
(45,8,0)
(39,1,0)
(137,100,0)
(142,5,0)
(44,1,0)
(3,64,0)
(0,5,0)
(119,133,0)
(97,101,0)
(140,9,0)
(46,1,0)
(6,114,0)
(96,34,0)
(93,116,0)
(68,100,0)
(84,137,0)
(68,42,0)
(82,81,0)
(67,111,0)
(81,137,0)
(41,100,0)
(40,137,0)
(116,93,0)
(37,139,0)
(13,70,0)
(132,93,0)
(79,111,0)
(62,100,0)
(17,80,0)
(142,102,0)
(28,16,0)
(70,78,0)
(43,74,0)
(135,102,0)
(87,24,0)
(24,1,0)
(109,114,0)
(147,122,0)
(77,148,0)
(42,68,0)
(79,25,0)
(137,81,0)
(86,65,0)
(11,86,0)
(108,16,0)
(114,16,0)
(7,1,0)
(52,40,0)
(112,1,0)
(34,1,0)
(1,51,0)
(38,101,0)
(4,24,0)
(138,47,0)
(64,1,0)
(74,80,0)
(58,16,0)
(134,102,0)
(101,1,0)
(53,64,0)
(126,1,0)
(110,116,0)
(83,16,0)
(121,140,0)
(47,65,0)
(102,16,0)
(100,1,0)
(33,16,0)
(54,42,0)
(14,137,0)
(94,16,0)
(12,148,0)
(132,116,1)
(103,50,1)
(106,35,1)
(123,127,1)
(37,100,1)
(59,84,1)
(48,23,1)
(135,86,1)
(63,146,1)
(29,60,1)
(25,30,1)
(124,128,1)
(5,142,1)
(129,99,1)
(113,27,1)
(92,88,1)
(4,101,1)
(67,63,1)
(37,148,1)
(133,143,1)
(35,64,1)
(117,90,1)
(27,31,1)
(102,6,1)
(105,73,1)
(72,115,1)
(6,114,1)
(134,104,1)
(74,43,1)
(60,10,1)
(41,100,1)
(24,87,1)
(79,88,1)
(88,117,1)
(3,106,1)
(89,110,1)
(62,72,1)
(19,107,1)
(138,93,1)
(53,100,1)
(23,19,1)
(107,5,1)
(52,14,1)
(13,25,1)
(57,141,1)
(97,38,1)
(49,81,1)
(3,64,1)
(147,136,1)
(99,0,1)
(110,113,1)
(26,32,1)
(127,36,1)
(146,18,1)
(84,66,1)
(25,79,1)
(128,74,1)
(54,68,1)
(53,124,1)
(68,29,1)
(55,34,1)
(131,42,1)
(30,79,1)
(114,109,1)
(148,77,1)
(10,44,1)
(91,81,1)
(122,147,1)
(21,139,1)
(123,114,1)
(32,25,1)
(68,100,1)
(109,15,1)
(101,97,1)
(93,132,1)
(116,114,1)
(134,102,1)
(104,98,1)
(34,100,1)
(18,48,1)
(73,24,1)
(69,85,1)
(140,121,1)
(77,12,1)
(86,11,1)
(15,115,1)
(70,13,1)
(137,100,1)
(90,133,1)
(128,42,1)
(55,58,1)
(96,69,1)
(17,131,1)
(85,22,1)
(5,114,1)
(100,62,1)
(81,82,1)
(139,145,1)
(116,89,1)
(137,24,1)
(143,119,1)
(137,44,1)
(82,137,1)
(142,129,1)
(79,111,1)
(44,105,1)
(11,123,1)
(137,40,1)
(81,137,1)
(40,52,1)
(6,20,1)
(38,100,1)
(85,122,1)
(93,116,1)
(119,114,1)
(50,17,1)
(79,27,1)
(41,103,1)
(121,26,1)
(145,37,1)
(87,4,1)
(43,41,1)
(0,134,1)
(125,3,1)
(47,138,1)
(141,70,1)
(36,47,1)
(141,140,1)
(34,96,1)
(136,49,1)
(98,102,1)
(148,64,1)
(31,92,1)
(20,135,1)
(12,125,1)
(21,3,1)
(66,21,1)
(142,102,1)
(22,91,1)
(23,134,1)
(111,67,1)
(135,93,1)
(64,53,1)
(42,68,1)
(58,57,1)
(14,59,1)
(42,54,1)
(79,114,1)
(86,93,2)
(13,25,2)
(40,115,2)
(85,115,2)
(41,100,2)
(127,93,2)
(6,115,2)
(134,115,2)
(0,134,2)
(37,3,2)
(138,93,2)
(116,115,2)
(74,42,2)
(37,100,2)
(5,134,2)
(79,114,2)
(93,115,2)
(27,115,2)
(114,115,2)
(79,88,2)
(106,115,2)
(77,3,2)
(6,114,2)
(68,115,2)
(91,81,2)
(53,115,2)
(4,115,2)
(117,115,2)
(79,27,2)
(93,116,2)
(111,115,2)
(103,42,2)
(107,134,2)
(26,25,2)
(47,93,2)
(29,115,2)
(123,114,2)
(81,137,2)
(18,115,2)
(139,3,2)
(119,115,2)
(30,115,2)
(113,115,2)
(17,42,2)
(92,115,2)
(15,115,2)
(122,81,2)
(123,93,2)
(34,115,2)
(79,111,2)
(90,115,2)
(136,81,2)
(49,81,2)
(142,102,2)
(24,115,2)
(137,24,2)
(137,40,2)
(110,115,2)
(12,3,2)
(97,115,2)
(38,115,2)
(99,134,2)
(62,115,2)
(5,142,2)
(141,115,2)
(41,42,2)
(57,115,2)
(42,68,2)
(36,93,2)
(128,115,2)
(102,115,2)
(148,64,2)
(10,115,2)
(82,115,2)
(124,115,2)
(137,44,2)
(137,115,2)
(133,115,2)
(48,115,2)
(25,115,2)
(79,115,2)
(101,115,2)
(135,115,2)
(59,115,2)
(132,115,2)
(116,114,2)
(134,102,2)
(20,115,2)
(109,115,2)
(72,115,2)
(3,115,2)
(14,115,2)
(145,3,2)
(100,115,2)
(67,115,2)
(54,115,2)
(19,134,2)
(140,25,2)
(147,81,2)
(104,115,2)
(43,42,2)
(146,115,2)
(66,115,2)
(35,115,2)
(89,115,2)
(96,115,2)
(53,100,2)
(25,79,2)
(143,115,2)
(69,115,2)
(32,25,2)
(88,115,2)
(70,25,2)
(58,115,2)
(3,64,2)
(84,115,2)
(34,100,2)
(137,100,2)
(121,25,2)
(11,93,2)
(21,115,2)
(31,115,2)
(50,42,2)
(68,100,2)
(102,6,2)
(64,53,2)
(23,115,2)
(142,134,2)
(52,115,2)
(87,115,2)
(73,115,2)
(131,42,2)
(42,115,2)
(129,134,2)
(125,3,2)
(98,115,2)
(22,81,2)
(60,115,2)
(63,115,2)
(148,3,2)
(37,148,2)
(64,115,2)
(44,115,2)
(105,115,2)
(81,115,2)
(5,114,2)
-----------------------------------
(0,password)
(1,)
(2,username)
(3,passwordLen > 0)
(4,username)
(5,password[passwordLen-1])
(6,strlen(password)
(7,password)
(8,)
(9,)
(10,password)
(11,\\\'\\\\0\\\')
(12,passwordLen)
(13,"Unable to login.")
(14,LOGON32_PROVIDER_DEFAULT)
(15,password)
(16,)
(17,printLine("fgets()
(18,password)
(19,password[passwordLen-1] = \\\'\\\\0\\\')
(20,password)
(21,username)
(22,printLine("Unable to login.")
(23,username)
(24,* username = "User")
(25,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(26,printLine("User logged in successfully.")
(27,* domain = "Domain")
(28,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(29,stdin)
(30,0)
(31,"Domain")
(32,"User logged in successfully.")
(33,pHandle)
(34,fprintf(stderr, "User attempted access with password: %s\\\\n", password)
(35,passwordLen)
(36,password)
(37,password[passwordLen-1])
(38,passwordLen)
(39,domain)
(40,&pHandle)
(41,password[0])
(42,fgets(password, 100, stdin)
(43,\\\'\\\\0\\\')
(44,* domain = "Domain")
(45,if(globalReturnsTrueOrFalse()
(46,pHandle)
(47,printLine("fgets()
(48,domain)
(49,"User logged in successfully.")
(50,password)
(51,)
(52,pHandle)
(53,strlen(password)
(54,NULL)
(55,RET)
(56,passwordLen)
(57,"User attempted access\\\\n")
(58,fprintf(stderr, "User attempted access\\\\n")
(59,LOGON32_LOGON_NETWORK)
(60,100)
(61,)
(62,"")
(63,LOGON32_PROVIDER_DEFAULT)
(64,passwordLen = strlen(password)
(65,)
(66,domain)
(67,pHandle)
(68,fgets(password, 100, stdin)
(69,"User attempted access with password: %s\\\\n")
(70,printLine("Unable to login.")
(71,username)
(72,password)
(73,domain)
(74,password[0] = \\\'\\\\0\\\')
(75,if (passwordLen > 0)
(76,)
(77,1)
(78,)
(79,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(80,)
(81,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(82,0)
(83,domain)
(84,password)
(85,stderr)
(86,password[0] = \\\'\\\\0\\\')
(87,"User")
(88,* username = "User")
(89,stdin)
(90,username)
(91,"Unable to login.")
(92,domain)
(93,fgets(password, 100, stdin)
(94,passwordLen)
(95,)
(96,password)
(97,0)
(98,passwordLen)
(99,passwordLen)
(100,password[100] = "")
(101,passwordLen = 0)
(102,passwordLen = strlen(password)
(103,0)
(104,0)
(105,"Domain")
(106,0)
(107,\\\'\\\\0\\\')
(108,password)
(109,"")
(110,100)
(111,&pHandle)
(112,if (fgets(password, 100, stdin)
(113,password)
(114,password[100] = "")
(115,globalReturnsTrueOrFalse()
(116,fgets(password, 100, stdin)
(117,"User")
(118,)
(119,passwordLen)
(120,if (fgets(password, 100, stdin)
(121,pHandle)
(122,CloseHandle(pHandle)
(123,password[0])
(124,password)
(125,password)
(126,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(127,0)
(128,passwordLen)
(129,1)
(130,if (passwordLen > 0)
(131,"fgets()
(132,NULL)
(133,passwordLen = 0)
(134,passwordLen > 0)
(135,passwordLen)
(136,printLine("User logged in successfully.")
(137,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(138,"fgets()
(139,password[passwordLen-1] = \\\'\\\\0\\\')
(140,CloseHandle(pHandle)
(141,stderr)
(142,passwordLen-1)
(143,0)
(144,)
(145,\\\'\\\\0\\\')
(146,LOGON32_LOGON_NETWORK)
(147,pHandle)
(148,passwordLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
