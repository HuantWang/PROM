-----label-----
1
-----code-----
void CWE256_Plaintext_Storage_of_Password__w32_wchar_t_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        {
            FILE *pFile;
            pFile = fopen("passwords.txt", "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read the password from a file */
                if (fgetws(data, 100, pFile) == NULL)
                {
                    data[0] = L'\0';
                }
                fclose(pFile);
            }
            else
            {
                data[0] = L'\0';
            }
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* POTENTIAL FLAW: Attempt to login user with password from the source */
            if (LogonUserW(
                        username,
                        domain,
                        data,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
58,59
60,61
60,62
60,63
61,62
62,63
62,64
63,64
65,66
65,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
73,74
77,78
77,79
77,80
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
85,86
85,87
86,87
86,88
86,89
86,90
87,88
89,90
92,93
94,95
96,97
97,98
98,99
98,100
99,100
99,101
100,101
104,105
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
113,115
114,115
118,119
119,120
119,121
120,121
121,122
123,124
125,126
125,127
126,127
127,128
127,129
129,130
129,131
129,132
132,133
133,134
134,135
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
141,142
143,144
144,145
144,146
146,147
146,148
146,149
149,150
151,152
152,153
152,154
154,155
154,156
154,157
157,158
159,160
159,161
159,162
160,161
160,162
161,162
161,163
161,164
161,165
161,166
161,167
161,168
162,163
164,165
166,167
168,169
170,171
172,173
174,175
175,176
178,179
178,180
179,180
180,181
180,182
181,182
184,185
185,186
185,187
186,187
188,189
190,191
191,192
192,193
192,194
193,194
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,42,46,48,52,54,55,59,64,66,67,71,74,75,76,80,82,88,90,91,93,95,101,102,103,107,109,115,116,117,122,124,128,130,131,135,140,142,145,147,148,150,153,155,156,158,163,165,167,169,171,173,176,177,182,183,187,189,194,195
-----computeFrom-----
44,45
44,46
69,70
69,71
78,79
78,80
85,86
85,87
98,99
98,100
112,113
112,114
119,120
119,121
160,161
160,162
-----guardedBy-----
82,95
80,109
90,101
176,189
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE256_Plaintext_Storage_of_Password__w32_wchar_t_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }            else            {                data[0] = L'\0';            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }}
void
CWE256_Plaintext_Storage_of_Password__w32_wchar_t_32_bad()
CWE256_Plaintext_Storage_of_Password__w32_wchar_t_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }            else            {                data[0] = L'\0';            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        {            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }            else            {                data[0] = L'\0';            }        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            FILE *pFile;            pFile = fopen("passwords.txt", "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }            else            {                data[0] = L'\0';            }        }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }            else            {                data[0] = L'\0';            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read the password from a file */                if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }                fclose(pFile);            }
if (fgetws(data, 100, pFile) == NULL)                {                    data[0] = L'\0';                }
fgetws(data, 100, pFile) == NULL
fgetws(data, 100, pFile)
fgetws
fgetws
data
data
100
pFile
pFile
NULL
NULL
{                    data[0] = L'\0';                }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{                data[0] = L'\0';            }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* POTENTIAL FLAW: Attempt to login user with password from the source */            if (LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }        }
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        data,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
data
data
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(30,28,0)
(36,55,0)
(63,32,0)
(9,55,0)
(77,76,0)
(20,36,0)
(70,61,0)
(8,55,0)
(60,59,0)
(34,16,0)
(44,37,0)
(17,65,0)
(74,6,0)
(70,63,0)
(67,55,0)
(76,63,0)
(53,32,0)
(58,43,0)
(26,40,0)
(61,70,0)
(13,45,0)
(39,55,0)
(72,18,0)
(69,6,0)
(68,18,0)
(42,70,0)
(50,29,0)
(2,51,0)
(7,44,0)
(51,59,0)
(68,45,0)
(78,64,0)
(64,74,0)
(46,16,0)
(33,68,0)
(56,10,0)
(31,63,0)
(18,36,0)
(14,22,0)
(43,40,0)
(35,29,0)
(68,4,0)
(12,68,0)
(23,61,0)
(10,55,0)
(21,31,0)
(18,27,0)
(30,74,0)
(22,31,0)
(59,51,0)
(76,65,0)
(22,65,0)
(29,74,0)
(75,64,0)
(45,68,0)
(49,16,0)
(0,27,0)
(3,65,0)
(48,5,0)
(57,68,0)
(27,59,0)
(52,79,0)
(24,68,0)
(71,26,0)
(73,63,0)
(41,30,0)
(74,64,0)
(47,6,0)
(6,32,0)
(15,70,0)
(54,70,0)
(32,55,0)
(70,74,0)
(80,28,0)
(66,16,0)
(65,17,0)
(11,10,0)
(65,55,0)
(4,68,0)
(62,4,0)
(27,18,0)
(31,32,0)
(16,36,0)
(25,74,0)
(59,55,0)
(19,17,0)
(63,76,0)
(38,68,0)
(4,62,1)
(66,18,1)
(54,15,1)
(77,73,1)
(70,74,1)
(68,4,1)
(61,23,1)
(72,31,1)
(35,74,1)
(31,63,1)
(38,12,1)
(49,66,1)
(12,33,1)
(14,30,1)
(48,29,1)
(64,78,1)
(24,49,1)
(26,71,1)
(73,10,1)
(27,0,1)
(45,68,1)
(14,48,1)
(58,26,1)
(39,59,1)
(71,45,1)
(27,59,1)
(50,35,1)
(22,14,1)
(7,45,1)
(19,3,1)
(31,21,1)
(10,56,1)
(41,61,1)
(2,60,1)
(70,63,1)
(56,11,1)
(30,41,1)
(18,27,1)
(33,24,1)
(68,18,1)
(41,52,1)
(74,64,1)
(13,68,1)
(76,65,1)
(44,7,1)
(29,50,1)
(21,22,1)
(17,19,1)
(60,65,1)
(42,54,1)
(57,38,1)
(29,74,1)
(76,77,1)
(22,65,1)
(30,74,1)
(59,51,1)
(51,2,1)
(45,13,1)
(43,58,1)
(11,39,1)
(1,44,1)
(70,42,1)
(61,70,1)
(62,57,1)
(1,43,1)
(15,29,1)
(0,72,1)
(63,76,1)
(65,17,1)
(25,63,1)
(23,70,1)
(75,25,1)
(78,75,1)
(52,61,1)
(22,65,2)
(54,29,2)
(45,68,2)
(15,29,2)
(70,74,2)
(59,51,2)
(71,45,2)
(31,63,2)
(61,70,2)
(63,76,2)
(65,17,2)
(58,45,2)
(30,29,2)
(7,45,2)
(44,45,2)
(29,74,2)
(26,45,2)
(27,59,2)
(52,61,2)
(70,63,2)
(41,29,2)
(30,74,2)
(48,29,2)
(68,18,2)
(70,29,2)
(23,29,2)
(18,27,2)
(42,29,2)
(61,29,2)
(43,45,2)
(76,65,2)
(68,4,2)
(74,64,2)
-----------------------------------
(0,dataPtr2)
(1,RET)
(2,data)
(3,dataPtr1)
(4,&pHandle)
(5,)
(6,)
(7,"Unable to login.")
(8,dataPtr1)
(9,data)
(10,data = dataBuffer)
(11,data)
(12,data)
(13,0)
(14,dataPtr1)
(15,data)
(16,)
(17,&data)
(18,* data = *dataPtr2)
(19,data)
(20,data)
(21,data)
(22,*dataPtr1)
(23,NULL)
(24,username)
(25,pFile)
(26,printLine("User logged in successfully.")
(27,*dataPtr2)
(28,)
(29,pFile != NULL)
(30,fclose(pFile)
(31,*dataPtr1 = data)
(32,)
(33,domain)
(34,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(35,pFile)
(36,)
(37,)
(38,LOGON32_LOGON_NETWORK)
(39,"")
(40,)
(41,pFile)
(42,pFile)
(43,CloseHandle(pHandle)
(44,printLine("Unable to login.")
(45,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(46,pHandle)
(47,if (pFile != NULL)
(48,\\\'\\\\0\\\')
(49,"Domain")
(50,NULL)
(51,&data)
(52,\\\'\\\\0\\\')
(53,data)
(54,100)
(55,)
(56,dataBuffer)
(57,LOGON32_PROVIDER_DEFAULT)
(58,pHandle)
(59,* *dataPtr2 = &data)
(60,dataPtr2)
(61,fgetws(data, 100, pFile)
(62,pHandle)
(63,* data = *dataPtr1)
(64,fopen("passwords.txt", "r")
(65,* *dataPtr1 = &data)
(66,"User")
(67,dataPtr2)
(68,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        data,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(69,pFile)
(70,fgetws(data, 100, pFile)
(71,"User logged in successfully.")
(72,data)
(73,data)
(74,pFile = fopen("passwords.txt", "r")
(75,"passwords.txt")
(76,*dataPtr1)
(77,dataPtr1)
(78,"r")
(79,)
(80,if (fgetws(data, 100, pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
