-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_11_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
            WSADATA wsaData;
            BOOL wsaDataInit = FALSE;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            struct sockaddr_in service;
            int recvResult;
            do
            {
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
                listenSocket = socket(PF_INET, SOCK_STREAM, 0);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(LISTEN_PORT);
                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
                {
                    break;
                }
                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == INVALID_SOCKET)
                {
                    break;
                }
                /* INCIDENTAL CWE 188 - reliance on data memory layout
                 * recv and friends return "number of bytes" received
                 * char's on our system, however, may not be "octets" (8-bit
                 * bytes) but could be just about anything.  Also,
                 * even if the external environment is ASCII or UTF8,
                 * the ANSI/ISO C standard does not dictate that the
                 * character set used by the actual language or character
                 * constants matches.
                 *
                 * In practice none of these are usually issues...
                 */
                /* FLAW: read the new hostname from a network socket */
                recvResult = recv(acceptSocket, data, 100 - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                data[recvResult] = '\0';
            }
            while (0);
            if (acceptSocket != INVALID_SOCKET)
            {
                closesocket(acceptSocket);
            }
            if (listenSocket != INVALID_SOCKET)
            {
                closesocket(listenSocket);
            }
            if (wsaDataInit)
            {
                WSACleanup();
            }
        }
    }
    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */
    if (!SetComputerNameA(data))
    {
        printLine("Failure setting computer name");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
32,41
32,42
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
63,64
64,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
75,76
77,78
77,79
78,79
78,80
78,81
78,82
78,83
78,84
78,85
78,86
78,87
78,88
78,89
78,90
78,91
78,92
78,93
79,80
79,81
80,81
80,82
81,82
81,83
81,84
82,83
84,85
84,86
84,87
85,86
89,90
90,91
92,93
94,95
96,97
97,98
97,99
98,99
101,102
102,103
102,104
103,104
105,106
105,107
105,108
105,109
106,107
108,109
110,111
113,114
113,115
114,115
114,116
115,116
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
126,127
129,130
130,131
131,132
133,134
134,135
134,136
135,136
135,137
136,137
139,140
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
149,150
151,152
152,153
152,154
153,154
153,155
154,155
157,158
157,159
158,159
160,161
162,163
162,164
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
171,173
172,173
172,174
173,174
175,176
177,178
178,179
180,181
181,182
182,183
184,185
186,187
186,188
187,188
187,189
188,189
190,191
190,192
190,193
191,192
193,194
195,196
197,198
199,200
200,201
200,202
201,202
203,204
203,205
203,206
203,207
204,205
206,207
208,209
210,211
212,213
212,214
213,214
213,215
214,215
216,217
218,219
220,221
221,222
221,223
222,223
224,225
224,226
224,227
224,228
224,229
225,226
227,228
229,230
231,232
231,233
235,236
235,237
236,237
236,238
237,238
237,239
238,239
240,241
242,243
242,244
243,244
246,247
248,249
249,250
249,251
250,251
250,252
251,252
253,254
257,258
257,259
258,259
258,260
259,260
261,262
263,264
264,265
265,266
265,267
266,267
268,269
270,271
270,272
271,272
271,273
272,273
274,275
276,277
277,278
278,279
278,280
279,280
281,282
283,284
283,285
284,285
286,287
287,288
288,289
289,290
291,292
291,293
292,293
293,294
293,295
294,295
296,297
298,299
298,300
299,300
300,301
300,302
301,302
304,305
305,306
305,307
306,307
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,47,51,53,56,60,62,65,69,71,74,76,83,86,87,88,91,93,95,99,100,104,107,109,111,112,116,118,120,124,127,128,132,137,138,140,146,147,148,150,155,156,159,161,165,168,170,174,176,179,183,185,189,192,194,196,198,202,205,207,209,211,215,217,219,223,226,228,230,232,233,234,239,241,244,245,247,252,254,255,256,260,262,267,269,273,275,280,282,285,290,295,297,302,303,307,308
-----computeFrom-----
22,23
22,24
80,81
80,82
97,98
97,99
102,103
102,104
114,115
114,116
134,135
134,136
142,143
142,144
152,153
152,154
163,164
163,165
187,188
187,189
200,201
200,202
213,214
213,215
221,222
221,223
231,232
231,233
236,237
236,238
237,238
237,239
242,243
242,244
249,250
249,251
258,259
258,260
271,272
271,273
-----guardedBy-----
260,269
273,282
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_11_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(globalReturnsTrue())    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_11_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_11_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(globalReturnsTrue())    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
{            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);
{                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                    break;                }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                    break;                }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)                {                    break;                }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(acceptSocket);            }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(listenSocket);            }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)            {                WSACleanup();            }
wsaDataInit
wsaDataInit
{                WSACleanup();            }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }
!SetComputerNameA(data)
SetComputerNameA(data)
SetComputerNameA
SetComputerNameA
data
data
{        printLine("Failure setting computer name");        exit(1);    }
printLine("Failure setting computer name");
printLine("Failure setting computer name")
printLine
printLine
"Failure setting computer name"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(52,71,0)
(22,53,0)
(66,65,0)
(21,97,0)
(85,87,0)
(132,3,0)
(80,153,0)
(52,54,0)
(3,17,0)
(24,85,0)
(75,20,0)
(30,66,0)
(133,36,0)
(144,87,0)
(52,141,0)
(37,128,0)
(48,159,0)
(136,65,0)
(94,67,0)
(83,121,0)
(80,1,0)
(43,157,0)
(36,141,0)
(145,141,0)
(16,141,0)
(74,128,0)
(18,114,0)
(123,141,0)
(60,123,0)
(96,157,0)
(28,84,0)
(162,141,0)
(49,145,0)
(79,146,0)
(135,45,0)
(56,144,0)
(155,36,0)
(153,20,0)
(153,80,0)
(144,6,0)
(158,114,0)
(45,32,0)
(33,53,0)
(105,141,0)
(30,156,0)
(140,72,0)
(20,153,0)
(116,52,0)
(84,87,0)
(146,87,0)
(150,144,0)
(32,46,0)
(161,156,0)
(142,67,0)
(55,146,0)
(101,87,0)
(163,123,0)
(89,53,0)
(14,53,0)
(146,105,0)
(41,87,0)
(86,36,0)
(154,129,0)
(102,133,0)
(139,30,0)
(67,105,0)
(111,46,0)
(42,66,0)
(127,106,0)
(154,141,0)
(15,156,0)
(26,41,0)
(122,120,0)
(27,141,0)
(113,115,0)
(104,164,0)
(131,105,0)
(155,151,0)
(131,106,0)
(119,42,0)
(153,87,0)
(147,7,0)
(138,49,0)
(76,141,0)
(65,114,0)
(156,30,0)
(126,84,0)
(124,6,0)
(87,84,0)
(63,113,0)
(30,36,0)
(29,155,0)
(159,151,0)
(25,30,0)
(10,62,0)
(130,141,0)
(61,84,0)
(66,114,0)
(70,115,0)
(152,53,0)
(5,44,0)
(160,0,0)
(97,3,0)
(32,45,0)
(133,66,0)
(42,119,0)
(110,53,0)
(51,85,0)
(133,121,0)
(31,42,0)
(41,14,0)
(121,141,0)
(47,34,0)
(58,141,0)
(0,87,0)
(112,114,0)
(80,9,0)
(109,17,0)
(36,30,0)
(53,149,0)
(165,105,0)
(0,77,0)
(164,154,0)
(39,106,0)
(73,66,0)
(143,40,0)
(157,105,0)
(93,1,0)
(78,54,0)
(71,52,0)
(134,66,0)
(153,98,0)
(19,145,0)
(151,159,0)
(159,36,0)
(137,164,0)
(38,53,0)
(99,146,0)
(128,53,0)
(125,53,0)
(103,14,0)
(35,133,0)
(1,80,0)
(11,65,0)
(129,154,0)
(32,62,0)
(88,49,0)
(17,141,0)
(151,155,0)
(68,53,0)
(46,32,0)
(62,32,0)
(87,141,0)
(0,14,0)
(98,153,0)
(23,153,0)
(106,53,0)
(13,70,0)
(148,41,0)
(118,159,0)
(105,146,0)
(92,71,0)
(95,129,0)
(6,144,0)
(131,12,0)
(4,53,0)
(2,114,0)
(90,155,0)
(30,105,0)
(9,80,0)
(54,52,0)
(107,62,0)
(57,14,0)
(3,97,0)
(64,131,0)
(157,106,0)
(100,30,0)
(50,98,0)
(69,97,0)
(8,53,0)
(108,117,0)
(80,1,1)
(67,142,1)
(30,100,1)
(124,98,1)
(13,119,1)
(98,153,1)
(155,29,1)
(126,101,1)
(66,65,1)
(116,71,1)
(43,59,1)
(147,98,1)
(41,148,1)
(82,66,1)
(36,30,1)
(0,160,1)
(67,105,1)
(10,107,1)
(134,65,1)
(164,137,1)
(14,103,1)
(104,17,1)
(145,19,1)
(3,97,1)
(0,87,1)
(99,55,1)
(52,54,1)
(86,67,1)
(93,23,1)
(106,39,1)
(105,146,1)
(69,145,1)
(43,122,1)
(24,87,1)
(128,37,1)
(73,134,1)
(55,165,1)
(60,45,1)
(20,75,1)
(78,116,1)
(3,132,1)
(48,118,1)
(62,10,1)
(63,70,1)
(30,156,1)
(140,45,1)
(46,111,1)
(154,129,1)
(153,80,1)
(103,57,1)
(111,62,1)
(153,20,1)
(64,157,1)
(26,131,1)
(151,159,1)
(131,64,1)
(32,62,1)
(129,95,1)
(133,36,1)
(21,69,1)
(79,99,1)
(113,63,1)
(131,105,1)
(118,155,1)
(96,43,1)
(66,73,1)
(39,127,1)
(133,66,1)
(43,147,1)
(28,126,1)
(146,79,1)
(31,47,1)
(153,87,1)
(157,105,1)
(163,60,1)
(148,26,1)
(87,84,1)
(71,92,1)
(45,32,1)
(139,86,1)
(32,46,1)
(59,121,1)
(95,164,1)
(151,155,1)
(45,135,1)
(42,31,1)
(6,144,1)
(155,36,1)
(84,61,1)
(15,161,1)
(19,49,1)
(26,157,1)
(43,108,1)
(47,81,1)
(29,90,1)
(122,151,1)
(37,74,1)
(43,140,1)
(107,59,1)
(121,83,1)
(11,136,1)
(81,41,1)
(109,3,1)
(91,113,1)
(100,156,1)
(25,139,1)
(133,102,1)
(5,85,1)
(65,11,1)
(35,151,1)
(70,13,1)
(85,87,1)
(156,15,1)
(107,106,1)
(23,50,1)
(41,87,1)
(85,51,1)
(108,67,1)
(157,96,1)
(150,56,1)
(80,9,1)
(43,143,1)
(51,24,1)
(42,66,1)
(123,163,1)
(159,48,1)
(30,105,1)
(144,150,1)
(81,0,1)
(161,25,1)
(146,87,1)
(165,6,1)
(94,105,1)
(90,36,1)
(17,109,1)
(144,87,1)
(131,106,1)
(74,82,1)
(88,138,1)
(50,154,1)
(1,93,1)
(159,36,1)
(31,82,1)
(75,80,1)
(102,35,1)
(57,128,1)
(101,123,1)
(160,41,1)
(119,42,1)
(142,94,1)
(83,133,1)
(31,81,1)
(91,119,1)
(30,66,1)
(52,71,1)
(127,14,1)
(41,14,1)
(157,106,1)
(143,6,1)
(132,97,1)
(49,88,1)
(135,32,1)
(0,14,1)
(137,104,1)
(138,52,1)
(43,5,1)
(54,78,1)
(92,85,1)
(61,28,1)
(97,21,1)
(56,124,1)
(67,105,2)
(64,157,2)
(95,85,2)
(45,82,2)
(0,41,2)
(46,59,2)
(57,82,2)
(39,82,2)
(32,82,2)
(93,85,2)
(47,81,2)
(61,45,2)
(26,82,2)
(159,36,2)
(87,45,2)
(49,85,2)
(55,6,2)
(138,85,2)
(25,67,2)
(98,85,2)
(24,45,2)
(133,66,2)
(132,85,2)
(105,6,2)
(6,98,2)
(157,105,2)
(3,85,2)
(118,155,2)
(109,85,2)
(19,85,2)
(14,82,2)
(111,59,2)
(90,67,2)
(99,6,2)
(96,82,2)
(56,98,2)
(157,106,2)
(80,1,2)
(153,80,2)
(111,82,2)
(133,36,2)
(71,85,2)
(128,82,2)
(127,82,2)
(50,85,2)
(60,45,2)
(119,42,2)
(41,87,2)
(87,84,2)
(35,151,2)
(155,67,2)
(154,85,2)
(23,85,2)
(0,87,2)
(116,85,2)
(67,6,2)
(46,82,2)
(148,82,2)
(159,155,2)
(129,85,2)
(151,159,2)
(156,67,2)
(29,67,2)
(105,146,2)
(163,45,2)
(155,36,2)
(123,45,2)
(36,30,2)
(69,85,2)
(140,45,2)
(83,151,2)
(161,67,2)
(150,98,2)
(153,85,2)
(88,85,2)
(30,66,2)
(86,67,2)
(106,82,2)
(52,71,2)
(85,87,2)
(145,85,2)
(107,59,2)
(74,82,2)
(139,67,2)
(43,82,2)
(164,85,2)
(146,87,2)
(15,67,2)
(103,82,2)
(79,6,2)
(20,85,2)
(84,45,2)
(94,6,2)
(108,67,2)
(135,82,2)
(151,67,2)
(45,59,2)
(51,45,2)
(54,85,2)
(160,41,2)
(32,59,2)
(62,59,2)
(121,151,2)
(124,98,2)
(32,46,2)
(102,151,2)
(17,85,2)
(6,144,2)
(30,67,2)
(126,45,2)
(41,14,2)
(122,151,2)
(98,153,2)
(62,82,2)
(157,82,2)
(144,87,2)
(97,85,2)
(0,14,2)
(104,85,2)
(28,45,2)
(153,87,2)
(131,106,2)
(32,62,2)
(151,155,2)
(146,6,2)
(3,97,2)
(81,82,2)
(144,98,2)
(41,82,2)
(59,151,2)
(147,98,2)
(131,105,2)
(66,65,2)
(13,119,2)
(80,85,2)
(10,59,2)
(42,66,2)
(70,119,2)
(48,155,2)
(5,85,2)
(92,85,2)
(80,9,2)
(45,32,2)
(85,45,2)
(30,156,2)
(135,59,2)
(100,67,2)
(107,82,2)
(133,151,2)
(131,157,2)
(21,85,2)
(30,105,2)
(113,119,2)
(165,6,2)
(137,85,2)
(75,85,2)
(37,82,2)
(52,54,2)
(10,82,2)
(52,85,2)
(63,119,2)
(142,6,2)
(36,67,2)
(101,45,2)
(154,129,2)
(78,85,2)
(143,6,2)
(153,20,2)
(1,85,2)
-----------------------------------
(0,closesocket(listenSocket)
(1,&service)
(2,data)
(3,service.sin_addr.s_addr)
(4,recvResult)
(5,break;)
(6,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(7,)
(8,acceptSocket)
(9,struct sockaddr*)
(10,2)
(11,"")
(12,)
(13,"Failure setting computer name")
(14,listenSocket = INVALID_SOCKET)
(15,1)
(16,if (acceptSocket == INVALID_SOCKET)
(17,service.sin_addr.s_addr = INADDR_ANY)
(18,if(globalReturnsTrue()
(19,AF_INET)
(20,sizeof(service)
(21,sin_addr)
(22,wsaDataInit)
(23,listenSocket)
(24,listenSocket)
(25,data)
(26,listenSocket)
(27,if (listenSocket == INVALID_SOCKET)
(28,SOCK_STREAM)
(29,SOCKET_ERROR)
(30,recv(acceptSocket, data, 100 - 1, 0)
(31,data)
(32,WSAStartup(MAKEWORD(2,2)
(33,if (listenSocket != INVALID_SOCKET)
(34,)
(35,data)
(36,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(37,FALSE)
(38,if (wsaDataInit)
(39,INVALID_SOCKET)
(40,)
(41,listenSocket != INVALID_SOCKET)
(42,SetComputerNameA(data)
(43,acceptSocket)
(44,)
(45,WSAStartup(MAKEWORD(2,2)
(46,&wsaData)
(47,WSACleanup()
(48,0)
(49,service.sin_family)
(50,SOCKET_ERROR)
(51,INVALID_SOCKET)
(52,memset(&service, 0, sizeof(service)
(53,)
(54,sizeof(service)
(55,listenSocket)
(56,listenSocket)
(57,listenSocket)
(58,if (WSAStartup(MAKEWORD(2,2)
(59,0)
(60,wsaDataInit)
(61,0)
(62,MAKEWORD(2,2)
(63,1)
(64,acceptSocket)
(65,dataBuffer[100] = "")
(66,data = dataBuffer)
(67,acceptSocket == INVALID_SOCKET)
(68,if (acceptSocket != INVALID_SOCKET)
(69,service)
(70,printLine("Failure setting computer name")
(71,&service)
(72,)
(73,dataBuffer)
(74,wsaDataInit)
(75,service)
(76,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(77,)
(78,service)
(79,NULL)
(80,(struct sockaddr*)
(81,wsaDataInit)
(82,globalReturnsTrue()
(83,\\\'\\\\0\\\')
(84,socket(PF_INET, SOCK_STREAM, 0)
(85,listenSocket == INVALID_SOCKET)
(86,recvResult)
(87,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(88,sin_family)
(89,wsaData)
(90,recvResult)
(91,RET)
(92,service)
(93,service)
(94,acceptSocket)
(95,LISTEN_PORT)
(96,INVALID_SOCKET)
(97,service.sin_addr)
(98,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(99,NULL)
(100,0)
(101,listenSocket)
(102,recvResult)
(103,INVALID_SOCKET)
(104,service)
(105,acceptSocket = accept(listenSocket, NULL, NULL)
(106,acceptSocket = INVALID_SOCKET)
(107,2)
(108,break;)
(109,INADDR_ANY)
(110,listenSocket)
(111,wsaData)
(112,if (!SetComputerNameA(data)
(113,exit(1)
(114,)
(115,)
(116,0)
(117,)
(118,recvResult)
(119,!SetComputerNameA(data)
(120,)
(121,data[recvResult] = \\\'\\\\0\\\')
(122,break;)
(123,wsaDataInit = 1)
(124,SOCKET_ERROR)
(125,do)
(126,PF_INET)
(127,acceptSocket)
(128,wsaDataInit = FALSE)
(129,htons(LISTEN_PORT)
(130,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(131,closesocket(acceptSocket)
(132,s_addr)
(133,data[recvResult])
(134,data)
(135,NO_ERROR)
(136,dataBuffer)
(137,sin_port)
(138,service)
(139,acceptSocket)
(140,break;)
(141,)
(142,INVALID_SOCKET)
(143,break;)
(144,listen(listenSocket, LISTEN_BACKLOG)
(145,service.sin_family = AF_INET)
(146,accept(listenSocket, NULL, NULL)
(147,break;)
(148,INVALID_SOCKET)
(149,)
(150,LISTEN_BACKLOG)
(151,recvResult == SOCKET_ERROR || recvResult == 0)
(152,service)
(153,bind(listenSocket, (struct sockaddr*)
(154,service.sin_port = htons(LISTEN_PORT)
(155,recvResult == SOCKET_ERROR)
(156,100 - 1)
(157,acceptSocket != INVALID_SOCKET)
(158,dataBuffer)
(159,recvResult == 0)
(160,listenSocket)
(161,100)
(162,if (recvResult == SOCKET_ERROR || recvResult == 0)
(163,1)
(164,service.sin_port)
(165,acceptSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
