-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_15_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (250-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
29,32
29,33
29,34
29,35
30,31
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
122,123
123,124
123,125
124,125
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,31,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,120,121,125,126,127,131,133
-----computeFrom-----
22,23
22,24
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_15_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_15_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_15_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(250-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(36,59,0)
(4,42,0)
(42,25,0)
(32,45,0)
(11,41,0)
(9,38,0)
(17,4,0)
(48,11,0)
(54,8,0)
(24,21,0)
(14,31,0)
(15,17,0)
(8,55,0)
(57,31,0)
(55,31,0)
(46,21,0)
(17,8,0)
(50,25,0)
(60,5,0)
(0,21,0)
(40,35,0)
(44,42,0)
(49,3,0)
(5,4,0)
(55,23,0)
(43,42,0)
(45,8,0)
(8,17,0)
(5,35,0)
(37,55,0)
(20,17,0)
(56,35,0)
(29,41,0)
(2,55,0)
(47,37,0)
(53,26,0)
(12,37,0)
(24,30,0)
(41,11,0)
(39,25,0)
(6,25,0)
(51,59,0)
(34,25,0)
(30,24,0)
(1,4,0)
(27,25,0)
(17,35,0)
(41,4,0)
(33,42,0)
(21,24,0)
(13,23,0)
(18,2,0)
(21,4,0)
(2,38,0)
(19,59,0)
(26,35,0)
(4,5,0)
(8,24,0)
(3,22,0)
(58,22,0)
(35,59,0)
(10,55,0)
(24,8,0)
(7,41,0)
(31,55,0)
(16,6,0)
(8,45,0)
(26,59,0)
(5,60,1)
(8,17,1)
(49,45,1)
(17,35,1)
(27,11,1)
(17,4,1)
(35,40,1)
(16,28,1)
(26,53,1)
(55,31,1)
(45,8,1)
(41,4,1)
(11,41,1)
(40,56,1)
(60,1,1)
(54,24,1)
(7,4,1)
(5,35,1)
(53,27,1)
(21,46,1)
(2,55,1)
(47,12,1)
(24,21,1)
(8,24,1)
(10,11,1)
(56,19,1)
(18,45,1)
(8,55,1)
(15,37,1)
(24,30,1)
(45,32,1)
(17,20,1)
(28,35,1)
(48,41,1)
(8,54,1)
(4,5,1)
(37,47,1)
(37,55,1)
(2,18,1)
(0,17,1)
(3,49,1)
(31,57,1)
(6,16,1)
(27,37,1)
(57,14,1)
(20,15,1)
(27,2,1)
(21,4,1)
(46,0,1)
(53,34,1)
(58,3,1)
(29,7,1)
(41,29,1)
(11,48,1)
(52,26,1)
(34,6,1)
(12,55,1)
(26,35,1)
(1,28,1)
(18,58,1)
(14,10,1)
(32,8,1)
(21,37,2)
(34,28,2)
(45,37,2)
(27,28,2)
(0,37,2)
(14,11,2)
(1,28,2)
(4,5,2)
(47,11,2)
(24,37,2)
(24,30,2)
(17,37,2)
(58,45,2)
(41,28,2)
(8,37,2)
(54,37,2)
(17,4,2)
(10,11,2)
(32,37,2)
(49,45,2)
(5,35,2)
(4,28,2)
(2,55,2)
(3,45,2)
(6,28,2)
(24,21,2)
(45,8,2)
(18,37,2)
(7,28,2)
(46,37,2)
(37,55,2)
(21,4,2)
(55,11,2)
(55,31,2)
(15,37,2)
(8,24,2)
(8,55,2)
(5,28,2)
(60,28,2)
(16,28,2)
(41,4,2)
(20,37,2)
(12,11,2)
(57,11,2)
(37,11,2)
(8,17,2)
(2,37,2)
(29,28,2)
(17,35,2)
(11,41,2)
(48,28,2)
(26,35,2)
(31,11,2)
(11,28,2)
-----------------------------------
(0,250)
(1,dataLen)
(2,fclose(pFile)
(3,printLine("fgetws()
(4,dataLen = wcslen(data)
(5,wcslen(data)
(6,printLine("Benign, fixed string")
(7,250)
(8,fgetws(data+dataLen, (int)
(9,if (fgetws(data+dataLen, (int)
(10,pFile)
(11,250-dataLen > 1)
(12,pFile)
(13,if (pFile != NULL)
(14,FILENAME)
(15,data)
(16,"Benign, fixed string")
(17,data+dataLen)
(18,pFile)
(19,"PATH=")
(20,dataLen)
(21,250-dataLen)
(22,)
(23,)
(24,(int)
(25,)
(26,PUTENV(data)
(27,break;)
(28,6)
(29,dataLen)
(30,int)
(31,fopen(FILENAME, "r")
(32,NULL)
(33,pFile)
(34,break;)
(35,data = dataBuffer)
(36,switch(6)
(37,pFile != NULL)
(38,)
(39,case 6:)
(40,dataBuffer)
(41,250-dataLen)
(42,)
(43,dataLen)
(44,if (250-dataLen > 1)
(45,fgetws(data+dataLen, (int)
(46,dataLen)
(47,NULL)
(48,1)
(49,"fgetws()
(50,default:)
(51,data)
(52,RET)
(53,data)
(54,pFile)
(55,pFile = fopen(FILENAME, "r")
(56,data)
(57,"r")
(58,\\\'\\\\0\\\')
(59,)
(60,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
