-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_realloc_03_bad()
{
    if(5==5)
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: reallocate password without clearing the password buffer
             * which could leave a copy of the password in memory */
            password = realloc(password, 200 * sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            /* Zeroize the password */
            SecureZeroMemory(password, 200 * sizeof(wchar_t));
            /* Use the password buffer again */
            wcscpy(password, L"Nothing to see here");
            printWLine(password);
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
83,84
83,85
84,85
84,86
85,86
85,87
85,88
85,89
86,87
88,89
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
122,123
123,124
124,125
124,126
125,126
125,127
126,127
128,129
128,130
129,130
133,134
133,135
133,136
134,135
134,136
135,136
135,137
135,138
135,139
135,140
135,141
135,142
136,137
138,139
140,141
142,143
144,145
146,147
148,149
149,150
152,153
152,154
153,154
154,155
154,156
155,156
158,159
159,160
159,161
160,161
162,163
164,165
165,166
166,167
166,168
167,168
170,171
171,172
171,173
172,173
174,175
174,176
174,177
175,176
177,178
179,180
179,181
181,182
182,183
182,184
185,186
185,187
186,187
186,188
187,188
189,190
191,192
192,193
193,194
193,195
194,195
196,197
198,199
199,200
199,201
199,202
200,201
202,203
204,205
204,206
206,207
207,208
207,209
210,211
211,212
211,213
211,214
212,213
214,215
217,218
218,219
218,220
219,220
221,222
223,224
224,225
224,226
225,226
227,228
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,53,57,59,62,64,65,67,70,72,73,75,80,81,82,87,89,90,92,94,99,100,105,106,107,111,114,116,120,121,127,130,131,132,137,139,141,143,145,147,150,151,156,157,161,163,168,169,173,176,178,180,183,184,188,190,195,197,201,203,205,208,209,213,215,216,220,222,226,228
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
77,78
77,79
84,85
84,86
102,103
102,104
109,110
109,111
118,119
118,120
124,125
124,126
128,129
128,130
134,135
134,136
171,172
171,173
179,180
179,181
186,187
186,188
204,205
204,206
-----guardedBy-----
89,105
120,130
150,163
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_realloc_03_bad(){    if(5==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_wchar_t_realloc_03_bad()
CWE244_Heap_Inspection__w32_wchar_t_realloc_03_bad
{    if(5==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
if(5==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
5==5
5
5
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
password = realloc(password, 200 * sizeof(wchar_t));
password = realloc(password, 200 * sizeof(wchar_t))
password
password
realloc(password, 200 * sizeof(wchar_t))
realloc
realloc
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
SecureZeroMemory(password, 200 * sizeof(wchar_t));
SecureZeroMemory(password, 200 * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(password, L"Nothing to see here");
wcscpy(password, L"Nothing to see here")
wcscpy
wcscpy
password
password
L"Nothing to see here"
printWLine(password);
printWLine(password)
printWLine
printWLine
password
password
free(password);
free(password)
free
free
password
password
-----joern-----
(63,6,0)
(15,33,0)
(81,6,0)
(39,63,0)
(3,31,0)
(53,28,0)
(71,81,0)
(6,31,0)
(64,31,0)
(56,64,0)
(74,83,0)
(27,28,0)
(46,31,0)
(49,29,0)
(37,6,0)
(95,30,0)
(31,92,0)
(97,91,0)
(54,89,0)
(55,8,0)
(70,88,0)
(9,29,0)
(63,47,0)
(45,31,0)
(5,6,0)
(47,63,0)
(77,31,0)
(34,29,0)
(98,6,0)
(96,24,0)
(12,29,0)
(12,31,0)
(30,29,0)
(97,34,0)
(83,65,0)
(29,31,0)
(11,20,0)
(10,28,0)
(1,31,0)
(51,54,0)
(78,90,0)
(75,31,0)
(37,29,0)
(52,4,0)
(0,98,0)
(93,34,0)
(60,31,0)
(24,47,0)
(22,57,0)
(44,7,0)
(99,31,0)
(59,44,0)
(38,83,0)
(34,31,0)
(43,31,0)
(28,6,0)
(83,74,0)
(9,31,0)
(16,97,0)
(18,12,0)
(32,24,0)
(87,70,0)
(13,98,0)
(25,47,0)
(37,54,0)
(28,94,0)
(54,37,0)
(67,20,0)
(58,94,0)
(5,65,0)
(35,37,0)
(40,23,0)
(14,73,0)
(80,28,0)
(28,86,0)
(29,37,0)
(89,54,0)
(69,64,0)
(66,28,0)
(42,81,0)
(73,7,0)
(76,81,0)
(61,91,0)
(23,22,0)
(79,48,0)
(86,28,0)
(19,5,0)
(82,9,0)
(41,79,0)
(22,23,0)
(91,97,0)
(47,31,0)
(5,19,0)
(17,30,0)
(94,28,0)
(33,81,0)
(2,31,0)
(90,85,0)
(6,5,0)
(81,33,0)
(84,6,0)
(65,5,0)
(36,74,0)
(65,83,0)
(72,31,0)
(68,89,0)
(34,97,0)
(62,88,0)
(26,41,0)
(79,41,0)
(50,86,0)
(96,47,1)
(81,6,1)
(59,94,1)
(43,72,1)
(63,39,1)
(11,67,1)
(63,6,1)
(33,15,1)
(18,34,1)
(91,61,1)
(94,58,1)
(81,71,1)
(24,32,1)
(16,93,1)
(13,0,1)
(34,97,1)
(41,26,1)
(26,98,1)
(98,6,1)
(61,16,1)
(21,9,1)
(32,96,1)
(79,41,1)
(37,54,1)
(12,18,1)
(87,33,1)
(70,87,1)
(35,49,1)
(36,38,1)
(78,94,1)
(98,13,1)
(39,25,1)
(27,55,1)
(58,28,1)
(76,46,1)
(34,29,1)
(27,24,1)
(94,28,1)
(5,19,1)
(38,84,1)
(9,29,1)
(93,30,1)
(21,20,1)
(72,64,1)
(49,90,1)
(93,22,1)
(6,5,1)
(89,68,1)
(42,76,1)
(12,29,1)
(25,62,1)
(62,70,1)
(95,17,1)
(14,44,1)
(10,66,1)
(64,69,1)
(83,74,1)
(5,65,1)
(47,63,1)
(9,82,1)
(56,98,1)
(44,59,1)
(84,20,1)
(29,37,1)
(22,23,1)
(23,40,1)
(46,43,1)
(68,51,1)
(50,10,1)
(69,56,1)
(30,29,1)
(55,24,1)
(80,27,1)
(74,36,1)
(56,79,1)
(51,35,1)
(65,83,1)
(28,86,1)
(82,12,1)
(0,6,1)
(97,91,1)
(86,50,1)
(40,30,1)
(49,73,1)
(73,14,1)
(66,53,1)
(30,95,1)
(33,81,1)
(71,42,1)
(28,6,1)
(24,47,1)
(15,81,1)
(17,29,1)
(25,33,1)
(54,89,1)
(20,11,1)
(90,78,1)
(53,80,1)
(37,6,1)
(13,20,2)
(84,20,2)
(74,20,2)
(83,74,2)
(82,20,2)
(65,20,2)
(81,6,2)
(35,20,2)
(34,97,2)
(5,19,2)
(22,30,2)
(36,20,2)
(93,20,2)
(43,20,2)
(9,20,2)
(22,23,2)
(41,98,2)
(54,20,2)
(30,20,2)
(66,20,2)
(30,29,2)
(26,98,2)
(53,20,2)
(23,30,2)
(12,20,2)
(29,20,2)
(24,20,2)
(34,20,2)
(16,20,2)
(47,63,2)
(80,20,2)
(63,6,2)
(95,20,2)
(12,29,2)
(71,20,2)
(34,29,2)
(14,94,2)
(58,20,2)
(33,20,2)
(0,20,2)
(68,20,2)
(38,20,2)
(33,81,2)
(78,94,2)
(97,20,2)
(6,5,2)
(76,20,2)
(40,30,2)
(28,20,2)
(90,94,2)
(24,47,2)
(10,20,2)
(83,20,2)
(70,33,2)
(18,20,2)
(25,20,2)
(56,20,2)
(42,20,2)
(39,20,2)
(27,20,2)
(89,20,2)
(47,20,2)
(54,89,2)
(63,20,2)
(15,20,2)
(55,24,2)
(6,20,2)
(17,20,2)
(91,20,2)
(94,20,2)
(9,29,2)
(46,20,2)
(28,6,2)
(50,20,2)
(72,20,2)
(96,20,2)
(69,20,2)
(62,33,2)
(32,20,2)
(51,20,2)
(79,98,2)
(59,94,2)
(65,83,2)
(97,91,2)
(81,20,2)
(79,41,2)
(87,33,2)
(86,20,2)
(64,20,2)
(5,20,2)
(37,6,2)
(37,54,2)
(49,20,2)
(98,6,2)
(98,20,2)
(73,94,2)
(94,28,2)
(61,20,2)
(37,20,2)
(44,94,2)
(5,65,2)
(29,37,2)
(28,86,2)
-----------------------------------
(0,password)
(1,hUser)
(2,if (password == NULL)
(3,password)
(4,)
(5,(wchar_t *)
(6,* password = (wchar_t *)
(7,)
(8,)
(9,free(password)
(10,LOGON32_PROVIDER_DEFAULT)
(11,5)
(12,printWLine(password)
(13,NULL)
(14,hUser)
(15,NULL)
(16,200)
(17,password)
(18,password)
(19,wchar_t *)
(20,5==5)
(21,RET)
(22,exit(-1)
(23,-1)
(24,passwordLen > 0)
(25,passwordLen)
(26,1)
(27,username)
(28,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(29,password = realloc(password, 200 * sizeof(wchar_t)
(30,password == NULL)
(31,)
(32,0)
(33,fgetws(password, 100, stdin)
(34,SecureZeroMemory(password, 200 * sizeof(wchar_t)
(35,password)
(36,wchar_t)
(37,realloc(password, 200 * sizeof(wchar_t)
(38,100)
(39,password)
(40,1)
(41,-1)
(42,100)
(43,"Domain")
(44,printLine("User logged in successfully.")
(45,passwordLen)
(46,\\\'\\\\0\\\')
(47,passwordLen = wcslen(password)
(48,)
(49,password)
(50,hUser)
(51,200)
(52,if(5==5)
(53,password)
(54,200 * sizeof(wchar_t)
(55,\\\'\\\\0\\\')
(56,passwordLen)
(57,)
(58,0)
(59,"User logged in successfully.")
(60,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(61,wchar_t)
(62,\\\'\\\\0\\\')
(63,wcslen(password)
(64,passwordLen = 0)
(65,malloc(100*sizeof(wchar_t)
(66,LOGON32_LOGON_NETWORK)
(67,5)
(68,wchar_t)
(69,0)
(70,printLine("fgetws()
(71,stdin)
(72,"User")
(73,CloseHandle(hUser)
(74,sizeof(wchar_t)
(75,if (fgetws(password, 100, stdin)
(76,password)
(77,if (password == NULL)
(78,"Unable to login.")
(79,exit(-1)
(80,domain)
(81,fgetws(password, 100, stdin)
(82,password)
(83,100*sizeof(wchar_t)
(84,password)
(85,)
(86,&hUser)
(87,"fgetws()
(88,)
(89,sizeof(wchar_t)
(90,printLine("Unable to login.")
(91,sizeof(wchar_t)
(92,)
(93,password)
(94,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(95,NULL)
(96,passwordLen)
(97,200 * sizeof(wchar_t)
(98,password == NULL)
(99,if (passwordLen > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
