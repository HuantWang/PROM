-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_16_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    while(1)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
        break;
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
30,31
30,32
30,33
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
50,51
50,52
51,52
51,53
52,53
52,54
54,55
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
62,65
63,64
65,66
68,69
68,70
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
77,79
77,80
77,81
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
89,90
90,91
90,92
92,93
94,95
96,97
98,99
98,100
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,40,42,46,48,49,53,55,56,61,64,66,67,71,73,79,82,84,87,88,91,93,95,97,102,103,108,110,111,115,117,118,122,124
-----computeFrom-----
22,23
22,24
51,52
51,53
52,53
52,54
59,60
59,61
69,70
69,71
76,77
76,78
80,81
80,82
90,91
90,92
105,106
105,107
-----guardedBy-----
55,110
73,97
71,117
82,108
93,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_16_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_16_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_16_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
1
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(14,3,0)
(61,25,0)
(58,3,0)
(32,53,0)
(22,5,0)
(40,5,0)
(55,25,0)
(42,31,0)
(16,43,0)
(60,57,0)
(17,15,0)
(30,48,0)
(56,5,0)
(14,35,0)
(50,5,0)
(9,48,0)
(26,4,0)
(15,3,0)
(7,61,0)
(39,56,0)
(3,58,0)
(43,3,0)
(57,15,0)
(57,19,0)
(34,29,0)
(56,4,0)
(57,23,0)
(59,20,0)
(36,57,0)
(44,58,0)
(25,3,0)
(27,20,0)
(45,25,0)
(35,37,0)
(46,60,0)
(53,5,0)
(11,0,0)
(60,46,0)
(38,43,0)
(28,47,0)
(15,56,0)
(20,19,0)
(49,4,0)
(14,56,0)
(8,31,0)
(3,48,0)
(12,13,0)
(33,15,0)
(47,37,0)
(6,48,0)
(10,18,0)
(19,31,0)
(52,14,0)
(53,56,0)
(43,60,0)
(31,19,0)
(23,57,0)
(1,23,0)
(51,14,0)
(58,56,0)
(21,56,0)
(25,61,0)
(57,60,0)
(4,5,0)
(54,19,0)
(41,35,0)
(24,3,0)
(15,57,0)
(19,0,0)
(13,29,0)
(48,18,0)
(13,19,0)
(60,43,0)
(35,41,1)
(28,23,1)
(56,4,1)
(2,53,1)
(44,24,1)
(43,3,1)
(17,33,1)
(20,19,1)
(10,13,1)
(45,55,1)
(12,35,1)
(56,39,1)
(59,19,1)
(55,3,1)
(23,1,1)
(47,28,1)
(53,32,1)
(25,45,1)
(27,59,1)
(15,17,1)
(21,4,1)
(53,56,1)
(16,15,1)
(19,31,1)
(60,46,1)
(57,36,1)
(33,20,1)
(32,62,1)
(25,3,1)
(36,60,1)
(7,25,1)
(1,57,1)
(23,57,1)
(61,25,1)
(58,44,1)
(20,27,1)
(14,3,1)
(42,54,1)
(32,10,1)
(62,56,1)
(49,26,1)
(15,56,1)
(3,58,1)
(12,23,1)
(8,42,1)
(58,56,1)
(13,12,1)
(43,38,1)
(60,43,1)
(57,15,1)
(52,51,1)
(57,19,1)
(13,19,1)
(24,62,1)
(54,61,1)
(15,3,1)
(14,52,1)
(41,14,1)
(4,49,1)
(14,56,1)
(39,21,1)
(10,61,1)
(31,8,1)
(10,20,1)
(51,47,1)
(57,60,1)
(61,7,1)
(38,16,1)
(35,23,2)
(14,3,2)
(3,62,2)
(57,20,2)
(59,61,2)
(57,19,2)
(27,61,2)
(24,62,2)
(15,20,2)
(13,19,2)
(3,58,2)
(31,61,2)
(53,56,2)
(42,61,2)
(44,62,2)
(61,62,2)
(52,23,2)
(25,62,2)
(51,23,2)
(7,62,2)
(55,62,2)
(60,46,2)
(8,61,2)
(25,3,2)
(60,43,2)
(17,20,2)
(15,3,2)
(28,23,2)
(20,19,2)
(14,23,2)
(20,61,2)
(12,20,2)
(10,62,2)
(13,20,2)
(19,31,2)
(58,56,2)
(19,61,2)
(47,23,2)
(23,20,2)
(1,20,2)
(61,25,2)
(57,60,2)
(23,57,2)
(41,23,2)
(58,62,2)
(60,20,2)
(57,15,2)
(38,20,2)
(54,61,2)
(45,62,2)
(15,56,2)
(16,20,2)
(36,20,2)
(33,20,2)
(14,56,2)
(56,4,2)
(43,20,2)
(43,3,2)
-----------------------------------
(0,)
(1,NULL)
(2,RET)
(3,dataLen = strlen(data)
(4,dataBuffer[250] = "PATH=")
(5,)
(6,if (250-dataLen > 1)
(7,1)
(8,"r")
(9,pFile)
(10,break;)
(11,if (pFile != NULL)
(12,pFile)
(13,fclose(pFile)
(14,data[dataLen])
(15,data+dataLen)
(16,250)
(17,dataLen)
(18,)
(19,pFile = fopen(FILENAME, "r")
(20,pFile != NULL)
(21,data)
(22,dataBuffer)
(23,fgets(data+dataLen, (int)
(24,dataLen)
(25,250-dataLen)
(26,dataBuffer)
(27,NULL)
(28,"fgets()
(29,)
(30,dataLen)
(31,fopen(FILENAME, "r")
(32,data)
(33,data)
(34,if (fgets(data+dataLen, (int)
(35,data[dataLen] = \\\'\\\\0\\\')
(36,pFile)
(37,)
(38,dataLen)
(39,dataBuffer)
(40,while(1)
(41,\\\'\\\\0\\\')
(42,FILENAME)
(43,250-dataLen)
(44,data)
(45,dataLen)
(46,int)
(47,printLine("fgets()
(48,)
(49,"PATH=")
(50,data)
(51,data)
(52,dataLen)
(53,PUTENV(data)
(54,pFile)
(55,250)
(56,data = dataBuffer)
(57,fgets(data+dataLen, (int)
(58,strlen(data)
(59,pFile)
(60,(int)
(61,250-dataLen > 1)
(62,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
