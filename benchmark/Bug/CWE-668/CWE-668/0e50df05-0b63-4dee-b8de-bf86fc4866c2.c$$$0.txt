-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_68_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data;
    CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126,130
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
122,123
122,124
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_68_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink();}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_68_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_68_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data;
CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data
CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData
CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData
data
data
CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink();
CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink()
CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink
-----joern-----
(36,10,0)
(29,35,0)
(71,6,0)
(23,48,0)
(71,51,0)
(35,55,0)
(38,60,0)
(69,64,0)
(0,46,0)
(42,45,0)
(30,61,0)
(3,28,0)
(51,53,0)
(18,51,0)
(45,34,0)
(62,45,0)
(40,32,0)
(47,25,0)
(11,10,0)
(62,58,0)
(9,61,0)
(60,41,0)
(61,30,0)
(10,34,0)
(15,22,0)
(62,60,0)
(65,20,0)
(58,14,0)
(17,5,0)
(59,5,0)
(2,43,0)
(0,20,0)
(32,46,0)
(71,58,0)
(66,62,0)
(7,45,0)
(44,53,0)
(0,49,0)
(20,0,0)
(35,58,0)
(46,0,0)
(34,22,0)
(18,58,0)
(5,34,0)
(32,51,0)
(39,71,0)
(57,58,0)
(19,20,0)
(31,55,0)
(72,6,0)
(5,17,0)
(52,14,0)
(68,35,0)
(1,55,0)
(45,62,0)
(20,51,0)
(10,36,0)
(50,34,0)
(49,0,0)
(56,18,0)
(21,36,0)
(58,55,0)
(8,58,0)
(28,17,0)
(46,48,0)
(70,55,0)
(27,71,0)
(53,55,0)
(36,58,0)
(61,51,0)
(24,30,0)
(67,51,0)
(36,28,0)
(54,14,0)
(28,36,0)
(34,25,0)
(48,46,0)
(6,26,0)
(51,18,0)
(33,32,0)
(14,55,0)
(32,58,0)
(4,10,0)
(22,58,0)
(16,53,0)
(63,5,0)
(17,28,0)
(13,61,0)
(22,34,0)
(46,32,0)
(12,46,0)
(64,26,0)
(36,10,1)
(9,51,1)
(62,45,1)
(35,29,1)
(72,71,1)
(27,64,1)
(20,51,1)
(62,58,1)
(33,40,1)
(42,66,1)
(10,34,1)
(24,61,1)
(71,51,1)
(32,58,1)
(28,3,1)
(58,8,1)
(40,30,1)
(45,7,1)
(19,32,1)
(11,21,1)
(5,59,1)
(68,60,1)
(22,58,1)
(66,17,1)
(39,27,1)
(13,9,1)
(57,14,1)
(48,23,1)
(48,46,1)
(23,46,1)
(8,57,1)
(0,20,1)
(64,69,1)
(3,36,1)
(12,0,1)
(68,6,1)
(37,1,1)
(46,32,1)
(71,58,1)
(65,19,1)
(18,58,1)
(46,0,1)
(21,5,1)
(51,18,1)
(17,5,1)
(4,11,1)
(71,39,1)
(18,56,1)
(61,13,1)
(52,54,1)
(22,15,1)
(34,22,1)
(1,35,1)
(59,63,1)
(58,14,1)
(38,62,1)
(35,58,1)
(56,67,1)
(50,48,1)
(32,51,1)
(14,52,1)
(60,38,1)
(46,12,1)
(45,34,1)
(5,34,1)
(7,42,1)
(20,65,1)
(61,51,1)
(67,58,1)
(30,61,1)
(30,24,1)
(17,28,1)
(63,34,1)
(68,30,1)
(36,58,1)
(29,68,1)
(28,36,1)
(32,33,1)
(6,72,1)
(68,17,1)
(0,49,1)
(15,50,1)
(10,4,1)
(69,48,1)
(30,61,2)
(63,48,2)
(19,30,2)
(39,48,2)
(0,20,2)
(15,48,2)
(45,34,2)
(62,17,2)
(36,5,2)
(34,48,2)
(28,5,2)
(42,17,2)
(32,58,2)
(61,51,2)
(22,48,2)
(20,30,2)
(5,34,2)
(27,48,2)
(17,5,2)
(48,46,2)
(64,48,2)
(50,48,2)
(34,22,2)
(40,30,2)
(18,58,2)
(6,48,2)
(48,30,2)
(0,49,2)
(58,14,2)
(45,17,2)
(72,48,2)
(28,36,2)
(23,30,2)
(17,28,2)
(59,48,2)
(3,5,2)
(21,5,2)
(66,17,2)
(65,30,2)
(12,30,2)
(71,48,2)
(10,5,2)
(35,58,2)
(36,10,2)
(36,58,2)
(46,0,2)
(51,18,2)
(5,48,2)
(33,30,2)
(4,5,2)
(60,17,2)
(0,30,2)
(7,17,2)
(62,45,2)
(38,17,2)
(69,48,2)
(10,34,2)
(46,30,2)
(22,58,2)
(17,48,2)
(32,30,2)
(71,51,2)
(62,58,2)
(46,32,2)
(71,58,2)
(20,51,2)
(11,5,2)
(32,51,2)
-----------------------------------
(0,(int)
(1,CWE427_Uncontrolled_Search_Path_Element__char_console_68b_badSink()
(2,if (fgets(data+dataLen, (int)
(3,\\\'\\\\n\\\')
(4,1)
(5,dataLen > 0)
(6,data[dataLen] = \\\'\\\\0\\\')
(7,1)
(8,dataBuffer)
(9,250)
(10,dataLen-1)
(11,dataLen)
(12,stdin)
(13,dataLen)
(14,dataBuffer[250] = "PATH=")
(15,data)
(16,dataLen)
(17,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,strlen(data)
(19,250)
(20,250-dataLen)
(21,data)
(22,strlen(data)
(23,NULL)
(24,1)
(25,)
(26,)
(27,data)
(28,data[dataLen-1] == \\\'\\\\n\\\')
(29,data)
(30,250-dataLen > 1)
(31,data)
(32,data+dataLen)
(33,dataLen)
(34,dataLen = strlen(data)
(35,CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData = data)
(36,data[dataLen-1])
(37,RET)
(38,\\\'\\\\0\\\')
(39,dataLen)
(40,data)
(41,)
(42,dataLen)
(43,)
(44,if (250-dataLen > 1)
(45,dataLen-1)
(46,fgets(data+dataLen, (int)
(47,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(48,fgets(data+dataLen, (int)
(49,int)
(50,dataLen)
(51,dataLen = strlen(data)
(52,"PATH=")
(53,)
(54,dataBuffer)
(55,)
(56,data)
(57,data)
(58,data = dataBuffer)
(59,0)
(60,data[dataLen-1] = \\\'\\\\0\\\')
(61,250-dataLen)
(62,data[dataLen-1])
(63,dataLen)
(64,printLine("fgets()
(65,dataLen)
(66,data)
(67,dataLen)
(68,CWE427_Uncontrolled_Search_Path_Element__char_console_68_badData)
(69,"fgets()
(70,dataBuffer)
(71,data[dataLen])
(72,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
