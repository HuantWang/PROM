-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (250-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(20,7,0)
(40,27,0)
(30,5,0)
(2,42,0)
(10,11,0)
(18,16,0)
(7,8,0)
(39,7,0)
(29,20,0)
(0,15,0)
(45,49,0)
(41,23,0)
(17,8,0)
(32,5,0)
(12,28,0)
(36,23,0)
(16,49,0)
(21,25,0)
(8,46,0)
(5,32,0)
(36,11,0)
(42,2,0)
(50,32,0)
(9,8,0)
(47,1,0)
(2,26,0)
(26,49,0)
(26,2,0)
(37,41,0)
(15,26,0)
(24,26,0)
(26,41,0)
(1,13,0)
(27,49,0)
(36,7,0)
(32,7,0)
(41,7,0)
(51,8,0)
(43,46,0)
(11,13,0)
(44,31,0)
(38,23,0)
(6,43,0)
(2,20,0)
(16,28,0)
(41,26,0)
(48,27,0)
(34,36,0)
(19,31,0)
(43,23,0)
(49,27,0)
(20,2,0)
(14,41,0)
(33,38,0)
(22,43,0)
(31,49,0)
(38,7,0)
(7,38,0)
(49,25,0)
(3,20,0)
(4,36,0)
(35,32,0)
(26,15,0)
(24,2,1)
(15,0,1)
(47,15,1)
(26,2,1)
(2,42,1)
(5,32,1)
(33,39,1)
(41,37,1)
(32,50,1)
(41,23,1)
(18,11,1)
(2,20,1)
(22,31,1)
(18,15,1)
(50,35,1)
(20,3,1)
(38,33,1)
(16,18,1)
(36,23,1)
(10,36,1)
(6,43,1)
(22,16,1)
(35,7,1)
(3,29,1)
(34,1,1)
(14,31,1)
(36,7,1)
(49,27,1)
(15,26,1)
(1,47,1)
(5,30,1)
(26,49,1)
(32,7,1)
(16,49,1)
(41,7,1)
(30,32,1)
(27,48,1)
(19,49,1)
(0,26,1)
(4,34,1)
(37,14,1)
(26,24,1)
(36,4,1)
(44,19,1)
(11,10,1)
(22,5,1)
(31,49,1)
(43,22,1)
(29,41,1)
(20,7,1)
(43,23,1)
(45,5,1)
(26,41,1)
(31,44,1)
(40,45,1)
(38,23,1)
(48,40,1)
(7,38,1)
(49,27,2)
(41,23,2)
(1,15,2)
(2,20,2)
(29,31,2)
(16,49,2)
(6,43,2)
(15,31,2)
(19,5,2)
(41,7,2)
(0,31,2)
(40,5,2)
(45,5,2)
(48,5,2)
(16,31,2)
(20,7,2)
(4,15,2)
(43,23,2)
(10,15,2)
(14,31,2)
(18,31,2)
(27,5,2)
(44,5,2)
(7,38,2)
(38,23,2)
(49,5,2)
(31,5,2)
(37,31,2)
(3,31,2)
(36,15,2)
(32,7,2)
(20,31,2)
(24,31,2)
(41,31,2)
(26,2,2)
(5,32,2)
(26,31,2)
(34,15,2)
(26,41,2)
(36,23,2)
(31,49,2)
(2,42,2)
(2,31,2)
(26,49,2)
(47,15,2)
(36,7,2)
(15,26,2)
(11,15,2)
-----------------------------------
(0,NULL)
(1,printLine("fgets()
(2,(int)
(3,dataLen)
(4,dataLen)
(5,250-dataLen > 1)
(6,RET)
(7,dataLen = strlen(data)
(8,)
(9,if (250-dataLen > 1)
(10,\\\'\\\\0\\\')
(11,data[dataLen] = \\\'\\\\0\\\')
(12,if (fgets(data+dataLen, (int)
(13,)
(14,data)
(15,fgets(data+dataLen, (int)
(16,fclose(pFile)
(17,dataLen)
(18,pFile)
(19,pFile)
(20,250-dataLen)
(21,if (pFile != NULL)
(22,data)
(23,char * data)
(24,pFile)
(25,)
(26,fgets(data+dataLen, (int)
(27,fopen(FILENAME, "r")
(28,)
(29,250)
(30,1)
(31,pFile != NULL)
(32,250-dataLen)
(33,data)
(34,data)
(35,250)
(36,data[dataLen])
(37,dataLen)
(38,strlen(data)
(39,dataLen)
(40,FILENAME)
(41,data+dataLen)
(42,int)
(43,return data;)
(44,NULL)
(45,pFile)
(46,)
(47,"fgets()
(48,"r")
(49,pFile = fopen(FILENAME, "r")
(50,dataLen)
(51,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
