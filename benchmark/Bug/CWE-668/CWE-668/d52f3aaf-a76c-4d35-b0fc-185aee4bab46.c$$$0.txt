-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
        PUTENV(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
73,75
74,75
74,76
75,76
75,77
77,78
80,81
81,82
81,83
81,84
82,83
82,84
83,84
83,85
83,86
83,87
84,85
86,87
86,88
87,88
89,90
91,92
91,93
92,93
92,94
95,96
96,97
96,98
98,99
100,101
102,103
104,105
104,106
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
114,115
114,116
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
121,123
122,123
124,125
124,126
125,126
129,130
130,131
131,132
131,133
132,133
132,134
133,134
135,136
135,137
136,137
140,141
140,142
141,142
142,143
142,144
143,144
146,147
147,148
147,149
148,149
148,150
149,150
151,152
154,155
155,156
155,157
156,157
157,158
159,160
161,162
161,163
162,163
163,164
163,165
165,166
165,167
165,168
168,169
169,170
170,171
172,173
173,174
173,175
174,175
176,177
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,42,46,48,52,54,55,59,64,66,70,72,76,78,79,85,88,90,93,94,97,99,101,103,108,111,113,118,119,123,126,127,128,134,137,138,139,144,145,150,152,153,158,160,164,166,167,171,175,177
-----computeFrom-----
44,45
44,46
74,75
74,76
75,76
75,77
82,83
82,84
86,87
86,88
96,97
96,98
106,107
106,108
115,116
115,117
116,117
116,118
120,121
120,122
124,125
124,126
131,132
131,133
135,136
135,137
147,148
147,149
155,156
155,157
-----guardedBy-----
78,152
88,134
99,137
123,134
126,137
-----guardedByNegation-----
88,150
99,152
-----lastLexicalUse-----
88,150
99,152
-----jump-----
88,150
99,152
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_32_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(92,19,0)
(57,77,0)
(86,16,0)
(39,26,0)
(47,40,0)
(6,21,0)
(19,44,0)
(43,54,0)
(13,91,0)
(25,67,0)
(53,20,0)
(32,65,0)
(90,23,0)
(25,60,0)
(62,34,0)
(18,2,0)
(59,71,0)
(72,85,0)
(76,21,0)
(67,25,0)
(81,5,0)
(52,89,0)
(96,90,0)
(11,34,0)
(22,71,0)
(31,93,0)
(35,33,0)
(9,60,0)
(82,66,0)
(51,36,0)
(85,72,0)
(43,85,0)
(79,43,0)
(81,54,0)
(4,26,0)
(44,91,0)
(75,54,0)
(72,2,0)
(5,93,0)
(23,36,0)
(28,12,0)
(34,54,0)
(41,19,0)
(3,23,0)
(12,26,0)
(87,76,0)
(78,54,0)
(26,36,0)
(27,78,0)
(91,14,0)
(83,85,0)
(95,93,0)
(60,36,0)
(67,50,0)
(61,67,0)
(16,77,0)
(31,14,0)
(15,2,0)
(20,65,0)
(85,83,0)
(46,9,0)
(54,39,0)
(56,25,0)
(34,76,0)
(55,39,0)
(4,90,0)
(72,7,0)
(90,54,0)
(58,26,0)
(73,85,0)
(70,5,0)
(26,12,0)
(94,44,0)
(71,23,0)
(24,67,0)
(14,91,0)
(24,50,0)
(30,24,0)
(44,54,0)
(45,50,0)
(8,31,0)
(81,66,0)
(10,36,0)
(69,49,0)
(74,83,0)
(40,36,0)
(63,31,0)
(21,54,0)
(2,72,0)
(49,36,0)
(2,76,0)
(93,89,0)
(91,44,0)
(60,9,0)
(14,31,0)
(76,71,0)
(38,43,0)
(80,36,0)
(65,20,0)
(54,23,0)
(7,72,0)
(1,81,0)
(19,93,0)
(50,36,0)
(93,78,0)
(44,19,0)
(65,76,0)
(66,0,0)
(49,40,0)
(37,40,0)
(39,54,0)
(68,57,0)
(48,60,0)
(85,43,0)
(29,36,0)
(64,49,0)
(43,76,0)
(17,5,0)
(5,81,0)
(34,57,0)
(78,93,0)
(84,65,0)
(42,4,0)
(21,76,0)
(25,56,1)
(65,76,1)
(9,46,1)
(53,65,1)
(21,54,1)
(39,55,1)
(48,26,1)
(21,6,1)
(69,64,1)
(44,54,1)
(66,82,1)
(44,19,1)
(11,16,1)
(79,20,1)
(42,66,1)
(30,67,1)
(20,53,1)
(46,48,1)
(88,24,1)
(14,31,1)
(86,83,1)
(12,28,1)
(65,32,1)
(5,93,1)
(25,60,1)
(63,8,1)
(93,78,1)
(2,18,1)
(43,38,1)
(90,54,1)
(75,49,1)
(18,15,1)
(43,76,1)
(90,96,1)
(81,5,1)
(68,34,1)
(31,93,1)
(28,58,1)
(83,74,1)
(60,9,1)
(95,83,1)
(42,20,1)
(56,61,1)
(15,43,1)
(85,73,1)
(67,25,1)
(32,84,1)
(47,60,1)
(34,76,1)
(1,14,1)
(78,27,1)
(61,90,1)
(34,54,1)
(76,21,1)
(26,12,1)
(19,93,1)
(5,70,1)
(64,40,1)
(84,76,1)
(72,2,1)
(54,39,1)
(94,31,1)
(85,72,1)
(62,11,1)
(91,13,1)
(4,26,1)
(87,54,1)
(92,41,1)
(27,95,1)
(40,37,1)
(96,4,1)
(42,57,1)
(43,54,1)
(81,54,1)
(49,40,1)
(24,67,1)
(74,85,1)
(13,44,1)
(34,62,1)
(49,69,1)
(2,76,1)
(82,81,1)
(73,72,1)
(38,79,1)
(4,42,1)
(70,17,1)
(19,92,1)
(31,63,1)
(39,26,1)
(20,65,1)
(24,30,1)
(37,47,1)
(41,94,1)
(83,85,1)
(8,93,1)
(6,87,1)
(78,54,1)
(55,75,1)
(91,44,1)
(57,68,1)
(42,14,1)
(16,86,1)
(17,1,1)
(72,7,1)
(85,43,1)
(14,91,1)
(31,83,2)
(14,83,2)
(93,78,2)
(43,20,2)
(79,20,2)
(5,93,2)
(86,83,2)
(72,7,2)
(63,83,2)
(70,14,2)
(41,31,2)
(2,20,2)
(13,31,2)
(72,2,2)
(34,83,2)
(81,5,2)
(26,12,2)
(85,20,2)
(20,65,2)
(38,20,2)
(72,20,2)
(14,91,2)
(95,83,2)
(21,54,2)
(14,31,2)
(65,76,2)
(68,83,2)
(92,31,2)
(1,14,2)
(34,76,2)
(19,31,2)
(54,39,2)
(67,25,2)
(25,60,2)
(31,93,2)
(49,40,2)
(83,85,2)
(60,9,2)
(17,14,2)
(91,44,2)
(15,20,2)
(18,20,2)
(43,54,2)
(90,54,2)
(85,43,2)
(81,54,2)
(85,72,2)
(78,83,2)
(44,31,2)
(5,14,2)
(82,14,2)
(74,20,2)
(91,31,2)
(2,76,2)
(34,54,2)
(78,54,2)
(57,83,2)
(44,54,2)
(93,83,2)
(19,93,2)
(24,67,2)
(39,26,2)
(16,83,2)
(43,76,2)
(94,31,2)
(8,83,2)
(83,20,2)
(4,26,2)
(81,14,2)
(27,83,2)
(44,19,2)
(11,83,2)
(66,14,2)
(62,83,2)
(76,21,2)
(73,20,2)
-----------------------------------
(0,)
(1,data)
(2,250-dataLen)
(3,data)
(4,*dataPtr1)
(5,dataLen-1)
(6,data)
(7,int)
(8,dataLen)
(9,&data)
(10,data)
(11,data)
(12,&data)
(13,\\\'\\\\n\\\')
(14,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(15,250)
(16,printLine("fgets()
(17,dataLen)
(18,dataLen)
(19,dataLen-1)
(20,250-dataLen > 1)
(21,strlen(data)
(22,dataLen)
(23,)
(24,PUTENV(data)
(25,*dataPtr2)
(26,* *dataPtr1 = &data)
(27,data)
(28,data)
(29,dataBuffer)
(30,data)
(31,dataLen > 0)
(32,dataLen)
(33,)
(34,data[dataLen])
(35,if (fgets(data+dataLen, (int)
(36,)
(37,"PATH=")
(38,dataLen)
(39,*dataPtr1)
(40,dataBuffer[250] = "PATH=")
(41,dataLen)
(42,dataPtr1)
(43,data+dataLen)
(44,data[dataLen-1])
(45,data)
(46,data)
(47,dataBuffer)
(48,dataPtr2)
(49,data = dataBuffer)
(50,)
(51,dataPtr1)
(52,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,1)
(54,* data = *dataPtr1)
(55,dataPtr1)
(56,dataPtr2)
(57,data[dataLen] = \\\'\\\\0\\\')
(58,dataPtr1)
(59,if (250-dataLen > 1)
(60,* *dataPtr2 = &data)
(61,data)
(62,dataLen)
(63,0)
(64,data)
(65,250-dataLen)
(66,data[dataLen-1] = \\\'\\\\0\\\')
(67,* data = *dataPtr2)
(68,\\\'\\\\0\\\')
(69,dataBuffer)
(70,1)
(71,)
(72,(int)
(73,stdin)
(74,NULL)
(75,data)
(76,dataLen = strlen(data)
(77,)
(78,strlen(data)
(79,data)
(80,dataPtr2)
(81,data[dataLen-1])
(82,\\\'\\\\0\\\')
(83,fgets(data+dataLen, (int)
(84,250)
(85,fgets(data+dataLen, (int)
(86,"fgets()
(87,dataLen)
(88,RET)
(89,)
(90,*dataPtr1 = data)
(91,data[dataLen-1] == \\\'\\\\n\\\')
(92,1)
(93,dataLen = strlen(data)
(94,data)
(95,dataLen)
(96,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
