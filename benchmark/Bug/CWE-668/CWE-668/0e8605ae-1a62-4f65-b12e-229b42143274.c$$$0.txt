-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_13_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,132
-----computeFrom-----
22,23
22,24
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_13_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_13_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_13_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(28,3,0)
(56,46,0)
(0,18,0)
(16,61,0)
(37,49,0)
(53,49,0)
(31,66,0)
(8,49,0)
(65,35,0)
(35,44,0)
(62,13,0)
(8,48,0)
(63,6,0)
(64,35,0)
(17,30,0)
(60,57,0)
(51,6,0)
(68,33,0)
(36,22,0)
(73,22,0)
(20,47,0)
(9,53,0)
(34,13,0)
(49,8,0)
(66,13,0)
(33,68,0)
(11,45,0)
(23,72,0)
(2,25,0)
(30,17,0)
(21,72,0)
(46,8,0)
(49,6,0)
(21,7,0)
(71,3,0)
(5,65,0)
(65,20,0)
(75,21,0)
(42,20,0)
(45,20,0)
(14,68,0)
(3,57,0)
(6,7,0)
(38,7,0)
(65,7,0)
(12,54,0)
(27,33,0)
(45,7,0)
(20,22,0)
(30,4,0)
(29,46,0)
(32,47,0)
(61,40,0)
(1,47,0)
(66,20,0)
(55,20,0)
(72,21,0)
(66,17,0)
(54,44,0)
(15,74,0)
(26,4,0)
(4,30,0)
(3,28,0)
(7,45,0)
(17,66,0)
(24,17,0)
(50,43,0)
(41,21,0)
(28,20,0)
(67,28,0)
(59,4,0)
(33,25,0)
(33,20,0)
(46,7,0)
(25,69,0)
(10,61,0)
(4,3,0)
(39,22,0)
(70,68,0)
(7,61,0)
(58,65,0)
(6,49,0)
(13,3,0)
(13,66,0)
(8,46,0)
(43,22,0)
(49,53,0)
(19,74,0)
(48,8,0)
(6,20,0)
(47,22,0)
(43,20,0)
(68,3,0)
(9,49,1)
(28,20,1)
(68,3,1)
(54,12,1)
(56,29,1)
(58,5,1)
(63,72,1)
(31,4,1)
(74,19,1)
(42,47,1)
(6,7,1)
(14,70,1)
(30,4,1)
(50,72,1)
(20,47,1)
(72,23,1)
(41,7,1)
(55,42,1)
(49,37,1)
(15,20,1)
(46,7,1)
(35,64,1)
(7,45,1)
(46,56,1)
(5,54,1)
(38,74,1)
(4,59,1)
(24,66,1)
(21,75,1)
(43,20,1)
(50,30,1)
(13,34,1)
(72,21,1)
(71,53,1)
(17,66,1)
(6,20,1)
(65,7,1)
(50,25,1)
(65,58,1)
(50,35,1)
(8,48,1)
(49,8,1)
(53,9,1)
(17,24,1)
(68,14,1)
(23,21,1)
(33,20,1)
(49,6,1)
(26,3,1)
(70,27,1)
(47,1,1)
(59,26,1)
(2,33,1)
(45,20,1)
(65,20,1)
(28,67,1)
(6,51,1)
(27,30,1)
(30,17,1)
(52,43,1)
(34,62,1)
(13,3,1)
(33,68,1)
(45,11,1)
(29,6,1)
(43,50,1)
(75,41,1)
(21,7,1)
(3,28,1)
(62,31,1)
(66,13,1)
(11,38,1)
(64,65,1)
(37,8,1)
(67,71,1)
(25,2,1)
(1,32,1)
(50,74,1)
(4,3,1)
(20,55,1)
(51,63,1)
(8,46,1)
(19,15,1)
(12,53,1)
(53,49,1)
(66,20,1)
(34,4,2)
(43,20,2)
(65,20,2)
(37,72,2)
(13,4,2)
(75,74,2)
(25,30,2)
(65,7,2)
(21,7,2)
(28,53,2)
(58,53,2)
(65,53,2)
(49,6,2)
(6,72,2)
(21,74,2)
(67,53,2)
(33,30,2)
(7,45,2)
(30,4,2)
(11,74,2)
(6,20,2)
(72,74,2)
(24,4,2)
(56,72,2)
(51,72,2)
(20,47,2)
(6,7,2)
(72,21,2)
(41,74,2)
(30,53,2)
(62,4,2)
(5,53,2)
(8,48,2)
(66,13,2)
(27,30,2)
(64,53,2)
(3,53,2)
(66,4,2)
(8,46,2)
(70,30,2)
(45,20,2)
(2,30,2)
(17,4,2)
(14,30,2)
(26,53,2)
(29,72,2)
(30,17,2)
(49,8,2)
(68,30,2)
(17,66,2)
(49,72,2)
(66,20,2)
(54,53,2)
(46,72,2)
(59,53,2)
(8,72,2)
(33,20,2)
(33,68,2)
(31,4,2)
(35,53,2)
(46,7,2)
(28,20,2)
(45,74,2)
(12,53,2)
(71,53,2)
(68,3,2)
(63,72,2)
(53,49,2)
(13,3,2)
(4,3,2)
(9,72,2)
(23,74,2)
(53,72,2)
(38,74,2)
(4,53,2)
(7,74,2)
(3,28,2)
-----------------------------------
(0,if (fgets(data+dataLen, (int)
(1,"PATH=")
(2,\\\'\\\\0\\\')
(3,dataLen = strlen(data)
(4,dataLen > 0)
(5,data)
(6,data+dataLen)
(7,dataLen = strlen(data)
(8,(int)
(9,NULL)
(10,if (250-dataLen > 1)
(11,data)
(12,"fgets()
(13,dataLen-1)
(14,1)
(15,GLOBAL_CONST_FIVE)
(16,dataLen)
(17,data[dataLen-1] == \\\'\\\\n\\\')
(18,)
(19,5)
(20,data = dataBuffer)
(21,250-dataLen)
(22,)
(23,1)
(24,\\\'\\\\n\\\')
(25,data[dataLen-1] = \\\'\\\\0\\\')
(26,dataLen)
(27,data)
(28,strlen(data)
(29,250)
(30,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(31,data)
(32,dataBuffer)
(33,data[dataLen-1])
(34,1)
(35,data[dataLen] = \\\'\\\\0\\\')
(36,data)
(37,stdin)
(38,dataLen)
(39,dataBuffer)
(40,)
(41,250)
(42,data)
(43,PUTENV(data)
(44,)
(45,strlen(data)
(46,250-dataLen)
(47,dataBuffer[250] = "PATH=")
(48,int)
(49,fgets(data+dataLen, (int)
(50,data)
(51,dataLen)
(52,RET)
(53,fgets(data+dataLen, (int)
(54,printLine("fgets()
(55,dataBuffer)
(56,dataLen)
(57,)
(58,dataLen)
(59,0)
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,)
(62,dataLen)
(63,data)
(64,\\\'\\\\0\\\')
(65,data[dataLen])
(66,data[dataLen-1])
(67,data)
(68,dataLen-1)
(69,)
(70,dataLen)
(71,dataLen)
(72,250-dataLen > 1)
(73,if(GLOBAL_CONST_FIVE==5)
(74,GLOBAL_CONST_FIVE==5)
(75,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
