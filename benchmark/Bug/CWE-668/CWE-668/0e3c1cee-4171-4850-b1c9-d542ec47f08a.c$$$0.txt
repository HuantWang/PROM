-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66_bad()
{
    wchar_t * data;
    wchar_t * dataArray[5];
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
36,37
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
77,78
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
84,87
84,88
84,89
84,90
84,91
84,92
84,93
84,94
84,95
84,96
84,97
84,98
84,99
84,100
84,101
85,86
86,87
86,88
87,88
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
98,99
98,100
99,100
99,101
100,101
102,103
104,105
106,107
107,108
107,109
107,110
107,111
108,109
110,111
111,112
114,115
115,116
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
126,127
127,128
127,129
128,129
128,130
129,130
129,131
130,131
134,135
136,137
137,138
137,139
138,139
138,140
139,140
142,143
142,144
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
149,153
150,151
152,153
154,155
154,156
155,156
155,157
156,157
158,159
160,161
161,162
163,164
164,165
165,166
167,168
169,170
171,172
171,173
172,173
172,174
173,174
173,175
173,176
174,175
176,177
178,179
180,181
182,183
184,185
185,186
185,187
186,187
188,189
188,190
188,191
188,192
189,190
191,192
193,194
195,196
197,198
197,199
198,199
198,200
199,200
201,202
203,204
205,206
206,207
206,208
207,208
209,210
209,211
209,212
209,213
209,214
210,211
212,213
214,215
214,216
215,216
215,217
217,218
219,220
220,221
220,222
221,222
223,224
225,226
225,227
226,227
227,228
227,229
230,231
231,232
231,233
232,233
232,234
234,235
238,239
238,240
239,240
239,241
240,241
240,242
241,242
243,244
245,246
245,247
246,247
249,250
251,252
252,253
252,254
253,254
253,255
254,255
256,257
256,258
257,258
259,260
259,261
260,261
262,263
263,264
263,265
267,268
268,269
268,270
269,270
271,272
271,273
271,274
272,273
274,275
277,278
277,279
278,279
280,281
281,282
282,283
282,284
283,284
284,285
287,288
288,289
288,290
289,290
291,292
291,293
291,294
292,293
294,295
297,298
297,299
298,299
300,301
301,302
302,303
302,304
303,304
304,305
308,309
308,310
309,310
309,311
310,311
312,313
314,315
315,316
316,317
316,318
317,318
319,320
321,322
321,323
322,323
322,324
323,324
325,326
327,328
328,329
329,330
329,331
330,331
332,333
334,335
335,336
335,337
336,337
336,338
337,338
340,341
342,343
343,344
343,345
344,345
346,347
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,28,32,34,38,40,44,46,49,51,52,56,58,61,65,67,70,74,76,80,82,88,91,93,95,97,101,103,105,109,112,113,117,122,123,125,131,132,133,135,140,141,144,146,151,153,157,159,162,166,168,170,175,177,179,181,183,187,190,192,194,196,200,202,204,208,211,213,216,218,222,224,228,229,233,235,236,237,242,244,247,248,250,255,258,261,264,265,266,270,273,275,276,279,285,286,290,293,295,296,299,305,306,307,311,313,318,320,324,326,331,333,338,339,341,345,347
-----computeFrom-----
30,31
30,32
86,87
86,88
99,100
99,101
119,120
119,121
127,128
127,129
137,138
137,139
148,149
148,150
172,173
172,174
185,186
185,187
198,199
198,200
206,207
206,208
220,221
220,222
225,226
225,227
231,232
231,233
232,233
232,234
239,240
239,241
240,241
240,242
245,246
245,247
252,253
252,254
256,257
256,258
259,260
259,261
268,269
268,270
282,283
282,284
288,289
288,290
302,303
302,304
309,310
309,311
322,323
322,324
335,336
335,337
-----guardedBy-----
311,320
324,333
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66_bad(){    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66_bad
{    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataArray[5];
wchar_t * dataArray[5];
wchar_t
* dataArray[5]
*
dataArray
[5]
5
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray);
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray)
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink
dataArray
dataArray
-----joern-----
(84,97,0)
(99,148,0)
(69,161,0)
(25,24,0)
(32,36,0)
(41,24,0)
(0,23,0)
(159,176,0)
(8,28,0)
(6,119,0)
(73,23,0)
(61,69,0)
(28,148,0)
(76,177,0)
(131,4,0)
(135,24,0)
(176,127,0)
(178,1,0)
(79,66,0)
(125,148,0)
(55,177,0)
(72,132,0)
(150,23,0)
(166,0,0)
(51,77,0)
(47,103,0)
(91,159,0)
(26,2,0)
(7,28,0)
(179,115,0)
(124,139,0)
(152,24,0)
(113,61,0)
(56,114,0)
(166,102,0)
(31,20,0)
(68,4,0)
(75,120,0)
(143,144,0)
(48,63,0)
(102,166,0)
(177,76,0)
(12,148,0)
(143,104,0)
(122,175,0)
(97,125,0)
(103,110,0)
(21,148,0)
(167,161,0)
(110,176,0)
(104,21,0)
(104,143,0)
(161,125,0)
(1,148,0)
(62,24,0)
(142,81,0)
(120,176,0)
(69,89,0)
(61,0,0)
(37,104,0)
(16,24,0)
(130,76,0)
(111,42,0)
(71,8,0)
(8,96,0)
(74,24,0)
(17,63,0)
(145,27,0)
(119,58,0)
(15,148,0)
(174,2,0)
(94,147,0)
(172,61,0)
(121,88,0)
(36,51,0)
(97,95,0)
(85,27,0)
(96,8,0)
(61,102,0)
(138,161,0)
(81,24,0)
(136,108,0)
(140,23,0)
(80,147,0)
(110,103,0)
(39,81,0)
(22,120,0)
(126,35,0)
(98,148,0)
(13,166,0)
(89,69,0)
(125,120,0)
(64,70,0)
(171,155,0)
(53,50,0)
(114,177,0)
(157,23,0)
(162,20,0)
(161,21,0)
(176,148,0)
(177,114,0)
(173,125,0)
(133,176,0)
(163,148,0)
(155,52,0)
(63,150,0)
(164,110,0)
(88,139,0)
(118,24,0)
(180,73,0)
(147,81,0)
(35,51,0)
(70,30,0)
(4,176,0)
(83,106,0)
(2,33,0)
(69,61,0)
(102,24,0)
(110,108,0)
(24,23,0)
(44,144,0)
(110,52,0)
(119,176,0)
(30,161,0)
(161,69,0)
(115,24,0)
(57,159,0)
(112,178,0)
(51,35,0)
(127,176,0)
(117,20,0)
(92,12,0)
(52,154,0)
(139,88,0)
(120,125,0)
(144,21,0)
(101,117,0)
(27,1,0)
(116,148,0)
(11,148,0)
(169,54,0)
(20,102,0)
(117,30,0)
(38,109,0)
(160,86,0)
(119,9,0)
(128,23,0)
(51,36,0)
(153,9,0)
(129,33,0)
(59,102,0)
(147,125,0)
(3,127,0)
(90,12,0)
(43,35,0)
(146,9,0)
(144,143,0)
(108,110,0)
(87,24,0)
(52,110,0)
(4,9,0)
(19,24,0)
(93,77,0)
(14,139,0)
(65,104,0)
(154,52,0)
(30,70,0)
(10,96,0)
(29,127,0)
(137,21,0)
(9,24,0)
(46,49,0)
(158,0,0)
(33,148,0)
(123,24,0)
(161,30,0)
(45,24,0)
(165,0,0)
(134,148,0)
(97,81,0)
(150,0,0)
(86,125,0)
(34,115,0)
(1,178,0)
(82,148,0)
(40,120,0)
(77,51,0)
(60,127,0)
(30,117,0)
(170,148,0)
(18,96,0)
(177,148,0)
(168,144,0)
(139,176,0)
(21,161,0)
(20,117,0)
(67,86,0)
(100,150,0)
(52,155,0)
(30,117,1)
(176,127,1)
(158,140,1)
(63,17,1)
(52,154,1)
(161,125,1)
(120,176,1)
(2,26,1)
(153,146,1)
(9,153,1)
(168,44,1)
(4,68,1)
(7,8,1)
(162,31,1)
(108,136,1)
(166,0,1)
(67,125,1)
(59,81,1)
(57,176,1)
(18,33,1)
(83,108,1)
(51,77,1)
(110,103,1)
(166,13,1)
(139,176,1)
(110,52,1)
(159,91,1)
(69,61,1)
(124,108,1)
(119,6,1)
(93,35,1)
(91,57,1)
(159,176,1)
(43,126,1)
(112,27,1)
(133,12,1)
(169,36,1)
(103,47,1)
(146,115,1)
(96,10,1)
(131,111,1)
(36,51,1)
(77,93,1)
(165,158,1)
(161,30,1)
(4,9,1)
(4,176,1)
(70,64,1)
(119,9,1)
(127,29,1)
(156,147,1)
(167,30,1)
(101,70,1)
(122,88,1)
(8,71,1)
(47,52,1)
(179,0,1)
(138,137,1)
(61,102,1)
(33,129,1)
(129,2,1)
(72,5,1)
(156,97,1)
(92,36,1)
(144,21,1)
(145,28,1)
(160,67,1)
(48,156,1)
(21,161,1)
(37,21,1)
(78,72,1)
(86,160,1)
(150,100,1)
(20,102,1)
(94,4,1)
(141,73,1)
(97,81,1)
(144,168,1)
(36,32,1)
(143,104,1)
(17,48,1)
(161,167,1)
(31,101,1)
(53,156,1)
(97,125,1)
(164,1,1)
(120,40,1)
(61,0,1)
(119,176,1)
(1,178,1)
(114,56,1)
(161,69,1)
(117,20,1)
(100,63,1)
(68,131,1)
(88,121,1)
(131,122,1)
(143,144,1)
(98,143,1)
(64,69,1)
(155,171,1)
(79,159,1)
(8,96,1)
(75,173,1)
(30,70,1)
(108,110,1)
(22,75,1)
(111,86,1)
(130,159,1)
(172,113,1)
(173,88,1)
(131,83,1)
(65,37,1)
(137,86,1)
(139,14,1)
(0,165,1)
(5,38,1)
(51,35,1)
(34,179,1)
(97,84,1)
(174,177,1)
(149,98,1)
(150,0,1)
(26,174,1)
(131,78,1)
(46,143,1)
(71,96,1)
(142,39,1)
(52,155,1)
(3,60,1)
(29,3,1)
(104,21,1)
(147,125,1)
(20,162,1)
(81,142,1)
(94,119,1)
(90,92,1)
(147,80,1)
(131,46,1)
(115,34,1)
(80,94,1)
(131,169,1)
(27,85,1)
(177,114,1)
(147,81,1)
(48,53,1)
(35,43,1)
(171,164,1)
(78,5,1)
(12,90,1)
(126,102,1)
(40,22,1)
(85,145,1)
(126,78,1)
(10,18,1)
(6,4,1)
(178,112,1)
(104,65,1)
(55,76,1)
(56,55,1)
(84,147,1)
(32,51,1)
(38,149,1)
(39,9,1)
(180,150,1)
(86,125,1)
(13,59,1)
(5,149,1)
(76,130,1)
(113,138,1)
(121,139,1)
(110,176,1)
(28,7,1)
(102,166,1)
(177,76,1)
(88,139,1)
(61,172,1)
(14,124,1)
(73,180,1)
(136,110,1)
(131,79,1)
(44,104,1)
(125,120,1)
(69,89,1)
(60,133,1)
(57,36,2)
(12,36,2)
(30,86,2)
(160,88,2)
(173,88,2)
(70,86,2)
(2,159,2)
(56,159,2)
(7,159,2)
(125,120,2)
(90,36,2)
(51,35,2)
(159,36,2)
(33,159,2)
(71,159,2)
(97,81,2)
(4,176,2)
(143,104,2)
(177,114,2)
(144,21,2)
(46,143,2)
(98,143,2)
(69,61,2)
(138,86,2)
(51,77,2)
(177,159,2)
(61,0,2)
(38,149,2)
(53,156,2)
(150,0,2)
(6,4,2)
(60,36,2)
(29,36,2)
(8,159,2)
(117,20,2)
(86,88,2)
(22,88,2)
(139,176,2)
(130,159,2)
(85,159,2)
(88,139,2)
(31,86,2)
(97,125,2)
(119,176,2)
(161,69,2)
(79,159,2)
(52,159,2)
(172,86,2)
(113,86,2)
(93,78,2)
(77,78,2)
(108,110,2)
(168,104,2)
(127,36,2)
(14,108,2)
(147,125,2)
(67,88,2)
(91,36,2)
(3,36,2)
(30,117,2)
(112,159,2)
(137,86,2)
(44,104,2)
(143,144,2)
(177,76,2)
(144,104,2)
(111,86,2)
(102,166,2)
(129,159,2)
(161,86,2)
(5,143,2)
(110,176,2)
(96,159,2)
(51,78,2)
(171,159,2)
(101,86,2)
(47,159,2)
(18,159,2)
(124,108,2)
(75,88,2)
(176,127,2)
(69,86,2)
(1,178,2)
(20,102,2)
(43,78,2)
(117,86,2)
(167,86,2)
(84,147,2)
(143,86,2)
(61,86,2)
(104,21,2)
(30,70,2)
(122,88,2)
(36,51,2)
(110,103,2)
(176,36,2)
(88,108,2)
(21,161,2)
(114,159,2)
(169,36,2)
(37,86,2)
(20,86,2)
(110,52,2)
(55,159,2)
(162,86,2)
(83,108,2)
(27,159,2)
(97,147,2)
(121,108,2)
(26,159,2)
(133,36,2)
(149,143,2)
(125,88,2)
(10,159,2)
(108,159,2)
(120,176,2)
(161,125,2)
(76,159,2)
(52,155,2)
(120,88,2)
(8,96,2)
(139,108,2)
(119,9,2)
(147,81,2)
(92,36,2)
(103,159,2)
(161,30,2)
(126,78,2)
(155,159,2)
(61,102,2)
(28,159,2)
(64,86,2)
(164,159,2)
(159,176,2)
(32,78,2)
(136,159,2)
(110,159,2)
(65,86,2)
(40,88,2)
(36,78,2)
(174,159,2)
(35,78,2)
(1,159,2)
(104,86,2)
(166,0,2)
(4,9,2)
(72,5,2)
(119,4,2)
(52,154,2)
(145,159,2)
(78,143,2)
(86,125,2)
(178,159,2)
(69,89,2)
(21,86,2)
-----------------------------------
(0,data = dataBuffer)
(1,service.sin_port = htons(TCP_PORT)
(2,service.sin_family)
(3,SOCK_STREAM)
(4,listenSocket != INVALID_SOCKET)
(5,replace)
(6,listenSocket)
(7,INADDR_ANY)
(8,service.sin_addr.s_addr)
(9,listenSocket = INVALID_SOCKET)
(10,sin_addr)
(11,if (listen(listenSocket, LISTEN_BACKLOG)
(12,wsaDataInit = 1)
(13,data)
(14,LISTEN_BACKLOG)
(15,if (recvResult == SOCKET_ERROR || recvResult == 0)
(16,wsaData)
(17,2)
(18,service)
(19,recvResult)
(20,dataLen - 1)
(21,recvResult = recv(acceptSocket, (char *)
(22,NULL)
(23,)
(24,)
(25,service)
(26,sin_family)
(27,service.sin_port)
(28,service.sin_addr.s_addr = INADDR_ANY)
(29,IPPROTO_TCP)
(30,sizeof(wchar_t)
(31,dataLen)
(32,NO_ERROR)
(33,service.sin_family = AF_INET)
(34,0)
(35,MAKEWORD(2,2)
(36,WSAStartup(MAKEWORD(2,2)
(37,recvResult)
(38,\\'\\\\0\\')
(39,acceptSocket)
(40,NULL)
(41,dataLen)
(42,)
(43,2)
(44,recvResult)
(45,replace)
(46,break;)
(47,service)
(48,dataArray)
(49,)
(50,)
(51,WSAStartup(MAKEWORD(2,2)
(52,(struct sockaddr*)
(53,WSACleanup()
(54,)
(55,0)
(56,service)
(57,listenSocket)
(58,)
(59,dataLen)
(60,AF_INET)
(61,data + dataLen)
(62,acceptSocket)
(63,dataArray[2])
(64,wchar_t)
(65,SOCKET_ERROR)
(66,)
(67,acceptSocket)
(68,INVALID_SOCKET)
(69,(char *)
(70,sizeof(wchar_t)
(71,s_addr)
(72,\\'\\\\0\\')
(73,CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_66b_badSink(dataArray)
(74,wsaDataInit)
(75,listenSocket)
(76,&service)
(77,&wsaData)
(78,0)
(79,break;)
(80,INVALID_SOCKET)
(81,acceptSocket = INVALID_SOCKET)
(82,if (replace)
(83,break;)
(84,acceptSocket)
(85,sin_port)
(86,acceptSocket == SOCKET_ERROR)
(87,if (wsaDataInit)
(88,listen(listenSocket, LISTEN_BACKLOG)
(89,char *)
(90,1)
(91,INVALID_SOCKET)
(92,wsaDataInit)
(93,wsaData)
(94,acceptSocket)
(95,)
(96,service.sin_addr)
(97,CLOSE_SOCKET(acceptSocket)
(98,\\'\\\\0\\')
(99,if (WSAStartup(MAKEWORD(2,2)
(100,data)
(101,250)
(102,dataLen = wcslen(data)
(103,sizeof(service)
(104,recvResult == SOCKET_ERROR)
(105,\\\'\\\\0\\\')
(106,)
(107,\\\'\\\\0\\\')
(108,bind(listenSocket, (struct sockaddr*)
(109,)
(110,bind(listenSocket, (struct sockaddr*)
(111,break;)
(112,TCP_PORT)
(113,data)
(114,sizeof(service)
(115,wsaDataInit = 0)
(116,if (bind(listenSocket, (struct sockaddr*)
(117,250 - dataLen - 1)
(118,if (acceptSocket != INVALID_SOCKET)
(119,CLOSE_SOCKET(listenSocket)
(120,accept(listenSocket, NULL, NULL)
(121,SOCKET_ERROR)
(122,break;)
(123,do)
(124,listenSocket)
(125,acceptSocket = accept(listenSocket, NULL, NULL)
(126,2)
(127,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(128,data)
(129,AF_INET)
(130,service)
(131,listenSocket)
(132,)
(133,listenSocket)
(134,if (replace)
(135,if (listenSocket != INVALID_SOCKET)
(136,SOCKET_ERROR)
(137,recvResult)
(138,acceptSocket)
(139,listen(listenSocket, LISTEN_BACKLOG)
(140,"PATH=")
(141,RET)
(142,INVALID_SOCKET)
(143,recvResult == SOCKET_ERROR || recvResult == 0)
(144,recvResult == 0)
(145,service)
(146,listenSocket)
(147,acceptSocket != INVALID_SOCKET)
(148,)
(149,replace)
(150,dataArray[2] = data)
(151,\\\'\\\\0\\\')
(152,listenSocket)
(153,INVALID_SOCKET)
(154,struct sockaddr*)
(155,&service)
(156,wsaDataInit)
(157,dataArray)
(158,data)
(159,listenSocket == INVALID_SOCKET)
(160,SOCKET_ERROR)
(161,recv(acceptSocket, (char *)
(162,1)
(163,if (listenSocket == INVALID_SOCKET)
(164,listenSocket)
(165,dataBuffer)
(166,wcslen(data)
(167,0)
(168,0)
(169,break;)
(170,if (acceptSocket == SOCKET_ERROR)
(171,service)
(172,dataLen)
(173,acceptSocket)
(174,service)
(175,)
(176,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(177,memset(&service, 0, sizeof(service)
(178,htons(TCP_PORT)
(179,wsaDataInit)
(180,dataArray)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
