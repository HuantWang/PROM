-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_12_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    else
    {
        /* FIX: Set the path as the "system" path */
        strcat(data, NEW_PATH);
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
28,29
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
122,123
122,124
122,125
123,124
125,126
127,128
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,124,126,128,132,134
-----computeFrom-----
22,23
22,24
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_12_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Set the path as the "system" path */        strcat(data, NEW_PATH);    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_12_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_12_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Set the path as the "system" path */        strcat(data, NEW_PATH);    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Set the path as the "system" path */        strcat(data, NEW_PATH);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        /* FIX: Set the path as the "system" path */        strcat(data, NEW_PATH);    }
strcat(data, NEW_PATH);
strcat(data, NEW_PATH)
strcat
strcat
data
data
NEW_PATH
NEW_PATH
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(50,60,0)
(46,39,0)
(29,5,0)
(13,27,0)
(40,41,0)
(11,46,0)
(43,9,0)
(41,40,0)
(42,16,0)
(18,62,0)
(31,60,0)
(34,24,0)
(24,27,0)
(9,54,0)
(55,27,0)
(21,16,0)
(28,39,0)
(20,30,0)
(45,15,0)
(38,34,0)
(32,60,0)
(0,54,0)
(44,57,0)
(9,10,0)
(46,16,0)
(64,41,0)
(40,46,0)
(15,22,0)
(60,50,0)
(5,29,0)
(54,62,0)
(41,54,0)
(19,34,0)
(37,27,0)
(58,10,0)
(16,25,0)
(48,27,0)
(22,30,0)
(39,24,0)
(47,22,0)
(65,50,0)
(57,41,0)
(49,20,0)
(1,54,0)
(3,0,0)
(63,7,0)
(62,54,0)
(59,5,0)
(17,24,0)
(51,29,0)
(15,46,0)
(15,24,0)
(7,27,0)
(60,46,0)
(39,46,0)
(54,14,0)
(23,40,0)
(53,16,0)
(7,24,0)
(24,37,0)
(41,5,0)
(36,0,0)
(2,15,0)
(6,29,0)
(40,24,0)
(33,37,0)
(41,57,0)
(61,40,0)
(29,46,0)
(12,62,0)
(8,14,0)
(26,24,0)
(5,41,0)
(34,52,0)
(5,59,0)
(4,37,0)
(28,11,1)
(45,20,1)
(63,9,1)
(41,54,1)
(40,24,1)
(39,28,1)
(32,46,1)
(7,24,1)
(23,61,1)
(7,63,1)
(47,15,1)
(38,19,1)
(0,3,1)
(63,34,1)
(39,24,1)
(12,18,1)
(34,38,1)
(34,24,1)
(64,5,1)
(60,46,1)
(43,22,1)
(61,0,1)
(60,31,1)
(2,45,1)
(15,46,1)
(49,57,1)
(63,0,1)
(56,7,1)
(20,49,1)
(11,35,1)
(35,24,1)
(44,41,1)
(50,65,1)
(43,57,1)
(57,44,1)
(40,46,1)
(29,6,1)
(26,17,1)
(31,32,1)
(29,46,1)
(50,60,1)
(19,35,1)
(24,37,1)
(40,23,1)
(41,5,1)
(41,64,1)
(51,40,1)
(3,36,1)
(15,2,1)
(1,50,1)
(0,54,1)
(65,60,1)
(17,37,1)
(4,33,1)
(9,54,1)
(6,51,1)
(41,40,1)
(63,50,1)
(24,26,1)
(22,47,1)
(5,29,1)
(18,1,1)
(57,41,1)
(54,62,1)
(5,59,1)
(46,39,1)
(62,12,1)
(37,4,1)
(9,43,1)
(36,54,1)
(15,24,1)
(6,0,2)
(31,35,2)
(0,54,2)
(5,59,2)
(44,0,2)
(2,57,2)
(51,0,2)
(15,57,2)
(54,62,2)
(18,50,2)
(3,50,2)
(5,29,2)
(1,50,2)
(40,24,2)
(62,50,2)
(41,5,2)
(46,35,2)
(41,54,2)
(43,0,2)
(49,57,2)
(46,39,2)
(20,57,2)
(50,35,2)
(45,57,2)
(11,35,2)
(24,37,2)
(60,35,2)
(38,35,2)
(9,54,2)
(32,35,2)
(34,24,2)
(57,0,2)
(0,50,2)
(40,46,2)
(19,35,2)
(15,24,2)
(9,0,2)
(36,50,2)
(47,57,2)
(34,35,2)
(22,57,2)
(28,35,2)
(29,46,2)
(12,50,2)
(15,46,2)
(54,50,2)
(39,24,2)
(23,0,2)
(7,24,2)
(61,0,2)
(41,40,2)
(64,0,2)
(60,46,2)
(50,60,2)
(65,35,2)
(39,35,2)
(41,0,2)
(57,41,2)
(5,0,2)
(29,0,2)
(40,0,2)
-----------------------------------
(0,pFile != NULL)
(1,pFile)
(2,dataLen)
(3,NULL)
(4,"PATH=")
(5,(int)
(6,dataLen)
(7,PUTENV(data)
(8,if (pFile != NULL)
(9,fclose(pFile)
(10,)
(11,dataLen)
(12,"r")
(13,if(globalReturnsTrueOrFalse()
(14,)
(15,data[dataLen])
(16,)
(17,data)
(18,FILENAME)
(19,data)
(20,printLine("fgets()
(21,pFile)
(22,data[dataLen] = \\\'\\\\0\\\')
(23,dataLen)
(24,data = dataBuffer)
(25,)
(26,dataBuffer)
(27,)
(28,data)
(29,250-dataLen)
(30,)
(31,dataLen)
(32,250)
(33,dataBuffer)
(34,strcat(data, NEW_PATH)
(35,globalReturnsTrueOrFalse()
(36,pFile)
(37,dataBuffer[250] = "PATH=")
(38,NEW_PATH)
(39,strlen(data)
(40,data+dataLen)
(41,fgets(data+dataLen, (int)
(42,dataLen)
(43,pFile)
(44,NULL)
(45,data)
(46,dataLen = strlen(data)
(47,\\\'\\\\0\\\')
(48,data)
(49,"fgets()
(50,250-dataLen > 1)
(51,250)
(52,)
(53,if (250-dataLen > 1)
(54,pFile = fopen(FILENAME, "r")
(55,dataBuffer)
(56,RET)
(57,fgets(data+dataLen, (int)
(58,if (fgets(data+dataLen, (int)
(59,int)
(60,250-dataLen)
(61,data)
(62,fopen(FILENAME, "r")
(63,data)
(64,pFile)
(65,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
