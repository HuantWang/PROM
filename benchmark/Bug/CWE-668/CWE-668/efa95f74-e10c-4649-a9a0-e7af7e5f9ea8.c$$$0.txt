-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_02_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    if(1)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
45,47
47,48
50,51
51,52
51,53
51,54
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
65,66
66,67
66,68
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
94,95
94,96
95,96
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
106,107
110,111
110,112
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,40,42,46,48,49,55,58,60,63,64,67,69,71,73,78,81,83,88,89,93,96,97,98,104,107,108,109,114,115,120,122,123,127,129
-----computeFrom-----
22,23
22,24
44,45
44,46
45,46
45,47
52,53
52,54
56,57
56,58
66,67
66,68
76,77
76,78
85,86
85,87
86,87
86,88
90,91
90,92
94,95
94,96
101,102
101,103
105,106
105,107
117,118
117,119
-----guardedBy-----
48,122
58,104
69,107
93,104
96,107
-----guardedByNegation-----
58,120
69,122
-----lastLexicalUse-----
58,120
69,122
-----jump-----
58,120
69,122
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_02_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(1)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_02_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_02_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(1)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
1
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(38,13,0)
(42,11,0)
(24,7,0)
(41,6,0)
(45,15,0)
(40,35,0)
(34,6,0)
(2,41,0)
(37,24,0)
(18,47,0)
(33,35,0)
(7,24,0)
(16,6,0)
(29,44,0)
(31,36,0)
(11,39,0)
(31,41,0)
(15,6,0)
(30,39,0)
(41,2,0)
(36,18,0)
(6,34,0)
(5,15,0)
(4,39,0)
(21,18,0)
(1,31,0)
(32,25,0)
(8,39,0)
(36,11,0)
(41,31,0)
(14,3,0)
(9,25,0)
(35,33,0)
(43,4,0)
(15,36,0)
(12,9,0)
(22,13,0)
(46,31,0)
(15,39,0)
(23,33,0)
(33,36,0)
(6,41,0)
(4,13,0)
(7,39,0)
(24,44,0)
(11,36,0)
(48,13,0)
(39,13,0)
(27,18,0)
(19,7,0)
(6,15,0)
(17,36,0)
(26,33,0)
(0,29,0)
(20,34,0)
(15,45,1)
(23,26,1)
(10,39,1)
(35,33,1)
(43,35,1)
(28,4,1)
(17,10,1)
(0,24,1)
(43,0,1)
(26,36,1)
(32,9,1)
(45,5,1)
(39,8,1)
(36,11,1)
(41,2,1)
(4,43,1)
(7,19,1)
(33,23,1)
(31,1,1)
(16,41,1)
(20,6,1)
(34,20,1)
(8,30,1)
(6,16,1)
(24,7,1)
(7,39,1)
(9,12,1)
(1,46,1)
(40,33,1)
(33,36,1)
(30,48,1)
(4,39,1)
(43,32,1)
(19,37,1)
(5,35,1)
(42,17,1)
(12,34,1)
(15,39,1)
(6,15,1)
(11,42,1)
(43,10,1)
(34,6,1)
(35,40,1)
(31,36,1)
(11,39,1)
(46,15,1)
(6,41,1)
(37,34,1)
(41,31,1)
(15,36,1)
(24,34,2)
(31,35,2)
(12,34,2)
(36,11,2)
(46,35,2)
(7,34,2)
(33,10,2)
(7,39,2)
(16,35,2)
(15,39,2)
(41,35,2)
(6,35,2)
(9,34,2)
(5,35,2)
(40,10,2)
(35,33,2)
(20,35,2)
(6,15,2)
(41,2,2)
(45,35,2)
(0,34,2)
(24,7,2)
(15,36,2)
(1,35,2)
(34,6,2)
(23,10,2)
(32,34,2)
(34,35,2)
(31,36,2)
(36,10,2)
(11,39,2)
(15,35,2)
(6,41,2)
(19,34,2)
(11,10,2)
(33,36,2)
(17,10,2)
(41,31,2)
(37,34,2)
(26,10,2)
(4,39,2)
(42,10,2)
(35,10,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,dataLen)
(2,int)
(3,)
(4,PUTENV(data)
(5,data)
(6,fgetws(data+dataLen, (int)
(7,wcslen(data)
(8,dataBuffer)
(9,printLine("fgetws()
(10,1)
(11,wcslen(data)
(12,"fgetws()
(13,)
(14,if (fgetws(data+dataLen, (int)
(15,data+dataLen)
(16,stdin)
(17,dataLen)
(18,)
(19,data)
(20,NULL)
(21,dataLen)
(22,data)
(23,dataLen)
(24,dataLen = wcslen(data)
(25,)
(26,250)
(27,if (250-dataLen > 1)
(28,RET)
(29,)
(30,data)
(31,250-dataLen)
(32,\\\'\\\\0\\\')
(33,250-dataLen)
(34,fgetws(data+dataLen, (int)
(35,250-dataLen > 1)
(36,dataLen = wcslen(data)
(37,dataLen)
(38,if(1)
(39,data = dataBuffer)
(40,1)
(41,(int)
(42,data)
(43,data)
(44,)
(45,dataLen)
(46,250)
(47,)
(48,"PATH=")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
