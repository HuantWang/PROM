-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
42,48
42,49
42,50
42,51
43,44
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
57,58
57,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
86,87
88,89
90,91
90,92
91,92
91,93
91,94
91,95
91,96
91,97
91,98
91,99
91,100
91,101
91,102
91,103
91,104
91,105
91,106
91,107
91,108
92,93
93,94
93,95
94,95
96,97
96,98
96,99
96,100
97,98
99,100
101,102
103,104
105,106
105,107
106,107
106,108
107,108
109,110
111,112
113,114
114,115
114,116
114,117
114,118
115,116
117,118
118,119
121,122
122,123
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
141,142
143,144
144,145
144,146
145,146
145,147
146,147
149,150
149,151
150,151
152,153
154,155
154,156
155,156
155,157
156,157
156,158
156,159
156,160
157,158
159,160
161,162
161,163
162,163
162,164
163,164
165,166
167,168
168,169
170,171
171,172
172,173
174,175
176,177
178,179
178,180
179,180
179,181
180,181
180,182
180,183
181,182
183,184
185,186
187,188
189,190
191,192
192,193
192,194
193,194
195,196
195,197
195,198
195,199
196,197
198,199
200,201
202,203
204,205
204,206
205,206
205,207
206,207
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
216,219
216,220
216,221
217,218
219,220
221,222
221,223
222,223
222,224
224,225
226,227
227,228
227,229
228,229
230,231
232,233
232,234
233,234
234,235
234,236
237,238
238,239
238,240
239,240
239,241
241,242
245,246
245,247
246,247
246,248
247,248
247,249
248,249
250,251
252,253
252,254
253,254
256,257
258,259
259,260
259,261
260,261
260,262
261,262
263,264
263,265
264,265
266,267
266,268
267,268
269,270
270,271
270,272
274,275
275,276
275,277
276,277
278,279
278,280
278,281
279,280
281,282
284,285
284,286
285,286
287,288
288,289
289,290
289,291
290,291
291,292
294,295
295,296
295,297
296,297
298,299
298,300
298,301
299,300
301,302
304,305
304,306
305,306
307,308
308,309
309,310
309,311
310,311
311,312
315,316
315,317
316,317
316,318
317,318
319,320
321,322
322,323
323,324
323,325
324,325
326,327
328,329
328,330
329,330
329,331
330,331
332,333
334,335
335,336
336,337
336,338
337,338
339,340
341,342
342,343
342,344
343,344
345,346
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,35,39,41,45,47,51,53,56,58,59,63,65,68,72,74,77,81,83,87,89,95,98,100,102,104,108,110,112,116,119,120,124,129,130,132,138,139,140,142,147,148,151,153,158,160,164,166,169,173,175,177,182,184,186,188,190,194,197,199,201,203,207,209,211,215,218,220,223,225,229,231,235,236,240,242,243,244,249,251,254,255,257,262,265,268,271,272,273,277,280,282,283,286,292,293,297,300,302,303,306,312,313,314,318,320,325,327,331,333,338,340,344,346
-----computeFrom-----
37,38
37,39
93,94
93,95
106,107
106,108
126,127
126,128
134,135
134,136
144,145
144,146
155,156
155,157
179,180
179,181
192,193
192,194
205,206
205,207
213,214
213,215
227,228
227,229
232,233
232,234
238,239
238,240
239,240
239,241
246,247
246,248
247,248
247,249
252,253
252,254
259,260
259,261
263,264
263,265
266,267
266,268
275,276
275,277
289,290
289,291
295,296
295,297
309,310
309,311
316,317
316,318
329,330
329,331
-----guardedBy-----
318,327
331,340
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65_bad()
CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink;
void (*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink;
void
(*funcPtr) (char *) = CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink
*funcPtr
*
funcPtr
char *
char
*
*

= CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (250 - dataLen - 1)
sizeof(char)
char
char

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(49,30,0)
(172,126,0)
(44,1,0)
(40,49,0)
(117,183,0)
(173,16,0)
(196,30,0)
(100,162,0)
(146,138,0)
(52,64,0)
(172,28,0)
(117,95,0)
(26,14,0)
(35,72,0)
(115,174,0)
(87,183,0)
(7,138,0)
(104,6,0)
(88,192,0)
(137,122,0)
(38,106,0)
(128,56,0)
(9,77,0)
(195,122,0)
(33,138,0)
(10,115,0)
(97,138,0)
(194,3,0)
(51,88,0)
(128,146,0)
(185,183,0)
(15,162,0)
(150,28,0)
(95,155,0)
(3,61,0)
(190,49,0)
(169,33,0)
(57,133,0)
(71,190,0)
(48,41,0)
(39,138,0)
(95,165,0)
(2,30,0)
(2,32,0)
(102,0,0)
(125,119,0)
(5,97,0)
(105,28,0)
(72,108,0)
(104,30,0)
(181,125,0)
(50,141,0)
(125,181,0)
(29,30,0)
(178,32,0)
(43,77,0)
(76,141,0)
(155,39,0)
(31,50,0)
(136,134,0)
(182,32,0)
(110,183,0)
(39,155,0)
(117,54,0)
(41,112,0)
(148,154,0)
(183,61,0)
(64,63,0)
(73,22,0)
(65,49,0)
(99,180,0)
(118,157,0)
(49,134,0)
(0,30,0)
(132,77,0)
(151,2,0)
(81,23,0)
(58,138,0)
(134,136,0)
(174,115,0)
(181,54,0)
(33,110,0)
(154,195,0)
(50,138,0)
(177,10,0)
(114,105,0)
(1,54,0)
(70,77,0)
(195,154,0)
(54,144,0)
(112,93,0)
(179,155,0)
(53,200,0)
(163,61,0)
(49,40,0)
(109,77,0)
(87,7,0)
(19,29,0)
(83,64,0)
(23,90,0)
(184,31,0)
(1,87,0)
(134,106,0)
(149,90,0)
(175,183,0)
(111,87,0)
(37,7,0)
(144,54,0)
(105,97,0)
(195,138,0)
(140,155,0)
(122,195,0)
(127,88,0)
(159,183,0)
(92,138,0)
(98,174,0)
(79,104,0)
(21,108,0)
(49,190,0)
(119,113,0)
(32,77,0)
(166,77,0)
(201,138,0)
(119,155,0)
(22,115,0)
(199,159,0)
(36,117,0)
(197,16,0)
(167,105,0)
(84,138,0)
(13,144,0)
(14,63,0)
(155,97,0)
(161,0,0)
(66,181,0)
(108,72,0)
(25,3,0)
(200,61,0)
(171,200,0)
(139,145,0)
(18,29,0)
(28,77,0)
(4,110,0)
(90,23,0)
(153,152,0)
(59,125,0)
(14,39,0)
(55,103,0)
(90,39,0)
(172,97,0)
(54,77,0)
(1,90,0)
(62,61,0)
(115,22,0)
(107,138,0)
(63,64,0)
(24,56,0)
(143,159,0)
(160,113,0)
(17,40,0)
(63,14,0)
(87,1,0)
(75,14,0)
(78,5,0)
(183,3,0)
(101,2,0)
(34,74,0)
(67,181,0)
(41,33,0)
(80,152,0)
(77,61,0)
(193,138,0)
(164,108,0)
(94,61,0)
(69,77,0)
(97,16,0)
(198,94,0)
(45,84,0)
(94,183,0)
(155,119,0)
(134,49,0)
(143,138,0)
(170,112,0)
(12,77,0)
(91,159,0)
(130,0,0)
(82,28,0)
(119,125,0)
(47,127,0)
(113,119,0)
(131,77,0)
(159,143,0)
(16,30,0)
(135,10,0)
(147,143,0)
(86,77,0)
(123,77,0)
(42,138,0)
(152,84,0)
(121,27,0)
(46,172,0)
(120,31,0)
(141,50,0)
(16,97,0)
(96,146,0)
(20,117,0)
(188,168,0)
(108,30,0)
(186,138,0)
(60,97,0)
(162,77,0)
(142,195,0)
(124,128,0)
(104,32,0)
(110,33,0)
(95,117,0)
(11,133,0)
(129,56,0)
(56,128,0)
(158,54,0)
(133,138,0)
(202,5,0)
(156,138,0)
(155,95,0)
(64,39,0)
(89,77,0)
(8,16,0)
(30,138,0)
(106,134,0)
(68,110,0)
(187,61,0)
(116,39,0)
(30,0,0)
(165,95,0)
(127,143,0)
(90,1,0)
(115,10,0)
(144,183,0)
(176,33,1)
(128,56,1)
(67,59,1)
(52,14,1)
(144,13,1)
(140,119,1)
(8,197,1)
(14,26,1)
(91,199,1)
(47,85,1)
(130,196,1)
(64,83,1)
(161,130,1)
(117,20,1)
(88,51,1)
(181,54,1)
(162,15,1)
(119,113,1)
(198,188,1)
(40,17,1)
(203,176,1)
(169,85,1)
(49,134,1)
(54,144,1)
(72,35,1)
(68,169,1)
(112,170,1)
(185,3,1)
(169,88,1)
(84,45,1)
(101,99,1)
(167,2,1)
(124,56,1)
(53,171,1)
(16,8,1)
(134,136,1)
(155,97,1)
(142,122,1)
(99,63,1)
(100,183,1)
(197,173,1)
(80,153,1)
(82,32,1)
(127,143,1)
(63,14,1)
(105,97,1)
(143,159,1)
(94,183,1)
(154,148,1)
(108,30,1)
(174,98,1)
(29,30,1)
(101,55,1)
(170,41,1)
(65,50,1)
(63,64,1)
(118,174,1)
(15,100,1)
(202,78,1)
(114,167,1)
(97,16,1)
(39,155,1)
(104,32,1)
(155,140,1)
(159,91,1)
(167,104,1)
(104,30,1)
(1,54,1)
(133,57,1)
(108,164,1)
(76,31,1)
(90,23,1)
(90,39,1)
(51,127,1)
(45,152,1)
(155,119,1)
(2,32,1)
(111,63,1)
(134,106,1)
(153,195,1)
(0,102,1)
(49,30,1)
(101,203,1)
(194,200,1)
(64,39,1)
(195,122,1)
(4,68,1)
(179,116,1)
(41,48,1)
(59,113,1)
(25,194,1)
(101,34,1)
(87,1,1)
(178,182,1)
(144,183,1)
(7,37,1)
(183,175,1)
(115,22,1)
(13,158,1)
(37,87,1)
(87,183,1)
(139,29,1)
(149,44,1)
(11,174,1)
(174,115,1)
(116,5,1)
(200,53,1)
(79,2,1)
(28,150,1)
(151,101,1)
(105,114,1)
(10,135,1)
(190,71,1)
(195,154,1)
(110,4,1)
(164,21,1)
(121,5,1)
(183,3,1)
(94,198,1)
(41,33,1)
(44,111,1)
(71,134,1)
(196,133,1)
(104,79,1)
(98,115,1)
(158,28,1)
(102,161,1)
(129,24,1)
(5,202,1)
(146,96,1)
(78,97,1)
(46,105,1)
(22,73,1)
(66,67,1)
(48,176,1)
(34,40,1)
(21,40,1)
(189,105,1)
(115,10,1)
(189,172,1)
(26,75,1)
(119,125,1)
(20,36,1)
(177,203,1)
(19,30,1)
(120,184,1)
(49,190,1)
(18,19,1)
(57,11,1)
(117,54,1)
(110,183,1)
(125,181,1)
(83,52,1)
(188,189,1)
(101,139,1)
(23,81,1)
(2,151,1)
(60,72,1)
(105,28,1)
(150,82,1)
(148,142,1)
(147,7,1)
(127,47,1)
(182,162,1)
(198,189,1)
(175,185,1)
(160,95,1)
(30,0,1)
(128,124,1)
(113,160,1)
(101,118,1)
(95,165,1)
(3,25,1)
(181,66,1)
(32,178,1)
(152,80,1)
(191,94,1)
(36,179,1)
(141,76,1)
(135,177,1)
(5,97,1)
(177,54,1)
(38,65,1)
(56,129,1)
(172,97,1)
(17,49,1)
(117,183,1)
(73,10,1)
(106,38,1)
(1,90,1)
(96,128,1)
(199,147,1)
(172,28,1)
(122,137,1)
(75,39,1)
(95,117,1)
(29,18,1)
(40,49,1)
(81,149,1)
(14,39,1)
(24,84,1)
(155,95,1)
(203,112,1)
(31,120,1)
(50,141,1)
(55,72,1)
(85,143,1)
(2,30,1)
(101,121,1)
(159,183,1)
(35,108,1)
(173,60,1)
(72,108,1)
(137,29,1)
(172,46,1)
(184,146,1)
(16,30,1)
(33,110,1)
(197,72,2)
(172,28,2)
(202,72,2)
(40,29,2)
(119,125,2)
(144,183,2)
(88,85,2)
(31,29,2)
(7,63,2)
(106,29,2)
(195,154,2)
(172,97,2)
(196,174,2)
(36,5,2)
(102,174,2)
(97,16,2)
(97,72,2)
(21,40,2)
(49,190,2)
(155,95,2)
(141,29,2)
(134,106,2)
(56,29,2)
(38,29,2)
(203,63,2)
(118,174,2)
(87,63,2)
(153,29,2)
(59,5,2)
(127,85,2)
(152,29,2)
(134,136,2)
(125,181,2)
(122,29,2)
(19,174,2)
(45,29,2)
(104,30,2)
(172,105,2)
(195,122,2)
(2,30,2)
(80,29,2)
(108,30,2)
(143,63,2)
(64,39,2)
(116,5,2)
(195,29,2)
(40,49,2)
(143,159,2)
(64,14,2)
(121,5,2)
(154,29,2)
(26,5,2)
(1,54,2)
(183,3,2)
(91,63,2)
(83,14,2)
(35,40,2)
(90,39,2)
(72,40,2)
(184,29,2)
(51,85,2)
(170,176,2)
(73,203,2)
(181,5,2)
(104,32,2)
(68,63,2)
(139,29,2)
(90,63,2)
(115,203,2)
(149,63,2)
(49,134,2)
(117,54,2)
(16,72,2)
(39,5,2)
(63,64,2)
(190,29,2)
(117,183,2)
(5,97,2)
(142,29,2)
(119,5,2)
(49,29,2)
(129,29,2)
(63,5,2)
(48,176,2)
(18,174,2)
(147,63,2)
(23,63,2)
(140,5,2)
(105,97,2)
(90,23,2)
(124,29,2)
(174,203,2)
(177,203,2)
(33,110,2)
(24,29,2)
(117,5,2)
(39,155,2)
(63,14,2)
(160,5,2)
(67,5,2)
(52,14,2)
(95,165,2)
(0,174,2)
(148,29,2)
(72,108,2)
(134,29,2)
(96,29,2)
(119,113,2)
(99,63,2)
(2,32,2)
(65,29,2)
(66,5,2)
(79,2,2)
(130,174,2)
(105,28,2)
(1,90,2)
(34,40,2)
(75,5,2)
(188,189,2)
(98,203,2)
(104,2,2)
(127,143,2)
(29,30,2)
(78,72,2)
(57,174,2)
(146,29,2)
(155,97,2)
(87,1,2)
(128,56,2)
(16,30,2)
(179,5,2)
(14,39,2)
(155,5,2)
(11,174,2)
(76,29,2)
(49,30,2)
(120,29,2)
(115,22,2)
(176,63,2)
(30,174,2)
(181,54,2)
(81,63,2)
(44,63,2)
(8,72,2)
(46,105,2)
(10,203,2)
(50,141,2)
(159,183,2)
(84,29,2)
(50,29,2)
(22,203,2)
(173,72,2)
(54,144,2)
(164,40,2)
(47,85,2)
(125,5,2)
(155,119,2)
(111,63,2)
(14,5,2)
(55,72,2)
(37,63,2)
(33,63,2)
(95,5,2)
(135,203,2)
(30,0,2)
(20,5,2)
(29,174,2)
(87,183,2)
(169,63,2)
(115,10,2)
(85,63,2)
(17,29,2)
(128,29,2)
(71,29,2)
(159,63,2)
(60,72,2)
(161,174,2)
(41,33,2)
(41,176,2)
(95,117,2)
(4,63,2)
(94,183,2)
(1,63,2)
(110,63,2)
(112,176,2)
(174,115,2)
(108,40,2)
(113,5,2)
(110,183,2)
(199,63,2)
(5,72,2)
(133,174,2)
(137,29,2)
-----------------------------------
(0,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(1,dataLen + recvResult / sizeof(char)
(2,listenSocket != INVALID_SOCKET)
(3,dataBuffer[250] = "PATH=")
(4,\\\'\\\\n\\\')
(5,acceptSocket == SOCKET_ERROR)
(6,)
(7,data[dataLen + recvResult / sizeof(char)
(8,NULL)
(9,do)
(10,MAKEWORD(2,2)
(11,wsaDataInit)
(12,wsaDataInit)
(13,data)
(14,recvResult == SOCKET_ERROR)
(15,0)
(16,accept(listenSocket, NULL, NULL)
(17,SOCKET_ERROR)
(18,INVALID_SOCKET)
(19,listenSocket)
(20,dataLen)
(21,listenSocket)
(22,&wsaData)
(23,sizeof(char)
(24,service)
(25,"PATH=")
(26,SOCKET_ERROR)
(27,)
(28,acceptSocket = INVALID_SOCKET)
(29,listenSocket == INVALID_SOCKET)
(30,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(31,service.sin_port)
(32,listenSocket = INVALID_SOCKET)
(33,replace = strchr(data, \\\'\\\\n\\\')
(34,break;)
(35,SOCKET_ERROR)
(36,data)
(37,\\\'\\\\0\\\')
(38,service)
(39,recvResult = recv(acceptSocket, (char *)
(40,bind(listenSocket, (struct sockaddr*)
(41,*replace)
(42,if (replace)
(43,wsaData)
(44,dataLen)
(45,AF_INET)
(46,acceptSocket)
(47,replace)
(48,replace)
(49,bind(listenSocket, (struct sockaddr*)
(50,service.sin_port = htons(TCP_PORT)
(51,\\\'\\\\0\\\')
(52,recvResult)
(53,CWE427_Uncontrolled_Search_Path_Element__char_listen_socket_65b_badSink)
(54,dataLen = strlen(data)
(55,break;)
(56,service.sin_addr)
(57,1)
(58,if (listen(listenSocket, LISTEN_BACKLOG)
(59,250)
(60,acceptSocket)
(61,)
(62,dataBuffer)
(63,recvResult == SOCKET_ERROR || recvResult == 0)
(64,recvResult == 0)
(65,listenSocket)
(66,1)
(67,dataLen)
(68,data)
(69,recvResult)
(70,if (listenSocket != INVALID_SOCKET)
(71,service)
(72,listen(listenSocket, LISTEN_BACKLOG)
(73,wsaData)
(74,)
(75,recvResult)
(76,TCP_PORT)
(77,)
(78,acceptSocket)
(79,listenSocket)
(80,sin_family)
(81,char)
(82,acceptSocket)
(83,0)
(84,service.sin_family = AF_INET)
(85,replace)
(86,replace)
(87,data[dataLen + recvResult / sizeof(char)
(88,*replace = \\\'\\\\0\\\')
(89,listenSocket)
(90,recvResult / sizeof(char)
(91,\\\'\\\\r\\\')
(92,if (listenSocket == INVALID_SOCKET)
(93,)
(94,funcPtr(data)
(95,(char *)
(96,INADDR_ANY)
(97,acceptSocket = accept(listenSocket, NULL, NULL)
(98,NO_ERROR)
(99,break;)
(100,wsaDataInit)
(101,listenSocket)
(102,IPPROTO_TCP)
(103,)
(104,CLOSE_SOCKET(listenSocket)
(105,acceptSocket != INVALID_SOCKET)
(106,&service)
(107,if (replace)
(108,listen(listenSocket, LISTEN_BACKLOG)
(109,dataLen)
(110,strchr(data, \\\'\\\\n\\\')
(111,data)
(112,*replace = \\\'\\\\0\\\')
(113,sizeof(char)
(114,INVALID_SOCKET)
(115,WSAStartup(MAKEWORD(2,2)
(116,recvResult)
(117,data + dataLen)
(118,break;)
(119,sizeof(char)
(120,sin_port)
(121,break;)
(122,&service)
(123,if (acceptSocket != INVALID_SOCKET)
(124,s_addr)
(125,250 - dataLen - 1)
(126,)
(127,*replace)
(128,service.sin_addr.s_addr)
(129,sin_addr)
(130,AF_INET)
(131,if (wsaDataInit)
(132,service)
(133,wsaDataInit = 1)
(134,(struct sockaddr*)
(135,2)
(136,struct sockaddr*)
(137,service)
(138,)
(139,break;)
(140,0)
(141,htons(TCP_PORT)
(142,0)
(143,replace = strchr(data, \\\'\\\\r\\\')
(144,strlen(data)
(145,)
(146,service.sin_addr.s_addr = INADDR_ANY)
(147,replace)
(148,service)
(149,recvResult)
(150,INVALID_SOCKET)
(151,INVALID_SOCKET)
(152,service.sin_family)
(153,service)
(154,sizeof(service)
(155,recv(acceptSocket, (char *)
(156,if (acceptSocket == SOCKET_ERROR)
(157,)
(158,dataLen)
(159,strchr(data, \\\'\\\\r\\\')
(160,char)
(161,SOCK_STREAM)
(162,wsaDataInit = 0)
(163,funcPtr)
(164,LISTEN_BACKLOG)
(165,char *)
(166,acceptSocket)
(167,acceptSocket)
(168,)
(169,replace)
(170,\\\'\\\\0\\\')
(171,funcPtr)
(172,CLOSE_SOCKET(acceptSocket)
(173,listenSocket)
(174,WSAStartup(MAKEWORD(2,2)
(175,dataBuffer)
(176,replace)
(177,2)
(178,INVALID_SOCKET)
(179,acceptSocket)
(180,)
(181,dataLen - 1)
(182,listenSocket)
(183,data = dataBuffer)
(184,service)
(185,data)
(186,if (bind(listenSocket, (struct sockaddr*)
(187,data)
(188,WSACleanup()
(189,wsaDataInit)
(190,sizeof(service)
(191,RET)
(192,)
(193,if (WSAStartup(MAKEWORD(2,2)
(194,dataBuffer)
(195,memset(&service, 0, sizeof(service)
(196,listenSocket)
(197,NULL)
(198,data)
(199,data)
(200,(*funcPtr)
(201,if (recvResult == SOCKET_ERROR || recvResult == 0)
(202,SOCKET_ERROR)
(203,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
