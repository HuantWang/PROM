-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        WSADATA wsaData;
        BOOL wsaDataInit = FALSE;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        struct sockaddr_in service;
        int recvResult;
        do
        {
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
            listenSocket = socket(PF_INET, SOCK_STREAM, 0);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(LISTEN_PORT);
            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
            {
                break;
            }
            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == INVALID_SOCKET)
            {
                break;
            }
            /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
            /* FLAW: read the new hostname from a network socket */
            recvResult = recv(acceptSocket, data, 100 - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            data[recvResult] = '\0';
        }
        while (0);
        if (acceptSocket != INVALID_SOCKET)
        {
            closesocket(acceptSocket);
        }
        if (listenSocket != INVALID_SOCKET)
        {
            closesocket(listenSocket);
        }
        if (wsaDataInit)
        {
            WSACleanup();
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
55,56
57,58
57,59
58,59
58,60
58,61
58,62
58,63
58,64
58,65
58,66
58,67
58,68
58,69
58,70
58,71
58,72
58,73
59,60
59,61
60,61
60,62
61,62
61,63
61,64
62,63
64,65
64,66
64,67
65,66
69,70
70,71
72,73
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
85,87
85,88
85,89
86,87
88,89
90,91
93,94
93,95
94,95
94,96
95,96
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
106,107
109,110
110,111
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
142,144
143,144
143,145
144,145
146,147
146,148
146,149
146,150
147,148
149,150
151,152
151,153
152,153
152,154
153,154
155,156
157,158
158,159
160,161
161,162
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
170,172
170,173
171,172
173,174
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
192,193
192,194
193,194
193,195
194,195
196,197
198,199
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
204,209
205,206
207,208
209,210
211,212
211,213
215,216
215,217
216,217
216,218
217,218
217,219
218,219
220,221
222,223
222,224
223,224
226,227
228,229
229,230
229,231
230,231
230,232
231,232
233,234
237,238
237,239
238,239
238,240
239,240
241,242
243,244
244,245
245,246
245,247
246,247
248,249
250,251
250,252
251,252
251,253
252,253
254,255
256,257
257,258
258,259
258,260
259,260
261,262
263,264
263,265
264,265
266,267
267,268
268,269
269,270
271,272
272,273
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,27,31,33,36,40,42,45,49,51,54,56,63,66,67,68,71,73,75,79,80,84,87,89,91,92,96,98,100,104,107,108,112,117,118,120,126,127,128,130,135,136,139,141,145,148,150,154,156,159,163,165,169,172,174,176,178,182,185,187,189,191,195,197,199,203,206,208,210,212,213,214,219,221,224,225,227,232,234,235,236,240,242,247,249,253,255,260,262,265,270,273
-----computeFrom-----
60,61
60,62
77,78
77,79
82,83
82,84
94,95
94,96
114,115
114,116
122,123
122,124
132,133
132,134
143,144
143,145
167,168
167,169
180,181
180,182
193,194
193,195
201,202
201,203
211,212
211,213
216,217
216,218
217,218
217,219
222,223
222,224
229,230
229,231
238,239
238,240
251,252
251,253
-----guardedBy-----
240,249
253,262
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    return data;}
{        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);
{            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                break;            }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                break;            }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)            {                break;            }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(acceptSocket);        }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(listenSocket);        }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)        {            WSACleanup();        }
wsaDataInit
wsaDataInit
{            WSACleanup();        }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
return data;
data
data
-----joern-----
(108,8,0)
(56,46,0)
(41,94,0)
(73,120,0)
(116,124,0)
(80,94,0)
(39,37,0)
(141,65,0)
(47,7,0)
(57,128,0)
(12,8,0)
(115,8,0)
(145,94,0)
(135,58,0)
(20,82,0)
(22,79,0)
(121,5,0)
(45,41,0)
(7,79,0)
(26,52,0)
(44,40,0)
(95,149,0)
(52,82,0)
(112,87,0)
(19,35,0)
(37,5,0)
(68,115,0)
(133,35,0)
(87,40,0)
(20,31,0)
(87,7,0)
(85,32,0)
(0,76,0)
(3,115,0)
(16,58,0)
(144,82,0)
(139,20,0)
(80,100,0)
(103,55,0)
(35,69,0)
(71,55,0)
(83,79,0)
(43,0,0)
(134,138,0)
(20,139,0)
(23,35,0)
(129,150,0)
(131,123,0)
(142,79,0)
(95,20,0)
(31,20,0)
(147,95,0)
(100,80,0)
(11,137,0)
(14,8,0)
(33,31,0)
(94,115,0)
(58,16,0)
(16,79,0)
(95,147,0)
(125,98,0)
(134,82,0)
(150,128,0)
(87,94,0)
(55,8,0)
(94,79,0)
(128,57,0)
(34,111,0)
(91,84,0)
(37,82,0)
(1,37,0)
(115,40,0)
(10,76,0)
(5,37,0)
(62,114,0)
(48,16,0)
(24,108,0)
(0,65,0)
(98,35,0)
(88,64,0)
(127,126,0)
(18,124,0)
(146,84,0)
(78,41,0)
(82,79,0)
(64,115,0)
(93,30,0)
(105,38,0)
(111,79,0)
(66,30,0)
(74,87,0)
(140,14,0)
(115,64,0)
(146,8,0)
(136,35,0)
(44,69,0)
(36,81,0)
(32,128,0)
(50,76,0)
(13,79,0)
(146,102,0)
(21,108,0)
(104,114,0)
(63,84,0)
(106,107,0)
(107,111,0)
(54,20,0)
(97,146,0)
(118,79,0)
(52,120,0)
(49,79,0)
(65,79,0)
(124,82,0)
(99,27,0)
(59,139,0)
(4,35,0)
(120,35,0)
(130,57,0)
(53,14,0)
(70,49,0)
(29,44,0)
(60,114,0)
(25,35,0)
(81,16,0)
(117,14,0)
(128,150,0)
(101,80,0)
(30,79,0)
(14,82,0)
(92,120,0)
(82,114,0)
(17,64,0)
(115,94,0)
(128,32,0)
(148,49,0)
(77,79,0)
(113,107,0)
(67,35,0)
(8,79,0)
(6,115,0)
(9,52,0)
(76,0,0)
(96,122,0)
(20,95,0)
(100,41,0)
(42,34,0)
(15,80,0)
(90,149,0)
(114,82,0)
(84,35,0)
(111,34,0)
(149,95,0)
(8,14,0)
(132,98,0)
(119,134,0)
(61,150,0)
(72,93,0)
(28,35,0)
(55,84,0)
(51,44,0)
(16,81,0)
(134,120,0)
(109,35,0)
(75,35,0)
(41,100,0)
(89,93,0)
(37,39,1)
(14,82,1)
(120,73,1)
(140,12,1)
(44,40,1)
(115,40,1)
(1,121,1)
(66,93,1)
(146,97,1)
(104,60,1)
(112,74,1)
(29,99,1)
(135,48,1)
(97,55,1)
(113,106,1)
(87,94,1)
(54,33,1)
(45,78,1)
(96,100,1)
(59,95,1)
(84,91,1)
(127,124,1)
(146,84,1)
(20,82,1)
(129,61,1)
(116,82,1)
(87,40,1)
(71,127,1)
(72,89,1)
(92,98,1)
(144,49,1)
(134,82,1)
(121,31,1)
(150,129,1)
(124,82,1)
(0,76,1)
(2,134,1)
(100,41,1)
(43,76,1)
(74,100,1)
(62,144,1)
(55,103,1)
(125,132,1)
(48,81,1)
(16,81,1)
(52,82,1)
(3,145,1)
(128,150,1)
(9,146,1)
(36,124,1)
(30,66,1)
(117,140,1)
(17,88,1)
(58,135,1)
(71,131,1)
(33,111,1)
(139,59,1)
(10,30,1)
(24,21,1)
(128,57,1)
(60,62,1)
(119,52,1)
(81,36,1)
(141,0,1)
(89,16,1)
(63,120,1)
(37,82,1)
(148,70,1)
(20,139,1)
(32,128,1)
(55,8,1)
(51,44,1)
(31,20,1)
(41,45,1)
(16,58,1)
(49,148,1)
(91,63,1)
(52,120,1)
(32,85,1)
(134,120,1)
(115,64,1)
(86,7,1)
(44,29,1)
(70,32,1)
(0,43,1)
(5,37,1)
(95,147,1)
(103,71,1)
(146,8,1)
(18,116,1)
(15,41,1)
(26,9,1)
(78,94,1)
(131,5,1)
(9,55,1)
(68,64,1)
(88,6,1)
(65,141,1)
(85,128,1)
(61,84,1)
(130,150,1)
(71,11,1)
(14,53,1)
(52,26,1)
(80,94,1)
(47,87,1)
(145,108,1)
(55,84,1)
(98,125,1)
(149,90,1)
(99,2,1)
(87,112,1)
(115,8,1)
(80,101,1)
(20,95,1)
(108,24,1)
(2,52,1)
(82,114,1)
(71,86,1)
(111,34,1)
(57,130,1)
(7,47,1)
(100,80,1)
(64,17,1)
(107,113,1)
(34,42,1)
(94,115,1)
(93,72,1)
(53,117,1)
(71,105,1)
(21,8,1)
(8,14,1)
(11,31,1)
(50,10,1)
(12,5,1)
(95,149,1)
(108,8,1)
(124,18,1)
(106,65,1)
(29,2,1)
(6,3,1)
(73,92,1)
(90,54,1)
(71,56,1)
(115,68,1)
(114,104,1)
(61,86,1)
(134,119,1)
(56,108,1)
(41,94,1)
(105,32,1)
(101,15,1)
(71,96,1)
(39,1,1)
(42,107,1)
(76,50,1)
(139,124,2)
(56,108,2)
(41,108,2)
(32,128,2)
(47,100,2)
(14,82,2)
(101,41,2)
(87,40,2)
(146,84,2)
(106,124,2)
(51,44,2)
(135,124,2)
(62,32,2)
(16,124,2)
(30,124,2)
(0,76,2)
(145,108,2)
(12,5,2)
(111,34,2)
(39,31,2)
(37,31,2)
(81,124,2)
(16,81,2)
(20,124,2)
(105,32,2)
(64,108,2)
(88,108,2)
(80,94,2)
(3,108,2)
(43,124,2)
(76,124,2)
(48,124,2)
(6,108,2)
(37,82,2)
(89,124,2)
(134,120,2)
(112,100,2)
(95,124,2)
(87,94,2)
(115,108,2)
(20,95,2)
(5,37,2)
(49,32,2)
(141,124,2)
(115,40,2)
(65,124,2)
(130,86,2)
(94,108,2)
(80,41,2)
(128,150,2)
(52,120,2)
(78,108,2)
(134,82,2)
(34,124,2)
(121,31,2)
(36,124,2)
(113,124,2)
(128,86,2)
(95,149,2)
(94,115,2)
(114,32,2)
(66,124,2)
(108,8,2)
(7,100,2)
(42,124,2)
(99,2,2)
(55,8,2)
(90,124,2)
(8,14,2)
(72,124,2)
(85,86,2)
(108,5,2)
(70,32,2)
(97,55,2)
(15,41,2)
(74,100,2)
(124,82,2)
(8,5,2)
(100,80,2)
(129,86,2)
(59,124,2)
(82,32,2)
(0,124,2)
(127,124,2)
(148,32,2)
(5,31,2)
(128,57,2)
(14,5,2)
(86,100,2)
(93,124,2)
(16,58,2)
(53,5,2)
(119,52,2)
(58,124,2)
(115,8,2)
(20,139,2)
(50,124,2)
(96,100,2)
(124,32,2)
(146,55,2)
(111,124,2)
(11,31,2)
(31,20,2)
(32,86,2)
(131,5,2)
(1,31,2)
(45,108,2)
(52,82,2)
(95,147,2)
(57,86,2)
(31,124,2)
(100,41,2)
(150,86,2)
(144,32,2)
(33,124,2)
(117,5,2)
(44,40,2)
(54,124,2)
(17,108,2)
(134,52,2)
(116,32,2)
(140,5,2)
(115,64,2)
(60,32,2)
(107,124,2)
(21,5,2)
(104,32,2)
(55,84,2)
(20,82,2)
(41,94,2)
(146,8,2)
(61,86,2)
(68,108,2)
(87,100,2)
(18,32,2)
(82,114,2)
(24,5,2)
(149,124,2)
(10,124,2)
(100,108,2)
-----------------------------------
(0,service.sin_addr.s_addr)
(1,listenSocket)
(2,wsaDataInit)
(3,acceptSocket)
(4,service)
(5,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(6,data)
(7,data[recvResult] = '\\\\0')
(8,acceptSocket = accept(listenSocket, NULL, NULL)
(9,listenSocket)
(10,service)
(11,break;)
(12,acceptSocket)
(13,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(14,accept(listenSocket, NULL, NULL)
(15,recvResult)
(16,memset(&service, 0, sizeof(service)
(17,1)
(18,INVALID_SOCKET)
(19,recvResult)
(20,bind(listenSocket, (struct sockaddr*)
(21,acceptSocket)
(22,if (acceptSocket == INVALID_SOCKET)
(23,do)
(24,INVALID_SOCKET)
(25,acceptSocket)
(26,INVALID_SOCKET)
(27,)
(28,if (acceptSocket != INVALID_SOCKET)
(29,data)
(30,service.sin_family = AF_INET)
(31,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(32,WSAStartup(MAKEWORD(2,2)
(33,SOCKET_ERROR)
(34,htons(LISTEN_PORT)
(35,)
(36,service)
(37,listen(listenSocket, LISTEN_BACKLOG)
(38,)
(39,LISTEN_BACKLOG)
(40,char * data)
(41,recvResult == SOCKET_ERROR)
(42,LISTEN_PORT)
(43,s_addr)
(44,return data;)
(45,SOCKET_ERROR)
(46,)
(47,'\\\\0')
(48,0)
(49,wsaDataInit = 1)
(50,sin_addr)
(51,RET)
(52,listenSocket != INVALID_SOCKET)
(53,NULL)
(54,listenSocket)
(55,acceptSocket != INVALID_SOCKET)
(56,break;)
(57,&wsaData)
(58,sizeof(service)
(59,service)
(60,SOCK_STREAM)
(61,2)
(62,PF_INET)
(63,acceptSocket)
(64,100 - 1)
(65,service.sin_addr.s_addr = INADDR_ANY)
(66,AF_INET)
(67,wsaDataInit)
(68,0)
(69,)
(70,wsaDataInit)
(71,acceptSocket)
(72,sin_family)
(73,INVALID_SOCKET)
(74,data)
(75,if (listenSocket != INVALID_SOCKET)
(76,service.sin_addr)
(77,if (recvResult == SOCKET_ERROR || recvResult == 0)
(78,recvResult)
(79,)
(80,recvResult == 0)
(81,&service)
(82,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(83,if (listenSocket == INVALID_SOCKET)
(84,acceptSocket = INVALID_SOCKET)
(85,NO_ERROR)
(86,0)
(87,data[recvResult])
(88,100)
(89,service)
(90,service)
(91,INVALID_SOCKET)
(92,listenSocket)
(93,service.sin_family)
(94,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(95,(struct sockaddr*)
(96,break;)
(97,acceptSocket)
(98,wsaDataInit = FALSE)
(99,WSACleanup()
(100,recvResult == SOCKET_ERROR || recvResult == 0)
(101,0)
(102,)
(103,INVALID_SOCKET)
(104,0)
(105,break;)
(106,service)
(107,service.sin_port)
(108,acceptSocket == INVALID_SOCKET)
(109,if (wsaDataInit)
(110,data[recvResult] = \'\\\\0\')
(111,service.sin_port = htons(LISTEN_PORT)
(112,recvResult)
(113,sin_port)
(114,socket(PF_INET, SOCK_STREAM, 0)
(115,recv(acceptSocket, data, 100 - 1, 0)
(116,listenSocket)
(117,NULL)
(118,if (WSAStartup(MAKEWORD(2,2)
(119,listenSocket)
(120,listenSocket = INVALID_SOCKET)
(121,SOCKET_ERROR)
(122,)
(123,)
(124,listenSocket == INVALID_SOCKET)
(125,FALSE)
(126,)
(127,break;)
(128,WSAStartup(MAKEWORD(2,2)
(129,2)
(130,wsaData)
(131,break;)
(132,wsaDataInit)
(133,listenSocket)
(134,closesocket(listenSocket)
(135,service)
(136,wsaData)
(137,)
(138,)
(139,sizeof(service)
(140,listenSocket)
(141,INADDR_ANY)
(142,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(143,\'\\\\0\')
(144,listenSocket)
(145,recvResult)
(146,closesocket(acceptSocket)
(147,struct sockaddr*)
(148,1)
(149,&service)
(150,MAKEWORD(2,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
