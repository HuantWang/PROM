-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_free_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: free() password without clearing the password buffer */
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
64,65
64,66
64,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
75,76
77,78
78,79
78,80
79,80
79,81
80,81
84,85
84,86
85,86
85,87
86,87
86,88
86,89
86,90
87,88
89,90
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
123,124
124,125
125,126
125,127
126,127
126,128
127,128
129,130
129,131
130,131
134,135
134,136
134,137
135,136
135,137
136,137
136,138
136,139
136,140
136,141
136,142
136,143
137,138
139,140
141,142
143,144
145,146
147,148
149,150
150,151
153,154
153,155
154,155
155,156
155,157
156,157
159,160
160,161
160,162
161,162
163,164
165,166
166,167
167,168
167,169
168,169
171,172
172,173
172,174
173,174
175,176
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,54,58,60,63,65,66,68,71,73,74,76,81,82,83,88,90,91,93,95,100,101,106,107,108,112,115,117,121,122,128,131,132,133,138,140,142,144,146,148,151,152,157,158,162,164,169,170,174,176
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
78,79
78,80
85,86
85,87
103,104
103,105
110,111
110,112
119,120
119,121
125,126
125,127
129,130
129,131
135,136
135,137
-----guardedBy-----
90,106
121,131
151,164
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_free_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_wchar_t_free_06_bad()
CWE244_Heap_Inspection__w32_wchar_t_free_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
free(password);
free(password)
free
free
password
password
-----joern-----
(17,26,0)
(1,58,0)
(61,12,0)
(74,7,0)
(55,30,0)
(42,24,0)
(16,18,0)
(58,18,0)
(9,34,0)
(67,38,0)
(40,52,0)
(3,49,0)
(19,46,0)
(66,18,0)
(75,58,0)
(14,32,0)
(70,15,0)
(38,67,0)
(15,68,0)
(18,68,0)
(6,68,0)
(67,69,0)
(60,44,0)
(15,18,0)
(37,66,0)
(0,33,0)
(65,49,0)
(19,56,0)
(66,7,0)
(49,34,0)
(31,41,0)
(54,12,0)
(53,68,0)
(69,67,0)
(13,66,0)
(57,66,0)
(49,18,0)
(2,18,0)
(46,19,0)
(22,50,0)
(27,16,0)
(71,68,0)
(51,68,0)
(34,49,0)
(5,68,0)
(39,14,0)
(35,68,0)
(44,30,0)
(18,67,0)
(48,49,0)
(64,49,0)
(8,32,0)
(23,68,0)
(26,75,0)
(4,49,0)
(7,66,0)
(10,64,0)
(29,16,0)
(63,68,0)
(67,18,0)
(58,75,0)
(72,55,0)
(59,68,0)
(68,20,0)
(41,47,0)
(73,75,0)
(21,26,0)
(11,46,0)
(28,49,0)
(25,68,0)
(62,52,0)
(24,68,0)
(36,24,0)
(52,62,0)
(43,62,0)
(75,68,0)
(49,64,0)
(62,38,0)
(38,62,0)
(64,10,1)
(39,7,1)
(35,24,1)
(14,39,1)
(70,41,1)
(49,64,1)
(58,1,1)
(73,8,1)
(57,13,1)
(7,66,1)
(66,37,1)
(2,12,1)
(1,73,1)
(67,38,1)
(61,54,1)
(27,29,1)
(7,74,1)
(65,4,1)
(43,2,1)
(11,16,1)
(34,9,1)
(45,15,1)
(3,26,1)
(58,18,1)
(28,48,1)
(18,67,1)
(4,3,1)
(37,57,1)
(6,35,1)
(19,46,1)
(55,72,1)
(42,19,1)
(0,26,1)
(9,49,1)
(70,55,1)
(62,52,1)
(24,36,1)
(52,40,1)
(38,62,1)
(44,60,1)
(3,0,1)
(75,58,1)
(12,61,1)
(60,34,1)
(67,69,1)
(15,18,1)
(29,18,1)
(31,34,1)
(72,44,1)
(17,21,1)
(45,12,1)
(48,65,1)
(46,11,1)
(40,43,1)
(66,18,1)
(41,31,1)
(26,75,1)
(49,18,1)
(16,18,1)
(21,75,1)
(13,51,1)
(51,6,1)
(73,7,1)
(42,16,1)
(8,14,1)
(16,27,1)
(74,66,1)
(10,28,1)
(36,42,1)
(15,70,1)
(34,49,1)
(26,17,1)
(42,12,2)
(11,16,2)
(48,12,2)
(67,69,2)
(7,66,2)
(75,12,2)
(6,12,2)
(58,18,2)
(18,12,2)
(55,34,2)
(65,12,2)
(51,12,2)
(52,12,2)
(10,12,2)
(66,12,2)
(39,7,2)
(7,12,2)
(67,38,2)
(40,12,2)
(24,12,2)
(21,12,2)
(16,12,2)
(19,46,2)
(38,62,2)
(1,12,2)
(43,12,2)
(72,34,2)
(62,52,2)
(17,12,2)
(34,12,2)
(62,12,2)
(64,12,2)
(73,12,2)
(57,12,2)
(75,58,2)
(49,64,2)
(41,34,2)
(74,12,2)
(38,12,2)
(46,16,2)
(66,18,2)
(14,7,2)
(60,34,2)
(35,12,2)
(58,12,2)
(8,7,2)
(13,12,2)
(26,12,2)
(70,12,2)
(27,12,2)
(29,12,2)
(9,12,2)
(36,12,2)
(26,75,2)
(34,49,2)
(49,18,2)
(49,12,2)
(15,18,2)
(2,12,2)
(19,16,2)
(18,67,2)
(31,34,2)
(37,12,2)
(16,18,2)
(3,12,2)
(44,34,2)
(15,12,2)
(0,26,2)
(67,12,2)
(28,12,2)
(4,12,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,password)
(2,password)
(3,username)
(4,domain)
(5,if (passwordLen > 0)
(6,"Domain")
(7,fgetws(password, 100, stdin)
(8,\\\'\\\\0\\\')
(9,0)
(10,hUser)
(11,1)
(12,STATIC_CONST_FIVE==5)
(13,password)
(14,printLine("fgetws()
(15,free(password)
(16,password == NULL)
(17,0)
(18,* password = (wchar_t *)
(19,exit(-1)
(20,)
(21,passwordLen)
(22,if(STATIC_CONST_FIVE==5)
(23,if (password == NULL)
(24,passwordLen = 0)
(25,passwordLen)
(26,passwordLen > 0)
(27,NULL)
(28,LOGON32_PROVIDER_DEFAULT)
(29,password)
(30,)
(31,"Unable to login.")
(32,)
(33,)
(34,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(35,"User")
(36,0)
(37,stdin)
(38,malloc(100*sizeof(wchar_t)
(39,"fgetws()
(40,wchar_t)
(41,printLine("Unable to login.")
(42,passwordLen)
(43,100)
(44,printLine("User logged in successfully.")
(45,RET)
(46,-1)
(47,)
(48,LOGON32_LOGON_NETWORK)
(49,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(50,)
(51,\\\'\\\\0\\\')
(52,sizeof(wchar_t)
(53,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(54,STATIC_CONST_FIVE)
(55,CloseHandle(hUser)
(56,)
(57,100)
(58,wcslen(password)
(59,password)
(60,"User logged in successfully.")
(61,5)
(62,100*sizeof(wchar_t)
(63,hUser)
(64,&hUser)
(65,password)
(66,fgetws(password, 100, stdin)
(67,(wchar_t *)
(68,)
(69,wchar_t *)
(70,password)
(71,if (fgetws(password, 100, stdin)
(72,hUser)
(73,passwordLen)
(74,NULL)
(75,passwordLen = wcslen(password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
