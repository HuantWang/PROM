-----label-----
1
-----code-----
char * CWE427_Uncontrolled_Search_Path_Element__char_console_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE427_Uncontrolled_Search_Path_Element__char_console_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE427_Uncontrolled_Search_Path_Element__char_console_61b_badSource(char * data)
*
CWE427_Uncontrolled_Search_Path_Element__char_console_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(62,24,0)
(55,58,0)
(23,30,0)
(38,57,0)
(32,27,0)
(50,17,0)
(42,31,0)
(28,47,0)
(31,48,0)
(2,27,0)
(13,44,0)
(53,6,0)
(31,18,0)
(58,38,0)
(60,22,0)
(16,5,0)
(48,36,0)
(24,62,0)
(15,28,0)
(10,40,0)
(6,62,0)
(62,29,0)
(5,13,0)
(19,60,0)
(8,17,0)
(1,57,0)
(9,37,0)
(24,47,0)
(13,5,0)
(49,35,0)
(34,13,0)
(36,48,0)
(27,18,0)
(4,56,0)
(59,6,0)
(44,45,0)
(11,60,0)
(18,27,0)
(30,13,0)
(13,30,0)
(17,62,0)
(25,17,0)
(20,28,0)
(27,15,0)
(44,6,0)
(0,29,0)
(54,18,0)
(43,35,0)
(18,31,0)
(35,37,0)
(35,62,0)
(58,15,0)
(26,8,0)
(45,44,0)
(15,3,0)
(38,47,0)
(5,62,0)
(7,3,0)
(39,62,0)
(5,47,0)
(51,4,0)
(41,38,0)
(36,15,0)
(35,47,0)
(44,13,0)
(52,29,0)
(38,58,0)
(18,47,0)
(17,8,0)
(29,22,0)
(63,58,0)
(57,61,0)
(6,44,0)
(37,56,0)
(46,5,0)
(21,36,0)
(48,31,0)
(14,15,0)
(60,47,0)
(28,15,0)
(33,24,0)
(12,36,0)
(48,36,1)
(35,62,1)
(13,34,1)
(17,50,1)
(14,30,1)
(25,62,1)
(27,15,1)
(15,28,1)
(60,47,1)
(44,6,1)
(28,47,1)
(50,25,1)
(44,45,1)
(35,43,1)
(35,47,1)
(24,33,1)
(31,42,1)
(6,62,1)
(20,14,1)
(53,59,1)
(6,53,1)
(18,27,1)
(54,36,1)
(48,31,1)
(49,4,1)
(5,16,1)
(24,47,1)
(5,47,1)
(31,18,1)
(36,12,1)
(60,19,1)
(1,38,1)
(19,37,1)
(12,21,1)
(27,2,1)
(42,18,1)
(8,17,1)
(28,20,1)
(38,58,1)
(32,54,1)
(17,62,1)
(13,44,1)
(41,48,1)
(21,15,1)
(16,46,1)
(58,55,1)
(55,63,1)
(26,17,1)
(34,44,1)
(4,51,1)
(13,5,1)
(2,32,1)
(19,48,1)
(62,24,1)
(11,60,1)
(59,5,1)
(5,62,1)
(37,9,1)
(19,57,1)
(43,49,1)
(33,39,1)
(23,13,1)
(63,41,1)
(8,26,1)
(57,1,1)
(18,47,1)
(46,8,1)
(19,8,1)
(30,23,1)
(38,47,1)
(9,35,1)
(58,15,1)
(30,13,1)
(36,15,1)
(51,30,1)
(24,47,2)
(35,62,2)
(28,30,2)
(8,17,2)
(46,8,2)
(21,30,2)
(13,44,2)
(32,36,2)
(13,5,2)
(20,30,2)
(53,8,2)
(42,36,2)
(44,6,2)
(57,48,2)
(48,31,2)
(44,45,2)
(17,62,2)
(9,30,2)
(58,48,2)
(43,30,2)
(15,28,2)
(12,30,2)
(23,8,2)
(58,15,2)
(30,13,2)
(18,27,2)
(6,8,2)
(6,62,2)
(63,48,2)
(15,30,2)
(36,15,2)
(11,60,2)
(62,24,2)
(31,36,2)
(48,30,2)
(1,48,2)
(18,36,2)
(13,8,2)
(14,30,2)
(51,30,2)
(38,58,2)
(49,30,2)
(27,15,2)
(27,36,2)
(41,48,2)
(31,18,2)
(5,8,2)
(2,36,2)
(59,8,2)
(38,47,2)
(54,36,2)
(34,8,2)
(44,8,2)
(35,47,2)
(60,47,2)
(48,36,2)
(55,48,2)
(38,48,2)
(28,47,2)
(4,30,2)
(35,30,2)
(36,30,2)
(30,8,2)
(18,47,2)
(37,30,2)
(5,47,2)
(16,8,2)
(5,62,2)
-----------------------------------
(0,if (250-dataLen > 1)
(1,\\\'\\\\0\\\')
(2,1)
(3,)
(4,printLine("fgets()
(5,data+dataLen)
(6,250-dataLen)
(7,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(8,250-dataLen > 1)
(9,\\\'\\\\0\\\')
(10,if (fgets(data+dataLen, (int)
(11,RET)
(12,0)
(13,fgets(data+dataLen, (int)
(14,dataLen)
(15,dataLen = strlen(data)
(16,dataLen)
(17,250-dataLen)
(18,data[dataLen-1])
(19,data)
(20,data)
(21,dataLen)
(22,)
(23,NULL)
(24,strlen(data)
(25,250)
(26,1)
(27,dataLen-1)
(28,strlen(data)
(29,)
(30,fgets(data+dataLen, (int)
(31,data[dataLen-1] == \\\'\\\\n\\\')
(32,dataLen)
(33,data)
(34,stdin)
(35,data[dataLen])
(36,dataLen > 0)
(37,data[dataLen] = \\\'\\\\0\\\')
(38,data[dataLen-1])
(39,dataLen)
(40,)
(41,data)
(42,\\\'\\\\n\\\')
(43,dataLen)
(44,(int)
(45,int)
(46,data)
(47,char * data)
(48,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,data)
(50,dataLen)
(51,"fgets()
(52,dataLen)
(53,dataLen)
(54,data)
(55,1)
(56,)
(57,data[dataLen-1] = \\\'\\\\0\\\')
(58,dataLen-1)
(59,250)
(60,return data;)
(61,)
(62,dataLen = strlen(data)
(63,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
