-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(26,12,0)
(32,17,0)
(42,17,0)
(36,24,0)
(2,48,0)
(9,13,0)
(52,33,0)
(33,48,0)
(31,54,0)
(58,56,0)
(65,17,0)
(27,9,0)
(12,34,0)
(15,10,0)
(22,25,0)
(35,11,0)
(52,1,0)
(10,24,0)
(17,45,0)
(48,24,0)
(55,18,0)
(57,23,0)
(37,33,0)
(48,2,0)
(28,55,0)
(13,9,0)
(63,11,0)
(11,63,0)
(39,63,0)
(32,24,0)
(43,48,0)
(19,46,0)
(6,32,0)
(36,42,0)
(56,24,0)
(10,58,0)
(47,58,0)
(54,38,0)
(51,5,0)
(11,58,0)
(17,32,0)
(14,36,0)
(4,18,0)
(41,45,0)
(30,1,0)
(33,52,0)
(38,10,0)
(0,11,0)
(51,58,0)
(13,58,0)
(50,51,0)
(10,38,0)
(64,13,0)
(2,17,0)
(21,38,0)
(53,55,0)
(40,5,0)
(48,33,0)
(51,24,0)
(66,12,0)
(56,58,0)
(38,9,0)
(29,51,0)
(36,57,0)
(9,27,0)
(5,49,0)
(16,56,0)
(62,10,0)
(59,13,0)
(44,1,0)
(20,2,0)
(1,52,0)
(60,2,0)
(46,49,0)
(9,38,0)
(8,57,0)
(61,42,0)
(58,12,0)
(55,24,0)
(42,36,0)
(1,17,0)
(3,42,0)
(38,54,0)
(53,63,1)
(14,52,1)
(38,21,1)
(53,52,1)
(44,17,1)
(9,27,1)
(11,58,1)
(64,10,1)
(10,58,1)
(32,24,1)
(33,48,1)
(54,31,1)
(46,19,1)
(11,35,1)
(61,14,1)
(5,40,1)
(1,17,1)
(9,13,1)
(52,33,1)
(60,20,1)
(6,65,1)
(33,37,1)
(56,24,1)
(51,58,1)
(21,9,1)
(48,24,1)
(52,1,1)
(10,15,1)
(65,54,1)
(38,10,1)
(53,5,1)
(35,0,1)
(55,24,1)
(54,38,1)
(56,16,1)
(13,58,1)
(1,30,1)
(51,24,1)
(63,39,1)
(13,59,1)
(39,11,1)
(8,36,1)
(2,60,1)
(30,44,1)
(36,24,1)
(50,46,1)
(63,11,1)
(53,57,1)
(62,63,1)
(31,38,1)
(42,3,1)
(48,2,1)
(10,24,1)
(16,47,1)
(51,29,1)
(42,17,1)
(28,55,1)
(47,7,1)
(19,54,1)
(37,48,1)
(40,51,1)
(17,32,1)
(15,62,1)
(20,43,1)
(53,7,1)
(29,50,1)
(2,17,1)
(3,61,1)
(38,9,1)
(57,8,1)
(36,42,1)
(32,6,1)
(0,58,1)
(43,1,1)
(55,53,1)
(59,64,1)
(58,56,1)
(2,1,2)
(55,24,2)
(48,1,2)
(63,11,2)
(36,42,2)
(29,54,2)
(21,63,2)
(17,54,2)
(10,24,2)
(60,1,2)
(11,7,2)
(62,63,2)
(17,32,2)
(51,54,2)
(50,54,2)
(9,27,2)
(13,58,2)
(36,24,2)
(47,7,2)
(30,54,2)
(56,24,2)
(44,54,2)
(37,1,2)
(13,63,2)
(14,52,2)
(10,63,2)
(58,56,2)
(52,33,2)
(63,7,2)
(56,7,2)
(38,9,2)
(3,52,2)
(11,58,2)
(5,54,2)
(52,1,2)
(20,1,2)
(33,1,2)
(35,7,2)
(36,52,2)
(43,1,2)
(9,63,2)
(42,52,2)
(16,7,2)
(2,17,2)
(48,2,2)
(54,38,2)
(32,54,2)
(64,63,2)
(59,63,2)
(54,63,2)
(1,54,2)
(48,24,2)
(6,54,2)
(38,63,2)
(9,13,2)
(57,52,2)
(58,7,2)
(51,24,2)
(51,58,2)
(39,7,2)
(10,58,2)
(31,63,2)
(28,55,2)
(19,54,2)
(32,24,2)
(38,10,2)
(42,17,2)
(1,17,2)
(52,54,2)
(65,54,2)
(8,52,2)
(46,54,2)
(0,7,2)
(61,52,2)
(15,63,2)
(40,54,2)
(33,48,2)
-----------------------------------
(0,250)
(1,dataLen > 0)
(2,dataLen-1)
(3,1)
(4,if(badStatic)
(5,data[dataLen] = \\\'\\\\0\\\')
(6,data)
(7,badStatic)
(8,\\\'\\\\0\\\')
(9,(int)
(10,data+dataLen)
(11,250-dataLen)
(12,)
(13,250-dataLen)
(14,data)
(15,dataLen)
(16,data)
(17,dataLen = strlen(data)
(18,)
(19,"fgets()
(20,dataLen)
(21,stdin)
(22,if (fgets(data+dataLen, (int)
(23,)
(24,char * data)
(25,)
(26,if (250-dataLen > 1)
(27,int)
(28,RET)
(29,dataLen)
(30,0)
(31,NULL)
(32,strlen(data)
(33,data[dataLen-1] == \\\'\\\\n\\\')
(34,)
(35,dataLen)
(36,data[dataLen-1])
(37,\\\'\\\\n\\\')
(38,fgets(data+dataLen, (int)
(39,1)
(40,\\\'\\\\0\\\')
(41,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,dataLen-1)
(43,data)
(44,dataLen)
(45,)
(46,printLine("fgets()
(47,dataLen)
(48,data[dataLen-1])
(49,)
(50,data)
(51,data[dataLen])
(52,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,data)
(54,fgets(data+dataLen, (int)
(55,return data;)
(56,strlen(data)
(57,data[dataLen-1] = \\\'\\\\0\\\')
(58,dataLen = strlen(data)
(59,dataLen)
(60,1)
(61,dataLen)
(62,data)
(63,250-dataLen > 1)
(64,250)
(65,dataLen)
(66,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
