-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_02_bad()
{
    if(1)
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fwprintf(pFile, L"User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
10,11
11,12
11,13
13,14
13,15
13,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
56,57
57,58
57,59
57,60
58,59
62,63
62,64
63,64
63,65
64,65
64,66
64,67
64,68
65,66
67,68
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
91,93
92,93
94,95
96,97
96,98
97,98
97,99
98,99
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
112,115
113,114
113,115
114,115
114,116
114,117
114,118
114,119
114,120
114,121
115,116
117,118
119,120
121,122
123,124
125,126
127,128
128,129
131,132
131,133
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
143,144
144,145
145,146
145,147
146,147
149,150
150,151
150,152
150,153
150,154
151,152
153,154
156,157
158,159
158,160
159,160
161,162
162,163
163,164
163,165
164,165
166,167
-----nextToken-----
2,4,7,12,14,16,18,22,24,26,30,32,35,37,38,40,43,45,46,48,52,54,55,59,60,61,66,68,69,71,73,78,79,84,85,86,90,93,95,99,100,106,109,110,111,116,118,120,122,124,126,129,130,135,136,140,142,147,148,152,154,155,157,160,165,167
-----computeFrom-----
63,64
63,65
81,82
81,83
88,89
88,90
97,98
97,99
103,104
103,105
107,108
107,109
113,114
113,115
-----guardedBy-----
68,84
99,109
129,142
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_02_bad(){    if(1)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_02_bad()
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_02_bad
{    if(1)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
if(1)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
1
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(pFile, L"User attempted access with password: %s\n", password);
fwprintf(pFile, L"User attempted access with password: %s\n", password)
fwprintf
fwprintf
pFile
pFile
L"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(26,2,0)
(29,64,0)
(56,26,0)
(43,64,0)
(10,30,0)
(16,60,0)
(27,64,0)
(35,64,0)
(18,46,0)
(42,64,0)
(23,39,0)
(3,57,0)
(60,16,0)
(28,47,0)
(32,64,0)
(21,39,0)
(34,48,0)
(7,40,0)
(51,16,0)
(45,7,0)
(20,43,0)
(24,34,0)
(5,64,0)
(23,64,0)
(33,16,0)
(53,64,0)
(63,41,0)
(19,40,0)
(59,10,0)
(55,16,0)
(8,23,0)
(48,34,0)
(49,64,0)
(50,47,0)
(22,51,0)
(38,19,0)
(41,62,0)
(47,28,0)
(6,64,0)
(9,16,0)
(34,64,0)
(1,16,0)
(25,47,0)
(11,13,0)
(26,23,0)
(13,34,0)
(44,28,0)
(4,13,0)
(0,64,0)
(39,23,0)
(14,47,0)
(58,30,0)
(64,17,0)
(61,43,0)
(12,60,0)
(15,39,0)
(36,48,0)
(37,16,0)
(16,51,0)
(34,48,1)
(61,20,1)
(22,55,1)
(15,8,1)
(24,28,1)
(55,33,1)
(63,60,1)
(59,28,1)
(48,36,1)
(36,24,1)
(52,54,1)
(4,11,1)
(25,50,1)
(0,54,1)
(5,32,1)
(3,13,1)
(38,7,1)
(23,39,1)
(37,1,1)
(21,15,1)
(51,22,1)
(45,60,1)
(13,4,1)
(43,61,1)
(52,31,1)
(44,47,1)
(47,14,1)
(8,5,1)
(33,9,1)
(31,41,1)
(7,45,1)
(11,34,1)
(19,38,1)
(50,23,1)
(16,51,1)
(10,59,1)
(60,12,1)
(32,43,1)
(24,58,1)
(41,63,1)
(26,23,1)
(28,44,1)
(28,47,1)
(13,34,1)
(26,56,1)
(1,13,1)
(12,16,1)
(52,26,1)
(1,3,1)
(31,19,1)
(39,21,1)
(58,10,1)
(9,37,1)
(20,0,1)
(60,16,1)
(56,31,1)
(14,25,1)
(44,54,2)
(56,31,2)
(28,54,2)
(48,54,2)
(0,54,2)
(16,54,2)
(22,54,2)
(4,54,2)
(45,60,2)
(13,54,2)
(14,54,2)
(63,60,2)
(11,54,2)
(38,60,2)
(55,54,2)
(32,54,2)
(60,16,2)
(1,54,2)
(37,54,2)
(50,54,2)
(47,54,2)
(23,39,2)
(51,54,2)
(43,54,2)
(34,48,2)
(39,54,2)
(31,54,2)
(23,54,2)
(26,31,2)
(9,54,2)
(25,54,2)
(61,54,2)
(19,60,2)
(28,47,2)
(41,60,2)
(13,34,2)
(60,54,2)
(21,54,2)
(34,54,2)
(26,23,2)
(15,54,2)
(33,54,2)
(5,54,2)
(24,54,2)
(58,28,2)
(59,28,2)
(36,54,2)
(3,13,2)
(8,54,2)
(12,54,2)
(20,54,2)
(7,60,2)
(10,28,2)
(16,51,2)
-----------------------------------
(0,"")
(1,username)
(2,)
(3,\\\'\\\\0\\\')
(4,0)
(5,"Domain")
(6,if (pFile)
(7,printLine("User logged in successfully.")
(8,pFile)
(9,password)
(10,printLine("fgetws()
(11,passwordLen)
(12,0)
(13,passwordLen > 0)
(14,stdin)
(15,"debug.txt")
(16,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(17,)
(18,if(1)
(19,CloseHandle(pHandle)
(20,passwordLen)
(21,"a+")
(22,pHandle)
(23,* pFile = fopen("debug.txt", "a+")
(24,passwordLen)
(25,100)
(26,fclose(pFile)
(27,pFile)
(28,fgetws(password, 100, stdin)
(29,passwordLen)
(30,)
(31,pFile)
(32,"User")
(33,LOGON32_LOGON_NETWORK)
(34,passwordLen = wcslen(password)
(35,pHandle)
(36,password)
(37,domain)
(38,pHandle)
(39,fopen("debug.txt", "a+")
(40,)
(41,printLine("Unable to login.")
(42,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(43,passwordLen = 0)
(44,NULL)
(45,"User logged in successfully.")
(46,)
(47,fgetws(password, 100, stdin)
(48,wcslen(password)
(49,if (passwordLen > 0)
(50,password)
(51,&pHandle)
(52,RET)
(53,if (fgetws(password, 100, stdin)
(54,1)
(55,LOGON32_PROVIDER_DEFAULT)
(56,pFile)
(57,)
(58,\\\'\\\\0\\\')
(59,"fgetws()
(60,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(61,0)
(62,)
(63,"Unable to login.")
(64,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
