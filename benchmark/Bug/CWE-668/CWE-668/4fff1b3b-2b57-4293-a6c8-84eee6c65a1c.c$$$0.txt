-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_02_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            char *replace;
            SOCKET connectSocket = INVALID_SOCKET;
            size_t dataLen = strlen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* Abort on error or the connection was closed */
                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(char)] = '\0';
                /* Eliminate CRLF */
                replace = strchr(data, '\r');
                if (replace)
                {
                    *replace = '\0';
                }
                replace = strchr(data, '\n');
                if (replace)
                {
                    *replace = '\0';
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
45,46
45,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
70,79
70,80
70,81
70,82
70,83
70,84
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
97,98
100,101
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
138,141
138,142
139,140
141,142
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
152,153
153,154
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
164,169
165,166
167,168
169,170
169,171
170,171
170,172
172,173
174,175
175,176
175,177
176,177
178,179
180,181
180,182
181,182
182,183
182,184
185,186
186,187
186,188
187,188
187,189
189,190
193,194
193,195
194,195
194,196
195,196
195,197
196,197
198,199
200,201
200,202
201,202
204,205
206,207
207,208
207,209
208,209
208,210
209,210
211,212
211,213
212,213
214,215
214,216
215,216
217,218
218,219
218,220
222,223
223,224
223,225
224,225
226,227
226,228
226,229
227,228
229,230
232,233
232,234
233,234
235,236
236,237
237,238
237,239
238,239
239,240
242,243
243,244
243,245
244,245
246,247
246,248
246,249
247,248
249,250
252,253
252,254
253,254
255,256
256,257
257,258
257,259
258,259
259,260
263,264
263,265
264,265
264,266
265,266
267,268
269,270
270,271
271,272
271,273
272,273
274,275
276,277
277,278
277,279
278,279
280,281
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,33,35,39,41,44,46,47,51,53,56,60,62,66,68,74,77,79,81,83,87,89,91,95,98,99,103,108,109,111,117,118,119,122,124,129,130,133,135,140,142,146,148,151,155,157,159,163,166,168,171,173,177,179,183,184,188,190,191,192,197,199,202,203,205,210,213,216,219,220,221,225,228,230,231,234,240,241,245,248,250,251,254,260,261,262,266,268,273,275,279,281
-----computeFrom-----
22,23
22,24
72,73
72,74
85,86
85,87
105,106
105,107
113,114
113,115
126,127
126,128
137,138
137,139
161,162
161,163
175,176
175,177
180,181
180,182
186,187
186,188
187,188
187,189
194,195
194,196
195,196
195,197
200,201
200,202
207,208
207,209
211,212
211,213
214,215
214,216
223,224
223,225
237,238
237,239
243,244
243,245
257,258
257,259
264,265
264,266
-----guardedBy-----
266,275
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_02_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_02_bad()
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_02_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (250 - dataLen - 1)
sizeof(char)
char
char

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(129,147,0)
(114,164,0)
(142,51,0)
(143,38,0)
(38,143,0)
(52,68,0)
(139,25,0)
(109,9,0)
(158,146,0)
(45,109,0)
(156,14,0)
(63,101,0)
(119,125,0)
(19,166,0)
(104,14,0)
(108,47,0)
(76,107,0)
(114,147,0)
(156,100,0)
(56,107,0)
(117,33,0)
(58,42,0)
(91,69,0)
(70,90,0)
(165,46,0)
(85,107,0)
(125,148,0)
(14,104,0)
(87,107,0)
(170,68,0)
(115,38,0)
(116,44,0)
(21,64,0)
(70,87,0)
(164,114,0)
(51,107,0)
(142,100,0)
(157,24,0)
(138,46,0)
(62,100,0)
(144,107,0)
(154,95,0)
(24,67,0)
(114,70,0)
(164,100,0)
(122,98,0)
(172,111,0)
(166,146,0)
(127,95,0)
(41,119,0)
(69,155,0)
(109,103,0)
(105,37,0)
(82,68,0)
(5,107,0)
(51,142,0)
(167,87,0)
(22,68,0)
(65,101,0)
(35,33,0)
(86,0,0)
(133,100,0)
(79,39,0)
(120,115,0)
(7,142,0)
(121,167,0)
(11,38,0)
(168,68,0)
(106,111,0)
(37,103,0)
(164,25,0)
(153,68,0)
(103,107,0)
(125,109,0)
(80,42,0)
(70,114,0)
(0,165,0)
(166,103,0)
(103,123,0)
(9,109,0)
(76,135,0)
(12,107,0)
(10,74,0)
(31,100,0)
(165,0,0)
(97,76,0)
(126,68,0)
(26,130,0)
(152,90,0)
(4,0,0)
(34,74,0)
(85,74,0)
(42,68,0)
(40,68,0)
(88,35,0)
(16,114,0)
(135,76,0)
(90,70,0)
(100,33,0)
(73,30,0)
(13,133,0)
(151,87,0)
(38,11,0)
(111,87,0)
(146,68,0)
(167,172,0)
(47,108,0)
(37,14,0)
(25,107,0)
(29,33,0)
(15,142,0)
(160,146,0)
(24,146,0)
(149,78,0)
(171,167,0)
(172,167,0)
(125,119,0)
(72,98,0)
(3,9,0)
(66,32,0)
(108,37,0)
(59,107,0)
(108,18,0)
(50,69,0)
(92,36,0)
(48,1,0)
(83,143,0)
(17,75,0)
(162,137,0)
(150,138,0)
(31,33,0)
(110,33,0)
(163,135,0)
(161,166,0)
(24,103,0)
(128,51,0)
(130,107,0)
(37,108,0)
(155,107,0)
(2,51,0)
(38,115,0)
(113,70,0)
(145,100,0)
(100,35,0)
(78,92,0)
(74,85,0)
(112,11,0)
(99,123,0)
(169,165,0)
(124,35,0)
(87,37,0)
(147,133,0)
(46,138,0)
(46,107,0)
(57,92,0)
(18,108,0)
(95,103,0)
(101,147,0)
(147,68,0)
(68,54,0)
(23,73,0)
(64,76,0)
(156,147,0)
(49,2,0)
(101,47,0)
(32,155,0)
(134,103,0)
(74,100,0)
(37,87,0)
(155,32,0)
(111,172,0)
(109,96,0)
(109,125,0)
(141,31,0)
(133,147,0)
(132,107,0)
(131,18,0)
(89,77,0)
(6,115,0)
(76,64,0)
(27,130,0)
(47,101,0)
(2,73,0)
(94,111,0)
(8,47,0)
(84,156,0)
(159,123,0)
(98,75,0)
(28,156,0)
(43,68,0)
(75,107,0)
(102,123,0)
(14,37,0)
(148,125,0)
(55,37,0)
(123,103,0)
(60,85,0)
(118,96,0)
(96,109,0)
(78,85,0)
(20,68,0)
(140,164,0)
(14,156,0)
(111,106,1)
(0,4,1)
(45,155,1)
(97,64,1)
(130,26,1)
(47,101,1)
(172,111,1)
(157,166,1)
(85,74,1)
(113,16,1)
(143,83,1)
(163,97,1)
(16,140,1)
(6,53,1)
(58,80,1)
(71,166,1)
(125,119,1)
(156,28,1)
(2,51,1)
(9,3,1)
(62,145,1)
(158,160,1)
(25,139,1)
(118,109,1)
(101,147,1)
(34,10,1)
(64,21,1)
(87,37,1)
(124,88,1)
(100,35,1)
(61,100,1)
(172,167,1)
(145,35,1)
(166,161,1)
(152,113,1)
(23,2,1)
(128,25,1)
(141,71,1)
(51,142,1)
(15,128,1)
(123,99,1)
(94,87,1)
(37,105,1)
(116,96,1)
(108,47,1)
(133,13,1)
(121,171,1)
(19,53,1)
(37,103,1)
(160,42,1)
(96,118,1)
(141,61,1)
(102,134,1)
(24,157,1)
(112,38,1)
(114,70,1)
(129,146,1)
(155,32,1)
(11,112,1)
(96,109,1)
(127,103,1)
(142,100,1)
(115,120,1)
(48,71,1)
(38,115,1)
(78,149,1)
(17,98,1)
(57,78,1)
(28,84,1)
(93,85,1)
(114,147,1)
(83,115,1)
(24,103,1)
(166,146,1)
(11,38,1)
(74,34,1)
(98,72,1)
(154,127,1)
(146,158,1)
(111,87,1)
(164,100,1)
(80,61,1)
(99,159,1)
(169,0,1)
(95,103,1)
(151,96,1)
(46,138,1)
(167,121,1)
(7,15,1)
(138,150,1)
(31,141,1)
(135,163,1)
(166,103,1)
(139,164,1)
(10,60,1)
(131,14,1)
(31,100,1)
(41,45,1)
(165,0,1)
(27,11,1)
(26,27,1)
(6,147,1)
(109,125,1)
(70,87,1)
(133,100,1)
(100,62,1)
(81,31,1)
(19,116,1)
(167,87,1)
(37,108,1)
(140,172,1)
(156,147,1)
(21,95,1)
(86,75,1)
(69,50,1)
(78,85,1)
(3,125,1)
(105,108,1)
(91,46,1)
(79,172,1)
(76,64,1)
(42,58,1)
(142,7,1)
(19,162,1)
(122,76,1)
(134,130,1)
(14,156,1)
(108,18,1)
(65,8,1)
(92,57,1)
(109,9,1)
(35,124,1)
(19,79,1)
(24,146,1)
(60,136,1)
(66,69,1)
(63,65,1)
(2,49,1)
(14,104,1)
(8,18,1)
(141,48,1)
(89,11,1)
(136,51,1)
(120,6,1)
(18,131,1)
(4,86,1)
(150,165,1)
(159,102,1)
(119,41,1)
(53,92,1)
(162,95,1)
(32,66,1)
(106,94,1)
(53,93,1)
(74,100,1)
(49,136,1)
(95,154,1)
(156,100,1)
(109,103,1)
(101,63,1)
(55,151,1)
(171,111,1)
(84,55,1)
(75,17,1)
(38,143,1)
(37,14,1)
(125,148,1)
(70,90,1)
(90,152,1)
(103,123,1)
(149,93,1)
(164,114,1)
(60,73,1)
(72,122,1)
(19,89,1)
(50,91,1)
(147,133,1)
(76,135,1)
(71,24,1)
(13,129,1)
(73,23,1)
(165,169,1)
(161,19,1)
(127,11,2)
(6,61,2)
(129,61,2)
(165,0,2)
(51,172,2)
(128,172,2)
(108,47,2)
(164,114,2)
(70,172,2)
(156,96,2)
(3,95,2)
(106,96,2)
(108,18,2)
(160,61,2)
(41,95,2)
(2,136,2)
(72,95,2)
(166,146,2)
(37,108,2)
(57,93,2)
(7,172,2)
(142,100,2)
(111,96,2)
(6,53,2)
(159,11,2)
(133,61,2)
(156,100,2)
(143,61,2)
(133,100,2)
(157,166,2)
(74,100,2)
(17,95,2)
(147,61,2)
(14,104,2)
(115,53,2)
(37,103,2)
(101,96,2)
(171,111,2)
(78,93,2)
(112,53,2)
(151,96,2)
(49,136,2)
(152,172,2)
(8,96,2)
(38,53,2)
(45,95,2)
(13,61,2)
(139,172,2)
(58,61,2)
(131,96,2)
(38,143,2)
(115,61,2)
(138,95,2)
(0,95,2)
(87,37,2)
(83,53,2)
(93,172,2)
(16,172,2)
(121,111,2)
(31,100,2)
(143,53,2)
(130,11,2)
(85,172,2)
(142,172,2)
(11,61,2)
(70,90,2)
(163,95,2)
(11,53,2)
(25,172,2)
(19,61,2)
(108,96,2)
(146,61,2)
(125,119,2)
(96,109,2)
(155,32,2)
(24,146,2)
(21,95,2)
(164,172,2)
(60,172,2)
(101,147,2)
(125,95,2)
(164,100,2)
(46,95,2)
(65,96,2)
(147,133,2)
(42,61,2)
(116,96,2)
(53,172,2)
(4,95,2)
(172,96,2)
(98,95,2)
(149,93,2)
(114,70,2)
(24,166,2)
(166,61,2)
(136,172,2)
(165,95,2)
(156,147,2)
(169,95,2)
(26,11,2)
(23,136,2)
(37,96,2)
(161,61,2)
(34,172,2)
(96,95,2)
(109,95,2)
(172,167,2)
(102,11,2)
(111,87,2)
(9,95,2)
(167,87,2)
(73,136,2)
(122,95,2)
(158,61,2)
(75,95,2)
(11,38,2)
(113,172,2)
(66,95,2)
(51,142,2)
(76,135,2)
(140,172,2)
(86,95,2)
(18,96,2)
(125,148,2)
(87,96,2)
(97,95,2)
(99,11,2)
(32,95,2)
(155,95,2)
(172,111,2)
(63,96,2)
(109,103,2)
(24,103,2)
(166,103,2)
(70,87,2)
(76,95,2)
(14,156,2)
(94,96,2)
(79,172,2)
(2,51,2)
(109,9,2)
(47,101,2)
(90,172,2)
(85,74,2)
(114,172,2)
(47,96,2)
(10,172,2)
(105,96,2)
(14,96,2)
(103,11,2)
(83,61,2)
(71,61,2)
(150,95,2)
(84,96,2)
(76,64,2)
(38,61,2)
(103,123,2)
(91,95,2)
(15,172,2)
(95,103,2)
(89,11,2)
(37,14,2)
(109,125,2)
(38,115,2)
(120,53,2)
(112,61,2)
(123,11,2)
(100,35,2)
(80,61,2)
(46,138,2)
(95,11,2)
(48,71,2)
(135,95,2)
(28,96,2)
(55,96,2)
(50,95,2)
(154,11,2)
(27,11,2)
(92,93,2)
(134,11,2)
(114,147,2)
(167,111,2)
(69,95,2)
(119,95,2)
(162,95,2)
(78,85,2)
(118,95,2)
(74,172,2)
(120,61,2)
(64,95,2)
-----------------------------------
(0,service.sin_addr)
(1,)
(2,*replace)
(3,service)
(4,sin_addr)
(5,if (connectSocket == INVALID_SOCKET)
(6,2)
(7,\\\'\\\\r\\\')
(8,250)
(9,sizeof(service)
(10,data)
(11,WSAStartup(MAKEWORD(2,2)
(12,if (recvResult == SOCKET_ERROR || recvResult == 0)
(13,data)
(14,(char *)
(15,data)
(16,dataLen)
(17,AF_INET)
(18,sizeof(char)
(19,connectSocket)
(20,if (wsaDataInit)
(21,service)
(22,do)
(23,\\\'\\\\0\\\')
(24,CLOSE_SOCKET(connectSocket)
(25,data[dataLen + recvResult / sizeof(char)
(26,1)
(27,wsaDataInit)
(28,dataLen)
(29,dataBuffer)
(30,)
(31,PUTENV(data)
(32,htons(TCP_PORT)
(33,)
(34,\\\'\\\\n\\\')
(35,dataBuffer[250] = "PATH=")
(36,)
(37,recv(connectSocket, (char *)
(38,WSAStartup(MAKEWORD(2,2)
(39,)
(40,wsaDataInit)
(41,service)
(42,wsaDataInit = 0)
(43,recvResult)
(44,)
(45,connectSocket)
(46,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(47,250 - dataLen - 1)
(48,WSACleanup()
(49,replace)
(50,sin_port)
(51,replace = strchr(data, \\\'\\\\r\\\')
(52,wsaData)
(53,0)
(54,)
(55,connectSocket)
(56,if (connect(connectSocket, (struct sockaddr*)
(57,\\\'\\\\0\\\')
(58,0)
(59,if (WSAStartup(MAKEWORD(2,2)
(60,replace)
(61,1)
(62,dataBuffer)
(63,1)
(64,&service)
(65,dataLen)
(66,TCP_PORT)
(67,)
(68,)
(69,service.sin_port)
(70,recvResult / sizeof(char)
(71,wsaDataInit)
(72,sin_family)
(73,*replace = \\\'\\\\0\\\')
(74,strchr(data, \\\'\\\\n\\\')
(75,service.sin_family = AF_INET)
(76,memset(&service, 0, sizeof(service)
(77,)
(78,*replace)
(79,break;)
(80,wsaDataInit)
(81,RET)
(82,replace)
(83,wsaData)
(84,data)
(85,replace = strchr(data, \\\'\\\\n\\\')
(86,service)
(87,recvResult = recv(connectSocket, (char *)
(88,dataBuffer)
(89,break;)
(90,sizeof(char)
(91,service)
(92,*replace = \\\'\\\\0\\\')
(93,replace)
(94,recvResult)
(95,connectSocket == INVALID_SOCKET)
(96,connect(connectSocket, (struct sockaddr*)
(97,0)
(98,service.sin_family)
(99,IPPROTO_TCP)
(100,data = dataBuffer)
(101,dataLen - 1)
(102,AF_INET)
(103,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(104,char *)
(105,0)
(106,SOCKET_ERROR)
(107,)
(108,sizeof(char)
(109,connect(connectSocket, (struct sockaddr*)
(110,if(1)
(111,recvResult == SOCKET_ERROR)
(112,NO_ERROR)
(113,recvResult)
(114,dataLen + recvResult / sizeof(char)
(115,MAKEWORD(2,2)
(116,break;)
(117,data)
(118,SOCKET_ERROR)
(119,&service)
(120,2)
(121,0)
(122,service)
(123,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(124,"PATH=")
(125,(struct sockaddr*)
(126,dataLen)
(127,connectSocket)
(128,replace)
(129,dataLen)
(130,wsaDataInit = 1)
(131,char)
(132,if (replace)
(133,strlen(data)
(134,connectSocket)
(135,sizeof(service)
(136,replace)
(137,)
(138,inet_addr(IP_ADDRESS)
(139,\\\'\\\\0\\\')
(140,data)
(141,data)
(142,strchr(data, \\\'\\\\r\\\')
(143,&wsaData)
(144,if (replace)
(145,data)
(146,connectSocket = INVALID_SOCKET)
(147,dataLen = strlen(data)
(148,struct sockaddr*)
(149,replace)
(150,IP_ADDRESS)
(151,recvResult)
(152,char)
(153,connectSocket)
(154,INVALID_SOCKET)
(155,service.sin_port = htons(TCP_PORT)
(156,data + dataLen)
(157,connectSocket)
(158,INVALID_SOCKET)
(159,SOCK_STREAM)
(160,connectSocket)
(161,INVALID_SOCKET)
(162,break;)
(163,service)
(164,data[dataLen + recvResult / sizeof(char)
(165,service.sin_addr.s_addr)
(166,connectSocket != INVALID_SOCKET)
(167,recvResult == 0)
(168,if (connectSocket != INVALID_SOCKET)
(169,s_addr)
(170,service)
(171,recvResult)
(172,recvResult == SOCKET_ERROR || recvResult == 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
