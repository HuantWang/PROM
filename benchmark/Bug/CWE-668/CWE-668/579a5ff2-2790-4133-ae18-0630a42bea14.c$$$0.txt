-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_05_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(staticTrue)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_05_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_05_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_05_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticTrue)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
staticTrue
staticTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(18,7,0)
(57,23,0)
(20,35,0)
(41,62,0)
(36,23,0)
(19,23,0)
(27,16,0)
(17,52,0)
(19,7,0)
(60,65,0)
(48,65,0)
(72,15,0)
(31,7,0)
(69,55,0)
(61,13,0)
(68,2,0)
(70,2,0)
(55,43,0)
(7,23,0)
(12,23,0)
(29,61,0)
(71,3,0)
(63,19,0)
(8,72,0)
(32,66,0)
(65,52,0)
(25,7,0)
(31,61,0)
(32,10,0)
(55,69,0)
(46,65,0)
(52,6,0)
(69,67,0)
(43,55,0)
(4,37,0)
(53,7,0)
(73,31,0)
(66,32,0)
(66,7,0)
(69,7,0)
(39,52,0)
(2,31,0)
(16,62,0)
(0,69,0)
(37,65,0)
(4,1,0)
(49,62,0)
(64,23,0)
(47,40,0)
(2,32,0)
(67,32,0)
(25,72,0)
(62,65,0)
(50,60,0)
(31,2,0)
(58,37,0)
(25,65,0)
(21,67,0)
(7,57,0)
(33,38,0)
(62,7,0)
(3,60,0)
(1,4,0)
(28,25,0)
(43,40,0)
(40,43,0)
(22,57,0)
(30,55,0)
(67,69,0)
(54,37,0)
(11,67,0)
(59,57,0)
(26,10,0)
(42,25,0)
(45,46,0)
(60,3,0)
(35,16,0)
(34,40,0)
(5,15,0)
(51,66,0)
(4,16,0)
(46,7,0)
(37,4,0)
(40,32,0)
(16,35,0)
(24,32,0)
(65,46,0)
(16,4,0)
(9,5,0)
(62,16,0)
(14,60,0)
(50,14,1)
(53,57,1)
(16,62,1)
(2,70,1)
(44,19,1)
(57,59,1)
(24,35,1)
(59,22,1)
(67,32,1)
(43,40,1)
(61,29,1)
(63,72,1)
(14,65,1)
(25,7,1)
(37,54,1)
(62,7,1)
(73,43,1)
(51,24,1)
(46,7,1)
(54,58,1)
(7,18,1)
(19,7,1)
(25,65,1)
(35,20,1)
(32,66,1)
(34,47,1)
(47,32,1)
(29,31,1)
(21,11,1)
(40,32,1)
(46,45,1)
(16,4,1)
(30,69,1)
(62,41,1)
(58,62,1)
(62,65,1)
(25,42,1)
(67,21,1)
(49,3,1)
(28,5,1)
(45,48,1)
(19,63,1)
(37,65,1)
(20,16,1)
(65,46,1)
(69,67,1)
(18,53,1)
(16,27,1)
(8,25,1)
(9,35,1)
(55,69,1)
(66,7,1)
(60,65,1)
(11,0,1)
(4,37,1)
(69,7,1)
(42,28,1)
(5,9,1)
(48,56,1)
(3,71,1)
(66,51,1)
(71,60,1)
(2,32,1)
(63,61,1)
(70,68,1)
(7,57,1)
(41,49,1)
(43,55,1)
(31,2,1)
(4,1,1)
(63,3,1)
(56,7,1)
(72,8,1)
(55,30,1)
(68,73,1)
(27,4,1)
(3,60,1)
(40,34,1)
(60,50,1)
(0,40,1)
(35,16,1)
(31,7,1)
(63,43,1)
(63,56,1)
(50,56,2)
(66,35,2)
(69,67,2)
(60,65,2)
(7,57,2)
(25,7,2)
(31,43,2)
(72,35,2)
(37,3,2)
(55,40,2)
(51,35,2)
(62,65,2)
(43,40,2)
(47,35,2)
(9,35,2)
(5,35,2)
(37,65,2)
(49,3,2)
(54,3,2)
(28,35,2)
(29,43,2)
(65,46,2)
(21,40,2)
(31,7,2)
(58,3,2)
(43,55,2)
(41,3,2)
(16,4,2)
(20,3,2)
(40,32,2)
(16,3,2)
(32,66,2)
(31,2,2)
(25,65,2)
(67,32,2)
(32,35,2)
(46,56,2)
(69,7,2)
(35,3,2)
(68,43,2)
(34,35,2)
(55,69,2)
(4,3,2)
(48,56,2)
(0,40,2)
(8,35,2)
(2,32,2)
(73,43,2)
(67,40,2)
(40,35,2)
(45,56,2)
(4,37,2)
(62,3,2)
(25,35,2)
(69,40,2)
(61,43,2)
(43,35,2)
(16,62,2)
(71,56,2)
(3,60,2)
(30,40,2)
(11,40,2)
(3,56,2)
(27,3,2)
(65,56,2)
(19,7,2)
(24,35,2)
(35,16,2)
(42,35,2)
(14,56,2)
(70,43,2)
(2,43,2)
(60,56,2)
(4,1,2)
(62,7,2)
(66,7,2)
(46,7,2)
-----------------------------------
(0,data)
(1,int)
(2,dataLen-1)
(3,250-dataLen > 1)
(4,(int)
(5,printLine("fgets()
(6,)
(7,data = dataBuffer)
(8,\\\'\\\\0\\\')
(9,"fgets()
(10,)
(11,dataLen)
(12,data)
(13,)
(14,250)
(15,)
(16,fgets(data+dataLen, (int)
(17,dataLen)
(18,dataBuffer)
(19,PUTENV(data)
(20,NULL)
(21,1)
(22,dataBuffer)
(23,)
(24,dataLen)
(25,data[dataLen])
(26,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(27,stdin)
(28,data)
(29,\\\'\\\\0\\\')
(30,\\\'\\\\n\\\')
(31,data[dataLen-1])
(32,dataLen = strlen(data)
(33,if (fgets(data+dataLen, (int)
(34,0)
(35,fgets(data+dataLen, (int)
(36,dataBuffer)
(37,250-dataLen)
(38,)
(39,if (250-dataLen > 1)
(40,dataLen > 0)
(41,dataLen)
(42,dataLen)
(43,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(44,RET)
(45,data)
(46,strlen(data)
(47,dataLen)
(48,dataLen)
(49,data)
(50,dataLen)
(51,data)
(52,)
(53,data)
(54,dataLen)
(55,data[dataLen-1] == \\\'\\\\n\\\')
(56,staticTrue)
(57,dataBuffer[250] = "PATH=")
(58,250)
(59,"PATH=")
(60,250-dataLen)
(61,data[dataLen-1] = \\\'\\\\0\\\')
(62,data+dataLen)
(63,data)
(64,if(staticTrue)
(65,dataLen = strlen(data)
(66,strlen(data)
(67,dataLen-1)
(68,dataLen)
(69,data[dataLen-1])
(70,1)
(71,1)
(72,data[dataLen] = \\\'\\\\0\\\')
(73,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
