-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_09_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    if(GLOBAL_CONST_TRUE)
    {
        {
            WSADATA wsaData;
            BOOL wsaDataInit = FALSE;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            struct sockaddr_in service;
            int recvResult;
            do
            {
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
                listenSocket = socket(PF_INET, SOCK_STREAM, 0);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(LISTEN_PORT);
                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
                {
                    break;
                }
                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == INVALID_SOCKET)
                {
                    break;
                }
                /* INCIDENTAL CWE 188 - reliance on data memory layout
                 * recv and friends return "number of bytes" received
                 * char's on our system, however, may not be "octets" (8-bit
                 * bytes) but could be just about anything.  Also,
                 * even if the external environment is ASCII or UTF8,
                 * the ANSI/ISO C standard does not dictate that the
                 * character set used by the actual language or character
                 * constants matches.
                 *
                 * In practice none of these are usually issues...
                 */
                /* FLAW: read the new hostname from a network socket */
                recvResult = recv(acceptSocket, data, 100 - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                data[recvResult] = '\0';
            }
            while (0);
            if (acceptSocket != INVALID_SOCKET)
            {
                closesocket(acceptSocket);
            }
            if (listenSocket != INVALID_SOCKET)
            {
                closesocket(listenSocket);
            }
            if (wsaDataInit)
            {
                WSACleanup();
            }
        }
    }
    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */
    if (!SetComputerNameA(data))
    {
        printLine("Failure setting computer name");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
74,75
76,77
76,78
77,78
77,79
77,80
77,81
77,82
77,83
77,84
77,85
77,86
77,87
77,88
77,89
77,90
77,91
77,92
78,79
78,80
79,80
79,81
80,81
80,82
80,83
81,82
83,84
83,85
83,86
84,85
88,89
89,90
91,92
93,94
95,96
96,97
96,98
97,98
100,101
101,102
101,103
102,103
104,105
104,106
104,107
104,108
105,106
107,108
109,110
112,113
112,114
113,114
113,115
114,115
116,117
118,119
120,121
121,122
121,123
121,124
121,125
122,123
124,125
125,126
128,129
129,130
130,131
132,133
133,134
133,135
134,135
134,136
135,136
138,139
140,141
141,142
141,143
142,143
142,144
143,144
143,145
144,145
148,149
150,151
151,152
151,153
152,153
152,154
153,154
156,157
156,158
157,158
159,160
161,162
161,163
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
170,172
171,172
171,173
172,173
174,175
176,177
177,178
179,180
180,181
181,182
183,184
185,186
185,187
186,187
186,188
187,188
189,190
189,191
189,192
190,191
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
202,206
203,204
205,206
207,208
209,210
211,212
211,213
212,213
212,214
213,214
215,216
217,218
219,220
220,221
220,222
221,222
223,224
223,225
223,226
223,227
223,228
224,225
226,227
228,229
230,231
230,232
234,235
234,236
235,236
235,237
236,237
236,238
237,238
239,240
241,242
241,243
242,243
245,246
247,248
248,249
248,250
249,250
249,251
250,251
252,253
256,257
256,258
257,258
257,259
258,259
260,261
262,263
263,264
264,265
264,266
265,266
267,268
269,270
269,271
270,271
270,272
271,272
273,274
275,276
276,277
277,278
277,279
278,279
280,281
282,283
282,284
283,284
285,286
286,287
287,288
288,289
290,291
290,292
291,292
292,293
292,294
293,294
295,296
297,298
297,299
298,299
299,300
299,301
300,301
303,304
304,305
304,306
305,306
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,46,50,52,55,59,61,64,68,70,73,75,82,85,86,87,90,92,94,98,99,103,106,108,110,111,115,117,119,123,126,127,131,136,137,139,145,146,147,149,154,155,158,160,164,167,169,173,175,178,182,184,188,191,193,195,197,201,204,206,208,210,214,216,218,222,225,227,229,231,232,233,238,240,243,244,246,251,253,254,255,259,261,266,268,272,274,279,281,284,289,294,296,301,302,306,307
-----computeFrom-----
22,23
22,24
79,80
79,81
96,97
96,98
101,102
101,103
113,114
113,115
133,134
133,135
141,142
141,143
151,152
151,153
162,163
162,164
186,187
186,188
199,200
199,201
212,213
212,214
220,221
220,222
230,231
230,232
235,236
235,237
236,237
236,238
241,242
241,243
248,249
248,250
257,258
257,259
270,271
270,272
-----guardedBy-----
259,268
272,281
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_09_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_09_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_09_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(GLOBAL_CONST_TRUE)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
{            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);
{                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                    break;                }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                    break;                }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)                {                    break;                }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(acceptSocket);            }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(listenSocket);            }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)            {                WSACleanup();            }
wsaDataInit
wsaDataInit
{                WSACleanup();            }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }
!SetComputerNameA(data)
SetComputerNameA(data)
SetComputerNameA
SetComputerNameA
data
data
{        printLine("Failure setting computer name");        exit(1);    }
printLine("Failure setting computer name");
printLine("Failure setting computer name")
printLine
printLine
"Failure setting computer name"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(6,46,0)
(41,149,0)
(73,57,0)
(158,95,0)
(97,21,0)
(140,149,0)
(161,132,0)
(64,135,0)
(116,49,0)
(137,74,0)
(138,145,0)
(81,43,0)
(128,23,0)
(90,31,0)
(135,46,0)
(60,57,0)
(113,118,0)
(165,57,0)
(126,162,0)
(117,85,0)
(31,86,0)
(80,46,0)
(105,21,0)
(10,16,0)
(31,57,0)
(43,46,0)
(16,61,0)
(150,115,0)
(13,66,0)
(149,55,0)
(83,57,0)
(3,132,0)
(20,38,0)
(46,56,0)
(159,10,0)
(18,46,0)
(157,111,0)
(80,162,0)
(84,124,0)
(31,148,0)
(30,80,0)
(9,15,0)
(143,35,0)
(33,23,0)
(19,132,0)
(115,150,0)
(37,2,0)
(106,6,0)
(4,82,0)
(1,120,0)
(123,132,0)
(120,57,0)
(94,54,0)
(119,73,0)
(44,64,0)
(34,58,0)
(130,56,0)
(116,15,0)
(67,60,0)
(85,46,0)
(108,115,0)
(70,57,0)
(51,124,0)
(77,0,0)
(16,145,0)
(88,112,0)
(46,57,0)
(100,55,0)
(42,71,0)
(104,57,0)
(145,16,0)
(102,119,0)
(109,0,0)
(5,135,0)
(118,21,0)
(155,132,0)
(133,0,0)
(78,3,0)
(79,165,0)
(150,75,0)
(69,83,0)
(124,80,0)
(110,66,0)
(146,132,0)
(2,132,0)
(17,116,0)
(29,10,0)
(8,132,0)
(101,18,0)
(147,2,0)
(7,132,0)
(69,118,0)
(48,149,0)
(124,51,0)
(56,46,0)
(69,48,0)
(52,135,0)
(135,64,0)
(149,118,0)
(132,151,0)
(34,112,0)
(111,107,0)
(120,18,0)
(85,68,0)
(160,56,0)
(93,149,0)
(156,165,0)
(59,112,0)
(92,83,0)
(45,48,0)
(23,60,0)
(55,149,0)
(122,118,0)
(22,87,0)
(144,55,0)
(129,113,0)
(27,120,0)
(50,57,0)
(149,120,0)
(80,82,0)
(61,16,0)
(153,58,0)
(121,115,0)
(26,69,0)
(112,34,0)
(48,57,0)
(113,98,0)
(85,3,0)
(112,48,0)
(14,1,0)
(72,0,0)
(66,73,0)
(35,120,0)
(80,124,0)
(6,3,0)
(96,148,0)
(127,132,0)
(103,58,0)
(162,80,0)
(58,34,0)
(124,84,0)
(141,89,0)
(62,61,0)
(21,0,0)
(139,18,0)
(148,31,0)
(39,84,0)
(73,119,0)
(18,120,0)
(142,57,0)
(98,113,0)
(40,86,0)
(53,15,0)
(1,15,0)
(74,107,0)
(91,57,0)
(99,3,0)
(47,75,0)
(75,57,0)
(25,125,0)
(152,69,0)
(149,48,0)
(114,6,0)
(11,132,0)
(12,46,0)
(28,35,0)
(164,1,0)
(134,132,0)
(118,0,0)
(86,31,0)
(32,56,0)
(163,57,0)
(24,118,0)
(58,48,0)
(116,120,0)
(82,80,0)
(15,132,0)
(136,150,0)
(131,43,0)
(16,10,0)
(65,18,0)
(36,98,1)
(162,80,1)
(28,143,1)
(47,150,1)
(40,43,1)
(4,124,1)
(150,115,1)
(31,148,1)
(12,165,1)
(98,113,1)
(31,86,1)
(130,12,1)
(46,56,1)
(69,118,1)
(156,61,1)
(60,67,1)
(34,112,1)
(129,154,1)
(140,41,1)
(81,131,1)
(73,119,1)
(9,3,1)
(79,156,1)
(164,22,1)
(32,130,1)
(17,1,1)
(116,120,1)
(80,124,1)
(149,120,1)
(16,10,1)
(154,118,1)
(63,6,1)
(55,144,1)
(121,60,1)
(80,82,1)
(143,120,1)
(80,46,1)
(59,88,1)
(96,90,1)
(112,48,1)
(5,44,1)
(22,34,1)
(128,31,1)
(58,153,1)
(158,64,1)
(14,164,1)
(117,6,1)
(113,118,1)
(157,74,1)
(160,32,1)
(86,40,1)
(165,79,1)
(20,63,1)
(108,121,1)
(85,117,1)
(6,46,1)
(10,159,1)
(52,5,1)
(21,97,1)
(164,94,1)
(138,10,1)
(23,33,1)
(36,111,1)
(6,106,1)
(103,48,1)
(43,81,1)
(111,157,1)
(124,51,1)
(30,126,1)
(84,39,1)
(37,154,1)
(106,114,1)
(34,58,1)
(135,52,1)
(149,55,1)
(35,120,1)
(93,55,1)
(74,137,1)
(1,120,1)
(118,21,1)
(69,48,1)
(41,45,1)
(94,61,1)
(116,17,1)
(126,73,1)
(97,105,1)
(82,4,1)
(100,140,1)
(29,15,1)
(159,29,1)
(48,149,1)
(69,26,1)
(164,76,1)
(24,122,1)
(120,18,1)
(83,92,1)
(148,96,1)
(76,83,1)
(136,115,1)
(164,42,1)
(131,46,1)
(25,162,1)
(66,13,1)
(164,25,1)
(119,102,1)
(53,9,1)
(15,53,1)
(147,37,1)
(129,20,1)
(1,14,1)
(116,15,1)
(164,158,1)
(1,15,1)
(102,66,1)
(101,27,1)
(149,118,1)
(92,69,1)
(42,43,1)
(78,99,1)
(61,62,1)
(16,145,1)
(75,47,1)
(114,116,1)
(18,46,1)
(110,75,1)
(67,23,1)
(118,24,1)
(44,162,1)
(64,135,1)
(137,98,1)
(149,93,1)
(145,138,1)
(65,139,1)
(18,65,1)
(164,141,1)
(56,160,1)
(141,35,1)
(39,30,1)
(85,3,1)
(90,86,1)
(33,128,1)
(45,35,1)
(115,108,1)
(114,1,1)
(88,58,1)
(63,85,1)
(26,152,1)
(29,76,1)
(27,64,1)
(113,129,1)
(152,34,1)
(58,48,1)
(99,2,1)
(62,16,1)
(150,136,1)
(122,21,1)
(144,100,1)
(124,84,1)
(139,101,1)
(112,59,1)
(2,147,1)
(135,46,1)
(35,28,1)
(61,16,1)
(43,46,1)
(3,78,1)
(6,3,1)
(85,46,1)
(13,110,1)
(129,63,1)
(153,103,1)
(74,98,2)
(16,154,2)
(61,16,2)
(46,61,2)
(10,154,2)
(101,64,2)
(62,154,2)
(162,43,2)
(1,15,2)
(114,154,2)
(64,162,2)
(45,35,2)
(106,154,2)
(93,35,2)
(52,162,2)
(53,154,2)
(43,61,2)
(149,55,2)
(131,61,2)
(103,35,2)
(149,35,2)
(13,43,2)
(136,43,2)
(69,48,2)
(120,64,2)
(25,162,2)
(40,43,2)
(35,64,2)
(141,35,2)
(65,64,2)
(80,124,2)
(148,43,2)
(73,119,2)
(119,43,2)
(31,148,2)
(39,43,2)
(26,34,2)
(149,118,2)
(150,115,2)
(23,43,2)
(48,149,2)
(156,61,2)
(98,113,2)
(17,1,2)
(12,61,2)
(158,64,2)
(149,120,2)
(67,43,2)
(116,120,2)
(85,46,2)
(130,61,2)
(110,43,2)
(66,43,2)
(80,46,2)
(73,43,2)
(121,43,2)
(1,154,2)
(139,64,2)
(42,43,2)
(44,162,2)
(128,43,2)
(137,98,2)
(69,34,2)
(81,61,2)
(61,76,2)
(10,76,2)
(33,43,2)
(14,154,2)
(58,48,2)
(90,43,2)
(16,10,2)
(88,58,2)
(115,43,2)
(6,154,2)
(18,46,2)
(41,35,2)
(43,46,2)
(47,43,2)
(120,18,2)
(82,43,2)
(143,64,2)
(37,154,2)
(6,46,2)
(34,112,2)
(34,35,2)
(55,35,2)
(138,154,2)
(162,80,2)
(3,154,2)
(76,34,2)
(16,145,2)
(113,118,2)
(135,46,2)
(150,43,2)
(145,76,2)
(124,43,2)
(108,43,2)
(147,154,2)
(20,63,2)
(112,48,2)
(31,86,2)
(35,120,2)
(126,43,2)
(9,154,2)
(5,162,2)
(86,43,2)
(124,84,2)
(30,43,2)
(18,64,2)
(116,15,2)
(80,43,2)
(140,35,2)
(159,76,2)
(28,64,2)
(117,6,2)
(79,61,2)
(58,35,2)
(15,154,2)
(83,34,2)
(118,21,2)
(96,43,2)
(164,154,2)
(46,56,2)
(100,35,2)
(94,61,2)
(31,43,2)
(102,43,2)
(56,61,2)
(64,135,2)
(59,58,2)
(22,34,2)
(135,162,2)
(16,76,2)
(152,34,2)
(61,154,2)
(153,35,2)
(165,61,2)
(62,76,2)
(2,154,2)
(116,1,2)
(99,154,2)
(1,120,2)
(124,51,2)
(85,3,2)
(85,6,2)
(29,76,2)
(112,58,2)
(78,154,2)
(160,61,2)
(138,76,2)
(84,43,2)
(157,98,2)
(4,43,2)
(6,3,2)
(111,98,2)
(69,118,2)
(145,154,2)
(29,154,2)
(144,35,2)
(92,34,2)
(159,154,2)
(75,43,2)
(27,64,2)
(60,43,2)
(80,82,2)
(63,154,2)
(48,35,2)
(34,58,2)
(32,61,2)
-----------------------------------
(0,)
(1,acceptSocket != INVALID_SOCKET)
(2,wsaDataInit = FALSE)
(3,listenSocket = INVALID_SOCKET)
(4,service)
(5,listenSocket)
(6,listenSocket != INVALID_SOCKET)
(7,if (wsaDataInit)
(8,wsaDataInit)
(9,acceptSocket)
(10,MAKEWORD(2,2)
(11,if (listenSocket != INVALID_SOCKET)
(12,listenSocket)
(13,sin_port)
(14,INVALID_SOCKET)
(15,acceptSocket = INVALID_SOCKET)
(16,WSAStartup(MAKEWORD(2,2)
(17,acceptSocket)
(18,accept(listenSocket, NULL, NULL)
(19,if (acceptSocket != INVALID_SOCKET)
(20,WSACleanup()
(21,dataBuffer[100] = "")
(22,break;)
(23,service.sin_family)
(24,dataBuffer)
(25,break;)
(26,recvResult)
(27,acceptSocket)
(28,INVALID_SOCKET)
(29,2)
(30,listenSocket)
(31,memset(&service, 0, sizeof(service)
(32,SOCK_STREAM)
(33,sin_family)
(34,recvResult == SOCKET_ERROR || recvResult == 0)
(35,acceptSocket == INVALID_SOCKET)
(36,RET)
(37,wsaDataInit)
(38,)
(39,service)
(40,service)
(41,acceptSocket)
(42,break;)
(43,listenSocket == INVALID_SOCKET)
(44,SOCKET_ERROR)
(45,recvResult)
(46,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(47,INADDR_ANY)
(48,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(49,)
(50,if (WSAStartup(MAKEWORD(2,2)
(51,struct sockaddr*)
(52,LISTEN_BACKLOG)
(53,INVALID_SOCKET)
(54,)
(55,100 - 1)
(56,socket(PF_INET, SOCK_STREAM, 0)
(57,)
(58,recvResult == SOCKET_ERROR)
(59,0)
(60,service.sin_family = AF_INET)
(61,WSAStartup(MAKEWORD(2,2)
(62,NO_ERROR)
(63,wsaDataInit)
(64,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(65,NULL)
(66,service.sin_port)
(67,AF_INET)
(68,)
(69,data[recvResult])
(70,if (recvResult == SOCKET_ERROR || recvResult == 0)
(71,)
(72,if(GLOBAL_CONST_TRUE)
(73,service.sin_port = htons(LISTEN_PORT)
(74,printLine("Failure setting computer name")
(75,service.sin_addr.s_addr = INADDR_ANY)
(76,0)
(77,data)
(78,INVALID_SOCKET)
(79,1)
(80,bind(listenSocket, (struct sockaddr*)
(81,INVALID_SOCKET)
(82,sizeof(service)
(83,data[recvResult] = \\\'\\\\0\\\')
(84,&service)
(85,closesocket(listenSocket)
(86,&service)
(87,)
(88,recvResult)
(89,)
(90,0)
(91,if (listenSocket == INVALID_SOCKET)
(92,\\\'\\\\0\\\')
(93,0)
(94,break;)
(95,)
(96,service)
(97,"")
(98,!SetComputerNameA(data)
(99,listenSocket)
(100,100)
(101,listenSocket)
(102,LISTEN_PORT)
(103,recvResult)
(104,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(105,dataBuffer)
(106,INVALID_SOCKET)
(107,)
(108,sin_addr)
(109,if (!SetComputerNameA(data)
(110,service)
(111,exit(1)
(112,recvResult == 0)
(113,SetComputerNameA(data)
(114,listenSocket)
(115,service.sin_addr)
(116,closesocket(acceptSocket)
(117,listenSocket)
(118,data = dataBuffer)
(119,htons(LISTEN_PORT)
(120,acceptSocket = accept(listenSocket, NULL, NULL)
(121,service)
(122,data)
(123,recvResult)
(124,(struct sockaddr*)
(125,)
(126,SOCKET_ERROR)
(127,wsaData)
(128,service)
(129,data)
(130,PF_INET)
(131,listenSocket)
(132,)
(133,dataBuffer)
(134,acceptSocket)
(135,listen(listenSocket, LISTEN_BACKLOG)
(136,s_addr)
(137,"Failure setting computer name")
(138,wsaData)
(139,NULL)
(140,data)
(141,break;)
(142,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(143,acceptSocket)
(144,1)
(145,&wsaData)
(146,do)
(147,FALSE)
(148,sizeof(service)
(149,recv(acceptSocket, data, 100 - 1, 0)
(150,service.sin_addr.s_addr)
(151,)
(152,data)
(153,SOCKET_ERROR)
(154,GLOBAL_CONST_TRUE)
(155,listenSocket)
(156,wsaDataInit)
(157,1)
(158,break;)
(159,2)
(160,0)
(161,service)
(162,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(163,if (acceptSocket == INVALID_SOCKET)
(164,acceptSocket)
(165,wsaDataInit = 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
