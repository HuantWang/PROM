-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_02_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
45,46
45,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
63,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
72,73
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
79,82
79,83
79,84
79,85
79,86
79,87
79,88
79,89
79,90
79,91
79,92
79,93
79,94
79,95
79,96
80,81
81,82
81,83
82,83
84,85
84,86
84,87
84,88
85,86
87,88
89,90
91,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
106,107
109,110
110,111
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
142,144
143,144
143,145
144,145
144,146
144,147
144,148
145,146
147,148
149,150
149,151
150,151
150,152
151,152
153,154
155,156
156,157
158,159
159,160
160,161
162,163
164,165
166,167
166,168
167,168
167,169
168,169
168,170
168,171
169,170
171,172
173,174
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
192,193
192,194
193,194
193,195
194,195
196,197
198,199
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
204,209
205,206
207,208
209,210
209,211
210,211
210,212
212,213
214,215
215,216
215,217
216,217
218,219
220,221
220,222
221,222
222,223
222,224
225,226
226,227
226,228
227,228
227,229
229,230
233,234
233,235
234,235
234,236
235,236
235,237
236,237
238,239
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
251,252
251,253
252,253
254,255
254,256
255,256
257,258
258,259
258,260
262,263
263,264
263,265
264,265
266,267
266,268
266,269
267,268
269,270
272,273
272,274
273,274
275,276
276,277
277,278
277,279
278,279
279,280
282,283
283,284
283,285
284,285
286,287
286,288
286,289
287,288
289,290
292,293
292,294
293,294
295,296
296,297
297,298
297,299
298,299
299,300
303,304
303,305
304,305
304,306
305,306
307,308
309,310
310,311
311,312
311,313
312,313
314,315
316,317
316,318
317,318
317,319
318,319
320,321
322,323
323,324
324,325
324,326
325,326
327,328
329,330
330,331
330,332
331,332
333,334
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,33,35,39,41,44,46,47,51,53,56,60,62,65,69,71,75,77,83,86,88,90,92,96,98,100,104,107,108,112,117,118,120,126,127,128,130,135,136,139,141,146,148,152,154,157,161,163,165,170,172,174,176,178,182,185,187,189,191,195,197,199,203,206,208,211,213,217,219,223,224,228,230,231,232,237,239,242,243,245,250,253,256,259,260,261,265,268,270,271,274,280,281,285,288,290,291,294,300,301,302,306,308,313,315,319,321,326,328,332,334
-----computeFrom-----
22,23
22,24
81,82
81,83
94,95
94,96
114,115
114,116
122,123
122,124
132,133
132,134
143,144
143,145
167,168
167,169
180,181
180,182
193,194
193,195
201,202
201,203
215,216
215,217
220,221
220,222
226,227
226,228
227,228
227,229
234,235
234,236
235,236
235,237
240,241
240,242
247,248
247,249
251,252
251,253
254,255
254,256
263,264
263,265
277,278
277,279
283,284
283,285
297,298
297,299
304,305
304,306
317,318
317,319
-----guardedBy-----
306,315
319,328
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_02_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_02_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_02_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(78,25,0)
(7,24,0)
(79,57,0)
(72,4,0)
(115,53,0)
(62,88,0)
(31,42,0)
(53,46,0)
(119,64,0)
(147,133,0)
(75,38,0)
(37,28,0)
(2,112,0)
(52,80,0)
(32,17,0)
(140,74,0)
(170,17,0)
(163,63,0)
(176,63,0)
(161,170,0)
(100,88,0)
(66,114,0)
(86,74,0)
(116,151,0)
(42,153,0)
(91,129,0)
(175,133,0)
(123,63,0)
(38,46,0)
(22,63,0)
(95,134,0)
(152,129,0)
(65,0,0)
(110,19,0)
(129,63,0)
(145,158,0)
(85,46,0)
(15,69,0)
(157,79,0)
(94,135,0)
(132,152,0)
(50,158,0)
(57,158,0)
(149,69,0)
(164,129,0)
(130,63,0)
(84,63,0)
(122,10,0)
(29,79,0)
(154,46,0)
(107,8,0)
(43,53,0)
(0,26,0)
(92,54,0)
(133,46,0)
(108,63,0)
(141,24,0)
(112,135,0)
(35,63,0)
(155,63,0)
(96,74,0)
(112,28,0)
(166,63,0)
(113,16,0)
(107,92,0)
(20,158,0)
(125,152,0)
(66,126,0)
(14,141,0)
(18,38,0)
(56,176,0)
(86,108,0)
(41,53,0)
(99,29,0)
(150,19,0)
(26,0,0)
(93,129,0)
(51,14,0)
(1,44,0)
(68,63,0)
(42,158,0)
(53,57,0)
(13,57,0)
(30,108,0)
(120,110,0)
(111,158,0)
(38,121,0)
(44,158,0)
(14,108,0)
(128,173,0)
(34,57,0)
(28,158,0)
(40,141,0)
(170,57,0)
(81,79,0)
(57,53,0)
(119,23,0)
(177,92,0)
(92,105,0)
(92,107,0)
(61,86,0)
(25,158,0)
(58,23,0)
(119,158,0)
(71,88,0)
(79,29,0)
(30,74,0)
(121,38,0)
(102,153,0)
(98,154,0)
(29,99,0)
(83,172,0)
(93,48,0)
(21,34,0)
(66,69,0)
(104,135,0)
(64,119,0)
(138,114,0)
(54,92,0)
(47,119,0)
(92,46,0)
(136,63,0)
(67,107,0)
(152,46,0)
(46,154,0)
(45,158,0)
(124,88,0)
(25,79,0)
(118,65,0)
(34,159,0)
(8,107,0)
(3,158,0)
(76,108,0)
(24,141,0)
(86,29,0)
(144,158,0)
(11,110,0)
(87,44,0)
(126,66,0)
(131,62,0)
(103,8,0)
(36,170,0)
(167,86,0)
(5,126,0)
(171,93,0)
(65,25,0)
(82,6,0)
(106,64,0)
(27,65,0)
(19,158,0)
(29,86,0)
(168,31,0)
(109,54,0)
(46,158,0)
(90,158,0)
(23,119,0)
(79,25,0)
(141,14,0)
(69,66,0)
(10,57,0)
(62,74,0)
(135,112,0)
(79,24,0)
(114,66,0)
(89,154,0)
(63,49,0)
(77,105,0)
(107,67,0)
(24,79,0)
(169,17,0)
(160,26,0)
(74,88,0)
(139,31,0)
(101,7,0)
(117,26,0)
(34,17,0)
(39,162,0)
(137,158,0)
(24,7,0)
(105,92,0)
(156,30,0)
(93,46,0)
(26,25,0)
(165,63,0)
(153,42,0)
(9,176,0)
(73,63,0)
(148,10,0)
(108,30,0)
(59,14,0)
(127,121,0)
(0,65,0)
(12,154,0)
(17,63,0)
(133,46,1)
(28,37,1)
(37,112,1)
(64,106,1)
(142,116,1)
(149,108,1)
(33,90,1)
(44,87,1)
(131,174,1)
(66,69,1)
(131,55,1)
(148,122,1)
(116,33,1)
(74,96,1)
(30,156,1)
(96,140,1)
(15,149,1)
(0,65,1)
(75,18,1)
(8,103,1)
(81,24,1)
(26,117,1)
(51,59,1)
(94,104,1)
(125,82,1)
(174,74,1)
(2,135,1)
(85,44,1)
(42,153,1)
(125,128,1)
(61,167,1)
(60,39,1)
(39,142,1)
(101,29,1)
(132,125,1)
(139,28,1)
(77,107,1)
(87,1,1)
(152,129,1)
(56,174,1)
(125,60,1)
(128,54,1)
(135,94,1)
(171,152,1)
(106,133,1)
(120,119,1)
(121,38,1)
(152,132,1)
(59,40,1)
(14,51,1)
(91,176,1)
(109,92,1)
(90,0,1)
(40,7,1)
(126,66,1)
(93,171,1)
(129,164,1)
(170,17,1)
(153,102,1)
(147,175,1)
(52,55,1)
(17,32,1)
(105,77,1)
(23,58,1)
(34,57,1)
(36,152,1)
(119,64,1)
(43,41,1)
(160,65,1)
(38,75,1)
(31,168,1)
(34,21,1)
(154,89,1)
(108,30,1)
(65,25,1)
(138,69,1)
(41,13,1)
(89,98,1)
(119,23,1)
(13,121,1)
(66,114,1)
(169,129,1)
(27,25,1)
(102,31,1)
(112,135,1)
(161,36,1)
(118,27,1)
(57,53,1)
(12,85,1)
(97,62,1)
(29,99,1)
(25,79,1)
(104,19,1)
(121,127,1)
(76,17,1)
(18,54,1)
(65,118,1)
(1,126,1)
(141,14,1)
(79,57,1)
(53,46,1)
(93,46,1)
(86,61,1)
(5,66,1)
(125,113,1)
(157,78,1)
(122,57,1)
(19,150,1)
(126,5,1)
(82,126,1)
(127,38,1)
(69,15,1)
(86,108,1)
(24,141,1)
(9,56,1)
(53,115,1)
(30,74,1)
(55,170,1)
(107,67,1)
(92,46,1)
(79,29,1)
(36,93,1)
(7,101,1)
(95,121,1)
(156,76,1)
(175,46,1)
(34,17,1)
(131,52,1)
(114,138,1)
(113,0,1)
(55,34,1)
(24,7,1)
(125,83,1)
(62,131,1)
(58,47,1)
(142,33,1)
(54,92,1)
(72,10,1)
(92,107,1)
(140,100,1)
(78,10,1)
(62,74,1)
(149,60,1)
(92,105,1)
(26,25,1)
(14,108,1)
(117,160,1)
(115,43,1)
(79,81,1)
(167,157,1)
(29,86,1)
(83,133,1)
(133,147,1)
(46,154,1)
(10,57,1)
(176,9,1)
(21,170,1)
(103,177,1)
(0,26,1)
(98,12,1)
(93,129,1)
(112,2,1)
(110,11,1)
(168,139,1)
(54,109,1)
(125,72,1)
(177,42,1)
(86,74,1)
(47,64,1)
(150,110,1)
(10,148,1)
(107,8,1)
(152,46,1)
(170,57,1)
(60,142,1)
(11,120,1)
(32,169,1)
(164,91,1)
(38,46,1)
(79,24,1)
(125,95,1)
(170,161,1)
(21,170,2)
(56,174,2)
(66,69,2)
(61,10,2)
(126,60,2)
(43,121,2)
(109,133,2)
(40,10,2)
(30,174,2)
(93,46,2)
(11,133,2)
(0,26,2)
(149,60,2)
(86,74,2)
(52,55,2)
(154,126,2)
(14,10,2)
(24,141,2)
(65,25,2)
(150,133,2)
(149,174,2)
(69,174,2)
(2,133,2)
(25,10,2)
(0,65,2)
(92,107,2)
(10,57,2)
(92,133,2)
(118,10,2)
(5,174,2)
(36,174,2)
(77,133,2)
(38,54,2)
(152,46,2)
(120,133,2)
(133,126,2)
(169,174,2)
(69,60,2)
(34,57,2)
(170,17,2)
(57,53,2)
(125,174,2)
(135,133,2)
(39,142,2)
(95,121,2)
(102,133,2)
(126,66,2)
(126,174,2)
(41,121,2)
(55,174,2)
(107,133,2)
(157,10,2)
(66,174,2)
(177,133,2)
(170,174,2)
(51,10,2)
(119,133,2)
(31,133,2)
(106,133,2)
(175,126,2)
(113,0,2)
(176,174,2)
(28,133,2)
(115,121,2)
(152,129,2)
(81,10,2)
(0,10,2)
(103,133,2)
(110,133,2)
(105,133,2)
(94,133,2)
(114,60,2)
(152,174,2)
(57,121,2)
(15,174,2)
(44,126,2)
(46,154,2)
(112,135,2)
(142,0,2)
(42,133,2)
(160,65,2)
(14,108,2)
(153,133,2)
(46,126,2)
(29,99,2)
(119,64,2)
(170,57,2)
(108,174,2)
(128,54,2)
(33,0,2)
(37,133,2)
(117,65,2)
(24,7,2)
(141,14,2)
(8,133,2)
(141,10,2)
(85,126,2)
(18,54,2)
(168,133,2)
(54,133,2)
(156,174,2)
(66,60,2)
(90,0,2)
(93,152,2)
(47,133,2)
(76,174,2)
(132,174,2)
(114,174,2)
(42,153,2)
(161,174,2)
(138,60,2)
(38,46,2)
(122,121,2)
(108,30,2)
(78,10,2)
(148,121,2)
(53,46,2)
(121,38,2)
(12,126,2)
(5,60,2)
(75,54,2)
(53,121,2)
(107,8,2)
(59,10,2)
(87,126,2)
(54,92,2)
(72,10,2)
(13,121,2)
(86,108,2)
(15,60,2)
(25,79,2)
(1,126,2)
(30,74,2)
(17,174,2)
(7,10,2)
(171,152,2)
(19,133,2)
(116,33,2)
(66,114,2)
(119,23,2)
(93,129,2)
(83,133,2)
(104,133,2)
(138,174,2)
(23,133,2)
(139,133,2)
(65,10,2)
(107,67,2)
(79,24,2)
(112,133,2)
(129,174,2)
(79,29,2)
(133,46,2)
(32,174,2)
(60,0,2)
(9,174,2)
(62,74,2)
(92,46,2)
(34,170,2)
(82,126,2)
(167,10,2)
(34,17,2)
(92,105,2)
(86,10,2)
(27,10,2)
(147,126,2)
(101,10,2)
(29,10,2)
(29,86,2)
(91,174,2)
(79,57,2)
(89,126,2)
(164,174,2)
(64,133,2)
(26,65,2)
(79,10,2)
(24,10,2)
(121,54,2)
(58,133,2)
(26,25,2)
(98,126,2)
(10,121,2)
(127,54,2)
-----------------------------------
(0,recvResult == SOCKET_ERROR || recvResult == 0)
(1,wsaDataInit)
(2,s_addr)
(3,if (WSAStartup(MAKEWORD(2,2)
(4,)
(5,NO_ERROR)
(6,)
(7,sizeof(wchar_t)
(8,&service)
(9,0)
(10,acceptSocket == SOCKET_ERROR)
(11,sin_family)
(12,AF_INET)
(13,acceptSocket)
(14,dataLen - 1)
(15,2)
(16,)
(17,acceptSocket = INVALID_SOCKET)
(18,listenSocket)
(19,service.sin_family = AF_INET)
(20,if (listenSocket == INVALID_SOCKET)
(21,acceptSocket)
(22,listenSocket)
(23,sizeof(service)
(24,sizeof(wchar_t)
(25,recvResult = recv(acceptSocket, (char *)
(26,recvResult == 0)
(27,recvResult)
(28,service.sin_addr.s_addr = INADDR_ANY)
(29,(char *)
(30,wcslen(data)
(31,service.sin_port)
(32,INVALID_SOCKET)
(33,replace)
(34,CLOSE_SOCKET(acceptSocket)
(35,if (acceptSocket != INVALID_SOCKET)
(36,acceptSocket)
(37,INADDR_ANY)
(38,listen(listenSocket, LISTEN_BACKLOG)
(39,\\'\\\\0\\')
(40,250)
(41,listenSocket)
(42,service.sin_port = htons(TCP_PORT)
(43,NULL)
(44,wsaDataInit = 1)
(45,if (acceptSocket == SOCKET_ERROR)
(46,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(47,0)
(48,)
(49,)
(50,if (bind(listenSocket, (struct sockaddr*)
(51,1)
(52,WSACleanup()
(53,accept(listenSocket, NULL, NULL)
(54,bind(listenSocket, (struct sockaddr*)
(55,wsaDataInit)
(56,wsaDataInit)
(57,acceptSocket = accept(listenSocket, NULL, NULL)
(58,service)
(59,dataLen)
(60,0)
(61,dataLen)
(62,PUTENV(data)
(63,)
(64,&service)
(65,recvResult == SOCKET_ERROR)
(66,WSAStartup(MAKEWORD(2,2)
(67,struct sockaddr*)
(68,service)
(69,MAKEWORD(2,2)
(70,\\\'\\\\0\\\')
(71,data)
(72,break;)
(73,dataLen)
(74,data = dataBuffer)
(75,LISTEN_BACKLOG)
(76,dataLen)
(77,service)
(78,recvResult)
(79,recv(acceptSocket, (char *)
(80,)
(81,0)
(82,break;)
(83,break;)
(84,wsaData)
(85,listenSocket)
(86,data + dataLen)
(87,1)
(88,)
(89,IPPROTO_TCP)
(90,\\\'\\\\0\\\')
(91,listenSocket)
(92,bind(listenSocket, (struct sockaddr*)
(93,CLOSE_SOCKET(listenSocket)
(94,sin_addr)
(95,break;)
(96,dataBuffer)
(97,RET)
(98,SOCK_STREAM)
(99,char *)
(100,"PATH=")
(101,wchar_t)
(102,TCP_PORT)
(103,service)
(104,service)
(105,sizeof(service)
(106,service)
(107,(struct sockaddr*)
(108,dataLen = wcslen(data)
(109,SOCKET_ERROR)
(110,service.sin_family)
(111,if (replace)
(112,service.sin_addr.s_addr)
(113,break;)
(114,&wsaData)
(115,NULL)
(116,\\'\\\\0\\')
(117,0)
(118,SOCKET_ERROR)
(119,memset(&service, 0, sizeof(service)
(120,service)
(121,listen(listenSocket, LISTEN_BACKLOG)
(122,acceptSocket)
(123,acceptSocket)
(124,if(1)
(125,listenSocket)
(126,WSAStartup(MAKEWORD(2,2)
(127,SOCKET_ERROR)
(128,break;)
(129,listenSocket = INVALID_SOCKET)
(130,wsaDataInit)
(131,data)
(132,INVALID_SOCKET)
(133,listenSocket == INVALID_SOCKET)
(134,)
(135,service.sin_addr)
(136,recvResult)
(137,if (replace)
(138,wsaData)
(139,service)
(140,data)
(141,250 - dataLen - 1)
(142,replace)
(143,\\\'\\\\0\\\')
(144,if (recvResult == SOCKET_ERROR || recvResult == 0)
(145,if (listen(listenSocket, LISTEN_BACKLOG)
(146,\\'\\\\0\\')
(147,INVALID_SOCKET)
(148,SOCKET_ERROR)
(149,2)
(150,AF_INET)
(151,)
(152,listenSocket != INVALID_SOCKET)
(153,htons(TCP_PORT)
(154,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(155,do)
(156,data)
(157,acceptSocket)
(158,)
(159,)
(160,recvResult)
(161,INVALID_SOCKET)
(162,)
(163,if (listenSocket != INVALID_SOCKET)
(164,INVALID_SOCKET)
(165,if (wsaDataInit)
(166,replace)
(167,data)
(168,sin_port)
(169,acceptSocket)
(170,acceptSocket != INVALID_SOCKET)
(171,listenSocket)
(172,)
(173,)
(174,1)
(175,listenSocket)
(176,wsaDataInit = 0)
(177,listenSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
