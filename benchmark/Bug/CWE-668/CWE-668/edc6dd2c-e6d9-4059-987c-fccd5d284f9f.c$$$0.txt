-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_31_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (250-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
        PUTENV(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
59,62
60,61
62,63
65,66
65,67
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
73,74
73,75
74,75
74,76
74,77
74,78
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
86,87
87,88
87,89
89,90
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
106,107
109,110
110,111
110,112
111,112
113,114
115,116
115,117
115,118
116,117
117,118
117,119
119,120
119,121
119,122
122,123
123,124
125,126
126,127
126,128
128,129
128,130
128,131
131,132
132,133
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,50,52,53,58,61,63,64,68,70,76,79,81,84,85,88,90,92,94,99,100,105,107,108,112,114,118,120,121,124,127,129,130,133,137,139
-----computeFrom-----
22,23
22,24
48,49
48,50
49,50
49,51
56,57
56,58
66,67
66,68
73,74
73,75
77,78
77,79
87,88
87,89
102,103
102,104
-----guardedBy-----
52,107
70,94
68,114
79,105
90,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_31_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_31_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_31_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(58,32,0)
(25,54,0)
(61,55,0)
(45,19,0)
(59,51,0)
(53,62,0)
(44,25,0)
(64,0,0)
(0,51,0)
(21,0,0)
(24,2,0)
(48,31,0)
(41,57,0)
(50,2,0)
(67,21,0)
(38,45,0)
(15,32,0)
(56,46,0)
(4,9,0)
(25,0,0)
(11,28,0)
(9,51,0)
(19,45,0)
(52,54,0)
(66,38,0)
(62,51,0)
(10,24,0)
(42,1,0)
(5,62,0)
(18,48,0)
(33,45,0)
(37,34,0)
(54,62,0)
(32,37,0)
(29,12,0)
(61,48,0)
(32,62,0)
(62,46,0)
(45,36,0)
(47,9,0)
(5,2,0)
(17,31,0)
(2,9,0)
(21,25,0)
(13,0,0)
(28,34,0)
(26,19,0)
(6,51,0)
(61,1,0)
(35,38,0)
(14,24,0)
(16,36,0)
(39,19,0)
(55,61,0)
(60,62,0)
(12,62,0)
(65,45,0)
(32,2,0)
(23,37,0)
(63,24,0)
(7,54,0)
(8,46,0)
(33,57,0)
(48,61,0)
(31,48,0)
(1,2,0)
(12,2,0)
(2,12,0)
(5,48,0)
(22,1,0)
(43,25,0)
(46,51,0)
(30,9,0)
(3,5,0)
(1,61,0)
(20,33,0)
(27,5,0)
(48,5,0)
(24,10,0)
(49,10,0)
(54,0,0)
(48,45,0)
(58,28,1)
(54,62,1)
(60,46,1)
(32,62,1)
(48,18,1)
(3,27,1)
(14,63,1)
(67,25,1)
(31,48,1)
(43,44,1)
(61,55,1)
(54,52,1)
(29,50,1)
(63,2,1)
(12,29,1)
(61,1,1)
(35,66,1)
(38,45,1)
(20,31,1)
(49,24,1)
(15,58,1)
(48,61,1)
(33,45,1)
(21,25,1)
(32,15,1)
(7,33,1)
(7,10,1)
(1,2,1)
(56,8,1)
(11,31,1)
(50,62,1)
(27,38,1)
(23,32,1)
(32,2,1)
(5,3,1)
(66,45,1)
(38,35,1)
(37,23,1)
(31,17,1)
(39,65,1)
(65,10,1)
(40,21,1)
(48,45,1)
(62,53,1)
(48,5,1)
(24,14,1)
(18,61,1)
(53,60,1)
(25,43,1)
(33,20,1)
(22,42,1)
(2,12,1)
(10,24,1)
(28,11,1)
(7,38,1)
(5,2,1)
(17,48,1)
(26,39,1)
(19,26,1)
(10,49,1)
(25,54,1)
(5,62,1)
(42,5,1)
(20,37,1)
(62,46,1)
(45,19,1)
(12,62,1)
(1,22,1)
(44,54,1)
(52,7,1)
(24,2,1)
(21,67,1)
(46,56,1)
(24,2,2)
(45,10,2)
(61,55,2)
(42,38,2)
(21,25,2)
(31,38,2)
(38,10,2)
(38,45,2)
(12,62,2)
(32,62,2)
(1,2,2)
(58,31,2)
(65,10,2)
(48,61,2)
(5,2,2)
(31,48,2)
(48,45,2)
(1,38,2)
(62,46,2)
(54,62,2)
(33,45,2)
(5,38,2)
(35,10,2)
(37,31,2)
(3,38,2)
(22,38,2)
(27,38,2)
(48,38,2)
(39,10,2)
(2,12,2)
(18,38,2)
(32,31,2)
(61,38,2)
(32,2,2)
(17,38,2)
(33,38,2)
(25,54,2)
(26,10,2)
(20,38,2)
(23,31,2)
(48,5,2)
(61,1,2)
(66,10,2)
(10,24,2)
(45,19,2)
(19,10,2)
(28,31,2)
(11,31,2)
(5,62,2)
(15,31,2)
-----------------------------------
(0,)
(1,250-dataLen)
(2,dataLen = strlen(data)
(3,dataLen)
(4,dataLen)
(5,data+dataLen)
(6,data)
(7,dataCopy)
(8,dataBuffer)
(9,)
(10,250-dataLen > 1)
(11,"fgets()
(12,strlen(data)
(13,data)
(14,dataLen)
(15,dataLen)
(16,if (pFile != NULL)
(17,NULL)
(18,pFile)
(19,fopen(FILENAME, "r")
(20,pFile)
(21,PUTENV(data)
(22,dataLen)
(23,\\\'\\\\0\\\')
(24,250-dataLen)
(25,* data = dataCopy)
(26,"r")
(27,data)
(28,printLine("fgets()
(29,data)
(30,if (250-dataLen > 1)
(31,fgets(data+dataLen, (int)
(32,data[dataLen])
(33,fclose(pFile)
(34,)
(35,NULL)
(36,)
(37,data[dataLen] = \\\'\\\\0\\\')
(38,pFile != NULL)
(39,FILENAME)
(40,RET)
(41,if (fgets(data+dataLen, (int)
(42,250)
(43,dataCopy)
(44,data)
(45,pFile = fopen(FILENAME, "r")
(46,dataBuffer[250] = "PATH=")
(47,pFile)
(48,fgets(data+dataLen, (int)
(49,1)
(50,dataLen)
(51,)
(52,data)
(53,dataBuffer)
(54,* dataCopy = data)
(55,int)
(56,"PATH=")
(57,)
(58,data)
(59,dataBuffer)
(60,data)
(61,(int)
(62,data = dataBuffer)
(63,250)
(64,dataCopy)
(65,pFile)
(66,pFile)
(67,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
