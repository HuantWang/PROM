-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_10_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(globalTrue)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,122,124
-----computeFrom-----
22,23
22,24
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_10_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_10_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_10_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
globalTrue
globalTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(55,15,0)
(57,15,0)
(38,23,0)
(4,38,0)
(34,1,0)
(1,38,0)
(21,30,0)
(22,38,0)
(29,0,0)
(8,16,0)
(29,15,0)
(43,6,0)
(10,47,0)
(30,24,0)
(37,55,0)
(12,16,0)
(29,22,0)
(5,23,0)
(42,24,0)
(61,29,0)
(26,32,0)
(36,61,0)
(32,48,0)
(18,36,0)
(38,47,0)
(6,24,0)
(54,28,0)
(41,57,0)
(17,14,0)
(27,6,0)
(22,29,0)
(6,38,0)
(7,53,0)
(49,29,0)
(24,14,0)
(0,29,0)
(19,22,0)
(15,28,0)
(53,15,0)
(9,48,0)
(35,1,0)
(1,34,0)
(55,39,0)
(23,38,0)
(60,61,0)
(2,47,0)
(50,16,0)
(24,16,0)
(6,9,0)
(58,14,0)
(31,22,0)
(11,36,0)
(25,1,0)
(30,16,0)
(29,61,0)
(61,36,0)
(15,57,0)
(44,34,0)
(56,15,0)
(51,9,0)
(13,24,0)
(47,33,0)
(46,57,0)
(40,39,0)
(22,24,0)
(3,53,0)
(61,60,0)
(23,24,0)
(45,47,0)
(52,0,0)
(14,16,0)
(36,38,0)
(13,14,1)
(22,19,1)
(29,22,1)
(61,36,1)
(4,59,1)
(3,7,1)
(36,18,1)
(31,53,1)
(24,14,1)
(53,3,1)
(19,31,1)
(23,5,1)
(17,58,1)
(38,23,1)
(36,38,1)
(24,42,1)
(53,15,1)
(23,24,1)
(20,30,1)
(41,56,1)
(7,15,1)
(15,57,1)
(37,0,1)
(32,26,1)
(35,38,1)
(56,34,1)
(37,9,1)
(0,52,1)
(29,15,1)
(22,38,1)
(0,29,1)
(1,38,1)
(6,24,1)
(51,6,1)
(61,60,1)
(52,29,1)
(29,61,1)
(34,1,1)
(55,15,1)
(14,17,1)
(43,27,1)
(26,0,1)
(21,59,1)
(6,38,1)
(59,24,1)
(30,21,1)
(30,24,1)
(27,32,1)
(22,24,1)
(6,43,1)
(25,35,1)
(46,41,1)
(9,51,1)
(55,37,1)
(21,55,1)
(49,61,1)
(34,44,1)
(5,4,1)
(21,34,1)
(1,25,1)
(18,11,1)
(42,13,1)
(44,1,1)
(11,22,1)
(57,46,1)
(29,49,1)
(21,53,1)
(37,53,2)
(36,38,2)
(36,53,2)
(4,59,2)
(29,61,2)
(38,59,2)
(53,34,2)
(25,59,2)
(55,53,2)
(56,34,2)
(61,36,2)
(31,53,2)
(3,34,2)
(26,0,2)
(46,34,2)
(61,53,2)
(29,22,2)
(61,60,2)
(7,34,2)
(1,59,2)
(23,59,2)
(22,24,2)
(57,34,2)
(27,0,2)
(49,53,2)
(15,57,2)
(34,59,2)
(1,38,2)
(43,0,2)
(19,53,2)
(6,38,2)
(22,53,2)
(11,53,2)
(32,0,2)
(0,29,2)
(23,24,2)
(52,53,2)
(29,15,2)
(41,34,2)
(29,53,2)
(6,24,2)
(5,59,2)
(30,24,2)
(34,1,2)
(35,59,2)
(0,53,2)
(9,0,2)
(22,38,2)
(53,15,2)
(38,23,2)
(15,34,2)
(51,0,2)
(55,15,2)
(18,53,2)
(6,0,2)
(24,14,2)
(44,59,2)
-----------------------------------
(0,fgets(data+dataLen, (int)
(1,250-dataLen)
(2,dataLen)
(3,NULL)
(4,dataLen)
(5,data)
(6,data[dataLen])
(7,pFile)
(8,dataBuffer)
(9,data[dataLen] = \\\'\\\\0\\\')
(10,pFile)
(11,250)
(12,if(globalTrue)
(13,data)
(14,dataBuffer[250] = "PATH=")
(15,pFile = fopen(FILENAME, "r")
(16,)
(17,"PATH=")
(18,dataLen)
(19,dataLen)
(20,RET)
(21,data)
(22,data+dataLen)
(23,strlen(data)
(24,data = dataBuffer)
(25,dataLen)
(26,"fgets()
(27,data)
(28,)
(29,fgets(data+dataLen, (int)
(30,PUTENV(data)
(31,data)
(32,printLine("fgets()
(33,)
(34,250-dataLen > 1)
(35,250)
(36,250-dataLen)
(37,pFile)
(38,dataLen = strlen(data)
(39,)
(40,if (fgets(data+dataLen, (int)
(41,FILENAME)
(42,dataBuffer)
(43,dataLen)
(44,1)
(45,if (250-dataLen > 1)
(46,"r")
(47,)
(48,)
(49,pFile)
(50,data)
(51,\\\'\\\\0\\\')
(52,NULL)
(53,pFile != NULL)
(54,if (pFile != NULL)
(55,fclose(pFile)
(56,pFile)
(57,fopen(FILENAME, "r")
(58,dataBuffer)
(59,globalTrue)
(60,int)
(61,(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
