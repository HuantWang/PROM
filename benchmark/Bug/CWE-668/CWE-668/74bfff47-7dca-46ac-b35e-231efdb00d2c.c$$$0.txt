-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
42,48
42,49
43,44
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
57,58
57,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
82,85
82,86
82,87
82,88
82,89
82,90
82,91
82,92
82,93
82,94
82,95
82,96
83,84
84,85
84,86
85,86
87,88
87,89
87,90
87,91
88,89
90,91
92,93
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
109,110
112,113
113,114
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
125,127
126,127
126,128
127,128
127,129
128,129
132,133
132,134
133,134
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
150,154
151,152
153,154
155,156
155,157
156,157
156,158
157,158
159,160
161,162
162,163
164,165
165,166
166,167
168,169
170,171
172,173
173,174
173,175
174,175
176,177
176,178
176,179
176,180
176,181
177,178
179,180
181,182
181,183
182,183
182,184
184,185
186,187
187,188
187,189
188,189
190,191
192,193
192,194
193,194
194,195
194,196
197,198
198,199
198,200
199,200
199,201
201,202
205,206
205,207
206,207
206,208
207,208
207,209
208,209
210,211
212,213
212,214
213,214
216,217
218,219
219,220
219,221
220,221
220,222
221,222
223,224
223,225
224,225
226,227
226,228
227,228
229,230
230,231
230,232
234,235
235,236
235,237
236,237
238,239
238,240
238,241
239,240
241,242
244,245
244,246
245,246
247,248
248,249
249,250
249,251
250,251
251,252
254,255
255,256
255,257
256,257
258,259
258,260
258,261
259,260
261,262
264,265
264,266
265,266
267,268
268,269
269,270
269,271
270,271
271,272
275,276
275,277
276,277
276,278
277,278
279,280
281,282
282,283
283,284
283,285
284,285
286,287
288,289
289,290
289,291
290,291
292,293
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,35,39,41,45,47,51,53,56,58,59,63,65,68,72,74,78,80,86,89,91,93,95,99,101,103,107,110,111,115,120,121,123,129,130,131,134,136,141,142,145,147,152,154,158,160,163,167,169,171,175,178,180,183,185,189,191,195,196,200,202,203,204,209,211,214,215,217,222,225,228,231,232,233,237,240,242,243,246,252,253,257,260,262,263,266,272,273,274,278,280,285,287,291,293
-----computeFrom-----
37,38
37,39
84,85
84,86
97,98
97,99
117,118
117,119
125,126
125,127
138,139
138,140
149,150
149,151
173,174
173,175
187,188
187,189
192,193
192,194
198,199
198,200
199,200
199,201
206,207
206,208
207,208
207,209
212,213
212,214
219,220
219,221
223,224
223,225
226,227
226,228
235,236
235,237
249,250
249,251
255,256
255,257
269,270
269,271
276,277
276,278
-----guardedBy-----
278,287
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_44_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_connect_socket_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(69,143,0)
(96,93,0)
(38,107,0)
(78,23,0)
(86,4,0)
(54,6,0)
(77,112,0)
(94,114,0)
(84,89,0)
(62,50,0)
(16,105,0)
(53,28,0)
(112,77,0)
(137,94,0)
(120,6,0)
(64,128,0)
(37,69,0)
(124,105,0)
(128,65,0)
(129,28,0)
(71,100,0)
(54,148,0)
(141,64,0)
(63,68,0)
(108,107,0)
(92,57,0)
(53,100,0)
(121,47,0)
(12,5,0)
(5,23,0)
(122,23,0)
(22,85,0)
(106,91,0)
(127,87,0)
(141,47,0)
(49,55,0)
(57,93,0)
(58,47,0)
(2,65,0)
(68,139,0)
(57,23,0)
(139,131,0)
(104,54,0)
(119,19,0)
(90,97,0)
(3,41,0)
(34,14,0)
(73,55,0)
(69,46,0)
(77,75,0)
(123,112,0)
(21,111,0)
(44,59,0)
(67,141,0)
(117,148,0)
(53,113,0)
(17,128,0)
(18,54,0)
(142,65,0)
(81,128,0)
(131,139,0)
(146,58,0)
(30,80,0)
(95,120,0)
(48,50,0)
(55,6,0)
(7,46,0)
(75,5,0)
(85,143,0)
(148,90,0)
(130,75,0)
(15,103,0)
(55,49,0)
(60,19,0)
(114,23,0)
(47,23,0)
(9,23,0)
(6,120,0)
(110,57,0)
(19,5,0)
(28,53,0)
(103,139,0)
(105,65,0)
(13,126,0)
(138,114,0)
(11,128,0)
(19,47,0)
(82,64,0)
(68,47,0)
(99,94,0)
(32,128,0)
(112,5,0)
(97,90,0)
(48,23,0)
(139,103,0)
(143,85,0)
(35,23,0)
(49,33,0)
(55,105,0)
(113,53,0)
(59,65,0)
(29,97,0)
(75,77,0)
(42,74,0)
(14,56,0)
(93,57,0)
(47,87,0)
(74,23,0)
(52,128,0)
(100,53,0)
(25,112,0)
(109,128,0)
(90,148,0)
(76,110,0)
(26,89,0)
(125,23,0)
(101,124,0)
(70,113,0)
(72,31,0)
(147,65,0)
(116,23,0)
(102,105,0)
(50,48,0)
(120,105,0)
(68,111,0)
(14,64,0)
(20,87,0)
(87,47,0)
(115,64,0)
(134,74,0)
(43,141,0)
(111,68,0)
(14,47,0)
(27,68,0)
(118,58,0)
(98,23,0)
(19,49,0)
(140,128,0)
(148,54,0)
(79,113,0)
(143,23,0)
(68,63,0)
(132,75,0)
(90,19,0)
(61,128,0)
(49,19,0)
(45,87,0)
(57,110,0)
(107,128,0)
(36,128,0)
(89,48,0)
(33,49,0)
(40,46,0)
(135,63,0)
(139,68,0)
(19,90,0)
(5,19,0)
(124,65,0)
(1,59,0)
(51,6,0)
(8,66,0)
(6,128,0)
(46,69,0)
(83,128,0)
(0,55,0)
(55,6,1)
(90,148,1)
(120,95,1)
(84,26,1)
(132,130,1)
(29,49,1)
(53,28,1)
(103,15,1)
(37,46,1)
(22,69,1)
(111,21,1)
(75,5,1)
(7,114,1)
(148,54,1)
(50,62,1)
(71,53,1)
(114,138,1)
(104,117,1)
(38,105,1)
(14,64,1)
(19,47,1)
(133,141,1)
(112,5,1)
(117,97,1)
(25,123,1)
(8,77,1)
(79,6,1)
(30,58,1)
(67,3,1)
(88,124,1)
(67,30,1)
(62,89,1)
(100,71,1)
(26,143,1)
(101,86,1)
(96,58,1)
(19,60,1)
(141,47,1)
(144,13,1)
(139,103,1)
(48,50,1)
(115,82,1)
(19,90,1)
(127,45,1)
(86,133,1)
(90,97,1)
(68,139,1)
(97,29,1)
(77,112,1)
(19,49,1)
(54,18,1)
(49,55,1)
(141,43,1)
(45,121,1)
(120,105,1)
(24,72,1)
(10,9,1)
(134,42,1)
(105,102,1)
(76,92,1)
(130,112,1)
(57,110,1)
(9,77,1)
(28,129,1)
(55,105,1)
(79,144,1)
(1,44,1)
(133,14,1)
(42,100,1)
(14,34,1)
(49,33,1)
(55,0,1)
(12,63,1)
(67,106,1)
(94,99,1)
(93,96,1)
(54,6,1)
(112,25,1)
(70,79,1)
(85,22,1)
(108,38,1)
(14,47,1)
(95,51,1)
(21,139,1)
(43,67,1)
(92,93,1)
(110,76,1)
(24,10,1)
(57,93,1)
(67,144,1)
(89,84,1)
(3,63,1)
(100,53,1)
(102,16,1)
(129,113,1)
(99,137,1)
(143,85,1)
(69,37,1)
(119,12,1)
(5,19,1)
(63,135,1)
(121,74,1)
(142,59,1)
(46,40,1)
(123,5,1)
(107,108,1)
(139,131,1)
(69,46,1)
(68,47,1)
(72,10,1)
(101,133,1)
(75,132,1)
(40,7,1)
(59,1,1)
(58,146,1)
(58,47,1)
(118,47,1)
(124,101,1)
(34,141,1)
(137,57,1)
(60,90,1)
(0,73,1)
(124,105,1)
(6,120,1)
(27,48,1)
(20,127,1)
(63,68,1)
(67,8,1)
(47,87,1)
(87,20,1)
(74,134,1)
(138,94,1)
(51,64,1)
(113,70,1)
(68,111,1)
(144,24,1)
(64,115,1)
(77,75,1)
(141,64,1)
(106,100,1)
(13,24,1)
(73,119,1)
(53,113,1)
(82,107,1)
(146,118,1)
(135,68,1)
(18,104,1)
(16,142,1)
(15,27,1)
(100,144,2)
(24,77,2)
(141,64,2)
(135,58,2)
(5,19,2)
(7,58,2)
(54,6,2)
(76,58,2)
(112,5,2)
(77,75,2)
(58,47,2)
(53,113,2)
(53,144,2)
(139,131,2)
(34,141,2)
(69,46,2)
(57,58,2)
(26,58,2)
(50,58,2)
(27,58,2)
(141,47,2)
(5,63,2)
(3,63,2)
(46,58,2)
(45,100,2)
(106,100,2)
(69,58,2)
(103,58,2)
(99,58,2)
(148,63,2)
(119,63,2)
(8,77,2)
(90,148,2)
(86,133,2)
(14,47,2)
(19,49,2)
(49,33,2)
(124,105,2)
(48,50,2)
(100,53,2)
(55,105,2)
(30,58,2)
(112,63,2)
(55,63,2)
(54,63,2)
(84,58,2)
(146,100,2)
(117,63,2)
(92,58,2)
(111,58,2)
(97,63,2)
(63,68,2)
(137,58,2)
(13,24,2)
(130,112,2)
(22,58,2)
(55,6,2)
(37,58,2)
(139,103,2)
(127,100,2)
(148,54,2)
(77,112,2)
(68,139,2)
(53,28,2)
(93,58,2)
(40,58,2)
(57,110,2)
(47,87,2)
(42,100,2)
(75,112,2)
(15,58,2)
(68,111,2)
(63,58,2)
(47,100,2)
(139,58,2)
(94,58,2)
(120,105,2)
(113,144,2)
(14,64,2)
(68,58,2)
(129,144,2)
(19,47,2)
(6,120,2)
(134,100,2)
(62,58,2)
(104,63,2)
(18,63,2)
(49,63,2)
(9,77,2)
(74,100,2)
(121,100,2)
(110,58,2)
(12,63,2)
(143,85,2)
(144,77,2)
(96,58,2)
(77,63,2)
(75,5,2)
(14,141,2)
(89,58,2)
(0,63,2)
(72,10,2)
(19,63,2)
(28,144,2)
(48,58,2)
(70,144,2)
(10,77,2)
(118,100,2)
(21,58,2)
(87,100,2)
(19,90,2)
(71,144,2)
(114,58,2)
(90,97,2)
(49,55,2)
(58,100,2)
(143,58,2)
(29,63,2)
(138,58,2)
(68,47,2)
(123,63,2)
(132,112,2)
(57,93,2)
(90,63,2)
(79,144,2)
(73,63,2)
(60,63,2)
(25,63,2)
(20,100,2)
(85,58,2)
-----------------------------------
(0,dataLen)
(1,badSink)
(2,data)
(3,break;)
(4,)
(5,recvResult = recv(connectSocket, (char *)
(6,dataLen = wcslen(data)
(7,service)
(8,break;)
(9,\\'\\\\0\\')
(10,replace)
(11,dataLen)
(12,recvResult)
(13,\\'\\\\0\\')
(14,CLOSE_SOCKET(connectSocket)
(15,service)
(16,data)
(17,replace)
(18,1)
(19,recv(connectSocket, (char *)
(20,IPPROTO_TCP)
(21,service)
(22,IP_ADDRESS)
(23,)
(24,replace)
(25,SOCKET_ERROR)
(26,service)
(27,connectSocket)
(28,&wsaData)
(29,wchar_t)
(30,break;)
(31,)
(32,wsaData)
(33,char *)
(34,connectSocket)
(35,if (replace)
(36,service)
(37,s_addr)
(38,wsaDataInit)
(39,\\\'\\\\0\\\')
(40,sin_addr)
(41,)
(42,wsaDataInit)
(43,INVALID_SOCKET)
(44,funcPtr)
(45,AF_INET)
(46,service.sin_addr)
(47,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(48,service.sin_port = htons(TCP_PORT)
(49,(char *)
(50,htons(TCP_PORT)
(51,dataLen)
(52,do)
(53,WSAStartup(MAKEWORD(2,2)
(54,dataLen - 1)
(55,data + dataLen)
(56,)
(57,memset(&service, 0, sizeof(service)
(58,connectSocket == INVALID_SOCKET)
(59,(*funcPtr)
(60,0)
(61,if (connectSocket != INVALID_SOCKET)
(62,TCP_PORT)
(63,connect(connectSocket, (struct sockaddr*)
(64,connectSocket = INVALID_SOCKET)
(65,)
(66,)
(67,connectSocket)
(68,connect(connectSocket, (struct sockaddr*)
(69,service.sin_addr.s_addr)
(70,2)
(71,NO_ERROR)
(72,\\\'\\\\0\\\')
(73,data)
(74,wsaDataInit = 1)
(75,recvResult == 0)
(76,service)
(77,recvResult == SOCKET_ERROR || recvResult == 0)
(78,if (WSAStartup(MAKEWORD(2,2)
(79,2)
(80,)
(81,if (wsaDataInit)
(82,connectSocket)
(83,wsaDataInit)
(84,sin_port)
(85,inet_addr(IP_ADDRESS)
(86,WSACleanup()
(87,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(88,RET)
(89,service.sin_port)
(90,sizeof(wchar_t)
(91,)
(92,0)
(93,&service)
(94,service.sin_family)
(95,data)
(96,service)
(97,sizeof(wchar_t)
(98,if (connect(connectSocket, (struct sockaddr*)
(99,sin_family)
(100,WSAStartup(MAKEWORD(2,2)
(101,data)
(102,dataBuffer)
(103,&service)
(104,dataLen)
(105,data = dataBuffer)
(106,break;)
(107,wsaDataInit = 0)
(108,0)
(109,connectSocket)
(110,sizeof(service)
(111,sizeof(service)
(112,recvResult == SOCKET_ERROR)
(113,MAKEWORD(2,2)
(114,service.sin_family = AF_INET)
(115,INVALID_SOCKET)
(116,if (recvResult == SOCKET_ERROR || recvResult == 0)
(117,250)
(118,connectSocket)
(119,connectSocket)
(120,wcslen(data)
(121,connectSocket)
(122,if (replace)
(123,recvResult)
(124,funcPtr(data)
(125,if (connectSocket == INVALID_SOCKET)
(126,)
(127,SOCK_STREAM)
(128,)
(129,wsaData)
(130,recvResult)
(131,struct sockaddr*)
(132,0)
(133,wsaDataInit)
(134,1)
(135,SOCKET_ERROR)
(136,\\'\\\\0\\')
(137,service)
(138,AF_INET)
(139,(struct sockaddr*)
(140,recvResult)
(141,connectSocket != INVALID_SOCKET)
(142,"PATH=")
(143,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(144,0)
(145,\\\'\\\\0\\\')
(146,INVALID_SOCKET)
(147,funcPtr)
(148,250 - dataLen - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
