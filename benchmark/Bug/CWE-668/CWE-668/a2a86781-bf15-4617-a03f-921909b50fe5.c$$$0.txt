-----label-----
1
-----code-----
void CWE377_Insecure_Temporary_File__wchar_t_w32GetTempFileName_02_bad()
{
    if(1)
    {
        {
            wchar_t filename[MAX_PATH] = L"";
            int fileDesc;
            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,
            * leading to an inescapable race condition when we try to open it again. */
            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)
            {
                exit(1);
            }
            printWLine(filename);
            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */
            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
            if (fileDesc != -1)
            {
                printLine("Temporary file was opened...now closing file");
                CLOSE(fileDesc);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
15,16
16,17
18,19
20,21
21,22
21,23
23,24
25,26
25,27
26,27
26,28
27,28
27,29
27,30
27,31
27,32
28,29
33,34
36,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
73,75
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,7,12,14,17,19,22,24,29,30,31,32,34,35,40,41,45,47,51,54,56,59,61,64,66,70,72,77,78,82,84
-----computeFrom-----
26,27
26,28
49,50
49,51
57,58
57,59
62,63
62,64
68,69
68,70
-----guardedBy-----
70,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE377_Insecure_Temporary_File__wchar_t_w32GetTempFileName_02_bad(){    if(1)    {        {            wchar_t filename[MAX_PATH] = L"";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }            printWLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }}
void
CWE377_Insecure_Temporary_File__wchar_t_w32GetTempFileName_02_bad()
CWE377_Insecure_Temporary_File__wchar_t_w32GetTempFileName_02_bad
{    if(1)    {        {            wchar_t filename[MAX_PATH] = L"";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }            printWLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }}
if(1)    {        {            wchar_t filename[MAX_PATH] = L"";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }            printWLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }
1
{        {            wchar_t filename[MAX_PATH] = L"";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }            printWLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }
{            wchar_t filename[MAX_PATH] = L"";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }            printWLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }
wchar_t filename[MAX_PATH] = L"";
wchar_t filename[MAX_PATH] = L"";
wchar_t
filename[MAX_PATH] = L""
filename
[MAX_PATH]
MAX_PATH
MAX_PATH
= L""
L""
int fileDesc;
int fileDesc;
int
fileDesc
fileDesc
if (GetTempFileNameW(L".", L"bad", 0, filename) == 0)            {                exit(1);            }
GetTempFileNameW(L".", L"bad", 0, filename) == 0
GetTempFileNameW(L".", L"bad", 0, filename)
GetTempFileNameW
GetTempFileNameW
L"."
L"bad"
0
filename
filename
0
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
printWLine(filename);
printWLine(filename)
printWLine
printWLine
filename
filename
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
fileDesc
fileDesc
OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
OPEN
OPEN
filename
filename
O_RDWR|O_CREAT
O_RDWR
O_RDWR
O_CREAT
O_CREAT
S_IREAD|S_IWRITE
S_IREAD
S_IREAD
S_IWRITE
S_IWRITE
if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
fileDesc != -1
fileDesc
fileDesc
-1
1
{                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
printLine("Temporary file was opened...now closing file");
printLine("Temporary file was opened...now closing file")
printLine
printLine
"Temporary file was opened...now closing file"
CLOSE(fileDesc);
CLOSE(fileDesc)
CLOSE
CLOSE
fileDesc
fileDesc
-----joern-----
(21,17,0)
(12,3,0)
(20,24,0)
(23,14,0)
(32,3,0)
(7,18,0)
(11,7,0)
(4,3,0)
(25,9,0)
(24,20,0)
(26,10,0)
(13,2,0)
(2,18,0)
(8,5,0)
(0,17,0)
(14,17,0)
(10,3,0)
(21,3,0)
(7,21,0)
(30,3,0)
(19,29,0)
(29,17,0)
(16,20,0)
(15,29,0)
(24,21,0)
(17,14,0)
(6,21,0)
(5,4,0)
(22,14,0)
(3,28,0)
(27,24,0)
(17,29,0)
(17,21,0)
(31,24,1)
(5,8,1)
(7,21,1)
(14,22,1)
(16,27,1)
(7,11,1)
(11,2,1)
(6,10,1)
(26,5,1)
(19,0,1)
(21,17,1)
(31,1,1)
(2,13,1)
(12,1,1)
(29,15,1)
(23,29,1)
(31,7,1)
(10,26,1)
(27,21,1)
(0,6,1)
(17,14,1)
(22,23,1)
(8,12,1)
(15,19,1)
(24,21,1)
(17,29,1)
(13,24,1)
(20,16,1)
(24,20,1)
(14,1,2)
(7,24,2)
(5,1,2)
(2,24,2)
(29,1,2)
(7,21,2)
(26,1,2)
(16,1,2)
(0,1,2)
(22,1,2)
(15,1,2)
(17,1,2)
(13,24,2)
(20,1,2)
(24,21,2)
(10,1,2)
(12,1,2)
(11,24,2)
(19,1,2)
(21,17,2)
(21,1,2)
(6,1,2)
(17,14,2)
(24,1,2)
(24,20,2)
(8,1,2)
(17,29,2)
(23,1,2)
(27,1,2)
-----------------------------------
(0,filename)
(1,1)
(2,printLine("Temporary file was opened...now closing file")
(3,)
(4,)
(5,exit(1)
(6,fileDesc)
(7,CLOSE(fileDesc)
(8,1)
(9,)
(10,printWLine(filename)
(11,fileDesc)
(12,"")
(13,"Temporary file was opened...now closing file")
(14,S_IREAD|S_IWRITE)
(15,O_CREAT)
(16,1)
(17,OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(18,)
(19,O_RDWR)
(20,-1)
(21,fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(22,S_IWRITE)
(23,S_IREAD)
(24,fileDesc != -1)
(25,if(1)
(26,filename)
(27,fileDesc)
(28,)
(29,O_RDWR|O_CREAT)
(30,fileDesc)
(31,RET)
(32,if (fileDesc != -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
