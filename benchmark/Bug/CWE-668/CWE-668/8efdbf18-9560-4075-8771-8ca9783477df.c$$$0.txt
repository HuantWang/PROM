-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
    else
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(char));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
64,65
64,66
65,66
65,67
66,67
70,71
70,72
71,72
71,73
72,73
72,74
72,75
72,76
73,74
75,76
78,79
80,81
82,83
82,84
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
120,122
120,123
121,122
121,123
122,123
122,124
122,125
122,126
122,127
122,128
122,129
123,124
125,126
127,128
129,130
131,132
133,134
135,136
136,137
139,140
139,141
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
157,158
158,159
158,160
158,161
158,162
158,163
158,164
158,165
158,166
158,167
158,168
158,169
158,170
159,160
160,161
160,162
162,163
162,164
162,165
165,166
166,167
166,168
167,168
167,169
169,170
171,172
171,173
172,173
174,175
174,176
176,177
177,178
177,179
180,181
181,182
181,183
182,183
184,185
184,186
186,187
188,189
189,190
189,191
190,191
192,193
194,195
195,196
195,197
197,198
197,199
197,200
200,201
202,203
203,204
203,205
205,206
205,207
205,208
208,209
210,211
211,212
211,213
212,213
212,214
213,214
217,218
217,219
218,219
218,220
219,220
219,221
219,222
219,223
220,221
222,223
225,226
227,228
229,230
229,231
230,231
231,232
231,233
232,233
235,236
236,237
236,238
237,238
237,239
238,239
242,243
243,244
243,245
244,245
246,247
246,248
247,248
249,250
251,252
251,253
252,253
252,254
253,254
256,257
257,258
258,259
258,260
259,260
259,261
260,261
262,263
262,264
263,264
267,268
267,269
267,270
268,269
268,270
269,270
269,271
269,272
269,273
269,274
269,275
269,276
270,271
272,273
274,275
276,277
278,279
280,281
282,283
283,284
286,287
286,288
287,288
288,289
288,290
289,290
292,293
293,294
293,295
294,295
296,297
298,299
299,300
300,301
300,302
301,302
304,305
305,306
305,307
306,307
308,309
308,310
309,310
311,312
313,314
314,315
314,316
314,317
315,316
317,318
319,320
319,321
320,321
322,323
323,324
323,325
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,40,44,46,49,51,52,54,57,59,60,62,67,68,69,74,76,77,79,81,86,87,92,93,94,98,101,103,107,108,114,117,118,119,124,126,128,130,132,134,137,138,143,144,148,150,155,156,161,163,164,168,170,173,175,178,179,183,185,187,191,193,196,198,199,201,204,206,207,209,214,215,216,221,223,224,226,228,233,234,239,240,241,245,248,250,254,255,261,264,265,266,271,273,275,277,279,281,284,285,290,291,295,297,302,303,307,310,312,316,318,321,324,325
-----computeFrom-----
27,28
27,29
64,65
64,66
71,72
71,73
89,90
89,91
96,97
96,98
105,106
105,107
111,112
111,113
115,116
115,117
121,122
121,123
174,175
174,176
211,212
211,213
218,219
218,220
236,237
236,238
243,244
243,245
252,253
252,254
258,259
258,260
262,263
262,264
268,269
268,270
305,306
305,307
319,320
319,321
-----guardedBy-----
76,92
107,117
137,150
223,239
254,264
284,297
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_12_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
if(globalReturnsTrueOrFalse())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

-----joern-----
(153,7,0)
(163,68,0)
(76,56,0)
(96,17,0)
(123,11,0)
(6,106,0)
(145,123,0)
(5,54,0)
(155,81,0)
(154,29,0)
(8,78,0)
(7,25,0)
(95,123,0)
(12,60,0)
(162,5,0)
(121,7,0)
(40,118,0)
(6,72,0)
(12,142,0)
(81,113,0)
(124,79,0)
(129,147,0)
(17,4,0)
(87,110,0)
(4,44,0)
(142,12,0)
(18,7,0)
(33,7,0)
(168,89,0)
(109,117,0)
(61,20,0)
(71,110,0)
(14,128,0)
(81,34,0)
(53,152,0)
(108,3,0)
(65,5,0)
(69,72,0)
(56,76,0)
(85,150,0)
(104,50,0)
(78,113,0)
(110,22,0)
(140,1,0)
(130,147,0)
(92,14,0)
(11,143,0)
(0,49,0)
(20,5,0)
(52,5,0)
(28,51,0)
(98,158,0)
(133,91,0)
(113,76,0)
(5,37,0)
(136,12,0)
(103,54,0)
(173,163,0)
(23,96,0)
(79,117,0)
(142,147,0)
(137,128,0)
(36,158,0)
(144,68,0)
(3,154,0)
(144,105,0)
(29,7,0)
(76,106,0)
(13,40,0)
(132,34,0)
(40,144,0)
(60,172,0)
(17,96,0)
(4,17,0)
(21,11,0)
(84,75,0)
(128,14,0)
(127,34,0)
(102,11,0)
(81,33,0)
(154,117,0)
(146,128,0)
(161,54,0)
(147,129,0)
(63,110,0)
(15,81,0)
(48,7,0)
(119,6,0)
(24,77,0)
(105,160,0)
(81,150,0)
(135,5,0)
(32,48,0)
(5,68,0)
(59,11,0)
(68,11,0)
(99,11,0)
(157,1,0)
(43,107,0)
(19,7,0)
(117,7,0)
(150,81,0)
(138,5,0)
(107,68,0)
(129,113,0)
(29,113,0)
(83,11,0)
(144,40,0)
(154,3,0)
(74,118,0)
(37,5,0)
(114,115,0)
(78,48,0)
(79,113,0)
(54,11,0)
(147,7,0)
(117,79,0)
(100,7,0)
(2,7,0)
(39,81,0)
(88,66,0)
(5,99,0)
(41,66,0)
(94,111,0)
(16,78,0)
(156,24,0)
(38,142,0)
(73,154,0)
(118,11,0)
(97,7,0)
(4,68,0)
(106,76,0)
(165,81,0)
(151,142,0)
(166,11,0)
(80,129,0)
(46,133,0)
(101,81,0)
(116,50,0)
(42,116,0)
(118,163,0)
(96,125,0)
(158,24,0)
(62,125,0)
(29,154,0)
(163,118,0)
(81,39,0)
(149,11,0)
(22,110,0)
(125,96,0)
(64,33,0)
(158,113,0)
(82,7,0)
(34,7,0)
(139,47,0)
(5,20,0)
(115,11,0)
(89,77,0)
(55,39,0)
(1,118,0)
(159,128,0)
(167,107,0)
(110,68,0)
(126,11,0)
(90,99,0)
(111,115,0)
(35,47,0)
(57,105,0)
(152,91,0)
(111,68,0)
(122,144,0)
(70,112,0)
(31,37,0)
(12,113,0)
(72,6,0)
(27,139,0)
(113,7,0)
(58,68,0)
(30,40,0)
(148,104,0)
(26,51,0)
(66,147,0)
(51,7,0)
(76,113,0)
(10,113,0)
(128,113,0)
(9,60,0)
(93,29,0)
(44,4,0)
(45,11,0)
(106,6,0)
(107,104,0)
(86,22,0)
(49,134,0)
(67,81,0)
(112,120,0)
(141,33,0)
(169,35,0)
(131,99,0)
(68,4,0)
(171,111,0)
(127,33,1)
(148,107,1)
(63,115,1)
(162,52,1)
(5,99,1)
(39,55,1)
(5,68,1)
(62,23,1)
(164,133,1)
(68,4,1)
(28,26,1)
(14,92,1)
(81,34,1)
(147,129,1)
(4,17,1)
(113,76,1)
(111,68,1)
(165,155,1)
(99,90,1)
(158,113,1)
(61,65,1)
(37,5,1)
(39,81,1)
(142,147,1)
(41,147,1)
(34,132,1)
(20,61,1)
(92,128,1)
(111,94,1)
(145,95,1)
(53,37,1)
(124,109,1)
(109,139,1)
(66,147,1)
(26,113,1)
(96,125,1)
(122,1,1)
(117,79,1)
(64,141,1)
(129,113,1)
(130,14,1)
(46,152,1)
(144,68,1)
(128,113,1)
(12,142,1)
(60,9,1)
(106,6,1)
(138,1,1)
(144,40,1)
(119,10,1)
(54,161,1)
(115,114,1)
(5,20,1)
(3,108,1)
(128,137,1)
(6,72,1)
(107,68,1)
(105,57,1)
(88,41,1)
(42,22,1)
(138,105,1)
(85,165,1)
(164,29,1)
(36,98,1)
(161,103,1)
(16,34,1)
(37,31,1)
(51,28,1)
(76,106,1)
(107,43,1)
(104,148,1)
(78,113,1)
(17,96,1)
(29,113,1)
(74,22,1)
(0,37,1)
(65,162,1)
(81,150,1)
(48,32,1)
(108,73,1)
(5,54,1)
(10,170,1)
(150,85,1)
(142,38,1)
(86,110,1)
(139,27,1)
(69,119,1)
(129,80,1)
(79,124,1)
(90,131,1)
(164,49,1)
(80,130,1)
(55,81,1)
(136,66,1)
(70,39,1)
(123,145,1)
(89,168,1)
(32,78,1)
(116,42,1)
(163,173,1)
(168,14,1)
(95,68,1)
(103,99,1)
(38,151,1)
(27,35,1)
(155,67,1)
(24,156,1)
(1,157,1)
(66,88,1)
(109,112,1)
(167,116,1)
(15,101,1)
(8,16,1)
(76,56,1)
(52,135,1)
(72,69,1)
(133,46,1)
(125,62,1)
(71,87,1)
(40,13,1)
(157,140,1)
(67,15,1)
(152,53,1)
(9,12,1)
(154,3,1)
(35,169,1)
(49,0,1)
(30,122,1)
(74,104,1)
(94,171,1)
(110,68,1)
(135,138,1)
(169,39,1)
(101,66,1)
(118,163,1)
(146,159,1)
(81,113,1)
(173,74,1)
(22,110,1)
(140,118,1)
(130,24,1)
(43,167,1)
(101,60,1)
(112,70,1)
(151,136,1)
(4,44,1)
(132,127,1)
(114,111,1)
(110,71,1)
(57,144,1)
(29,154,1)
(1,118,1)
(14,128,1)
(12,113,1)
(87,63,1)
(73,93,1)
(58,170,1)
(23,58,1)
(154,117,1)
(163,68,1)
(81,33,1)
(40,118,1)
(137,146,1)
(31,5,1)
(171,54,1)
(93,117,1)
(158,36,1)
(141,51,1)
(22,86,1)
(131,123,1)
(156,158,1)
(33,64,1)
(159,48,1)
(79,113,1)
(78,8,1)
(13,30,1)
(98,89,1)
(40,118,2)
(69,170,2)
(63,170,2)
(89,14,2)
(4,17,2)
(140,170,2)
(9,66,2)
(53,37,2)
(125,170,2)
(93,170,2)
(135,170,2)
(133,37,2)
(142,147,2)
(48,170,2)
(81,113,2)
(104,22,2)
(54,170,2)
(36,14,2)
(161,170,2)
(66,147,2)
(8,170,2)
(113,76,2)
(163,68,2)
(137,170,2)
(78,113,2)
(29,154,2)
(5,54,2)
(81,34,2)
(118,170,2)
(150,170,2)
(108,170,2)
(128,113,2)
(87,170,2)
(32,170,2)
(55,170,2)
(112,39,2)
(154,170,2)
(113,170,2)
(156,14,2)
(96,170,2)
(109,170,2)
(0,37,2)
(169,39,2)
(13,1,2)
(132,170,2)
(76,56,2)
(46,37,2)
(94,170,2)
(158,113,2)
(39,170,2)
(92,170,2)
(127,170,2)
(74,170,2)
(60,66,2)
(4,44,2)
(64,170,2)
(128,170,2)
(131,170,2)
(68,4,2)
(148,22,2)
(117,170,2)
(66,170,2)
(141,170,2)
(34,170,2)
(42,22,2)
(80,170,2)
(99,170,2)
(107,22,2)
(79,113,2)
(81,150,2)
(86,170,2)
(144,68,2)
(5,20,2)
(1,170,2)
(22,110,2)
(142,66,2)
(119,170,2)
(65,170,2)
(40,1,2)
(157,170,2)
(122,1,2)
(155,170,2)
(105,1,2)
(145,170,2)
(144,40,2)
(106,170,2)
(111,170,2)
(14,170,2)
(12,66,2)
(57,1,2)
(20,170,2)
(26,170,2)
(61,170,2)
(29,113,2)
(167,22,2)
(5,68,2)
(31,170,2)
(62,170,2)
(10,170,2)
(118,163,2)
(162,170,2)
(130,170,2)
(139,39,2)
(37,170,2)
(117,79,2)
(78,170,2)
(138,170,2)
(144,1,2)
(81,33,2)
(6,170,2)
(76,170,2)
(33,170,2)
(30,1,2)
(38,66,2)
(76,106,2)
(28,170,2)
(1,118,2)
(159,170,2)
(110,68,2)
(24,14,2)
(152,37,2)
(171,170,2)
(95,170,2)
(22,170,2)
(14,128,2)
(4,170,2)
(29,170,2)
(72,170,2)
(16,170,2)
(58,170,2)
(114,170,2)
(88,170,2)
(107,68,2)
(51,170,2)
(49,37,2)
(124,170,2)
(115,170,2)
(15,170,2)
(154,117,2)
(37,5,2)
(71,170,2)
(67,170,2)
(52,170,2)
(27,39,2)
(151,66,2)
(5,170,2)
(90,170,2)
(70,39,2)
(96,125,2)
(35,39,2)
(106,6,2)
(81,170,2)
(146,170,2)
(79,170,2)
(165,170,2)
(17,96,2)
(123,170,2)
(3,170,2)
(41,170,2)
(98,14,2)
(103,170,2)
(85,170,2)
(68,170,2)
(154,3,2)
(129,113,2)
(129,170,2)
(110,170,2)
(23,170,2)
(168,14,2)
(12,113,2)
(147,170,2)
(101,170,2)
(12,142,2)
(5,99,2)
(43,22,2)
(163,170,2)
(111,68,2)
(6,72,2)
(173,170,2)
(147,129,2)
(39,81,2)
(136,66,2)
(158,14,2)
(73,170,2)
(116,22,2)
(17,170,2)
-----------------------------------
(0,"Unable to login.")
(1,passwordLen > 0)
(2,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(3,sizeof(char)
(4,(char *)
(5,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(6,100*sizeof(char)
(7,)
(8,0)
(9,\\\'\\\\0\\\')
(10,password)
(11,)
(12,password[passwordLen-1])
(13,1)
(14,fgets(password, 100, stdin)
(15,domain)
(16,password)
(17,ALLOCA(100*sizeof(char)
(18,hUser)
(19,domain)
(20,&hUser)
(21,if (fgets(password, 100, stdin)
(22,fgets(password, 100, stdin)
(23,100)
(24,password[0] = \\\'\\\\0\\\')
(25,)
(26,passwordLen)
(27,hUser)
(28,0)
(29,SecureZeroMemory(password, passwordLen * sizeof(char)
(30,passwordLen)
(31,0)
(32,\\\'\\\\0\\\')
(33,* username = "User")
(34,* domain = "Domain")
(35,printLine("User logged in successfully.")
(36,0)
(37,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(38,1)
(39,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(40,passwordLen-1)
(41,passwordLen)
(42,"fgets()
(43,0)
(44,char *)
(45,passwordLen)
(46,hUser)
(47,)
(48,password[0] = \\\'\\\\0\\\')
(49,printLine("Unable to login.")
(50,)
(51,passwordLen = 0)
(52,password)
(53,"User logged in successfully.")
(54,* domain = "Domain")
(55,0)
(56,char *)
(57,\\\'\\\\0\\\')
(58,password)
(59,if (passwordLen > 0)
(60,password[passwordLen-1] = \\\'\\\\0\\\')
(61,hUser)
(62,char)
(63,password)
(64,"User")
(65,LOGON32_PROVIDER_DEFAULT)
(66,passwordLen > 0)
(67,password)
(68,* password = (char *)
(69,char)
(70,"Unable to login.")
(71,stdin)
(72,sizeof(char)
(73,passwordLen)
(74,passwordLen)
(75,)
(76,(char *)
(77,)
(78,password[0])
(79,strlen(password)
(80,password)
(81,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(82,if (passwordLen > 0)
(83,domain)
(84,if(globalReturnsTrueOrFalse()
(85,hUser)
(86,NULL)
(87,100)
(88,0)
(89,printLine("fgets()
(90,"User")
(91,)
(92,NULL)
(93,password)
(94,0)
(95,passwordLen)
(96,100*sizeof(char)
(97,username)
(98,password)
(99,* username = "User")
(100,password)
(101,username)
(102,hUser)
(103,domain)
(104,password[0] = \\\'\\\\0\\\')
(105,password[passwordLen-1] = \\\'\\\\0\\\')
(106,ALLOCA(100*sizeof(char)
(107,password[0])
(108,char)
(109,passwordLen)
(110,fgets(password, 100, stdin)
(111,password[0])
(112,printLine("Unable to login.")
(113,* password = (char *)
(114,\\\'\\\\0\\\')
(115,password[0] = \\\'\\\\0\\\')
(116,printLine("fgets()
(117,passwordLen = strlen(password)
(118,passwordLen = strlen(password)
(119,100)
(120,)
(121,if (fgets(password, 100, stdin)
(122,password)
(123,passwordLen = 0)
(124,password)
(125,sizeof(char)
(126,username)
(127,domain)
(128,fgets(password, 100, stdin)
(129,strlen(password)
(130,passwordLen)
(131,username)
(132,"Domain")
(133,CloseHandle(hUser)
(134,)
(135,domain)
(136,password)
(137,stdin)
(138,username)
(139,CloseHandle(hUser)
(140,passwordLen)
(141,username)
(142,passwordLen-1)
(143,)
(144,password[passwordLen-1])
(145,0)
(146,100)
(147,passwordLen = strlen(password)
(148,\\\'\\\\0\\\')
(149,password)
(150,&hUser)
(151,passwordLen)
(152,printLine("User logged in successfully.")
(153,passwordLen)
(154,passwordLen * sizeof(char)
(155,LOGON32_LOGON_NETWORK)
(156,\\\'\\\\0\\\')
(157,0)
(158,password[0])
(159,password)
(160,)
(161,"Domain")
(162,LOGON32_LOGON_NETWORK)
(163,strlen(password)
(164,RET)
(165,LOGON32_PROVIDER_DEFAULT)
(166,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(167,password)
(168,"fgets()
(169,"User logged in successfully.")
(170,globalReturnsTrueOrFalse()
(171,password)
(172,)
(173,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
