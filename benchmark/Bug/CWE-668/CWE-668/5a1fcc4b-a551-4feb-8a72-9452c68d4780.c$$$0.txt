-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_15_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (250-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
29,32
29,33
29,34
29,35
30,31
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
122,123
123,124
123,125
124,125
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,31,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,120,121,125,126,127,131,133
-----computeFrom-----
22,23
22,24
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_15_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_15_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_15_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(35,9,0)
(10,2,0)
(62,23,0)
(66,63,0)
(18,2,0)
(2,55,0)
(17,35,0)
(56,2,0)
(0,2,0)
(20,55,0)
(62,56,0)
(63,35,0)
(11,63,0)
(25,56,0)
(22,9,0)
(53,40,0)
(63,9,0)
(66,9,0)
(21,53,0)
(67,2,0)
(3,18,0)
(53,59,0)
(6,41,0)
(5,9,0)
(60,41,0)
(59,53,0)
(43,18,0)
(46,56,0)
(44,53,0)
(10,49,0)
(48,41,0)
(19,51,0)
(26,62,0)
(50,63,0)
(29,63,0)
(11,52,0)
(64,44,0)
(2,18,0)
(56,62,0)
(36,40,0)
(23,62,0)
(29,53,0)
(58,9,0)
(56,46,0)
(4,11,0)
(32,35,0)
(30,64,0)
(24,66,0)
(56,29,0)
(40,41,0)
(15,67,0)
(11,53,0)
(65,44,0)
(47,41,0)
(14,41,0)
(16,29,0)
(7,46,0)
(62,26,0)
(13,52,0)
(37,23,0)
(23,53,0)
(51,1,0)
(27,40,0)
(42,63,0)
(57,44,0)
(44,64,0)
(31,67,0)
(39,29,0)
(61,10,0)
(33,11,0)
(45,23,0)
(12,6,0)
(28,40,0)
(52,1,0)
(54,59,0)
(34,49,0)
(59,63,0)
(29,56,0)
(67,31,1)
(67,2,1)
(29,53,1)
(64,30,1)
(0,64,1)
(7,56,1)
(62,23,1)
(38,63,1)
(53,59,1)
(10,61,1)
(56,62,1)
(6,12,1)
(44,53,1)
(21,38,1)
(24,47,1)
(63,50,1)
(44,57,1)
(30,44,1)
(47,6,1)
(2,18,1)
(59,54,1)
(54,21,1)
(17,32,1)
(56,29,1)
(50,42,1)
(51,19,1)
(11,53,1)
(4,33,1)
(23,53,1)
(39,67,1)
(15,2,1)
(48,67,1)
(57,65,1)
(33,51,1)
(42,35,1)
(64,44,1)
(56,25,1)
(37,45,1)
(62,26,1)
(45,29,1)
(8,66,1)
(3,43,1)
(11,4,1)
(56,2,1)
(48,64,1)
(24,48,1)
(25,62,1)
(43,0,1)
(52,13,1)
(10,2,1)
(23,37,1)
(48,10,1)
(63,35,1)
(29,63,1)
(31,15,1)
(19,46,1)
(16,39,1)
(65,53,1)
(46,56,1)
(13,11,1)
(11,63,1)
(61,52,1)
(61,46,1)
(29,16,1)
(12,38,1)
(46,7,1)
(35,17,1)
(66,63,1)
(66,24,1)
(18,3,1)
(59,63,1)
(11,53,2)
(52,46,2)
(53,59,2)
(62,23,2)
(10,67,2)
(29,67,2)
(29,53,2)
(6,38,2)
(51,46,2)
(31,64,2)
(43,64,2)
(48,38,2)
(59,38,2)
(13,46,2)
(16,67,2)
(67,64,2)
(53,38,2)
(56,67,2)
(64,38,2)
(2,18,2)
(54,38,2)
(4,46,2)
(44,53,2)
(18,64,2)
(56,62,2)
(12,38,2)
(2,64,2)
(46,56,2)
(29,63,2)
(25,67,2)
(0,64,2)
(11,63,2)
(65,38,2)
(62,26,2)
(23,53,2)
(19,46,2)
(45,67,2)
(10,2,2)
(61,67,2)
(56,2,2)
(33,46,2)
(44,38,2)
(39,67,2)
(59,63,2)
(3,64,2)
(64,44,2)
(66,63,2)
(67,2,2)
(56,29,2)
(37,67,2)
(62,67,2)
(15,64,2)
(7,67,2)
(46,67,2)
(63,35,2)
(57,38,2)
(21,38,2)
(47,38,2)
(30,38,2)
(11,46,2)
(23,67,2)
-----------------------------------
(0,pFile)
(1,)
(2,pFile = fopen(FILENAME, "r")
(3,"r")
(4,dataLen)
(5,data)
(6,printLine("Benign, fixed string")
(7,NULL)
(8,RET)
(9,)
(10,fclose(pFile)
(11,data[dataLen])
(12,"Benign, fixed string")
(13,\\\'\\\\0\\\')
(14,case 6:)
(15,pFile)
(16,dataLen)
(17,"PATH=")
(18,fopen(FILENAME, "r")
(19,"fgets()
(20,if (pFile != NULL)
(21,dataLen)
(22,dataBuffer)
(23,250-dataLen)
(24,data)
(25,pFile)
(26,int)
(27,dataLen)
(28,pFile)
(29,data+dataLen)
(30,1)
(31,NULL)
(32,dataBuffer)
(33,data)
(34,if (fgets(data+dataLen, (int)
(35,dataBuffer[250] = "PATH=")
(36,if (250-dataLen > 1)
(37,dataLen)
(38,6)
(39,data)
(40,)
(41,)
(42,data)
(43,FILENAME)
(44,250-dataLen)
(45,250)
(46,fgets(data+dataLen, (int)
(47,break;)
(48,break;)
(49,)
(50,dataBuffer)
(51,printLine("fgets()
(52,data[dataLen] = \\\'\\\\0\\\')
(53,dataLen = strlen(data)
(54,data)
(55,)
(56,fgets(data+dataLen, (int)
(57,dataLen)
(58,switch(6)
(59,strlen(data)
(60,default:)
(61,pFile)
(62,(int)
(63,data = dataBuffer)
(64,250-dataLen > 1)
(65,250)
(66,PUTENV(data)
(67,pFile != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
