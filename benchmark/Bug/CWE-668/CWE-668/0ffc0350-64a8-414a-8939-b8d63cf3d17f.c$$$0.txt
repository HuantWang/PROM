-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_16_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    while(1)
    {
        {
            WSADATA wsaData;
            BOOL wsaDataInit = FALSE;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            struct sockaddr_in service;
            int recvResult;
            do
            {
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
                listenSocket = socket(PF_INET, SOCK_STREAM, 0);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(LISTEN_PORT);
                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
                {
                    break;
                }
                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == INVALID_SOCKET)
                {
                    break;
                }
                /* INCIDENTAL CWE 188 - reliance on data memory layout
                 * recv and friends return "number of bytes" received
                 * char's on our system, however, may not be "octets" (8-bit
                 * bytes) but could be just about anything.  Also,
                 * even if the external environment is ASCII or UTF8,
                 * the ANSI/ISO C standard does not dictate that the
                 * character set used by the actual language or character
                 * constants matches.
                 *
                 * In practice none of these are usually issues...
                 */
                /* FLAW: read the new hostname from a network socket */
                recvResult = recv(acceptSocket, data, 100 - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                data[recvResult] = '\0';
            }
            while (0);
            if (acceptSocket != INVALID_SOCKET)
            {
                closesocket(acceptSocket);
            }
            if (listenSocket != INVALID_SOCKET)
            {
                closesocket(listenSocket);
            }
            if (wsaDataInit)
            {
                WSACleanup();
            }
        }
        break;
    }
    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */
    if (!SetComputerNameA(data))
    {
        printLine("Failure setting computer name");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
29,31
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
30,40
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
73,74
75,76
75,77
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
76,88
76,89
76,90
76,91
77,78
77,79
78,79
78,80
79,80
79,81
79,82
80,81
82,83
82,84
82,85
83,84
87,88
88,89
90,91
92,93
94,95
95,96
95,97
96,97
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
104,105
106,107
108,109
111,112
111,113
112,113
112,114
113,114
115,116
117,118
119,120
120,121
120,122
120,123
120,124
121,122
123,124
124,125
127,128
128,129
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
147,148
149,150
150,151
150,152
151,152
151,153
152,153
155,156
155,157
156,157
158,159
160,161
160,162
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
169,171
170,171
170,172
171,172
173,174
175,176
176,177
178,179
179,180
180,181
182,183
184,185
184,186
185,186
185,187
186,187
188,189
188,190
188,191
189,190
191,192
193,194
195,196
197,198
198,199
198,200
199,200
201,202
201,203
201,204
201,205
202,203
204,205
206,207
208,209
210,211
210,212
211,212
211,213
212,213
214,215
216,217
218,219
219,220
219,221
220,221
222,223
222,224
222,225
222,226
222,227
223,224
225,226
227,228
229,230
229,231
233,234
233,235
234,235
234,236
235,236
235,237
236,237
238,239
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
251,252
255,256
255,257
256,257
256,258
257,258
259,260
261,262
262,263
263,264
263,265
264,265
266,267
268,269
268,270
269,270
269,271
270,271
272,273
274,275
275,276
276,277
276,278
277,278
279,280
281,282
281,283
282,283
284,285
285,286
286,287
287,288
290,291
290,292
291,292
292,293
292,294
293,294
295,296
297,298
297,299
298,299
299,300
299,301
300,301
303,304
304,305
304,306
305,306
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,40,42,45,49,51,54,58,60,63,67,69,72,74,81,84,85,86,89,91,93,97,98,102,105,107,109,110,114,116,118,122,125,126,130,135,136,138,144,145,146,148,153,154,157,159,163,166,168,172,174,177,181,183,187,190,192,194,196,200,203,205,207,209,213,215,217,221,224,226,228,230,231,232,237,239,242,243,245,250,252,253,254,258,260,265,267,271,273,278,280,283,288,289,294,296,301,302,306,307
-----computeFrom-----
22,23
22,24
78,79
78,80
95,96
95,97
100,101
100,102
112,113
112,114
132,133
132,134
140,141
140,142
150,151
150,152
161,162
161,163
185,186
185,187
198,199
198,200
211,212
211,213
219,220
219,221
229,230
229,231
234,235
234,236
235,236
235,237
240,241
240,242
247,248
247,249
256,257
256,258
269,270
269,271
-----guardedBy-----
258,267
271,280
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_16_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    while(1)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }        break;    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_16_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_16_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    while(1)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }        break;    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }        break;    }
1
{        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }        break;    }
{            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);
{                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                    break;                }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                    break;                }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)                {                    break;                }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(acceptSocket);            }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(listenSocket);            }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)            {                WSACleanup();            }
wsaDataInit
wsaDataInit
{                WSACleanup();            }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
break;
if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }
!SetComputerNameA(data)
SetComputerNameA(data)
SetComputerNameA
SetComputerNameA
data
data
{        printLine("Failure setting computer name");        exit(1);    }
printLine("Failure setting computer name");
printLine("Failure setting computer name")
printLine
printLine
"Failure setting computer name"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(150,56,0)
(81,9,0)
(96,55,0)
(151,9,0)
(150,69,0)
(66,12,0)
(162,89,0)
(70,100,0)
(93,140,0)
(132,138,0)
(122,22,0)
(49,57,0)
(141,84,0)
(64,119,0)
(67,11,0)
(110,143,0)
(75,89,0)
(60,145,0)
(66,138,0)
(160,57,0)
(31,120,0)
(144,125,0)
(156,80,0)
(118,97,0)
(54,64,0)
(119,53,0)
(146,6,0)
(28,92,0)
(48,55,0)
(135,53,0)
(139,154,0)
(42,77,0)
(56,12,0)
(24,22,0)
(21,9,0)
(35,56,0)
(0,120,0)
(53,119,0)
(158,89,0)
(134,21,0)
(37,55,0)
(16,89,0)
(55,37,0)
(154,89,0)
(74,53,0)
(58,19,0)
(153,121,0)
(78,38,0)
(29,66,0)
(80,12,0)
(92,137,0)
(79,73,0)
(147,60,0)
(9,12,0)
(138,137,0)
(52,12,0)
(125,100,0)
(1,19,0)
(29,59,0)
(161,80,0)
(121,84,0)
(56,125,0)
(152,12,0)
(30,89,0)
(123,89,0)
(62,33,0)
(5,78,0)
(94,30,0)
(36,66,0)
(150,46,0)
(111,122,0)
(4,150,0)
(41,36,0)
(3,100,0)
(114,12,0)
(163,51,0)
(165,22,0)
(166,138,0)
(137,12,0)
(46,12,0)
(78,137,0)
(143,124,0)
(9,21,0)
(44,89,0)
(72,17,0)
(142,161,0)
(45,150,0)
(95,68,0)
(18,37,0)
(119,64,0)
(84,33,0)
(99,110,0)
(133,6,0)
(115,114,0)
(84,121,0)
(120,11,0)
(131,97,0)
(71,12,0)
(97,60,0)
(108,112,0)
(86,64,0)
(61,89,0)
(102,69,0)
(10,125,0)
(78,30,0)
(136,124,0)
(27,125,0)
(155,145,0)
(116,13,0)
(145,60,0)
(117,66,0)
(65,81,0)
(164,122,0)
(129,89,0)
(83,12,0)
(109,114,0)
(124,143,0)
(130,43,0)
(127,121,0)
(91,22,0)
(60,51,0)
(64,56,0)
(11,89,0)
(148,36,0)
(100,125,0)
(105,89,0)
(88,73,0)
(15,49,0)
(39,154,0)
(82,113,0)
(32,92,0)
(63,46,0)
(23,12,0)
(106,68,0)
(2,22,0)
(112,143,0)
(88,12,0)
(68,69,0)
(51,60,0)
(9,81,0)
(53,56,0)
(68,95,0)
(55,137,0)
(69,22,0)
(125,56,0)
(97,131,0)
(47,138,0)
(60,137,0)
(125,66,0)
(40,11,0)
(33,12,0)
(90,29,0)
(89,43,0)
(50,131,0)
(143,110,0)
(149,137,0)
(125,69,0)
(19,88,0)
(60,97,0)
(6,30,0)
(137,92,0)
(73,88,0)
(138,66,0)
(107,103,0)
(97,118,0)
(6,137,0)
(126,30,0)
(128,101,0)
(98,69,0)
(7,161,0)
(76,89,0)
(29,11,0)
(104,12,0)
(120,66,0)
(8,87,0)
(143,112,0)
(157,87,0)
(26,92,0)
(25,160,0)
(87,137,0)
(20,110,0)
(69,122,0)
(125,10,1)
(54,53,1)
(7,9,1)
(36,66,1)
(153,127,1)
(156,161,1)
(80,156,1)
(97,118,1)
(146,133,1)
(157,137,1)
(108,110,1)
(94,154,1)
(138,137,1)
(88,73,1)
(29,90,1)
(119,64,1)
(6,137,1)
(128,145,1)
(155,88,1)
(79,19,1)
(138,47,1)
(95,68,1)
(99,20,1)
(121,153,1)
(110,99,1)
(136,143,1)
(159,6,1)
(122,164,1)
(0,42,1)
(55,137,1)
(33,62,1)
(32,149,1)
(133,120,1)
(69,122,1)
(0,72,1)
(34,46,1)
(29,11,1)
(62,84,1)
(68,69,1)
(3,70,1)
(159,78,1)
(112,108,1)
(60,137,1)
(50,147,1)
(46,63,1)
(106,14,1)
(116,87,1)
(163,97,1)
(70,27,1)
(6,146,1)
(8,157,1)
(53,56,1)
(137,92,1)
(154,39,1)
(9,21,1)
(82,37,1)
(5,6,1)
(124,143,1)
(19,1,1)
(114,115,1)
(143,110,1)
(81,65,1)
(68,106,1)
(10,100,1)
(125,100,1)
(87,8,1)
(120,31,1)
(37,55,1)
(164,111,1)
(93,119,1)
(120,66,1)
(149,114,1)
(85,160,1)
(150,56,1)
(106,130,1)
(60,51,1)
(60,97,1)
(87,137,1)
(141,121,1)
(64,56,1)
(96,48,1)
(20,34,1)
(132,117,1)
(69,98,1)
(45,119,1)
(97,131,1)
(143,112,1)
(124,136,1)
(147,155,1)
(49,15,1)
(109,124,1)
(30,126,1)
(0,93,1)
(130,107,1)
(90,120,1)
(66,138,1)
(51,163,1)
(25,49,1)
(85,95,1)
(0,82,1)
(134,151,1)
(126,94,1)
(20,11,1)
(117,37,1)
(15,95,1)
(27,144,1)
(0,116,1)
(0,128,1)
(119,53,1)
(0,34,1)
(98,102,1)
(150,4,1)
(6,30,1)
(160,25,1)
(4,45,1)
(1,58,1)
(41,148,1)
(21,134,1)
(78,137,1)
(148,66,1)
(58,33,1)
(151,81,1)
(133,29,1)
(150,69,1)
(36,41,1)
(48,18,1)
(86,54,1)
(35,36,1)
(42,124,1)
(125,69,1)
(142,7,1)
(139,14,1)
(125,66,1)
(73,79,1)
(47,166,1)
(72,36,1)
(100,3,1)
(65,87,1)
(115,109,1)
(29,66,1)
(11,40,1)
(78,5,1)
(14,69,1)
(64,86,1)
(39,139,1)
(78,30,1)
(55,96,1)
(135,74,1)
(130,159,1)
(102,122,1)
(84,121,1)
(28,26,1)
(127,80,1)
(120,11,1)
(166,132,1)
(161,142,1)
(63,150,1)
(53,135,1)
(56,125,1)
(40,67,1)
(31,0,1)
(145,60,1)
(84,141,1)
(26,32,1)
(74,56,1)
(131,50,1)
(67,30,1)
(92,28,1)
(9,81,1)
(18,145,1)
(144,35,1)
(107,159,1)
(9,81,2)
(144,36,2)
(54,53,2)
(64,56,2)
(161,87,2)
(112,14,2)
(78,137,2)
(134,87,2)
(20,34,2)
(114,124,2)
(125,69,2)
(60,97,2)
(108,14,2)
(92,124,2)
(47,37,2)
(36,37,2)
(50,87,2)
(7,87,2)
(90,120,2)
(21,87,2)
(132,37,2)
(86,53,2)
(53,36,2)
(33,87,2)
(117,37,2)
(112,34,2)
(155,87,2)
(97,87,2)
(31,14,2)
(9,21,2)
(115,124,2)
(34,119,2)
(143,112,2)
(4,119,2)
(138,137,2)
(133,14,2)
(109,124,2)
(60,51,2)
(6,30,2)
(46,119,2)
(88,73,2)
(28,124,2)
(100,36,2)
(120,14,2)
(126,14,2)
(127,87,2)
(3,36,2)
(146,14,2)
(145,60,2)
(81,87,2)
(147,87,2)
(143,34,2)
(148,37,2)
(6,137,2)
(73,87,2)
(119,64,2)
(37,145,2)
(63,119,2)
(82,37,2)
(143,14,2)
(154,14,2)
(6,14,2)
(135,36,2)
(124,14,2)
(37,55,2)
(137,92,2)
(56,125,2)
(145,87,2)
(29,11,2)
(29,66,2)
(124,34,2)
(36,66,2)
(160,95,2)
(166,37,2)
(87,137,2)
(8,124,2)
(88,87,2)
(60,87,2)
(1,87,2)
(67,14,2)
(0,14,2)
(121,87,2)
(56,36,2)
(45,119,2)
(120,11,2)
(137,124,2)
(150,56,2)
(39,14,2)
(18,145,2)
(10,36,2)
(55,137,2)
(141,87,2)
(94,14,2)
(72,36,2)
(131,87,2)
(149,124,2)
(11,14,2)
(5,6,2)
(153,87,2)
(78,30,2)
(84,121,2)
(151,87,2)
(27,36,2)
(40,14,2)
(62,87,2)
(110,14,2)
(41,37,2)
(78,6,2)
(64,53,2)
(110,34,2)
(125,100,2)
(66,37,2)
(107,159,2)
(80,87,2)
(74,36,2)
(60,137,2)
(119,36,2)
(19,87,2)
(87,124,2)
(84,87,2)
(143,110,2)
(42,124,2)
(69,122,2)
(125,36,2)
(99,14,2)
(108,34,2)
(99,34,2)
(66,138,2)
(51,87,2)
(150,69,2)
(25,95,2)
(136,34,2)
(116,87,2)
(26,124,2)
(79,87,2)
(15,95,2)
(124,143,2)
(128,145,2)
(97,118,2)
(150,119,2)
(142,87,2)
(97,131,2)
(20,14,2)
(139,14,2)
(163,87,2)
(157,124,2)
(58,87,2)
(136,14,2)
(35,36,2)
(120,66,2)
(95,68,2)
(125,66,2)
(32,124,2)
(55,145,2)
(29,120,2)
(156,87,2)
(70,36,2)
(138,37,2)
(9,87,2)
(53,56,2)
(65,87,2)
(130,14,2)
(159,14,2)
(119,53,2)
(96,145,2)
(48,145,2)
(93,119,2)
(49,95,2)
(68,69,2)
(30,14,2)
-----------------------------------
(0,acceptSocket)
(1,sin_port)
(2,while(1)
(3,1)
(4,recvResult)
(5,listenSocket)
(6,listenSocket != INVALID_SOCKET)
(7,service)
(8,INVALID_SOCKET)
(9,memset(&service, 0, sizeof(service)
(10,0)
(11,acceptSocket = INVALID_SOCKET)
(12,)
(13,)
(14,1)
(15,"Failure setting computer name")
(16,wsaData)
(17,)
(18,SOCKET_ERROR)
(19,service.sin_port)
(20,2)
(21,sizeof(service)
(22,)
(23,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(24,data)
(25,1)
(26,SOCK_STREAM)
(27,data)
(28,0)
(29,closesocket(acceptSocket)
(30,listenSocket = INVALID_SOCKET)
(31,INVALID_SOCKET)
(32,PF_INET)
(33,service.sin_addr.s_addr = INADDR_ANY)
(34,0)
(35,recvResult)
(36,acceptSocket == INVALID_SOCKET)
(37,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(38,)
(39,FALSE)
(40,INVALID_SOCKET)
(41,INVALID_SOCKET)
(42,break;)
(43,)
(44,do)
(45,data)
(46,data[recvResult] = \\\'\\\\0\\\')
(47,NULL)
(48,listenSocket)
(49,printLine("Failure setting computer name")
(50,service)
(51,sizeof(service)
(52,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(53,recvResult == SOCKET_ERROR)
(54,recvResult)
(55,listen(listenSocket, LISTEN_BACKLOG)
(56,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(57,)
(58,service)
(59,)
(60,bind(listenSocket, (struct sockaddr*)
(61,if (wsaDataInit)
(62,INADDR_ANY)
(63,\\\'\\\\0\\\')
(64,recvResult == 0)
(65,service)
(66,acceptSocket = accept(listenSocket, NULL, NULL)
(67,acceptSocket)
(68,SetComputerNameA(data)
(69,data = dataBuffer)
(70,100)
(71,if (listenSocket == INVALID_SOCKET)
(72,break;)
(73,htons(LISTEN_PORT)
(74,recvResult)
(75,service)
(76,if (acceptSocket != INVALID_SOCKET)
(77,)
(78,closesocket(listenSocket)
(79,LISTEN_PORT)
(80,service.sin_family = AF_INET)
(81,&service)
(82,break;)
(83,if (WSAStartup(MAKEWORD(2,2)
(84,service.sin_addr.s_addr)
(85,RET)
(86,0)
(87,listenSocket == INVALID_SOCKET)
(88,service.sin_port = htons(LISTEN_PORT)
(89,)
(90,acceptSocket)
(91,if (!SetComputerNameA(data)
(92,socket(PF_INET, SOCK_STREAM, 0)
(93,break;)
(94,listenSocket)
(95,!SetComputerNameA(data)
(96,LISTEN_BACKLOG)
(97,(struct sockaddr*)
(98,dataBuffer)
(99,2)
(100,100 - 1)
(101,)
(102,data)
(103,)
(104,if (recvResult == SOCKET_ERROR || recvResult == 0)
(105,acceptSocket)
(106,data)
(107,WSACleanup()
(108,wsaData)
(109,wsaDataInit)
(110,MAKEWORD(2,2)
(111,dataBuffer)
(112,&wsaData)
(113,)
(114,wsaDataInit = 1)
(115,1)
(116,break;)
(117,acceptSocket)
(118,struct sockaddr*)
(119,recvResult == SOCKET_ERROR || recvResult == 0)
(120,acceptSocket != INVALID_SOCKET)
(121,service.sin_addr)
(122,dataBuffer[100] = "")
(123,recvResult)
(124,WSAStartup(MAKEWORD(2,2)
(125,recv(acceptSocket, data, 100 - 1, 0)
(126,INVALID_SOCKET)
(127,service)
(128,break;)
(129,if (listenSocket != INVALID_SOCKET)
(130,break;)
(131,&service)
(132,listenSocket)
(133,listenSocket)
(134,service)
(135,SOCKET_ERROR)
(136,NO_ERROR)
(137,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(138,accept(listenSocket, NULL, NULL)
(139,wsaDataInit)
(140,)
(141,s_addr)
(142,sin_family)
(143,WSAStartup(MAKEWORD(2,2)
(144,acceptSocket)
(145,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(146,INVALID_SOCKET)
(147,listenSocket)
(148,acceptSocket)
(149,listenSocket)
(150,data[recvResult])
(151,0)
(152,if (acceptSocket == INVALID_SOCKET)
(153,sin_addr)
(154,wsaDataInit = FALSE)
(155,SOCKET_ERROR)
(156,AF_INET)
(157,listenSocket)
(158,wsaDataInit)
(159,wsaDataInit)
(160,exit(1)
(161,service.sin_family)
(162,listenSocket)
(163,service)
(164,"")
(165,dataBuffer)
(166,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
