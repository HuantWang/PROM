-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_18_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    goto source;
source:
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
29,30
29,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,30,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_18_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    goto source;source:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_18_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_18_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    goto source;source:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
source
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(6,45,0)
(37,4,0)
(1,4,0)
(10,4,0)
(3,44,0)
(14,42,0)
(0,2,0)
(43,2,0)
(22,2,0)
(41,43,0)
(33,22,0)
(9,19,0)
(34,0,0)
(6,42,0)
(2,43,0)
(17,33,0)
(5,45,0)
(46,11,0)
(22,18,0)
(43,42,0)
(20,45,0)
(43,45,0)
(22,33,0)
(32,4,0)
(1,45,0)
(18,22,0)
(16,14,0)
(35,44,0)
(45,4,0)
(19,4,0)
(11,28,0)
(8,1,0)
(23,2,0)
(30,33,0)
(47,35,0)
(33,42,0)
(14,25,0)
(25,14,0)
(38,7,0)
(42,6,0)
(2,0,0)
(36,7,0)
(12,4,0)
(2,22,0)
(27,25,0)
(26,6,0)
(7,36,0)
(21,42,0)
(40,29,0)
(36,45,0)
(15,43,0)
(42,19,0)
(13,36,0)
(31,19,0)
(7,28,0)
(39,14,0)
(43,15,1)
(7,36,1)
(36,13,1)
(33,42,1)
(8,25,1)
(1,45,1)
(23,22,1)
(2,22,1)
(13,38,1)
(26,21,1)
(35,47,1)
(22,33,1)
(14,39,1)
(27,14,1)
(1,8,1)
(8,46,1)
(8,3,1)
(25,27,1)
(6,45,1)
(33,17,1)
(47,0,1)
(30,43,1)
(38,0,1)
(22,18,1)
(3,35,1)
(24,1,1)
(42,6,1)
(36,45,1)
(39,16,1)
(43,45,1)
(21,10,1)
(43,42,1)
(34,2,1)
(5,32,1)
(2,23,1)
(0,2,1)
(16,42,1)
(45,20,1)
(10,45,1)
(14,42,1)
(41,25,1)
(6,26,1)
(15,41,1)
(0,34,1)
(46,7,1)
(25,14,1)
(17,30,1)
(2,43,1)
(20,5,1)
(1,45,2)
(34,25,2)
(46,0,2)
(22,18,2)
(14,42,2)
(30,25,2)
(13,0,2)
(33,25,2)
(33,42,2)
(41,25,2)
(0,2,2)
(25,14,2)
(23,25,2)
(42,6,2)
(2,43,2)
(3,0,2)
(47,0,2)
(22,25,2)
(2,22,2)
(43,45,2)
(35,0,2)
(22,33,2)
(2,25,2)
(38,0,2)
(43,42,2)
(17,25,2)
(0,25,2)
(6,45,2)
(43,25,2)
(36,0,2)
(15,25,2)
(7,0,2)
(36,45,2)
(7,36,2)
-----------------------------------
(0,fgetws(data+dataLen, (int)
(1,PUTENV(data)
(2,fgetws(data+dataLen, (int)
(3,\\\'\\\\0\\\')
(4,)
(5,data)
(6,wcslen(data)
(7,dataLen = wcslen(data)
(8,data)
(9,dataLen)
(10,goto source;)
(11,)
(12,source:)
(13,data)
(14,250-dataLen)
(15,dataLen)
(16,250)
(17,dataLen)
(18,int)
(19,)
(20,dataBuffer)
(21,dataLen)
(22,(int)
(23,stdin)
(24,RET)
(25,250-dataLen > 1)
(26,data)
(27,1)
(28,)
(29,)
(30,250)
(31,if (250-dataLen > 1)
(32,"PATH=")
(33,250-dataLen)
(34,NULL)
(35,printLine("fgetws()
(36,wcslen(data)
(37,data)
(38,dataLen)
(39,dataLen)
(40,if (fgetws(data+dataLen, (int)
(41,data)
(42,dataLen = wcslen(data)
(43,data+dataLen)
(44,)
(45,data = dataBuffer)
(46,\\\'\\\\0\\\')
(47,"fgetws()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
