-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_07_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    if(staticFive==5)
    {
        {
            WSADATA wsaData;
            BOOL wsaDataInit = FALSE;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            struct sockaddr_in service;
            int recvResult;
            do
            {
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
                listenSocket = socket(PF_INET, SOCK_STREAM, 0);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(LISTEN_PORT);
                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
                {
                    break;
                }
                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == INVALID_SOCKET)
                {
                    break;
                }
                /* INCIDENTAL CWE 188 - reliance on data memory layout
                 * recv and friends return "number of bytes" received
                 * char's on our system, however, may not be "octets" (8-bit
                 * bytes) but could be just about anything.  Also,
                 * even if the external environment is ASCII or UTF8,
                 * the ANSI/ISO C standard does not dictate that the
                 * character set used by the actual language or character
                 * constants matches.
                 *
                 * In practice none of these are usually issues...
                 */
                /* FLAW: read the new hostname from a network socket */
                recvResult = recv(acceptSocket, data, 100 - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                data[recvResult] = '\0';
            }
            while (0);
            if (acceptSocket != INVALID_SOCKET)
            {
                closesocket(acceptSocket);
            }
            if (listenSocket != INVALID_SOCKET)
            {
                closesocket(listenSocket);
            }
            if (wsaDataInit)
            {
                WSACleanup();
            }
        }
    }
    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */
    if (!SetComputerNameA(data))
    {
        printLine("Failure setting computer name");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
33,36
33,37
33,38
33,39
33,40
33,41
33,42
33,43
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
76,77
78,79
78,80
79,80
79,81
79,82
79,83
79,84
79,85
79,86
79,87
79,88
79,89
79,90
79,91
79,92
79,93
79,94
80,81
80,82
81,82
81,83
82,83
82,84
82,85
83,84
85,86
85,87
85,88
86,87
90,91
91,92
93,94
95,96
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
106,108
106,109
106,110
107,108
109,110
111,112
114,115
114,116
115,116
115,117
116,117
118,119
120,121
122,123
123,124
123,125
123,126
123,127
124,125
126,127
127,128
130,131
131,132
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
143,144
143,145
144,145
144,146
145,146
145,147
146,147
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
158,160
159,160
161,162
163,164
163,165
164,165
164,166
165,166
167,168
167,169
167,170
167,171
168,169
170,171
172,173
172,174
173,174
173,175
174,175
176,177
178,179
179,180
181,182
182,183
183,184
185,186
187,188
187,189
188,189
188,190
189,190
191,192
191,193
191,194
192,193
194,195
196,197
198,199
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
205,206
207,208
209,210
211,212
213,214
213,215
214,215
214,216
215,216
217,218
219,220
221,222
222,223
222,224
223,224
225,226
225,227
225,228
225,229
225,230
226,227
228,229
230,231
232,233
232,234
236,237
236,238
237,238
237,239
238,239
238,240
239,240
241,242
243,244
243,245
244,245
247,248
249,250
250,251
250,252
251,252
251,253
252,253
254,255
258,259
258,260
259,260
259,261
260,261
262,263
264,265
265,266
266,267
266,268
267,268
269,270
271,272
271,273
272,273
272,274
273,274
275,276
277,278
278,279
279,280
279,281
280,281
282,283
284,285
284,286
285,286
287,288
288,289
289,290
290,291
292,293
292,294
293,294
294,295
294,296
295,296
297,298
299,300
299,301
300,301
301,302
301,303
302,303
305,306
306,307
306,308
307,308
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,48,52,54,57,61,63,66,70,72,75,77,84,87,88,89,92,94,96,100,101,105,108,110,112,113,117,119,121,125,128,129,133,138,139,141,147,148,149,151,156,157,160,162,166,169,171,175,177,180,184,186,190,193,195,197,199,203,206,208,210,212,216,218,220,224,227,229,231,233,234,235,240,242,245,246,248,253,255,256,257,261,263,268,270,274,276,281,283,286,291,296,298,303,304,308,309
-----computeFrom-----
22,23
22,24
28,29
28,30
81,82
81,83
98,99
98,100
103,104
103,105
115,116
115,117
135,136
135,137
143,144
143,145
153,154
153,155
164,165
164,166
188,189
188,190
201,202
201,203
214,215
214,216
222,223
222,224
232,233
232,234
237,238
237,239
238,239
238,240
243,244
243,245
250,251
250,252
259,260
259,261
272,273
272,274
-----guardedBy-----
261,270
274,283
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_07_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(staticFive==5)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_07_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_07_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    if(staticFive==5)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */    if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticFive==5)    {        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }    }
{            WSADATA wsaData;            BOOL wsaDataInit = FALSE;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            struct sockaddr_in service;            int recvResult;            do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);            if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }            if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }            if (wsaDataInit)            {                WSACleanup();            }        }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do            {                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }            while (0);
{                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;                listenSocket = socket(PF_INET, SOCK_STREAM, 0);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(LISTEN_PORT);                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == INVALID_SOCKET)                {                    break;                }                /* INCIDENTAL CWE 188 - reliance on data memory layout                 * recv and friends return "number of bytes" received                 * char's on our system, however, may not be "octets" (8-bit                 * bytes) but could be just about anything.  Also,                 * even if the external environment is ASCII or UTF8,                 * the ANSI/ISO C standard does not dictate that the                 * character set used by the actual language or character                 * constants matches.                 *                 * In practice none of these are usually issues...                 */                /* FLAW: read the new hostname from a network socket */                recvResult = recv(acceptSocket, data, 100 - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                data[recvResult] = '\0';            }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                    break;                }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))                {                    break;                }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                    break;                }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))                {                    break;                }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)                {                    break;                }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)            {                closesocket(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(acceptSocket);            }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)            {                closesocket(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                closesocket(listenSocket);            }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)            {                WSACleanup();            }
wsaDataInit
wsaDataInit
{                WSACleanup();            }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
if (!SetComputerNameA(data))    {        printLine("Failure setting computer name");        exit(1);    }
!SetComputerNameA(data)
SetComputerNameA(data)
SetComputerNameA
SetComputerNameA
data
data
{        printLine("Failure setting computer name");        exit(1);    }
printLine("Failure setting computer name");
printLine("Failure setting computer name")
printLine
printLine
"Failure setting computer name"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(154,108,0)
(111,71,0)
(38,24,0)
(149,45,0)
(87,2,0)
(88,156,0)
(52,164,0)
(56,45,0)
(135,66,0)
(121,45,0)
(1,56,0)
(92,71,0)
(119,113,0)
(100,94,0)
(61,97,0)
(42,152,0)
(113,5,0)
(167,162,0)
(17,76,0)
(144,163,0)
(92,146,0)
(6,121,0)
(10,157,0)
(37,108,0)
(152,72,0)
(45,66,0)
(5,84,0)
(78,31,0)
(2,26,0)
(92,5,0)
(48,149,0)
(85,94,0)
(30,156,0)
(60,152,0)
(12,128,0)
(51,32,0)
(150,111,0)
(17,50,0)
(57,66,0)
(98,56,0)
(163,66,0)
(46,33,0)
(82,111,0)
(23,53,0)
(65,146,0)
(90,71,0)
(109,13,0)
(132,79,0)
(71,66,0)
(164,103,0)
(17,71,0)
(2,104,0)
(89,159,0)
(106,100,0)
(99,7,0)
(124,44,0)
(97,99,0)
(44,50,0)
(27,26,0)
(47,38,0)
(2,87,0)
(3,152,0)
(43,147,0)
(126,152,0)
(50,152,0)
(128,100,0)
(45,149,0)
(44,71,0)
(141,149,0)
(161,117,0)
(9,162,0)
(103,66,0)
(127,60,0)
(80,67,0)
(118,135,0)
(154,64,0)
(100,125,0)
(156,64,0)
(24,66,0)
(131,117,0)
(64,156,0)
(16,150,0)
(83,68,0)
(165,97,0)
(69,104,0)
(91,71,0)
(139,152,0)
(59,111,0)
(110,152,0)
(120,66,0)
(0,129,0)
(64,154,0)
(54,152,0)
(128,163,0)
(18,87,0)
(129,95,0)
(101,94,0)
(22,167,0)
(102,154,0)
(5,92,0)
(15,90,0)
(156,108,0)
(4,133,0)
(108,167,0)
(145,68,0)
(75,90,0)
(95,129,0)
(36,67,0)
(112,125,0)
(153,7,0)
(130,122,0)
(151,24,0)
(35,154,0)
(73,167,0)
(157,143,0)
(167,45,0)
(84,5,0)
(136,17,0)
(11,125,0)
(70,159,0)
(92,122,0)
(117,152,0)
(103,164,0)
(58,100,0)
(123,68,0)
(81,152,0)
(77,34,0)
(111,150,0)
(68,71,0)
(159,45,0)
(5,113,0)
(8,152,0)
(32,66,0)
(134,152,0)
(107,128,0)
(148,66,0)
(71,68,0)
(142,50,0)
(137,66,0)
(155,26,0)
(93,44,0)
(129,32,0)
(160,60,0)
(133,103,0)
(56,60,0)
(166,92,0)
(116,66,0)
(99,66,0)
(146,92,0)
(7,99,0)
(149,71,0)
(122,92,0)
(128,108,0)
(86,45,0)
(40,103,0)
(103,133,0)
(67,100,0)
(121,49,0)
(21,152,0)
(121,60,0)
(167,100,0)
(138,143,0)
(96,95,0)
(167,108,0)
(125,94,0)
(114,95,0)
(28,94,0)
(14,50,0)
(115,149,0)
(41,135,0)
(162,167,0)
(104,2,0)
(20,38,0)
(25,79,0)
(74,94,0)
(140,66,0)
(55,158,0)
(108,66,0)
(105,167,0)
(26,2,0)
(39,162,0)
(67,36,0)
(29,138,0)
(73,37,1)
(100,106,1)
(27,62,1)
(64,154,1)
(111,82,1)
(29,36,1)
(109,150,1)
(14,142,1)
(2,26,1)
(87,18,1)
(167,45,1)
(15,71,1)
(133,4,1)
(39,105,1)
(83,145,1)
(46,19,1)
(4,40,1)
(63,36,1)
(113,119,1)
(138,29,1)
(10,138,1)
(129,0,1)
(97,61,1)
(131,79,1)
(165,32,1)
(56,45,1)
(87,2,1)
(78,64,1)
(19,17,1)
(124,93,1)
(129,95,1)
(125,11,1)
(6,56,1)
(77,87,1)
(18,2,1)
(93,121,1)
(95,114,1)
(144,128,1)
(32,51,1)
(115,48,1)
(23,159,1)
(1,23,1)
(35,108,1)
(22,162,1)
(38,47,1)
(0,95,1)
(136,44,1)
(167,100,1)
(111,71,1)
(62,163,1)
(149,115,1)
(128,108,1)
(44,50,1)
(122,130,1)
(20,103,1)
(47,20,1)
(55,90,1)
(114,96,1)
(155,27,1)
(50,14,1)
(58,125,1)
(1,43,1)
(69,26,1)
(151,38,1)
(90,71,1)
(156,108,1)
(153,97,1)
(59,16,1)
(164,52,1)
(106,58,1)
(103,164,1)
(99,7,1)
(19,44,1)
(1,78,1)
(48,141,1)
(121,6,1)
(67,100,1)
(119,166,1)
(24,151,1)
(51,129,1)
(79,132,1)
(117,161,1)
(98,1,1)
(107,64,1)
(68,123,1)
(159,45,1)
(167,22,1)
(121,60,1)
(150,111,1)
(65,99,1)
(11,112,1)
(128,12,1)
(160,50,1)
(63,157,1)
(108,167,1)
(7,153,1)
(64,156,1)
(5,84,1)
(52,90,1)
(118,87,1)
(44,124,1)
(91,135,1)
(27,60,1)
(167,162,1)
(103,133,1)
(92,5,1)
(121,45,1)
(90,75,1)
(80,19,1)
(128,100,1)
(41,118,1)
(56,60,1)
(102,35,1)
(166,65,1)
(67,80,1)
(96,24,1)
(156,30,1)
(161,131,1)
(45,149,1)
(60,127,1)
(1,109,1)
(37,159,1)
(40,164,1)
(123,83,1)
(17,71,1)
(25,100,1)
(70,45,1)
(149,71,1)
(86,150,1)
(104,69,1)
(5,113,1)
(80,79,1)
(105,73,1)
(163,144,1)
(17,136,1)
(127,160,1)
(61,165,1)
(43,146,1)
(82,59,1)
(9,39,1)
(17,50,1)
(130,5,1)
(71,68,1)
(1,55,1)
(162,9,1)
(142,117,1)
(154,102,1)
(36,67,1)
(12,107,1)
(30,88,1)
(93,56,1)
(141,86,1)
(16,146,1)
(92,122,1)
(157,10,1)
(56,98,1)
(75,15,1)
(159,89,1)
(88,154,1)
(89,70,1)
(1,77,1)
(145,91,1)
(80,46,1)
(26,155,1)
(154,108,1)
(2,104,1)
(135,41,1)
(146,92,1)
(100,125,1)
(92,71,1)
(1,62,1)
(132,25,1)
(44,71,1)
(71,87,2)
(35,159,2)
(45,150,2)
(27,62,2)
(150,111,2)
(92,71,2)
(128,100,2)
(142,79,2)
(61,90,2)
(167,159,2)
(55,90,2)
(86,150,2)
(96,90,2)
(7,90,2)
(47,90,2)
(6,56,2)
(154,108,2)
(89,150,2)
(135,87,2)
(60,79,2)
(56,79,2)
(40,90,2)
(124,79,2)
(113,90,2)
(129,90,2)
(130,90,2)
(52,90,2)
(87,62,2)
(111,71,2)
(104,79,2)
(128,64,2)
(17,50,2)
(5,113,2)
(30,154,2)
(128,108,2)
(5,84,2)
(92,90,2)
(19,79,2)
(2,104,2)
(17,44,2)
(149,150,2)
(26,62,2)
(100,125,2)
(145,87,2)
(92,5,2)
(62,64,2)
(67,100,2)
(162,159,2)
(2,62,2)
(29,36,2)
(104,62,2)
(92,122,2)
(131,79,2)
(17,71,2)
(64,156,2)
(156,108,2)
(159,45,2)
(90,71,2)
(129,95,2)
(153,90,2)
(59,146,2)
(157,36,2)
(159,150,2)
(103,164,2)
(71,68,2)
(44,79,2)
(121,60,2)
(109,150,2)
(149,71,2)
(69,79,2)
(36,67,2)
(23,159,2)
(122,90,2)
(87,79,2)
(167,162,2)
(123,87,2)
(44,50,2)
(45,149,2)
(78,64,2)
(44,71,2)
(150,146,2)
(161,79,2)
(0,90,2)
(121,45,2)
(18,62,2)
(160,79,2)
(20,90,2)
(165,90,2)
(111,146,2)
(166,90,2)
(43,146,2)
(46,19,2)
(27,79,2)
(64,154,2)
(117,79,2)
(22,159,2)
(82,146,2)
(88,154,2)
(99,90,2)
(167,100,2)
(2,79,2)
(127,79,2)
(115,150,2)
(24,90,2)
(1,79,2)
(108,167,2)
(163,64,2)
(14,79,2)
(95,90,2)
(167,45,2)
(97,90,2)
(50,79,2)
(10,36,2)
(16,146,2)
(146,92,2)
(77,87,2)
(102,159,2)
(151,90,2)
(138,36,2)
(41,87,2)
(2,26,2)
(37,159,2)
(15,87,2)
(83,87,2)
(154,159,2)
(4,90,2)
(155,62,2)
(51,90,2)
(12,64,2)
(103,90,2)
(90,87,2)
(68,87,2)
(98,79,2)
(70,150,2)
(146,90,2)
(65,90,2)
(9,159,2)
(91,87,2)
(118,87,2)
(39,159,2)
(141,150,2)
(69,62,2)
(107,64,2)
(155,79,2)
(93,79,2)
(73,159,2)
(119,90,2)
(164,90,2)
(99,7,2)
(56,60,2)
(121,56,2)
(38,90,2)
(136,44,2)
(108,159,2)
(48,150,2)
(64,159,2)
(26,79,2)
(133,90,2)
(18,79,2)
(114,90,2)
(56,45,2)
(103,133,2)
(5,90,2)
(75,87,2)
(32,90,2)
(105,159,2)
(87,2,2)
(144,64,2)
(156,154,2)
-----------------------------------
(0,s_addr)
(1,acceptSocket)
(2,WSAStartup(MAKEWORD(2,2)
(3,if (wsaDataInit)
(4,service)
(5,(struct sockaddr*)
(6,acceptSocket)
(7,htons(LISTEN_PORT)
(8,acceptSocket)
(9,1)
(10,1)
(11,"")
(12,recvResult)
(13,)
(14,INVALID_SOCKET)
(15,listenSocket)
(16,SOCKET_ERROR)
(17,closesocket(listenSocket)
(18,NO_ERROR)
(19,wsaDataInit)
(20,service)
(21,if (acceptSocket != INVALID_SOCKET)
(22,0)
(23,break;)
(24,service.sin_family = AF_INET)
(25,staticFive)
(26,MAKEWORD(2,2)
(27,2)
(28,dataBuffer)
(29,"Failure setting computer name")
(30,0)
(31,)
(32,service.sin_addr.s_addr = INADDR_ANY)
(33,)
(34,)
(35,recvResult)
(36,!SetComputerNameA(data)
(37,recvResult)
(38,service.sin_family)
(39,100)
(40,0)
(41,1)
(42,wsaData)
(43,break;)
(44,listenSocket != INVALID_SOCKET)
(45,acceptSocket = accept(listenSocket, NULL, NULL)
(46,WSACleanup()
(47,sin_family)
(48,NULL)
(49,)
(50,listenSocket = INVALID_SOCKET)
(51,INADDR_ANY)
(52,service)
(53,)
(54,recvResult)
(55,break;)
(56,acceptSocket != INVALID_SOCKET)
(57,if (acceptSocket == INVALID_SOCKET)
(58,data)
(59,listenSocket)
(60,acceptSocket = INVALID_SOCKET)
(61,sin_port)
(62,0)
(63,RET)
(64,recvResult == SOCKET_ERROR || recvResult == 0)
(65,SOCKET_ERROR)
(66,)
(67,SetComputerNameA(data)
(68,socket(PF_INET, SOCK_STREAM, 0)
(69,wsaData)
(70,acceptSocket)
(71,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(72,)
(73,acceptSocket)
(74,if(staticFive==5)
(75,INVALID_SOCKET)
(76,)
(77,break;)
(78,break;)
(79,staticFive==5)
(80,data)
(81,listenSocket)
(82,LISTEN_BACKLOG)
(83,SOCK_STREAM)
(84,struct sockaddr*)
(85,if (!SetComputerNameA(data)
(86,acceptSocket)
(87,WSAStartup(MAKEWORD(2,2)
(88,recvResult)
(89,INVALID_SOCKET)
(90,listenSocket == INVALID_SOCKET)
(91,listenSocket)
(92,bind(listenSocket, (struct sockaddr*)
(93,listenSocket)
(94,)
(95,service.sin_addr)
(96,service)
(97,service.sin_port)
(98,INVALID_SOCKET)
(99,service.sin_port = htons(LISTEN_PORT)
(100,data = dataBuffer)
(101,data)
(102,SOCKET_ERROR)
(103,memset(&service, 0, sizeof(service)
(104,&wsaData)
(105,data)
(106,dataBuffer)
(107,data)
(108,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(109,break;)
(110,service)
(111,listen(listenSocket, LISTEN_BACKLOG)
(112,dataBuffer)
(113,&service)
(114,sin_addr)
(115,NULL)
(116,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(117,wsaDataInit = FALSE)
(118,wsaDataInit)
(119,service)
(120,if (listenSocket == INVALID_SOCKET)
(121,closesocket(acceptSocket)
(122,sizeof(service)
(123,0)
(124,INVALID_SOCKET)
(125,dataBuffer[100] = "")
(126,wsaDataInit)
(127,INVALID_SOCKET)
(128,data[recvResult])
(129,service.sin_addr.s_addr)
(130,service)
(131,wsaDataInit)
(132,5)
(133,sizeof(service)
(134,if (listenSocket != INVALID_SOCKET)
(135,wsaDataInit = 1)
(136,listenSocket)
(137,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(138,printLine("Failure setting computer name")
(139,do)
(140,if (recvResult == SOCKET_ERROR || recvResult == 0)
(141,listenSocket)
(142,listenSocket)
(143,)
(144,\\\'\\\\0\\\')
(145,PF_INET)
(146,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(147,)
(148,if (WSAStartup(MAKEWORD(2,2)
(149,accept(listenSocket, NULL, NULL)
(150,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(151,AF_INET)
(152,)
(153,LISTEN_PORT)
(154,recvResult == SOCKET_ERROR)
(155,2)
(156,recvResult == 0)
(157,exit(1)
(158,)
(159,acceptSocket == INVALID_SOCKET)
(160,acceptSocket)
(161,FALSE)
(162,100 - 1)
(163,data[recvResult] = \\\'\\\\0\\\')
(164,&service)
(165,service)
(166,listenSocket)
(167,recv(acceptSocket, data, 100 - 1, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
