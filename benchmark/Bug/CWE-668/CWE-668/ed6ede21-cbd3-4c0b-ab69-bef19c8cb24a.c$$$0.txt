-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_66_bad()
{
    char * data;
    char * dataArray[5];
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        WSADATA wsaData;
        BOOL wsaDataInit = FALSE;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        struct sockaddr_in service;
        int recvResult;
        do
        {
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
            listenSocket = socket(PF_INET, SOCK_STREAM, 0);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(LISTEN_PORT);
            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
            {
                break;
            }
            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == INVALID_SOCKET)
            {
                break;
            }
            /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
            /* FLAW: read the new hostname from a network socket */
            recvResult = recv(acceptSocket, data, 100 - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            data[recvResult] = '\0';
        }
        while (0);
        if (acceptSocket != INVALID_SOCKET)
        {
            closesocket(acceptSocket);
        }
        if (listenSocket != INVALID_SOCKET)
        {
            closesocket(listenSocket);
        }
        if (wsaDataInit)
        {
            WSACleanup();
        }
    }
    /* put data in array */
    dataArray[2] = data;
    CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
78,79
80,81
80,82
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
81,91
81,92
81,93
81,94
81,95
81,96
82,83
82,84
83,84
83,85
84,85
84,86
84,87
85,86
87,88
87,89
87,90
88,89
92,93
93,94
95,96
97,98
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
108,110
108,111
108,112
109,110
111,112
113,114
116,117
116,118
117,118
117,119
118,119
120,121
122,123
124,125
125,126
125,127
125,128
125,129
126,127
128,129
129,130
132,133
133,134
134,135
136,137
137,138
137,139
138,139
138,140
139,140
142,143
144,145
145,146
145,147
146,147
146,148
147,148
147,149
148,149
152,153
154,155
155,156
155,157
156,157
156,158
157,158
160,161
160,162
161,162
163,164
165,166
165,167
166,167
166,168
167,168
169,170
169,171
169,172
169,173
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
181,182
183,184
184,185
185,186
187,188
189,190
189,191
190,191
190,192
191,192
193,194
193,195
193,196
194,195
196,197
198,199
200,201
202,203
203,204
203,205
204,205
206,207
206,208
206,209
206,210
207,208
209,210
211,212
213,214
215,216
215,217
216,217
216,218
217,218
219,220
221,222
223,224
224,225
224,226
225,226
227,228
227,229
227,230
227,231
227,232
228,229
230,231
232,233
234,235
234,236
238,239
238,240
239,240
239,241
240,241
240,242
241,242
243,244
245,246
245,247
246,247
249,250
251,252
252,253
252,254
253,254
253,255
254,255
256,257
260,261
260,262
261,262
261,263
262,263
264,265
266,267
267,268
268,269
268,270
269,270
271,272
273,274
273,275
274,275
274,276
275,276
277,278
279,280
280,281
281,282
281,283
282,283
284,285
286,287
286,288
287,288
289,290
290,291
291,292
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
302,303
303,304
303,305
304,305
306,307
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,28,32,34,39,41,45,47,50,54,56,59,63,65,68,72,74,77,79,86,89,90,91,94,96,98,102,103,107,110,112,114,115,119,121,123,127,130,131,135,140,141,143,149,150,151,153,158,159,162,164,168,171,173,177,179,182,186,188,192,195,197,199,201,205,208,210,212,214,218,220,222,226,229,231,233,235,236,237,242,244,247,248,250,255,257,258,259,263,265,270,272,276,278,283,285,288,293,298,299,301,305,307
-----computeFrom-----
30,31
30,32
83,84
83,85
100,101
100,102
105,106
105,107
117,118
117,119
137,138
137,139
145,146
145,147
155,156
155,157
166,167
166,168
190,191
190,192
203,204
203,205
216,217
216,218
224,225
224,226
234,235
234,236
239,240
239,241
240,241
240,242
245,246
245,247
252,253
252,254
261,262
261,263
274,275
274,276
295,296
295,297
-----guardedBy-----
263,272
276,285
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_66_bad(){    char * data;    char * dataArray[5];    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    /* put data in array */    dataArray[2] = data;    CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray);}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66_bad
{    char * data;    char * dataArray[5];    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    /* put data in array */    dataArray[2] = data;    CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray);}
char * data;
char * data;
char
* data
*
data
char * dataArray[5];
char * dataArray[5];
char
* dataArray[5]
*
dataArray
[5]
5
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);
{            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                break;            }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                break;            }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)            {                break;            }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(acceptSocket);        }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(listenSocket);        }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)        {            WSACleanup();        }
wsaDataInit
wsaDataInit
{            WSACleanup();        }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray);
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray)
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink
CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink
dataArray
dataArray
-----joern-----
(47,67,0)
(17,53,0)
(40,104,0)
(58,100,0)
(107,141,0)
(1,96,0)
(89,100,0)
(110,52,0)
(48,37,0)
(80,110,0)
(110,140,0)
(50,76,0)
(52,152,0)
(34,35,0)
(134,152,0)
(70,152,0)
(145,134,0)
(137,17,0)
(24,77,0)
(85,143,0)
(157,42,0)
(83,137,0)
(105,92,0)
(116,2,0)
(124,143,0)
(100,117,0)
(5,152,0)
(68,10,0)
(26,125,0)
(121,5,0)
(151,86,0)
(76,125,0)
(54,152,0)
(23,58,0)
(103,143,0)
(51,143,0)
(8,11,0)
(107,37,0)
(62,68,0)
(132,113,0)
(99,96,0)
(32,140,0)
(47,152,0)
(36,62,0)
(18,14,0)
(46,126,0)
(148,138,0)
(92,2,0)
(154,67,0)
(2,152,0)
(3,30,0)
(61,117,0)
(20,61,0)
(14,61,0)
(77,143,0)
(29,58,0)
(15,2,0)
(37,152,0)
(28,64,0)
(21,71,0)
(48,100,0)
(81,146,0)
(66,30,0)
(112,152,0)
(31,75,0)
(58,56,0)
(35,138,0)
(146,48,0)
(64,37,0)
(144,138,0)
(161,147,0)
(125,76,0)
(86,2,0)
(53,17,0)
(102,100,0)
(140,110,0)
(133,37,0)
(38,76,0)
(149,47,0)
(65,74,0)
(120,121,0)
(94,92,0)
(35,2,0)
(128,107,0)
(74,22,0)
(48,146,0)
(4,45,0)
(7,143,0)
(9,125,0)
(159,11,0)
(129,15,0)
(43,155,0)
(73,147,0)
(58,52,0)
(108,14,0)
(48,52,0)
(86,37,0)
(147,2,0)
(13,62,0)
(156,143,0)
(59,152,0)
(87,47,0)
(79,48,0)
(98,117,0)
(67,47,0)
(16,117,0)
(138,143,0)
(96,37,0)
(91,110,0)
(76,2,0)
(136,52,0)
(93,113,0)
(32,52,0)
(27,143,0)
(2,147,0)
(139,152,0)
(90,143,0)
(72,64,0)
(107,11,0)
(118,143,0)
(125,26,0)
(10,152,0)
(114,153,0)
(109,53,0)
(44,98,0)
(17,137,0)
(113,132,0)
(132,2,0)
(131,86,0)
(119,74,0)
(60,117,0)
(88,48,0)
(56,152,0)
(30,17,0)
(15,138,0)
(0,132,0)
(61,100,0)
(19,134,0)
(160,127,0)
(47,87,0)
(100,98,0)
(78,15,0)
(6,50,0)
(115,143,0)
(84,117,0)
(39,48,0)
(42,76,0)
(111,32,0)
(76,50,0)
(37,86,0)
(140,32,0)
(68,62,0)
(158,68,0)
(135,49,0)
(142,77,0)
(55,10,0)
(126,117,0)
(12,147,0)
(22,152,0)
(25,86,0)
(22,75,0)
(63,121,0)
(69,152,0)
(64,11,0)
(35,101,0)
(11,143,0)
(122,87,0)
(123,26,0)
(17,30,0)
(150,146,0)
(125,9,0)
(76,42,0)
(97,5,0)
(143,117,0)
(57,98,0)
(41,132,0)
(52,48,0)
(33,32,0)
(82,56,0)
(75,22,0)
(68,62,1)
(92,105,1)
(47,67,1)
(64,11,1)
(150,81,1)
(13,36,1)
(109,30,1)
(131,133,1)
(144,148,1)
(15,129,1)
(72,21,1)
(114,106,1)
(3,11,1)
(76,50,1)
(107,11,1)
(34,15,1)
(48,100,1)
(133,113,1)
(76,2,1)
(160,42,1)
(48,37,1)
(25,151,1)
(98,57,1)
(113,132,1)
(116,134,1)
(91,80,1)
(64,37,1)
(56,82,1)
(48,146,1)
(161,73,1)
(158,62,1)
(50,6,1)
(72,135,1)
(83,17,1)
(132,0,1)
(8,159,1)
(108,114,1)
(81,88,1)
(145,137,1)
(18,108,1)
(89,102,1)
(58,52,1)
(21,137,1)
(46,61,1)
(29,140,1)
(135,96,1)
(26,123,1)
(2,147,1)
(52,48,1)
(77,142,1)
(106,35,1)
(48,39,1)
(39,146,1)
(88,79,1)
(80,52,1)
(151,131,1)
(67,154,1)
(31,74,1)
(86,25,1)
(23,29,1)
(1,37,1)
(94,2,1)
(53,109,1)
(107,37,1)
(17,53,1)
(64,28,1)
(105,94,1)
(120,47,1)
(148,77,1)
(4,140,1)
(12,161,1)
(140,32,1)
(86,2,1)
(137,17,1)
(3,130,1)
(97,121,1)
(47,87,1)
(24,100,1)
(125,9,1)
(19,145,1)
(100,98,1)
(106,15,1)
(142,24,1)
(130,56,1)
(147,12,1)
(96,37,1)
(95,126,1)
(41,93,1)
(0,41,1)
(5,97,1)
(38,157,1)
(154,92,1)
(75,31,1)
(126,46,1)
(37,86,1)
(79,136,1)
(72,43,1)
(20,14,1)
(14,18,1)
(28,72,1)
(134,19,1)
(6,125,1)
(40,113,1)
(87,122,1)
(11,8,1)
(128,64,1)
(102,98,1)
(110,91,1)
(122,149,1)
(62,13,1)
(72,130,1)
(33,111,1)
(108,106,1)
(136,96,1)
(125,26,1)
(159,138,1)
(63,120,1)
(35,138,1)
(68,158,1)
(58,23,1)
(10,55,1)
(15,138,1)
(137,83,1)
(74,65,1)
(99,1,1)
(140,110,1)
(110,52,1)
(72,40,1)
(92,2,1)
(96,99,1)
(61,100,1)
(146,150,1)
(157,22,1)
(57,44,1)
(43,92,1)
(78,64,1)
(32,52,1)
(73,116,1)
(65,119,1)
(66,3,1)
(30,66,1)
(111,110,1)
(132,2,1)
(76,125,1)
(55,68,1)
(36,5,1)
(35,34,1)
(149,67,1)
(22,75,1)
(35,2,1)
(129,78,1)
(17,30,1)
(58,100,1)
(78,107,1)
(72,160,1)
(138,144,1)
(100,89,1)
(15,2,1)
(82,58,1)
(32,33,1)
(119,10,1)
(123,38,1)
(42,76,1)
(121,63,1)
(93,42,1)
(61,20,1)
(72,4,1)
(107,128,1)
(113,42,2)
(119,92,2)
(80,96,2)
(140,32,2)
(125,26,2)
(39,96,2)
(147,137,2)
(43,92,2)
(50,92,2)
(76,92,2)
(48,96,2)
(21,137,2)
(96,37,2)
(140,110,2)
(161,137,2)
(134,137,2)
(136,96,2)
(120,92,2)
(38,92,2)
(122,92,2)
(17,53,2)
(110,96,2)
(74,92,2)
(48,146,2)
(128,64,2)
(48,100,2)
(52,48,2)
(133,113,2)
(42,76,2)
(157,92,2)
(47,92,2)
(82,140,2)
(94,137,2)
(131,113,2)
(58,52,2)
(145,137,2)
(40,113,2)
(125,92,2)
(19,137,2)
(15,138,2)
(5,92,2)
(6,92,2)
(2,147,2)
(107,11,2)
(65,92,2)
(13,92,2)
(130,140,2)
(62,92,2)
(81,96,2)
(53,130,2)
(132,42,2)
(52,96,2)
(17,130,2)
(83,130,2)
(91,96,2)
(31,92,2)
(2,137,2)
(76,50,2)
(97,92,2)
(47,67,2)
(29,140,2)
(150,96,2)
(121,92,2)
(42,92,2)
(99,113,2)
(30,130,2)
(25,113,2)
(47,87,2)
(114,106,2)
(10,92,2)
(86,2,2)
(12,137,2)
(34,15,2)
(140,96,2)
(4,140,2)
(110,52,2)
(92,137,2)
(37,113,2)
(149,92,2)
(87,92,2)
(37,86,2)
(58,100,2)
(17,30,2)
(137,17,2)
(76,125,2)
(35,2,2)
(68,92,2)
(32,110,2)
(160,42,2)
(41,42,2)
(26,92,2)
(96,113,2)
(111,110,2)
(137,130,2)
(48,37,2)
(68,62,2)
(154,92,2)
(3,130,2)
(79,96,2)
(113,132,2)
(63,92,2)
(35,15,2)
(107,37,2)
(105,137,2)
(33,110,2)
(35,138,2)
(1,113,2)
(109,130,2)
(36,92,2)
(88,96,2)
(132,2,2)
(56,140,2)
(107,64,2)
(73,137,2)
(158,92,2)
(22,75,2)
(32,52,2)
(23,140,2)
(146,96,2)
(116,137,2)
(92,2,2)
(64,11,2)
(100,98,2)
(76,2,2)
(123,92,2)
(93,42,2)
(58,140,2)
(64,37,2)
(67,92,2)
(66,130,2)
(0,42,2)
(22,92,2)
(75,92,2)
(135,96,2)
(86,113,2)
(125,9,2)
(55,92,2)
(15,2,2)
(61,100,2)
(151,113,2)
-----------------------------------
(0,LISTEN_BACKLOG)
(1,acceptSocket)
(2,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(3,2)
(4,break;)
(5,service.sin_family = AF_INET)
(6,service)
(7,listenSocket)
(8,INVALID_SOCKET)
(9,struct sockaddr*)
(10,service.sin_addr.s_addr = INADDR_ANY)
(11,acceptSocket = INVALID_SOCKET)
(12,0)
(13,sin_addr)
(14,dataArray[2])
(15,listenSocket != INVALID_SOCKET)
(16,data)
(17,WSAStartup(MAKEWORD(2,2)
(18,2)
(19,1)
(20,data)
(21,break;)
(22,service.sin_port = htons(LISTEN_PORT)
(23,recvResult)
(24,wsaDataInit)
(25,NULL)
(26,&service)
(27,wsaDataInit)
(28,INVALID_SOCKET)
(29,data)
(30,MAKEWORD(2,2)
(31,LISTEN_PORT)
(32,recvResult == 0)
(33,0)
(34,listenSocket)
(35,closesocket(listenSocket)
(36,service)
(37,acceptSocket = accept(listenSocket, NULL, NULL)
(38,listenSocket)
(39,0)
(40,break;)
(41,listenSocket)
(42,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(43,break;)
(44,dataBuffer)
(45,)
(46,dataArray)
(47,memset(&service, 0, sizeof(service)
(48,recv(acceptSocket, data, 100 - 1, 0)
(49,)
(50,sizeof(service)
(51,if (listenSocket != INVALID_SOCKET)
(52,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(53,&wsaData)
(54,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(55,INADDR_ANY)
(56,data[recvResult] = \\\'\\\\0\\\')
(57,"")
(58,data[recvResult])
(59,if (listenSocket == INVALID_SOCKET)
(60,dataArray)
(61,dataArray[2] = data)
(62,service.sin_addr)
(63,sin_family)
(64,acceptSocket != INVALID_SOCKET)
(65,sin_port)
(66,2)
(67,&service)
(68,service.sin_addr.s_addr)
(69,if (acceptSocket == INVALID_SOCKET)
(70,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(71,)
(72,acceptSocket)
(73,PF_INET)
(74,service.sin_port)
(75,htons(LISTEN_PORT)
(76,bind(listenSocket, (struct sockaddr*)
(77,wsaDataInit = FALSE)
(78,listenSocket)
(79,acceptSocket)
(80,recvResult)
(81,100)
(82,\\\'\\\\0\\\')
(83,NO_ERROR)
(84,dataBuffer)
(85,acceptSocket)
(86,accept(listenSocket, NULL, NULL)
(87,sizeof(service)
(88,data)
(89,dataBuffer)
(90,do)
(91,SOCKET_ERROR)
(92,listenSocket == INVALID_SOCKET)
(93,SOCKET_ERROR)
(94,listenSocket)
(95,RET)
(96,acceptSocket == INVALID_SOCKET)
(97,AF_INET)
(98,dataBuffer[100] = "")
(99,INVALID_SOCKET)
(100,data = dataBuffer)
(101,)
(102,data)
(103,recvResult)
(104,)
(105,INVALID_SOCKET)
(106,wsaDataInit)
(107,closesocket(acceptSocket)
(108,dataArray)
(109,wsaData)
(110,recvResult == SOCKET_ERROR)
(111,recvResult)
(112,if (recvResult == SOCKET_ERROR || recvResult == 0)
(113,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(114,WSACleanup()
(115,if (wsaDataInit)
(116,listenSocket)
(117,)
(118,wsaData)
(119,service)
(120,service)
(121,service.sin_family)
(122,service)
(123,service)
(124,service)
(125,(struct sockaddr*)
(126,CWE15_External_Control_of_System_or_Configuration_Setting__w32_66b_badSink(dataArray)
(127,)
(128,acceptSocket)
(129,INVALID_SOCKET)
(130,0)
(131,listenSocket)
(132,listen(listenSocket, LISTEN_BACKLOG)
(133,acceptSocket)
(134,wsaDataInit = 1)
(135,break;)
(136,recvResult)
(137,WSAStartup(MAKEWORD(2,2)
(138,listenSocket = INVALID_SOCKET)
(139,if (WSAStartup(MAKEWORD(2,2)
(140,recvResult == SOCKET_ERROR || recvResult == 0)
(141,)
(142,FALSE)
(143,)
(144,INVALID_SOCKET)
(145,wsaDataInit)
(146,100 - 1)
(147,socket(PF_INET, SOCK_STREAM, 0)
(148,listenSocket)
(149,0)
(150,1)
(151,NULL)
(152,)
(153,)
(154,service)
(155,)
(156,if (acceptSocket != INVALID_SOCKET)
(157,SOCKET_ERROR)
(158,s_addr)
(159,acceptSocket)
(160,break;)
(161,SOCK_STREAM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
