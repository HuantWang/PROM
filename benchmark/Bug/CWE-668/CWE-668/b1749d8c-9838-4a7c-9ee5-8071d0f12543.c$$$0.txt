-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_66_bad()
{
    char * data;
    char * dataArray[5];
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    /* put data in array */
    dataArray[2] = data;
    CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
56,57
56,58
56,59
57,58
57,59
58,59
58,60
58,61
58,62
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
71,72
71,73
73,74
75,76
77,78
79,80
79,81
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
96,98
97,98
99,100
99,101
100,101
104,105
105,106
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
131,133
132,133
135,136
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,28,32,34,39,41,45,47,51,53,54,60,63,65,68,69,72,74,76,78,83,86,88,93,94,98,101,102,103,109,112,113,114,119,120,125,127,128,133,134,136,140,142
-----computeFrom-----
30,31
30,32
49,50
49,51
50,51
50,52
57,58
57,59
61,62
61,63
71,72
71,73
81,82
81,83
90,91
90,92
91,92
91,93
95,96
95,97
99,100
99,101
106,107
106,108
110,111
110,112
122,123
122,124
130,131
130,132
-----guardedBy-----
53,127
63,109
74,112
98,109
101,112
-----guardedByNegation-----
63,125
74,127
-----lastLexicalUse-----
63,125
74,127
-----jump-----
63,125
74,127
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_66_bad(){    char * data;    char * dataArray[5];    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_66_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_66_bad
{    char * data;    char * dataArray[5];    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray);}
char * data;
char * data;
char
* data
*
data
char * dataArray[5];
char * dataArray[5];
char
* dataArray[5]
*
dataArray
[5]
5
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray);
CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray)
CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink
dataArray
dataArray
-----joern-----
(11,1,0)
(20,3,0)
(71,16,0)
(11,10,0)
(3,58,0)
(58,3,0)
(8,21,0)
(14,25,0)
(58,52,0)
(29,13,0)
(61,35,0)
(52,39,0)
(47,8,0)
(66,51,0)
(53,22,0)
(25,12,0)
(57,25,0)
(28,17,0)
(3,20,0)
(67,2,0)
(52,25,0)
(33,5,0)
(45,8,0)
(40,0,0)
(5,72,0)
(3,7,0)
(73,5,0)
(58,5,0)
(19,11,0)
(32,17,0)
(31,15,0)
(69,43,0)
(46,20,0)
(56,22,0)
(50,67,0)
(18,12,0)
(8,52,0)
(17,0,0)
(62,21,0)
(15,23,0)
(22,73,0)
(38,7,0)
(7,3,0)
(20,46,0)
(8,5,0)
(17,32,0)
(54,28,0)
(21,16,0)
(60,28,0)
(76,5,0)
(63,39,0)
(39,52,0)
(10,13,0)
(24,32,0)
(72,12,0)
(42,12,0)
(67,52,0)
(60,5,0)
(4,52,0)
(13,10,0)
(1,51,0)
(28,60,0)
(30,1,0)
(37,72,0)
(35,52,0)
(73,12,0)
(51,17,0)
(27,58,0)
(70,72,0)
(36,12,0)
(26,13,0)
(1,11,0)
(60,15,0)
(59,36,0)
(41,60,0)
(2,67,0)
(6,35,0)
(51,1,0)
(20,35,0)
(75,71,0)
(74,17,0)
(48,28,0)
(10,11,0)
(1,5,0)
(65,12,0)
(32,5,0)
(35,20,0)
(55,51,0)
(39,5,0)
(5,12,0)
(64,73,0)
(44,3,0)
(13,17,0)
(49,2,0)
(9,58,0)
(34,67,0)
(39,5,1)
(20,35,1)
(6,58,1)
(11,19,1)
(28,17,1)
(24,74,1)
(34,50,1)
(51,17,1)
(55,30,1)
(66,55,1)
(73,64,1)
(11,1,1)
(22,56,1)
(10,11,1)
(53,15,1)
(56,53,1)
(67,34,1)
(7,3,1)
(41,10,1)
(13,29,1)
(33,76,1)
(13,17,1)
(32,5,1)
(5,72,1)
(5,33,1)
(17,32,1)
(76,72,1)
(63,4,1)
(21,62,1)
(35,52,1)
(49,67,1)
(28,54,1)
(54,48,1)
(39,63,1)
(53,10,1)
(3,20,1)
(62,8,1)
(8,52,1)
(4,5,1)
(9,2,1)
(26,17,1)
(32,24,1)
(1,5,1)
(35,61,1)
(19,1,1)
(45,71,1)
(53,2,1)
(75,7,1)
(3,58,1)
(53,21,1)
(10,13,1)
(60,5,1)
(74,7,1)
(47,45,1)
(2,49,1)
(36,59,1)
(15,31,1)
(68,36,1)
(59,73,1)
(73,5,1)
(31,60,1)
(38,3,1)
(2,67,1)
(50,52,1)
(52,39,1)
(27,9,1)
(7,38,1)
(58,27,1)
(8,5,1)
(44,20,1)
(67,52,1)
(60,28,1)
(58,5,1)
(71,75,1)
(3,44,1)
(61,6,1)
(72,70,1)
(8,47,1)
(48,41,1)
(51,66,1)
(64,22,1)
(20,46,1)
(1,51,1)
(29,26,1)
(58,52,1)
(30,13,1)
(70,37,1)
(8,5,2)
(48,10,2)
(32,5,2)
(30,13,2)
(47,7,2)
(10,11,2)
(55,13,2)
(6,2,2)
(58,5,2)
(73,5,2)
(29,7,2)
(5,72,2)
(10,7,2)
(51,13,2)
(52,39,2)
(13,7,2)
(67,52,2)
(20,46,2)
(11,13,2)
(2,67,2)
(15,10,2)
(1,13,2)
(61,2,2)
(32,7,2)
(8,7,2)
(26,7,2)
(66,13,2)
(17,32,2)
(27,2,2)
(60,10,2)
(71,7,2)
(19,13,2)
(7,2,2)
(51,17,2)
(60,28,2)
(7,3,2)
(8,52,2)
(41,10,2)
(3,58,2)
(54,10,2)
(35,52,2)
(58,2,2)
(35,2,2)
(60,5,2)
(31,10,2)
(39,5,2)
(11,1,2)
(3,2,2)
(74,7,2)
(10,13,2)
(58,52,2)
(3,20,2)
(28,17,2)
(38,2,2)
(75,7,2)
(21,7,2)
(44,2,2)
(20,2,2)
(20,35,2)
(9,2,2)
(1,51,2)
(1,5,2)
(24,7,2)
(62,7,2)
(17,7,2)
(28,10,2)
(13,17,2)
(45,7,2)
-----------------------------------
(0,)
(1,data[dataLen-1])
(2,250-dataLen > 1)
(3,fgets(data+dataLen, (int)
(4,dataLen)
(5,data = dataBuffer)
(6,250)
(7,fgets(data+dataLen, (int)
(8,data[dataLen])
(9,data)
(10,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(11,data[dataLen-1] == \\\'\\\\n\\\')
(12,)
(13,dataLen > 0)
(14,if (250-dataLen > 1)
(15,data[dataLen-1] = \\\'\\\\0\\\')
(16,)
(17,dataLen = strlen(data)
(18,dataBuffer)
(19,\\\'\\\\n\\\')
(20,(int)
(21,data[dataLen] = \\\'\\\\0\\\')
(22,dataArray[2])
(23,)
(24,data)
(25,)
(26,dataLen)
(27,dataLen)
(28,dataLen-1)
(29,0)
(30,data)
(31,\\\'\\\\0\\\')
(32,strlen(data)
(33,dataBuffer)
(34,dataLen)
(35,250-dataLen)
(36,CWE427_Uncontrolled_Search_Path_Element__char_console_66b_badSink(dataArray)
(37,dataBuffer)
(38,NULL)
(39,strlen(data)
(40,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(41,data)
(42,data)
(43,)
(44,stdin)
(45,data)
(46,int)
(47,dataLen)
(48,dataLen)
(49,1)
(50,250)
(51,dataLen-1)
(52,dataLen = strlen(data)
(53,dataArray)
(54,1)
(55,dataLen)
(56,2)
(57,dataLen)
(58,data+dataLen)
(59,dataArray)
(60,data[dataLen-1])
(61,dataLen)
(62,\\\'\\\\0\\\')
(63,data)
(64,data)
(65,dataArray)
(66,1)
(67,250-dataLen)
(68,RET)
(69,if (fgets(data+dataLen, (int)
(70,"PATH=")
(71,printLine("fgets()
(72,dataBuffer[250] = "PATH=")
(73,dataArray[2] = data)
(74,dataLen)
(75,"fgets()
(76,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
