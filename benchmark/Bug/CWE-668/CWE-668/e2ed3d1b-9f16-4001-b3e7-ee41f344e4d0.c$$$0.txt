-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
51,52
51,53
51,54
54,55
56,57
57,58
57,59
59,60
59,61
59,62
62,63
64,65
65,66
65,67
66,67
66,68
67,68
71,72
71,73
72,73
72,74
73,74
73,75
73,76
73,77
74,75
76,77
79,80
81,82
83,84
83,85
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
110,111
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
121,123
121,124
122,123
122,124
123,124
123,125
123,126
123,127
123,128
123,129
123,130
124,125
126,127
128,129
130,131
132,133
134,135
136,137
137,138
140,141
140,142
141,142
142,143
142,144
143,144
146,147
147,148
147,149
148,149
150,151
152,153
153,154
154,155
154,156
155,156
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,41,45,47,50,52,53,55,58,60,61,63,68,69,70,75,77,78,80,82,87,88,93,94,95,99,102,104,108,109,115,118,119,120,125,127,129,131,133,135,138,139,144,145,149,151,156,157
-----computeFrom-----
7,8
7,9
28,29
28,30
65,66
65,67
72,73
72,74
90,91
90,92
97,98
97,99
106,107
106,108
112,113
112,114
116,117
116,118
122,123
122,124
-----guardedBy-----
77,93
108,118
138,151
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_06_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_alloca_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
if(STATIC_CONST_FIVE==5)    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(4,75,0)
(42,8,0)
(31,5,0)
(72,67,0)
(50,4,0)
(61,58,0)
(14,27,0)
(44,67,0)
(10,35,0)
(58,67,0)
(25,26,0)
(41,68,0)
(17,67,0)
(36,65,0)
(37,19,0)
(53,37,0)
(59,10,0)
(49,5,0)
(40,38,0)
(21,63,0)
(77,60,0)
(47,38,0)
(38,52,0)
(46,4,0)
(7,38,0)
(76,36,0)
(45,75,0)
(6,57,0)
(20,2,0)
(15,38,0)
(73,69,0)
(74,4,0)
(66,51,0)
(38,58,0)
(38,75,0)
(32,45,0)
(71,76,0)
(57,75,0)
(51,13,0)
(56,36,0)
(8,19,0)
(30,58,0)
(79,60,0)
(38,47,0)
(38,60,0)
(12,67,0)
(23,69,0)
(39,67,0)
(4,83,0)
(80,76,0)
(9,27,0)
(85,67,0)
(76,72,0)
(10,75,0)
(5,31,0)
(54,18,0)
(70,18,0)
(64,67,0)
(65,29,0)
(5,24,0)
(75,45,0)
(78,75,0)
(16,47,0)
(3,31,0)
(75,67,0)
(0,35,0)
(52,38,0)
(11,67,0)
(22,83,0)
(57,72,0)
(24,5,0)
(84,10,0)
(45,32,0)
(34,38,0)
(1,67,0)
(83,4,0)
(67,48,0)
(68,63,0)
(36,76,0)
(45,24,0)
(62,72,0)
(18,75,0)
(82,65,0)
(35,67,0)
(72,57,0)
(24,45,0)
(55,2,0)
(27,67,0)
(18,68,0)
(28,38,0)
(81,52,0)
(2,72,0)
(36,75,0)
(43,21,0)
(60,67,0)
(62,68,1)
(38,47,1)
(59,84,1)
(71,80,1)
(35,0,1)
(34,40,1)
(31,3,1)
(65,82,1)
(24,5,1)
(75,45,1)
(33,69,1)
(68,41,1)
(38,60,1)
(60,77,1)
(2,72,1)
(4,50,1)
(52,38,1)
(8,42,1)
(77,79,1)
(42,37,1)
(22,4,1)
(37,53,1)
(54,21,1)
(82,36,1)
(76,71,1)
(2,55,1)
(76,72,1)
(40,7,1)
(33,51,1)
(69,23,1)
(3,49,1)
(50,46,1)
(52,81,1)
(6,62,1)
(81,38,1)
(61,30,1)
(72,57,1)
(7,28,1)
(70,54,1)
(56,2,1)
(49,78,1)
(57,75,1)
(45,24,1)
(20,72,1)
(83,22,1)
(55,20,1)
(51,66,1)
(46,74,1)
(15,2,1)
(28,15,1)
(45,32,1)
(33,8,1)
(10,59,1)
(36,75,1)
(36,76,1)
(18,70,1)
(5,31,1)
(30,27,1)
(10,75,1)
(16,34,1)
(43,83,1)
(58,61,1)
(53,52,1)
(78,69,1)
(15,65,1)
(83,4,1)
(62,83,1)
(41,18,1)
(80,56,1)
(0,10,1)
(57,6,1)
(84,60,1)
(74,35,1)
(47,16,1)
(23,73,1)
(4,75,1)
(9,75,1)
(18,75,1)
(66,52,1)
(79,58,1)
(27,14,1)
(21,43,1)
(14,9,1)
(38,58,1)
(38,75,1)
(15,69,2)
(78,69,2)
(58,69,2)
(72,57,2)
(74,69,2)
(41,83,2)
(8,52,2)
(22,69,2)
(60,69,2)
(4,75,2)
(72,69,2)
(38,58,2)
(42,52,2)
(31,69,2)
(3,69,2)
(57,75,2)
(46,69,2)
(24,5,2)
(18,75,2)
(65,2,2)
(40,69,2)
(59,69,2)
(83,4,2)
(0,69,2)
(56,2,2)
(50,69,2)
(45,32,2)
(28,69,2)
(38,69,2)
(45,69,2)
(10,69,2)
(43,83,2)
(76,72,2)
(34,69,2)
(62,69,2)
(36,75,2)
(37,52,2)
(2,69,2)
(27,69,2)
(49,69,2)
(52,38,2)
(21,83,2)
(38,47,2)
(76,2,2)
(47,69,2)
(4,69,2)
(14,69,2)
(61,69,2)
(6,69,2)
(38,60,2)
(53,52,2)
(9,69,2)
(2,72,2)
(36,2,2)
(81,69,2)
(54,83,2)
(75,69,2)
(10,75,2)
(51,52,2)
(55,69,2)
(5,69,2)
(45,24,2)
(7,69,2)
(18,83,2)
(57,69,2)
(68,83,2)
(77,69,2)
(52,69,2)
(80,2,2)
(71,2,2)
(30,69,2)
(84,69,2)
(20,69,2)
(83,69,2)
(5,31,2)
(36,76,2)
(35,69,2)
(66,52,2)
(75,45,2)
(38,75,2)
(24,69,2)
(82,2,2)
(70,83,2)
(16,69,2)
(79,69,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,if (passwordLen > 0)
(2,passwordLen > 0)
(3,char)
(4,fgets(password, 100, stdin)
(5,100*sizeof(char)
(6,password)
(7,password)
(8,CloseHandle(hUser)
(9,passwordLen)
(10,password[0])
(11,passwordLen)
(12,if (fgets(password, 100, stdin)
(13,)
(14,0)
(15,username)
(16,hUser)
(17,username)
(18,password[0])
(19,)
(20,passwordLen)
(21,printLine("fgets()
(22,NULL)
(23,5)
(24,ALLOCA(100*sizeof(char)
(25,if(STATIC_CONST_FIVE==5)
(26,)
(27,passwordLen = 0)
(28,domain)
(29,)
(30,username)
(31,sizeof(char)
(32,char *)
(33,RET)
(34,LOGON32_PROVIDER_DEFAULT)
(35,password[0] = \\\'\\\\0\\\')
(36,password[passwordLen-1])
(37,printLine("User logged in successfully.")
(38,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(39,password)
(40,LOGON32_LOGON_NETWORK)
(41,\\\'\\\\0\\\')
(42,hUser)
(43,"fgets()
(44,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(45,(char *)
(46,100)
(47,&hUser)
(48,)
(49,100)
(50,stdin)
(51,printLine("Unable to login.")
(52,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(53,"User logged in successfully.")
(54,password)
(55,0)
(56,password)
(57,strlen(password)
(58,* username = "User")
(59,0)
(60,* domain = "Domain")
(61,"User")
(62,passwordLen)
(63,)
(64,domain)
(65,password[passwordLen-1] = \\\'\\\\0\\\')
(66,"Unable to login.")
(67,)
(68,password[0] = \\\'\\\\0\\\')
(69,STATIC_CONST_FIVE==5)
(70,0)
(71,1)
(72,passwordLen = strlen(password)
(73,STATIC_CONST_FIVE)
(74,password)
(75,* password = (char *)
(76,passwordLen-1)
(77,"Domain")
(78,password)
(79,domain)
(80,passwordLen)
(81,0)
(82,\\\'\\\\0\\\')
(83,fgets(password, 100, stdin)
(84,password)
(85,hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
