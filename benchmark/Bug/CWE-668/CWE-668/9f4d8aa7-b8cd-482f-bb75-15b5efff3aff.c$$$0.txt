-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_char_free_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            char * password = (char *)malloc(100*sizeof(char));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: free() password without clearing the password buffer */
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
83,84
83,85
84,85
84,86
85,86
85,87
85,88
85,89
86,87
88,89
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
122,123
123,124
124,125
124,126
125,126
125,127
126,127
128,129
128,130
129,130
133,134
133,135
133,136
134,135
134,136
135,136
135,137
135,138
135,139
135,140
135,141
135,142
136,137
138,139
140,141
142,143
144,145
146,147
148,149
149,150
152,153
152,154
153,154
154,155
154,156
155,156
158,159
159,160
159,161
160,161
162,163
164,165
165,166
166,167
166,168
167,168
170,171
171,172
171,173
172,173
174,175
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,53,57,59,62,64,65,67,70,72,73,75,80,81,82,87,89,90,92,94,99,100,105,106,107,111,114,116,120,121,127,130,131,132,137,139,141,143,145,147,150,151,156,157,161,163,168,169,173,175
-----computeFrom-----
27,28
27,29
34,35
34,36
77,78
77,79
84,85
84,86
102,103
102,104
109,110
109,111
118,119
118,120
124,125
124,126
128,129
128,130
134,135
134,136
-----guardedBy-----
89,105
120,130
150,163
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_char_free_08_bad(){    if(staticReturnsTrue())    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_char_free_08_bad()
CWE244_Heap_Inspection__w32_char_free_08_bad
{    if(staticReturnsTrue())    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
if(staticReturnsTrue())    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
{            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }
char * password = (char *)malloc(100*sizeof(char));
char * password = (char *)malloc(100*sizeof(char));
char
* password = (char *)malloc(100*sizeof(char))
*
password
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
free(password);
free(password)
free
free
password
password
-----joern-----
(16,84,0)
(80,78,0)
(82,86,0)
(53,35,0)
(45,80,0)
(84,47,0)
(43,72,0)
(74,9,0)
(15,2,0)
(6,76,0)
(36,5,0)
(39,2,0)
(3,76,0)
(9,74,0)
(2,39,0)
(11,89,0)
(62,18,0)
(91,87,0)
(12,93,0)
(23,87,0)
(62,56,0)
(58,80,0)
(4,6,0)
(40,21,0)
(60,56,0)
(74,67,0)
(41,87,0)
(54,58,0)
(36,90,0)
(75,80,0)
(8,67,0)
(31,57,0)
(5,36,0)
(89,93,0)
(37,50,0)
(90,53,0)
(7,32,0)
(44,21,0)
(73,80,0)
(14,80,0)
(29,0,0)
(69,47,0)
(87,80,0)
(47,84,0)
(33,36,0)
(64,47,0)
(83,22,0)
(76,80,0)
(63,73,0)
(61,72,0)
(67,80,0)
(65,58,0)
(74,87,0)
(39,81,0)
(17,47,0)
(38,62,0)
(50,80,0)
(56,50,0)
(92,80,0)
(73,87,0)
(51,80,0)
(47,87,0)
(30,74,0)
(86,22,0)
(59,9,0)
(21,50,0)
(70,80,0)
(35,53,0)
(25,67,0)
(87,53,0)
(72,80,0)
(71,74,0)
(1,11,0)
(34,7,0)
(11,87,0)
(68,56,0)
(42,74,0)
(24,11,0)
(41,50,0)
(88,18,0)
(10,80,0)
(79,5,0)
(19,80,0)
(46,83,0)
(55,23,0)
(28,80,0)
(27,6,0)
(74,0,0)
(50,41,0)
(90,36,0)
(6,87,0)
(18,49,0)
(53,87,0)
(56,62,0)
(0,74,0)
(26,41,0)
(62,87,0)
(77,74,0)
(20,23,0)
(13,74,0)
(74,72,0)
(85,12,0)
(66,89,0)
(53,90,0)
(73,63,1)
(30,13,1)
(39,2,1)
(53,90,1)
(88,62,1)
(52,48,1)
(66,11,1)
(37,84,1)
(60,68,1)
(89,66,1)
(43,67,1)
(17,76,1)
(6,27,1)
(6,87,1)
(84,16,1)
(11,87,1)
(44,40,1)
(63,83,1)
(11,24,1)
(3,6,1)
(41,87,1)
(74,87,1)
(46,86,1)
(87,53,1)
(0,29,1)
(13,42,1)
(29,74,1)
(69,64,1)
(65,54,1)
(62,56,1)
(74,9,1)
(55,20,1)
(85,84,1)
(54,23,1)
(76,3,1)
(72,61,1)
(79,33,1)
(16,47,1)
(21,50,1)
(9,59,1)
(47,87,1)
(23,55,1)
(53,35,1)
(2,15,1)
(77,18,1)
(42,77,1)
(82,0,1)
(56,50,1)
(68,38,1)
(33,91,1)
(62,87,1)
(21,44,1)
(24,1,1)
(37,89,1)
(61,43,1)
(50,41,1)
(40,50,1)
(25,58,1)
(47,69,1)
(5,79,1)
(36,5,1)
(83,46,1)
(38,21,1)
(26,37,1)
(56,60,1)
(86,82,1)
(18,88,1)
(84,47,1)
(23,87,1)
(67,8,1)
(59,71,1)
(34,0,1)
(74,67,1)
(73,87,1)
(15,23,1)
(64,17,1)
(12,85,1)
(71,30,1)
(7,34,1)
(74,72,1)
(1,12,1)
(52,73,1)
(54,39,1)
(27,4,1)
(20,87,1)
(63,7,1)
(77,21,1)
(90,36,1)
(58,65,1)
(0,74,1)
(91,48,1)
(4,72,1)
(8,25,1)
(41,26,1)
(58,48,2)
(74,48,2)
(16,48,2)
(71,48,2)
(26,48,2)
(6,87,2)
(53,35,2)
(2,23,2)
(91,48,2)
(39,2,2)
(72,48,2)
(0,48,2)
(73,87,2)
(77,48,2)
(33,48,2)
(56,21,2)
(64,48,2)
(1,84,2)
(62,56,2)
(65,48,2)
(89,84,2)
(50,41,2)
(15,23,2)
(5,48,2)
(76,48,2)
(63,48,2)
(79,48,2)
(59,48,2)
(73,48,2)
(20,48,2)
(21,50,2)
(9,48,2)
(30,48,2)
(40,48,2)
(53,48,2)
(36,5,2)
(61,48,2)
(34,0,2)
(23,87,2)
(37,48,2)
(54,48,2)
(68,21,2)
(21,48,2)
(85,84,2)
(90,36,2)
(36,48,2)
(50,48,2)
(3,48,2)
(84,47,2)
(55,48,2)
(67,48,2)
(0,74,2)
(46,0,2)
(39,23,2)
(87,48,2)
(38,21,2)
(74,9,2)
(29,48,2)
(88,21,2)
(6,48,2)
(7,0,2)
(83,0,2)
(60,21,2)
(23,48,2)
(66,84,2)
(11,84,2)
(18,21,2)
(74,67,2)
(56,50,2)
(41,87,2)
(42,48,2)
(41,48,2)
(69,48,2)
(87,53,2)
(24,84,2)
(74,87,2)
(62,87,2)
(47,87,2)
(4,48,2)
(43,48,2)
(11,87,2)
(84,48,2)
(62,21,2)
(53,90,2)
(44,48,2)
(47,48,2)
(86,0,2)
(25,48,2)
(27,48,2)
(74,72,2)
(17,48,2)
(8,48,2)
(82,0,2)
(13,48,2)
(12,84,2)
(90,48,2)
-----------------------------------
(0,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(1,password)
(2,-1)
(3,\\\'\\\\0\\\')
(4,password)
(5,sizeof(char)
(6,password[0])
(7,printLine("Unable to login.")
(8,"User")
(9,&hUser)
(10,passwordLen)
(11,password[0])
(12,printLine("fgets()
(13,password)
(14,password)
(15,1)
(16,NULL)
(17,password)
(18,password[passwordLen-1] = \\\'\\\\0\\\')
(19,if (password == NULL)
(20,password)
(21,passwordLen > 0)
(22,)
(23,password == NULL)
(24,0)
(25,username)
(26,password)
(27,0)
(28,if (passwordLen > 0)
(29,0)
(30,LOGON32_LOGON_NETWORK)
(31,if(staticReturnsTrue()
(32,)
(33,100)
(34,"Unable to login.")
(35,char *)
(36,100*sizeof(char)
(37,passwordLen)
(38,password)
(39,exit(-1)
(40,passwordLen)
(41,strlen(password)
(42,domain)
(43,domain)
(44,0)
(45,if (fgets(password, 100, stdin)
(46,hUser)
(47,fgets(password, 100, stdin)
(48,staticReturnsTrue()
(49,)
(50,passwordLen = strlen(password)
(51,hUser)
(52,RET)
(53,(char *)
(54,passwordLen)
(55,NULL)
(56,passwordLen-1)
(57,)
(58,passwordLen = 0)
(59,hUser)
(60,1)
(61,"Domain")
(62,password[passwordLen-1])
(63,password)
(64,100)
(65,0)
(66,\\\'\\\\0\\\')
(67,* username = "User")
(68,passwordLen)
(69,stdin)
(70,domain)
(71,LOGON32_PROVIDER_DEFAULT)
(72,* domain = "Domain")
(73,free(password)
(74,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(75,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(76,password[0] = \\\'\\\\0\\\')
(77,username)
(78,)
(79,char)
(80,)
(81,)
(82,"User logged in successfully.")
(83,CloseHandle(hUser)
(84,fgets(password, 100, stdin)
(85,"fgets()
(86,printLine("User logged in successfully.")
(87,* password = (char *)
(88,\\\'\\\\0\\\')
(89,password[0] = \\\'\\\\0\\\')
(90,malloc(100*sizeof(char)
(91,password)
(92,username)
(93,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
