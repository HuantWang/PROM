-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_02_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(1)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
45,47
47,48
50,51
51,52
51,53
51,54
52,53
52,54
53,54
53,55
53,56
53,57
54,55
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
65,66
66,67
66,68
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
94,95
94,96
95,96
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
106,107
110,111
110,112
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,34,36,40,42,46,48,49,55,58,60,63,64,67,69,71,73,78,81,83,88,89,93,96,97,98,104,107,108,109,114,115,120,122,123,127,129
-----computeFrom-----
22,23
22,24
44,45
44,46
45,46
45,47
52,53
52,54
56,57
56,58
66,67
66,68
76,77
76,78
85,86
85,87
86,87
86,88
90,91
90,92
94,95
94,96
101,102
101,103
105,106
105,107
117,118
117,119
-----guardedBy-----
48,122
58,104
69,107
93,104
96,107
-----guardedByNegation-----
58,120
69,122
-----lastLexicalUse-----
58,120
69,122
-----jump-----
58,120
69,122
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_02_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_02_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_02_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
1
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(48,43,0)
(16,63,0)
(59,14,0)
(46,29,0)
(35,19,0)
(6,39,0)
(37,69,0)
(32,25,0)
(27,69,0)
(4,44,0)
(71,42,0)
(70,42,0)
(57,53,0)
(52,35,0)
(64,18,0)
(72,11,0)
(10,42,0)
(73,21,0)
(58,46,0)
(29,18,0)
(30,44,0)
(38,17,0)
(29,23,0)
(26,50,0)
(66,65,0)
(3,65,0)
(5,31,0)
(62,69,0)
(60,6,0)
(53,57,0)
(42,6,0)
(59,71,0)
(33,28,0)
(51,71,0)
(25,69,0)
(65,29,0)
(41,63,0)
(71,59,0)
(14,59,0)
(34,23,0)
(24,31,0)
(63,69,0)
(54,13,0)
(21,57,0)
(11,40,0)
(30,13,0)
(49,40,0)
(25,31,0)
(63,42,0)
(50,15,0)
(57,21,0)
(40,42,0)
(69,43,0)
(47,71,0)
(36,40,0)
(17,15,0)
(20,70,0)
(67,29,0)
(59,57,0)
(63,50,0)
(46,62,0)
(62,46,0)
(45,14,0)
(61,21,0)
(13,29,0)
(21,42,0)
(42,70,0)
(43,31,0)
(55,46,0)
(66,69,0)
(70,69,0)
(7,31,0)
(71,69,0)
(40,11,0)
(22,13,0)
(57,59,0)
(44,30,0)
(2,59,0)
(44,62,0)
(66,35,0)
(9,6,0)
(23,29,0)
(65,66,0)
(56,43,0)
(68,66,0)
(1,62,0)
(69,31,0)
(23,69,0)
(12,65,0)
(62,44,0)
(13,30,0)
(37,43,1)
(29,23,1)
(61,73,1)
(25,69,1)
(32,11,1)
(34,67,1)
(45,59,1)
(71,69,1)
(69,27,1)
(14,59,1)
(43,48,1)
(69,43,1)
(40,36,1)
(66,69,1)
(68,30,1)
(59,2,1)
(23,34,1)
(67,14,1)
(2,57,1)
(71,47,1)
(1,13,1)
(54,22,1)
(57,21,1)
(23,69,1)
(62,69,1)
(13,54,1)
(30,13,1)
(14,45,1)
(10,8,1)
(72,40,1)
(32,35,1)
(3,12,1)
(16,41,1)
(65,3,1)
(27,37,1)
(25,32,1)
(47,51,1)
(63,16,1)
(32,50,1)
(11,40,1)
(38,14,1)
(46,55,1)
(41,17,1)
(49,42,1)
(55,58,1)
(58,1,1)
(32,30,1)
(46,29,1)
(32,8,1)
(20,10,1)
(73,71,1)
(70,20,1)
(8,69,1)
(48,56,1)
(71,42,1)
(21,42,1)
(0,25,1)
(11,72,1)
(52,66,1)
(13,29,1)
(42,70,1)
(40,42,1)
(26,63,1)
(44,4,1)
(63,69,1)
(51,11,1)
(35,52,1)
(22,29,1)
(36,49,1)
(62,46,1)
(21,61,1)
(50,26,1)
(12,68,1)
(4,62,1)
(63,42,1)
(59,71,1)
(66,65,1)
(30,44,1)
(65,29,1)
(59,57,1)
(57,53,1)
(70,69,1)
(44,62,1)
(17,38,1)
(40,42,2)
(30,44,2)
(29,14,2)
(70,69,2)
(13,29,2)
(66,65,2)
(73,11,2)
(30,14,2)
(10,8,2)
(71,42,2)
(71,69,2)
(57,11,2)
(61,11,2)
(13,14,2)
(62,69,2)
(42,8,2)
(3,30,2)
(2,11,2)
(63,14,2)
(36,8,2)
(65,30,2)
(21,11,2)
(26,14,2)
(11,40,2)
(49,8,2)
(35,30,2)
(66,30,2)
(62,46,2)
(41,14,2)
(42,70,2)
(65,29,2)
(20,8,2)
(72,8,2)
(63,42,2)
(14,59,2)
(58,13,2)
(12,30,2)
(69,43,2)
(1,13,2)
(68,30,2)
(50,14,2)
(66,69,2)
(44,13,2)
(71,11,2)
(14,11,2)
(52,30,2)
(46,13,2)
(44,62,2)
(21,42,2)
(4,13,2)
(51,11,2)
(59,71,2)
(38,14,2)
(29,23,2)
(57,53,2)
(63,69,2)
(30,13,2)
(23,14,2)
(55,13,2)
(17,14,2)
(62,13,2)
(16,14,2)
(57,21,2)
(34,14,2)
(54,14,2)
(40,8,2)
(11,8,2)
(22,14,2)
(25,69,2)
(23,69,2)
(45,11,2)
(59,11,2)
(70,8,2)
(47,11,2)
(46,29,2)
(67,14,2)
(59,57,2)
-----------------------------------
(0,RET)
(1,data)
(2,stdin)
(3,1)
(4,\\\'\\\\n\\\')
(5,data)
(6,)
(7,if(1)
(8,1)
(9,if (250-dataLen > 1)
(10,dataLen)
(11,250-dataLen > 1)
(12,dataLen)
(13,dataLen > 0)
(14,fgets(data+dataLen, (int)
(15,)
(16,dataLen)
(17,printLine("fgets()
(18,)
(19,)
(20,data)
(21,250-dataLen)
(22,dataLen)
(23,strlen(data)
(24,dataBuffer)
(25,PUTENV(data)
(26,\\\'\\\\0\\\')
(27,dataBuffer)
(28,)
(29,dataLen = strlen(data)
(30,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(31,)
(32,data)
(33,if (fgets(data+dataLen, (int)
(34,data)
(35,data[dataLen-1] = \\\'\\\\0\\\')
(36,dataLen)
(37,data)
(38,"fgets()
(39,)
(40,250-dataLen)
(41,data)
(42,dataLen = strlen(data)
(43,dataBuffer[250] = "PATH=")
(44,data[dataLen-1] == \\\'\\\\n\\\')
(45,NULL)
(46,dataLen-1)
(47,dataLen)
(48,"PATH=")
(49,250)
(50,data[dataLen] = \\\'\\\\0\\\')
(51,data)
(52,\\\'\\\\0\\\')
(53,int)
(54,0)
(55,1)
(56,dataBuffer)
(57,(int)
(58,dataLen)
(59,fgets(data+dataLen, (int)
(60,dataLen)
(61,dataLen)
(62,data[dataLen-1])
(63,data[dataLen])
(64,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(65,dataLen-1)
(66,data[dataLen-1])
(67,dataLen)
(68,data)
(69,data = dataBuffer)
(70,strlen(data)
(71,data+dataLen)
(72,1)
(73,250)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
