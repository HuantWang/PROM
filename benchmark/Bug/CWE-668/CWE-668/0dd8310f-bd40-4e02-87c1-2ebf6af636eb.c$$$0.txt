-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_03_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(5==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,129,131
-----computeFrom-----
22,23
22,24
28,29
28,30
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_03_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_03_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_03_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
5==5
5
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(70,65,0)
(59,38,0)
(1,14,0)
(69,44,0)
(72,52,0)
(8,11,0)
(40,29,0)
(14,6,0)
(10,43,0)
(32,50,0)
(16,35,0)
(28,72,0)
(19,52,0)
(20,32,0)
(50,32,0)
(58,29,0)
(24,46,0)
(57,44,0)
(6,11,0)
(11,49,0)
(42,6,0)
(62,69,0)
(18,6,0)
(68,24,0)
(55,43,0)
(4,72,0)
(41,5,0)
(45,15,0)
(73,13,0)
(27,48,0)
(44,50,0)
(38,43,0)
(53,32,0)
(71,12,0)
(35,43,0)
(2,74,0)
(0,14,0)
(14,35,0)
(17,46,0)
(26,50,0)
(73,2,0)
(13,35,0)
(63,35,0)
(24,73,0)
(72,35,0)
(49,11,0)
(69,35,0)
(13,73,0)
(46,24,0)
(0,64,0)
(29,58,0)
(35,38,0)
(66,5,0)
(10,35,0)
(69,73,0)
(29,35,0)
(15,33,0)
(75,24,0)
(29,27,0)
(44,65,0)
(64,0,0)
(65,44,0)
(21,43,0)
(51,11,0)
(44,69,0)
(31,38,0)
(60,49,0)
(54,58,0)
(49,35,0)
(11,12,0)
(67,51,0)
(50,44,0)
(6,14,0)
(47,27,0)
(7,2,0)
(23,10,0)
(34,69,0)
(25,9,0)
(30,51,0)
(58,11,0)
(22,73,0)
(39,0,0)
(56,58,0)
(36,43,0)
(52,33,0)
(50,26,0)
(51,64,0)
(3,2,0)
(72,73,0)
(32,73,0)
(37,13,0)
(14,0,0)
(64,51,0)
(53,69,1)
(49,35,1)
(0,14,1)
(62,34,1)
(61,10,1)
(29,35,1)
(13,35,1)
(66,35,1)
(35,38,1)
(45,65,1)
(46,17,1)
(73,13,1)
(19,72,1)
(39,14,1)
(50,26,1)
(1,51,1)
(57,50,1)
(23,64,1)
(11,49,1)
(5,41,1)
(32,73,1)
(20,53,1)
(16,63,1)
(49,60,1)
(52,19,1)
(63,38,1)
(35,16,1)
(65,70,1)
(69,62,1)
(72,73,1)
(51,11,1)
(47,29,1)
(44,50,1)
(54,40,1)
(8,65,1)
(58,11,1)
(24,73,1)
(58,56,1)
(67,11,1)
(41,66,1)
(50,32,1)
(70,44,1)
(23,46,1)
(38,31,1)
(13,37,1)
(72,35,1)
(14,6,1)
(23,52,1)
(24,68,1)
(10,23,1)
(28,15,1)
(17,24,1)
(44,57,1)
(14,35,1)
(23,5,1)
(4,28,1)
(40,64,1)
(64,51,1)
(32,20,1)
(56,54,1)
(30,67,1)
(0,39,1)
(6,11,1)
(51,30,1)
(65,44,1)
(23,27,1)
(34,46,1)
(68,75,1)
(10,35,1)
(69,73,1)
(29,58,1)
(27,47,1)
(15,45,1)
(31,59,1)
(75,73,1)
(69,35,1)
(42,18,1)
(22,5,1)
(18,1,1)
(6,42,1)
(46,24,1)
(64,0,1)
(44,69,1)
(60,8,1)
(37,22,1)
(72,4,1)
(0,51,2)
(10,35,2)
(64,65,2)
(56,64,2)
(44,46,2)
(73,13,2)
(47,64,2)
(11,49,2)
(1,51,2)
(8,65,2)
(45,65,2)
(13,5,2)
(19,65,2)
(58,64,2)
(51,11,2)
(32,46,2)
(64,51,2)
(70,46,2)
(14,6,2)
(14,51,2)
(67,65,2)
(42,51,2)
(22,5,2)
(44,69,2)
(60,65,2)
(6,51,2)
(65,44,2)
(29,58,2)
(30,65,2)
(49,35,2)
(69,73,2)
(24,73,2)
(52,65,2)
(62,46,2)
(39,51,2)
(32,73,2)
(49,65,2)
(68,5,2)
(14,35,2)
(53,46,2)
(72,73,2)
(20,46,2)
(29,35,2)
(73,5,2)
(28,65,2)
(72,65,2)
(13,35,2)
(6,11,2)
(34,46,2)
(44,50,2)
(27,64,2)
(17,5,2)
(64,0,2)
(46,5,2)
(29,64,2)
(40,64,2)
(65,46,2)
(69,46,2)
(50,46,2)
(57,46,2)
(11,65,2)
(75,5,2)
(37,5,2)
(72,35,2)
(50,32,2)
(15,65,2)
(46,24,2)
(24,5,2)
(18,51,2)
(58,11,2)
(0,14,2)
(4,65,2)
(54,64,2)
(69,35,2)
(51,65,2)
(35,38,2)
(50,26,2)
-----------------------------------
(0,data[dataLen-1] == \\\'\\\\n\\\')
(1,data)
(2,)
(3,if (250-dataLen > 1)
(4,dataLen)
(5,5==5)
(6,dataLen-1)
(7,dataLen)
(8,dataLen)
(9,)
(10,PUTENV(data)
(11,dataLen = strlen(data)
(12,)
(13,strlen(data)
(14,data[dataLen-1])
(15,printLine("fgets()
(16,dataBuffer)
(17,1)
(18,dataLen)
(19,\\\'\\\\0\\\')
(20,dataLen)
(21,dataBuffer)
(22,dataLen)
(23,data)
(24,250-dataLen)
(25,if (fgets(data+dataLen, (int)
(26,int)
(27,data[dataLen-1] = \\\'\\\\0\\\')
(28,data)
(29,data[dataLen-1])
(30,0)
(31,"PATH=")
(32,250-dataLen)
(33,)
(34,data)
(35,data = dataBuffer)
(36,if(5==5)
(37,data)
(38,dataBuffer[250] = "PATH=")
(39,\\\'\\\\n\\\')
(40,data)
(41,5)
(42,1)
(43,)
(44,fgets(data+dataLen, (int)
(45,"fgets()
(46,250-dataLen > 1)
(47,\\\'\\\\0\\\')
(48,)
(49,strlen(data)
(50,(int)
(51,dataLen > 0)
(52,data[dataLen] = \\\'\\\\0\\\')
(53,250)
(54,dataLen)
(55,data)
(56,1)
(57,stdin)
(58,dataLen-1)
(59,dataBuffer)
(60,data)
(61,RET)
(62,dataLen)
(63,data)
(64,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(65,fgets(data+dataLen, (int)
(66,5)
(67,dataLen)
(68,dataLen)
(69,data+dataLen)
(70,NULL)
(71,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(72,data[dataLen])
(73,dataLen = strlen(data)
(74,)
(75,250)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
