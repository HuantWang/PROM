-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_01_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_01_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_01_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_01_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(12,37,0)
(25,27,0)
(52,0,0)
(57,38,0)
(58,9,0)
(21,63,0)
(29,37,0)
(63,36,0)
(15,23,0)
(10,9,0)
(40,25,0)
(24,15,0)
(47,70,0)
(61,37,0)
(8,13,0)
(16,27,0)
(70,68,0)
(61,46,0)
(2,18,0)
(64,37,0)
(49,61,0)
(62,38,0)
(66,36,0)
(46,18,0)
(17,9,0)
(53,36,0)
(37,29,0)
(36,9,0)
(19,33,0)
(26,23,0)
(19,57,0)
(42,19,0)
(20,54,0)
(6,24,0)
(14,53,0)
(64,4,0)
(23,38,0)
(62,11,0)
(24,11,0)
(19,36,0)
(35,62,0)
(22,68,0)
(11,24,0)
(69,16,0)
(11,36,0)
(17,36,0)
(33,48,0)
(4,64,0)
(37,61,0)
(60,32,0)
(59,62,0)
(41,46,0)
(56,57,0)
(13,64,0)
(55,18,0)
(18,9,0)
(45,9,0)
(51,29,0)
(57,19,0)
(0,36,0)
(44,23,0)
(37,64,0)
(30,61,0)
(70,46,0)
(65,36,0)
(23,15,0)
(11,62,0)
(61,36,0)
(43,38,0)
(39,33,0)
(67,70,0)
(5,11,0)
(53,46,0)
(64,13,0)
(63,38,0)
(15,24,0)
(7,17,0)
(1,10,0)
(0,25,0)
(46,53,0)
(13,46,0)
(50,13,0)
(38,32,0)
(34,0,0)
(0,46,0)
(31,57,0)
(3,10,0)
(68,70,0)
(36,10,0)
(38,63,0)
(0,46,1)
(7,68,1)
(62,38,1)
(70,47,1)
(52,16,1)
(19,36,1)
(37,64,1)
(63,36,1)
(47,67,1)
(10,1,1)
(17,36,1)
(26,38,1)
(11,62,1)
(51,37,1)
(14,41,1)
(24,6,1)
(34,52,1)
(7,15,1)
(69,29,1)
(0,34,1)
(36,10,1)
(53,36,1)
(68,22,1)
(44,26,1)
(22,70,1)
(13,8,1)
(29,37,1)
(38,63,1)
(8,50,1)
(56,42,1)
(24,11,1)
(68,70,1)
(61,46,1)
(25,40,1)
(62,59,1)
(59,35,1)
(19,57,1)
(53,14,1)
(41,36,1)
(17,7,1)
(46,53,1)
(31,56,1)
(37,61,1)
(21,43,1)
(12,64,1)
(7,33,1)
(57,38,1)
(16,69,1)
(40,0,1)
(61,30,1)
(6,11,1)
(1,3,1)
(7,25,1)
(13,46,1)
(5,23,1)
(0,36,1)
(43,29,1)
(39,19,1)
(42,15,1)
(23,44,1)
(50,61,1)
(29,51,1)
(64,4,1)
(11,36,1)
(61,36,1)
(66,65,1)
(67,46,1)
(36,66,1)
(70,46,1)
(33,39,1)
(15,23,1)
(64,13,1)
(57,31,1)
(35,5,1)
(37,12,1)
(28,17,1)
(30,49,1)
(15,24,1)
(23,38,1)
(65,10,1)
(63,21,1)
(49,68,1)
(40,29,2)
(53,36,2)
(11,62,2)
(6,23,2)
(35,23,2)
(30,68,2)
(56,15,2)
(0,46,2)
(15,29,2)
(69,29,2)
(31,15,2)
(62,23,2)
(16,29,2)
(23,38,2)
(19,15,2)
(63,36,2)
(38,63,2)
(57,38,2)
(8,68,2)
(26,29,2)
(62,38,2)
(63,29,2)
(44,29,2)
(17,36,2)
(21,29,2)
(64,4,2)
(24,11,2)
(59,23,2)
(61,46,2)
(29,68,2)
(15,23,2)
(0,36,2)
(52,29,2)
(46,53,2)
(70,46,2)
(23,29,2)
(29,37,2)
(38,29,2)
(13,68,2)
(19,36,2)
(24,23,2)
(12,68,2)
(19,57,2)
(33,15,2)
(61,36,2)
(49,68,2)
(42,15,2)
(57,15,2)
(34,29,2)
(11,23,2)
(37,64,2)
(5,23,2)
(61,68,2)
(51,68,2)
(11,36,2)
(43,29,2)
(13,46,2)
(64,68,2)
(25,29,2)
(37,61,2)
(39,15,2)
(0,29,2)
(64,13,2)
(36,10,2)
(50,68,2)
(37,68,2)
(68,70,2)
(15,24,2)
-----------------------------------
(0,data[dataLen])
(1,"PATH=")
(2,dataLen)
(3,dataBuffer)
(4,int)
(5,data)
(6,\\\'\\\\n\\\')
(7,data)
(8,dataLen)
(9,)
(10,dataBuffer[250] = "PATH=")
(11,data[dataLen-1])
(12,stdin)
(13,250-dataLen)
(14,data)
(15,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(16,printLine("fgets()
(17,PUTENV(data)
(18,)
(19,data[dataLen-1])
(20,if (fgets(data+dataLen, (int)
(21,data)
(22,1)
(23,dataLen > 0)
(24,data[dataLen-1] == \\\'\\\\n\\\')
(25,data[dataLen] = \\\'\\\\0\\\')
(26,dataLen)
(27,)
(28,RET)
(29,fgets(data+dataLen, (int)
(30,dataLen)
(31,1)
(32,)
(33,data[dataLen-1] = \\\'\\\\0\\\')
(34,dataLen)
(35,dataLen)
(36,data = dataBuffer)
(37,fgets(data+dataLen, (int)
(38,dataLen = strlen(data)
(39,\\\'\\\\0\\\')
(40,\\\'\\\\0\\\')
(41,dataLen)
(42,data)
(43,dataLen)
(44,0)
(45,dataBuffer)
(46,dataLen = strlen(data)
(47,dataLen)
(48,)
(49,data)
(50,250)
(51,NULL)
(52,data)
(53,strlen(data)
(54,)
(55,if (250-dataLen > 1)
(56,dataLen)
(57,dataLen-1)
(58,data)
(59,1)
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,data+dataLen)
(62,dataLen-1)
(63,strlen(data)
(64,(int)
(65,data)
(66,dataBuffer)
(67,250)
(68,250-dataLen > 1)
(69,"fgets()
(70,250-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
