-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
76,88
76,89
76,90
76,91
76,92
76,93
77,78
78,79
78,80
79,80
81,82
81,83
81,84
81,85
82,83
84,85
86,87
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
141,143
141,144
141,145
142,143
144,145
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
155,156
156,157
157,158
159,160
161,162
163,164
163,165
164,165
164,166
165,166
165,167
165,168
166,167
168,169
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
180,183
180,184
181,182
183,184
185,186
187,188
189,190
189,191
190,191
190,192
191,192
193,194
195,196
197,198
198,199
198,200
199,200
201,202
201,203
201,204
201,205
201,206
202,203
204,205
206,207
206,208
207,208
207,209
209,210
211,212
212,213
212,214
213,214
215,216
217,218
217,219
218,219
219,220
219,221
222,223
223,224
223,225
224,225
224,226
226,227
230,231
230,232
231,232
231,233
232,233
232,234
233,234
235,236
237,238
237,239
238,239
241,242
243,244
244,245
244,246
245,246
245,247
246,247
248,249
248,250
249,250
251,252
251,253
252,253
254,255
255,256
255,257
259,260
260,261
260,262
261,262
263,264
263,265
263,266
264,265
266,267
269,270
269,271
270,271
272,273
273,274
274,275
274,276
275,276
276,277
279,280
280,281
280,282
281,282
283,284
283,285
283,286
284,285
286,287
289,290
289,291
290,291
292,293
293,294
294,295
294,296
295,296
296,297
300,301
300,302
301,302
301,303
302,303
304,305
306,307
307,308
308,309
308,310
309,310
311,312
313,314
313,315
314,315
314,316
315,316
317,318
319,320
320,321
321,322
321,323
322,323
324,325
326,327
327,328
327,329
328,329
330,331
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,32,36,38,41,43,44,48,50,53,57,59,62,66,68,72,74,80,83,85,87,89,93,95,97,101,104,105,109,114,115,117,123,124,125,127,132,133,136,138,143,145,149,151,154,158,160,162,167,169,171,173,175,179,182,184,186,188,192,194,196,200,203,205,208,210,214,216,220,221,225,227,228,229,234,236,239,240,242,247,250,253,256,257,258,262,265,267,268,271,277,278,282,285,287,288,291,297,298,299,303,305,310,312,316,318,323,325,329,331
-----computeFrom-----
22,23
22,24
78,79
78,80
91,92
91,93
111,112
111,113
119,120
119,121
129,130
129,131
140,141
140,142
164,165
164,166
177,178
177,179
190,191
190,192
198,199
198,200
212,213
212,214
217,218
217,219
223,224
223,225
224,225
224,226
231,232
231,233
232,233
232,234
237,238
237,239
244,245
244,246
248,249
248,250
251,252
251,253
260,261
260,262
274,275
274,276
280,281
280,282
294,295
294,296
301,302
301,303
314,315
314,316
-----guardedBy-----
303,312
316,325
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (250 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (250 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data);
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data)
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink
CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink
data
data
-----joern-----
(8,118,0)
(85,131,0)
(68,61,0)
(137,125,0)
(32,65,0)
(92,1,0)
(160,1,0)
(88,81,0)
(52,142,0)
(58,111,0)
(83,125,0)
(56,34,0)
(91,54,0)
(151,159,0)
(58,154,0)
(29,10,0)
(43,137,0)
(3,142,0)
(81,83,0)
(74,63,0)
(170,116,0)
(110,1,0)
(62,137,0)
(81,130,0)
(154,58,0)
(153,174,0)
(19,117,0)
(37,98,0)
(164,35,0)
(171,110,0)
(71,113,0)
(6,54,0)
(1,54,0)
(16,110,0)
(60,1,0)
(141,131,0)
(145,123,0)
(23,1,0)
(100,65,0)
(144,80,0)
(111,58,0)
(114,147,0)
(147,58,0)
(103,34,0)
(143,35,0)
(121,116,0)
(42,154,0)
(80,61,0)
(46,116,0)
(112,116,0)
(140,58,0)
(120,156,0)
(70,22,0)
(73,1,0)
(142,44,0)
(139,44,0)
(67,54,0)
(125,116,0)
(108,1,0)
(133,110,0)
(122,156,0)
(24,1,0)
(41,116,0)
(155,54,0)
(136,1,0)
(125,83,0)
(134,100,0)
(83,21,0)
(123,67,0)
(76,1,0)
(38,162,0)
(12,67,0)
(152,19,0)
(131,41,0)
(107,83,0)
(72,11,0)
(156,41,0)
(51,41,0)
(47,145,0)
(105,116,0)
(168,47,0)
(90,136,0)
(88,145,0)
(167,137,0)
(45,116,0)
(10,25,0)
(58,147,0)
(93,109,0)
(169,83,0)
(64,88,0)
(14,21,0)
(96,95,0)
(39,17,0)
(55,144,0)
(78,147,0)
(135,116,0)
(88,67,0)
(96,41,0)
(159,25,0)
(165,1,0)
(102,133,0)
(83,65,0)
(117,19,0)
(158,22,0)
(6,67,0)
(82,11,0)
(2,1,0)
(156,136,0)
(157,116,0)
(20,80,0)
(123,145,0)
(47,14,0)
(86,1,0)
(49,20,0)
(174,45,0)
(147,78,0)
(106,78,0)
(33,113,0)
(113,116,0)
(21,14,0)
(34,41,0)
(147,114,0)
(94,0,0)
(98,37,0)
(18,6,0)
(22,1,0)
(138,174,0)
(21,162,0)
(98,0,0)
(59,20,0)
(96,136,0)
(40,119,0)
(0,98,0)
(11,125,0)
(28,116,0)
(25,159,0)
(89,123,0)
(129,14,0)
(69,100,0)
(132,171,0)
(5,47,0)
(142,41,0)
(84,111,0)
(130,81,0)
(75,100,0)
(98,116,0)
(133,65,0)
(61,80,0)
(101,37,0)
(53,117,0)
(66,145,0)
(81,88,0)
(65,116,0)
(99,10,0)
(145,1,0)
(58,41,0)
(44,142,0)
(80,144,0)
(127,88,0)
(166,135,0)
(48,13,0)
(65,100,0)
(35,65,0)
(14,47,0)
(83,81,0)
(97,45,0)
(9,67,0)
(100,41,0)
(167,11,0)
(115,136,0)
(30,125,0)
(80,20,0)
(149,148,0)
(161,31,0)
(77,110,0)
(171,65,0)
(133,124,0)
(11,167,0)
(117,135,0)
(137,167,0)
(27,126,0)
(162,21,0)
(146,96,0)
(25,116,0)
(15,116,0)
(104,131,0)
(87,171,0)
(79,98,0)
(21,83,0)
(41,131,0)
(4,1,0)
(163,19,0)
(57,116,0)
(18,150,1)
(83,21,1)
(71,33,1)
(40,167,1)
(117,19,1)
(117,53,1)
(158,67,1)
(173,7,1)
(97,174,1)
(10,99,1)
(3,111,1)
(113,71,1)
(68,20,1)
(39,111,1)
(111,58,1)
(104,51,1)
(80,61,1)
(82,137,1)
(6,18,1)
(164,143,1)
(25,159,1)
(35,164,1)
(6,67,1)
(154,42,1)
(150,133,1)
(83,81,1)
(171,65,1)
(132,156,1)
(49,59,1)
(140,25,1)
(22,70,1)
(83,169,1)
(123,89,1)
(69,134,1)
(59,145,1)
(56,41,1)
(120,40,1)
(100,41,1)
(122,120,1)
(88,64,1)
(34,41,1)
(42,147,1)
(36,15,1)
(64,127,1)
(81,88,1)
(27,150,1)
(144,55,1)
(163,152,1)
(18,27,1)
(167,11,1)
(77,16,1)
(174,153,1)
(11,125,1)
(147,114,1)
(87,132,1)
(120,39,1)
(35,65,1)
(93,7,1)
(120,161,1)
(133,102,1)
(137,125,1)
(144,80,1)
(120,173,1)
(142,52,1)
(41,131,1)
(156,136,1)
(34,103,1)
(58,147,1)
(66,110,1)
(59,173,1)
(146,156,1)
(21,14,1)
(120,8,1)
(58,154,1)
(44,139,1)
(143,65,1)
(145,123,1)
(142,41,1)
(120,74,1)
(0,94,1)
(161,44,1)
(43,62,1)
(133,65,1)
(67,9,1)
(47,5,1)
(45,97,1)
(89,66,1)
(74,34,1)
(153,138,1)
(72,82,1)
(120,149,1)
(135,166,1)
(99,29,1)
(21,162,1)
(70,158,1)
(173,93,1)
(111,84,1)
(7,36,1)
(30,35,1)
(159,151,1)
(106,140,1)
(12,155,1)
(90,115,1)
(136,90,1)
(138,98,1)
(47,145,1)
(61,68,1)
(15,167,1)
(125,83,1)
(152,45,1)
(88,67,1)
(168,129,1)
(16,136,1)
(141,104,1)
(167,137,1)
(137,43,1)
(139,142,1)
(29,135,1)
(101,34,1)
(11,72,1)
(127,107,1)
(48,36,1)
(62,125,1)
(19,163,1)
(100,69,1)
(96,136,1)
(96,146,1)
(5,168,1)
(110,77,1)
(84,58,1)
(8,35,1)
(162,38,1)
(26,6,1)
(149,144,1)
(156,41,1)
(65,100,1)
(33,144,1)
(103,56,1)
(88,145,1)
(166,117,1)
(131,85,1)
(171,87,1)
(85,141,1)
(96,41,1)
(80,20,1)
(44,142,1)
(171,110,1)
(156,122,1)
(75,32,1)
(51,113,1)
(14,47,1)
(98,0,1)
(53,19,1)
(107,30,1)
(58,41,1)
(37,101,1)
(115,22,1)
(102,171,1)
(81,130,1)
(32,44,1)
(52,3,1)
(133,110,1)
(94,79,1)
(129,162,1)
(7,48,1)
(150,171,1)
(78,106,1)
(123,67,1)
(79,37,1)
(147,78,1)
(83,65,1)
(38,81,1)
(20,49,1)
(169,21,1)
(9,12,1)
(132,96,1)
(134,75,1)
(55,80,1)
(98,37,1)
(151,10,1)
(5,35,2)
(96,136,2)
(85,144,2)
(25,159,2)
(78,34,2)
(59,173,2)
(33,144,2)
(47,35,2)
(80,173,2)
(167,137,2)
(99,34,2)
(69,44,2)
(35,44,2)
(104,144,2)
(72,137,2)
(39,111,2)
(98,34,2)
(133,65,2)
(151,34,2)
(106,34,2)
(3,111,2)
(25,34,2)
(163,34,2)
(167,11,2)
(27,150,2)
(138,34,2)
(65,44,2)
(88,35,2)
(129,35,2)
(137,35,2)
(125,83,2)
(58,154,2)
(123,67,2)
(34,144,2)
(41,131,2)
(61,173,2)
(137,125,2)
(143,44,2)
(34,41,2)
(62,35,2)
(159,34,2)
(156,136,2)
(98,37,2)
(111,34,2)
(161,44,2)
(156,41,2)
(81,88,2)
(83,35,2)
(51,144,2)
(154,34,2)
(11,125,2)
(19,34,2)
(88,145,2)
(100,44,2)
(52,111,2)
(58,147,2)
(43,35,2)
(45,34,2)
(144,80,2)
(14,35,2)
(127,35,2)
(48,36,2)
(171,65,2)
(55,173,2)
(171,110,2)
(98,0,2)
(83,21,2)
(30,35,2)
(44,142,2)
(44,111,2)
(168,35,2)
(29,34,2)
(65,100,2)
(8,35,2)
(47,145,2)
(142,41,2)
(141,144,2)
(146,156,2)
(58,34,2)
(167,35,2)
(56,144,2)
(147,114,2)
(79,34,2)
(133,110,2)
(93,7,2)
(64,35,2)
(162,35,2)
(97,34,2)
(20,173,2)
(83,81,2)
(117,34,2)
(173,167,2)
(145,123,2)
(71,144,2)
(11,137,2)
(32,44,2)
(10,34,2)
(142,111,2)
(75,44,2)
(153,34,2)
(35,65,2)
(140,34,2)
(174,34,2)
(113,144,2)
(101,34,2)
(82,137,2)
(81,35,2)
(38,35,2)
(94,34,2)
(49,173,2)
(125,35,2)
(147,78,2)
(53,34,2)
(100,41,2)
(37,34,2)
(58,41,2)
(166,34,2)
(139,111,2)
(21,35,2)
(41,144,2)
(164,44,2)
(134,44,2)
(107,35,2)
(84,34,2)
(88,67,2)
(21,14,2)
(102,171,2)
(111,58,2)
(36,167,2)
(74,34,2)
(117,19,2)
(147,34,2)
(0,34,2)
(81,130,2)
(152,34,2)
(96,156,2)
(131,144,2)
(169,35,2)
(7,167,2)
(21,162,2)
(144,173,2)
(68,173,2)
(40,167,2)
(149,144,2)
(135,34,2)
(15,167,2)
(80,61,2)
(14,47,2)
(133,171,2)
(80,20,2)
(83,65,2)
(42,34,2)
(96,41,2)
(6,67,2)
(103,144,2)
-----------------------------------
(0,sizeof(service)
(1,)
(2,acceptSocket)
(3,listenSocket)
(4,if (wsaDataInit)
(5,1)
(6,CWE427_Uncontrolled_Search_Path_Element__wchar_t_listen_socket_54b_badSink(data)
(7,replace)
(8,break;)
(9,dataBuffer)
(10,service.sin_port)
(11,recvResult == 0)
(12,data)
(13,)
(14,250 - dataLen - 1)
(15,\\'\\\\0\\')
(16,acceptSocket)
(17,)
(18,data)
(19,service.sin_addr)
(20,MAKEWORD(2,2)
(21,sizeof(wchar_t)
(22,wsaDataInit = 0)
(23,if (listenSocket != INVALID_SOCKET)
(24,listenSocket)
(25,service.sin_port = htons(TCP_PORT)
(26,RET)
(27,WSACleanup()
(28,if (recvResult == SOCKET_ERROR || recvResult == 0)
(29,service)
(30,recvResult)
(31,)
(32,acceptSocket)
(33,wsaDataInit)
(34,listenSocket == INVALID_SOCKET)
(35,acceptSocket == SOCKET_ERROR)
(36,replace)
(37,&service)
(38,wchar_t)
(39,break;)
(40,break;)
(41,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(42,service)
(43,SOCKET_ERROR)
(44,listen(listenSocket, LISTEN_BACKLOG)
(45,service.sin_family = AF_INET)
(46,if (acceptSocket == SOCKET_ERROR)
(47,dataLen - 1)
(48,\\'\\\\0\\')
(49,2)
(50,\\\'\\\\0\\\')
(51,listenSocket)
(52,LISTEN_BACKLOG)
(53,s_addr)
(54,)
(55,NO_ERROR)
(56,listenSocket)
(57,if (listenSocket == INVALID_SOCKET)
(58,bind(listenSocket, (struct sockaddr*)
(59,2)
(60,dataLen)
(61,&wsaData)
(62,recvResult)
(63,)
(64,dataLen)
(65,acceptSocket = accept(listenSocket, NULL, NULL)
(66,dataLen)
(67,data = dataBuffer)
(68,wsaData)
(69,NULL)
(70,0)
(71,1)
(72,0)
(73,do)
(74,break;)
(75,listenSocket)
(76,wsaDataInit)
(77,INVALID_SOCKET)
(78,&service)
(79,0)
(80,WSAStartup(MAKEWORD(2,2)
(81,(char *)
(82,recvResult)
(83,recv(acceptSocket, (char *)
(84,SOCKET_ERROR)
(85,IPPROTO_TCP)
(86,wsaData)
(87,INVALID_SOCKET)
(88,data + dataLen)
(89,data)
(90,INVALID_SOCKET)
(91,data)
(92,service)
(93,\\\'\\\\0\\\')
(94,service)
(95,)
(96,CLOSE_SOCKET(listenSocket)
(97,AF_INET)
(98,memset(&service, 0, sizeof(service)
(99,sin_port)
(100,accept(listenSocket, NULL, NULL)
(101,service)
(102,acceptSocket)
(103,INVALID_SOCKET)
(104,AF_INET)
(105,if (replace)
(106,service)
(107,acceptSocket)
(108,if (acceptSocket != INVALID_SOCKET)
(109,)
(110,acceptSocket = INVALID_SOCKET)
(111,bind(listenSocket, (struct sockaddr*)
(112,if (bind(listenSocket, (struct sockaddr*)
(113,wsaDataInit = 1)
(114,struct sockaddr*)
(115,listenSocket)
(116,)
(117,service.sin_addr.s_addr)
(118,)
(119,)
(120,listenSocket)
(121,if (WSAStartup(MAKEWORD(2,2)
(122,INVALID_SOCKET)
(123,wcslen(data)
(124,)
(125,recvResult = recv(acceptSocket, (char *)
(126,)
(127,data)
(128,\\'\\\\0\\')
(129,250)
(130,char *)
(131,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(132,acceptSocket)
(133,CLOSE_SOCKET(acceptSocket)
(134,NULL)
(135,service.sin_addr.s_addr = INADDR_ANY)
(136,listenSocket = INVALID_SOCKET)
(137,recvResult == SOCKET_ERROR)
(138,service)
(139,SOCKET_ERROR)
(140,listenSocket)
(141,SOCK_STREAM)
(142,listen(listenSocket, LISTEN_BACKLOG)
(143,acceptSocket)
(144,WSAStartup(MAKEWORD(2,2)
(145,dataLen = wcslen(data)
(146,listenSocket)
(147,(struct sockaddr*)
(148,)
(149,break;)
(150,wsaDataInit)
(151,TCP_PORT)
(152,service)
(153,sin_family)
(154,sizeof(service)
(155,"PATH=")
(156,listenSocket != INVALID_SOCKET)
(157,if (replace)
(158,wsaDataInit)
(159,htons(TCP_PORT)
(160,recvResult)
(161,break;)
(162,sizeof(wchar_t)
(163,sin_addr)
(164,SOCKET_ERROR)
(165,replace)
(166,INADDR_ANY)
(167,recvResult == SOCKET_ERROR || recvResult == 0)
(168,dataLen)
(169,0)
(170,if (listen(listenSocket, LISTEN_BACKLOG)
(171,acceptSocket != INVALID_SOCKET)
(172,\\\'\\\\0\\\')
(173,0)
(174,service.sin_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
