-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_18_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    goto source;
source:
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
29,30
29,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,30,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_18_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    goto source;source:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_18_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_18_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    goto source;source:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
source
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(16,67,0)
(4,27,0)
(40,34,0)
(34,16,0)
(69,66,0)
(62,63,0)
(9,65,0)
(38,72,0)
(65,58,0)
(48,66,0)
(24,63,0)
(53,31,0)
(64,24,0)
(59,21,0)
(13,21,0)
(13,30,0)
(21,13,0)
(37,66,0)
(45,22,0)
(44,35,0)
(11,58,0)
(28,41,0)
(62,48,0)
(63,24,0)
(36,26,0)
(57,48,0)
(41,0,0)
(65,43,0)
(63,16,0)
(5,35,0)
(58,50,0)
(57,58,0)
(25,50,0)
(41,58,0)
(30,44,0)
(65,9,0)
(16,63,0)
(43,18,0)
(20,55,0)
(49,50,0)
(32,30,0)
(22,58,0)
(57,70,0)
(66,50,0)
(33,27,0)
(35,44,0)
(29,58,0)
(30,13,0)
(68,50,0)
(9,0,0)
(48,22,0)
(19,57,0)
(2,9,0)
(35,0,0)
(23,47,0)
(31,50,0)
(8,0,0)
(61,49,0)
(0,41,0)
(16,34,0)
(27,26,0)
(46,50,0)
(14,62,0)
(54,34,0)
(71,70,0)
(3,48,0)
(58,31,0)
(34,48,0)
(60,21,0)
(17,65,0)
(1,57,0)
(52,13,0)
(56,9,0)
(26,27,0)
(15,50,0)
(22,48,0)
(0,47,0)
(21,0,0)
(49,58,0)
(42,35,0)
(67,16,0)
(44,30,0)
(39,63,0)
(63,62,0)
(6,62,0)
(12,43,0)
(27,48,0)
(10,20,0)
(62,58,0)
(7,31,0)
(13,58,0)
(70,55,0)
(27,48,1)
(63,39,1)
(20,10,1)
(41,58,1)
(22,45,1)
(24,64,1)
(49,58,1)
(49,61,1)
(58,11,1)
(70,71,1)
(34,48,1)
(61,26,1)
(5,0,1)
(19,1,1)
(35,42,1)
(3,46,1)
(34,54,1)
(57,48,1)
(21,0,1)
(62,48,1)
(0,41,1)
(54,40,1)
(29,31,1)
(28,8,1)
(57,19,1)
(26,36,1)
(24,63,1)
(6,26,1)
(62,58,1)
(7,53,1)
(17,44,1)
(61,44,1)
(8,24,1)
(44,35,1)
(58,31,1)
(59,60,1)
(60,52,1)
(64,63,1)
(16,34,1)
(40,62,1)
(41,28,1)
(22,58,1)
(61,43,1)
(2,56,1)
(46,58,1)
(45,3,1)
(35,0,1)
(63,62,1)
(44,30,1)
(13,21,1)
(10,24,1)
(36,27,1)
(31,7,1)
(32,13,1)
(12,65,1)
(52,35,1)
(65,58,1)
(57,58,1)
(1,20,1)
(71,57,1)
(4,48,1)
(16,67,1)
(63,16,1)
(14,6,1)
(51,49,1)
(39,16,1)
(33,4,1)
(30,32,1)
(48,22,1)
(30,13,1)
(62,14,1)
(27,33,1)
(61,70,1)
(9,2,1)
(42,5,1)
(65,9,1)
(13,58,1)
(9,0,1)
(26,27,1)
(43,12,1)
(11,29,1)
(56,17,1)
(21,59,1)
(6,26,2)
(5,24,2)
(63,16,2)
(34,26,2)
(44,30,2)
(58,31,2)
(57,48,2)
(24,26,2)
(21,0,2)
(59,35,2)
(30,35,2)
(21,35,2)
(70,24,2)
(62,58,2)
(44,35,2)
(60,35,2)
(9,44,2)
(32,35,2)
(41,24,2)
(34,48,2)
(1,24,2)
(2,44,2)
(41,58,2)
(8,24,2)
(9,0,2)
(43,44,2)
(26,27,2)
(57,24,2)
(65,58,2)
(14,26,2)
(64,26,2)
(20,24,2)
(56,44,2)
(35,0,2)
(62,48,2)
(16,34,2)
(17,44,2)
(63,26,2)
(44,24,2)
(0,41,2)
(57,58,2)
(40,26,2)
(30,13,2)
(71,24,2)
(62,26,2)
(52,35,2)
(10,24,2)
(13,58,2)
(16,26,2)
(12,44,2)
(16,67,2)
(13,35,2)
(22,58,2)
(48,22,2)
(24,63,2)
(65,44,2)
(49,58,2)
(28,24,2)
(27,48,2)
(19,24,2)
(13,21,2)
(54,26,2)
(35,24,2)
(39,26,2)
(42,24,2)
(0,24,2)
(63,62,2)
(65,9,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,data)
(2,1)
(3,dataLen)
(4,250)
(5,dataLen)
(6,data)
(7,"PATH=")
(8,dataLen)
(9,dataLen-1)
(10,"fgets()
(11,dataBuffer)
(12,\\\'\\\\0\\\')
(13,data[dataLen-1])
(14,dataLen)
(15,data)
(16,(int)
(17,data)
(18,)
(19,dataLen)
(20,printLine("fgets()
(21,dataLen-1)
(22,strlen(data)
(23,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,fgets(data+dataLen, (int)
(25,source:)
(26,250-dataLen > 1)
(27,250-dataLen)
(28,data)
(29,data)
(30,data[dataLen-1] == \\\'\\\\n\\\')
(31,dataBuffer[250] = "PATH=")
(32,\\\'\\\\n\\\')
(33,dataLen)
(34,250-dataLen)
(35,dataLen > 0)
(36,1)
(37,dataLen)
(38,if (fgets(data+dataLen, (int)
(39,stdin)
(40,250)
(41,strlen(data)
(42,0)
(43,data[dataLen-1] = \\\'\\\\0\\\')
(44,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,data)
(46,goto source;)
(47,)
(48,dataLen = strlen(data)
(49,PUTENV(data)
(50,)
(51,RET)
(52,data)
(53,dataBuffer)
(54,dataLen)
(55,)
(56,dataLen)
(57,data[dataLen])
(58,data = dataBuffer)
(59,1)
(60,dataLen)
(61,data)
(62,data+dataLen)
(63,fgets(data+dataLen, (int)
(64,NULL)
(65,data[dataLen-1])
(66,)
(67,int)
(68,dataBuffer)
(69,if (250-dataLen > 1)
(70,data[dataLen] = \\\'\\\\0\\\')
(71,\\\'\\\\0\\\')
(72,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
