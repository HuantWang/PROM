-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_char_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fprintf(pFile, "User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
13,14
14,15
14,16
16,17
16,18
16,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
39,40
39,41
39,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
60,62
60,63
61,62
65,66
65,67
66,67
66,68
67,68
67,69
67,70
67,71
68,69
70,71
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
99,100
99,101
100,101
100,102
101,102
104,105
105,106
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
115,117
115,118
116,117
116,118
117,118
117,119
117,120
117,121
117,122
117,123
117,124
118,119
120,121
122,123
124,125
126,127
128,129
130,131
131,132
134,135
134,136
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
149,150
152,153
153,154
153,155
153,156
153,157
154,155
156,157
159,160
161,162
161,163
162,163
164,165
165,166
166,167
166,168
167,168
169,170
-----nextToken-----
2,4,9,10,15,17,19,21,25,27,29,33,35,38,40,41,43,46,48,49,51,55,57,58,62,63,64,69,71,72,74,76,81,82,87,88,89,93,96,98,102,103,109,112,113,114,119,121,123,125,127,129,132,133,138,139,143,145,150,151,155,157,158,160,163,168,170
-----computeFrom-----
7,8
7,9
66,67
66,68
84,85
84,86
91,92
91,93
100,101
100,102
106,107
106,108
110,111
110,112
116,117
116,118
-----guardedBy-----
71,87
102,112
132,145
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_char_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_char_13_bad()
CWE534_Info_Exposure_Debug_Log__w32_char_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(pFile, "User attempted access with password: %s\n", password);
fprintf(pFile, "User attempted access with password: %s\n", password)
fprintf
fprintf
pFile
pFile
"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(5,3,0)
(30,66,0)
(0,52,0)
(42,22,0)
(62,52,0)
(74,63,0)
(58,31,0)
(59,10,0)
(9,66,0)
(80,61,0)
(11,32,0)
(69,51,0)
(46,16,0)
(69,32,0)
(69,9,0)
(50,66,0)
(85,9,0)
(88,32,0)
(43,69,0)
(23,86,0)
(25,66,0)
(16,32,0)
(72,78,0)
(8,7,0)
(4,3,0)
(16,44,0)
(55,87,0)
(51,66,0)
(3,0,0)
(29,10,0)
(10,77,0)
(82,69,0)
(1,12,0)
(19,76,0)
(20,69,0)
(53,0,0)
(38,34,0)
(67,87,0)
(75,51,0)
(3,32,0)
(66,33,0)
(17,88,0)
(36,84,0)
(56,40,0)
(21,77,0)
(48,10,0)
(45,36,0)
(49,19,0)
(36,32,0)
(27,69,0)
(13,40,0)
(22,0,0)
(2,36,0)
(60,51,0)
(88,58,0)
(12,39,0)
(69,27,0)
(40,44,0)
(22,81,0)
(41,66,0)
(71,80,0)
(83,66,0)
(15,66,0)
(86,69,0)
(32,66,0)
(44,66,0)
(88,40,0)
(69,86,0)
(26,66,0)
(65,27,0)
(10,32,0)
(47,44,0)
(0,66,0)
(87,66,0)
(84,39,0)
(68,84,0)
(14,69,0)
(35,9,0)
(24,58,0)
(77,10,0)
(3,66,0)
(73,52,0)
(63,44,0)
(52,0,0)
(6,69,0)
(44,16,0)
(79,3,0)
(89,63,0)
(54,66,0)
(7,61,0)
(64,34,0)
(18,66,0)
(40,88,0)
(57,66,0)
(70,32,0)
(14,6,1)
(89,44,1)
(73,53,1)
(88,32,1)
(8,27,1)
(6,58,1)
(34,38,1)
(27,69,1)
(58,24,1)
(9,35,1)
(36,45,1)
(75,60,1)
(56,17,1)
(45,2,1)
(55,67,1)
(84,68,1)
(28,3,1)
(82,20,1)
(70,34,1)
(3,32,1)
(69,51,1)
(40,13,1)
(62,73,1)
(5,80,1)
(40,44,1)
(43,82,1)
(7,8,1)
(69,86,1)
(63,74,1)
(86,23,1)
(36,32,1)
(69,32,1)
(80,71,1)
(24,88,1)
(2,12,1)
(88,40,1)
(20,14,1)
(10,59,1)
(42,28,1)
(63,44,1)
(11,70,1)
(68,36,1)
(37,28,1)
(21,10,1)
(4,79,1)
(22,42,1)
(35,85,1)
(69,9,1)
(77,10,1)
(71,7,1)
(59,29,1)
(37,22,1)
(52,62,1)
(53,51,1)
(44,16,1)
(37,34,1)
(48,0,1)
(32,11,1)
(23,43,1)
(16,46,1)
(49,27,1)
(46,47,1)
(5,19,1)
(74,89,1)
(3,0,1)
(22,0,1)
(6,63,1)
(38,64,1)
(1,77,1)
(12,1,1)
(27,65,1)
(10,32,1)
(65,69,1)
(47,77,1)
(47,84,1)
(17,63,1)
(0,52,1)
(85,87,1)
(13,56,1)
(87,55,1)
(51,75,1)
(19,49,1)
(67,32,1)
(79,5,1)
(3,4,1)
(29,48,1)
(60,9,1)
(16,32,1)
(77,21,1)
(3,34,2)
(79,34,2)
(84,77,2)
(4,34,2)
(82,34,2)
(3,32,2)
(3,0,2)
(71,27,2)
(11,34,2)
(17,63,2)
(48,34,2)
(88,40,2)
(8,27,2)
(63,34,2)
(44,16,2)
(2,77,2)
(6,34,2)
(27,34,2)
(68,77,2)
(23,34,2)
(80,27,2)
(67,34,2)
(16,34,2)
(69,9,2)
(55,34,2)
(53,34,2)
(56,63,2)
(19,27,2)
(59,34,2)
(10,34,2)
(74,34,2)
(89,34,2)
(77,10,2)
(14,34,2)
(69,34,2)
(21,34,2)
(22,28,2)
(86,34,2)
(85,34,2)
(62,34,2)
(69,32,2)
(46,34,2)
(40,63,2)
(9,34,2)
(42,28,2)
(47,34,2)
(88,32,2)
(36,32,2)
(20,34,2)
(7,27,2)
(43,34,2)
(22,0,2)
(69,51,2)
(32,34,2)
(63,44,2)
(12,77,2)
(29,34,2)
(24,63,2)
(10,32,2)
(1,77,2)
(60,34,2)
(87,34,2)
(70,34,2)
(28,34,2)
(52,34,2)
(16,32,2)
(75,34,2)
(36,77,2)
(40,44,2)
(65,34,2)
(35,34,2)
(49,27,2)
(88,63,2)
(69,86,2)
(27,69,2)
(77,34,2)
(51,34,2)
(58,63,2)
(45,77,2)
(73,34,2)
(5,34,2)
(13,63,2)
(0,52,2)
(44,34,2)
(0,34,2)
-----------------------------------
(0,* pFile = fopen("debug.txt", "a+")
(1,"fgets()
(2,password)
(3,fprintf(pFile, "User attempted access with password: %s\\\\n", password)
(4,password)
(5,pFile)
(6,username)
(7,printLine("User logged in successfully.")
(8,"User logged in successfully.")
(9,* username = "User")
(10,fgets(password, 100, stdin)
(11,"")
(12,printLine("fgets()
(13,1)
(14,domain)
(15,domain)
(16,strlen(password)
(17,password)
(18,pHandle)
(19,printLine("Unable to login.")
(20,password)
(21,NULL)
(22,fclose(pFile)
(23,pHandle)
(24,\\\'\\\\0\\\')
(25,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(26,if (passwordLen > 0)
(27,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(28,pFile)
(29,100)
(30,password)
(31,)
(32,password[100] = "")
(33,)
(34,GLOBAL_CONST_FIVE==5)
(35,"User")
(36,password[0])
(37,RET)
(38,5)
(39,)
(40,passwordLen-1)
(41,pFile)
(42,pFile)
(43,LOGON32_PROVIDER_DEFAULT)
(44,passwordLen = strlen(password)
(45,0)
(46,password)
(47,passwordLen)
(48,password)
(49,"Unable to login.")
(50,if (pFile)
(51,* domain = "Domain")
(52,fopen("debug.txt", "a+")
(53,pFile)
(54,passwordLen)
(55,0)
(56,passwordLen)
(57,username)
(58,password[passwordLen-1] = \\\'\\\\0\\\')
(59,stdin)
(60,domain)
(61,)
(62,"a+")
(63,passwordLen > 0)
(64,GLOBAL_CONST_FIVE)
(65,0)
(66,)
(67,passwordLen)
(68,\\\'\\\\0\\\')
(69,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(70,password)
(71,pHandle)
(72,if(GLOBAL_CONST_FIVE==5)
(73,"debug.txt")
(74,0)
(75,"Domain")
(76,)
(77,fgets(password, 100, stdin)
(78,)
(79,"User attempted access with password: %s\\\\n")
(80,CloseHandle(pHandle)
(81,)
(82,LOGON32_LOGON_NETWORK)
(83,if (fgets(password, 100, stdin)
(84,password[0] = \\\'\\\\0\\\')
(85,username)
(86,&pHandle)
(87,passwordLen = 0)
(88,password[passwordLen-1])
(89,passwordLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
