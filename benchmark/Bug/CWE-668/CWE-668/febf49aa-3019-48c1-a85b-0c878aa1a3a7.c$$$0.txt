-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_53_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_53_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_53_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_53_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data);
CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data)
CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink
CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink
data
data
-----joern-----
(2,43,0)
(28,0,0)
(24,47,0)
(27,17,0)
(29,59,0)
(69,53,0)
(16,62,0)
(48,6,0)
(31,44,0)
(41,55,0)
(25,46,0)
(37,45,0)
(8,70,0)
(3,58,0)
(38,25,0)
(13,47,0)
(26,44,0)
(63,16,0)
(34,39,0)
(43,46,0)
(54,47,0)
(15,54,0)
(41,46,0)
(39,47,0)
(1,46,0)
(46,47,0)
(6,66,0)
(62,41,0)
(64,46,0)
(5,20,0)
(56,66,0)
(4,46,0)
(4,36,0)
(10,63,0)
(12,36,0)
(45,3,0)
(18,53,0)
(32,17,0)
(46,39,0)
(18,32,0)
(62,16,0)
(67,69,0)
(9,55,0)
(19,32,0)
(7,32,0)
(55,54,0)
(19,46,0)
(53,69,0)
(16,23,0)
(4,69,0)
(16,63,0)
(21,54,0)
(52,18,0)
(45,44,0)
(20,62,0)
(43,29,0)
(44,45,0)
(22,9,0)
(57,36,0)
(69,4,0)
(65,63,0)
(43,55,0)
(45,46,0)
(62,20,0)
(50,18,0)
(32,19,0)
(51,55,0)
(60,41,0)
(14,19,0)
(9,46,0)
(61,41,0)
(55,9,0)
(70,59,0)
(66,55,0)
(35,39,0)
(66,6,0)
(25,47,0)
(33,4,0)
(11,29,0)
(36,4,0)
(40,66,0)
(53,18,0)
(30,62,0)
(42,3,0)
(36,32,0)
(23,16,0)
(68,43,0)
(63,55,0)
(41,62,0)
(44,32,0)
(50,52,1)
(56,55,1)
(26,37,1)
(18,32,1)
(19,14,1)
(7,20,1)
(12,33,1)
(68,70,1)
(30,16,1)
(63,10,1)
(25,46,1)
(4,36,1)
(25,38,1)
(45,46,1)
(38,53,1)
(60,61,1)
(53,18,1)
(36,57,1)
(61,6,1)
(69,67,1)
(51,46,1)
(31,26,1)
(2,68,1)
(34,35,1)
(33,18,1)
(38,3,1)
(69,4,1)
(46,39,1)
(46,64,1)
(41,46,1)
(63,55,1)
(70,8,1)
(41,55,1)
(6,66,1)
(41,60,1)
(16,63,1)
(67,4,1)
(39,34,1)
(37,53,1)
(32,19,1)
(62,16,1)
(52,32,1)
(8,20,1)
(18,50,1)
(55,9,1)
(38,29,1)
(43,2,1)
(6,48,1)
(1,39,1)
(20,5,1)
(10,65,1)
(62,41,1)
(43,55,1)
(43,46,1)
(48,66,1)
(36,32,1)
(9,46,1)
(42,45,1)
(57,12,1)
(29,11,1)
(3,42,1)
(45,44,1)
(5,62,1)
(22,51,1)
(14,7,1)
(65,41,1)
(62,30,1)
(19,46,1)
(11,43,1)
(4,46,1)
(9,22,1)
(40,56,1)
(66,55,1)
(44,32,1)
(44,31,1)
(38,6,1)
(49,25,1)
(20,62,1)
(64,1,1)
(53,69,1)
(16,23,1)
(66,40,1)
(70,20,2)
(33,18,2)
(14,20,2)
(20,62,2)
(53,20,2)
(11,20,2)
(9,46,2)
(6,66,2)
(60,6,2)
(63,6,2)
(43,46,2)
(37,53,2)
(62,6,2)
(4,36,2)
(4,18,2)
(18,32,2)
(67,18,2)
(41,46,2)
(41,55,2)
(42,53,2)
(69,4,2)
(30,6,2)
(10,6,2)
(45,53,2)
(36,18,2)
(16,63,2)
(19,46,2)
(69,18,2)
(32,20,2)
(31,53,2)
(65,6,2)
(53,69,2)
(46,39,2)
(61,6,2)
(7,20,2)
(26,53,2)
(19,20,2)
(25,46,2)
(68,20,2)
(50,20,2)
(16,6,2)
(4,46,2)
(66,55,2)
(44,32,2)
(43,55,2)
(16,23,2)
(44,53,2)
(57,18,2)
(41,6,2)
(36,32,2)
(45,44,2)
(29,20,2)
(52,20,2)
(2,20,2)
(12,18,2)
(62,41,2)
(45,46,2)
(3,53,2)
(43,20,2)
(8,20,2)
(5,6,2)
(53,18,2)
(32,19,2)
(20,6,2)
(55,9,2)
(62,16,2)
(18,20,2)
(63,55,2)
-----------------------------------
(0,)
(1,data)
(2,dataLen)
(3,data[dataLen-1] = \\\'\\\\0\\\')
(4,data[dataLen-1])
(5,NULL)
(6,250-dataLen > 1)
(7,dataLen)
(8,"fgets()
(9,strlen(data)
(10,dataLen)
(11,\\\'\\\\0\\\')
(12,dataLen)
(13,data)
(14,data)
(15,if (250-dataLen > 1)
(16,(int)
(17,)
(18,dataLen > 0)
(19,strlen(data)
(20,fgets(data+dataLen, (int)
(21,dataLen)
(22,data)
(23,int)
(24,dataBuffer)
(25,CWE427_Uncontrolled_Search_Path_Element__char_console_53b_badSink(data)
(26,dataLen)
(27,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(28,if (fgets(data+dataLen, (int)
(29,data[dataLen] = \\\'\\\\0\\\')
(30,stdin)
(31,1)
(32,dataLen = strlen(data)
(33,data)
(34,"PATH=")
(35,dataBuffer)
(36,dataLen-1)
(37,data)
(38,data)
(39,dataBuffer[250] = "PATH=")
(40,dataLen)
(41,data+dataLen)
(42,\\\'\\\\0\\\')
(43,data[dataLen])
(44,dataLen-1)
(45,data[dataLen-1])
(46,data = dataBuffer)
(47,)
(48,1)
(49,RET)
(50,0)
(51,dataLen)
(52,dataLen)
(53,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,)
(55,dataLen = strlen(data)
(56,250)
(57,1)
(58,)
(59,)
(60,dataLen)
(61,data)
(62,fgets(data+dataLen, (int)
(63,250-dataLen)
(64,dataBuffer)
(65,250)
(66,250-dataLen)
(67,\\\'\\\\n\\\')
(68,data)
(69,data[dataLen-1] == \\\'\\\\n\\\')
(70,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
