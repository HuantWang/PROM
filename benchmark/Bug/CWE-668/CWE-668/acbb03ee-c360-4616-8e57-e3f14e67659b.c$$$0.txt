-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_03_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    if(5==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
47,49
49,50
52,53
53,54
53,55
53,56
54,55
54,56
55,56
55,57
55,58
55,59
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
67,68
68,69
68,70
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
112,114
113,114
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,30,36,38,42,44,48,50,51,57,60,62,65,66,69,71,73,75,80,83,85,90,91,95,98,99,100,106,109,110,111,116,117,122,124,125,129,131
-----computeFrom-----
22,23
22,24
28,29
28,30
46,47
46,48
47,48
47,49
54,55
54,56
58,59
58,60
68,69
68,70
78,79
78,80
87,88
87,89
88,89
88,90
92,93
92,94
96,97
96,98
103,104
103,105
107,108
107,109
119,120
119,121
-----guardedBy-----
50,124
60,106
71,109
95,106
98,109
-----guardedByNegation-----
60,122
71,124
-----lastLexicalUse-----
60,122
71,124
-----jump-----
60,122
71,124
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_03_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_03_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_03_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(5==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
5==5
5
5
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(33,14,0)
(47,21,0)
(8,47,0)
(14,33,0)
(46,25,0)
(35,3,0)
(12,13,0)
(36,1,0)
(14,16,0)
(18,31,0)
(21,47,0)
(22,16,0)
(47,33,0)
(32,10,0)
(6,20,0)
(2,33,0)
(38,3,0)
(1,36,0)
(35,31,0)
(36,20,0)
(4,13,0)
(16,13,0)
(40,20,0)
(44,18,0)
(30,36,0)
(19,13,0)
(29,6,0)
(17,39,0)
(25,33,0)
(0,14,0)
(24,27,0)
(33,10,0)
(41,25,0)
(15,39,0)
(28,13,0)
(49,10,0)
(1,33,0)
(36,30,0)
(9,19,0)
(45,47,0)
(25,16,0)
(5,1,0)
(26,27,0)
(42,26,0)
(43,21,0)
(3,16,0)
(20,25,0)
(19,16,0)
(20,36,0)
(23,1,0)
(7,16,0)
(10,11,0)
(48,34,0)
(37,35,0)
(25,20,0)
(20,6,0)
(3,35,0)
(45,8,1)
(25,33,1)
(19,9,1)
(41,21,1)
(9,44,1)
(42,6,1)
(1,33,1)
(0,2,1)
(17,16,1)
(6,29,1)
(35,3,1)
(6,20,1)
(16,7,1)
(36,1,1)
(3,38,1)
(23,25,1)
(47,33,1)
(44,35,1)
(26,42,1)
(1,5,1)
(36,30,1)
(37,6,1)
(3,16,1)
(15,17,1)
(7,22,1)
(21,47,1)
(38,37,1)
(25,16,1)
(20,36,1)
(33,14,1)
(5,23,1)
(20,25,1)
(14,16,1)
(25,46,1)
(9,21,1)
(14,0,1)
(19,16,1)
(50,19,1)
(39,15,1)
(8,33,1)
(2,39,1)
(22,4,1)
(21,43,1)
(40,36,1)
(46,41,1)
(29,20,1)
(9,24,1)
(9,39,1)
(20,40,1)
(43,47,1)
(47,45,1)
(24,26,1)
(3,16,2)
(36,21,2)
(25,21,2)
(33,39,2)
(19,16,2)
(21,39,2)
(20,21,2)
(21,47,2)
(1,21,2)
(2,39,2)
(43,39,2)
(1,33,2)
(36,1,2)
(41,21,2)
(47,33,2)
(5,21,2)
(45,39,2)
(35,3,2)
(46,21,2)
(42,6,2)
(37,6,2)
(44,6,2)
(24,6,2)
(14,16,2)
(26,6,2)
(38,6,2)
(8,39,2)
(23,21,2)
(20,36,2)
(6,21,2)
(14,39,2)
(47,39,2)
(40,21,2)
(33,14,2)
(3,6,2)
(25,33,2)
(36,30,2)
(35,6,2)
(6,20,2)
(0,39,2)
(29,21,2)
(20,25,2)
(25,16,2)
-----------------------------------
(0,data)
(1,250-dataLen)
(2,dataLen)
(3,wcslen(data)
(4,"PATH=")
(5,dataLen)
(6,fgetws(data+dataLen, (int)
(7,dataBuffer)
(8,250)
(9,data)
(10,)
(11,)
(12,if(5==5)
(13,)
(14,wcslen(data)
(15,5)
(16,data = dataBuffer)
(17,5)
(18,)
(19,PUTENV(data)
(20,fgetws(data+dataLen, (int)
(21,250-dataLen > 1)
(22,data)
(23,250)
(24,\\\'\\\\0\\\')
(25,data+dataLen)
(26,printLine("fgetws()
(27,)
(28,data)
(29,NULL)
(30,int)
(31,)
(32,dataLen)
(33,dataLen = wcslen(data)
(34,)
(35,dataLen = wcslen(data)
(36,(int)
(37,dataLen)
(38,data)
(39,5==5)
(40,stdin)
(41,data)
(42,"fgetws()
(43,1)
(44,\\\'\\\\0\\\')
(45,dataLen)
(46,dataLen)
(47,250-dataLen)
(48,if (fgetws(data+dataLen, (int)
(49,if (250-dataLen > 1)
(50,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
