-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
57,59
59,60
62,63
63,64
63,65
63,66
64,65
64,66
65,66
65,67
65,68
65,69
66,67
68,69
68,70
69,70
71,72
73,74
73,75
74,75
74,76
77,78
78,79
78,80
80,81
82,83
84,85
86,87
86,88
87,88
88,89
88,90
89,90
91,92
91,93
92,93
94,95
96,97
96,98
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
118,119
122,123
122,124
123,124
124,125
124,126
125,126
128,129
129,130
129,131
130,131
130,132
131,132
133,134
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,35,39,41,46,48,52,54,58,60,61,67,70,72,75,76,79,81,83,85,90,93,95,100,101,105,108,109,110,116,119,120,121,126,127,132,134,135,139,141
-----computeFrom-----
37,38
37,39
56,57
56,58
57,58
57,59
64,65
64,66
68,69
68,70
78,79
78,80
88,89
88,90
97,98
97,99
98,99
98,100
102,103
102,104
106,107
106,108
113,114
113,115
117,118
117,119
129,130
129,131
-----guardedBy-----
60,134
70,116
81,119
105,116
108,119
-----guardedByNegation-----
70,132
81,134
-----lastLexicalUse-----
70,132
81,134
-----jump-----
70,132
81,134
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_44_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(39,2,0)
(20,26,0)
(24,33,0)
(19,18,0)
(44,5,0)
(14,15,0)
(49,32,0)
(10,20,0)
(31,33,0)
(15,34,0)
(6,24,0)
(15,45,0)
(12,34,0)
(48,37,0)
(42,4,0)
(11,3,0)
(32,24,0)
(41,31,0)
(4,20,0)
(2,36,0)
(0,14,0)
(5,40,0)
(20,32,0)
(26,20,0)
(4,42,0)
(7,14,0)
(32,15,0)
(37,24,0)
(28,26,0)
(30,32,0)
(4,14,0)
(38,45,0)
(34,15,0)
(29,45,0)
(25,24,0)
(21,33,0)
(46,19,0)
(47,15,0)
(45,33,0)
(17,19,0)
(43,6,0)
(13,24,0)
(37,2,0)
(14,4,0)
(35,40,0)
(23,31,0)
(34,24,0)
(6,33,0)
(18,19,0)
(9,33,0)
(1,33,0)
(2,37,0)
(19,15,0)
(22,18,0)
(32,20,0)
(3,36,0)
(20,4,0)
(16,27,0)
(34,24,1)
(18,22,1)
(24,25,1)
(4,14,1)
(13,9,1)
(20,10,1)
(4,42,1)
(22,19,1)
(32,30,1)
(6,43,1)
(28,20,1)
(15,34,1)
(6,24,1)
(0,7,1)
(43,35,1)
(30,49,1)
(26,28,1)
(11,2,1)
(39,26,1)
(49,18,1)
(41,23,1)
(32,24,1)
(44,26,1)
(26,20,1)
(14,15,1)
(37,48,1)
(32,15,1)
(37,24,1)
(7,32,1)
(18,19,1)
(5,44,1)
(10,4,1)
(19,46,1)
(48,39,1)
(34,12,1)
(8,6,1)
(43,18,1)
(47,24,1)
(35,5,1)
(19,15,1)
(31,41,1)
(20,32,1)
(9,31,1)
(14,0,1)
(43,11,1)
(17,15,1)
(12,47,1)
(2,37,1)
(25,13,1)
(46,17,1)
(20,4,1)
(32,24,2)
(7,18,2)
(20,4,2)
(15,34,2)
(32,18,2)
(18,19,2)
(49,18,2)
(37,26,2)
(4,14,2)
(19,15,2)
(30,18,2)
(48,26,2)
(11,26,2)
(4,18,2)
(32,15,2)
(14,15,2)
(39,26,2)
(44,26,2)
(2,26,2)
(5,26,2)
(34,24,2)
(26,18,2)
(28,18,2)
(14,18,2)
(20,18,2)
(10,18,2)
(35,26,2)
(37,24,2)
(26,20,2)
(2,37,2)
(0,18,2)
(6,24,2)
(4,42,2)
(20,32,2)
-----------------------------------
(0,dataLen)
(1,data)
(2,dataLen = wcslen(data)
(3,)
(4,(int)
(5,printLine("fgetws()
(6,funcPtr(data)
(7,250)
(8,RET)
(9,"PATH=")
(10,stdin)
(11,\\\'\\\\0\\\')
(12,data)
(13,data)
(14,250-dataLen)
(15,dataLen = wcslen(data)
(16,if (fgetws(data+dataLen, (int)
(17,250)
(18,250-dataLen > 1)
(19,250-dataLen)
(20,fgetws(data+dataLen, (int)
(21,funcPtr)
(22,1)
(23,funcPtr)
(24,data = dataBuffer)
(25,dataBuffer)
(26,fgetws(data+dataLen, (int)
(27,)
(28,NULL)
(29,if (250-dataLen > 1)
(30,dataLen)
(31,(*funcPtr)
(32,data+dataLen)
(33,)
(34,wcslen(data)
(35,\\\'\\\\0\\\')
(36,)
(37,wcslen(data)
(38,dataLen)
(39,dataLen)
(40,)
(41,badSink)
(42,int)
(43,data)
(44,"fgetws()
(45,)
(46,dataLen)
(47,dataLen)
(48,data)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
