-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_01_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
67,76
67,77
67,78
67,79
67,80
67,81
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
94,95
97,98
98,99
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
131,132
133,134
133,135
134,135
134,136
135,136
135,137
135,138
135,139
136,137
138,139
140,141
140,142
141,142
141,143
142,143
144,145
146,147
147,148
149,150
150,151
151,152
153,154
155,156
157,158
158,159
158,160
159,160
161,162
161,163
161,164
161,165
161,166
162,163
164,165
166,167
166,168
167,168
167,169
169,170
171,172
172,173
172,174
173,174
175,176
177,178
177,179
178,179
179,180
179,181
182,183
183,184
183,185
184,185
184,186
186,187
190,191
190,192
191,192
191,193
192,193
192,194
193,194
195,196
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
205,207
206,207
208,209
208,210
209,210
211,212
211,213
212,213
214,215
215,216
215,217
219,220
220,221
220,222
221,222
223,224
223,225
223,226
224,225
226,227
229,230
229,231
230,231
232,233
233,234
234,235
234,236
235,236
236,237
239,240
240,241
240,242
241,242
243,244
243,245
243,246
244,245
246,247
249,250
249,251
250,251
252,253
253,254
254,255
254,256
255,256
256,257
260,261
260,262
261,262
261,263
262,263
264,265
266,267
267,268
268,269
268,270
269,270
271,272
273,274
274,275
274,276
275,276
277,278
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,32,36,38,41,43,44,48,50,53,57,59,63,65,71,74,76,78,80,84,86,88,92,95,96,100,105,106,108,114,115,116,119,121,126,127,130,132,137,139,143,145,148,152,154,156,160,163,165,168,170,174,176,180,181,185,187,188,189,194,196,199,200,202,207,210,213,216,217,218,222,225,227,228,231,237,238,242,245,247,248,251,257,258,259,263,265,270,272,276,278
-----computeFrom-----
22,23
22,24
69,70
69,71
82,83
82,84
102,103
102,104
110,111
110,112
123,124
123,125
134,135
134,136
158,159
158,160
172,173
172,174
177,178
177,179
183,184
183,185
184,185
184,186
191,192
191,193
192,193
192,194
197,198
197,199
204,205
204,206
208,209
208,210
211,212
211,213
220,221
220,222
234,235
234,236
240,241
240,242
254,255
254,256
261,262
261,263
-----guardedBy-----
263,272
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_01_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_01_bad()
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_01_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (250 - dataLen - 1)
sizeof(char)
char
char

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(152,45,0)
(22,48,0)
(142,123,0)
(87,104,0)
(6,100,0)
(100,6,0)
(122,42,0)
(119,65,0)
(31,112,0)
(28,11,0)
(15,49,0)
(47,123,0)
(79,14,0)
(149,4,0)
(83,104,0)
(147,24,0)
(155,112,0)
(52,15,0)
(93,100,0)
(124,157,0)
(118,130,0)
(157,130,0)
(18,39,0)
(149,100,0)
(80,107,0)
(21,74,0)
(169,117,0)
(15,165,0)
(151,45,0)
(116,163,0)
(98,4,0)
(113,117,0)
(108,105,0)
(81,38,0)
(19,4,0)
(129,14,0)
(138,43,0)
(55,11,0)
(143,45,0)
(75,100,0)
(33,134,0)
(168,1,0)
(166,57,0)
(55,141,0)
(93,36,0)
(50,62,0)
(158,66,0)
(136,72,0)
(24,45,0)
(72,107,0)
(126,57,0)
(132,119,0)
(49,30,0)
(55,18,0)
(93,167,0)
(125,117,0)
(74,1,0)
(95,66,0)
(59,117,0)
(48,22,0)
(131,100,0)
(65,119,0)
(159,85,0)
(110,150,0)
(42,16,0)
(86,45,0)
(53,70,0)
(141,133,0)
(85,165,0)
(44,117,0)
(156,24,0)
(130,117,0)
(61,28,0)
(128,70,0)
(7,148,0)
(87,54,0)
(8,117,0)
(56,118,0)
(100,93,0)
(87,14,0)
(145,141,0)
(65,117,0)
(97,127,0)
(85,123,0)
(154,113,0)
(67,127,0)
(11,28,0)
(1,74,0)
(74,21,0)
(37,117,0)
(57,169,0)
(150,169,0)
(103,14,0)
(107,117,0)
(4,149,0)
(120,79,0)
(18,55,0)
(96,117,0)
(26,44,0)
(153,45,0)
(3,68,0)
(66,169,0)
(25,62,0)
(167,105,0)
(44,26,0)
(1,6,0)
(94,105,0)
(14,169,0)
(42,24,0)
(63,133,0)
(133,141,0)
(78,27,0)
(2,21,0)
(22,134,0)
(144,151,0)
(105,167,0)
(40,23,0)
(100,149,0)
(23,127,0)
(10,49,0)
(84,55,0)
(165,85,0)
(51,68,0)
(163,123,0)
(134,22,0)
(69,38,0)
(64,73,0)
(18,123,0)
(123,127,0)
(163,107,0)
(112,44,0)
(130,118,0)
(0,1,0)
(91,45,0)
(137,138,0)
(41,45,0)
(11,55,0)
(9,11,0)
(66,24,0)
(67,123,0)
(100,169,0)
(20,45,0)
(146,149,0)
(88,18,0)
(167,93,0)
(70,128,0)
(76,103,0)
(12,45,0)
(13,70,0)
(5,45,0)
(17,39,0)
(135,85,0)
(114,163,0)
(107,163,0)
(101,23,0)
(165,117,0)
(133,123,0)
(162,26,0)
(45,127,0)
(21,6,0)
(121,140,0)
(102,57,0)
(106,165,0)
(141,45,0)
(89,167,0)
(130,157,0)
(32,128,0)
(161,151,0)
(11,6,0)
(123,23,0)
(35,117,0)
(62,117,0)
(42,169,0)
(128,65,0)
(14,87,0)
(164,169,0)
(29,48,0)
(36,93,0)
(22,38,0)
(72,138,0)
(68,113,0)
(90,36,0)
(160,6,0)
(149,146,0)
(109,150,0)
(92,45,0)
(14,79,0)
(34,67,0)
(39,117,0)
(60,127,0)
(71,21,0)
(4,123,0)
(169,57,0)
(14,103,0)
(4,141,0)
(6,117,0)
(54,87,0)
(77,46,0)
(105,141,0)
(104,87,0)
(58,130,0)
(38,22,0)
(165,85,1)
(52,111,1)
(103,76,1)
(110,169,1)
(105,141,1)
(121,103,1)
(134,33,1)
(55,11,1)
(128,70,1)
(107,163,1)
(67,123,1)
(131,93,1)
(169,57,1)
(85,123,1)
(50,134,1)
(51,3,1)
(55,141,1)
(66,95,1)
(4,141,1)
(75,160,1)
(137,72,1)
(124,150,1)
(118,56,1)
(18,55,1)
(93,167,1)
(17,18,1)
(38,69,1)
(112,31,1)
(68,51,1)
(100,93,1)
(13,53,1)
(142,23,1)
(139,107,1)
(99,67,1)
(123,47,1)
(19,75,1)
(163,116,1)
(49,10,1)
(126,102,1)
(109,110,1)
(100,131,1)
(28,61,1)
(7,150,1)
(57,166,1)
(141,133,1)
(158,7,1)
(156,151,1)
(33,22,1)
(61,9,1)
(159,106,1)
(29,38,1)
(129,44,1)
(158,64,1)
(70,13,1)
(4,98,1)
(81,141,1)
(14,79,1)
(80,39,1)
(34,78,1)
(87,104,1)
(71,1,1)
(116,114,1)
(168,0,1)
(32,70,1)
(1,6,1)
(158,77,1)
(82,66,1)
(162,112,1)
(106,138,1)
(24,147,1)
(123,23,1)
(150,169,1)
(157,124,1)
(128,32,1)
(104,83,1)
(98,19,1)
(163,123,1)
(34,82,1)
(66,169,1)
(58,157,1)
(90,149,1)
(119,132,1)
(167,105,1)
(47,142,1)
(22,38,1)
(136,139,1)
(113,154,1)
(111,165,1)
(151,161,1)
(133,123,1)
(158,121,1)
(69,81,1)
(64,74,1)
(160,103,1)
(105,94,1)
(89,36,1)
(1,168,1)
(87,54,1)
(164,62,1)
(147,156,1)
(4,123,1)
(2,71,1)
(22,48,1)
(10,15,1)
(138,137,1)
(31,155,1)
(94,108,1)
(14,87,1)
(144,123,1)
(72,136,1)
(100,149,1)
(63,145,1)
(83,129,1)
(14,169,1)
(79,120,1)
(74,1,1)
(158,115,1)
(114,80,1)
(0,6,1)
(88,74,1)
(166,126,1)
(135,159,1)
(145,24,1)
(3,130,1)
(21,6,1)
(106,139,1)
(134,22,1)
(76,14,1)
(74,21,1)
(72,107,1)
(9,84,1)
(67,34,1)
(18,123,1)
(25,50,1)
(149,4,1)
(130,157,1)
(100,169,1)
(6,100,1)
(15,52,1)
(42,169,1)
(48,29,1)
(11,28,1)
(42,24,1)
(65,119,1)
(36,90,1)
(44,26,1)
(23,40,1)
(42,122,1)
(56,58,1)
(115,49,1)
(66,24,1)
(81,115,1)
(95,158,1)
(82,42,1)
(84,88,1)
(122,66,1)
(115,111,1)
(40,101,1)
(77,134,1)
(149,146,1)
(62,25,1)
(108,89,1)
(130,118,1)
(102,164,1)
(155,65,1)
(133,63,1)
(11,6,1)
(154,68,1)
(132,128,1)
(85,135,1)
(150,109,1)
(15,165,1)
(103,14,1)
(39,17,1)
(161,144,1)
(26,162,1)
(120,87,1)
(93,36,1)
(78,82,1)
(21,2,1)
(53,113,1)
(14,150,2)
(98,103,2)
(11,28,2)
(130,150,2)
(160,103,2)
(163,74,2)
(85,74,2)
(121,103,2)
(48,115,2)
(13,150,2)
(94,103,2)
(42,169,2)
(106,74,2)
(122,66,2)
(150,134,2)
(150,169,2)
(139,74,2)
(107,74,2)
(102,134,2)
(88,74,2)
(62,134,2)
(4,123,2)
(28,74,2)
(83,150,2)
(130,157,2)
(31,150,2)
(90,103,2)
(105,103,2)
(36,103,2)
(136,139,2)
(135,74,2)
(29,115,2)
(138,139,2)
(18,55,2)
(65,119,2)
(53,150,2)
(11,74,2)
(162,150,2)
(128,150,2)
(116,74,2)
(3,150,2)
(2,1,2)
(78,82,2)
(66,24,2)
(10,111,2)
(18,74,2)
(75,103,2)
(126,134,2)
(107,163,2)
(55,74,2)
(74,21,2)
(66,169,2)
(1,6,2)
(72,107,2)
(157,150,2)
(93,36,2)
(124,150,2)
(115,74,2)
(26,150,2)
(77,134,2)
(17,74,2)
(149,146,2)
(14,87,2)
(64,74,2)
(1,103,2)
(133,123,2)
(44,150,2)
(110,134,2)
(149,4,2)
(93,167,2)
(120,150,2)
(109,134,2)
(165,85,2)
(6,100,2)
(103,14,2)
(154,150,2)
(49,111,2)
(84,74,2)
(22,48,2)
(105,141,2)
(89,103,2)
(71,1,2)
(68,150,2)
(112,150,2)
(81,115,2)
(55,11,2)
(11,6,2)
(137,139,2)
(132,150,2)
(19,103,2)
(167,103,2)
(72,139,2)
(7,150,2)
(168,103,2)
(4,141,2)
(6,103,2)
(141,133,2)
(58,150,2)
(25,134,2)
(103,150,2)
(165,74,2)
(39,74,2)
(87,54,2)
(4,103,2)
(100,103,2)
(18,123,2)
(76,150,2)
(131,103,2)
(22,38,2)
(61,74,2)
(38,115,2)
(52,111,2)
(15,165,2)
(74,103,2)
(134,22,2)
(87,104,2)
(149,103,2)
(56,150,2)
(57,134,2)
(163,123,2)
(32,150,2)
(79,150,2)
(130,118,2)
(87,150,2)
(100,93,2)
(21,1,2)
(9,74,2)
(134,115,2)
(169,57,2)
(159,74,2)
(42,66,2)
(114,74,2)
(44,26,2)
(100,149,2)
(67,123,2)
(129,150,2)
(111,74,2)
(80,74,2)
(123,23,2)
(33,115,2)
(42,24,2)
(74,1,2)
(164,134,2)
(15,111,2)
(21,6,2)
(55,141,2)
(113,150,2)
(51,150,2)
(128,70,2)
(69,115,2)
(118,150,2)
(14,79,2)
(14,169,2)
(22,115,2)
(0,103,2)
(155,150,2)
(166,134,2)
(70,150,2)
(167,105,2)
(119,150,2)
(169,134,2)
(108,103,2)
(65,150,2)
(50,134,2)
(104,150,2)
(100,169,2)
(85,123,2)
(93,103,2)
-----------------------------------
(0,recvResult)
(1,recvResult == SOCKET_ERROR)
(2,0)
(3,service)
(4,data + dataLen)
(5,recvResult)
(6,recvResult = recv(connectSocket, (char *)
(7,break;)
(8,if (WSAStartup(MAKEWORD(2,2)
(9,recvResult)
(10,\\\'\\\\0\\\')
(11,recvResult / sizeof(char)
(12,do)
(13,sin_addr)
(14,connect(connectSocket, (struct sockaddr*)
(15,*replace)
(16,)
(17,\\\'\\\\0\\\')
(18,data[dataLen + recvResult / sizeof(char)
(19,data)
(20,service)
(21,recvResult == 0)
(22,WSAStartup(MAKEWORD(2,2)
(23,dataBuffer[250] = "PATH=")
(24,connectSocket = INVALID_SOCKET)
(25,1)
(26,htons(TCP_PORT)
(27,)
(28,sizeof(char)
(29,wsaData)
(30,)
(31,sin_port)
(32,s_addr)
(33,NO_ERROR)
(34,data)
(35,if (replace)
(36,sizeof(char)
(37,if (replace)
(38,MAKEWORD(2,2)
(39,data[dataLen + recvResult / sizeof(char)
(40,"PATH=")
(41,if (connectSocket != INVALID_SOCKET)
(42,CLOSE_SOCKET(connectSocket)
(43,)
(44,service.sin_port = htons(TCP_PORT)
(45,)
(46,)
(47,dataBuffer)
(48,&wsaData)
(49,*replace = \\\'\\\\0\\\')
(50,wsaDataInit)
(51,sin_family)
(52,replace)
(53,service)
(54,struct sockaddr*)
(55,dataLen + recvResult / sizeof(char)
(56,service)
(57,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(58,0)
(59,if (recvResult == SOCKET_ERROR || recvResult == 0)
(60,data)
(61,char)
(62,wsaDataInit = 1)
(63,data)
(64,break;)
(65,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(66,connectSocket != INVALID_SOCKET)
(67,PUTENV(data)
(68,service.sin_family)
(69,2)
(70,service.sin_addr)
(71,recvResult)
(72,*replace)
(73,)
(74,recvResult == SOCKET_ERROR || recvResult == 0)
(75,connectSocket)
(76,SOCKET_ERROR)
(77,break;)
(78,WSACleanup()
(79,sizeof(service)
(80,replace)
(81,2)
(82,wsaDataInit)
(83,service)
(84,dataLen)
(85,strchr(data, \\\'\\\\n\\\')
(86,wsaData)
(87,(struct sockaddr*)
(88,data)
(89,250)
(90,char)
(91,connectSocket)
(92,replace)
(93,sizeof(char)
(94,1)
(95,INVALID_SOCKET)
(96,if (connectSocket == INVALID_SOCKET)
(97,dataBuffer)
(98,dataLen)
(99,RET)
(100,recv(connectSocket, (char *)
(101,dataBuffer)
(102,AF_INET)
(103,connect(connectSocket, (struct sockaddr*)
(104,&service)
(105,dataLen - 1)
(106,replace)
(107,replace = strchr(data, \\\'\\\\r\\\')
(108,dataLen)
(109,INVALID_SOCKET)
(110,connectSocket)
(111,replace)
(112,service.sin_port)
(113,service.sin_family = AF_INET)
(114,data)
(115,0)
(116,\\\'\\\\r\\\')
(117,)
(118,sizeof(service)
(119,inet_addr(IP_ADDRESS)
(120,service)
(121,break;)
(122,connectSocket)
(123,data = dataBuffer)
(124,service)
(125,if (connect(connectSocket, (struct sockaddr*)
(126,SOCK_STREAM)
(127,)
(128,service.sin_addr.s_addr)
(129,connectSocket)
(130,memset(&service, 0, sizeof(service)
(131,0)
(132,IP_ADDRESS)
(133,strlen(data)
(134,WSAStartup(MAKEWORD(2,2)
(135,\\\'\\\\n\\\')
(136,replace)
(137,\\\'\\\\0\\\')
(138,*replace = \\\'\\\\0\\\')
(139,replace)
(140,)
(141,dataLen = strlen(data)
(142,data)
(143,dataLen)
(144,wsaDataInit)
(145,dataLen)
(146,char *)
(147,INVALID_SOCKET)
(148,)
(149,(char *)
(150,connectSocket == INVALID_SOCKET)
(151,wsaDataInit = 0)
(152,if (wsaDataInit)
(153,wsaDataInit)
(154,AF_INET)
(155,service)
(156,connectSocket)
(157,&service)
(158,connectSocket)
(159,data)
(160,recvResult)
(161,0)
(162,TCP_PORT)
(163,strchr(data, \\\'\\\\r\\\')
(164,connectSocket)
(165,replace = strchr(data, \\\'\\\\n\\\')
(166,IPPROTO_TCP)
(167,250 - dataLen - 1)
(168,SOCKET_ERROR)
(169,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
