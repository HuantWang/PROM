-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    {
        FILE *pFile;
        pFile = fopen("passwords.txt", "r");
        if (pFile != NULL)
        {
            /* POTENTIAL FLAW: Read the password from a file */
            if (fgetws(data, 100, pFile) == NULL)
            {
                data[0] = L'\0';
            }
            fclose(pFile);
        }
        else
        {
            data[0] = L'\0';
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
24,26
24,27
25,26
29,30
29,31
29,32
30,31
30,32
31,32
33,34
35,36
35,37
36,37
36,38
37,38
37,39
38,39
38,40
38,41
38,42
39,40
41,42
44,45
46,47
48,49
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
65,67
66,67
70,71
71,72
-----nextToken-----
2,4,5,7,9,10,16,18,19,23,26,27,28,32,34,40,42,43,45,47,53,54,55,59,61,67,68,69,72
-----computeFrom-----
21,22
21,23
30,31
30,32
37,38
37,39
50,51
50,52
64,65
64,66
-----guardedBy-----
34,47
32,61
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    {        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }    return data;}
{        FILE *pFile;        pFile = fopen("passwords.txt", "r");        if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }    }
FILE *pFile;
FILE *pFile;
FILE
FILE
*pFile
*
pFile
pFile = fopen("passwords.txt", "r");
pFile = fopen("passwords.txt", "r")
pFile
pFile
fopen("passwords.txt", "r")
fopen
fopen
"passwords.txt"
"r"
if (pFile != NULL)        {            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }        else        {            data[0] = L'\0';        }
pFile != NULL
pFile
pFile
NULL
NULL
{            /* POTENTIAL FLAW: Read the password from a file */            if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }            fclose(pFile);        }
if (fgetws(data, 100, pFile) == NULL)            {                data[0] = L'\0';            }
fgetws(data, 100, pFile) == NULL
fgetws(data, 100, pFile)
fgetws
fgetws
data
data
100
pFile
pFile
NULL
NULL
{                data[0] = L'\0';            }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{            data[0] = L'\0';        }
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
return data;
data
data
-----joern-----
(27,5,0)
(17,26,0)
(0,9,0)
(25,23,0)
(9,14,0)
(20,5,0)
(5,26,0)
(0,23,0)
(2,9,0)
(7,0,0)
(21,5,0)
(28,13,0)
(29,23,0)
(23,0,0)
(22,17,0)
(18,20,0)
(19,9,0)
(17,14,0)
(24,13,0)
(12,11,0)
(24,0,0)
(15,4,0)
(6,5,0)
(8,16,0)
(16,0,0)
(3,24,0)
(1,16,0)
(10,17,0)
(5,20,0)
(5,0,0)
(29,7,1)
(15,16,1)
(23,25,1)
(16,0,1)
(5,27,1)
(22,17,1)
(27,6,1)
(3,12,1)
(20,18,1)
(3,20,1)
(20,5,1)
(10,24,1)
(24,0,1)
(16,8,1)
(5,26,1)
(17,26,1)
(24,3,1)
(18,5,1)
(25,29,1)
(5,0,1)
(1,0,1)
(21,16,1)
(8,1,1)
(17,10,1)
(6,21,1)
(0,23,1)
(12,20,1)
(10,15,1)
(21,16,2)
(6,16,2)
(20,16,2)
(24,0,2)
(0,23,2)
(17,26,2)
(16,0,2)
(15,16,2)
(22,17,2)
(27,16,2)
(3,16,2)
(5,26,2)
(12,20,2)
(20,5,2)
(5,0,2)
(5,16,2)
(18,16,2)
(24,16,2)
-----------------------------------
(0,pFile = fopen("passwords.txt", "r")
(1,pFile)
(2,if (pFile != NULL)
(3,pFile)
(4,)
(5,fgetws(data, 100, pFile)
(6,100)
(7,pFile)
(8,NULL)
(9,)
(10,data)
(11,)
(12,\\\'\\\\0\\\')
(13,)
(14,)
(15,\\\'\\\\0\\\')
(16,pFile != NULL)
(17,return data;)
(18,NULL)
(19,pFile)
(20,fgetws(data, 100, pFile)
(21,data)
(22,RET)
(23,fopen("passwords.txt", "r")
(24,fclose(pFile)
(25,"r")
(26,wchar_t * data)
(27,pFile)
(28,if (fgetws(data, 100, pFile)
(29,"passwords.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
