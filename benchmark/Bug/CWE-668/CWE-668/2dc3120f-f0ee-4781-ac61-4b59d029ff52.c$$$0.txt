-----label-----
1
-----code-----
void CWE377_Insecure_Temporary_File__char_w32GetTempFileName_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char filename[MAX_PATH] = "";
            int fileDesc;
            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,
            * leading to an inescapable race condition when we try to open it again. */
            if (GetTempFileNameA(".", "bad", 0, filename) == 0)
            {
                exit(1);
            }
            printLine(filename);
            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */
            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
            if (fileDesc != -1)
            {
                printLine("Temporary file was opened...now closing file");
                CLOSE(fileDesc);
            }
        }
    }
    else
    {
        {
            char filename[MAX_PATH] = "";
            int fileDesc;
            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating
             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */
            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */
            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)
            {
                exit(1);
            }
            printLine(filename);
            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags
            * NOTE: This is not a perfect solution, but it is the base case scenario */
            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);
            if (fileDesc != -1)
            {
                printLine("Temporary file was opened...now closing file");
                CLOSE(fileDesc);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
18,19
20,21
22,23
23,24
23,25
25,26
27,28
27,29
28,29
28,30
29,30
29,31
29,32
29,33
29,34
30,31
35,36
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
54,58
55,56
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
88,92
88,93
88,94
89,90
90,91
90,92
92,93
92,94
92,95
94,95
95,96
97,98
99,100
100,101
100,102
102,103
104,105
104,106
105,106
105,107
106,107
106,108
106,109
106,110
106,111
107,108
111,112
111,113
112,113
113,114
116,117
119,120
120,121
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
135,137
135,138
135,139
136,137
138,139
140,141
140,142
141,142
141,143
142,143
144,145
146,147
148,149
148,150
149,150
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
159,161
160,161
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
-----nextToken-----
2,4,9,14,16,19,21,24,26,31,32,33,34,36,37,42,43,47,49,53,56,58,61,63,66,68,72,74,79,80,84,86,91,93,96,98,101,103,108,109,110,114,115,117,118,123,124,128,130,134,137,139,143,145,147,150,152,156,158,163,164,168,170
-----computeFrom-----
28,29
28,30
51,52
51,53
59,60
59,61
64,65
64,66
70,71
70,72
105,106
105,107
111,112
111,113
132,133
132,134
140,141
140,142
141,142
141,143
148,149
148,150
154,155
154,156
-----guardedBy-----
72,86
156,170
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE377_Insecure_Temporary_File__char_w32GetTempFileName_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }    else    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags            * NOTE: This is not a perfect solution, but it is the base case scenario */            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }}
void
CWE377_Insecure_Temporary_File__char_w32GetTempFileName_12_bad()
CWE377_Insecure_Temporary_File__char_w32GetTempFileName_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }    else    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags            * NOTE: This is not a perfect solution, but it is the base case scenario */            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }}
if(globalReturnsTrueOrFalse())    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }    else    {        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags            * NOTE: This is not a perfect solution, but it is the base case scenario */            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }
{            char filename[MAX_PATH] = "";            int fileDesc;            /* FLAW: Passing 0 in for uUnique tells GetTempFileName to create and then close the file,            * leading to an inescapable race condition when we try to open it again. */            if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FLAW: Open a temporary file using open() and flags that do not prevent a race condition */            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }
char filename[MAX_PATH] = "";
char filename[MAX_PATH] = "";
char
filename[MAX_PATH] = ""
filename
[MAX_PATH]
MAX_PATH
MAX_PATH
= ""
""
int fileDesc;
int fileDesc;
int
fileDesc
fileDesc
if (GetTempFileNameA(".", "bad", 0, filename) == 0)            {                exit(1);            }
GetTempFileNameA(".", "bad", 0, filename) == 0
GetTempFileNameA(".", "bad", 0, filename)
GetTempFileNameA
GetTempFileNameA
"."
"bad"
0
filename
filename
0
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
printLine(filename);
printLine(filename)
printLine
printLine
filename
filename
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);
fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
fileDesc
fileDesc
OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
OPEN
OPEN
filename
filename
O_RDWR|O_CREAT
O_RDWR
O_RDWR
O_CREAT
O_CREAT
S_IREAD|S_IWRITE
S_IREAD
S_IREAD
S_IWRITE
S_IWRITE
if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
fileDesc != -1
fileDesc
fileDesc
-1
1
{                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
printLine("Temporary file was opened...now closing file");
printLine("Temporary file was opened...now closing file")
printLine
printLine
"Temporary file was opened...now closing file"
CLOSE(fileDesc);
CLOSE(fileDesc)
CLOSE
CLOSE
fileDesc
fileDesc
{        {            char filename[MAX_PATH] = "";            int fileDesc;            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags            * NOTE: This is not a perfect solution, but it is the base case scenario */            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }    }
{            char filename[MAX_PATH] = "";            int fileDesc;            /* FIX: Passing a non-zero value in for uUnique prevents GetTempFileName from creating             * and then closing the file, at the cost of no longer guaranteeing the name is unique. */            /* INCIDENTAL CWE338 Weak PRNG - use of rand() as a PRNG */            if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }            printLine(filename);            /* FIX: Open a temporary file using open() and the O_CREAT and O_EXCL flags            * NOTE: This is not a perfect solution, but it is the base case scenario */            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);            if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }        }
char filename[MAX_PATH] = "";
char filename[MAX_PATH] = "";
char
filename[MAX_PATH] = ""
filename
[MAX_PATH]
MAX_PATH
MAX_PATH
= ""
""
int fileDesc;
int fileDesc;
int
fileDesc
fileDesc
if (GetTempFileNameA(".", "good", rand() + 1, filename) == 0)            {                exit(1);            }
GetTempFileNameA(".", "good", rand() + 1, filename) == 0
GetTempFileNameA(".", "good", rand() + 1, filename)
GetTempFileNameA
GetTempFileNameA
"."
"good"
rand() + 1
rand()
rand
rand
1
filename
filename
0
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
printLine(filename);
printLine(filename)
printLine
printLine
filename
filename
fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);
fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE)
fileDesc
fileDesc
OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE)
OPEN
OPEN
filename
filename
O_RDWR|O_CREAT|O_EXCL
O_RDWR|O_CREAT
O_RDWR
O_RDWR
O_CREAT
O_CREAT
O_EXCL
O_EXCL
S_IREAD|S_IWRITE
S_IREAD
S_IREAD
S_IWRITE
S_IWRITE
if (fileDesc != -1)            {                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
fileDesc != -1
fileDesc
fileDesc
-1
1
{                printLine("Temporary file was opened...now closing file");                CLOSE(fileDesc);            }
printLine("Temporary file was opened...now closing file");
printLine("Temporary file was opened...now closing file")
printLine
printLine
"Temporary file was opened...now closing file"
CLOSE(fileDesc);
CLOSE(fileDesc)
CLOSE
CLOSE
fileDesc
fileDesc
-----joern-----
(80,60,0)
(6,72,0)
(84,32,0)
(36,20,0)
(43,71,0)
(9,34,0)
(55,66,0)
(22,20,0)
(71,60,0)
(5,13,0)
(87,74,0)
(16,54,0)
(52,22,0)
(1,57,0)
(72,6,0)
(6,30,0)
(50,47,0)
(4,51,0)
(53,3,0)
(61,70,0)
(55,76,0)
(42,12,0)
(60,71,0)
(2,29,0)
(71,63,0)
(57,46,0)
(62,31,0)
(85,25,0)
(63,71,0)
(47,28,0)
(47,70,0)
(64,20,0)
(69,29,0)
(13,5,0)
(31,29,0)
(14,72,0)
(55,46,0)
(51,28,0)
(3,53,0)
(3,46,0)
(86,29,0)
(38,46,0)
(29,83,0)
(54,31,0)
(41,60,0)
(74,54,0)
(70,30,0)
(35,20,0)
(26,2,0)
(77,20,0)
(48,66,0)
(46,55,0)
(59,80,0)
(60,22,0)
(76,55,0)
(2,31,0)
(55,31,0)
(79,55,0)
(60,80,0)
(45,60,0)
(30,32,0)
(10,3,0)
(32,30,0)
(81,54,0)
(68,17,0)
(5,70,0)
(19,22,0)
(21,76,0)
(66,55,0)
(46,29,0)
(7,36,0)
(65,60,0)
(15,31,0)
(56,54,0)
(23,76,0)
(57,12,0)
(58,9,0)
(0,6,0)
(18,68,0)
(67,20,0)
(37,32,0)
(24,30,0)
(30,22,0)
(8,66,0)
(78,29,0)
(82,29,0)
(70,20,0)
(44,5,0)
(39,42,0)
(54,74,0)
(49,53,0)
(30,6,0)
(20,27,0)
(36,22,0)
(33,54,0)
(75,72,0)
(11,13,0)
(30,70,0)
(31,62,1)
(74,87,1)
(50,51,1)
(57,1,1)
(10,46,1)
(73,57,1)
(75,0,1)
(5,13,1)
(63,65,1)
(57,46,1)
(9,58,1)
(18,80,1)
(47,50,1)
(60,71,1)
(3,53,1)
(47,70,1)
(55,76,1)
(38,2,1)
(74,54,1)
(51,4,1)
(30,22,1)
(49,10,1)
(71,63,1)
(70,30,1)
(3,46,1)
(26,74,1)
(53,49,1)
(15,40,1)
(30,32,1)
(1,42,1)
(2,26,1)
(84,37,1)
(79,38,1)
(60,45,1)
(45,71,1)
(30,6,1)
(5,70,1)
(59,60,1)
(60,22,1)
(24,61,1)
(81,16,1)
(80,59,1)
(66,48,1)
(36,7,1)
(11,44,1)
(32,84,1)
(36,22,1)
(58,74,1)
(21,66,1)
(7,80,1)
(42,39,1)
(46,55,1)
(54,33,1)
(2,31,1)
(87,54,1)
(55,31,1)
(23,21,1)
(13,11,1)
(4,5,1)
(71,43,1)
(41,22,1)
(26,9,1)
(22,52,1)
(80,60,1)
(39,3,1)
(72,14,1)
(73,47,1)
(54,31,1)
(19,40,1)
(68,18,1)
(73,5,1)
(76,23,1)
(52,19,1)
(7,68,1)
(73,3,1)
(6,72,1)
(37,6,1)
(16,56,1)
(43,63,1)
(61,36,1)
(48,8,1)
(62,15,1)
(14,75,1)
(65,41,1)
(33,81,1)
(8,79,1)
(56,31,1)
(44,70,1)
(55,66,1)
(0,24,1)
(7,40,2)
(60,71,2)
(11,40,2)
(61,40,2)
(19,40,2)
(31,40,2)
(30,22,2)
(76,40,2)
(3,53,2)
(23,40,2)
(57,3,2)
(33,40,2)
(84,40,2)
(18,80,2)
(13,40,2)
(30,32,2)
(15,40,2)
(36,40,2)
(80,40,2)
(21,40,2)
(66,40,2)
(55,40,2)
(60,22,2)
(56,40,2)
(43,40,2)
(22,40,2)
(2,40,2)
(47,5,2)
(39,3,2)
(80,60,2)
(74,40,2)
(79,40,2)
(30,40,2)
(51,5,2)
(16,40,2)
(70,40,2)
(59,40,2)
(53,40,2)
(9,74,2)
(68,80,2)
(71,63,2)
(24,40,2)
(63,40,2)
(44,40,2)
(60,40,2)
(38,40,2)
(6,72,2)
(3,40,2)
(65,40,2)
(52,40,2)
(74,54,2)
(87,40,2)
(55,66,2)
(50,5,2)
(62,40,2)
(5,40,2)
(71,40,2)
(42,3,2)
(58,74,2)
(49,40,2)
(8,40,2)
(54,40,2)
(1,3,2)
(10,40,2)
(75,40,2)
(3,46,2)
(55,76,2)
(32,40,2)
(0,40,2)
(2,31,2)
(81,40,2)
(47,70,2)
(72,40,2)
(6,40,2)
(48,40,2)
(46,55,2)
(30,6,2)
(54,31,2)
(4,5,2)
(55,31,2)
(37,40,2)
(26,40,2)
(36,22,2)
(5,70,2)
(5,13,2)
(57,46,2)
(41,40,2)
(46,40,2)
(14,40,2)
(45,40,2)
(70,30,2)
-----------------------------------
(0,O_RDWR)
(1,fileDesc)
(2,printLine(filename)
(3,fileDesc != -1)
(4,"Temporary file was opened...now closing file")
(5,fileDesc != -1)
(6,O_RDWR|O_CREAT|O_EXCL)
(7,filename)
(8,O_RDWR)
(9,exit(1)
(10,fileDesc)
(11,1)
(12,)
(13,-1)
(14,O_EXCL)
(15,filename)
(16,"bad")
(17,)
(18,1)
(19,filename)
(20,)
(21,S_IREAD)
(22,filename[MAX_PATH] = "")
(23,S_IWRITE)
(24,filename)
(25,)
(26,filename)
(27,)
(28,)
(29,)
(30,OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE)
(31,filename[MAX_PATH] = "")
(32,S_IREAD|S_IWRITE)
(33,filename)
(34,)
(35,if (fileDesc != -1)
(36,printLine(filename)
(37,S_IREAD)
(38,fileDesc)
(39,"Temporary file was opened...now closing file")
(40,globalReturnsTrueOrFalse()
(41,".")
(42,printLine("Temporary file was opened...now closing file")
(43,1)
(44,fileDesc)
(45,filename)
(46,fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(47,CLOSE(fileDesc)
(48,O_CREAT)
(49,1)
(50,fileDesc)
(51,printLine("Temporary file was opened...now closing file")
(52,"")
(53,-1)
(54,GetTempFileNameA(".", "bad", 0, filename)
(55,OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE)
(56,".")
(57,CLOSE(fileDesc)
(58,1)
(59,0)
(60,GetTempFileNameA(".", "good", rand()
(61,fileDesc)
(62,"")
(63,rand()
(64,fileDesc)
(65,"good")
(66,O_RDWR|O_CREAT)
(67,if (GetTempFileNameA(".", "good", rand()
(68,exit(1)
(69,fileDesc)
(70,fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE)
(71,rand()
(72,O_CREAT|O_EXCL)
(73,RET)
(74,GetTempFileNameA(".", "bad", 0, filename)
(75,O_CREAT)
(76,S_IREAD|S_IWRITE)
(77,filename)
(78,if (GetTempFileNameA(".", "bad", 0, filename)
(79,filename)
(80,GetTempFileNameA(".", "good", rand()
(81,0)
(82,filename)
(83,)
(84,S_IWRITE)
(85,if(globalReturnsTrueOrFalse()
(86,if (fileDesc != -1)
(87,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
