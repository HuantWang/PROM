-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_10_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    if(globalTrue)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
48,49
51,52
52,53
52,54
52,55
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
66,67
67,68
67,69
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,56,59,61,64,65,68,70,72,74,79,82,84,89,90,94,97,98,99,105,108,109,110,115,116,121,123,124,128,130
-----computeFrom-----
22,23
22,24
45,46
45,47
46,47
46,48
53,54
53,55
57,58
57,59
67,68
67,69
77,78
77,79
86,87
86,88
87,88
87,89
91,92
91,93
95,96
95,97
102,103
102,104
106,107
106,108
118,119
118,120
-----guardedBy-----
49,123
59,105
70,108
94,105
97,108
-----guardedByNegation-----
59,121
70,123
-----lastLexicalUse-----
59,121
70,123
-----jump-----
59,121
70,123
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_10_bad(){    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_10_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_10_bad
{    wchar_t * data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalTrue)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
globalTrue
globalTrue
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(250-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(37,35,0)
(46,1,0)
(8,10,0)
(18,1,0)
(23,42,0)
(38,39,0)
(18,20,0)
(5,36,0)
(40,1,0)
(41,44,0)
(29,12,0)
(48,2,0)
(1,26,0)
(42,35,0)
(43,30,0)
(16,20,0)
(7,21,0)
(30,42,0)
(24,12,0)
(17,25,0)
(11,44,0)
(0,45,0)
(31,23,0)
(41,42,0)
(20,18,0)
(44,10,0)
(30,1,0)
(10,44,0)
(41,1,0)
(14,26,0)
(6,26,0)
(44,45,0)
(34,41,0)
(32,41,0)
(20,3,0)
(10,8,0)
(12,10,0)
(4,35,0)
(36,1,0)
(45,44,0)
(44,41,0)
(23,25,0)
(35,27,0)
(36,26,0)
(25,23,0)
(15,23,0)
(2,3,0)
(22,13,0)
(21,13,0)
(33,26,0)
(12,42,0)
(9,42,0)
(42,30,0)
(10,12,0)
(47,18,0)
(41,1,1)
(20,18,1)
(18,1,1)
(21,7,1)
(5,22,1)
(47,16,1)
(44,10,1)
(44,11,1)
(31,42,1)
(30,1,1)
(23,15,1)
(17,23,1)
(12,42,1)
(5,48,1)
(9,28,1)
(23,42,1)
(45,0,1)
(46,14,1)
(44,41,1)
(5,25,1)
(7,45,1)
(40,46,1)
(28,1,1)
(45,44,1)
(30,43,1)
(10,12,1)
(29,24,1)
(41,32,1)
(16,45,1)
(24,41,1)
(0,44,1)
(5,28,1)
(36,1,1)
(1,40,1)
(42,30,1)
(22,21,1)
(25,17,1)
(25,23,1)
(18,47,1)
(11,10,1)
(48,20,1)
(15,31,1)
(34,25,1)
(41,42,1)
(10,8,1)
(19,36,1)
(43,9,1)
(12,29,1)
(32,34,1)
(36,5,1)
(25,23,2)
(45,25,2)
(25,28,2)
(30,1,2)
(32,25,2)
(24,25,2)
(21,45,2)
(18,1,2)
(47,45,2)
(9,28,2)
(41,1,2)
(42,30,2)
(11,25,2)
(36,1,2)
(7,45,2)
(22,45,2)
(12,25,2)
(23,28,2)
(10,25,2)
(29,25,2)
(48,45,2)
(45,44,2)
(42,28,2)
(44,41,2)
(15,28,2)
(30,28,2)
(23,42,2)
(20,45,2)
(12,42,2)
(44,25,2)
(16,45,2)
(10,12,2)
(0,25,2)
(18,45,2)
(44,10,2)
(41,25,2)
(41,42,2)
(10,8,2)
(17,28,2)
(34,25,2)
(20,18,2)
(43,28,2)
(31,28,2)
-----------------------------------
(0,NULL)
(1,data = dataBuffer)
(2,)
(3,)
(4,if (250-dataLen > 1)
(5,data)
(6,if(globalTrue)
(7,"fgetws()
(8,int)
(9,dataLen)
(10,(int)
(11,stdin)
(12,250-dataLen)
(13,)
(14,"PATH=")
(15,dataLen)
(16,dataLen)
(17,1)
(18,wcslen(data)
(19,RET)
(20,dataLen = wcslen(data)
(21,printLine("fgetws()
(22,\\\'\\\\0\\\')
(23,250-dataLen)
(24,250)
(25,250-dataLen > 1)
(26,)
(27,)
(28,globalTrue)
(29,dataLen)
(30,wcslen(data)
(31,250)
(32,dataLen)
(33,data)
(34,data)
(35,)
(36,PUTENV(data)
(37,dataLen)
(38,if (fgetws(data+dataLen, (int)
(39,)
(40,dataBuffer)
(41,data+dataLen)
(42,dataLen = wcslen(data)
(43,data)
(44,fgetws(data+dataLen, (int)
(45,fgetws(data+dataLen, (int)
(46,data)
(47,data)
(48,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
