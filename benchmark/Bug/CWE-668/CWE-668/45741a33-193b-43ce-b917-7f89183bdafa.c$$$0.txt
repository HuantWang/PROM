-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_17_bad()
{
    int i;
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
35,36
38,39
38,40
39,40
42,43
43,44
45,46
46,47
46,48
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
61,63
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
69,71
69,72
69,73
70,71
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
81,82
82,83
82,84
84,85
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
116,117
117,118
117,119
118,119
118,120
119,120
121,122
121,123
122,123
126,127
126,128
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
137,138
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,25,29,31,36,37,40,41,44,50,52,56,58,62,64,65,71,74,76,79,80,83,85,87,89,94,97,99,104,105,109,112,113,114,120,123,124,125,130,131,136,138,139,143,145
-----computeFrom-----
27,28
27,29
34,35
34,36
38,39
38,40
60,61
60,62
61,62
61,63
68,69
68,70
72,73
72,74
82,83
82,84
92,93
92,94
101,102
101,103
102,103
102,104
106,107
106,108
110,111
110,112
117,118
117,119
121,122
121,123
133,134
133,135
-----guardedBy-----
64,138
74,120
85,123
109,120
112,123
-----guardedByNegation-----
74,136
85,138
-----lastLexicalUse-----
74,136
85,138
-----jump-----
74,136
85,138
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_17_bad(){    int i;    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_17_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_17_bad
{    int i;    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(10,14,0)
(33,1,0)
(14,10,0)
(41,31,0)
(58,35,0)
(9,1,0)
(31,18,0)
(25,37,0)
(76,72,0)
(48,14,0)
(0,23,0)
(4,49,0)
(44,81,0)
(71,31,0)
(65,58,0)
(36,58,0)
(27,1,0)
(34,61,0)
(45,67,0)
(28,26,0)
(42,37,0)
(62,72,0)
(46,70,0)
(39,58,0)
(36,80,0)
(67,45,0)
(70,58,0)
(11,32,0)
(24,75,0)
(19,47,0)
(26,32,0)
(49,62,0)
(2,18,0)
(15,13,0)
(32,44,0)
(18,1,0)
(48,32,0)
(40,80,0)
(7,49,0)
(59,79,0)
(7,18,0)
(55,36,0)
(45,31,0)
(23,74,0)
(18,37,0)
(17,49,0)
(53,18,0)
(50,10,0)
(7,44,0)
(70,61,0)
(8,43,0)
(43,13,0)
(30,70,0)
(20,35,0)
(78,67,0)
(80,40,0)
(49,7,0)
(14,48,0)
(16,65,0)
(73,74,0)
(10,62,0)
(74,58,0)
(12,48,0)
(80,45,0)
(47,1,0)
(60,36,0)
(74,23,0)
(63,13,0)
(32,48,0)
(77,54,0)
(58,65,0)
(5,10,0)
(45,80,0)
(38,35,0)
(72,18,0)
(26,62,0)
(31,45,0)
(29,7,0)
(69,15,0)
(56,26,0)
(64,1,0)
(61,54,0)
(3,77,0)
(6,62,0)
(80,36,0)
(65,18,0)
(32,18,0)
(52,45,0)
(62,79,0)
(70,18,0)
(21,74,0)
(31,58,0)
(68,44,0)
(72,62,0)
(32,26,0)
(35,57,0)
(22,43,0)
(37,1,0)
(51,13,0)
(47,18,0)
(7,18,1)
(8,15,1)
(60,55,1)
(3,67,1)
(45,52,1)
(32,44,1)
(66,47,1)
(37,42,1)
(51,18,1)
(76,6,1)
(42,25,1)
(46,30,1)
(17,29,1)
(56,11,1)
(10,50,1)
(69,61,1)
(10,62,1)
(71,41,1)
(14,10,1)
(78,45,1)
(80,36,1)
(47,18,1)
(23,0,1)
(4,17,1)
(48,32,1)
(21,58,1)
(69,23,1)
(15,69,1)
(65,18,1)
(6,67,1)
(18,2,1)
(43,13,1)
(0,74,1)
(67,78,1)
(70,46,1)
(45,80,1)
(32,18,1)
(62,72,1)
(41,23,1)
(11,10,1)
(30,77,1)
(67,45,1)
(65,16,1)
(18,37,1)
(50,5,1)
(43,22,1)
(7,49,1)
(23,74,1)
(58,65,1)
(72,76,1)
(77,3,1)
(49,62,1)
(14,48,1)
(53,37,1)
(2,53,1)
(26,62,1)
(61,34,1)
(68,7,1)
(5,62,1)
(32,26,1)
(74,73,1)
(69,44,1)
(52,80,1)
(47,19,1)
(69,14,1)
(31,18,1)
(80,40,1)
(49,4,1)
(8,13,1)
(26,28,1)
(74,58,1)
(12,32,1)
(31,58,1)
(39,43,1)
(19,43,1)
(36,58,1)
(28,56,1)
(15,13,1)
(29,14,1)
(16,39,1)
(73,21,1)
(34,70,1)
(63,51,1)
(72,18,1)
(36,60,1)
(31,71,1)
(70,18,1)
(55,31,1)
(22,8,1)
(44,68,1)
(48,12,1)
(45,31,1)
(13,63,1)
(70,58,1)
(44,14,2)
(48,32,2)
(49,14,2)
(12,10,2)
(50,67,2)
(70,58,2)
(32,44,2)
(72,67,2)
(29,14,2)
(55,23,2)
(58,43,2)
(74,58,2)
(6,67,2)
(18,37,2)
(14,48,2)
(76,67,2)
(48,10,2)
(80,23,2)
(62,72,2)
(70,18,2)
(17,14,2)
(4,14,2)
(72,18,2)
(10,67,2)
(47,18,2)
(71,23,2)
(30,67,2)
(14,67,2)
(15,43,2)
(23,74,2)
(15,13,2)
(31,58,2)
(22,43,2)
(80,36,2)
(62,67,2)
(65,18,2)
(21,43,2)
(34,67,2)
(67,45,2)
(43,43,2)
(70,67,2)
(31,18,2)
(58,65,2)
(69,43,2)
(45,31,2)
(7,18,2)
(32,18,2)
(39,43,2)
(32,10,2)
(43,13,2)
(36,23,2)
(61,67,2)
(23,43,2)
(16,43,2)
(10,62,2)
(28,10,2)
(60,23,2)
(74,43,2)
(26,10,2)
(68,14,2)
(11,10,2)
(45,80,2)
(49,62,2)
(67,23,2)
(73,43,2)
(45,23,2)
(0,43,2)
(7,14,2)
(36,58,2)
(77,67,2)
(46,67,2)
(56,10,2)
(26,62,2)
(32,26,2)
(52,23,2)
(65,43,2)
(31,23,2)
(7,49,2)
(5,67,2)
(41,23,2)
(78,23,2)
(8,43,2)
(3,67,2)
(14,10,2)
(80,40,2)
-----------------------------------
(0,1)
(1,)
(2,dataBuffer)
(3,"fgets()
(4,1)
(5,dataLen)
(6,dataLen)
(7,data[dataLen-1])
(8,i)
(9,dataBuffer)
(10,dataLen > 0)
(11,data)
(12,\\\'\\\\n\\\')
(13,i = 0)
(14,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(15,i++)
(16,data)
(17,dataLen)
(18,data = dataBuffer)
(19,data)
(20,if (250-dataLen > 1)
(21,250)
(22,1)
(23,250-dataLen > 1)
(24,if (fgets(data+dataLen, (int)
(25,dataBuffer)
(26,dataLen-1)
(27,for(i = 0; i < 1; i++)
(28,1)
(29,data)
(30,data)
(31,data+dataLen)
(32,data[dataLen-1])
(33,i)
(34,\\\'\\\\0\\\')
(35,)
(36,250-dataLen)
(37,dataBuffer[250] = "PATH=")
(38,dataLen)
(39,dataLen)
(40,int)
(41,data)
(42,"PATH=")
(43,i < 1)
(44,data[dataLen-1] = \\\'\\\\0\\\')
(45,fgets(data+dataLen, (int)
(46,dataLen)
(47,PUTENV(data)
(48,data[dataLen-1] == \\\'\\\\n\\\')
(49,dataLen-1)
(50,0)
(51,i)
(52,stdin)
(53,data)
(54,)
(55,250)
(56,dataLen)
(57,)
(58,dataLen = strlen(data)
(59,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(60,dataLen)
(61,data[dataLen] = \\\'\\\\0\\\')
(62,dataLen = strlen(data)
(63,0)
(64,data)
(65,strlen(data)
(66,RET)
(67,fgets(data+dataLen, (int)
(68,\\\'\\\\0\\\')
(69,i)
(70,data[dataLen])
(71,dataLen)
(72,strlen(data)
(73,dataLen)
(74,250-dataLen)
(75,)
(76,data)
(77,printLine("fgets()
(78,NULL)
(79,)
(80,(int)
(81,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
