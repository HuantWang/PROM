-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_07_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(staticFive==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (250-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,130,132
-----computeFrom-----
22,23
22,24
28,29
28,30
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_07_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_07_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_07_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(13,43,0)
(69,28,0)
(51,57,0)
(73,64,0)
(13,66,0)
(0,58,0)
(37,43,0)
(1,58,0)
(31,49,0)
(2,75,0)
(60,45,0)
(23,42,0)
(59,16,0)
(54,14,0)
(56,25,0)
(53,12,0)
(29,25,0)
(64,0,0)
(47,16,0)
(21,24,0)
(14,49,0)
(16,47,0)
(48,44,0)
(20,25,0)
(53,42,0)
(68,52,0)
(36,31,0)
(16,13,0)
(24,57,0)
(61,16,0)
(33,57,0)
(24,17,0)
(20,17,0)
(5,58,0)
(46,15,0)
(7,42,0)
(26,17,0)
(52,68,0)
(38,10,0)
(58,9,0)
(63,75,0)
(57,24,0)
(8,25,0)
(31,17,0)
(65,68,0)
(43,0,0)
(6,49,0)
(0,15,0)
(13,16,0)
(45,44,0)
(18,12,0)
(35,64,0)
(17,11,0)
(27,52,0)
(17,25,0)
(70,47,0)
(4,47,0)
(53,17,0)
(41,20,0)
(33,14,0)
(50,17,0)
(40,0,0)
(10,49,0)
(42,49,0)
(19,10,0)
(15,0,0)
(39,11,0)
(43,13,0)
(32,34,0)
(64,45,0)
(10,24,0)
(47,0,0)
(12,3,0)
(11,25,0)
(52,0,0)
(15,17,0)
(66,13,0)
(71,53,0)
(24,10,0)
(14,33,0)
(49,28,0)
(74,11,0)
(72,14,0)
(47,17,0)
(49,31,0)
(62,61,0)
(57,33,0)
(42,53,0)
(22,43,0)
(67,48,0)
(55,52,0)
(64,17,0)
(16,61,0)
(23,7,1)
(47,4,1)
(55,27,1)
(48,67,1)
(31,36,1)
(22,47,1)
(68,65,1)
(4,70,1)
(51,24,1)
(52,0,1)
(68,52,1)
(71,33,1)
(13,43,1)
(47,0,1)
(65,52,1)
(72,49,1)
(62,16,1)
(26,11,1)
(73,35,1)
(61,16,1)
(20,17,1)
(21,14,1)
(41,12,1)
(50,26,1)
(18,53,1)
(63,17,1)
(33,57,1)
(41,45,1)
(24,17,1)
(15,17,1)
(40,75,1)
(43,37,1)
(17,50,1)
(36,6,1)
(12,18,1)
(64,73,1)
(45,60,1)
(74,39,1)
(70,68,1)
(57,51,1)
(41,33,1)
(64,17,1)
(41,75,1)
(10,49,1)
(14,49,1)
(54,72,1)
(43,0,1)
(14,54,1)
(38,19,1)
(64,0,1)
(33,14,1)
(17,11,1)
(27,0,1)
(16,59,1)
(47,17,1)
(19,21,1)
(60,64,1)
(42,23,1)
(31,17,1)
(16,47,1)
(13,66,1)
(35,48,1)
(57,24,1)
(20,41,1)
(0,15,1)
(6,61,1)
(7,71,1)
(75,2,1)
(53,42,1)
(24,10,1)
(37,22,1)
(11,74,1)
(46,40,1)
(42,49,1)
(53,17,1)
(30,20,1)
(61,62,1)
(52,55,1)
(49,31,1)
(2,63,1)
(67,61,1)
(59,13,1)
(15,46,1)
(41,68,1)
(16,13,1)
(10,38,1)
(52,75,2)
(46,75,2)
(68,52,2)
(17,11,2)
(64,61,2)
(10,49,2)
(33,57,2)
(48,61,2)
(45,61,2)
(65,75,2)
(18,33,2)
(24,17,2)
(33,61,2)
(51,14,2)
(14,61,2)
(52,0,2)
(36,61,2)
(64,0,2)
(53,17,2)
(53,42,2)
(49,31,2)
(64,17,2)
(53,33,2)
(20,17,2)
(42,49,2)
(16,68,2)
(37,68,2)
(40,75,2)
(43,0,2)
(13,43,2)
(31,61,2)
(16,47,2)
(33,14,2)
(6,61,2)
(19,14,2)
(68,75,2)
(70,68,2)
(57,24,2)
(10,14,2)
(67,61,2)
(24,10,2)
(60,61,2)
(7,33,2)
(12,33,2)
(61,68,2)
(47,17,2)
(47,68,2)
(62,68,2)
(72,61,2)
(38,14,2)
(16,13,2)
(59,68,2)
(4,68,2)
(13,66,2)
(57,14,2)
(31,17,2)
(61,16,2)
(13,68,2)
(21,14,2)
(55,75,2)
(43,68,2)
(42,33,2)
(23,33,2)
(71,33,2)
(27,75,2)
(0,75,2)
(49,61,2)
(47,0,2)
(24,14,2)
(73,61,2)
(0,15,2)
(15,75,2)
(54,61,2)
(22,68,2)
(15,17,2)
(35,61,2)
(14,49,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,if (250-dataLen > 1)
(2,5)
(3,)
(4,dataLen)
(5,dataLen)
(6,dataLen)
(7,dataLen)
(8,data)
(9,)
(10,dataLen-1)
(11,dataBuffer[250] = "PATH=")
(12,data[dataLen-1] = \\\'\\\\0\\\')
(13,(int)
(14,dataLen > 0)
(15,strlen(data)
(16,fgets(data+dataLen, (int)
(17,data = dataBuffer)
(18,\\\'\\\\0\\\')
(19,dataLen)
(20,PUTENV(data)
(21,data)
(22,250)
(23,1)
(24,data[dataLen-1])
(25,)
(26,data)
(27,250)
(28,)
(29,dataBuffer)
(30,RET)
(31,strlen(data)
(32,if (fgets(data+dataLen, (int)
(33,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(34,)
(35,data)
(36,data)
(37,dataLen)
(38,1)
(39,dataBuffer)
(40,dataLen)
(41,data)
(42,dataLen-1)
(43,250-dataLen)
(44,)
(45,data[dataLen] = \\\'\\\\0\\\')
(46,data)
(47,data+dataLen)
(48,printLine("fgets()
(49,dataLen = strlen(data)
(50,dataBuffer)
(51,\\\'\\\\n\\\')
(52,250-dataLen)
(53,data[dataLen-1])
(54,0)
(55,dataLen)
(56,if(staticFive==5)
(57,data[dataLen-1] == \\\'\\\\n\\\')
(58,)
(59,stdin)
(60,\\\'\\\\0\\\')
(61,fgets(data+dataLen, (int)
(62,NULL)
(63,staticFive)
(64,data[dataLen])
(65,1)
(66,int)
(67,"fgets()
(68,250-dataLen > 1)
(69,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(70,data)
(71,data)
(72,dataLen)
(73,dataLen)
(74,"PATH=")
(75,staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
