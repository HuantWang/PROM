-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 250-dataLen-1);
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
51,52
53,54
55,56
55,57
56,57
56,58
58,59
61,62
62,63
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,27,29,30,34,36,40,42,47,50,52,54,57,59,60,63
-----computeFrom-----
38,39
38,40
48,49
48,50
55,56
55,57
56,57
56,58
-----guardedBy-----
40,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 250-dataLen-1);        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 250-dataLen-1);        }    }    return data;}
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 250-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 250-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 250-dataLen-1);        }
strncat(data+dataLen, environment, 250-dataLen-1);
strncat(data+dataLen, environment, 250-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
250-dataLen-1
250-dataLen
250
dataLen
dataLen
1
return data;
data
data
-----joern-----
(29,1,0)
(13,16,0)
(18,26,0)
(8,26,0)
(18,27,0)
(27,29,0)
(2,3,0)
(4,17,0)
(24,16,0)
(25,27,0)
(29,27,0)
(27,17,0)
(7,1,0)
(12,23,0)
(23,3,0)
(26,23,0)
(18,15,0)
(20,4,0)
(17,4,0)
(14,2,0)
(28,18,0)
(2,15,0)
(5,23,0)
(8,15,0)
(6,1,0)
(27,10,0)
(0,17,0)
(17,23,0)
(9,26,0)
(26,8,0)
(16,17,0)
(19,29,0)
(30,23,0)
(27,18,0)
(1,26,0)
(22,8,0)
(1,29,0)
(11,2,0)
(21,18,0)
(8,15,1)
(1,6,1)
(0,26,1)
(20,0,1)
(24,13,1)
(17,4,1)
(26,8,1)
(7,19,1)
(19,25,1)
(27,17,1)
(22,9,1)
(18,21,1)
(1,26,1)
(21,28,1)
(18,26,1)
(25,18,1)
(13,17,1)
(4,20,1)
(8,22,1)
(29,1,1)
(2,15,1)
(27,18,1)
(27,29,1)
(16,24,1)
(28,16,1)
(2,14,1)
(14,16,1)
(16,17,1)
(14,27,1)
(18,15,1)
(11,2,1)
(6,7,1)
(28,16,2)
(27,18,2)
(27,16,2)
(27,29,2)
(21,16,2)
(1,26,2)
(29,1,2)
(19,16,2)
(18,26,2)
(18,15,2)
(7,16,2)
(18,16,2)
(11,2,2)
(17,4,2)
(8,15,2)
(2,15,2)
(6,16,2)
(29,16,2)
(16,17,2)
(26,8,2)
(25,16,2)
(1,16,2)
(27,17,2)
-----------------------------------
(0,environment)
(1,dataLen-1)
(2,return data;)
(3,)
(4,GETENV(ENV_VARIABLE)
(5,if (environment != NULL)
(6,1)
(7,dataLen)
(8,strlen(data)
(9,dataLen)
(10,)
(11,RET)
(12,environment)
(13,environment)
(14,data)
(15,char * data)
(16,environment != NULL)
(17,* environment = GETENV(ENV_VARIABLE)
(18,data+dataLen)
(19,250)
(20,ENV_VARIABLE)
(21,dataLen)
(22,data)
(23,)
(24,NULL)
(25,environment)
(26,dataLen = strlen(data)
(27,strncat(data+dataLen, environment, 250-dataLen-1)
(28,data)
(29,250-dataLen-1)
(30,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
