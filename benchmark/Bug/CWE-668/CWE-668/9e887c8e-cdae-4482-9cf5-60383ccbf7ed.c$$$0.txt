-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fwprintf(pFile, L"User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
    else
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Do not write sensitive data to the log */
            fwprintf(pFile, L"User attempted access\n");
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
38,39
38,40
38,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
58,59
59,60
59,61
59,62
60,61
64,65
64,66
65,66
65,67
66,67
66,68
66,69
66,70
67,68
69,70
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
93,95
94,95
96,97
98,99
98,100
99,100
99,101
100,101
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
114,117
115,116
115,117
116,117
116,118
116,119
116,120
116,121
116,122
116,123
117,118
119,120
121,122
123,124
125,126
127,128
129,130
130,131
133,134
133,135
134,135
135,136
135,137
136,137
139,140
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
151,152
152,153
152,154
152,155
152,156
153,154
155,156
158,159
160,161
160,162
161,162
163,164
164,165
165,166
165,167
166,167
168,169
170,171
171,172
171,173
171,174
171,175
171,176
171,177
171,178
171,179
171,180
171,181
171,182
171,183
172,173
173,174
173,175
175,176
175,177
175,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
187,188
189,190
190,191
190,192
191,192
193,194
195,196
196,197
196,198
198,199
198,200
198,201
201,202
203,204
204,205
204,206
206,207
206,208
206,209
209,210
211,212
212,213
212,214
213,214
215,216
215,217
215,218
218,219
219,220
219,221
219,222
220,221
224,225
224,226
225,226
225,227
226,227
226,228
226,229
226,230
227,228
229,230
232,233
234,235
236,237
236,238
237,238
238,239
238,240
239,240
242,243
243,244
243,245
244,245
244,246
245,246
249,250
250,251
250,252
251,252
253,254
253,255
254,255
256,257
258,259
258,260
259,260
259,261
260,261
263,264
264,265
265,266
265,267
266,267
266,268
267,268
269,270
269,271
270,271
274,275
274,276
274,277
275,276
275,277
276,277
276,278
276,279
276,280
276,281
276,282
276,283
277,278
279,280
281,282
283,284
285,286
287,288
289,290
290,291
293,294
293,295
294,295
295,296
295,297
296,297
299,300
300,301
300,302
301,302
303,304
305,306
306,307
307,308
307,309
308,309
311,312
312,313
312,314
312,315
313,314
315,316
318,319
318,320
319,320
321,322
322,323
323,324
323,325
324,325
326,327
-----nextToken-----
2,4,9,14,16,18,20,24,26,28,32,34,37,39,40,42,45,47,48,50,54,56,57,61,62,63,68,70,71,73,75,80,81,86,87,88,92,95,97,101,102,108,111,112,113,118,120,122,124,126,128,131,132,137,138,142,144,149,150,154,156,157,159,162,167,169,174,176,178,180,184,186,188,192,194,197,199,200,202,205,207,208,210,214,216,217,221,222,223,228,230,231,233,235,240,241,246,247,248,252,255,257,261,262,268,271,272,273,278,280,282,284,286,288,291,292,297,298,302,304,309,310,314,316,317,320,325,327
-----computeFrom-----
65,66
65,67
83,84
83,85
90,91
90,92
99,100
99,101
105,106
105,107
109,110
109,111
115,116
115,117
225,226
225,227
243,244
243,245
250,251
250,252
259,260
259,261
265,266
265,267
269,270
269,271
275,276
275,277
-----guardedBy-----
70,86
101,111
131,144
230,246
261,271
291,304
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_12_bad()
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }}
if(globalReturnsTrueOrFalse())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(pFile, L"User attempted access with password: %s\n", password);
fwprintf(pFile, L"User attempted access with password: %s\n", password)
fwprintf
fwprintf
pFile
pFile
L"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(pFile, L"User attempted access\n");
fwprintf(pFile, L"User attempted access\n")
fwprintf
fwprintf
pFile
pFile
L"User attempted access\n"
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(32,87,0)
(34,18,0)
(43,28,0)
(1,2,0)
(7,18,0)
(50,123,0)
(36,105,0)
(4,15,0)
(61,2,0)
(14,18,0)
(45,39,0)
(107,35,0)
(90,22,0)
(56,23,0)
(63,78,0)
(69,114,0)
(10,18,0)
(59,2,0)
(117,124,0)
(89,13,0)
(125,65,0)
(122,13,0)
(11,33,0)
(73,18,0)
(82,65,0)
(112,2,0)
(111,2,0)
(30,2,0)
(24,2,0)
(29,18,0)
(91,72,0)
(117,28,0)
(21,15,0)
(71,112,0)
(52,15,0)
(40,108,0)
(96,103,0)
(119,104,0)
(121,11,0)
(51,62,0)
(113,23,0)
(49,33,0)
(28,15,0)
(38,15,0)
(55,89,0)
(65,108,0)
(93,81,0)
(54,8,0)
(2,17,0)
(102,23,0)
(106,33,0)
(87,35,0)
(6,38,0)
(20,15,0)
(79,2,0)
(74,99,0)
(19,117,0)
(18,7,0)
(53,29,0)
(95,23,0)
(97,15,0)
(65,16,0)
(33,11,0)
(0,2,0)
(15,66,0)
(57,62,0)
(5,58,0)
(23,102,0)
(81,42,0)
(18,29,0)
(105,25,0)
(47,102,0)
(9,7,0)
(44,15,0)
(70,16,0)
(80,2,0)
(28,43,0)
(30,8,0)
(88,38,0)
(76,15,0)
(31,74,0)
(46,43,0)
(37,65,0)
(115,30,0)
(118,2,0)
(110,5,0)
(62,2,0)
(105,62,0)
(85,100,0)
(116,33,0)
(120,65,0)
(60,51,0)
(84,51,0)
(103,42,0)
(26,114,0)
(27,112,0)
(72,89,0)
(16,65,0)
(64,65,0)
(108,65,0)
(101,3,0)
(100,3,0)
(8,30,0)
(62,51,0)
(94,72,0)
(22,48,0)
(92,15,0)
(68,28,0)
(83,43,0)
(86,18,0)
(75,15,0)
(13,89,0)
(114,30,0)
(89,15,0)
(41,2,0)
(78,48,0)
(77,15,0)
(78,63,1)
(37,64,1)
(5,110,1)
(120,82,1)
(12,98,1)
(60,57,1)
(108,40,1)
(94,89,1)
(31,7,1)
(114,69,1)
(49,28,1)
(34,86,1)
(23,113,1)
(115,107,1)
(9,18,1)
(53,14,1)
(86,10,1)
(7,18,1)
(27,71,1)
(103,96,1)
(55,11,1)
(4,67,1)
(114,30,1)
(71,24,1)
(117,28,1)
(19,98,1)
(125,50,1)
(109,5,1)
(38,88,1)
(81,93,1)
(18,29,1)
(12,109,1)
(68,20,1)
(30,8,1)
(12,117,1)
(82,125,1)
(116,49,1)
(57,59,1)
(102,23,1)
(107,87,1)
(98,74,1)
(93,16,1)
(43,83,1)
(109,103,1)
(55,101,1)
(98,22,1)
(90,78,1)
(28,43,1)
(87,32,1)
(110,16,1)
(122,55,1)
(16,70,1)
(84,60,1)
(10,45,1)
(115,102,1)
(51,84,1)
(85,11,1)
(26,30,1)
(11,33,1)
(74,31,1)
(83,46,1)
(12,105,1)
(16,65,1)
(33,106,1)
(70,65,1)
(100,85,1)
(14,73,1)
(105,62,1)
(36,109,1)
(50,114,1)
(125,114,1)
(63,7,1)
(72,89,1)
(117,19,1)
(47,23,1)
(7,9,1)
(45,72,1)
(10,72,1)
(22,90,1)
(91,94,1)
(11,121,1)
(88,6,1)
(69,26,1)
(112,27,1)
(62,51,1)
(113,95,1)
(105,36,1)
(121,33,1)
(73,34,1)
(92,38,1)
(96,81,1)
(101,100,1)
(102,47,1)
(59,41,1)
(46,68,1)
(8,54,1)
(41,112,1)
(54,115,1)
(64,120,1)
(65,108,1)
(6,4,1)
(56,62,1)
(29,53,1)
(106,116,1)
(24,67,1)
(40,37,1)
(72,91,1)
(95,56,1)
(32,102,1)
(13,122,1)
(89,13,1)
(20,92,1)
(64,67,2)
(72,89,2)
(98,67,2)
(120,67,2)
(105,109,2)
(63,7,2)
(69,67,2)
(53,67,2)
(55,67,2)
(74,7,2)
(31,7,2)
(65,108,2)
(18,29,2)
(84,67,2)
(62,51,2)
(32,102,2)
(59,67,2)
(109,67,2)
(27,67,2)
(65,67,2)
(24,67,2)
(26,67,2)
(11,33,2)
(68,67,2)
(23,67,2)
(89,13,2)
(107,102,2)
(91,67,2)
(16,65,2)
(114,67,2)
(51,67,2)
(71,67,2)
(82,67,2)
(125,67,2)
(49,67,2)
(100,11,2)
(56,67,2)
(115,67,2)
(122,67,2)
(57,67,2)
(43,67,2)
(106,67,2)
(4,67,2)
(50,114,2)
(34,67,2)
(117,98,2)
(41,67,2)
(78,7,2)
(114,30,2)
(81,16,2)
(113,67,2)
(11,67,2)
(83,67,2)
(40,67,2)
(70,67,2)
(30,8,2)
(88,67,2)
(60,67,2)
(37,67,2)
(90,7,2)
(102,67,2)
(29,67,2)
(6,67,2)
(16,67,2)
(5,16,2)
(47,67,2)
(101,11,2)
(105,62,2)
(112,67,2)
(73,67,2)
(9,67,2)
(96,16,2)
(7,67,2)
(13,67,2)
(108,67,2)
(85,11,2)
(28,43,2)
(93,16,2)
(46,67,2)
(19,98,2)
(117,28,2)
(20,67,2)
(14,67,2)
(89,67,2)
(38,67,2)
(28,67,2)
(36,109,2)
(94,67,2)
(72,67,2)
(110,16,2)
(8,67,2)
(30,67,2)
(102,23,2)
(54,67,2)
(62,67,2)
(121,67,2)
(92,67,2)
(87,102,2)
(95,67,2)
(7,18,2)
(45,72,2)
(33,67,2)
(103,16,2)
(18,67,2)
(10,67,2)
(22,7,2)
(116,67,2)
(86,67,2)
-----------------------------------
(0,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(1,pHandle)
(2,)
(3,)
(4,"")
(5,printLine("Unable to login.")
(6,passwordLen)
(7,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(8,wcslen(password)
(9,0)
(10,username)
(11,fgetws(password, 100, stdin)
(12,RET)
(13,wcslen(password)
(14,LOGON32_PROVIDER_DEFAULT)
(15,)
(16,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(17,)
(18,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(19,pFile)
(20,"Domain")
(21,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(22,CloseHandle(pHandle)
(23,fgetws(password, 100, stdin)
(24,"")
(25,)
(26,passwordLen)
(27,0)
(28,* pFile = fopen("debug.txt", "a+")
(29,&pHandle)
(30,passwordLen = wcslen(password)
(31,"Unable to login.")
(32,"fgetws()
(33,fgetws(password, 100, stdin)
(34,password)
(35,)
(36,pFile)
(37,LOGON32_PROVIDER_DEFAULT)
(38,passwordLen = 0)
(39,)
(40,pHandle)
(41,"User")
(42,)
(43,fopen("debug.txt", "a+")
(44,passwordLen)
(45,\\\'\\\\0\\\')
(46,"debug.txt")
(47,NULL)
(48,)
(49,password)
(50,\\\'\\\\0\\\')
(51,fopen("debug.txt", "a+")
(52,if (fgetws(password, 100, stdin)
(53,pHandle)
(54,password)
(55,passwordLen)
(56,password)
(57,pFile)
(58,)
(59,"Domain")
(60,"debug.txt")
(61,if (passwordLen > 0)
(62,* pFile = fopen("debug.txt", "a+")
(63,"User logged in successfully.")
(64,LOGON32_LOGON_NETWORK)
(65,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(66,)
(67,globalReturnsTrueOrFalse()
(68,pFile)
(69,0)
(70,0)
(71,passwordLen)
(72,passwordLen > 0)
(73,LOGON32_LOGON_NETWORK)
(74,printLine("Unable to login.")
(75,if (pFile)
(76,pHandle)
(77,pFile)
(78,printLine("User logged in successfully.")
(79,pFile)
(80,passwordLen)
(81,printLine("User logged in successfully.")
(82,domain)
(83,"a+")
(84,"a+")
(85,"fgetws()
(86,domain)
(87,printLine("fgetws()
(88,0)
(89,passwordLen = wcslen(password)
(90,pHandle)
(91,0)
(92,"User")
(93,"User logged in successfully.")
(94,passwordLen)
(95,100)
(96,pHandle)
(97,if (passwordLen > 0)
(98,pFile)
(99,)
(100,printLine("fgetws()
(101,\\\'\\\\0\\\')
(102,fgetws(password, 100, stdin)
(103,CloseHandle(pHandle)
(104,)
(105,fclose(pFile)
(106,stdin)
(107,\\\'\\\\0\\\')
(108,&pHandle)
(109,pFile)
(110,"Unable to login.")
(111,if (fgetws(password, 100, stdin)
(112,passwordLen = 0)
(113,stdin)
(114,passwordLen > 0)
(115,passwordLen)
(116,100)
(117,fclose(pFile)
(118,if (pFile)
(119,if(globalReturnsTrueOrFalse()
(120,password)
(121,NULL)
(122,password)
(123,)
(124,)
(125,username)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
