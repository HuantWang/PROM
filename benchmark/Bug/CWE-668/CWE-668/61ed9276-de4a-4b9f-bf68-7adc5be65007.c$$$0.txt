-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_bad()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        WSADATA wsaData;
        BOOL wsaDataInit = FALSE;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        struct sockaddr_in service;
        int recvResult;
        do
        {
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
            listenSocket = socket(PF_INET, SOCK_STREAM, 0);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(LISTEN_PORT);
            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
            {
                break;
            }
            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == INVALID_SOCKET)
            {
                break;
            }
            /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
            /* FLAW: read the new hostname from a network socket */
            recvResult = recv(acceptSocket, data, 100 - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            data[recvResult] = '\0';
        }
        while (0);
        if (acceptSocket != INVALID_SOCKET)
        {
            closesocket(acceptSocket);
        }
        if (listenSocket != INVALID_SOCKET)
        {
            closesocket(listenSocket);
        }
        if (wsaDataInit)
        {
            WSACleanup();
        }
    }
    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data;
    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
70,71
72,73
72,74
73,74
73,75
73,76
73,77
73,78
73,79
73,80
73,81
73,82
73,83
73,84
73,85
73,86
73,87
73,88
74,75
74,76
75,76
75,77
76,77
76,78
76,79
77,78
79,80
79,81
79,82
80,81
84,85
85,86
87,88
89,90
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
100,101
100,102
100,103
100,104
101,102
103,104
105,106
108,109
108,110
109,110
109,111
110,111
112,113
114,115
116,117
117,118
117,119
117,120
117,121
118,119
120,121
121,122
124,125
125,126
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
137,138
137,139
138,139
138,140
139,140
139,141
140,141
144,145
146,147
147,148
147,149
148,149
148,150
149,150
152,153
152,154
153,154
155,156
157,158
157,159
158,159
158,160
159,160
161,162
161,163
161,164
161,165
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
173,174
175,176
176,177
177,178
179,180
181,182
181,183
182,183
182,184
183,184
185,186
185,187
185,188
186,187
188,189
190,191
192,193
194,195
195,196
195,197
196,197
198,199
198,200
198,201
198,202
199,200
201,202
203,204
205,206
207,208
207,209
208,209
208,210
209,210
211,212
213,214
215,216
216,217
216,218
217,218
219,220
219,221
219,222
219,223
219,224
220,221
222,223
224,225
226,227
226,228
230,231
230,232
231,232
231,233
232,233
232,234
233,234
235,236
237,238
237,239
238,239
241,242
243,244
244,245
244,246
245,246
245,247
246,247
248,249
252,253
252,254
253,254
253,255
254,255
256,257
258,259
259,260
260,261
260,262
261,262
263,264
265,266
265,267
266,267
266,268
267,268
269,270
271,272
272,273
273,274
273,275
274,275
276,277
278,279
278,280
279,280
281,282
282,283
283,284
284,285
286,287
287,288
287,289
288,289
290,291
292,293
293,294
294,295
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,42,46,48,51,55,57,60,64,66,69,71,78,81,82,83,86,88,90,94,95,99,102,104,106,107,111,113,115,119,122,123,127,132,133,135,141,142,143,145,150,151,154,156,160,163,165,169,171,174,178,180,184,187,189,191,193,197,200,202,204,206,210,212,214,218,221,223,225,227,228,229,234,236,239,240,242,247,249,250,251,255,257,262,264,268,270,275,277,280,285,289,291,295
-----computeFrom-----
22,23
22,24
75,76
75,77
92,93
92,94
97,98
97,99
109,110
109,111
129,130
129,131
137,138
137,139
147,148
147,149
158,159
158,160
182,183
182,184
195,196
195,197
208,209
208,210
216,217
216,218
226,227
226,228
231,232
231,233
232,233
232,234
237,238
237,239
244,245
244,246
253,254
253,255
266,267
266,268
287,288
287,289
-----guardedBy-----
255,264
268,277
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_bad(){    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data;    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink();}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_bad
{    char * data;    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data;    CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);
{            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                break;            }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                break;            }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)            {                break;            }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(acceptSocket);        }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(listenSocket);        }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)        {            WSACleanup();        }
wsaDataInit
wsaDataInit
{            WSACleanup();        }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data;
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData
data
data
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink();
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink
CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink
-----joern-----
(81,105,0)
(0,110,0)
(30,137,0)
(14,24,0)
(102,19,0)
(36,100,0)
(57,136,0)
(88,45,0)
(8,30,0)
(122,136,0)
(92,30,0)
(78,147,0)
(157,19,0)
(114,112,0)
(40,138,0)
(100,63,0)
(66,19,0)
(59,108,0)
(55,39,0)
(133,146,0)
(80,63,0)
(41,117,0)
(18,41,0)
(7,19,0)
(83,64,0)
(29,94,0)
(136,64,0)
(19,64,0)
(15,4,0)
(44,137,0)
(151,94,0)
(63,136,0)
(131,5,0)
(76,119,0)
(152,150,0)
(11,19,0)
(69,19,0)
(60,49,0)
(26,97,0)
(49,139,0)
(124,74,0)
(127,139,0)
(143,64,0)
(71,134,0)
(9,34,0)
(112,77,0)
(147,117,0)
(4,0,0)
(139,50,0)
(67,111,0)
(98,134,0)
(42,154,0)
(105,117,0)
(6,10,0)
(50,139,0)
(65,50,0)
(3,58,0)
(52,43,0)
(28,19,0)
(150,63,0)
(39,119,0)
(119,39,0)
(123,116,0)
(142,10,0)
(150,146,0)
(38,2,0)
(145,45,0)
(61,50,0)
(104,134,0)
(108,92,0)
(79,53,0)
(63,64,0)
(96,86,0)
(97,139,0)
(85,110,0)
(100,64,0)
(146,110,0)
(82,19,0)
(32,150,0)
(72,84,0)
(99,19,0)
(48,144,0)
(90,110,0)
(20,50,0)
(22,112,0)
(16,4,0)
(153,150,0)
(144,19,0)
(37,79,0)
(30,8,0)
(128,70,0)
(13,110,0)
(68,10,0)
(150,77,0)
(156,64,0)
(155,100,0)
(77,134,0)
(139,110,0)
(150,116,0)
(126,110,0)
(121,60,0)
(103,49,0)
(101,111,0)
(30,92,0)
(94,110,0)
(115,0,0)
(140,110,0)
(127,28,0)
(84,19,0)
(12,19,0)
(117,105,0)
(34,144,0)
(39,126,0)
(120,34,0)
(62,97,0)
(92,108,0)
(95,127,0)
(0,115,0)
(117,41,0)
(151,146,0)
(106,147,0)
(134,77,0)
(49,60,0)
(146,150,0)
(111,110,0)
(21,141,0)
(33,110,0)
(113,138,0)
(134,139,0)
(93,70,0)
(117,147,0)
(138,146,0)
(86,74,0)
(79,144,0)
(23,77,0)
(74,2,0)
(47,91,0)
(142,138,0)
(149,151,0)
(31,19,0)
(10,142,0)
(17,116,0)
(135,28,0)
(46,67,0)
(129,126,0)
(45,139,0)
(75,139,0)
(130,67,0)
(70,110,0)
(25,119,0)
(10,146,0)
(74,86,0)
(151,63,0)
(148,92,0)
(97,28,0)
(27,54,0)
(125,144,0)
(92,139,0)
(116,150,0)
(137,30,0)
(79,77,0)
(54,92,0)
(1,110,0)
(77,110,0)
(138,142,0)
(132,28,0)
(74,110,0)
(2,74,0)
(34,77,0)
(118,84,0)
(127,109,0)
(35,49,0)
(51,151,0)
(107,115,0)
(92,54,0)
(56,63,0)
(97,139,1)
(150,152,1)
(116,123,1)
(100,36,1)
(27,30,1)
(149,142,1)
(54,27,1)
(142,10,1)
(16,15,1)
(127,139,1)
(122,57,1)
(118,63,1)
(128,93,1)
(115,107,1)
(26,62,1)
(125,48,1)
(93,105,1)
(44,148,1)
(30,8,1)
(89,97,1)
(151,51,1)
(153,32,1)
(98,104,1)
(145,88,1)
(17,153,1)
(22,114,1)
(117,147,1)
(120,9,1)
(92,54,1)
(133,112,1)
(129,39,1)
(92,30,1)
(112,77,1)
(10,68,1)
(0,115,1)
(155,89,1)
(39,119,1)
(142,138,1)
(79,37,1)
(47,108,1)
(60,49,1)
(67,46,1)
(95,97,1)
(9,52,1)
(4,16,1)
(131,45,1)
(55,119,1)
(46,130,1)
(105,117,1)
(25,76,1)
(21,89,1)
(150,63,1)
(147,78,1)
(9,3,1)
(9,42,1)
(117,41,1)
(84,72,1)
(65,75,1)
(138,146,1)
(29,151,1)
(63,136,1)
(74,2,1)
(45,145,1)
(56,136,1)
(106,73,1)
(86,96,1)
(81,117,1)
(10,146,1)
(79,144,1)
(32,133,1)
(9,14,1)
(2,38,1)
(124,2,1)
(48,28,1)
(108,92,1)
(139,50,1)
(38,45,1)
(107,4,1)
(39,55,1)
(138,40,1)
(77,134,1)
(134,71,1)
(80,56,1)
(132,84,1)
(111,101,1)
(137,44,1)
(41,18,1)
(52,60,1)
(127,28,1)
(62,79,1)
(49,35,1)
(135,132,1)
(79,77,1)
(150,77,1)
(121,108,1)
(36,155,1)
(9,131,1)
(152,116,1)
(106,144,1)
(92,139,1)
(94,29,1)
(155,21,1)
(103,121,1)
(73,94,1)
(130,74,1)
(68,6,1)
(59,0,1)
(100,63,1)
(28,135,1)
(112,22,1)
(83,100,1)
(105,81,1)
(6,146,1)
(20,61,1)
(101,67,1)
(146,150,1)
(72,118,1)
(35,103,1)
(14,142,1)
(87,83,1)
(18,147,1)
(119,25,1)
(50,20,1)
(23,60,1)
(62,34,1)
(126,129,1)
(3,105,1)
(78,106,1)
(127,95,1)
(40,113,1)
(76,111,1)
(134,139,1)
(9,47,1)
(42,112,1)
(114,77,1)
(88,139,1)
(148,59,1)
(136,122,1)
(34,144,1)
(97,26,1)
(150,116,1)
(30,137,1)
(151,146,1)
(151,63,1)
(89,127,1)
(45,139,1)
(144,125,1)
(61,65,1)
(51,149,1)
(71,98,1)
(113,10,1)
(9,73,1)
(74,86,1)
(37,34,1)
(104,23,1)
(70,128,1)
(49,139,1)
(15,126,1)
(97,28,1)
(75,70,1)
(34,120,1)
(34,77,1)
(63,80,1)
(123,17,1)
(96,124,1)
(151,63,2)
(2,45,2)
(134,139,2)
(70,105,2)
(3,105,2)
(88,105,2)
(133,112,2)
(15,45,2)
(32,112,2)
(131,45,2)
(50,105,2)
(101,45,2)
(14,142,2)
(76,45,2)
(60,108,2)
(25,45,2)
(100,63,2)
(75,105,2)
(60,49,2)
(4,45,2)
(124,45,2)
(42,112,2)
(103,108,2)
(142,10,2)
(112,77,2)
(150,63,2)
(105,117,2)
(92,45,2)
(150,112,2)
(138,10,2)
(79,144,2)
(130,45,2)
(21,89,2)
(30,137,2)
(146,150,2)
(142,138,2)
(93,105,2)
(71,60,2)
(67,45,2)
(73,142,2)
(128,105,2)
(22,60,2)
(96,45,2)
(74,2,2)
(29,142,2)
(38,45,2)
(139,50,2)
(104,60,2)
(78,73,2)
(10,112,2)
(146,112,2)
(23,60,2)
(138,146,2)
(126,45,2)
(111,45,2)
(79,34,2)
(44,45,2)
(151,146,2)
(137,45,2)
(49,108,2)
(35,108,2)
(16,45,2)
(117,147,2)
(94,142,2)
(95,97,2)
(106,73,2)
(114,60,2)
(150,116,2)
(97,139,2)
(92,139,2)
(119,45,2)
(77,60,2)
(39,119,2)
(0,115,2)
(117,73,2)
(54,45,2)
(148,45,2)
(97,28,2)
(107,45,2)
(149,142,2)
(139,105,2)
(108,92,2)
(40,10,2)
(63,136,2)
(68,112,2)
(151,142,2)
(59,45,2)
(30,45,2)
(74,45,2)
(52,60,2)
(65,105,2)
(39,45,2)
(142,112,2)
(145,105,2)
(127,97,2)
(6,112,2)
(113,10,2)
(92,54,2)
(98,60,2)
(41,73,2)
(127,28,2)
(20,105,2)
(108,45,2)
(92,30,2)
(152,112,2)
(123,112,2)
(134,60,2)
(51,142,2)
(74,86,2)
(81,73,2)
(116,112,2)
(49,139,2)
(37,34,2)
(127,139,2)
(147,73,2)
(105,73,2)
(55,45,2)
(34,144,2)
(121,108,2)
(77,134,2)
(150,77,2)
(45,139,2)
(18,73,2)
(17,112,2)
(153,112,2)
(112,60,2)
(46,45,2)
(47,108,2)
(129,45,2)
(115,45,2)
(86,45,2)
(117,41,2)
(34,77,2)
(0,45,2)
(61,105,2)
(79,77,2)
(45,105,2)
(10,146,2)
(30,8,2)
(27,45,2)
-----------------------------------
(0,service.sin_port = htons(LISTEN_PORT)
(1,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(2,&service)
(3,break;)
(4,service.sin_port)
(5,)
(6,recvResult)
(7,do)
(8,struct sockaddr*)
(9,acceptSocket)
(10,recvResult == SOCKET_ERROR)
(11,listenSocket)
(12,wsaData)
(13,if (recvResult == SOCKET_ERROR || recvResult == 0)
(14,break;)
(15,service)
(16,sin_port)
(17,100)
(18,wsaData)
(19,)
(20,0)
(21,WSACleanup()
(22,INVALID_SOCKET)
(23,acceptSocket)
(24,)
(25,sin_addr)
(26,INVALID_SOCKET)
(27,service)
(28,listenSocket = INVALID_SOCKET)
(29,\\\'\\\\0\\\')
(30,(struct sockaddr*)
(31,acceptSocket)
(32,acceptSocket)
(33,if (WSAStartup(MAKEWORD(2,2)
(34,acceptSocket != INVALID_SOCKET)
(35,LISTEN_BACKLOG)
(36,data)
(37,acceptSocket)
(38,service)
(39,service.sin_addr.s_addr)
(40,0)
(41,&wsaData)
(42,break;)
(43,)
(44,service)
(45,listenSocket == INVALID_SOCKET)
(46,sin_family)
(47,break;)
(48,acceptSocket)
(49,listen(listenSocket, LISTEN_BACKLOG)
(50,socket(PF_INET, SOCK_STREAM, 0)
(51,recvResult)
(52,break;)
(53,)
(54,sizeof(service)
(55,s_addr)
(56,data)
(57,dataBuffer)
(58,)
(59,SOCKET_ERROR)
(60,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(61,SOCK_STREAM)
(62,listenSocket)
(63,data = dataBuffer)
(64,)
(65,PF_INET)
(66,if (acceptSocket != INVALID_SOCKET)
(67,service.sin_family)
(68,SOCKET_ERROR)
(69,service)
(70,wsaDataInit = 1)
(71,NULL)
(72,FALSE)
(73,0)
(74,memset(&service, 0, sizeof(service)
(75,listenSocket)
(76,service)
(77,acceptSocket = accept(listenSocket, NULL, NULL)
(78,2)
(79,closesocket(acceptSocket)
(80,dataBuffer)
(81,NO_ERROR)
(82,recvResult)
(83,CWE15_External_Control_of_System_or_Configuration_Setting__w32_68b_badSink()
(84,wsaDataInit = FALSE)
(85,if (listenSocket == INVALID_SOCKET)
(86,sizeof(service)
(87,RET)
(88,listenSocket)
(89,wsaDataInit)
(90,if (acceptSocket == INVALID_SOCKET)
(91,)
(92,bind(listenSocket, (struct sockaddr*)
(93,wsaDataInit)
(94,data[recvResult] = \\\'\\\\0\\\')
(95,listenSocket)
(96,service)
(97,listenSocket != INVALID_SOCKET)
(98,NULL)
(99,if (wsaDataInit)
(100,CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData = data)
(101,AF_INET)
(102,if (listenSocket != INVALID_SOCKET)
(103,listenSocket)
(104,listenSocket)
(105,WSAStartup(MAKEWORD(2,2)
(106,2)
(107,LISTEN_PORT)
(108,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(109,)
(110,)
(111,service.sin_family = AF_INET)
(112,acceptSocket == INVALID_SOCKET)
(113,recvResult)
(114,acceptSocket)
(115,htons(LISTEN_PORT)
(116,100 - 1)
(117,WSAStartup(MAKEWORD(2,2)
(118,wsaDataInit)
(119,service.sin_addr)
(120,INVALID_SOCKET)
(121,SOCKET_ERROR)
(122,"")
(123,1)
(124,0)
(125,INVALID_SOCKET)
(126,service.sin_addr.s_addr = INADDR_ANY)
(127,closesocket(listenSocket)
(128,1)
(129,INADDR_ANY)
(130,service)
(131,break;)
(132,listenSocket)
(133,recvResult)
(134,accept(listenSocket, NULL, NULL)
(135,INVALID_SOCKET)
(136,dataBuffer[100] = "")
(137,&service)
(138,recvResult == 0)
(139,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(140,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(141,)
(142,recvResult == SOCKET_ERROR || recvResult == 0)
(143,data)
(144,acceptSocket = INVALID_SOCKET)
(145,INVALID_SOCKET)
(146,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(147,MAKEWORD(2,2)
(148,listenSocket)
(149,data)
(150,recv(acceptSocket, data, 100 - 1, 0)
(151,data[recvResult])
(152,0)
(153,data)
(154,)
(155,CWE15_External_Control_of_System_or_Configuration_Setting__w32_68_badData)
(156,dataBuffer)
(157,wsaDataInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
