-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[250] = L"PATH=";
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
        PUTENV(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
58,59
60,61
60,62
60,63
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
80,81
80,82
81,82
81,83
82,83
82,84
84,85
87,88
87,89
88,89
89,90
89,91
90,91
92,93
92,94
92,95
93,94
95,96
98,99
98,100
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
106,108
107,108
107,109
107,110
107,111
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
119,120
120,121
120,122
122,123
124,125
126,127
128,129
128,130
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
136,138
137,138
139,140
142,143
143,144
143,145
144,145
146,147
148,149
149,150
149,151
150,151
151,152
153,154
155,156
155,157
156,157
157,158
157,159
159,160
159,161
159,162
162,163
163,164
164,165
166,167
167,168
167,169
168,169
170,171
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,42,46,48,52,54,55,59,64,66,70,72,76,78,79,83,85,86,91,94,96,97,101,103,109,112,114,117,118,121,123,125,127,132,133,138,140,141,145,147,152,154,158,160,161,165,169,171
-----computeFrom-----
44,45
44,46
81,82
81,83
82,83
82,84
89,90
89,91
99,100
99,101
106,107
106,108
110,111
110,112
120,121
120,122
135,136
135,137
149,150
149,151
-----guardedBy-----
85,140
103,127
101,147
112,138
123,140
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
void
CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_32_bad()
CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[250] = L"PATH=";    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[250] = L"PATH=";
wchar_t dataBuffer[250] = L"PATH=";
wchar_t
dataBuffer[250] = L"PATH="
dataBuffer
[250]
250
= L"PATH="
L"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(250-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */        PUTENV(data);    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(70,69,0)
(1,69,0)
(3,42,0)
(56,6,0)
(44,32,0)
(23,1,0)
(61,22,0)
(19,10,0)
(57,6,0)
(42,49,0)
(6,56,0)
(57,20,0)
(66,55,0)
(51,60,0)
(47,17,0)
(29,47,0)
(33,20,0)
(61,49,0)
(10,23,0)
(9,25,0)
(21,72,0)
(74,57,0)
(30,7,0)
(49,42,0)
(77,20,0)
(1,23,0)
(42,13,0)
(35,13,0)
(69,24,0)
(38,55,0)
(37,14,0)
(63,69,0)
(63,24,0)
(5,15,0)
(24,32,0)
(20,57,0)
(59,61,0)
(62,11,0)
(13,28,0)
(64,28,0)
(14,32,0)
(11,40,0)
(73,72,0)
(40,18,0)
(36,49,0)
(34,43,0)
(28,13,0)
(60,10,0)
(39,32,0)
(23,55,0)
(27,17,0)
(68,55,0)
(71,46,0)
(46,40,0)
(45,22,0)
(50,25,0)
(75,15,0)
(43,57,0)
(8,46,0)
(58,24,0)
(13,32,0)
(6,25,0)
(48,10,0)
(17,47,0)
(53,18,0)
(25,6,0)
(17,32,0)
(25,23,0)
(2,23,0)
(40,46,0)
(65,5,0)
(7,17,0)
(12,69,0)
(22,32,0)
(41,70,0)
(70,17,0)
(4,1,0)
(7,63,0)
(21,40,0)
(10,60,0)
(16,14,0)
(0,32,0)
(57,43,0)
(69,70,0)
(20,23,0)
(6,57,0)
(52,63,0)
(20,69,0)
(31,21,0)
(54,40,0)
(49,22,0)
(67,32,0)
(55,24,0)
(76,11,0)
(57,40,0)
(28,64,1)
(13,28,1)
(7,17,1)
(46,71,1)
(11,76,1)
(60,51,1)
(37,67,1)
(30,11,1)
(36,63,1)
(1,4,1)
(26,61,1)
(57,6,1)
(35,17,1)
(51,10,1)
(23,1,1)
(6,56,1)
(30,21,1)
(20,33,1)
(57,20,1)
(3,36,1)
(8,54,1)
(77,11,1)
(48,19,1)
(70,41,1)
(10,23,1)
(62,40,1)
(34,57,1)
(2,69,1)
(40,46,1)
(75,5,1)
(59,49,1)
(43,57,1)
(11,40,1)
(4,2,1)
(57,74,1)
(19,23,1)
(71,8,1)
(49,42,1)
(31,75,1)
(25,23,1)
(74,6,1)
(21,31,1)
(6,25,1)
(12,14,1)
(70,17,1)
(42,3,1)
(20,69,1)
(33,77,1)
(21,40,1)
(17,47,1)
(14,16,1)
(63,52,1)
(31,43,1)
(65,43,1)
(25,50,1)
(63,69,1)
(76,62,1)
(41,12,1)
(54,60,1)
(43,34,1)
(9,20,1)
(5,65,1)
(67,13,1)
(60,10,1)
(61,59,1)
(42,13,1)
(16,37,1)
(47,29,1)
(20,23,1)
(7,30,1)
(61,49,1)
(10,48,1)
(64,35,1)
(30,60,1)
(1,69,1)
(57,40,1)
(69,70,1)
(29,27,1)
(50,9,1)
(52,7,1)
(49,42,2)
(50,11,2)
(20,69,2)
(70,17,2)
(6,56,2)
(21,11,2)
(25,11,2)
(71,60,2)
(5,43,2)
(43,57,2)
(8,60,2)
(20,23,2)
(10,23,2)
(77,11,2)
(1,69,2)
(21,40,2)
(42,13,2)
(23,1,2)
(17,47,2)
(46,60,2)
(57,6,2)
(40,46,2)
(65,43,2)
(11,60,2)
(69,70,2)
(63,69,2)
(57,11,2)
(57,20,2)
(43,11,2)
(25,23,2)
(33,11,2)
(74,11,2)
(62,60,2)
(40,60,2)
(76,60,2)
(61,49,2)
(34,11,2)
(13,28,2)
(6,25,2)
(9,11,2)
(60,10,2)
(75,43,2)
(57,40,2)
(31,11,2)
(7,17,2)
(11,40,2)
(54,60,2)
(20,11,2)
(6,11,2)
-----------------------------------
(0,data)
(1,wcslen(data)
(2,dataLen)
(3,dataPtr2)
(4,data)
(5,printLine("fgetws()
(6,(int)
(7,*dataPtr1)
(8,FILENAME)
(9,250)
(10,250-dataLen)
(11,pFile != NULL)
(12,data)
(13,* *dataPtr2 = &data)
(14,data = dataBuffer)
(15,)
(16,dataBuffer)
(17,* *dataPtr1 = &data)
(18,)
(19,250)
(20,data+dataLen)
(21,fclose(pFile)
(22,)
(23,dataLen = wcslen(data)
(24,)
(25,250-dataLen)
(26,RET)
(27,dataPtr1)
(28,&data)
(29,data)
(30,dataPtr1)
(31,pFile)
(32,)
(33,dataLen)
(34,NULL)
(35,dataPtr2)
(36,data)
(37,data)
(38,if (250-dataLen > 1)
(39,dataPtr1)
(40,pFile = fopen(FILENAME, "r")
(41,dataPtr1)
(42,*dataPtr2)
(43,fgetws(data+dataLen, (int)
(44,dataPtr2)
(45,data)
(46,fopen(FILENAME, "r")
(47,&data)
(48,dataLen)
(49,* data = *dataPtr2)
(50,dataLen)
(51,1)
(52,data)
(53,if (pFile != NULL)
(54,pFile)
(55,)
(56,int)
(57,fgetws(data+dataLen, (int)
(58,data)
(59,data)
(60,250-dataLen > 1)
(61,PUTENV(data)
(62,pFile)
(63,*dataPtr1 = data)
(64,data)
(65,"fgetws()
(66,pFile)
(67,"PATH=")
(68,dataLen)
(69,* data = *dataPtr1)
(70,*dataPtr1)
(71,"r")
(72,)
(73,if (fgetws(data+dataLen, (int)
(74,pFile)
(75,\\\'\\\\0\\\')
(76,NULL)
(77,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
