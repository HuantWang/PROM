-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fwprintf(pFile, L"User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
38,39
38,40
38,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
58,59
59,60
59,61
59,62
60,61
64,65
64,66
65,66
65,67
66,67
66,68
66,69
66,70
67,68
69,70
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
93,95
94,95
96,97
98,99
98,100
99,100
99,101
100,101
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
114,117
115,116
115,117
116,117
116,118
116,119
116,120
116,121
116,122
116,123
117,118
119,120
121,122
123,124
125,126
127,128
129,130
130,131
133,134
133,135
134,135
135,136
135,137
136,137
139,140
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
151,152
152,153
152,154
152,155
152,156
153,154
155,156
158,159
160,161
160,162
161,162
163,164
164,165
165,166
165,167
166,167
168,169
-----nextToken-----
2,4,9,14,16,18,20,24,26,28,32,34,37,39,40,42,45,47,48,50,54,56,57,61,62,63,68,70,71,73,75,80,81,86,87,88,92,95,97,101,102,108,111,112,113,118,120,122,124,126,128,131,132,137,138,142,144,149,150,154,156,157,159,162,167,169
-----computeFrom-----
65,66
65,67
83,84
83,85
90,91
90,92
99,100
99,101
105,106
105,107
109,110
109,111
115,116
115,117
-----guardedBy-----
70,86
101,111
131,144
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_wchar_t_08_bad(){    if(staticReturnsTrue())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_08_bad()
CWE534_Info_Exposure_Debug_Log__w32_wchar_t_08_bad
{    if(staticReturnsTrue())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
if(staticReturnsTrue())    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fwprintf(pFile, L"User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(pFile, L"User attempted access with password: %s\n", password);
fwprintf(pFile, L"User attempted access with password: %s\n", password)
fwprintf
fwprintf
pFile
pFile
L"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(61,17,0)
(3,30,0)
(51,16,0)
(22,38,0)
(17,42,0)
(34,56,0)
(14,64,0)
(54,38,0)
(35,27,0)
(2,52,0)
(18,38,0)
(0,38,0)
(60,38,0)
(52,6,0)
(16,13,0)
(37,30,0)
(46,37,0)
(24,35,0)
(45,11,0)
(49,30,0)
(39,52,0)
(31,30,0)
(9,52,0)
(62,13,0)
(25,38,0)
(27,35,0)
(62,53,0)
(59,20,0)
(57,12,0)
(6,52,0)
(30,37,0)
(21,26,0)
(50,38,0)
(47,16,0)
(40,10,0)
(33,38,0)
(10,38,0)
(13,16,0)
(43,15,0)
(1,6,0)
(36,30,0)
(20,42,0)
(23,27,0)
(13,38,0)
(28,29,0)
(38,63,0)
(5,11,0)
(15,30,0)
(26,12,0)
(30,15,0)
(44,13,0)
(19,62,0)
(32,38,0)
(11,35,0)
(8,38,0)
(35,38,0)
(41,34,0)
(55,10,0)
(48,30,0)
(47,51,1)
(41,15,1)
(13,16,1)
(11,35,1)
(46,49,1)
(58,34,1)
(45,5,1)
(62,13,1)
(24,57,1)
(24,6,1)
(2,9,1)
(6,52,1)
(17,61,1)
(15,30,1)
(39,2,1)
(6,1,1)
(10,40,1)
(34,41,1)
(55,0,1)
(31,3,1)
(9,13,1)
(7,62,1)
(16,47,1)
(36,14,1)
(37,46,1)
(3,36,1)
(25,60,1)
(15,43,1)
(58,20,1)
(7,4,1)
(30,37,1)
(49,48,1)
(0,4,1)
(5,35,1)
(62,19,1)
(14,11,1)
(19,58,1)
(59,17,1)
(52,39,1)
(48,31,1)
(23,24,1)
(20,59,1)
(7,58,1)
(61,15,1)
(51,44,1)
(57,26,1)
(43,30,1)
(11,45,1)
(1,52,1)
(44,25,1)
(21,6,1)
(35,27,1)
(36,11,1)
(40,55,1)
(60,10,1)
(27,23,1)
(26,21,1)
(44,4,2)
(31,4,2)
(36,4,2)
(48,4,2)
(59,15,2)
(6,52,2)
(30,4,2)
(60,4,2)
(43,4,2)
(49,4,2)
(25,4,2)
(13,4,2)
(15,30,2)
(41,15,2)
(1,4,2)
(20,15,2)
(9,4,2)
(34,15,2)
(37,4,2)
(23,4,2)
(62,58,2)
(6,4,2)
(24,4,2)
(55,4,2)
(40,4,2)
(0,4,2)
(52,4,2)
(57,6,2)
(10,4,2)
(35,4,2)
(11,35,2)
(14,11,2)
(30,37,2)
(13,16,2)
(19,58,2)
(47,4,2)
(17,15,2)
(61,15,2)
(45,4,2)
(58,4,2)
(11,4,2)
(62,13,2)
(5,4,2)
(39,4,2)
(15,4,2)
(26,6,2)
(3,4,2)
(2,4,2)
(27,4,2)
(16,4,2)
(21,6,2)
(35,27,2)
(46,4,2)
(51,4,2)
-----------------------------------
(0,"")
(1,NULL)
(2,100)
(3,domain)
(4,staticReturnsTrue()
(5,passwordLen)
(6,fgetws(password, 100, stdin)
(7,RET)
(8,if (pFile)
(9,password)
(10,passwordLen = 0)
(11,passwordLen > 0)
(12,)
(13,* pFile = fopen("debug.txt", "a+")
(14,\\\'\\\\0\\\')
(15,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(16,fopen("debug.txt", "a+")
(17,printLine("User logged in successfully.")
(18,pHandle)
(19,pFile)
(20,CloseHandle(pHandle)
(21,"fgetws()
(22,passwordLen)
(23,password)
(24,passwordLen)
(25,"Domain")
(26,printLine("fgetws()
(27,wcslen(password)
(28,if(staticReturnsTrue()
(29,)
(30,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(31,password)
(32,if (fgetws(password, 100, stdin)
(33,pFile)
(34,printLine("Unable to login.")
(35,passwordLen = wcslen(password)
(36,username)
(37,&pHandle)
(38,)
(39,stdin)
(40,0)
(41,"Unable to login.")
(42,)
(43,0)
(44,pFile)
(45,0)
(46,pHandle)
(47,"a+")
(48,LOGON32_LOGON_NETWORK)
(49,LOGON32_PROVIDER_DEFAULT)
(50,if (passwordLen > 0)
(51,"debug.txt")
(52,fgetws(password, 100, stdin)
(53,)
(54,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(55,passwordLen)
(56,)
(57,\\\'\\\\0\\\')
(58,pFile)
(59,pHandle)
(60,"User")
(61,"User logged in successfully.")
(62,fclose(pFile)
(63,)
(64,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
