-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_17_bad()
{
    int i;
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            char *replace;
            SOCKET connectSocket = INVALID_SOCKET;
            size_t dataLen = strlen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* Abort on error or the connection was closed */
                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(char)] = '\0';
                /* Eliminate CRLF */
                replace = strchr(data, '\r');
                if (replace)
                {
                    *replace = '\0';
                }
                replace = strchr(data, '\n');
                if (replace)
                {
                    *replace = '\0';
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
33,34
34,35
34,36
35,36
38,39
38,40
39,40
42,43
43,44
45,46
46,47
46,48
46,49
46,50
46,51
46,52
46,53
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
61,62
61,63
64,65
65,66
65,67
66,67
68,69
68,70
70,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
79,80
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
86,89
86,90
86,91
86,92
86,93
86,94
86,95
86,96
86,97
86,98
86,99
86,100
87,88
88,89
88,90
89,90
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
113,114
116,117
117,118
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
148,149
150,151
152,153
152,154
153,154
153,155
154,155
154,156
154,157
154,158
155,156
157,158
159,160
159,161
160,161
160,162
161,162
163,164
165,166
166,167
168,169
169,170
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
180,183
180,184
180,185
181,182
183,184
185,186
185,187
186,187
186,188
188,189
190,191
191,192
191,193
192,193
194,195
196,197
196,198
197,198
198,199
198,200
201,202
202,203
202,204
203,204
203,205
205,206
209,210
209,211
210,211
210,212
211,212
211,213
212,213
214,215
216,217
216,218
217,218
220,221
222,223
223,224
223,225
224,225
224,226
225,226
227,228
227,229
228,229
230,231
230,232
231,232
233,234
234,235
234,236
238,239
239,240
239,241
240,241
242,243
242,244
242,245
243,244
245,246
248,249
248,250
249,250
251,252
252,253
253,254
253,255
254,255
255,256
258,259
259,260
259,261
260,261
262,263
262,264
262,265
263,264
265,266
268,269
268,270
269,270
271,272
272,273
273,274
273,275
274,275
275,276
279,280
279,281
280,281
280,282
281,282
283,284
285,286
286,287
287,288
287,289
288,289
290,291
292,293
293,294
293,295
294,295
296,297
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,25,29,31,36,37,40,41,44,49,51,55,57,60,62,63,67,69,72,76,78,82,84,90,93,95,97,99,103,105,107,111,114,115,119,124,125,127,133,134,135,138,140,145,146,149,151,156,158,162,164,167,171,173,175,179,182,184,187,189,193,195,199,200,204,206,207,208,213,215,218,219,221,226,229,232,235,236,237,241,244,246,247,250,256,257,261,264,266,267,270,276,277,278,282,284,289,291,295,297
-----computeFrom-----
27,28
27,29
34,35
34,36
38,39
38,40
88,89
88,90
101,102
101,103
121,122
121,123
129,130
129,131
142,143
142,144
153,154
153,155
177,178
177,179
191,192
191,193
196,197
196,198
202,203
202,204
203,204
203,205
210,211
210,212
211,212
211,213
216,217
216,218
223,224
223,225
227,228
227,229
230,231
230,232
239,240
239,241
253,254
253,255
259,260
259,261
273,274
273,275
280,281
280,282
-----guardedBy-----
282,291
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_17_bad(){    int i;    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_17_bad()
CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_17_bad
{    int i;    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET connectSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* Abort on error or the connection was closed */                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (250 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (250 - dataLen - 1)
sizeof(char)
char
char

(250 - dataLen - 1)
250 - dataLen - 1
250 - dataLen
250
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(11,106,0)
(121,58,0)
(58,6,0)
(66,132,0)
(78,174,0)
(74,98,0)
(61,62,0)
(129,88,0)
(144,19,0)
(63,143,0)
(159,171,0)
(53,42,0)
(33,143,0)
(156,119,0)
(3,42,0)
(174,171,0)
(40,169,0)
(157,154,0)
(106,11,0)
(69,3,0)
(153,82,0)
(149,119,0)
(25,132,0)
(28,48,0)
(7,48,0)
(132,46,0)
(19,143,0)
(15,100,0)
(169,137,0)
(12,172,0)
(105,43,0)
(113,128,0)
(73,48,0)
(75,151,0)
(172,53,0)
(142,65,0)
(93,121,0)
(112,126,0)
(166,93,0)
(146,48,0)
(42,53,0)
(137,48,0)
(58,121,0)
(128,83,0)
(49,31,0)
(76,154,0)
(71,95,0)
(125,48,0)
(115,151,0)
(103,146,0)
(53,175,0)
(168,169,0)
(45,115,0)
(12,119,0)
(131,95,0)
(54,109,0)
(145,79,0)
(96,37,0)
(179,172,0)
(99,48,0)
(154,76,0)
(77,11,0)
(85,4,0)
(120,145,0)
(139,48,0)
(23,38,0)
(2,151,0)
(86,143,0)
(89,143,0)
(127,106,0)
(9,139,0)
(43,62,0)
(171,126,0)
(82,48,0)
(114,94,0)
(81,19,0)
(109,137,0)
(5,31,0)
(67,122,0)
(79,145,0)
(14,58,0)
(12,17,0)
(108,137,0)
(16,72,0)
(177,115,0)
(172,12,0)
(117,6,0)
(163,48,0)
(52,143,0)
(172,137,0)
(24,102,0)
(130,22,0)
(118,64,0)
(170,123,0)
(59,38,0)
(178,70,0)
(76,41,0)
(54,56,0)
(122,79,0)
(42,3,0)
(119,171,0)
(150,143,0)
(144,171,0)
(58,171,0)
(180,130,0)
(47,145,0)
(17,12,0)
(174,146,0)
(46,132,0)
(130,151,0)
(164,109,0)
(64,137,0)
(54,94,0)
(68,103,0)
(19,144,0)
(143,148,0)
(43,46,0)
(82,102,0)
(93,28,0)
(56,54,0)
(87,70,0)
(62,39,0)
(155,139,0)
(35,146,0)
(1,28,0)
(151,143,0)
(104,91,0)
(57,153,0)
(36,140,0)
(28,172,0)
(121,19,0)
(11,48,0)
(90,48,0)
(100,93,0)
(65,109,0)
(41,76,0)
(135,144,0)
(136,153,0)
(133,154,0)
(94,54,0)
(115,137,0)
(160,31,0)
(53,172,0)
(20,3,0)
(109,65,0)
(77,95,0)
(171,140,0)
(6,48,0)
(167,171,0)
(123,140,0)
(175,53,0)
(176,77,0)
(26,51,0)
(3,19,0)
(95,77,0)
(173,5,0)
(80,174,0)
(103,96,0)
(130,137,0)
(101,42,0)
(146,174,0)
(38,99,0)
(147,41,0)
(97,121,0)
(121,93,0)
(50,46,0)
(60,152,0)
(122,28,0)
(132,171,0)
(111,27,0)
(92,96,0)
(109,98,0)
(98,109,0)
(109,54,0)
(46,48,0)
(83,128,0)
(76,27,0)
(137,64,0)
(8,140,0)
(29,143,0)
(55,122,0)
(128,48,0)
(119,19,0)
(158,143,0)
(88,128,0)
(30,48,0)
(84,140,0)
(123,171,0)
(126,140,0)
(161,126,0)
(141,83,0)
(138,172,0)
(27,76,0)
(165,175,0)
(79,122,0)
(134,99,0)
(119,12,0)
(124,143,0)
(162,143,0)
(4,31,0)
(32,4,0)
(70,143,0)
(93,100,0)
(13,18,0)
(102,82,0)
(128,88,0)
(44,64,0)
(0,64,0)
(172,28,0)
(145,28,0)
(10,140,0)
(93,100,1)
(58,121,1)
(5,31,1)
(130,137,1)
(55,67,1)
(107,123,1)
(151,75,1)
(179,1,1)
(78,35,1)
(19,144,1)
(81,151,1)
(54,56,1)
(127,77,1)
(53,42,1)
(41,147,1)
(119,171,1)
(111,76,1)
(108,139,1)
(23,128,1)
(77,176,1)
(76,41,1)
(98,74,1)
(85,31,1)
(131,71,1)
(130,180,1)
(60,21,1)
(77,95,1)
(43,105,1)
(123,171,1)
(98,109,1)
(2,70,1)
(132,171,1)
(62,61,1)
(32,85,1)
(136,57,1)
(92,103,1)
(101,175,1)
(24,153,1)
(116,146,1)
(68,116,1)
(70,178,1)
(83,141,1)
(15,166,1)
(54,94,1)
(175,165,1)
(16,27,1)
(6,117,1)
(144,171,1)
(171,126,1)
(129,113,1)
(177,16,1)
(50,96,1)
(149,156,1)
(120,122,1)
(177,26,1)
(166,97,1)
(146,174,1)
(67,28,1)
(115,151,1)
(153,136,1)
(102,24,1)
(0,118,1)
(85,5,1)
(169,168,1)
(176,95,1)
(12,119,1)
(174,80,1)
(147,154,1)
(115,45,1)
(103,68,1)
(103,146,1)
(168,40,1)
(138,53,1)
(133,19,1)
(65,142,1)
(109,65,1)
(35,6,1)
(43,46,1)
(74,109,1)
(4,31,1)
(46,132,1)
(115,137,1)
(135,81,1)
(144,135,1)
(82,102,1)
(3,19,1)
(169,137,1)
(142,54,1)
(11,106,1)
(173,21,1)
(126,161,1)
(21,115,1)
(47,120,1)
(76,154,1)
(44,0,1)
(119,149,1)
(49,171,1)
(95,131,1)
(3,69,1)
(79,145,1)
(5,173,1)
(172,137,1)
(109,54,1)
(165,12,1)
(14,79,1)
(21,130,1)
(4,32,1)
(57,11,1)
(121,19,1)
(88,129,1)
(45,177,1)
(59,23,1)
(40,137,1)
(172,53,1)
(97,14,1)
(61,43,1)
(109,137,1)
(96,92,1)
(157,133,1)
(133,110,1)
(145,47,1)
(119,19,1)
(69,20,1)
(167,126,1)
(27,76,1)
(105,34,1)
(27,111,1)
(106,127,1)
(130,151,1)
(100,15,1)
(87,4,1)
(28,172,1)
(160,49,1)
(172,12,1)
(31,160,1)
(122,28,1)
(156,179,1)
(113,83,1)
(110,34,1)
(134,38,1)
(145,28,1)
(121,93,1)
(173,60,1)
(12,17,1)
(64,44,1)
(38,59,1)
(128,83,1)
(58,171,1)
(154,157,1)
(141,169,1)
(53,175,1)
(80,78,1)
(128,88,1)
(110,62,1)
(161,112,1)
(177,110,1)
(93,28,1)
(178,87,1)
(170,4,1)
(1,98,1)
(99,134,1)
(139,9,1)
(117,58,1)
(123,170,1)
(171,159,1)
(132,66,1)
(20,101,1)
(174,171,1)
(164,82,1)
(137,64,1)
(13,98,1)
(9,155,1)
(25,50,1)
(71,99,1)
(159,167,1)
(26,169,1)
(172,138,1)
(75,2,1)
(114,164,1)
(177,13,1)
(34,46,1)
(94,114,1)
(177,104,1)
(79,122,1)
(118,108,1)
(42,3,1)
(104,79,1)
(180,115,1)
(66,25,1)
(122,55,1)
(50,116,1)
(155,27,1)
(96,116,2)
(118,27,2)
(60,21,2)
(169,137,2)
(50,79,2)
(115,4,2)
(32,4,2)
(12,119,2)
(54,169,2)
(94,169,2)
(132,79,2)
(109,54,2)
(92,116,2)
(172,98,2)
(27,110,2)
(109,137,2)
(168,27,2)
(173,4,2)
(139,27,2)
(130,137,2)
(93,100,2)
(172,137,2)
(117,79,2)
(169,27,2)
(109,65,2)
(46,132,2)
(147,110,2)
(175,98,2)
(61,34,2)
(119,98,2)
(104,79,2)
(53,175,2)
(93,28,2)
(93,79,2)
(172,12,2)
(146,79,2)
(132,171,2)
(110,79,2)
(83,169,2)
(136,169,2)
(172,53,2)
(144,4,2)
(121,93,2)
(179,98,2)
(176,169,2)
(76,154,2)
(35,79,2)
(25,79,2)
(43,34,2)
(13,98,2)
(100,79,2)
(78,79,2)
(98,169,2)
(65,169,2)
(101,98,2)
(75,4,2)
(2,4,2)
(74,169,2)
(119,19,2)
(76,110,2)
(129,169,2)
(98,109,2)
(58,79,2)
(111,110,2)
(116,79,2)
(42,3,2)
(12,98,2)
(165,98,2)
(122,28,2)
(79,145,2)
(88,169,2)
(3,98,2)
(70,4,2)
(66,79,2)
(106,169,2)
(34,79,2)
(133,4,2)
(57,169,2)
(27,76,2)
(80,79,2)
(15,79,2)
(156,98,2)
(154,110,2)
(23,169,2)
(53,42,2)
(54,94,2)
(97,79,2)
(109,169,2)
(115,137,2)
(62,34,2)
(6,79,2)
(121,79,2)
(174,171,2)
(151,4,2)
(5,31,2)
(53,98,2)
(138,98,2)
(41,110,2)
(149,98,2)
(58,121,2)
(14,79,2)
(3,19,2)
(122,98,2)
(146,174,2)
(54,56,2)
(16,27,2)
(27,4,2)
(4,31,2)
(28,98,2)
(77,95,2)
(103,146,2)
(24,169,2)
(115,151,2)
(171,126,2)
(164,169,2)
(12,17,2)
(46,79,2)
(76,41,2)
(144,171,2)
(26,169,2)
(40,27,2)
(128,83,2)
(19,144,2)
(128,169,2)
(85,4,2)
(82,169,2)
(9,27,2)
(174,79,2)
(141,169,2)
(157,4,2)
(5,4,2)
(19,4,2)
(155,27,2)
(28,172,2)
(76,4,2)
(142,169,2)
(120,122,2)
(166,79,2)
(64,27,2)
(130,151,2)
(99,169,2)
(119,171,2)
(41,4,2)
(95,169,2)
(81,4,2)
(127,169,2)
(59,169,2)
(58,171,2)
(177,4,2)
(11,169,2)
(82,102,2)
(0,27,2)
(11,106,2)
(111,4,2)
(137,27,2)
(147,4,2)
(77,169,2)
(43,46,2)
(79,122,2)
(103,116,2)
(145,28,2)
(4,4,2)
(44,27,2)
(1,98,2)
(55,98,2)
(79,98,2)
(180,115,2)
(68,116,2)
(67,98,2)
(114,169,2)
(128,88,2)
(45,4,2)
(153,169,2)
(108,27,2)
(69,98,2)
(131,169,2)
(47,122,2)
(157,110,2)
(178,4,2)
(154,4,2)
(105,34,2)
(20,98,2)
(21,4,2)
(123,171,2)
(137,64,2)
(87,4,2)
(145,122,2)
(135,4,2)
(113,169,2)
(134,169,2)
(102,169,2)
(130,115,2)
(121,19,2)
(38,169,2)
(71,169,2)
(42,98,2)
(133,110,2)
-----------------------------------
(0,SOCK_STREAM)
(1,recvResult)
(2,connectSocket)
(3,dataLen - 1)
(4,i < 1)
(5,i++)
(6,data[dataLen + recvResult / sizeof(char)
(7,if (recvResult == SOCKET_ERROR || recvResult == 0)
(8,i)
(9,1)
(10,data)
(11,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(12,(char *)
(13,break;)
(14,data)
(15,char)
(16,break;)
(17,char *)
(18,)
(19,dataLen = strlen(data)
(20,dataLen)
(21,wsaDataInit)
(22,)
(23,service)
(24,TCP_PORT)
(25,data)
(26,break;)
(27,WSAStartup(MAKEWORD(2,2)
(28,recvResult = recv(connectSocket, (char *)
(29,connectSocket)
(30,if (replace)
(31,i = 0)
(32,1)
(33,replace)
(34,replace)
(35,replace)
(36,for(i = 0; i < 1; i++)
(37,)
(38,service.sin_family)
(39,)
(40,connectSocket)
(41,&wsaData)
(42,250 - dataLen - 1)
(43,*replace)
(44,IPPROTO_TCP)
(45,INVALID_SOCKET)
(46,replace = strchr(data, \\\'\\\\n\\\')
(47,0)
(48,)
(49,i)
(50,replace)
(51,)
(52,recvResult)
(53,sizeof(char)
(54,(struct sockaddr*)
(55,SOCKET_ERROR)
(56,struct sockaddr*)
(57,service)
(58,data[dataLen + recvResult / sizeof(char)
(59,sin_family)
(60,WSACleanup()
(61,\\\'\\\\0\\\')
(62,*replace = \\\'\\\\0\\\')
(63,dataLen)
(64,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(65,sizeof(service)
(66,\\\'\\\\n\\\')
(67,recvResult)
(68,replace)
(69,1)
(70,wsaDataInit = 0)
(71,service)
(72,)
(73,if (connectSocket == INVALID_SOCKET)
(74,SOCKET_ERROR)
(75,INVALID_SOCKET)
(76,WSAStartup(MAKEWORD(2,2)
(77,service.sin_addr.s_addr)
(78,data)
(79,recvResult == SOCKET_ERROR || recvResult == 0)
(80,\\\'\\\\r\\\')
(81,dataLen)
(82,service.sin_port = htons(TCP_PORT)
(83,&service)
(84,dataBuffer)
(85,i)
(86,do)
(87,wsaDataInit)
(88,sizeof(service)
(89,if (connectSocket != INVALID_SOCKET)
(90,if (replace)
(91,)
(92,\\\'\\\\0\\\')
(93,recvResult / sizeof(char)
(94,&service)
(95,service.sin_addr)
(96,*replace = \\\'\\\\0\\\')
(97,dataLen)
(98,connect(connectSocket, (struct sockaddr*)
(99,service.sin_family = AF_INET)
(100,sizeof(char)
(101,250)
(102,htons(TCP_PORT)
(103,*replace)
(104,break;)
(105,replace)
(106,inet_addr(IP_ADDRESS)
(107,RET)
(108,connectSocket)
(109,connect(connectSocket, (struct sockaddr*)
(110,0)
(111,NO_ERROR)
(112,dataBuffer)
(113,0)
(114,service)
(115,connectSocket != INVALID_SOCKET)
(116,replace)
(117,\\\'\\\\0\\\')
(118,AF_INET)
(119,data + dataLen)
(120,recvResult)
(121,dataLen + recvResult / sizeof(char)
(122,recvResult == SOCKET_ERROR)
(123,PUTENV(data)
(124,wsaData)
(125,if (WSAStartup(MAKEWORD(2,2)
(126,dataBuffer[250] = "PATH=")
(127,IP_ADDRESS)
(128,memset(&service, 0, sizeof(service)
(129,service)
(130,CLOSE_SOCKET(connectSocket)
(131,sin_addr)
(132,strchr(data, \\\'\\\\n\\\')
(133,2)
(134,AF_INET)
(135,data)
(136,sin_port)
(137,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(138,0)
(139,wsaDataInit = 1)
(140,)
(141,service)
(142,service)
(143,)
(144,strlen(data)
(145,recvResult == 0)
(146,replace = strchr(data, \\\'\\\\r\\\')
(147,wsaData)
(148,)
(149,dataLen)
(150,service)
(151,connectSocket = INVALID_SOCKET)
(152,)
(153,service.sin_port)
(154,MAKEWORD(2,2)
(155,wsaDataInit)
(156,data)
(157,2)
(158,wsaDataInit)
(159,dataBuffer)
(160,0)
(161,"PATH=")
(162,if (wsaDataInit)
(163,if (connect(connectSocket, (struct sockaddr*)
(164,connectSocket)
(165,char)
(166,recvResult)
(167,data)
(168,INVALID_SOCKET)
(169,connectSocket == INVALID_SOCKET)
(170,data)
(171,data = dataBuffer)
(172,recv(connectSocket, (char *)
(173,i)
(174,strchr(data, \\\'\\\\r\\\')
(175,sizeof(char)
(176,s_addr)
(177,connectSocket)
(178,0)
(179,connectSocket)
(180,connectSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
