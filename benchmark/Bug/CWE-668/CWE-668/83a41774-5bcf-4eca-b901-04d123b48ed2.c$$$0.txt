-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad()
{
    {
        char password[100] = "";
        size_t passwordLen = 0;
        HANDLE hUser;
        char * username = "User";
        char * domain = "Domain";
        if (fgets(password, 100, stdin) == NULL)
        {
            printLine("fgets() failed");
            /* Restore NUL terminator if fgets fails */
            password[0] = '\0';
        }
        /* Remove the carriage return from the string that is inserted by fgets() */
        passwordLen = strlen(password);
        if (passwordLen > 0)
        {
            password[passwordLen-1] = '\0';
        }
        /* Use the password in LogonUser() to establish that it is "sensitive" */
        if (LogonUserA(
                    username,
                    domain,
                    password,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &hUser) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(hUser);
        }
        else
        {
            printLine("Unable to login.");
        }
        /* FLAW: Release password from the stack without first clearing the buffer */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
6,14
6,15
7,8
8,9
8,10
10,11
10,12
10,13
12,13
14,15
16,17
17,18
17,19
18,19
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
33,34
33,35
33,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
44,45
46,47
46,48
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
96,99
97,98
97,99
98,99
98,100
98,101
98,102
98,103
98,104
98,105
99,100
101,102
103,104
105,106
107,108
109,110
111,112
112,113
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,9,11,13,15,19,21,23,27,29,32,34,35,37,40,42,43,45,50,52,53,55,57,62,63,68,69,70,74,77,79,83,84,90,93,94,95,100,102,104,106,108,110,113,114,119,120,124,126,131,132
-----computeFrom-----
47,48
47,49
65,66
65,67
72,73
72,74
81,82
81,83
87,88
87,89
91,92
91,93
97,98
97,99
-----guardedBy-----
52,68
83,93
113,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad(){    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad
{    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }}
{        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }
passwordLen > 0
passwordLen
passwordLen
0
{            password[passwordLen-1] = '\0';        }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{            printLine("User logged in successfully.");            CloseHandle(hUser);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(24,8,0)
(7,31,0)
(34,27,0)
(60,54,0)
(27,28,0)
(52,6,0)
(63,59,0)
(54,22,0)
(36,61,0)
(53,28,0)
(32,46,0)
(46,6,0)
(20,29,0)
(21,46,0)
(29,22,0)
(1,40,0)
(68,19,0)
(6,28,0)
(30,46,0)
(50,46,0)
(51,13,0)
(16,14,0)
(35,7,0)
(45,49,0)
(46,27,0)
(42,36,0)
(47,28,0)
(12,2,0)
(7,28,0)
(61,66,0)
(58,28,0)
(46,37,0)
(13,55,0)
(10,46,0)
(40,28,0)
(36,55,0)
(3,28,0)
(2,12,0)
(4,6,0)
(0,28,0)
(11,2,0)
(38,61,0)
(69,27,0)
(41,35,0)
(13,49,0)
(37,46,0)
(65,55,0)
(2,55,0)
(28,9,0)
(36,35,0)
(43,28,0)
(48,13,0)
(64,31,0)
(25,55,0)
(8,7,0)
(35,36,0)
(62,12,0)
(14,46,0)
(49,57,0)
(46,14,0)
(26,35,0)
(46,55,0)
(18,2,0)
(19,57,0)
(17,40,0)
(67,37,0)
(39,8,0)
(31,7,0)
(56,2,0)
(23,28,0)
(5,63,0)
(15,7,0)
(55,28,0)
(33,28,0)
(31,55,0)
(20,54,1)
(13,51,1)
(60,14,1)
(10,8,1)
(17,1,1)
(15,49,1)
(1,55,1)
(24,7,1)
(50,10,1)
(31,64,1)
(46,55,1)
(14,16,1)
(27,69,1)
(44,29,1)
(67,30,1)
(54,60,1)
(46,37,1)
(46,27,1)
(12,2,1)
(46,6,1)
(2,55,1)
(26,42,1)
(18,27,1)
(21,32,1)
(36,55,1)
(63,5,1)
(45,13,1)
(14,46,1)
(7,31,1)
(30,21,1)
(38,36,1)
(36,35,1)
(39,24,1)
(49,45,1)
(56,18,1)
(35,7,1)
(8,7,1)
(34,6,1)
(25,65,1)
(12,62,1)
(68,12,1)
(40,17,1)
(41,26,1)
(6,4,1)
(55,25,1)
(29,20,1)
(5,14,1)
(52,40,1)
(64,15,1)
(11,56,1)
(4,52,1)
(2,11,1)
(61,38,1)
(48,19,1)
(16,46,1)
(62,2,1)
(10,61,1)
(51,48,1)
(32,50,1)
(42,8,1)
(31,55,1)
(15,12,1)
(19,68,1)
(44,63,1)
(69,34,1)
(13,55,1)
(35,41,1)
(8,39,1)
(37,67,1)
(63,14,2)
(35,8,2)
(46,27,2)
(54,14,2)
(31,55,2)
(29,14,2)
(60,14,2)
(20,14,2)
(46,6,2)
(46,55,2)
(2,55,2)
(41,8,2)
(68,12,2)
(26,8,2)
(46,37,2)
(7,31,2)
(36,8,2)
(45,12,2)
(8,7,2)
(36,35,2)
(49,12,2)
(19,12,2)
(5,14,2)
(38,8,2)
(35,7,2)
(36,55,2)
(14,46,2)
(51,12,2)
(12,2,2)
(42,8,2)
(13,55,2)
(48,12,2)
(13,12,2)
(61,8,2)
-----------------------------------
(0,hUser)
(1,passwordLen)
(2,fgets(password, 100, stdin)
(3,username)
(4,"User")
(5,"Unable to login.")
(6,* username = "User")
(7,passwordLen = strlen(password)
(8,passwordLen > 0)
(9,)
(10,username)
(11,stdin)
(12,fgets(password, 100, stdin)
(13,password[0])
(14,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(15,passwordLen)
(16,0)
(17,0)
(18,password)
(19,printLine("fgets()
(20,hUser)
(21,LOGON32_LOGON_NETWORK)
(22,)
(23,domain)
(24,passwordLen)
(25,"")
(26,passwordLen)
(27,* domain = "Domain")
(28,)
(29,CloseHandle(hUser)
(30,LOGON32_PROVIDER_DEFAULT)
(31,strlen(password)
(32,password)
(33,passwordLen)
(34,domain)
(35,passwordLen-1)
(36,password[passwordLen-1])
(37,&hUser)
(38,\\\'\\\\0\\\')
(39,0)
(40,passwordLen = 0)
(41,1)
(42,password)
(43,password)
(44,RET)
(45,\\\'\\\\0\\\')
(46,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(47,if (fgets(password, 100, stdin)
(48,password)
(49,password[0] = \\\'\\\\0\\\')
(50,domain)
(51,0)
(52,username)
(53,if (passwordLen > 0)
(54,printLine("User logged in successfully.")
(55,password[100] = "")
(56,100)
(57,)
(58,if (LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(59,)
(60,"User logged in successfully.")
(61,password[passwordLen-1] = \\\'\\\\0\\\')
(62,NULL)
(63,printLine("Unable to login.")
(64,password)
(65,password)
(66,)
(67,hUser)
(68,"fgets()
(69,"Domain")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
