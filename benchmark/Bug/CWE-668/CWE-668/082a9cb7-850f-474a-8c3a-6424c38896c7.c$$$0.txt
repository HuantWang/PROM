-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_free_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: free() password without clearing the password buffer */
            free(password);
        }
    }
    else
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = wcslen(password);
            /* FIX: Clear password prior to freeing */
            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
83,84
83,85
84,85
84,86
85,86
85,87
85,88
85,89
86,87
88,89
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
122,123
123,124
124,125
124,126
125,126
125,127
126,127
128,129
128,130
129,130
133,134
133,135
133,136
134,135
134,136
135,136
135,137
135,138
135,139
135,140
135,141
135,142
136,137
138,139
140,141
142,143
144,145
146,147
148,149
149,150
152,153
152,154
153,154
154,155
154,156
155,156
158,159
159,160
159,161
160,161
162,163
164,165
165,166
166,167
166,168
167,168
170,171
171,172
171,173
172,173
174,175
176,177
177,178
177,179
177,180
177,181
177,182
177,183
177,184
177,185
177,186
177,187
177,188
177,189
177,190
177,191
178,179
179,180
179,181
181,182
181,183
181,184
184,185
185,186
185,187
186,187
186,188
188,189
190,191
190,192
191,192
193,194
193,195
195,196
196,197
196,198
199,200
199,201
200,201
200,202
201,202
203,204
205,206
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
218,219
220,221
221,222
221,223
222,223
224,225
226,227
227,228
227,229
229,230
229,231
229,232
232,233
234,235
235,236
235,237
237,238
237,239
237,240
240,241
242,243
243,244
243,245
244,245
244,246
245,246
249,250
249,251
250,251
250,252
251,252
251,253
251,254
251,255
252,253
254,255
257,258
259,260
261,262
261,263
262,263
263,264
263,265
264,265
267,268
268,269
268,270
269,270
269,271
270,271
274,275
275,276
275,277
276,277
278,279
278,280
279,280
281,282
283,284
283,285
284,285
284,286
285,286
288,289
289,290
290,291
290,292
291,292
291,293
292,293
294,295
294,296
295,296
299,300
299,301
299,302
300,301
300,302
301,302
301,303
301,304
301,305
301,306
301,307
301,308
302,303
304,305
306,307
308,309
310,311
312,313
314,315
315,316
318,319
318,320
319,320
320,321
320,322
321,322
324,325
325,326
325,327
326,327
328,329
330,331
331,332
332,333
332,334
333,334
336,337
337,338
337,339
338,339
340,341
340,342
341,342
343,344
345,346
346,347
346,348
346,349
347,348
349,350
351,352
351,353
352,353
354,355
355,356
355,357
358,359
359,360
359,361
360,361
362,363
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,53,57,59,62,64,65,67,70,72,73,75,80,81,82,87,89,90,92,94,99,100,105,106,107,111,114,116,120,121,127,130,131,132,137,139,141,143,145,147,150,151,156,157,161,163,168,169,173,175,180,182,183,187,189,192,194,197,198,202,204,209,211,215,217,219,223,225,228,230,231,233,236,238,239,241,246,247,248,253,255,256,258,260,265,266,271,272,273,277,280,282,286,287,293,296,297,298,303,305,307,309,311,313,316,317,322,323,327,329,334,335,339,342,344,348,350,353,356,357,361,363
-----computeFrom-----
27,28
27,29
34,35
34,36
77,78
77,79
84,85
84,86
102,103
102,104
109,110
109,111
118,119
118,120
124,125
124,126
128,129
128,130
134,135
134,136
193,194
193,195
200,201
200,202
243,244
243,245
250,251
250,252
268,269
268,270
275,276
275,277
284,285
284,286
290,291
290,292
294,295
294,296
300,301
300,302
337,338
337,339
351,352
351,353
-----guardedBy-----
89,105
120,130
150,163
255,271
286,296
316,329
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_free_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_wchar_t_free_12_bad()
CWE244_Heap_Inspection__w32_wchar_t_free_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));            free(password);        }    }}
if(globalReturnsTrueOrFalse())    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));            free(password);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
free(password);
free(password)
free
free
password
password
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
SecureZeroMemory(password, passwordLen * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(wchar_t)
passwordLen
passwordLen
sizeof(wchar_t)
wchar_t
wchar_t

free(password);
free(password)
free
free
password
password
-----joern-----
(46,53,0)
(91,58,0)
(18,42,0)
(129,109,0)
(62,67,0)
(2,150,0)
(97,14,0)
(63,47,0)
(0,47,0)
(24,69,0)
(117,21,0)
(131,14,0)
(62,70,0)
(61,42,0)
(100,148,0)
(84,13,0)
(35,58,0)
(90,102,0)
(92,47,0)
(56,10,0)
(67,62,0)
(21,42,0)
(94,58,0)
(16,47,0)
(13,84,0)
(28,95,0)
(7,47,0)
(99,21,0)
(137,7,0)
(55,62,0)
(44,62,0)
(82,42,0)
(144,35,0)
(102,66,0)
(85,7,0)
(34,13,0)
(138,106,0)
(142,39,0)
(14,21,0)
(127,47,0)
(72,29,0)
(81,150,0)
(109,53,0)
(120,117,0)
(145,1,0)
(128,42,0)
(10,56,0)
(66,102,0)
(118,87,0)
(84,98,0)
(41,25,0)
(139,42,0)
(141,70,0)
(65,3,0)
(19,140,0)
(36,153,0)
(132,118,0)
(113,115,0)
(42,37,0)
(102,119,0)
(93,34,0)
(58,35,0)
(75,74,0)
(6,54,0)
(51,119,0)
(26,140,0)
(125,96,0)
(79,42,0)
(21,117,0)
(101,151,0)
(104,47,0)
(135,85,0)
(31,136,0)
(53,109,0)
(64,84,0)
(15,121,0)
(106,7,0)
(108,7,0)
(89,56,0)
(103,42,0)
(11,77,0)
(4,19,0)
(136,42,0)
(148,65,0)
(151,124,0)
(1,7,0)
(13,34,0)
(83,116,0)
(30,123,0)
(62,119,0)
(76,39,0)
(143,5,0)
(39,47,0)
(112,74,0)
(85,135,0)
(123,111,0)
(32,102,0)
(53,106,0)
(149,66,0)
(152,47,0)
(111,123,0)
(119,42,0)
(20,102,0)
(119,34,0)
(34,119,0)
(106,47,0)
(58,54,0)
(29,25,0)
(43,85,0)
(74,7,0)
(57,127,0)
(136,119,0)
(71,113,0)
(60,62,0)
(47,130,0)
(98,84,0)
(116,42,0)
(40,87,0)
(106,53,0)
(22,47,0)
(34,93,0)
(17,111,0)
(114,108,0)
(48,98,0)
(74,112,0)
(38,47,0)
(113,71,0)
(75,56,0)
(105,71,0)
(54,58,0)
(88,123,0)
(123,7,0)
(12,116,0)
(27,135,0)
(74,75,0)
(86,47,0)
(59,126,0)
(69,119,0)
(65,148,0)
(45,42,0)
(77,47,0)
(7,74,0)
(53,127,0)
(68,59,0)
(73,123,0)
(1,127,0)
(150,135,0)
(127,1,0)
(80,62,0)
(33,42,0)
(121,126,0)
(78,58,0)
(8,108,0)
(133,58,0)
(9,42,0)
(135,47,0)
(77,7,0)
(110,10,0)
(70,62,0)
(147,67,0)
(122,47,0)
(52,62,0)
(49,69,0)
(134,41,0)
(56,75,0)
(50,58,0)
(23,28,0)
(58,7,0)
(117,119,0)
(132,111,1)
(32,128,1)
(58,54,1)
(106,7,1)
(54,6,1)
(26,19,1)
(137,107,1)
(146,136,1)
(81,135,1)
(28,23,1)
(23,70,1)
(11,106,1)
(71,105,1)
(58,7,1)
(74,112,1)
(65,148,1)
(138,127,1)
(88,73,1)
(128,103,1)
(148,100,1)
(70,62,1)
(29,72,1)
(83,65,1)
(89,137,1)
(114,8,1)
(56,10,1)
(147,80,1)
(35,58,1)
(31,41,1)
(77,11,1)
(142,113,1)
(44,125,1)
(117,119,1)
(27,40,1)
(84,98,1)
(4,66,1)
(100,69,1)
(85,43,1)
(57,59,1)
(141,62,1)
(131,97,1)
(111,123,1)
(74,75,1)
(97,21,1)
(110,89,1)
(127,1,1)
(150,135,1)
(129,46,1)
(121,15,1)
(69,119,1)
(85,7,1)
(64,51,1)
(111,17,1)
(1,145,1)
(90,20,1)
(70,141,1)
(102,119,1)
(76,142,1)
(109,129,1)
(135,85,1)
(62,67,1)
(105,108,1)
(67,147,1)
(7,74,1)
(17,123,1)
(136,119,1)
(20,32,1)
(94,91,1)
(150,2,1)
(108,114,1)
(106,53,1)
(142,108,1)
(34,13,1)
(116,12,1)
(83,69,1)
(44,14,1)
(99,66,1)
(27,111,1)
(72,70,1)
(66,149,1)
(99,26,1)
(8,7,1)
(77,7,1)
(39,76,1)
(35,144,1)
(14,21,1)
(14,131,1)
(16,104,1)
(68,121,1)
(80,60,1)
(125,14,1)
(92,39,1)
(1,7,1)
(21,117,1)
(66,102,1)
(52,44,1)
(62,119,1)
(12,83,1)
(51,107,1)
(40,118,1)
(151,101,1)
(53,127,1)
(123,7,1)
(55,52,1)
(60,55,1)
(59,68,1)
(103,61,1)
(134,29,1)
(61,116,1)
(102,90,1)
(91,143,1)
(13,84,1)
(49,24,1)
(136,31,1)
(57,151,1)
(145,57,1)
(78,133,1)
(6,78,1)
(2,81,1)
(24,119,1)
(113,71,1)
(91,150,1)
(143,150,1)
(98,48,1)
(46,138,1)
(117,120,1)
(41,134,1)
(144,58,1)
(149,102,1)
(101,35,1)
(69,49,1)
(120,99,1)
(73,16,1)
(30,88,1)
(123,30,1)
(50,94,1)
(108,7,1)
(48,64,1)
(133,50,1)
(43,27,1)
(53,109,1)
(118,132,1)
(34,93,1)
(104,92,1)
(75,56,1)
(15,35,1)
(10,110,1)
(19,4,1)
(146,77,1)
(119,34,1)
(31,28,1)
(92,107,2)
(141,107,2)
(32,107,2)
(109,107,2)
(149,107,2)
(11,107,2)
(138,107,2)
(110,107,2)
(65,148,2)
(13,107,2)
(35,58,2)
(85,107,2)
(136,107,2)
(78,107,2)
(24,107,2)
(69,107,2)
(85,7,2)
(106,7,2)
(98,107,2)
(91,107,2)
(43,107,2)
(62,67,2)
(50,107,2)
(125,14,2)
(84,98,2)
(19,66,2)
(135,85,2)
(46,107,2)
(134,70,2)
(129,107,2)
(121,35,2)
(150,107,2)
(120,107,2)
(102,119,2)
(66,102,2)
(147,107,2)
(35,107,2)
(83,107,2)
(40,111,2)
(17,107,2)
(117,119,2)
(60,107,2)
(34,93,2)
(30,107,2)
(113,71,2)
(84,107,2)
(54,107,2)
(105,108,2)
(69,119,2)
(62,107,2)
(66,107,2)
(150,135,2)
(7,74,2)
(145,107,2)
(97,107,2)
(53,109,2)
(133,107,2)
(137,107,2)
(48,107,2)
(4,66,2)
(49,107,2)
(55,107,2)
(74,75,2)
(1,7,2)
(144,107,2)
(106,53,2)
(67,107,2)
(143,150,2)
(15,35,2)
(123,107,2)
(44,107,2)
(20,107,2)
(58,54,2)
(104,107,2)
(108,107,2)
(52,107,2)
(132,111,2)
(58,7,2)
(106,107,2)
(39,107,2)
(41,70,2)
(8,107,2)
(56,10,2)
(151,35,2)
(118,111,2)
(111,123,2)
(12,107,2)
(119,34,2)
(27,107,2)
(34,13,2)
(73,107,2)
(53,127,2)
(81,107,2)
(62,119,2)
(26,66,2)
(65,69,2)
(111,107,2)
(99,107,2)
(58,107,2)
(1,107,2)
(119,107,2)
(117,107,2)
(29,70,2)
(57,107,2)
(75,56,2)
(7,107,2)
(21,107,2)
(64,107,2)
(28,70,2)
(135,107,2)
(61,107,2)
(21,117,2)
(14,107,2)
(2,107,2)
(113,108,2)
(128,107,2)
(89,107,2)
(76,107,2)
(102,107,2)
(94,107,2)
(51,107,2)
(23,70,2)
(74,112,2)
(14,21,2)
(10,107,2)
(103,107,2)
(101,35,2)
(114,107,2)
(100,69,2)
(77,107,2)
(34,107,2)
(72,70,2)
(123,7,2)
(77,7,2)
(131,107,2)
(90,107,2)
(53,107,2)
(142,107,2)
(6,107,2)
(56,107,2)
(16,107,2)
(71,108,2)
(68,35,2)
(127,107,2)
(70,107,2)
(148,69,2)
(127,1,2)
(80,107,2)
(74,107,2)
(136,119,2)
(70,62,2)
(108,7,2)
(13,84,2)
(31,107,2)
(75,107,2)
(59,35,2)
(116,107,2)
(88,107,2)
-----------------------------------
(0,hUser)
(1,wcslen(password)
(2,0)
(3,)
(4,"fgetws()
(5,)
(6,hUser)
(7,* password = (wchar_t *)
(8,password)
(9,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(10,sizeof(wchar_t)
(11,password)
(12,0)
(13,malloc(100*sizeof(wchar_t)
(14,passwordLen > 0)
(15,"User logged in successfully.")
(16,\\\'\\\\0\\\')
(17,NULL)
(18,if (fgetws(password, 100, stdin)
(19,printLine("fgetws()
(20,100)
(21,passwordLen = wcslen(password)
(22,if (passwordLen > 0)
(23,"Unable to login.")
(24,password)
(25,)
(26,\\\'\\\\0\\\')
(27,passwordLen)
(28,printLine("Unable to login.")
(29,printLine("User logged in successfully.")
(30,stdin)
(31,password)
(32,password)
(33,hUser)
(34,(wchar_t *)
(35,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(36,if(globalReturnsTrueOrFalse()
(37,)
(38,if (password == NULL)
(39,passwordLen = 0)
(40,\\\'\\\\0\\\')
(41,CloseHandle(hUser)
(42,)
(43,password)
(44,username)
(45,if (password == NULL)
(46,passwordLen)
(47,)
(48,wchar_t)
(49,NULL)
(50,password)
(51,password)
(52,domain)
(53,passwordLen * sizeof(wchar_t)
(54,&hUser)
(55,password)
(56,100*sizeof(wchar_t)
(57,passwordLen)
(58,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(59,CloseHandle(hUser)
(60,LOGON32_LOGON_NETWORK)
(61,"User")
(62,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(63,passwordLen)
(64,100)
(65,exit(-1)
(66,fgetws(password, 100, stdin)
(67,&hUser)
(68,hUser)
(69,password == NULL)
(70,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(71,-1)
(72,"User logged in successfully.")
(73,password)
(74,(wchar_t *)
(75,malloc(100*sizeof(wchar_t)
(76,0)
(77,free(password)
(78,LOGON32_PROVIDER_DEFAULT)
(79,if (passwordLen > 0)
(80,LOGON32_PROVIDER_DEFAULT)
(81,passwordLen)
(82,passwordLen)
(83,passwordLen)
(84,100*sizeof(wchar_t)
(85,wcslen(password)
(86,if (fgetws(password, 100, stdin)
(87,)
(88,100)
(89,100)
(90,stdin)
(91,username)
(92,"User")
(93,wchar_t *)
(94,domain)
(95,)
(96,)
(97,passwordLen)
(98,sizeof(wchar_t)
(99,passwordLen)
(100,1)
(101,"Unable to login.")
(102,fgetws(password, 100, stdin)
(103,"Domain")
(104,"Domain")
(105,1)
(106,SecureZeroMemory(password, passwordLen * sizeof(wchar_t)
(107,globalReturnsTrueOrFalse()
(108,password == NULL)
(109,sizeof(wchar_t)
(110,wchar_t)
(111,fgetws(password, 100, stdin)
(112,wchar_t *)
(113,exit(-1)
(114,NULL)
(115,)
(116,passwordLen = 0)
(117,wcslen(password)
(118,printLine("fgetws()
(119,* password = (wchar_t *)
(120,password)
(121,printLine("User logged in successfully.")
(122,password)
(123,fgetws(password, 100, stdin)
(124,)
(125,\\\'\\\\0\\\')
(126,)
(127,passwordLen = wcslen(password)
(128,\\\'\\\\0\\\')
(129,wchar_t)
(130,)
(131,0)
(132,"fgetws()
(133,LOGON32_LOGON_NETWORK)
(134,hUser)
(135,passwordLen = wcslen(password)
(136,free(password)
(137,password)
(138,password)
(139,password)
(140,)
(141,0)
(142,passwordLen)
(143,\\\'\\\\0\\\')
(144,0)
(145,password)
(146,RET)
(147,hUser)
(148,-1)
(149,NULL)
(150,passwordLen > 0)
(151,printLine("Unable to login.")
(152,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(153,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
