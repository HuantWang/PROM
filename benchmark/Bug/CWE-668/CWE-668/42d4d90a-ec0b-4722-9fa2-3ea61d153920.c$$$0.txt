-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_char_realloc_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char * password = (char *)malloc(100*sizeof(char));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: reallocate password without clearing the password buffer
             * which could leave a copy of the password in memory */
            password = realloc(password, 200 * sizeof(char));
            if (password == NULL) {exit(-1);}
            /* Zeroize the password */
            SecureZeroMemory(password, 200 * sizeof(char));
            /* Use the password buffer again */
            strcpy(password, "Nothing to see here");
            printLine(password);
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
25,38
25,39
25,40
25,41
25,42
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
82,83
83,84
83,85
85,86
85,87
85,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
97,99
98,99
98,100
99,100
99,101
99,102
99,103
100,101
102,103
105,106
107,108
109,110
109,111
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
117,119
118,119
122,123
123,124
123,125
124,125
126,127
126,128
127,128
129,130
131,132
131,133
132,133
132,134
133,134
136,137
137,138
138,139
138,140
139,140
139,141
140,141
142,143
142,144
143,144
147,148
147,149
147,150
148,149
148,150
149,150
149,151
149,152
149,153
149,154
149,155
149,156
150,151
152,153
154,155
156,157
158,159
160,161
162,163
163,164
166,167
166,168
167,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
178,179
179,180
180,181
180,182
181,182
184,185
185,186
185,187
186,187
188,189
188,190
188,191
189,190
191,192
193,194
193,195
195,196
196,197
196,198
199,200
199,201
200,201
200,202
201,202
203,204
205,206
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
213,216
214,215
216,217
218,219
218,220
220,221
221,222
221,223
224,225
225,226
225,227
225,228
226,227
228,229
231,232
232,233
232,234
233,234
235,236
237,238
238,239
238,240
239,240
241,242
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,63,65,67,71,73,76,78,79,81,84,86,87,89,94,95,96,101,103,104,106,108,113,114,119,120,121,125,128,130,134,135,141,144,145,146,151,153,155,157,159,161,164,165,170,171,175,177,182,183,187,190,192,194,197,198,202,204,209,211,215,217,219,222,223,227,229,230,234,236,240,242
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
91,92
91,93
98,99
98,100
116,117
116,118
123,124
123,125
132,133
132,134
138,139
138,140
142,143
142,144
148,149
148,150
185,186
185,187
193,194
193,195
200,201
200,202
218,219
218,220
-----guardedBy-----
103,119
134,144
164,177
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_char_realloc_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(char));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(char));            /* Use the password buffer again */            strcpy(password, "Nothing to see here");            printLine(password);            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_char_realloc_17_bad()
CWE244_Heap_Inspection__w32_char_realloc_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(char));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(char));            /* Use the password buffer again */            strcpy(password, "Nothing to see here");            printLine(password);            free(password);        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(char));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(char));            /* Use the password buffer again */            strcpy(password, "Nothing to see here");            printLine(password);            free(password);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(char));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(char));            /* Use the password buffer again */            strcpy(password, "Nothing to see here");            printLine(password);            free(password);        }    }
{            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(char));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(char));            /* Use the password buffer again */            strcpy(password, "Nothing to see here");            printLine(password);            free(password);        }
char * password = (char *)malloc(100*sizeof(char));
char * password = (char *)malloc(100*sizeof(char));
char
* password = (char *)malloc(100*sizeof(char))
*
password
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
password = realloc(password, 200 * sizeof(char));
password = realloc(password, 200 * sizeof(char))
password
password
realloc(password, 200 * sizeof(char))
realloc
realloc
password
password
200 * sizeof(char)
200
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
SecureZeroMemory(password, 200 * sizeof(char));
SecureZeroMemory(password, 200 * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
200 * sizeof(char)
200
sizeof(char)
char
char

strcpy(password, "Nothing to see here");
strcpy(password, "Nothing to see here")
strcpy
strcpy
password
password
"Nothing to see here"
printLine(password);
printLine(password)
printLine
printLine
password
password
free(password);
free(password)
free
free
password
password
-----joern-----
(43,31,0)
(49,20,0)
(50,107,0)
(89,53,0)
(33,92,0)
(20,16,0)
(65,107,0)
(98,65,0)
(67,121,0)
(81,16,0)
(38,55,0)
(111,103,0)
(59,42,0)
(80,103,0)
(127,109,0)
(50,47,0)
(39,11,0)
(60,50,0)
(46,103,0)
(41,104,0)
(31,26,0)
(100,96,0)
(128,91,0)
(37,55,0)
(18,103,0)
(72,50,0)
(1,61,0)
(57,61,0)
(93,88,0)
(15,42,0)
(16,107,0)
(88,93,0)
(125,11,0)
(78,11,0)
(29,54,0)
(27,26,0)
(53,11,0)
(119,47,0)
(62,11,0)
(86,117,0)
(91,103,0)
(19,121,0)
(99,107,0)
(58,104,0)
(44,11,0)
(61,62,0)
(95,52,0)
(32,92,0)
(47,124,0)
(14,107,0)
(82,92,0)
(14,88,0)
(92,65,0)
(65,58,0)
(20,11,0)
(82,11,0)
(10,17,0)
(42,15,0)
(13,31,0)
(118,37,0)
(34,106,0)
(87,39,0)
(4,99,0)
(70,10,0)
(52,124,0)
(76,11,0)
(12,9,0)
(15,3,0)
(122,93,0)
(97,20,0)
(7,127,0)
(7,117,0)
(117,7,0)
(36,11,0)
(75,11,0)
(28,93,0)
(79,36,0)
(35,36,0)
(9,12,0)
(83,58,0)
(56,33,0)
(103,39,0)
(8,11,0)
(76,10,0)
(92,11,0)
(14,116,0)
(26,31,0)
(54,110,0)
(5,112,0)
(11,105,0)
(104,58,0)
(17,10,0)
(63,117,0)
(76,92,0)
(94,111,0)
(77,55,0)
(74,17,0)
(16,20,0)
(73,11,0)
(65,92,0)
(103,107,0)
(30,62,0)
(10,76,0)
(114,11,0)
(103,91,0)
(106,110,0)
(108,127,0)
(78,92,0)
(9,64,0)
(90,53,0)
(107,14,0)
(115,97,0)
(2,12,0)
(88,14,0)
(48,107,0)
(84,7,0)
(66,39,0)
(101,96,0)
(33,11,0)
(93,122,0)
(120,0,0)
(51,31,0)
(24,11,0)
(40,78,0)
(6,103,0)
(103,36,0)
(107,11,0)
(126,11,0)
(68,11,0)
(121,55,0)
(31,107,0)
(0,22,0)
(123,103,0)
(7,107,0)
(102,122,0)
(113,78,0)
(61,107,0)
(23,99,0)
(116,14,0)
(85,82,0)
(69,97,0)
(103,111,0)
(25,76,0)
(117,20,0)
(45,11,0)
(58,65,0)
(21,112,0)
(96,92,0)
(19,37,1)
(55,77,1)
(96,92,1)
(74,70,1)
(120,111,1)
(37,118,1)
(100,101,1)
(20,16,1)
(17,74,1)
(123,80,1)
(62,30,1)
(117,63,1)
(27,31,1)
(119,50,1)
(23,107,1)
(90,9,1)
(88,93,1)
(57,1,1)
(42,59,1)
(43,62,1)
(40,76,1)
(10,17,1)
(82,85,1)
(49,26,1)
(83,98,1)
(61,107,1)
(90,99,1)
(65,107,1)
(16,81,1)
(97,20,1)
(70,25,1)
(7,117,1)
(19,55,1)
(94,103,1)
(76,92,1)
(16,107,1)
(93,122,1)
(14,116,1)
(39,87,1)
(103,107,1)
(111,103,1)
(95,26,1)
(96,100,1)
(78,92,1)
(34,54,1)
(71,121,1)
(107,14,1)
(50,72,1)
(103,39,1)
(128,123,1)
(50,107,1)
(58,104,1)
(33,92,1)
(118,82,1)
(127,108,1)
(25,96,1)
(97,115,1)
(47,119,1)
(13,51,1)
(103,36,1)
(85,33,1)
(121,55,1)
(87,66,1)
(48,121,1)
(30,61,1)
(7,107,1)
(113,40,1)
(78,113,1)
(65,58,1)
(53,89,1)
(6,97,1)
(76,10,1)
(31,107,1)
(103,91,1)
(0,120,1)
(46,18,1)
(15,42,1)
(111,94,1)
(14,88,1)
(35,53,1)
(12,2,1)
(2,99,1)
(101,92,1)
(72,60,1)
(86,84,1)
(49,47,1)
(52,95,1)
(59,96,1)
(32,106,1)
(41,83,1)
(33,56,1)
(91,128,1)
(122,102,1)
(99,107,1)
(18,6,1)
(117,20,1)
(26,27,1)
(77,38,1)
(106,34,1)
(36,79,1)
(104,41,1)
(61,57,1)
(98,32,1)
(67,19,1)
(4,23,1)
(79,35,1)
(9,12,1)
(108,7,1)
(80,46,1)
(37,55,1)
(6,127,1)
(121,67,1)
(31,13,1)
(82,92,1)
(99,4,1)
(28,48,1)
(102,28,1)
(1,39,1)
(25,15,1)
(92,65,1)
(115,69,1)
(29,111,1)
(84,97,1)
(89,90,1)
(60,52,1)
(54,29,1)
(69,20,1)
(56,78,1)
(81,49,1)
(63,86,1)
(32,0,1)
(51,43,1)
(66,36,1)
(26,31,1)
(56,121,2)
(50,107,2)
(118,121,2)
(30,121,2)
(113,121,2)
(117,97,2)
(15,96,2)
(76,10,2)
(16,107,2)
(33,92,2)
(103,121,2)
(51,121,2)
(36,121,2)
(34,111,2)
(58,121,2)
(59,96,2)
(103,39,2)
(103,91,2)
(107,121,2)
(86,97,2)
(46,121,2)
(9,99,2)
(103,36,2)
(81,121,2)
(7,97,2)
(121,121,2)
(33,121,2)
(127,97,2)
(61,121,2)
(101,121,2)
(0,111,2)
(93,121,2)
(111,103,2)
(17,121,2)
(97,20,2)
(94,121,2)
(82,92,2)
(63,97,2)
(70,121,2)
(26,31,2)
(13,121,2)
(49,121,2)
(12,99,2)
(15,42,2)
(7,107,2)
(37,121,2)
(2,99,2)
(95,26,2)
(79,121,2)
(88,93,2)
(31,107,2)
(108,97,2)
(97,121,2)
(106,111,2)
(96,121,2)
(48,121,2)
(10,121,2)
(7,117,2)
(39,121,2)
(80,121,2)
(61,107,2)
(104,121,2)
(99,107,2)
(107,14,2)
(26,121,2)
(4,121,2)
(120,111,2)
(96,92,2)
(88,121,2)
(23,121,2)
(67,121,2)
(10,17,2)
(89,121,2)
(87,121,2)
(32,121,2)
(60,26,2)
(102,121,2)
(19,121,2)
(111,121,2)
(37,55,2)
(29,111,2)
(50,26,2)
(25,121,2)
(115,121,2)
(62,121,2)
(43,121,2)
(78,121,2)
(28,121,2)
(122,121,2)
(74,121,2)
(121,55,2)
(119,26,2)
(78,92,2)
(6,121,2)
(57,121,2)
(92,65,2)
(27,121,2)
(31,121,2)
(91,121,2)
(53,121,2)
(103,107,2)
(123,121,2)
(47,26,2)
(35,121,2)
(58,104,2)
(20,16,2)
(76,121,2)
(65,58,2)
(9,12,2)
(117,20,2)
(92,121,2)
(100,121,2)
(128,121,2)
(18,121,2)
(16,121,2)
(84,97,2)
(76,92,2)
(52,26,2)
(65,121,2)
(85,121,2)
(66,121,2)
(90,121,2)
(98,121,2)
(93,122,2)
(42,96,2)
(41,121,2)
(20,121,2)
(14,121,2)
(72,26,2)
(65,107,2)
(54,111,2)
(82,121,2)
(83,121,2)
(14,116,2)
(99,121,2)
(14,88,2)
(69,121,2)
(40,121,2)
(1,121,2)
-----------------------------------
(0,printLine("Unable to login.")
(1,password)
(2,1)
(3,)
(4,NULL)
(5,for(j = 0; j < 1; j++)
(6,username)
(7,password[passwordLen-1])
(8,password)
(9,exit(-1)
(10,200 * sizeof(char)
(11,)
(12,-1)
(13,stdin)
(14,(char *)
(15,exit(-1)
(16,strlen(password)
(17,sizeof(char)
(18,domain)
(19,j)
(20,passwordLen = strlen(password)
(21,j)
(22,)
(23,password)
(24,username)
(25,password)
(26,fgets(password, 100, stdin)
(27,NULL)
(28,100)
(29,"User logged in successfully.")
(30,\\\'\\\\0\\\')
(31,fgets(password, 100, stdin)
(32,password)
(33,printLine(password)
(34,hUser)
(35,username)
(36,* username = "User")
(37,j++)
(38,j)
(39,* domain = "Domain")
(40,password)
(41,char)
(42,-1)
(43,password)
(44,passwordLen)
(45,if (password == NULL)
(46,password)
(47,password[0] = \\\'\\\\0\\\')
(48,password)
(49,passwordLen)
(50,password[0])
(51,100)
(52,printLine("fgets()
(53,passwordLen = 0)
(54,printLine("User logged in successfully.")
(55,j = 0)
(56,password)
(57,0)
(58,200 * sizeof(char)
(59,1)
(60,password)
(61,password[0])
(62,password[0] = \\\'\\\\0\\\')
(63,1)
(64,)
(65,realloc(password, 200 * sizeof(char)
(66,domain)
(67,1)
(68,hUser)
(69,passwordLen)
(70,200)
(71,RET)
(72,0)
(73,if (passwordLen > 0)
(74,char)
(75,domain)
(76,SecureZeroMemory(password, 200 * sizeof(char)
(77,0)
(78,strcpy(password, "Nothing to see here")
(79,"User")
(80,LOGON32_LOGON_NETWORK)
(81,password)
(82,free(password)
(83,200)
(84,password)
(85,password)
(86,passwordLen)
(87,"Domain")
(88,malloc(100*sizeof(char)
(89,0)
(90,passwordLen)
(91,&hUser)
(92,password = realloc(password, 200 * sizeof(char)
(93,100*sizeof(char)
(94,0)
(95,"fgets()
(96,password == NULL)
(97,passwordLen > 0)
(98,password)
(99,password == NULL)
(100,NULL)
(101,password)
(102,char)
(103,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(104,sizeof(char)
(105,)
(106,CloseHandle(hUser)
(107,* password = (char *)
(108,\\\'\\\\0\\\')
(109,)
(110,)
(111,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(112,)
(113,"Nothing to see here")
(114,if (fgets(password, 100, stdin)
(115,0)
(116,char *)
(117,passwordLen-1)
(118,j)
(119,\\\'\\\\0\\\')
(120,"Unable to login.")
(121,j < 1)
(122,sizeof(char)
(123,LOGON32_PROVIDER_DEFAULT)
(124,)
(125,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(126,if (password == NULL)
(127,password[passwordLen-1] = \\\'\\\\0\\\')
(128,hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
