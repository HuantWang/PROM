-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_04_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    if(STATIC_CONST_TRUE)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (250-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */
    PUTENV(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,122,124
-----computeFrom-----
22,23
22,24
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_file_04_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
void
CWE427_Uncontrolled_Search_Path_Element__char_file_04_bad()
CWE427_Uncontrolled_Search_Path_Element__char_file_04_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */    PUTENV(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (250-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(250-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(250-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
PUTENV(data);
PUTENV(data)
PUTENV
PUTENV
data
data
-----joern-----
(23,32,0)
(28,21,0)
(16,50,0)
(32,47,0)
(46,21,0)
(61,4,0)
(38,21,0)
(39,47,0)
(21,26,0)
(44,37,0)
(58,3,0)
(34,21,0)
(26,31,0)
(1,40,0)
(34,52,0)
(14,31,0)
(35,22,0)
(11,31,0)
(32,23,0)
(32,6,0)
(43,4,0)
(23,50,0)
(60,50,0)
(30,43,0)
(20,37,0)
(55,34,0)
(34,50,0)
(29,25,0)
(49,26,0)
(21,31,0)
(2,43,0)
(41,40,0)
(60,21,0)
(25,47,0)
(48,44,0)
(4,33,0)
(10,21,0)
(27,60,0)
(22,4,0)
(50,58,0)
(40,50,0)
(52,54,0)
(8,56,0)
(47,4,0)
(56,54,0)
(5,33,0)
(0,23,0)
(38,31,0)
(19,52,0)
(18,46,0)
(17,23,0)
(47,32,0)
(60,47,0)
(51,38,0)
(6,32,0)
(44,4,0)
(40,1,0)
(50,46,0)
(59,58,0)
(9,58,0)
(53,26,0)
(47,60,0)
(15,60,0)
(47,25,0)
(46,50,0)
(13,22,0)
(24,31,0)
(7,34,0)
(4,22,0)
(36,58,0)
(12,1,0)
(45,40,0)
(13,61,1)
(29,47,1)
(19,34,1)
(42,21,1)
(40,41,1)
(51,43,1)
(60,21,1)
(22,35,1)
(23,50,1)
(16,42,1)
(43,4,1)
(35,13,1)
(47,32,1)
(23,17,1)
(30,2,1)
(26,49,1)
(47,39,1)
(28,26,1)
(0,60,1)
(4,22,1)
(7,56,1)
(46,21,1)
(50,46,1)
(51,1,1)
(15,27,1)
(21,10,1)
(21,26,1)
(43,30,1)
(45,50,1)
(56,8,1)
(57,38,1)
(61,1,1)
(39,32,1)
(34,50,1)
(8,25,1)
(40,50,1)
(51,44,1)
(44,4,1)
(51,42,1)
(1,40,1)
(47,4,1)
(48,25,1)
(55,7,1)
(60,15,1)
(10,28,1)
(47,60,1)
(46,18,1)
(1,12,1)
(38,21,1)
(49,53,1)
(60,50,1)
(25,29,1)
(25,47,1)
(44,48,1)
(32,6,1)
(34,55,1)
(32,23,1)
(17,0,1)
(38,51,1)
(12,40,1)
(34,21,1)
(18,16,1)
(41,45,1)
(2,4,1)
(48,52,1)
(52,19,1)
(27,43,1)
(48,43,2)
(32,6,2)
(12,42,2)
(4,1,2)
(44,4,2)
(60,21,2)
(45,42,2)
(56,25,2)
(50,42,2)
(0,43,2)
(32,43,2)
(41,42,2)
(60,50,2)
(2,1,2)
(18,42,2)
(15,43,2)
(47,4,2)
(52,25,2)
(21,26,2)
(38,21,2)
(47,32,2)
(32,23,2)
(43,1,2)
(4,22,2)
(7,25,2)
(23,50,2)
(40,42,2)
(1,42,2)
(47,60,2)
(16,42,2)
(43,4,2)
(25,43,2)
(60,43,2)
(34,50,2)
(17,43,2)
(25,47,2)
(29,43,2)
(55,25,2)
(30,1,2)
(19,25,2)
(47,43,2)
(44,43,2)
(46,21,2)
(22,1,2)
(27,43,2)
(13,1,2)
(39,43,2)
(61,1,2)
(50,46,2)
(23,43,2)
(8,25,2)
(34,25,2)
(34,21,2)
(35,1,2)
(40,50,2)
(1,40,2)
(46,42,2)
-----------------------------------
(0,250)
(1,250-dataLen > 1)
(2,pFile)
(3,)
(4,pFile = fopen(FILENAME, "r")
(5,if (pFile != NULL)
(6,int)
(7,data)
(8,"fgets()
(9,pFile)
(10,dataBuffer)
(11,if(STATIC_CONST_TRUE)
(12,1)
(13,FILENAME)
(14,dataBuffer)
(15,dataLen)
(16,dataLen)
(17,dataLen)
(18,data)
(19,\\\'\\\\0\\\')
(20,if (fgets(data+dataLen, (int)
(21,data = dataBuffer)
(22,fopen(FILENAME, "r")
(23,250-dataLen)
(24,data)
(25,fgets(data+dataLen, (int)
(26,dataBuffer[250] = "PATH=")
(27,data)
(28,data)
(29,NULL)
(30,NULL)
(31,)
(32,(int)
(33,)
(34,data[dataLen])
(35,"r")
(36,dataLen)
(37,)
(38,PUTENV(data)
(39,pFile)
(40,250-dataLen)
(41,dataLen)
(42,STATIC_CONST_TRUE)
(43,pFile != NULL)
(44,fclose(pFile)
(45,250)
(46,strlen(data)
(47,fgets(data+dataLen, (int)
(48,pFile)
(49,"PATH=")
(50,dataLen = strlen(data)
(51,data)
(52,data[dataLen] = \\\'\\\\0\\\')
(53,dataBuffer)
(54,)
(55,dataLen)
(56,printLine("fgets()
(57,RET)
(58,)
(59,if (250-dataLen > 1)
(60,data+dataLen)
(61,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
