-----label-----
1
-----code-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_45_bad()
{
    char * data;
    char dataBuffer[250] = "PATH=";
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (250-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
44,45
47,48
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
65,66
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,31,33,37,39,43,45,46,52,55,57,60,61,64,66,68,70,75,78,80,85,86,90,93,94,95,101,104,105,106,111,112,117,119,120,124,126,130
-----computeFrom-----
22,23
22,24
41,42
41,43
42,43
42,44
49,50
49,51
53,54
53,55
63,64
63,65
73,74
73,75
82,83
82,84
83,84
83,85
87,88
87,89
91,92
91,93
98,99
98,100
102,103
102,104
114,115
114,116
122,123
122,124
-----guardedBy-----
45,119
55,101
66,104
90,101
93,104
-----guardedByNegation-----
55,117
66,119
-----lastLexicalUse-----
55,117
66,119
-----jump-----
55,117
66,119
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE427_Uncontrolled_Search_Path_Element__char_console_45_bad(){    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data;    badSink();}
void
CWE427_Uncontrolled_Search_Path_Element__char_console_45_bad()
CWE427_Uncontrolled_Search_Path_Element__char_console_45_bad
{    char * data;    char dataBuffer[250] = "PATH=";    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[250] = "PATH=";
char dataBuffer[250] = "PATH=";
char
dataBuffer[250] = "PATH="
dataBuffer
[250]
250
= "PATH="
"PATH="
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (250-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
250-dataLen > 1
250-dataLen
250
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(250-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(250-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(250-dataLen)
int
int

(250-dataLen)
250-dataLen
250
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data;
CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data
CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData
CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(64,49,0)
(68,64,0)
(55,58,0)
(41,69,0)
(33,12,0)
(57,68,0)
(41,9,0)
(6,49,0)
(21,48,0)
(10,58,0)
(45,50,0)
(40,70,0)
(30,43,0)
(70,60,0)
(54,64,0)
(28,64,0)
(60,11,0)
(58,61,0)
(64,31,0)
(5,19,0)
(71,11,0)
(63,11,0)
(27,34,0)
(10,64,0)
(12,49,0)
(60,70,0)
(8,21,0)
(41,20,0)
(46,30,0)
(53,62,0)
(16,50,0)
(18,69,0)
(13,48,0)
(44,64,0)
(19,29,0)
(45,30,0)
(52,23,0)
(34,64,0)
(54,33,0)
(29,35,0)
(22,21,0)
(4,50,0)
(14,47,0)
(56,31,0)
(15,12,0)
(50,58,0)
(34,62,0)
(62,34,0)
(17,61,0)
(34,70,0)
(69,64,0)
(65,62,0)
(25,19,0)
(39,68,0)
(45,64,0)
(51,45,0)
(0,10,0)
(48,21,0)
(31,49,0)
(20,2,0)
(7,54,0)
(38,2,0)
(33,54,0)
(32,29,0)
(47,35,0)
(37,2,0)
(69,33,0)
(19,33,0)
(20,42,0)
(20,41,0)
(2,20,0)
(2,33,0)
(36,41,0)
(42,20,0)
(11,60,0)
(72,31,0)
(1,49,0)
(70,34,0)
(62,58,0)
(3,12,0)
(59,9,0)
(26,49,0)
(21,33,0)
(67,69,0)
(58,10,0)
(68,49,0)
(24,33,0)
(19,64,0)
(50,45,0)
(9,41,0)
(69,41,0)
(11,58,0)
(2,33,1)
(58,10,1)
(18,67,1)
(45,50,1)
(28,31,1)
(21,33,1)
(64,31,1)
(56,72,1)
(9,59,1)
(63,71,1)
(38,37,1)
(69,64,1)
(14,9,1)
(67,48,1)
(32,19,1)
(24,64,1)
(57,29,1)
(53,65,1)
(41,36,1)
(51,60,1)
(21,22,1)
(27,11,1)
(57,30,1)
(57,48,1)
(54,64,1)
(59,41,1)
(8,33,1)
(22,8,1)
(68,39,1)
(29,32,1)
(47,14,1)
(11,58,1)
(71,58,1)
(68,64,1)
(19,33,1)
(48,21,1)
(20,2,1)
(37,69,1)
(11,63,1)
(36,20,1)
(0,55,1)
(44,28,1)
(16,51,1)
(50,4,1)
(70,34,1)
(34,64,1)
(7,24,1)
(62,53,1)
(25,47,1)
(20,42,1)
(5,25,1)
(41,69,1)
(31,56,1)
(50,58,1)
(10,64,1)
(62,58,1)
(2,38,1)
(4,16,1)
(66,1,1)
(55,9,1)
(48,13,1)
(10,0,1)
(64,44,1)
(40,34,1)
(69,18,1)
(45,64,1)
(46,45,1)
(54,7,1)
(9,41,1)
(41,20,1)
(70,40,1)
(1,68,1)
(39,57,1)
(13,21,1)
(33,54,1)
(19,64,1)
(69,33,1)
(34,62,1)
(60,70,1)
(57,60,1)
(19,5,1)
(65,27,1)
(60,11,1)
(30,46,1)
(64,31,2)
(25,9,2)
(71,9,2)
(37,48,2)
(48,21,2)
(36,48,2)
(65,11,2)
(67,48,2)
(34,11,2)
(32,9,2)
(19,64,2)
(38,48,2)
(5,9,2)
(62,11,2)
(40,11,2)
(10,9,2)
(63,9,2)
(20,48,2)
(10,64,2)
(27,11,2)
(69,33,2)
(20,2,2)
(19,33,2)
(9,48,2)
(47,9,2)
(21,33,2)
(30,60,2)
(68,64,2)
(60,9,2)
(54,64,2)
(50,60,2)
(53,11,2)
(58,9,2)
(19,9,2)
(2,48,2)
(62,58,2)
(34,62,2)
(11,9,2)
(34,64,2)
(45,50,2)
(4,60,2)
(55,9,2)
(50,58,2)
(70,34,2)
(69,64,2)
(14,9,2)
(45,64,2)
(18,48,2)
(60,70,2)
(46,60,2)
(16,60,2)
(41,69,2)
(20,42,2)
(0,9,2)
(9,41,2)
(70,11,2)
(58,10,2)
(11,58,2)
(33,54,2)
(2,33,2)
(45,60,2)
(69,48,2)
(41,20,2)
(51,60,2)
(29,9,2)
(59,48,2)
(60,11,2)
(41,48,2)
-----------------------------------
(0,data)
(1,badSink()
(2,250-dataLen)
(3,dataLen)
(4,1)
(5,dataLen)
(6,dataBuffer)
(7,data)
(8,250)
(9,fgets(data+dataLen, (int)
(10,strlen(data)
(11,dataLen > 0)
(12,)
(13,1)
(14,"fgets()
(15,if (250-dataLen > 1)
(16,dataLen)
(17,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,dataLen)
(19,data[dataLen])
(20,(int)
(21,250-dataLen)
(22,dataLen)
(23,)
(24,dataLen)
(25,data)
(26,data)
(27,data)
(28,data)
(29,data[dataLen] = \\\'\\\\0\\\')
(30,data[dataLen-1] = \\\'\\\\0\\\')
(31,dataBuffer[250] = "PATH=")
(32,\\\'\\\\0\\\')
(33,dataLen = strlen(data)
(34,data[dataLen-1])
(35,)
(36,stdin)
(37,250)
(38,dataLen)
(39,data)
(40,\\\'\\\\n\\\')
(41,fgets(data+dataLen, (int)
(42,int)
(43,)
(44,dataBuffer)
(45,data[dataLen-1])
(46,\\\'\\\\0\\\')
(47,printLine("fgets()
(48,250-dataLen > 1)
(49,)
(50,dataLen-1)
(51,data)
(52,if (fgets(data+dataLen, (int)
(53,1)
(54,strlen(data)
(55,dataLen)
(56,"PATH=")
(57,CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData)
(58,dataLen = strlen(data)
(59,NULL)
(60,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,)
(62,dataLen-1)
(63,0)
(64,data = dataBuffer)
(65,dataLen)
(66,RET)
(67,data)
(68,CWE427_Uncontrolled_Search_Path_Element__char_console_45_badData = data)
(69,data+dataLen)
(70,data[dataLen-1] == \\\'\\\\n\\\')
(71,dataLen)
(72,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
