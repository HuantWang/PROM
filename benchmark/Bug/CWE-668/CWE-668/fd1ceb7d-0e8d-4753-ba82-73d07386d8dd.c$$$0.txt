-----label-----
1
-----code-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        WSADATA wsaData;
        BOOL wsaDataInit = FALSE;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        struct sockaddr_in service;
        int recvResult;
        do
        {
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
            listenSocket = socket(PF_INET, SOCK_STREAM, 0);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(LISTEN_PORT);
            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))
            {
                break;
            }
            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == INVALID_SOCKET)
            {
                break;
            }
            /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
            /* FLAW: read the new hostname from a network socket */
            recvResult = recv(acceptSocket, data, 100 - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            data[recvResult] = '\0';
        }
        while (0);
        if (acceptSocket != INVALID_SOCKET)
        {
            closesocket(acceptSocket);
        }
        if (listenSocket != INVALID_SOCKET)
        {
            closesocket(listenSocket);
        }
        if (wsaDataInit)
        {
            WSACleanup();
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
42,48
42,49
42,50
42,51
42,52
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
73,74
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
85,86
87,88
87,89
88,89
88,90
88,91
88,92
88,93
88,94
88,95
88,96
88,97
88,98
88,99
88,100
88,101
88,102
88,103
89,90
89,91
90,91
90,92
91,92
91,93
91,94
92,93
94,95
94,96
94,97
95,96
99,100
100,101
102,103
104,105
106,107
107,108
107,109
108,109
111,112
112,113
112,114
113,114
115,116
115,117
115,118
115,119
116,117
118,119
120,121
123,124
123,125
124,125
124,126
125,126
127,128
129,130
131,132
132,133
132,134
132,135
132,136
133,134
135,136
136,137
139,140
140,141
141,142
143,144
144,145
144,146
145,146
145,147
146,147
149,150
151,152
152,153
152,154
153,154
153,155
154,155
154,156
155,156
159,160
161,162
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
170,171
172,173
172,174
173,174
173,175
174,175
176,177
176,178
176,179
176,180
177,178
179,180
181,182
181,183
182,183
182,184
183,184
185,186
187,188
188,189
190,191
191,192
192,193
194,195
196,197
196,198
197,198
197,199
198,199
200,201
200,202
200,203
201,202
203,204
205,206
207,208
209,210
210,211
210,212
211,212
213,214
213,215
213,216
213,217
214,215
216,217
218,219
220,221
222,223
222,224
223,224
223,225
224,225
226,227
228,229
230,231
231,232
231,233
232,233
234,235
234,236
234,237
234,238
234,239
235,236
237,238
239,240
241,242
241,243
245,246
245,247
246,247
246,248
247,248
247,249
248,249
250,251
252,253
252,254
253,254
256,257
258,259
259,260
259,261
260,261
260,262
261,262
263,264
267,268
267,269
268,269
268,270
269,270
271,272
273,274
274,275
275,276
275,277
276,277
278,279
280,281
280,282
281,282
281,283
282,283
284,285
286,287
287,288
288,289
288,290
289,290
291,292
293,294
293,295
294,295
296,297
297,298
298,299
299,300
301,302
302,303
302,304
303,304
305,306
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,35,39,41,46,48,52,54,57,61,63,66,70,72,75,79,81,84,86,93,96,97,98,101,103,105,109,110,114,117,119,121,122,126,128,130,134,137,138,142,147,148,150,156,157,158,160,165,166,169,171,175,178,180,184,186,189,193,195,199,202,204,206,208,212,215,217,219,221,225,227,229,233,236,238,240,242,243,244,249,251,254,255,257,262,264,265,266,270,272,277,279,283,285,290,292,295,300,304,306
-----computeFrom-----
37,38
37,39
90,91
90,92
107,108
107,109
112,113
112,114
124,125
124,126
144,145
144,146
152,153
152,154
162,163
162,164
173,174
173,175
197,198
197,199
210,211
210,212
223,224
223,225
231,232
231,233
241,242
241,243
246,247
246,248
247,248
247,249
252,253
252,254
259,260
259,261
268,269
268,270
281,282
281,283
-----guardedBy-----
270,279
283,292
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE15_External_Control_of_System_or_Configuration_Setting__w32_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE15_External_Control_of_System_or_Configuration_Setting__w32_44_bad()
CWE15_External_Control_of_System_or_Configuration_Setting__w32_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[100] = "";    data = dataBuffer;    {        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
char dataBuffer[100] = "";
char dataBuffer[100] = "";
char
dataBuffer[100] = ""
dataBuffer
[100]
100
= ""
""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        WSADATA wsaData;        BOOL wsaDataInit = FALSE;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        struct sockaddr_in service;        int recvResult;        do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);        if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }        if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }        if (wsaDataInit)        {            WSACleanup();        }    }
WSADATA wsaData;
WSADATA wsaData;
WSADATA
WSADATA
wsaData
wsaData
BOOL wsaDataInit = FALSE;
BOOL wsaDataInit = FALSE;
BOOL
BOOL
wsaDataInit = FALSE
wsaDataInit
= FALSE
FALSE
FALSE
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
int recvResult;
int recvResult;
int
recvResult
recvResult
do        {            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }        while (0);
{            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;            listenSocket = socket(PF_INET, SOCK_STREAM, 0);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(LISTEN_PORT);            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == INVALID_SOCKET)            {                break;            }            /* INCIDENTAL CWE 188 - reliance on data memory layout             * recv and friends return "number of bytes" received             * char's on our system, however, may not be "octets" (8-bit             * bytes) but could be just about anything.  Also,             * even if the external environment is ASCII or UTF8,             * the ANSI/ISO C standard does not dictate that the             * character set used by the actual language or character             * constants matches.             *             * In practice none of these are usually issues...             */            /* FLAW: read the new hostname from a network socket */            recvResult = recv(acceptSocket, data, 100 - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            data[recvResult] = '\0';        }
if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }
WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR
WSAStartup(MAKEWORD(2,2), &wsaData)
WSAStartup
WSAStartup
MAKEWORD(2,2)
MAKEWORD
MAKEWORD
2
2
&wsaData
wsaData
wsaData
NO_ERROR
NO_ERROR
{                break;            }
break;
wsaDataInit = 1;
wsaDataInit = 1
wsaDataInit
wsaDataInit
1
listenSocket = socket(PF_INET, SOCK_STREAM, 0);
listenSocket = socket(PF_INET, SOCK_STREAM, 0)
listenSocket
listenSocket
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(LISTEN_PORT);
service.sin_port = htons(LISTEN_PORT)
service.sin_port
service
service
sin_port
htons(LISTEN_PORT)
htons
htons
LISTEN_PORT
LISTEN_PORT
if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))            {                break;            }
SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
SOCKET_ERROR
SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
{                break;            }
break;
if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))            {                break;            }
SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
SOCKET_ERROR
SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == INVALID_SOCKET)            {                break;            }
acceptSocket == INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
recvResult = recv(acceptSocket, data, 100 - 1, 0);
recvResult = recv(acceptSocket, data, 100 - 1, 0)
recvResult
recvResult
recv(acceptSocket, data, 100 - 1, 0)
recv
recv
acceptSocket
acceptSocket
data
data
100 - 1
100
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[recvResult] = '\0';
data[recvResult] = '\0'
data[recvResult]
data
data
recvResult
recvResult
'\0'
0
if (acceptSocket != INVALID_SOCKET)        {            closesocket(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(acceptSocket);        }
closesocket(acceptSocket);
closesocket(acceptSocket)
closesocket
closesocket
acceptSocket
acceptSocket
if (listenSocket != INVALID_SOCKET)        {            closesocket(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            closesocket(listenSocket);        }
closesocket(listenSocket);
closesocket(listenSocket)
closesocket
closesocket
listenSocket
listenSocket
if (wsaDataInit)        {            WSACleanup();        }
wsaDataInit
wsaDataInit
{            WSACleanup();        }
WSACleanup();
WSACleanup()
WSACleanup
WSACleanup
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(41,128,0)
(39,66,0)
(102,10,0)
(39,154,0)
(147,21,0)
(126,150,0)
(23,47,0)
(18,116,0)
(116,98,0)
(68,3,0)
(124,10,0)
(96,133,0)
(142,3,0)
(2,10,0)
(30,90,0)
(83,14,0)
(141,139,0)
(25,6,0)
(47,96,0)
(81,130,0)
(58,154,0)
(48,10,0)
(44,7,0)
(132,133,0)
(35,93,0)
(109,114,0)
(91,19,0)
(54,72,0)
(14,92,0)
(81,98,0)
(93,81,0)
(77,139,0)
(17,135,0)
(99,150,0)
(149,93,0)
(120,96,0)
(121,10,0)
(28,98,0)
(81,63,0)
(104,159,0)
(155,10,0)
(19,58,0)
(91,154,0)
(153,98,0)
(104,80,0)
(4,12,0)
(107,133,0)
(43,126,0)
(150,126,0)
(15,61,0)
(86,49,0)
(125,37,0)
(111,66,0)
(117,147,0)
(105,126,0)
(134,58,0)
(126,98,0)
(91,107,0)
(85,71,0)
(53,152,0)
(80,104,0)
(76,133,0)
(154,66,0)
(139,66,0)
(40,21,0)
(128,98,0)
(92,133,0)
(92,128,0)
(108,0,0)
(60,154,0)
(36,10,0)
(58,90,0)
(63,81,0)
(136,59,0)
(14,138,0)
(14,121,0)
(89,28,0)
(16,140,0)
(55,91,0)
(33,28,0)
(122,133,0)
(28,36,0)
(38,116,0)
(31,20,0)
(129,19,0)
(94,39,0)
(3,10,0)
(27,37,0)
(114,121,0)
(10,66,0)
(90,58,0)
(12,42,0)
(0,104,0)
(46,149,0)
(24,128,0)
(75,21,0)
(51,107,0)
(5,133,0)
(130,81,0)
(137,61,0)
(7,133,0)
(58,92,0)
(8,36,0)
(61,98,0)
(6,76,0)
(115,90,0)
(62,10,0)
(127,159,0)
(67,125,0)
(93,149,0)
(26,20,0)
(58,19,0)
(140,92,0)
(29,121,0)
(97,117,0)
(151,66,0)
(57,133,0)
(11,116,0)
(12,98,0)
(159,104,0)
(123,58,0)
(9,128,0)
(19,133,0)
(146,133,0)
(93,35,0)
(73,66,0)
(12,36,0)
(47,23,0)
(112,66,0)
(82,80,0)
(45,133,0)
(84,87,0)
(50,154,0)
(37,133,0)
(70,10,0)
(81,93,0)
(20,76,0)
(34,92,0)
(87,84,0)
(78,95,0)
(21,147,0)
(117,19,0)
(69,81,0)
(103,47,0)
(52,63,0)
(1,10,0)
(113,73,0)
(148,114,0)
(147,117,0)
(74,36,0)
(114,92,0)
(64,10,0)
(98,133,0)
(119,117,0)
(144,130,0)
(157,23,0)
(88,159,0)
(101,58,0)
(104,0,0)
(158,7,0)
(76,6,0)
(84,133,0)
(143,91,0)
(110,10,0)
(98,116,0)
(156,125,0)
(32,140,0)
(71,84,0)
(118,131,0)
(100,73,0)
(106,23,0)
(84,71,0)
(79,121,0)
(128,92,0)
(21,19,0)
(65,84,0)
(56,87,0)
(154,139,0)
(34,150,1)
(114,121,1)
(79,29,1)
(24,41,1)
(154,50,1)
(67,156,1)
(148,145,1)
(15,98,1)
(148,86,1)
(101,123,1)
(143,55,1)
(13,28,1)
(141,73,1)
(33,89,1)
(148,54,1)
(68,154,1)
(144,93,1)
(158,44,1)
(58,90,1)
(148,53,1)
(82,104,1)
(21,19,1)
(134,90,1)
(22,39,1)
(104,0,1)
(28,36,1)
(121,79,1)
(153,7,1)
(84,87,1)
(130,144,1)
(47,103,1)
(61,137,1)
(87,56,1)
(27,125,1)
(137,15,1)
(129,140,1)
(26,31,1)
(12,36,1)
(96,120,1)
(140,32,1)
(125,67,1)
(18,11,1)
(80,82,1)
(23,157,1)
(91,19,1)
(47,23,1)
(39,154,1)
(32,16,1)
(91,154,1)
(107,51,1)
(56,65,1)
(40,19,1)
(28,33,1)
(14,83,1)
(75,40,1)
(12,4,1)
(20,26,1)
(38,153,1)
(98,116,1)
(8,3,1)
(116,18,1)
(16,92,1)
(41,34,1)
(50,60,1)
(73,113,1)
(83,114,1)
(104,159,1)
(53,147,1)
(123,129,1)
(58,92,1)
(31,96,1)
(71,85,1)
(44,80,1)
(84,71,1)
(13,12,1)
(17,140,1)
(88,145,1)
(80,104,1)
(93,149,1)
(19,58,1)
(97,21,1)
(117,19,1)
(89,14,1)
(81,93,1)
(37,27,1)
(128,98,1)
(65,71,1)
(36,74,1)
(28,98,1)
(114,92,1)
(128,9,1)
(76,6,1)
(147,117,1)
(52,76,1)
(139,77,1)
(3,142,1)
(91,143,1)
(119,97,1)
(88,121,1)
(81,98,1)
(78,61,1)
(94,118,1)
(69,52,1)
(120,47,1)
(147,21,1)
(51,91,1)
(85,61,1)
(55,147,1)
(74,8,1)
(12,98,1)
(0,108,1)
(105,99,1)
(127,88,1)
(46,69,1)
(89,114,1)
(92,128,1)
(21,75,1)
(109,148,1)
(63,81,1)
(54,80,1)
(14,92,1)
(90,115,1)
(4,28,1)
(93,35,1)
(118,13,1)
(126,43,1)
(39,94,1)
(136,63,1)
(86,150,1)
(117,119,1)
(159,127,1)
(156,84,1)
(113,100,1)
(11,38,1)
(29,36,1)
(58,134,1)
(157,106,1)
(60,139,1)
(61,98,1)
(148,17,1)
(81,130,1)
(99,63,1)
(142,68,1)
(148,136,1)
(43,105,1)
(77,141,1)
(126,98,1)
(7,158,1)
(6,25,1)
(103,23,1)
(150,126,1)
(154,139,1)
(94,13,1)
(58,154,1)
(30,101,1)
(14,121,1)
(140,92,1)
(108,159,1)
(106,37,1)
(9,24,1)
(115,30,1)
(145,107,1)
(148,78,1)
(25,20,1)
(149,46,1)
(114,109,1)
(93,149,2)
(0,145,2)
(145,147,2)
(84,71,2)
(92,128,2)
(19,58,2)
(154,139,2)
(21,19,2)
(159,145,2)
(58,154,2)
(126,98,2)
(20,61,2)
(81,61,2)
(47,61,2)
(127,145,2)
(61,80,2)
(107,147,2)
(86,150,2)
(41,150,2)
(55,147,2)
(63,81,2)
(80,104,2)
(92,150,2)
(39,154,2)
(140,150,2)
(120,61,2)
(158,80,2)
(118,13,2)
(14,121,2)
(58,90,2)
(58,140,2)
(84,61,2)
(14,114,2)
(24,150,2)
(91,154,2)
(43,63,2)
(11,80,2)
(15,80,2)
(143,147,2)
(91,147,2)
(116,80,2)
(117,19,2)
(27,61,2)
(80,145,2)
(7,80,2)
(114,121,2)
(54,80,2)
(119,21,2)
(14,92,2)
(156,61,2)
(12,28,2)
(71,61,2)
(83,114,2)
(149,61,2)
(52,61,2)
(140,92,2)
(108,145,2)
(81,93,2)
(65,61,2)
(81,130,2)
(105,63,2)
(12,98,2)
(104,159,2)
(16,150,2)
(6,61,2)
(9,150,2)
(93,35,2)
(114,92,2)
(85,61,2)
(26,61,2)
(78,61,2)
(46,61,2)
(144,61,2)
(136,63,2)
(19,140,2)
(82,145,2)
(75,140,2)
(147,21,2)
(32,150,2)
(123,140,2)
(76,61,2)
(53,147,2)
(147,117,2)
(130,61,2)
(51,147,2)
(47,23,2)
(18,80,2)
(97,21,2)
(153,80,2)
(98,116,2)
(125,61,2)
(69,61,2)
(56,61,2)
(17,140,2)
(76,6,2)
(150,126,2)
(104,0,2)
(128,150,2)
(98,80,2)
(40,140,2)
(87,61,2)
(61,98,2)
(34,150,2)
(137,80,2)
(38,80,2)
(91,19,2)
(21,140,2)
(115,140,2)
(28,36,2)
(67,61,2)
(150,63,2)
(28,98,2)
(44,80,2)
(23,61,2)
(58,92,2)
(117,21,2)
(81,98,2)
(128,98,2)
(129,140,2)
(12,36,2)
(25,61,2)
(93,61,2)
(99,63,2)
(147,140,2)
(157,61,2)
(104,145,2)
(37,61,2)
(84,87,2)
(88,145,2)
(30,140,2)
(106,61,2)
(126,63,2)
(101,140,2)
(96,61,2)
(90,140,2)
(31,61,2)
(4,28,2)
(103,61,2)
(63,61,2)
(134,140,2)
-----------------------------------
(0,&wsaData)
(1,if (wsaDataInit)
(2,recvResult)
(3,wsaDataInit = FALSE)
(4,listenSocket)
(5,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(6,htons(LISTEN_PORT)
(7,wsaDataInit = 1)
(8,listenSocket)
(9,NULL)
(10,)
(11,SOCK_STREAM)
(12,closesocket(listenSocket)
(13,wsaDataInit)
(14,closesocket(acceptSocket)
(15,listenSocket)
(16,acceptSocket)
(17,break;)
(18,0)
(19,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(20,service.sin_port)
(21,recvResult == SOCKET_ERROR)
(22,RET)
(23,service.sin_addr)
(24,NULL)
(25,LISTEN_PORT)
(26,sin_port)
(27,AF_INET)
(28,listenSocket != INVALID_SOCKET)
(29,acceptSocket)
(30,100)
(31,service)
(32,INVALID_SOCKET)
(33,INVALID_SOCKET)
(34,acceptSocket)
(35,struct sockaddr*)
(36,listenSocket = INVALID_SOCKET)
(37,service.sin_family = AF_INET)
(38,PF_INET)
(39,funcPtr(data)
(40,recvResult)
(41,listenSocket)
(42,)
(43,LISTEN_BACKLOG)
(44,wsaDataInit)
(45,if (WSAStartup(MAKEWORD(2,2)
(46,service)
(47,service.sin_addr.s_addr)
(48,do)
(49,)
(50,dataBuffer)
(51,\\\'\\\\0\\\')
(52,SOCKET_ERROR)
(53,break;)
(54,break;)
(55,data)
(56,service)
(57,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(58,recv(acceptSocket, data, 100 - 1, 0)
(59,)
(60,data)
(61,listenSocket == INVALID_SOCKET)
(62,wsaDataInit)
(63,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(64,if (acceptSocket != INVALID_SOCKET)
(65,0)
(66,)
(67,sin_family)
(68,wsaDataInit)
(69,listenSocket)
(70,acceptSocket)
(71,&service)
(72,)
(73,(*funcPtr)
(74,INVALID_SOCKET)
(75,SOCKET_ERROR)
(76,service.sin_port = htons(LISTEN_PORT)
(77,"")
(78,break;)
(79,INVALID_SOCKET)
(80,WSAStartup(MAKEWORD(2,2)
(81,bind(listenSocket, (struct sockaddr*)
(82,NO_ERROR)
(83,acceptSocket)
(84,memset(&service, 0, sizeof(service)
(85,service)
(86,break;)
(87,sizeof(service)
(88,2)
(89,listenSocket)
(90,100 - 1)
(91,data[recvResult])
(92,acceptSocket = accept(listenSocket, NULL, NULL)
(93,(struct sockaddr*)
(94,data)
(95,)
(96,service.sin_addr.s_addr = INADDR_ANY)
(97,recvResult)
(98,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(99,SOCKET_ERROR)
(100,funcPtr)
(101,data)
(102,wsaData)
(103,s_addr)
(104,WSAStartup(MAKEWORD(2,2)
(105,listenSocket)
(106,service)
(107,data[recvResult] = \\\'\\\\0\\\')
(108,wsaData)
(109,INVALID_SOCKET)
(110,listenSocket)
(111,funcPtr)
(112,data)
(113,badSink)
(114,acceptSocket != INVALID_SOCKET)
(115,1)
(116,socket(PF_INET, SOCK_STREAM, 0)
(117,recvResult == 0)
(118,WSACleanup()
(119,0)
(120,INADDR_ANY)
(121,acceptSocket = INVALID_SOCKET)
(122,if (recvResult == SOCKET_ERROR || recvResult == 0)
(123,acceptSocket)
(124,service)
(125,service.sin_family)
(126,listen(listenSocket, LISTEN_BACKLOG)
(127,2)
(128,accept(listenSocket, NULL, NULL)
(129,recvResult)
(130,sizeof(service)
(131,)
(132,if (listenSocket == INVALID_SOCKET)
(133,)
(134,0)
(135,)
(136,break;)
(137,INVALID_SOCKET)
(138,)
(139,dataBuffer[100] = "")
(140,acceptSocket == INVALID_SOCKET)
(141,dataBuffer)
(142,FALSE)
(143,recvResult)
(144,service)
(145,0)
(146,if (acceptSocket == INVALID_SOCKET)
(147,recvResult == SOCKET_ERROR || recvResult == 0)
(148,acceptSocket)
(149,&service)
(150,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(151,dataBuffer)
(152,)
(153,listenSocket)
(154,data = dataBuffer)
(155,if (listenSocket != INVALID_SOCKET)
(156,service)
(157,sin_addr)
(158,1)
(159,MAKEWORD(2,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
