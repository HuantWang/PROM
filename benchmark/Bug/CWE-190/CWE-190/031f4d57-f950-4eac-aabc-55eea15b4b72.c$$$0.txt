-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_02_bad()
{
    short data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
20,21
20,22
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_02_bad(){    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_02_bad()
CWE190_Integer_Overflow__short_rand_square_02_bad
{    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,19,0)
(7,20,0)
(24,13,0)
(20,18,0)
(22,8,0)
(8,20,0)
(14,24,0)
(20,8,0)
(19,12,0)
(21,8,0)
(25,7,0)
(9,13,0)
(11,16,0)
(8,22,0)
(1,7,0)
(17,20,0)
(0,4,0)
(24,19,0)
(23,4,0)
(15,16,0)
(7,13,0)
(13,19,0)
(4,16,0)
(2,16,0)
(8,21,0)
(7,4,0)
(13,7,0)
(7,4,1)
(6,4,1)
(3,5,1)
(25,1,1)
(22,17,1)
(17,6,1)
(4,23,1)
(1,9,1)
(7,20,1)
(14,13,1)
(20,8,1)
(8,22,1)
(5,20,1)
(3,24,1)
(24,14,1)
(9,5,1)
(13,7,1)
(7,25,1)
(8,21,1)
(24,13,1)
(5,6,1)
(23,0,1)
(24,5,2)
(1,5,2)
(9,5,2)
(24,13,2)
(17,6,2)
(7,5,2)
(8,6,2)
(7,20,2)
(8,22,2)
(20,8,2)
(7,4,2)
(8,21,2)
(14,5,2)
(13,5,2)
(13,7,2)
(25,5,2)
(22,6,2)
(20,6,2)
-----------------------------------
(0,data)
(1,data)
(2,data)
(3,RET)
(4,data = 0)
(5,1)
(6,1)
(7,data * data)
(8,(short)
(9,result)
(10,result)
(11,if(1)
(12,)
(13,result = data * data)
(14,result)
(15,if(1)
(16,)
(17,data)
(18,)
(19,)
(20,data = (short)
(21,short)
(22,RAND32()
(23,0)
(24,printIntLine(result)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^