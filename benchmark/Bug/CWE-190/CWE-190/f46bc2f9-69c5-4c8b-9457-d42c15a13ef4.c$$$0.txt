-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(12,14,0)
(42,14,0)
(5,38,0)
(37,23,0)
(33,16,0)
(19,15,0)
(16,14,0)
(24,29,0)
(35,39,0)
(29,23,0)
(21,3,0)
(17,0,0)
(1,15,0)
(9,14,0)
(31,3,0)
(14,12,0)
(40,12,0)
(29,14,0)
(36,42,0)
(41,16,0)
(14,8,0)
(2,29,0)
(30,1,0)
(7,28,0)
(9,0,0)
(4,0,0)
(25,12,0)
(15,11,0)
(12,40,0)
(1,23,0)
(20,39,0)
(29,0,0)
(19,16,0)
(6,7,0)
(32,15,0)
(22,19,0)
(27,23,0)
(23,13,0)
(9,23,0)
(39,3,0)
(4,29,0)
(16,23,0)
(44,42,0)
(16,15,0)
(18,9,0)
(26,14,0)
(12,25,0)
(42,23,0)
(45,3,0)
(1,14,0)
(46,4,0)
(34,7,1)
(12,25,1)
(6,42,1)
(12,40,1)
(9,23,1)
(9,18,1)
(19,22,1)
(16,23,1)
(34,19,1)
(19,16,1)
(4,29,1)
(16,41,1)
(7,6,1)
(26,10,1)
(37,27,1)
(44,36,1)
(1,23,1)
(1,30,1)
(43,23,1)
(46,29,1)
(27,10,1)
(22,16,1)
(29,23,1)
(34,4,1)
(23,37,1)
(39,35,1)
(2,9,1)
(30,43,1)
(42,14,1)
(14,12,1)
(43,14,1)
(16,14,1)
(1,14,1)
(24,2,1)
(29,14,1)
(10,39,1)
(42,23,1)
(41,33,1)
(18,42,1)
(9,14,1)
(35,20,1)
(29,24,1)
(42,44,1)
(33,1,1)
(25,26,1)
(36,43,1)
(4,46,1)
(1,23,2)
(12,40,2)
(25,10,2)
(16,43,2)
(26,10,2)
(6,42,2)
(4,29,2)
(9,42,2)
(42,43,2)
(42,14,2)
(27,10,2)
(19,43,2)
(29,23,2)
(12,10,2)
(44,43,2)
(18,42,2)
(2,42,2)
(19,16,2)
(7,42,2)
(46,42,2)
(41,43,2)
(9,23,2)
(4,42,2)
(16,23,2)
(30,43,2)
(23,10,2)
(14,12,2)
(24,42,2)
(9,14,2)
(22,43,2)
(37,10,2)
(12,25,2)
(29,14,2)
(1,14,2)
(33,43,2)
(36,43,2)
(29,42,2)
(16,14,2)
(42,23,2)
(1,43,2)
(14,10,2)
-----------------------------------
(0,)
(1,++data)
(2,result)
(3,)
(4,printUnsignedLine(result)
(5,if (data < UINT_MAX)
(6,"data value is too large to perform arithmetic safely.")
(7,printLine("data value is too large to perform arithmetic safely.")
(8,)
(9,++data)
(10,globalReturnsTrueOrFalse()
(11,)
(12,(unsigned int)
(13,)
(14,data = (unsigned int)
(15,)
(16,result = data)
(17,result)
(18,data)
(19,printUnsignedLine(result)
(20,data)
(21,data)
(22,result)
(23,data = 2)
(24,data)
(25,RAND32()
(26,data)
(27,data)
(28,)
(29,result = data)
(30,data)
(31,if(globalReturnsTrueOrFalse()
(32,result)
(33,result)
(34,RET)
(35,0)
(36,data)
(37,2)
(38,)
(39,data = 0)
(40,unsigned int)
(41,data)
(42,data < UINT_MAX)
(43,globalReturnsTrueOrFalse()
(44,UINT_MAX)
(45,if(globalReturnsTrueOrFalse()
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^