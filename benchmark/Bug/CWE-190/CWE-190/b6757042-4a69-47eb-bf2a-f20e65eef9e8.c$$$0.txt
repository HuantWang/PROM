-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_07_bad()
{
    unsigned int data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_07_bad(){    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_07_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_07_bad
{    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(13,18,0)
(24,18,0)
(19,2,0)
(14,19,0)
(0,16,0)
(15,9,0)
(19,11,0)
(4,5,0)
(20,2,0)
(12,9,0)
(27,18,0)
(2,19,0)
(16,22,0)
(6,10,0)
(7,16,0)
(2,10,0)
(25,19,0)
(29,12,0)
(23,5,0)
(8,0,0)
(21,9,0)
(26,10,0)
(9,10,0)
(12,16,0)
(28,17,0)
(9,12,0)
(3,17,0)
(10,18,0)
(0,12,0)
(10,26,1)
(9,15,1)
(28,19,1)
(21,29,1)
(0,12,1)
(14,25,1)
(17,3,1)
(29,17,1)
(4,23,1)
(28,5,1)
(25,5,1)
(12,9,1)
(20,14,1)
(1,17,1)
(2,20,1)
(9,10,1)
(3,28,1)
(2,10,1)
(0,8,1)
(19,2,1)
(5,4,1)
(26,6,1)
(15,21,1)
(1,0,1)
(23,10,1)
(8,12,1)
(21,17,2)
(20,5,2)
(8,17,2)
(2,10,2)
(0,12,2)
(19,5,2)
(2,5,2)
(9,17,2)
(15,17,2)
(29,17,2)
(0,17,2)
(25,5,2)
(19,2,2)
(12,17,2)
(9,10,2)
(12,9,2)
(14,5,2)
-----------------------------------
(0,printUnsignedLine(result)
(1,RET)
(2,&data)
(3,5)
(4,5)
(5,staticFive==5)
(6,data)
(7,result)
(8,result)
(9,data * data)
(10,data = 0)
(11,)
(12,result = data * data)
(13,if(staticFive==5)
(14,"%u")
(15,data)
(16,)
(17,staticFive==5)
(18,)
(19,fscanf (stdin, "%u", &data)
(20,data)
(21,data)
(22,)
(23,staticFive)
(24,if(staticFive==5)
(25,stdin)
(26,0)
(27,data)
(28,staticFive)
(29,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^