-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_32_bad()
{
    unsigned int data;
    unsigned int *dataPtr1 = &data;
    unsigned int *dataPtr2 = &data;
    data = 0;
    {
        unsigned int data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        *dataPtr1 = data;
    }
    {
        unsigned int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,77,81,83,87,88,92,94
-----computeFrom-----
32,33
32,34
57,58
57,59
74,75
74,76
85,86
85,87
-----guardedBy-----
76,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_32_bad(){    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_32_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_32_bad
{    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
unsigned int *dataPtr1 = &data;
unsigned int *dataPtr1 = &data;
unsigned int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
unsigned int *dataPtr2 = &data;
unsigned int *dataPtr2 = &data;
unsigned int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        *dataPtr1 = data;    }
unsigned int data = *dataPtr1;
unsigned int data = *dataPtr1;
unsigned int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = *dataPtr2;
unsigned int data = *dataPtr2;
unsigned int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(11,29,0)
(30,29,0)
(7,44,0)
(47,25,0)
(0,45,0)
(36,13,0)
(2,17,0)
(8,16,0)
(19,16,0)
(40,24,0)
(34,46,0)
(46,44,0)
(37,5,0)
(49,35,0)
(22,16,0)
(18,16,0)
(32,35,0)
(39,48,0)
(8,24,0)
(3,5,0)
(43,10,0)
(1,32,0)
(13,10,0)
(20,8,0)
(33,3,0)
(44,46,0)
(35,10,0)
(12,13,0)
(35,32,0)
(32,8,0)
(24,8,0)
(42,8,0)
(3,25,0)
(28,3,0)
(15,6,0)
(5,46,0)
(23,20,0)
(38,25,0)
(14,35,0)
(6,35,0)
(10,16,0)
(14,13,0)
(41,33,0)
(33,30,0)
(30,33,0)
(25,16,0)
(20,6,0)
(9,48,0)
(6,10,0)
(5,3,0)
(17,16,0)
(45,29,0)
(27,33,0)
(13,14,0)
(46,16,0)
(45,30,0)
(48,3,0)
(31,17,0)
(4,14,0)
(21,30,0)
(14,35,1)
(37,28,1)
(33,3,1)
(24,40,1)
(14,4,1)
(40,42,1)
(6,15,1)
(28,6,1)
(45,30,1)
(15,20,1)
(41,21,1)
(48,9,1)
(36,12,1)
(46,44,1)
(13,14,1)
(9,39,1)
(27,41,1)
(21,48,1)
(12,35,1)
(5,46,1)
(20,8,1)
(34,8,1)
(48,3,1)
(23,13,1)
(49,17,1)
(30,33,1)
(0,30,1)
(32,1,1)
(6,35,1)
(17,2,1)
(5,37,1)
(33,27,1)
(26,45,1)
(32,8,1)
(44,7,1)
(26,48,1)
(4,36,1)
(7,34,1)
(20,23,1)
(2,31,1)
(39,3,1)
(31,46,1)
(8,24,1)
(1,49,1)
(45,0,1)
(3,5,1)
(35,32,1)
(5,46,2)
(20,8,2)
(27,48,2)
(35,32,2)
(45,30,2)
(8,24,2)
(33,48,2)
(45,48,2)
(33,3,2)
(13,14,2)
(46,44,2)
(32,8,2)
(6,35,2)
(3,5,2)
(30,48,2)
(30,33,2)
(0,48,2)
(48,3,2)
(21,48,2)
(14,35,2)
(41,48,2)
-----------------------------------
(0,result)
(1,dataPtr1)
(2,0)
(3,data = *dataPtr2)
(4,data)
(5,*dataPtr2)
(6,*dataPtr1 = data)
(7,data)
(8,*dataPtr1 = &data)
(9,0)
(10,)
(11,result)
(12,stdin)
(13,fscanf (stdin, "%u", &data)
(14,&data)
(15,data)
(16,)
(17,data = 0)
(18,dataPtr2)
(19,dataPtr1)
(20,*dataPtr1)
(21,result)
(22,data)
(23,dataPtr1)
(24,&data)
(25,)
(26,RET)
(27,2)
(28,data)
(29,)
(30,result = data * 2)
(31,data)
(32,*dataPtr1)
(33,data * 2)
(34,dataPtr2)
(35,data = *dataPtr1)
(36,"%u")
(37,dataPtr2)
(38,if(data > 0)
(39,data)
(40,data)
(41,data)
(42,dataPtr1)
(43,data)
(44,&data)
(45,printUnsignedLine(result)
(46,*dataPtr2 = &data)
(47,data)
(48,data > 0)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^