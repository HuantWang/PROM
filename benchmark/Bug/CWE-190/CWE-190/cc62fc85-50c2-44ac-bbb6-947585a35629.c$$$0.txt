-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_preinc_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int64_t result = data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
25,26
26,27
26,28
27,28
31,32
31,33
33,34
33,35
33,36
33,37
33,38
33,39
34,35
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,9,11,15,16,18,21,23,24,28,29,30,32,35,40,44,46,49,53,55,56,57,61,62,63
-----computeFrom-----
13,14
13,15
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ProblemStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_preinc_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__int64_t_fscanf_preinc_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%" SCNd64, &data);
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }
++data;
++data
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,17,0)
(5,16,0)
(20,17,0)
(8,16,0)
(15,9,0)
(12,10,0)
(2,17,0)
(9,17,0)
(12,9,0)
(11,17,0)
(7,25,0)
(14,10,0)
(10,9,0)
(19,16,0)
(21,10,0)
(18,25,0)
(24,20,0)
(26,25,0)
(13,16,0)
(3,17,0)
(22,28,0)
(1,12,0)
(4,25,0)
(28,9,0)
(30,26,0)
(23,25,0)
(0,18,1)
(14,21,1)
(4,29,1)
(22,0,1)
(11,12,1)
(10,14,1)
(27,11,1)
(30,29,1)
(27,2,1)
(12,1,1)
(29,19,1)
(20,24,1)
(24,0,1)
(28,22,1)
(12,10,1)
(1,10,1)
(21,28,1)
(0,4,1)
(2,20,1)
(26,30,1)
(18,26,1)
(28,0,2)
(1,0,2)
(26,29,2)
(18,29,2)
(12,0,2)
(4,29,2)
(24,0,2)
(14,0,2)
(30,29,2)
(20,0,2)
(12,10,2)
(2,0,2)
(11,0,2)
(21,0,2)
(22,0,2)
(10,0,2)
-----------------------------------
(0,7)
(1,result)
(2,break;)
(3,case 7:)
(4,break;)
(5,switch(7)
(6,default:)
(7,default:)
(8,switch(6)
(9,)
(10,result = data)
(11,break;)
(12,printLongLongLine(result)
(13,data)
(14,data)
(15,result)
(16,)
(17,)
(18,break;)
(19,L)
(20,printLine("Benign, fixed string")
(21,result)
(22,data)
(23,case 6:)
(24,"Benign, fixed string")
(25,)
(26,printLine("Benign, fixed string")
(27,RET)
(28,++data)
(29,6)
(30,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^