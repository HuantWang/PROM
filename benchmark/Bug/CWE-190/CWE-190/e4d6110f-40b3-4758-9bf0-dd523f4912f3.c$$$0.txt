-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
29,32
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,33,36,38,41,45,47,48
-----computeFrom-----
12,13
12,14
20,21
20,22
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_max_postinc_16_bad()
CWE190_Integer_Overflow__char_max_postinc_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(19,1,0)
(11,16,0)
(12,6,0)
(17,7,0)
(26,25,0)
(23,3,0)
(1,7,0)
(1,5,0)
(4,15,0)
(15,7,0)
(18,1,0)
(20,25,0)
(13,7,0)
(2,5,0)
(10,16,0)
(16,6,0)
(9,5,0)
(15,5,0)
(22,25,0)
(7,3,0)
(5,25,0)
(1,16,0)
(8,11,0)
(15,16,0)
(11,1,0)
(11,8,1)
(23,7,1)
(7,13,1)
(8,1,1)
(17,0,1)
(11,1,1)
(1,19,1)
(1,5,1)
(5,2,1)
(4,14,1)
(21,12,1)
(18,15,1)
(14,0,1)
(19,18,1)
(12,11,1)
(13,17,1)
(21,14,1)
(15,7,1)
(15,4,1)
(1,7,1)
(15,5,1)
(0,5,1)
(2,9,1)
(14,23,1)
(1,7,2)
(1,14,2)
(15,7,2)
(18,14,2)
(11,1,2)
(23,0,2)
(12,14,2)
(4,14,2)
(19,14,2)
(7,0,2)
(13,0,2)
(15,14,2)
(17,0,2)
(8,14,2)
(15,5,2)
(1,5,2)
(11,14,2)
-----------------------------------
(0,1)
(1,result = data)
(2,' ')
(3,)
(4,data)
(5,data = \' \')
(6,)
(7,data = CHAR_MAX)
(8,result)
(9,data)
(10,result)
(11,printHexCharLine(result)
(12,break;)
(13,CHAR_MAX)
(14,1)
(15,data++)
(16,)
(17,data)
(18,result)
(19,data)
(20,data)
(21,RET)
(22,while(1)
(23,break;)
(24,data = ' ')
(25,)
(26,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^