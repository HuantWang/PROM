-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,77,81,83,87,88,92,94
-----computeFrom-----
32,33
32,34
57,58
57,59
74,75
74,76
85,86
85,87
-----guardedBy-----
76,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_32_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,15,0)
(15,13,0)
(14,28,0)
(10,23,0)
(47,13,0)
(24,14,0)
(48,36,0)
(9,8,0)
(40,28,0)
(40,29,0)
(7,11,0)
(11,7,0)
(23,30,0)
(44,27,0)
(8,14,0)
(36,40,0)
(15,12,0)
(33,27,0)
(18,40,0)
(36,37,0)
(6,47,0)
(12,37,0)
(3,28,0)
(16,30,0)
(41,28,0)
(43,28,0)
(11,28,0)
(23,2,0)
(45,32,0)
(19,11,0)
(22,29,0)
(37,36,0)
(26,38,0)
(0,28,0)
(47,15,0)
(2,38,0)
(30,14,0)
(4,9,0)
(37,41,0)
(46,8,0)
(17,13,0)
(38,11,0)
(38,2,0)
(35,37,0)
(31,32,0)
(29,40,0)
(20,41,0)
(21,2,0)
(42,30,0)
(25,41,0)
(5,12,0)
(49,7,0)
(30,23,0)
(9,11,0)
(39,15,0)
(8,2,0)
(27,28,0)
(34,12,0)
(2,14,0)
(32,37,0)
(26,21,1)
(11,7,1)
(34,5,1)
(32,37,1)
(49,19,1)
(48,35,1)
(35,8,1)
(44,40,1)
(47,6,1)
(42,16,1)
(8,2,1)
(23,2,1)
(16,2,1)
(46,9,1)
(39,32,1)
(1,47,1)
(38,26,1)
(27,33,1)
(22,18,1)
(36,48,1)
(31,37,1)
(21,27,1)
(32,45,1)
(4,30,1)
(47,15,1)
(33,44,1)
(6,15,1)
(12,37,1)
(29,22,1)
(2,38,1)
(38,11,1)
(12,34,1)
(45,31,1)
(1,32,1)
(40,29,1)
(5,39,1)
(7,49,1)
(18,11,1)
(36,40,1)
(23,10,1)
(37,36,1)
(8,46,1)
(15,12,1)
(10,42,1)
(30,23,1)
(9,11,1)
(9,4,1)
(39,32,2)
(40,29,2)
(32,37,2)
(47,15,2)
(47,32,2)
(2,38,2)
(12,37,2)
(37,36,2)
(23,2,2)
(15,12,2)
(5,32,2)
(9,11,2)
(12,32,2)
(38,11,2)
(34,32,2)
(36,40,2)
(8,2,2)
(30,23,2)
(11,7,2)
(15,32,2)
(6,32,2)
-----------------------------------
(0,data)
(1,RET)
(2,data = *dataPtr1)
(3,dataPtr2)
(4,dataPtr1)
(5,data)
(6,result)
(7,&data)
(8,*dataPtr1 = data)
(9,*dataPtr1)
(10,data)
(11,*dataPtr1 = &data)
(12,data * 2)
(13,)
(14,)
(15,result = data * 2)
(16,stdin)
(17,result)
(18,dataPtr2)
(19,dataPtr1)
(20,if(data > 0)
(21,data)
(22,data)
(23,&data)
(24,data)
(25,data)
(26,dataPtr1)
(27,data = \\\' \\\')
(28,)
(29,&data)
(30,fscanf (stdin, "%c", &data)
(31,data)
(32,data > 0)
(33,\\\' \\\')
(34,2)
(35,data)
(36,*dataPtr2)
(37,data = *dataPtr2)
(38,*dataPtr1)
(39,result)
(40,*dataPtr2 = &data)
(41,)
(42,"%c")
(43,dataPtr1)
(44,data)
(45,0)
(46,data)
(47,printHexCharLine(result)
(48,dataPtr2)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^