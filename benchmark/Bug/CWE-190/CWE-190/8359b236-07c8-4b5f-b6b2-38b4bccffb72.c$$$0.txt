-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_05_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,29,34,35,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
43,44
43,45
-----guardedBy-----
34,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_05_bad(){    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_05_bad()
CWE190_Integer_Overflow__int_rand_multiply_05_bad
{    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,17,0)
(19,26,0)
(24,13,0)
(10,26,0)
(18,25,0)
(6,3,0)
(3,21,0)
(1,3,0)
(4,6,0)
(26,16,0)
(6,17,0)
(8,6,0)
(23,17,0)
(16,13,0)
(0,24,0)
(14,25,0)
(12,16,0)
(20,13,0)
(17,25,0)
(3,22,0)
(7,25,0)
(16,26,0)
(24,16,0)
(26,3,0)
(21,3,0)
(27,2,0)
(15,17,0)
(6,17,1)
(24,0,1)
(0,16,1)
(1,9,1)
(26,3,1)
(8,5,1)
(26,19,1)
(11,5,1)
(24,16,1)
(11,24,1)
(5,3,1)
(11,6,1)
(5,9,1)
(9,17,1)
(10,12,1)
(6,3,1)
(4,8,1)
(17,15,1)
(15,23,1)
(16,26,1)
(12,6,1)
(26,17,1)
(21,1,1)
(3,21,1)
(19,10,1)
(6,4,1)
(12,6,2)
(8,5,2)
(19,6,2)
(26,17,2)
(24,16,2)
(3,9,2)
(3,21,2)
(24,6,2)
(16,26,2)
(10,6,2)
(16,6,2)
(6,17,2)
(0,6,2)
(6,5,2)
(26,6,2)
(21,9,2)
(1,9,2)
(6,3,2)
(4,5,2)
(26,3,2)
-----------------------------------
(0,result)
(1,data)
(2,)
(3,data = RAND32()
(4,0)
(5,staticTrue)
(6,data > 0)
(7,data)
(8,data)
(9,staticTrue)
(10,data)
(11,RET)
(12,result)
(13,)
(14,if(staticTrue)
(15,0)
(16,result = data * 2)
(17,data = 0)
(18,if(staticTrue)
(19,2)
(20,result)
(21,RAND32()
(22,)
(23,data)
(24,printIntLine(result)
(25,)
(26,data * 2)
(27,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^