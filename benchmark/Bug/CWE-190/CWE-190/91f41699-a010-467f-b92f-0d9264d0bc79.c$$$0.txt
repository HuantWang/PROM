-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_03_bad()
CWE190_Integer_Overflow__char_max_multiply_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(31,20,0)
(15,25,0)
(10,26,0)
(8,17,0)
(27,11,0)
(13,30,0)
(1,6,0)
(17,11,0)
(9,17,0)
(27,17,0)
(2,9,0)
(24,26,0)
(9,20,0)
(25,20,0)
(5,12,0)
(7,11,0)
(14,12,0)
(29,30,0)
(0,25,0)
(22,6,0)
(3,20,0)
(23,9,0)
(6,4,0)
(28,19,0)
(18,27,0)
(9,6,0)
(17,9,0)
(16,12,0)
(25,6,0)
(20,12,0)
(3,31,1)
(9,6,1)
(6,22,1)
(30,29,1)
(32,30,1)
(27,17,1)
(24,20,1)
(0,15,1)
(18,17,1)
(23,8,1)
(32,27,1)
(22,1,1)
(8,25,1)
(17,9,1)
(1,26,1)
(9,20,1)
(13,6,1)
(26,10,1)
(25,6,1)
(32,25,1)
(13,26,1)
(10,24,1)
(25,0,1)
(9,2,1)
(20,3,1)
(25,20,1)
(15,30,1)
(2,23,1)
(27,18,1)
(29,13,1)
(0,30,2)
(17,25,2)
(9,25,2)
(9,6,2)
(18,25,2)
(1,26,2)
(6,26,2)
(27,17,2)
(15,30,2)
(23,25,2)
(9,20,2)
(25,6,2)
(27,25,2)
(17,9,2)
(25,30,2)
(22,26,2)
(8,25,2)
(25,20,2)
(2,25,2)
-----------------------------------
(0,0)
(1,data)
(2,2)
(3,' ')
(4,)
(5,if(5==5)
(6,data = CHAR_MAX)
(7,result)
(8,result)
(9,data * 2)
(10,5)
(11,)
(12,)
(13,5)
(14,if(5==5)
(15,data)
(16,data)
(17,result = data * 2)
(18,result)
(19,)
(20,data = ' ')
(21,data = \' \')
(22,CHAR_MAX)
(23,data)
(24,5)
(25,data > 0)
(26,5==5)
(27,printHexCharLine(result)
(28,if(data > 0)
(29,5)
(30,5==5)
(31,data)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^