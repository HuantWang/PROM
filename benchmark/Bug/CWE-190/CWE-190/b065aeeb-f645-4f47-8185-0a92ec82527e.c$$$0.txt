-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_preinc_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int64_t result = data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
36,37
37,38
37,39
38,39
42,43
42,44
44,45
44,46
44,47
44,48
44,49
44,50
45,46
47,48
47,49
47,50
48,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,9,11,15,16,18,21,25,29,30,33,34,35,39,40,41,43,46,51,55,57,60,64,66,67,68,72,73,74
-----computeFrom-----
13,14
13,15
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_preinc_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_preinc_15_bad()
CWE190_Integer_Overflow__int64_t_rand_preinc_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }
++data;
++data
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(26,16,0)
(0,21,0)
(18,15,0)
(5,26,0)
(10,16,0)
(18,26,0)
(15,25,0)
(33,16,0)
(2,25,0)
(28,25,0)
(11,25,0)
(29,18,0)
(3,35,0)
(24,18,0)
(22,16,0)
(8,15,0)
(14,35,0)
(12,7,0)
(24,15,0)
(31,18,0)
(20,0,0)
(0,20,0)
(21,0,0)
(13,16,0)
(4,16,0)
(0,26,0)
(17,32,0)
(19,25,0)
(32,26,0)
(23,10,0)
(7,25,0)
(34,35,0)
(32,15,0)
(26,0,0)
(6,35,0)
(9,24,0)
(4,26,1)
(32,26,1)
(12,1,1)
(0,20,1)
(26,0,1)
(20,5,1)
(24,9,1)
(18,26,1)
(10,23,1)
(1,22,1)
(28,7,1)
(24,18,1)
(27,2,1)
(2,24,1)
(9,18,1)
(31,32,1)
(17,1,1)
(1,4,1)
(18,29,1)
(27,28,1)
(0,21,1)
(29,31,1)
(22,10,1)
(32,17,1)
(5,30,1)
(30,34,1)
(7,12,1)
(23,30,1)
(32,26,2)
(2,1,2)
(32,1,2)
(29,1,2)
(24,18,2)
(12,1,2)
(0,20,2)
(23,30,2)
(10,30,2)
(28,1,2)
(20,30,2)
(0,21,2)
(4,30,2)
(17,1,2)
(26,30,2)
(18,1,2)
(31,1,2)
(22,30,2)
(9,1,2)
(24,1,2)
(7,1,2)
(18,26,2)
(0,30,2)
(26,0,2)
(5,30,2)
-----------------------------------
(0,(int64_t)
(1,7)
(2,break;)
(3,switch(6)
(4,break;)
(5,data)
(6,switch(7)
(7,printLine("Benign, fixed string")
(8,result)
(9,result)
(10,printLine("Benign, fixed string")
(11,default:)
(12,"Benign, fixed string")
(13,default:)
(14,data)
(15,)
(16,)
(17,data)
(18,result = data)
(19,case 7:)
(20,RAND64()
(21,int64_t)
(22,break;)
(23,"Benign, fixed string")
(24,printLongLongLine(result)
(25,)
(26,data = (int64_t)
(27,RET)
(28,break;)
(29,data)
(30,6)
(31,result)
(32,++data)
(33,case 6:)
(34,L)
(35,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^