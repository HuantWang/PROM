-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_18_bad()
{
    short data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    goto sink;
sink:
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_18_bad(){    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_square_18_bad()
CWE190_Integer_Overflow__short_fscanf_square_18_bad
{    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);
source
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
goto sink;
sink
sink:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
sink
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,15,0)
(9,21,0)
(21,13,0)
(2,15,0)
(18,1,0)
(23,13,0)
(5,3,0)
(11,1,0)
(17,3,0)
(5,2,0)
(13,15,0)
(10,13,0)
(3,2,0)
(19,5,0)
(3,23,0)
(14,13,0)
(1,15,0)
(20,23,0)
(0,23,0)
(16,15,0)
(4,15,0)
(23,3,0)
(21,1,0)
(6,2,0)
(7,15,0)
(1,21,0)
(12,15,0)
(18,16,1)
(16,13,1)
(23,13,1)
(8,5,1)
(13,10,1)
(5,19,1)
(17,7,1)
(23,20,1)
(3,23,1)
(11,18,1)
(21,9,1)
(20,0,1)
(19,3,1)
(1,21,1)
(9,11,1)
(21,13,1)
(5,3,1)
(7,1,1)
(10,14,1)
(0,17,1)
(5,3,2)
(3,23,2)
(1,21,2)
(23,13,2)
(21,13,2)
-----------------------------------
(0,data)
(1,fscanf (stdin, "%hd", &data)
(2,)
(3,result = data * data)
(4,sink:)
(5,printIntLine(result)
(6,result)
(7,goto sink;)
(8,RET)
(9,data)
(10,0)
(11,"%hd")
(12,data)
(13,data = 0)
(14,data)
(15,)
(16,goto source;)
(17,result)
(18,stdin)
(19,result)
(20,data)
(21,&data)
(22,source:)
(23,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^