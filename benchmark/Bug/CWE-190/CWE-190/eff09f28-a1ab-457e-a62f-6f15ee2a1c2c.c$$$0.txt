-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_18_bad()
{
    char data;
    data = ' ';
    goto source;
source:
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    goto sink;
sink:
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,27,29,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_18_bad(){    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_square_18_bad()
CWE190_Integer_Overflow__char_max_square_18_bad
{    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
goto source;
source
source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;
source
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
goto sink;
sink
sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
sink
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,3,0)
(6,3,0)
(18,3,0)
(7,20,0)
(1,4,0)
(2,9,0)
(19,5,0)
(14,6,0)
(15,3,0)
(12,3,0)
(8,4,0)
(20,5,0)
(5,20,0)
(21,5,0)
(14,20,0)
(16,3,0)
(0,6,0)
(20,6,0)
(17,3,0)
(5,4,0)
(4,3,0)
(10,14,0)
(13,9,0)
(14,10,1)
(19,7,1)
(1,8,1)
(9,13,1)
(21,19,1)
(14,20,1)
(7,18,1)
(5,21,1)
(18,4,1)
(10,20,1)
(15,9,1)
(13,2,1)
(8,15,1)
(20,5,1)
(11,14,1)
(5,4,1)
(4,1,1)
(20,5,2)
(14,20,2)
(5,4,2)
-----------------------------------
(0,result)
(1,CHAR_MAX)
(2,data)
(3,)
(4,data = CHAR_MAX)
(5,data * data)
(6,)
(7,result)
(8,data)
(9,data = ' ')
(10,result)
(11,RET)
(12,sink:)
(13,' ')
(14,printHexCharLine(result)
(15,goto source;)
(16,data)
(17,source:)
(18,goto sink;)
(19,data)
(20,result = data * data)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^