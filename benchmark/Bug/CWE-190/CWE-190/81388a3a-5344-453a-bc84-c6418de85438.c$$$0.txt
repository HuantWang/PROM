-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_32_bad()
{
    unsigned int data;
    unsigned int *dataPtr1 = &data;
    unsigned int *dataPtr2 = &data;
    data = 0;
    {
        unsigned int data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        *dataPtr1 = data;
    }
    {
        unsigned int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
83,84
83,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,78,82,84,88,89,93,95
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
75,76
75,77
86,87
86,88
-----guardedBy-----
77,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_32_bad(){    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_32_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_32_bad
{    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
unsigned int *dataPtr1 = &data;
unsigned int *dataPtr1 = &data;
unsigned int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
unsigned int *dataPtr2 = &data;
unsigned int *dataPtr2 = &data;
unsigned int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }
unsigned int data = *dataPtr1;
unsigned int data = *dataPtr1;
unsigned int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = *dataPtr2;
unsigned int data = *dataPtr2;
unsigned int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(46,19,0)
(0,35,0)
(11,32,0)
(1,11,0)
(18,42,0)
(12,8,0)
(42,22,0)
(33,26,0)
(33,13,0)
(25,8,0)
(49,2,0)
(9,24,0)
(48,24,0)
(48,19,0)
(40,8,0)
(35,4,0)
(19,48,0)
(27,32,0)
(31,33,0)
(21,32,0)
(2,49,0)
(41,24,0)
(38,22,0)
(17,12,0)
(8,32,0)
(5,18,0)
(4,16,0)
(30,34,0)
(42,39,0)
(28,42,0)
(15,39,0)
(33,31,0)
(20,18,0)
(39,32,0)
(10,16,0)
(16,32,0)
(6,32,0)
(34,12,0)
(34,16,0)
(9,48,0)
(35,8,0)
(36,4,0)
(31,16,0)
(47,9,0)
(22,42,0)
(37,40,0)
(7,48,0)
(12,34,0)
(29,49,0)
(14,39,0)
(13,33,0)
(43,31,0)
(44,2,0)
(2,32,0)
(3,11,0)
(19,42,0)
(26,33,0)
(4,31,0)
(8,40,0)
(45,19,0)
(22,2,0)
(43,34,1)
(45,46,1)
(19,45,1)
(22,38,1)
(42,22,1)
(4,36,1)
(12,8,1)
(4,31,1)
(34,12,1)
(36,35,1)
(23,18,1)
(31,33,1)
(12,17,1)
(8,40,1)
(18,42,1)
(22,2,1)
(20,5,1)
(30,11,1)
(37,25,1)
(46,7,1)
(7,18,1)
(18,20,1)
(47,48,1)
(28,4,1)
(9,47,1)
(33,13,1)
(9,48,1)
(3,2,1)
(0,31,1)
(13,43,1)
(1,3,1)
(29,44,1)
(35,8,1)
(33,26,1)
(35,0,1)
(48,19,1)
(2,49,1)
(11,1,1)
(44,8,1)
(17,30,1)
(38,28,1)
(40,37,1)
(5,42,1)
(23,9,1)
(49,29,1)
(19,42,1)
(42,22,2)
(22,2,2)
(9,48,2)
(34,12,2)
(35,8,2)
(19,42,2)
(18,42,2)
(46,18,2)
(12,8,2)
(48,18,2)
(45,18,2)
(4,31,2)
(33,13,2)
(47,18,2)
(33,26,2)
(8,40,2)
(2,49,2)
(19,18,2)
(9,18,2)
(7,18,2)
(31,33,2)
(48,19,2)
-----------------------------------
(0,dataPtr1)
(1,0)
(2,*dataPtr2 = &data)
(3,data)
(4,*dataPtr1 = data)
(5,data)
(6,dataPtr1)
(7,result)
(8,*dataPtr1 = &data)
(9,printUnsignedLine(result)
(10,data)
(11,data = 0)
(12,*dataPtr1)
(13,RAND32()
(14,if(data > 0)
(15,data)
(16,)
(17,dataPtr1)
(18,data > 0)
(19,data * 2)
(20,0)
(21,data)
(22,*dataPtr2)
(23,RET)
(24,)
(25,dataPtr1)
(26,unsigned int)
(27,dataPtr2)
(28,data)
(29,data)
(30,data)
(31,data = (unsigned int)
(32,)
(33,(unsigned int)
(34,data = *dataPtr1)
(35,*dataPtr1)
(36,data)
(37,data)
(38,dataPtr2)
(39,)
(40,&data)
(41,result)
(42,data = *dataPtr2)
(43,data)
(44,dataPtr2)
(45,2)
(46,data)
(47,result)
(48,result = data * 2)
(49,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^