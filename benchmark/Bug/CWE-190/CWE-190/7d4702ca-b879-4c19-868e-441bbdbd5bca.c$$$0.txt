-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_preinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
58,61
59,60
60,61
61,62
63,64
64,65
64,66
66,67
66,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,48,49,52,53,56,62,65,67,70,74,76
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_preinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_preinc_17_bad()
CWE190_Integer_Overflow__int_rand_preinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(32,20,0)
(24,23,0)
(10,22,0)
(27,30,0)
(37,17,0)
(20,24,0)
(38,22,0)
(11,1,0)
(23,30,0)
(7,26,0)
(26,7,0)
(36,3,0)
(3,12,0)
(0,30,0)
(2,24,0)
(28,24,0)
(21,23,0)
(6,22,0)
(14,23,0)
(39,30,0)
(29,17,0)
(21,26,0)
(20,1,0)
(17,12,0)
(26,16,0)
(21,1,0)
(15,26,0)
(31,10,0)
(24,1,0)
(24,26,0)
(4,30,0)
(1,18,0)
(9,30,0)
(35,23,0)
(13,21,0)
(19,10,0)
(33,12,0)
(25,22,0)
(8,12,0)
(5,6,0)
(19,6,1)
(24,28,1)
(10,22,1)
(29,37,1)
(24,26,1)
(6,22,1)
(37,3,1)
(2,21,1)
(8,33,1)
(28,2,1)
(3,36,1)
(36,26,1)
(6,5,1)
(38,17,1)
(21,26,1)
(14,35,1)
(7,15,1)
(26,7,1)
(34,10,1)
(17,29,1)
(24,23,1)
(37,12,1)
(22,25,1)
(31,19,1)
(15,17,1)
(5,20,1)
(25,38,1)
(21,13,1)
(12,8,1)
(20,32,1)
(23,14,1)
(21,23,1)
(13,10,1)
(33,23,1)
(20,24,1)
(17,12,1)
(10,31,1)
(3,12,1)
(32,24,1)
(19,22,1)
(26,7,2)
(24,26,2)
(17,17,2)
(15,17,2)
(28,10,2)
(13,10,2)
(10,10,2)
(5,10,2)
(19,10,2)
(3,17,2)
(21,10,2)
(36,17,2)
(24,23,2)
(20,24,2)
(37,17,2)
(6,22,2)
(10,22,2)
(7,17,2)
(32,10,2)
(29,17,2)
(21,26,2)
(6,10,2)
(24,10,2)
(3,12,2)
(17,12,2)
(2,10,2)
(20,10,2)
(31,10,2)
(26,17,2)
(21,23,2)
-----------------------------------
(0,j)
(1,)
(2,result)
(3,i++)
(4,i)
(5,j)
(6,j++)
(7,RAND32()
(8,0)
(9,for(j = 0; j < 1; j++)
(10,j < 1)
(11,result)
(12,i = 0)
(13,data)
(14,0)
(15,data)
(16,)
(17,i < 1)
(18,)
(19,j)
(20,printIntLine(result)
(21,++data)
(22,j = 0)
(23,data = 0)
(24,result = data)
(25,0)
(26,data = RAND32()
(27,for(i = 0; i < 1; i++)
(28,data)
(29,1)
(30,)
(31,1)
(32,result)
(33,i)
(34,RET)
(35,data)
(36,i)
(37,i)
(38,j)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^