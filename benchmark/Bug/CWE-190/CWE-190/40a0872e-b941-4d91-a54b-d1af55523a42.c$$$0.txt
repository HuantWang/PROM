-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
62,65
63,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,66,69,71,74,78,80
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_17_bad()
CWE190_Integer_Overflow__char_rand_preinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,22,0)
(24,30,0)
(8,29,0)
(28,22,0)
(28,0,0)
(7,29,0)
(0,31,0)
(21,0,0)
(30,15,0)
(20,29,0)
(6,31,0)
(18,12,0)
(38,0,0)
(15,30,0)
(27,31,0)
(42,31,0)
(21,15,0)
(39,12,0)
(33,15,0)
(1,21,0)
(32,29,0)
(22,40,0)
(37,31,0)
(16,8,0)
(21,22,0)
(11,30,0)
(41,28,0)
(23,5,0)
(19,21,0)
(14,31,0)
(35,19,0)
(19,22,0)
(30,24,0)
(28,15,0)
(25,0,0)
(26,8,0)
(13,21,0)
(12,5,0)
(17,5,0)
(30,11,0)
(15,34,0)
(4,32,0)
(3,17,0)
(2,5,0)
(28,0,1)
(21,13,1)
(8,29,1)
(19,35,1)
(21,15,1)
(0,25,1)
(33,12,1)
(28,15,1)
(5,2,1)
(16,29,1)
(39,18,1)
(29,7,1)
(15,30,1)
(26,16,1)
(18,5,1)
(25,38,1)
(16,32,1)
(30,11,1)
(17,5,1)
(17,3,1)
(23,0,1)
(36,8,1)
(28,41,1)
(13,1,1)
(4,19,1)
(8,26,1)
(32,4,1)
(7,20,1)
(18,17,1)
(2,23,1)
(20,12,1)
(12,39,1)
(1,28,1)
(12,5,1)
(24,33,1)
(41,8,1)
(35,21,1)
(21,0,1)
(30,24,1)
(3,15,1)
(19,21,1)
(32,29,1)
(17,5,2)
(13,8,2)
(8,8,2)
(28,15,2)
(15,30,2)
(35,8,2)
(19,8,2)
(18,12,2)
(17,12,2)
(21,15,2)
(16,8,2)
(19,21,2)
(30,12,2)
(3,12,2)
(21,8,2)
(28,8,2)
(21,0,2)
(15,12,2)
(28,0,2)
(30,11,2)
(26,8,2)
(4,8,2)
(12,12,2)
(12,5,2)
(24,12,2)
(8,29,2)
(33,12,2)
(1,8,2)
(39,12,2)
(30,24,2)
(41,8,2)
(32,8,2)
(32,29,2)
-----------------------------------
(0,data = ' ')
(1,result)
(2,0)
(3,i)
(4,j)
(5,i = 0)
(6,for(j = 0; j < 1; j++)
(7,0)
(8,j < 1)
(9,result)
(10,data = \' \')
(11,char)
(12,i < 1)
(13,data)
(14,j)
(15,data = (char)
(16,j)
(17,i++)
(18,i)
(19,printHexCharLine(result)
(20,j)
(21,result = data)
(22,)
(23,i)
(24,RAND32()
(25,' ')
(26,1)
(27,i)
(28,++data)
(29,j = 0)
(30,(char)
(31,)
(32,j++)
(33,data)
(34,)
(35,result)
(36,RET)
(37,data)
(38,data)
(39,1)
(40,)
(41,data)
(42,for(i = 0; i < 1; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^