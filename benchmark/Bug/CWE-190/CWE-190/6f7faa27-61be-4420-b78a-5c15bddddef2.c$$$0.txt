-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,31,33,37,39
-----computeFrom-----
12,13
12,14
17,18
17,19
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_square_01_bad()
CWE190_Integer_Overflow__char_max_square_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,1,0)
(17,1,0)
(7,11,0)
(11,10,0)
(14,11,0)
(11,14,0)
(0,10,0)
(14,1,0)
(10,13,0)
(8,13,0)
(12,11,0)
(3,14,0)
(5,4,0)
(1,13,0)
(16,4,0)
(9,17,0)
(17,14,0)
(4,13,0)
(15,10,0)
(3,10,1)
(15,0,1)
(14,11,1)
(2,17,1)
(4,5,1)
(17,9,1)
(9,14,1)
(11,12,1)
(0,4,1)
(7,3,1)
(10,15,1)
(12,7,1)
(11,10,1)
(5,16,1)
(17,14,1)
(17,14,2)
(14,11,2)
(11,10,2)
-----------------------------------
(0,data)
(1,)
(2,RET)
(3,result)
(4,data = ' ')
(5,' ')
(6,result)
(7,data)
(8,data)
(9,result)
(10,data = CHAR_MAX)
(11,data * data)
(12,data)
(13,)
(14,result = data * data)
(15,CHAR_MAX)
(16,data)
(17,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^