-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_preinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            ++data;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
67,68
67,69
67,70
68,69
69,70
71,72
72,73
72,74
72,75
73,74
74,75
75,76
77,78
78,79
78,80
80,81
80,82
82,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
101,102
103,104
104,105
104,106
106,107
106,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,65,66,70,76,79,81,84,88,90,95,97,102,105,107,110,114,116,121,122
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
63,64
63,65
93,94
93,95
-----guardedBy-----
38,54
95,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_preinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fgets_preinc_12_bad()
CWE190_Integer_Overflow__int_fgets_preinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(60,2,0)
(52,18,0)
(2,31,0)
(37,48,0)
(31,32,0)
(13,2,0)
(55,10,0)
(22,4,0)
(46,31,0)
(37,46,0)
(42,59,0)
(27,25,0)
(10,25,0)
(19,31,0)
(1,61,0)
(20,49,0)
(8,52,0)
(2,25,0)
(45,61,0)
(9,48,0)
(3,28,0)
(56,43,0)
(21,3,0)
(26,10,0)
(44,22,0)
(14,54,0)
(38,46,0)
(51,43,0)
(33,37,0)
(29,51,0)
(59,57,0)
(46,25,0)
(2,22,0)
(49,2,0)
(40,51,0)
(8,25,0)
(44,31,0)
(51,34,0)
(46,52,0)
(23,52,0)
(8,31,0)
(5,30,0)
(16,46,0)
(54,50,0)
(49,22,0)
(43,54,0)
(7,51,0)
(44,52,0)
(0,43,0)
(46,48,0)
(47,22,0)
(58,44,0)
(32,43,0)
(8,48,0)
(31,24,0)
(34,51,0)
(41,25,0)
(25,61,0)
(11,61,0)
(10,31,0)
(36,34,0)
(39,8,0)
(44,25,0)
(17,52,0)
(32,31,0)
(2,52,0)
(53,32,0)
(10,52,0)
(15,54,0)
(16,38,1)
(10,31,1)
(49,2,1)
(36,51,1)
(12,3,1)
(55,26,1)
(59,42,1)
(37,33,1)
(60,13,1)
(12,31,1)
(2,52,1)
(6,37,1)
(19,34,1)
(10,25,1)
(52,23,1)
(0,35,1)
(44,52,1)
(6,59,1)
(12,52,1)
(37,46,1)
(42,10,1)
(8,52,1)
(32,53,1)
(58,12,1)
(40,43,1)
(49,20,1)
(44,31,1)
(31,32,1)
(51,7,1)
(46,25,1)
(20,2,1)
(56,0,1)
(46,31,1)
(23,17,1)
(51,43,1)
(34,36,1)
(32,43,1)
(10,55,1)
(3,21,1)
(27,41,1)
(39,10,1)
(46,16,1)
(46,52,1)
(8,39,1)
(35,25,1)
(7,29,1)
(25,27,1)
(10,52,1)
(8,31,1)
(33,46,1)
(38,8,1)
(21,34,1)
(8,25,1)
(2,31,1)
(26,12,1)
(44,25,1)
(2,25,1)
(17,35,1)
(6,49,1)
(2,60,1)
(13,44,1)
(43,56,1)
(44,58,1)
(29,40,1)
(34,51,1)
(53,19,1)
(7,35,2)
(42,10,2)
(13,12,2)
(53,34,2)
(56,35,2)
(8,10,2)
(36,35,2)
(37,10,2)
(20,12,2)
(58,12,2)
(37,46,2)
(10,12,2)
(49,12,2)
(2,31,2)
(44,52,2)
(8,52,2)
(2,52,2)
(59,10,2)
(16,10,2)
(51,35,2)
(38,10,2)
(10,52,2)
(31,34,2)
(34,51,2)
(46,10,2)
(21,34,2)
(43,35,2)
(31,32,2)
(2,12,2)
(39,10,2)
(17,35,2)
(10,25,2)
(26,12,2)
(46,52,2)
(29,35,2)
(32,43,2)
(44,12,2)
(51,43,2)
(40,35,2)
(32,34,2)
(60,12,2)
(55,12,2)
(44,31,2)
(34,35,2)
(49,2,2)
(19,34,2)
(3,34,2)
(52,35,2)
(23,35,2)
(0,35,2)
(46,31,2)
(2,25,2)
(33,10,2)
(8,31,2)
(10,31,2)
(46,25,2)
(8,25,2)
(44,25,2)
-----------------------------------
(0,inputBuffer)
(1,if(globalReturnsTrueOrFalse()
(2,result = data)
(3,printLine("fgets()
(4,)
(5,if (data < INT_MAX)
(6,RET)
(7,stdin)
(8,++data)
(9,result)
(10,data < INT_MAX)
(11,data)
(12,globalReturnsTrueOrFalse()
(13,result)
(14,inputBuffer)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,data)
(17,data)
(18,)
(19,data)
(20,result)
(21,"fgets()
(22,)
(23,2)
(24,)
(25,data = 0)
(26,data)
(27,0)
(28,)
(29,CHAR_ARRAY_SIZE)
(30,)
(31,data = atoi(inputBuffer)
(32,atoi(inputBuffer)
(33,result)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,globalReturnsTrueOrFalse()
(36,NULL)
(37,printIntLine(result)
(38,result)
(39,data)
(40,inputBuffer)
(41,data)
(42,"data value is too large to perform arithmetic safely.")
(43,inputBuffer[CHAR_ARRAY_SIZE] = "")
(44,++data)
(45,if(globalReturnsTrueOrFalse()
(46,result = data)
(47,result)
(48,)
(49,printIntLine(result)
(50,)
(51,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(52,data = 2)
(53,inputBuffer)
(54,)
(55,INT_MAX)
(56,"")
(57,)
(58,data)
(59,printLine("data value is too large to perform arithmetic safely.")
(60,data)
(61,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^