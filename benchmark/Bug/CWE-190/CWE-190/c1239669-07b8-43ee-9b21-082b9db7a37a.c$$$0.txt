-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_03_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,25,0)
(16,3,0)
(5,17,0)
(28,9,0)
(10,12,0)
(18,21,0)
(23,17,0)
(13,20,0)
(12,10,0)
(3,7,0)
(21,29,0)
(8,10,0)
(1,12,0)
(26,25,0)
(0,7,0)
(22,2,0)
(25,21,0)
(20,3,0)
(27,9,0)
(6,7,0)
(2,21,0)
(25,3,0)
(14,3,0)
(12,3,0)
(10,4,0)
(19,7,0)
(20,21,0)
(2,25,0)
(11,10,0)
(20,13,1)
(17,23,1)
(25,3,1)
(27,28,1)
(24,17,1)
(12,1,1)
(13,17,1)
(11,9,1)
(12,3,1)
(14,16,1)
(8,11,1)
(20,3,1)
(26,15,1)
(9,27,1)
(23,5,1)
(28,3,1)
(10,12,1)
(1,8,1)
(5,9,1)
(24,2,1)
(5,10,1)
(25,26,1)
(15,20,1)
(3,14,1)
(22,25,1)
(2,25,1)
(2,22,1)
(25,17,2)
(26,17,2)
(22,17,2)
(1,9,2)
(11,9,2)
(12,3,2)
(2,17,2)
(8,9,2)
(10,12,2)
(25,3,2)
(13,17,2)
(12,9,2)
(20,17,2)
(20,3,2)
(15,17,2)
(2,25,2)
(10,9,2)
-----------------------------------
(0,if(5==5)
(1,data)
(2,printIntLine(result)
(3,data = 0)
(4,)
(5,5)
(6,if(5==5)
(7,)
(8,"%d")
(9,5==5)
(10,fscanf(stdin, "%d", &data)
(11,stdin)
(12,&data)
(13,data)
(14,0)
(15,result)
(16,data)
(17,5==5)
(18,result)
(19,data)
(20,++data)
(21,)
(22,result)
(23,5)
(24,RET)
(25,result = data)
(26,data)
(27,5)
(28,5)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^