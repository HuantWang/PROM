-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_07_bad()
{
    unsigned int data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_07_bad(){    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_07_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_07_bad
{    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(13,7,0)
(24,2,0)
(18,21,0)
(0,7,0)
(6,11,0)
(12,23,0)
(17,2,0)
(30,17,0)
(27,28,0)
(20,7,0)
(0,11,0)
(29,0,0)
(3,11,0)
(25,23,0)
(7,31,0)
(17,29,0)
(22,7,0)
(8,0,0)
(0,29,0)
(10,0,0)
(13,11,0)
(29,2,0)
(9,29,0)
(5,28,0)
(14,16,0)
(19,13,0)
(15,16,0)
(11,16,0)
(26,13,0)
(4,16,0)
(8,10,1)
(0,7,1)
(1,23,1)
(26,23,1)
(25,7,1)
(27,11,1)
(22,28,1)
(11,3,1)
(23,12,1)
(30,29,1)
(3,6,1)
(1,13,1)
(7,20,1)
(13,7,1)
(12,25,1)
(19,26,1)
(25,28,1)
(5,27,1)
(17,29,1)
(17,30,1)
(13,11,1)
(1,17,1)
(20,22,1)
(29,0,1)
(13,19,1)
(0,8,1)
(9,13,1)
(0,11,1)
(28,5,1)
(10,9,1)
(22,28,2)
(13,11,2)
(13,23,2)
(19,23,2)
(20,28,2)
(0,7,2)
(29,13,2)
(0,11,2)
(17,13,2)
(26,23,2)
(29,0,2)
(10,13,2)
(9,13,2)
(8,13,2)
(13,7,2)
(7,28,2)
(0,13,2)
(17,29,2)
(30,13,2)
-----------------------------------
(0,data * 2)
(1,RET)
(2,)
(3,0)
(4,if(staticFive==5)
(5,5)
(6,data)
(7,data = UINT_MAX)
(8,2)
(9,result)
(10,data)
(11,data = 0)
(12,5)
(13,data > 0)
(14,data)
(15,if(staticFive==5)
(16,)
(17,printUnsignedLine(result)
(18,if(data > 0)
(19,0)
(20,UINT_MAX)
(21,)
(22,data)
(23,staticFive==5)
(24,result)
(25,staticFive)
(26,data)
(27,staticFive)
(28,staticFive==5)
(29,result = data * 2)
(30,result)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^