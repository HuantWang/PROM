-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_add_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int64_t result = data + 1;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,29,33,34,35,37,40,45,47,51,52,56,58,59,60,64,65,66
-----computeFrom-----
13,14
13,15
23,24
23,25
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_add_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_add_15_bad()
CWE190_Integer_Overflow__int64_t_max_add_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(0,11,0)
(8,23,0)
(4,23,0)
(24,20,0)
(28,3,0)
(12,17,0)
(27,20,0)
(32,23,0)
(3,15,0)
(15,23,0)
(2,0,0)
(31,1,0)
(25,23,0)
(30,20,0)
(5,17,0)
(16,33,0)
(14,20,0)
(7,11,0)
(3,17,0)
(9,11,0)
(26,33,0)
(18,11,0)
(17,33,0)
(33,11,0)
(17,3,0)
(1,3,0)
(10,23,0)
(21,15,0)
(13,10,0)
(1,15,0)
(22,11,0)
(31,3,1)
(33,26,1)
(1,3,1)
(28,19,1)
(2,6,1)
(26,16,1)
(32,10,1)
(16,6,1)
(0,2,1)
(29,4,1)
(22,33,1)
(5,28,1)
(13,19,1)
(10,13,1)
(1,31,1)
(7,0,1)
(19,22,1)
(17,12,1)
(3,17,1)
(12,5,1)
(29,32,1)
(17,33,1)
(4,1,1)
(19,7,1)
(6,30,1)
(26,6,2)
(17,19,2)
(2,6,2)
(28,19,2)
(13,19,2)
(0,6,2)
(5,19,2)
(7,6,2)
(3,19,2)
(22,6,2)
(31,19,2)
(32,19,2)
(10,19,2)
(4,19,2)
(3,17,2)
(17,33,2)
(1,3,2)
(33,6,2)
(1,19,2)
(12,19,2)
(16,6,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,printLongLongLine(result)
(2,"Benign, fixed string")
(3,result = data + 1)
(4,break;)
(5,data)
(6,6)
(7,break;)
(8,default:)
(9,default:)
(10,printLine("Benign, fixed string")
(11,)
(12,1)
(13,"Benign, fixed string")
(14,data)
(15,)
(16,data)
(17,data + 1)
(18,case 6:)
(19,7)
(20,)
(21,result)
(22,break;)
(23,)
(24,switch(6)
(25,case 7:)
(26,LLONG_MAX)
(27,switch(7)
(28,result)
(29,RET)
(30,L)
(31,result)
(32,break;)
(33,data = LLONG_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^