-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,49,50,54,56
-----computeFrom-----
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__int_fgets_multiply_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,17,0)
(25,6,0)
(3,9,0)
(7,4,0)
(22,3,0)
(15,4,0)
(4,11,0)
(2,1,0)
(8,2,0)
(0,1,0)
(1,6,0)
(23,9,0)
(11,6,0)
(24,9,0)
(9,23,0)
(1,2,0)
(5,2,0)
(9,17,0)
(10,6,0)
(0,11,0)
(11,0,0)
(23,11,0)
(19,0,0)
(18,1,0)
(26,11,0)
(20,6,0)
(3,17,0)
(13,23,0)
(2,21,0)
(14,23,0)
(2,8,0)
(12,4,1)
(9,23,1)
(24,4,1)
(4,7,1)
(2,8,1)
(15,11,1)
(14,13,1)
(12,3,1)
(7,15,1)
(23,14,1)
(22,9,1)
(11,0,1)
(13,24,1)
(5,18,1)
(3,9,1)
(1,2,1)
(3,22,1)
(2,21,1)
(2,5,1)
(19,26,1)
(0,1,1)
(0,19,1)
(23,11,1)
(4,11,1)
(26,1,1)
(0,1,2)
(9,4,2)
(13,4,2)
(3,9,2)
(9,23,2)
(14,4,2)
(11,0,2)
(2,8,2)
(2,21,2)
(23,11,2)
(23,4,2)
(22,4,2)
(4,11,2)
(24,4,2)
(1,2,2)
(3,4,2)
-----------------------------------
(0,*dataPtr)
(1,* dataPtr = (int *)
(2,(int *)
(3,printIntLine(result)
(4,data > 0)
(5,dataVoidPtr)
(6,)
(7,0)
(8,int *)
(9,result = data * 2)
(10,if(data > 0)
(11,data = (*dataPtr)
(12,RET)
(13,data)
(14,2)
(15,data)
(16,result)
(17,)
(18,dataPtr)
(19,dataPtr)
(20,dataPtr)
(21,void * dataVoidPtr)
(22,result)
(23,data * 2)
(24,result)
(25,data)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^