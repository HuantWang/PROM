-----label-----
1
-----code-----
static int badSource(int data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
50,51
51,52
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,43,48,49,52
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
static int
badSource(int data)
badSource
int data
int
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(23,0,0)
(15,14,0)
(21,5,0)
(0,14,0)
(5,18,0)
(11,14,0)
(7,8,0)
(10,19,0)
(6,0,0)
(8,12,0)
(4,0,0)
(11,24,0)
(14,19,0)
(24,20,0)
(2,23,0)
(1,11,0)
(3,24,0)
(16,8,0)
(17,19,0)
(19,12,0)
(24,11,0)
(8,9,0)
(8,24,0)
(22,0,0)
(0,23,0)
(24,9,0)
(13,14,0)
(6,14,1)
(13,15,1)
(5,21,1)
(22,6,1)
(16,24,1)
(3,23,1)
(1,3,1)
(2,0,1)
(0,4,1)
(23,0,1)
(8,9,1)
(11,14,1)
(24,9,1)
(8,16,1)
(21,23,1)
(14,13,1)
(4,22,1)
(24,11,1)
(7,8,1)
(16,5,1)
(8,24,1)
(0,14,1)
(11,1,1)
(23,2,1)
(7,8,2)
(5,23,2)
(21,23,2)
(11,14,2)
(8,9,2)
(24,23,2)
(11,23,2)
(23,0,2)
(3,23,2)
(1,23,2)
(8,24,2)
(24,9,2)
(0,14,2)
(24,11,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,inputBuffer)
(2,NULL)
(3,data)
(4,stdin)
(5,printLine("fgets()
(6,inputBuffer)
(7,RET)
(8,return data;)
(9,int data)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,atoi(inputBuffer)
(12,)
(13,"")
(14,inputBuffer[CHAR_ARRAY_SIZE] = "")
(15,inputBuffer)
(16,data)
(17,inputBuffer)
(18,)
(19,)
(20,)
(21,"fgets()
(22,CHAR_ARRAY_SIZE)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,data = atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^