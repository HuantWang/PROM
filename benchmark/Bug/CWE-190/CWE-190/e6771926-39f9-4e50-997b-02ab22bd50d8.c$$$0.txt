-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_08_bad()
CWE190_Integer_Overflow__int_fscanf_square_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,13,0)
(24,10,0)
(6,3,0)
(22,20,0)
(11,25,0)
(20,2,0)
(1,11,0)
(9,6,0)
(9,10,0)
(25,11,0)
(10,6,0)
(19,13,0)
(11,20,0)
(23,20,0)
(8,25,0)
(15,6,0)
(18,2,0)
(13,10,0)
(12,25,0)
(10,13,0)
(7,2,0)
(13,20,0)
(16,9,0)
(17,2,0)
(25,5,0)
(9,10,1)
(9,16,1)
(0,9,1)
(0,21,1)
(25,11,1)
(21,14,1)
(19,24,1)
(24,21,1)
(14,20,1)
(11,20,1)
(12,14,1)
(21,25,1)
(13,4,1)
(4,19,1)
(16,10,1)
(13,20,1)
(22,23,1)
(10,13,1)
(20,22,1)
(1,8,1)
(8,12,1)
(11,1,1)
(1,14,2)
(4,21,2)
(9,10,2)
(13,20,2)
(24,21,2)
(16,21,2)
(13,21,2)
(11,14,2)
(25,11,2)
(10,13,2)
(25,14,2)
(11,20,2)
(10,21,2)
(9,21,2)
(12,14,2)
(19,21,2)
(8,14,2)
-----------------------------------
(0,RET)
(1,data)
(2,)
(3,)
(4,data)
(5,)
(6,)
(7,if(staticReturnsTrue()
(8,"%d")
(9,printIntLine(result)
(10,result = data * data)
(11,&data)
(12,stdin)
(13,data * data)
(14,staticReturnsTrue()
(15,result)
(16,result)
(17,if(staticReturnsTrue()
(18,data)
(19,data)
(20,data = 0)
(21,staticReturnsTrue()
(22,0)
(23,data)
(24,result)
(25,fscanf(stdin, "%d", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^