-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_06_bad()
CWE190_Integer_Overflow__char_max_add_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,24,0)
(22,18,0)
(28,18,0)
(14,5,0)
(28,4,0)
(15,24,0)
(16,19,0)
(18,5,0)
(3,17,0)
(18,28,0)
(8,4,0)
(4,20,0)
(10,25,0)
(13,18,0)
(2,4,0)
(21,19,0)
(2,28,0)
(5,19,0)
(18,24,0)
(11,5,0)
(26,25,0)
(27,19,0)
(1,28,0)
(12,17,0)
(24,0,0)
(6,2,0)
(10,5,1)
(2,28,1)
(13,1,1)
(17,3,1)
(2,6,1)
(18,22,1)
(9,17,1)
(9,2,1)
(3,12,1)
(22,13,1)
(1,17,1)
(26,10,1)
(5,14,1)
(15,25,1)
(6,28,1)
(18,5,1)
(18,24,1)
(24,7,1)
(25,26,1)
(28,18,1)
(14,11,1)
(7,15,1)
(12,25,1)
(12,24,1)
(24,25,2)
(2,28,2)
(28,17,2)
(2,17,2)
(18,24,2)
(13,17,2)
(18,17,2)
(7,25,2)
(1,17,2)
(15,25,2)
(22,17,2)
(18,5,2)
(6,17,2)
(28,18,2)
-----------------------------------
(0,)
(1,result)
(2,printHexCharLine(result)
(3,5)
(4,)
(5,data = ' ')
(6,result)
(7,CHAR_MAX)
(8,result)
(9,RET)
(10,STATIC_CONST_FIVE)
(11,data)
(12,STATIC_CONST_FIVE)
(13,data)
(14,' ')
(15,data)
(16,if(STATIC_CONST_FIVE==5)
(17,STATIC_CONST_FIVE==5)
(18,data + 1)
(19,)
(20,)
(21,data)
(22,1)
(23,data = \' \')
(24,data = CHAR_MAX)
(25,STATIC_CONST_FIVE==5)
(26,5)
(27,if(STATIC_CONST_FIVE==5)
(28,result = data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^