-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,66,70,72,76,77,81,83
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
63,64
63,65
74,75
74,76
-----guardedBy-----
65,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_17_bad()
CWE190_Integer_Overflow__char_rand_multiply_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,27,0)
(22,24,0)
(18,20,0)
(34,27,0)
(9,27,0)
(0,2,0)
(17,42,0)
(46,38,0)
(42,17,0)
(24,7,0)
(26,20,0)
(22,7,0)
(26,24,0)
(40,26,0)
(26,27,0)
(1,29,0)
(37,22,0)
(32,5,0)
(5,39,0)
(16,13,0)
(15,42,0)
(44,39,0)
(29,2,0)
(20,42,0)
(24,26,0)
(33,2,0)
(25,29,0)
(45,13,0)
(12,0,0)
(27,13,0)
(43,18,0)
(36,18,0)
(10,26,0)
(23,13,0)
(35,13,0)
(11,20,0)
(14,24,0)
(3,13,0)
(42,15,0)
(4,5,0)
(41,28,0)
(28,39,0)
(20,30,0)
(19,7,0)
(21,39,0)
(42,20,0)
(6,2,0)
(43,36,1)
(26,20,1)
(44,27,1)
(20,42,1)
(8,29,1)
(10,40,1)
(42,15,1)
(22,24,1)
(0,2,1)
(26,10,1)
(2,6,1)
(36,29,1)
(18,20,1)
(29,1,1)
(18,27,1)
(17,11,1)
(27,34,1)
(1,25,1)
(26,27,1)
(24,26,1)
(11,5,1)
(28,41,1)
(5,39,1)
(29,2,1)
(32,39,1)
(21,44,1)
(12,22,1)
(32,28,1)
(12,18,1)
(37,24,1)
(4,32,1)
(34,9,1)
(5,4,1)
(41,20,1)
(0,12,1)
(40,14,1)
(28,39,1)
(25,0,1)
(22,37,1)
(18,43,1)
(33,5,1)
(42,17,1)
(6,33,1)
(25,2,1)
(14,18,1)
(39,21,1)
(22,24,2)
(12,29,2)
(4,5,2)
(42,15,2)
(36,29,2)
(0,2,2)
(29,29,2)
(14,18,2)
(17,5,2)
(5,39,2)
(20,5,2)
(11,5,2)
(37,18,2)
(18,20,2)
(1,29,2)
(18,27,2)
(40,18,2)
(0,29,2)
(41,5,2)
(26,18,2)
(43,29,2)
(10,18,2)
(28,39,2)
(18,29,2)
(25,29,2)
(32,5,2)
(29,2,2)
(24,26,2)
(28,5,2)
(22,18,2)
(5,5,2)
(26,27,2)
(26,20,2)
(20,42,2)
(24,18,2)
(42,17,2)
(42,5,2)
-----------------------------------
(0,j++)
(1,1)
(2,j = 0)
(3,for(i = 0; i < 1; i++)
(4,1)
(5,i < 1)
(6,0)
(7,)
(8,RET)
(9,data)
(10,2)
(11,data)
(12,j)
(13,)
(14,result)
(15,char)
(16,i)
(17,RAND32()
(18,data > 0)
(19,result)
(20,data = (char)
(21,0)
(22,printHexCharLine(result)
(23,j)
(24,result = data * 2)
(25,j)
(26,data * 2)
(27,data = \' \')
(28,i++)
(29,j < 1)
(30,)
(31,data = ' ')
(32,i)
(33,j)
(34,' ')
(35,for(j = 0; j < 1; j++)
(36,data)
(37,result)
(38,)
(39,i = 0)
(40,data)
(41,i)
(42,(char)
(43,0)
(44,i)
(45,data)
(46,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^