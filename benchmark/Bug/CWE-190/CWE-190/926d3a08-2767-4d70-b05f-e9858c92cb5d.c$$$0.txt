-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_08_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,7,0)
(16,22,0)
(10,26,0)
(0,15,0)
(11,22,0)
(9,7,0)
(15,0,0)
(28,26,0)
(2,0,0)
(24,4,0)
(23,0,0)
(15,7,0)
(5,22,0)
(8,26,0)
(26,20,0)
(27,15,0)
(6,10,0)
(28,20,0)
(10,7,0)
(14,4,0)
(12,20,0)
(7,22,0)
(0,19,0)
(3,28,0)
(13,7,0)
(21,10,0)
(17,1,0)
(26,10,0)
(7,9,1)
(14,24,1)
(29,7,1)
(15,27,1)
(4,14,1)
(18,0,1)
(28,26,1)
(25,28,1)
(9,13,1)
(28,3,1)
(8,4,1)
(15,7,1)
(10,21,1)
(0,15,1)
(23,29,1)
(2,23,1)
(10,7,1)
(25,4,1)
(24,18,1)
(26,10,1)
(18,29,1)
(25,18,1)
(27,2,1)
(3,26,1)
(4,7,1)
(21,6,1)
(6,8,1)
(2,29,2)
(23,29,2)
(15,7,2)
(10,4,2)
(24,18,2)
(28,26,2)
(26,4,2)
(3,4,2)
(8,4,2)
(6,4,2)
(21,4,2)
(14,18,2)
(4,7,2)
(10,7,2)
(28,4,2)
(0,29,2)
(4,18,2)
(15,29,2)
(26,10,2)
(0,15,2)
(27,29,2)
-----------------------------------
(0,fscanf (stdin, "%hd", &data)
(1,)
(2,"%hd")
(3,result)
(4,data > 0)
(5,if(staticReturnsTrue()
(6,data)
(7,data = 0)
(8,result)
(9,0)
(10,data * 2)
(11,data)
(12,result)
(13,data)
(14,0)
(15,&data)
(16,if(staticReturnsTrue()
(17,if(data > 0)
(18,staticReturnsTrue()
(19,)
(20,)
(21,2)
(22,)
(23,stdin)
(24,data)
(25,RET)
(26,result = data * 2)
(27,data)
(28,printIntLine(result)
(29,staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^