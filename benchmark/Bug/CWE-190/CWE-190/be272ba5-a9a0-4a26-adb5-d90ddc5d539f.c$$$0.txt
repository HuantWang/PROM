-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,38,42,44,48,49,53,55,56
-----computeFrom-----
12,13
12,14
20,21
20,22
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_rand_multiply_16_bad()
CWE190_Integer_Overflow__char_rand_multiply_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(2,28,0)
(25,16,0)
(14,22,0)
(29,30,0)
(6,28,0)
(15,23,0)
(3,15,0)
(22,15,0)
(27,20,0)
(7,26,0)
(12,2,0)
(14,2,0)
(17,28,0)
(10,26,0)
(32,22,0)
(31,28,0)
(15,22,0)
(23,15,0)
(4,7,0)
(32,2,0)
(7,32,0)
(32,7,0)
(11,32,0)
(8,14,0)
(22,20,0)
(16,26,0)
(19,30,0)
(18,14,0)
(5,22,0)
(15,3,0)
(16,7,0)
(21,32,0)
(1,2,0)
(24,27,1)
(9,19,1)
(15,3,1)
(5,0,1)
(12,1,1)
(32,22,1)
(4,14,1)
(14,22,1)
(16,7,1)
(24,0,1)
(32,21,1)
(22,15,1)
(16,25,1)
(15,23,1)
(9,24,1)
(18,8,1)
(19,14,1)
(8,24,1)
(3,5,1)
(27,22,1)
(2,12,1)
(32,2,1)
(19,16,1)
(7,32,1)
(21,11,1)
(14,2,1)
(0,2,1)
(25,7,1)
(14,18,1)
(11,4,1)
(15,3,2)
(7,14,2)
(3,0,2)
(8,24,2)
(32,14,2)
(15,23,2)
(22,15,2)
(7,32,2)
(21,14,2)
(5,0,2)
(18,24,2)
(14,24,2)
(15,0,2)
(14,2,2)
(32,2,2)
(14,22,2)
(27,0,2)
(11,14,2)
(19,24,2)
(25,14,2)
(22,0,2)
(16,14,2)
(4,14,2)
(32,22,2)
(16,7,2)
-----------------------------------
(0,1)
(1,data)
(2,data = ' ')
(3,RAND32()
(4,result)
(5,data)
(6,data)
(7,result = data * 2)
(8,data)
(9,RET)
(10,result)
(11,data)
(12,' ')
(13,data = \' \')
(14,data > 0)
(15,(char)
(16,printHexCharLine(result)
(17,while(1)
(18,0)
(19,break;)
(20,)
(21,2)
(22,data = (char)
(23,char)
(24,1)
(25,result)
(26,)
(27,break;)
(28,)
(29,if(data > 0)
(30,)
(31,while(1)
(32,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^