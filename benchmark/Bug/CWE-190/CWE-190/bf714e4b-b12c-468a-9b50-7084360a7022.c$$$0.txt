-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,48,49,52,53,56,61,62,66,68,72,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
46,47
46,48
50,51
50,52
59,60
59,61
70,71
70,72
-----guardedBy-----
61,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_17_bad()
CWE190_Integer_Overflow__int_rand_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,18,0)
(10,43,0)
(5,27,0)
(27,15,0)
(35,42,0)
(6,7,0)
(18,7,0)
(37,27,0)
(30,2,0)
(25,18,0)
(17,43,0)
(24,6,0)
(11,21,0)
(19,29,0)
(29,14,0)
(36,13,0)
(23,33,0)
(34,43,0)
(39,3,0)
(27,37,0)
(31,34,0)
(28,34,0)
(29,13,0)
(12,43,0)
(41,4,0)
(1,7,0)
(22,14,0)
(32,7,0)
(2,14,0)
(42,34,0)
(38,21,0)
(9,33,0)
(21,33,0)
(26,43,0)
(13,34,0)
(40,13,0)
(13,27,0)
(16,42,0)
(2,29,0)
(0,43,0)
(4,33,0)
(42,27,0)
(13,29,0)
(19,42,1)
(11,38,1)
(21,11,1)
(25,6,1)
(2,29,1)
(18,20,1)
(8,18,1)
(7,32,1)
(40,36,1)
(23,9,1)
(13,27,1)
(27,37,1)
(5,21,1)
(4,33,1)
(36,19,1)
(38,4,1)
(41,27,1)
(1,21,1)
(4,41,1)
(32,1,1)
(16,35,1)
(37,5,1)
(42,16,1)
(28,31,1)
(29,13,1)
(30,29,1)
(6,7,1)
(13,34,1)
(21,33,1)
(2,30,1)
(20,25,1)
(35,18,1)
(13,40,1)
(42,27,1)
(24,2,1)
(33,23,1)
(18,7,1)
(6,24,1)
(25,7,1)
(34,28,1)
(38,33,1)
(42,34,1)
(9,34,1)
(24,42,1)
(40,42,2)
(13,42,2)
(2,42,2)
(24,18,2)
(38,21,2)
(27,21,2)
(42,27,2)
(29,42,2)
(4,33,2)
(4,21,2)
(18,18,2)
(35,18,2)
(11,21,2)
(18,7,2)
(30,42,2)
(21,21,2)
(21,33,2)
(2,29,2)
(19,42,2)
(36,42,2)
(13,34,2)
(5,21,2)
(29,13,2)
(13,27,2)
(41,21,2)
(20,18,2)
(25,18,2)
(6,7,2)
(42,34,2)
(6,18,2)
(37,21,2)
(27,37,2)
(16,18,2)
(42,18,2)
-----------------------------------
(0,data)
(1,j)
(2,printIntLine(result)
(3,)
(4,i++)
(5,data)
(6,j++)
(7,j = 0)
(8,RET)
(9,i)
(10,i)
(11,1)
(12,j)
(13,data * 2)
(14,)
(15,)
(16,0)
(17,for(i = 0; i < 1; i++)
(18,j < 1)
(19,result)
(20,1)
(21,i < 1)
(22,result)
(23,0)
(24,j)
(25,j)
(26,for(j = 0; j < 1; j++)
(27,data = RAND32()
(28,0)
(29,result = data * 2)
(30,result)
(31,data)
(32,0)
(33,i = 0)
(34,data = 0)
(35,data)
(36,data)
(37,RAND32()
(38,i)
(39,if(data > 0)
(40,2)
(41,i)
(42,data > 0)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^