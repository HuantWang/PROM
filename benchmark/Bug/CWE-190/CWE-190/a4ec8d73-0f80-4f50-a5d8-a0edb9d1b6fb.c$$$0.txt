-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_03_bad()
CWE190_Integer_Overflow__short_max_multiply_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,17,0)
(2,10,0)
(17,29,0)
(23,11,0)
(10,24,0)
(14,31,0)
(26,24,0)
(28,30,0)
(1,3,0)
(5,9,0)
(18,29,0)
(16,11,0)
(3,24,0)
(31,30,0)
(12,10,0)
(28,31,0)
(27,17,0)
(3,31,0)
(31,3,0)
(13,29,0)
(6,30,0)
(10,17,0)
(7,24,0)
(25,29,0)
(8,15,0)
(19,9,0)
(0,28,0)
(4,3,0)
(21,17,0)
(24,20,0)
(21,27,1)
(4,1,1)
(22,9,1)
(26,11,1)
(1,14,1)
(31,3,1)
(10,24,1)
(22,10,1)
(28,31,1)
(3,24,1)
(19,11,1)
(16,23,1)
(28,0,1)
(3,17,1)
(9,5,1)
(10,17,1)
(5,19,1)
(17,21,1)
(7,26,1)
(12,9,1)
(23,17,1)
(22,28,1)
(19,24,1)
(10,2,1)
(2,12,1)
(3,4,1)
(24,7,1)
(14,10,1)
(11,16,1)
(0,31,1)
(10,17,2)
(2,9,2)
(12,9,2)
(4,10,2)
(7,11,2)
(24,11,2)
(3,17,2)
(28,10,2)
(1,10,2)
(31,10,2)
(0,10,2)
(26,11,2)
(28,31,2)
(3,24,2)
(14,10,2)
(31,3,2)
(10,9,2)
(10,24,2)
(3,10,2)
-----------------------------------
(0,result)
(1,data)
(2,0)
(3,data * 2)
(4,2)
(5,5)
(6,result)
(7,SHRT_MAX)
(8,if(data > 0)
(9,5==5)
(10,data > 0)
(11,5==5)
(12,data)
(13,if(5==5)
(14,result)
(15,)
(16,5)
(17,data = 0)
(18,if(5==5)
(19,5)
(20,)
(21,0)
(22,RET)
(23,5)
(24,data = SHRT_MAX)
(25,data)
(26,data)
(27,data)
(28,printIntLine(result)
(29,)
(30,)
(31,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^