-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,26,0)
(4,23,0)
(15,9,0)
(28,14,0)
(12,9,0)
(20,16,0)
(29,13,0)
(10,28,0)
(27,8,0)
(7,26,0)
(22,8,0)
(3,29,0)
(23,13,0)
(29,23,0)
(5,17,0)
(14,26,0)
(11,17,0)
(6,16,0)
(8,23,0)
(14,28,0)
(8,26,0)
(18,13,0)
(23,8,0)
(21,28,0)
(1,16,0)
(26,16,0)
(28,24,0)
(2,14,0)
(13,19,0)
(5,11,1)
(12,26,1)
(27,4,1)
(22,27,1)
(11,9,1)
(14,26,1)
(14,2,1)
(26,7,1)
(4,17,1)
(29,3,1)
(8,26,1)
(3,23,1)
(23,8,1)
(9,15,1)
(10,21,1)
(8,22,1)
(28,14,1)
(17,5,1)
(25,17,1)
(15,12,1)
(29,23,1)
(2,10,1)
(7,0,1)
(21,9,1)
(25,29,1)
(11,28,1)
(28,14,2)
(8,17,2)
(23,8,2)
(8,26,2)
(27,17,2)
(14,26,2)
(29,23,2)
(21,9,2)
(3,17,2)
(22,17,2)
(4,17,2)
(23,17,2)
(2,9,2)
(10,9,2)
(29,17,2)
(14,9,2)
(28,9,2)
-----------------------------------
(0,data)
(1,if(STATIC_CONST_FIVE==5)
(2,data)
(3,result)
(4,result)
(5,5)
(6,data)
(7,0)
(8,data * data)
(9,STATIC_CONST_FIVE==5)
(10,"%u")
(11,STATIC_CONST_FIVE)
(12,STATIC_CONST_FIVE)
(13,)
(14,&data)
(15,5)
(16,)
(17,STATIC_CONST_FIVE==5)
(18,result)
(19,)
(20,if(STATIC_CONST_FIVE==5)
(21,stdin)
(22,data)
(23,result = data * data)
(24,)
(25,RET)
(26,data = 0)
(27,data)
(28,fscanf (stdin, "%u", &data)
(29,printUnsignedLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^