-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_17_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,25,0)
(28,12,0)
(24,7,0)
(17,19,0)
(10,22,0)
(7,4,0)
(23,20,0)
(35,22,0)
(3,27,0)
(31,9,0)
(8,41,0)
(9,19,0)
(30,1,0)
(27,13,0)
(14,27,0)
(6,13,0)
(2,25,0)
(36,19,0)
(40,9,0)
(16,21,0)
(38,30,0)
(7,24,0)
(34,7,0)
(37,7,0)
(39,25,0)
(41,13,0)
(21,27,0)
(18,13,0)
(29,24,0)
(32,25,0)
(5,22,0)
(20,22,0)
(0,5,0)
(21,30,0)
(41,30,0)
(12,19,0)
(11,20,0)
(24,13,0)
(15,25,0)
(26,25,0)
(27,30,0)
(20,22,1)
(21,16,1)
(18,6,1)
(5,22,1)
(34,37,1)
(0,21,1)
(31,40,1)
(40,19,1)
(28,7,1)
(24,13,1)
(3,14,1)
(29,34,1)
(27,3,1)
(7,24,1)
(11,23,1)
(10,35,1)
(23,5,1)
(33,20,1)
(12,19,1)
(22,10,1)
(36,13,1)
(24,29,1)
(17,36,1)
(37,9,1)
(41,8,1)
(14,41,1)
(20,11,1)
(8,20,1)
(5,0,1)
(35,9,1)
(23,22,1)
(41,13,1)
(12,28,1)
(40,12,1)
(9,31,1)
(9,19,1)
(13,18,1)
(27,13,1)
(16,27,1)
(21,27,1)
(19,17,1)
(11,20,2)
(21,27,2)
(27,20,2)
(41,20,2)
(7,24,2)
(5,22,2)
(7,9,2)
(3,20,2)
(21,20,2)
(27,13,2)
(40,9,2)
(31,9,2)
(41,13,2)
(5,20,2)
(20,20,2)
(23,20,2)
(9,19,2)
(24,13,2)
(8,20,2)
(0,20,2)
(12,19,2)
(16,20,2)
(9,9,2)
(20,22,2)
(24,9,2)
(37,9,2)
(29,9,2)
(12,9,2)
(28,9,2)
(34,9,2)
(14,20,2)
-----------------------------------
(0,j)
(1,)
(2,j)
(3,data)
(4,)
(5,j++)
(6,data)
(7,fscanf (stdin, "%c", &data)
(8,data)
(9,i < 1)
(10,0)
(11,1)
(12,i++)
(13,data = \\\' \\\')
(14,result)
(15,for(j = 0; j < 1; j++)
(16,result)
(17,0)
(18,\\\' \\\')
(19,i = 0)
(20,j < 1)
(21,printHexCharLine(result)
(22,j = 0)
(23,j)
(24,&data)
(25,)
(26,data)
(27,result = data)
(28,i)
(29,data)
(30,)
(31,1)
(32,i)
(33,RET)
(34,"%c")
(35,j)
(36,i)
(37,stdin)
(38,result)
(39,for(i = 0; i < 1; i++)
(40,i)
(41,data++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^