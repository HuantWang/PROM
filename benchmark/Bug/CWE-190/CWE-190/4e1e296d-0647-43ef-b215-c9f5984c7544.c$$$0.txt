-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_06_bad()
CWE190_Integer_Overflow__char_rand_add_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(26,13,0)
(29,13,0)
(15,12,0)
(30,7,0)
(16,30,0)
(23,12,0)
(28,12,0)
(4,22,0)
(9,25,0)
(5,22,0)
(14,22,0)
(26,23,0)
(7,30,0)
(13,6,0)
(30,20,0)
(23,13,0)
(0,26,0)
(12,23,0)
(2,20,0)
(20,30,0)
(12,5,0)
(18,25,0)
(11,22,0)
(19,3,0)
(24,3,0)
(27,23,0)
(20,17,0)
(12,20,0)
(30,16,0)
(10,5,0)
(1,5,0)
(2,3,1)
(12,15,1)
(18,9,1)
(26,23,1)
(26,0,1)
(9,20,1)
(24,19,1)
(1,10,1)
(21,26,1)
(15,28,1)
(30,7,1)
(27,25,1)
(30,16,1)
(20,30,1)
(3,24,1)
(25,18,1)
(21,25,1)
(5,1,1)
(12,20,1)
(19,5,1)
(0,23,1)
(28,27,1)
(23,12,1)
(12,5,1)
(7,2,1)
(9,3,1)
(26,23,2)
(30,16,2)
(12,25,2)
(23,25,2)
(27,25,2)
(2,3,2)
(20,3,2)
(26,25,2)
(20,30,2)
(12,5,2)
(0,25,2)
(23,12,2)
(12,20,2)
(7,3,2)
(28,25,2)
(15,25,2)
(30,7,2)
(30,3,2)
-----------------------------------
(0,result)
(1,' ')
(2,data)
(3,STATIC_CONST_FIVE==5)
(4,if(STATIC_CONST_FIVE==5)
(5,data = \' \')
(6,)
(7,RAND32()
(8,data = ' ')
(9,STATIC_CONST_FIVE)
(10,data)
(11,data)
(12,data + 1)
(13,)
(14,if(STATIC_CONST_FIVE==5)
(15,1)
(16,char)
(17,)
(18,5)
(19,STATIC_CONST_FIVE)
(20,data = (char)
(21,RET)
(22,)
(23,result = data + 1)
(24,5)
(25,STATIC_CONST_FIVE==5)
(26,printHexCharLine(result)
(27,result)
(28,data)
(29,result)
(30,(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^