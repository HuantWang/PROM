-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_add_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,53,57,59,64,66,70,72,76,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
62,63
62,64
74,75
74,76
-----guardedBy-----
64,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_add_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_add_12_bad()
CWE190_Integer_Overflow__unsigned_int_rand_add_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(24,16,0)
(9,38,0)
(45,9,0)
(28,12,0)
(19,43,0)
(1,7,0)
(32,17,0)
(8,43,0)
(4,33,0)
(17,5,0)
(39,32,0)
(30,44,0)
(36,3,0)
(37,16,0)
(7,17,0)
(34,7,0)
(18,12,0)
(35,32,0)
(16,17,0)
(26,23,0)
(43,8,0)
(33,16,0)
(1,44,0)
(12,23,0)
(21,30,0)
(20,22,0)
(7,1,0)
(32,25,0)
(22,33,0)
(10,44,0)
(6,36,0)
(7,25,0)
(33,9,0)
(43,17,0)
(0,25,0)
(43,19,0)
(31,23,0)
(22,9,0)
(46,1,0)
(16,33,0)
(40,23,0)
(16,25,0)
(25,2,0)
(15,25,0)
(17,43,0)
(30,1,0)
(41,29,0)
(13,7,0)
(11,17,0)
(21,1,1)
(7,13,1)
(16,17,1)
(11,27,1)
(42,17,1)
(24,37,1)
(37,4,1)
(32,17,1)
(20,33,1)
(18,28,1)
(17,43,1)
(30,21,1)
(16,25,1)
(46,32,1)
(14,30,1)
(22,33,1)
(42,25,1)
(4,42,1)
(14,36,1)
(33,16,1)
(39,42,1)
(13,34,1)
(30,1,1)
(35,39,1)
(25,0,1)
(43,8,1)
(32,25,1)
(7,25,1)
(27,12,1)
(22,20,1)
(16,24,1)
(7,17,1)
(12,18,1)
(8,11,1)
(0,15,1)
(1,7,1)
(34,46,1)
(36,6,1)
(15,27,1)
(6,32,1)
(14,22,1)
(32,35,1)
(43,19,1)
(6,32,2)
(16,42,2)
(1,7,2)
(36,32,2)
(34,32,2)
(13,32,2)
(24,42,2)
(16,25,2)
(35,42,2)
(32,25,2)
(16,17,2)
(15,27,2)
(32,17,2)
(22,42,2)
(20,42,2)
(33,42,2)
(43,27,2)
(7,32,2)
(1,32,2)
(32,42,2)
(17,27,2)
(46,32,2)
(33,16,2)
(0,27,2)
(25,27,2)
(30,32,2)
(4,42,2)
(17,43,2)
(7,17,2)
(37,42,2)
(8,27,2)
(7,25,2)
(30,1,2)
(22,33,2)
(39,42,2)
(43,19,2)
(11,27,2)
(21,32,2)
(43,8,2)
-----------------------------------
(0,2)
(1,result = data + 1)
(2,)
(3,)
(4,result)
(5,)
(6,"data value is too large to perform arithmetic safely.")
(7,data + 1)
(8,RAND32()
(9,)
(10,result)
(11,data)
(12,data = 0)
(13,1)
(14,RET)
(15,data)
(16,data + 1)
(17,data = (unsigned int)
(18,0)
(19,unsigned int)
(20,result)
(21,result)
(22,printUnsignedLine(result)
(23,)
(24,1)
(25,data = 2)
(26,if(globalReturnsTrueOrFalse()
(27,globalReturnsTrueOrFalse()
(28,data)
(29,)
(30,printUnsignedLine(result)
(31,data)
(32,data < UINT_MAX)
(33,result = data + 1)
(34,data)
(35,UINT_MAX)
(36,printLine("data value is too large to perform arithmetic safely.")
(37,data)
(38,)
(39,data)
(40,if(globalReturnsTrueOrFalse()
(41,if (data < UINT_MAX)
(42,globalReturnsTrueOrFalse()
(43,(unsigned int)
(44,)
(45,result)
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^