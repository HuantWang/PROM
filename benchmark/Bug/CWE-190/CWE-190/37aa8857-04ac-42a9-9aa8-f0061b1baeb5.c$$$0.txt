-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_07_bad()
{
    int64_t data;
    data = 0LL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,39,41,45,47,51,53
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_07_bad(){    int64_t data;    data = 0LL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_07_bad()
CWE190_Integer_Overflow__int64_t_max_square_07_bad
{    int64_t data;    data = 0LL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(23,12,0)
(21,12,0)
(17,19,0)
(17,4,0)
(4,17,0)
(19,25,0)
(13,24,0)
(6,15,0)
(20,19,0)
(11,22,0)
(18,22,0)
(2,8,0)
(8,4,0)
(1,24,0)
(9,24,0)
(0,4,0)
(4,15,0)
(7,19,0)
(8,15,0)
(15,16,0)
(14,17,0)
(3,17,0)
(10,24,0)
(2,4,1)
(17,19,1)
(12,23,1)
(18,11,1)
(8,4,1)
(21,9,1)
(5,22,1)
(14,3,1)
(3,0,1)
(23,21,1)
(4,17,1)
(7,12,1)
(19,20,1)
(11,12,1)
(11,19,1)
(17,14,1)
(8,2,1)
(20,7,1)
(22,18,1)
(5,8,1)
(0,22,1)
(4,17,2)
(4,22,2)
(19,12,2)
(7,12,2)
(14,22,2)
(20,12,2)
(2,22,2)
(17,19,2)
(8,4,2)
(17,22,2)
(8,22,2)
(0,22,2)
(3,22,2)
-----------------------------------
(0,result)
(1,if(staticFive==5)
(2,result)
(3,data)
(4,result = data * data)
(5,RET)
(6,result)
(7,data)
(8,printLongLongLine(result)
(9,L)
(10,if(staticFive==5)
(11,staticFive)
(12,staticFive==5)
(13,data)
(14,data)
(15,)
(16,)
(17,data * data)
(18,5)
(19,data = LLONG_MAX)
(20,LLONG_MAX)
(21,staticFive)
(22,staticFive==5)
(23,5)
(24,)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^