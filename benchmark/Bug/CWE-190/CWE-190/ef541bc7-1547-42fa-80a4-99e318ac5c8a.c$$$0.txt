-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_13_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_13_bad(){    short data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_13_bad()
CWE190_Integer_Overflow__short_max_square_13_bad
{    short data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,18,0)
(18,0,0)
(15,0,0)
(7,3,0)
(8,14,0)
(10,0,0)
(27,3,0)
(16,7,0)
(17,14,0)
(15,12,0)
(0,12,0)
(9,15,0)
(12,6,0)
(1,7,0)
(26,23,0)
(4,19,0)
(5,3,0)
(0,18,0)
(2,12,0)
(22,23,0)
(25,18,0)
(23,24,0)
(18,23,0)
(13,19,0)
(18,7,0)
(21,3,0)
(22,14,1)
(11,25,1)
(18,11,1)
(25,10,1)
(23,26,1)
(19,13,1)
(18,7,1)
(0,18,1)
(17,8,1)
(20,15,1)
(14,17,1)
(16,1,1)
(26,22,1)
(4,23,1)
(18,23,1)
(7,16,1)
(10,19,1)
(15,0,1)
(4,14,1)
(13,4,1)
(9,0,1)
(15,9,1)
(8,7,1)
(20,19,1)
(10,19,2)
(23,14,2)
(15,19,2)
(0,18,2)
(22,14,2)
(18,19,2)
(9,19,2)
(26,14,2)
(18,7,2)
(0,19,2)
(25,19,2)
(18,23,2)
(15,0,2)
(11,19,2)
-----------------------------------
(0,result = data * data)
(1,data)
(2,result)
(3,)
(4,GLOBAL_CONST_FIVE)
(5,if(GLOBAL_CONST_FIVE==5)
(6,)
(7,data = 0)
(8,GLOBAL_CONST_FIVE)
(9,result)
(10,result)
(11,data)
(12,)
(13,5)
(14,GLOBAL_CONST_FIVE==5)
(15,printIntLine(result)
(16,0)
(17,5)
(18,data * data)
(19,GLOBAL_CONST_FIVE==5)
(20,RET)
(21,data)
(22,data)
(23,data = SHRT_MAX)
(24,)
(25,data)
(26,SHRT_MAX)
(27,if(GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^