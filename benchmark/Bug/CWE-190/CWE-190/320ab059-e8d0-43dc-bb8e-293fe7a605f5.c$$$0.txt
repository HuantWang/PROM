-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_13_bad()
CWE190_Integer_Overflow__char_max_square_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,8,0)
(4,10,0)
(7,4,0)
(18,12,0)
(4,7,0)
(22,26,0)
(8,26,0)
(8,7,0)
(3,12,0)
(11,7,0)
(21,4,0)
(5,14,0)
(17,10,0)
(1,14,0)
(28,23,0)
(14,6,0)
(19,4,0)
(20,27,0)
(4,14,0)
(10,23,0)
(15,27,0)
(16,10,0)
(13,23,0)
(26,24,0)
(9,23,0)
(7,26,0)
(4,21,1)
(14,1,1)
(18,27,1)
(15,10,1)
(18,14,1)
(5,27,1)
(21,19,1)
(2,7,1)
(7,4,1)
(0,12,1)
(8,7,1)
(19,11,1)
(10,17,1)
(8,2,1)
(3,18,1)
(20,15,1)
(11,12,1)
(17,16,1)
(4,10,1)
(1,5,1)
(12,3,1)
(4,14,1)
(0,8,1)
(27,20,1)
(7,12,2)
(8,12,2)
(1,27,2)
(21,12,2)
(5,27,2)
(4,14,2)
(11,12,2)
(4,10,2)
(14,27,2)
(8,7,2)
(4,12,2)
(7,4,2)
(2,12,2)
(19,12,2)
-----------------------------------
(0,RET)
(1,CHAR_MAX)
(2,result)
(3,5)
(4,data * data)
(5,data)
(6,)
(7,result = data * data)
(8,printHexCharLine(result)
(9,if(GLOBAL_CONST_FIVE==5)
(10,data = ' ')
(11,result)
(12,GLOBAL_CONST_FIVE==5)
(13,if(GLOBAL_CONST_FIVE==5)
(14,data = CHAR_MAX)
(15,GLOBAL_CONST_FIVE)
(16,data)
(17,' ')
(18,GLOBAL_CONST_FIVE)
(19,data)
(20,5)
(21,data)
(22,result)
(23,)
(24,)
(25,data = \' \')
(26,)
(27,GLOBAL_CONST_FIVE==5)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^