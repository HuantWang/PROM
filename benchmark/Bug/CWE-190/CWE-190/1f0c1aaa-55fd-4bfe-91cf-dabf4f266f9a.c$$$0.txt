-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_11_bad()
CWE190_Integer_Overflow__short_max_square_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(17,7,0)
(1,22,0)
(0,16,0)
(20,16,0)
(16,3,0)
(8,0,0)
(10,6,0)
(5,12,0)
(23,22,0)
(18,10,0)
(12,0,0)
(8,16,0)
(22,7,0)
(12,22,0)
(14,0,0)
(9,7,0)
(0,12,0)
(12,10,0)
(19,10,0)
(2,7,0)
(11,12,0)
(15,8,0)
(8,15,1)
(10,18,1)
(4,13,1)
(11,5,1)
(19,13,1)
(22,1,1)
(21,8,1)
(13,22,1)
(12,22,1)
(4,10,1)
(15,0,1)
(12,10,1)
(18,19,1)
(0,12,1)
(8,0,1)
(5,14,1)
(14,4,1)
(1,23,1)
(21,4,1)
(12,11,1)
(10,13,2)
(19,13,2)
(0,12,2)
(8,0,2)
(15,4,2)
(5,4,2)
(14,4,2)
(0,4,2)
(11,4,2)
(18,13,2)
(8,4,2)
(12,22,2)
(12,10,2)
(12,4,2)
-----------------------------------
(0,result = data * data)
(1,0)
(2,if(globalReturnsTrue()
(3,)
(4,globalReturnsTrue()
(5,data)
(6,)
(7,)
(8,printIntLine(result)
(9,if(globalReturnsTrue()
(10,data = SHRT_MAX)
(11,data)
(12,data * data)
(13,globalReturnsTrue()
(14,result)
(15,result)
(16,)
(17,data)
(18,SHRT_MAX)
(19,data)
(20,result)
(21,RET)
(22,data = 0)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^