-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (UINT_MAX/2))
            {
                unsigned int result = data * 2;
                printUnsignedLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,46,50,52,56,57,61,63,68,69,74,78,79,83,85,89,90,94,96,101,102
-----computeFrom-----
12,13
12,14
33,34
33,35
43,44
43,45
54,55
54,56
66,67
66,68
72,73
72,74
76,77
76,78
87,88
87,89
-----guardedBy-----
45,56
68,89
74,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (UINT_MAX/2)
data
data
(UINT_MAX/2)
UINT_MAX/2
UINT_MAX
UINT_MAX
2
{                unsigned int result = data * 2;                printUnsignedLine(result);            }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(39,7,0)
(22,57,0)
(1,42,0)
(36,44,0)
(46,0,0)
(28,34,0)
(24,57,0)
(8,40,0)
(10,7,0)
(44,35,0)
(31,22,0)
(32,20,0)
(12,36,0)
(4,56,0)
(10,44,0)
(0,46,0)
(48,7,0)
(36,49,0)
(42,49,0)
(55,39,0)
(37,49,0)
(27,32,0)
(19,4,0)
(57,22,0)
(7,10,0)
(23,44,0)
(42,44,0)
(38,30,0)
(54,42,0)
(13,44,0)
(5,57,0)
(10,49,0)
(47,34,0)
(56,49,0)
(11,35,0)
(0,49,0)
(45,35,0)
(7,6,0)
(18,36,0)
(21,46,0)
(0,44,0)
(9,10,0)
(53,49,0)
(43,35,0)
(29,47,0)
(52,56,0)
(56,4,0)
(41,10,0)
(15,26,0)
(3,46,0)
(17,0,0)
(50,56,0)
(33,6,0)
(49,2,0)
(56,44,0)
(22,44,0)
(4,34,0)
(57,14,0)
(47,4,0)
(39,6,0)
(46,3,1)
(7,10,1)
(0,44,1)
(0,49,1)
(3,21,1)
(51,44,1)
(44,23,1)
(55,7,1)
(36,18,1)
(22,44,1)
(41,9,1)
(25,36,1)
(10,44,1)
(42,49,1)
(22,31,1)
(56,49,1)
(53,37,1)
(32,27,1)
(18,12,1)
(19,0,1)
(1,54,1)
(10,49,1)
(48,42,1)
(39,55,1)
(52,19,1)
(16,49,1)
(42,1,1)
(17,36,1)
(5,24,1)
(54,16,1)
(47,29,1)
(27,0,1)
(39,7,1)
(42,44,1)
(49,53,1)
(9,48,1)
(47,4,1)
(29,4,1)
(23,13,1)
(25,39,1)
(36,44,1)
(21,17,1)
(24,51,1)
(25,47,1)
(16,57,1)
(37,51,1)
(25,32,1)
(36,49,1)
(56,44,1)
(4,56,1)
(57,22,1)
(31,5,1)
(50,52,1)
(0,46,1)
(56,50,1)
(10,41,1)
(12,16,1)
(25,42,1)
(0,36,2)
(0,49,2)
(21,36,2)
(29,0,2)
(32,0,2)
(42,16,2)
(47,0,2)
(50,0,2)
(22,44,2)
(19,0,2)
(36,16,2)
(27,0,2)
(18,16,2)
(53,51,2)
(24,51,2)
(4,0,2)
(36,49,2)
(3,36,2)
(9,42,2)
(56,49,2)
(12,16,2)
(1,16,2)
(37,51,2)
(10,42,2)
(39,42,2)
(48,42,2)
(42,44,2)
(5,51,2)
(31,51,2)
(57,51,2)
(7,42,2)
(56,44,2)
(47,4,2)
(4,56,2)
(17,36,2)
(41,42,2)
(10,49,2)
(7,10,2)
(56,0,2)
(10,44,2)
(39,7,2)
(57,22,2)
(46,36,2)
(54,16,2)
(0,44,2)
(49,51,2)
(55,42,2)
(52,0,2)
(36,44,2)
(42,49,2)
(0,46,2)
(22,51,2)
-----------------------------------
(0,data < (UINT_MAX/2)
(1,0)
(2,)
(3,2)
(4,result = data * 2)
(5,"%u")
(6,)
(7,result = data * 2)
(8,if (data < (UINT_MAX/2)
(9,data)
(10,data * 2)
(11,data)
(12,data)
(13,data)
(14,)
(15,if(data > 0)
(16,globalReturnsTrueOrFalse()
(17,data)
(18,0)
(19,result)
(20,)
(21,UINT_MAX)
(22,&data)
(23,0)
(24,stdin)
(25,RET)
(26,)
(27,"data value is too large to perform arithmetic safely.")
(28,result)
(29,result)
(30,)
(31,data)
(32,printLine("data value is too large to perform arithmetic safely.")
(33,result)
(34,)
(35,)
(36,data > 0)
(37,data)
(38,if(data > 0)
(39,printUnsignedLine(result)
(40,)
(41,2)
(42,data > 0)
(43,if(globalReturnsTrueOrFalse()
(44,data = 0)
(45,if(globalReturnsTrueOrFalse()
(46,UINT_MAX/2)
(47,printUnsignedLine(result)
(48,result)
(49,data = 2)
(50,2)
(51,globalReturnsTrueOrFalse()
(52,data)
(53,2)
(54,data)
(55,result)
(56,data * 2)
(57,fscanf (stdin, "%u", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^