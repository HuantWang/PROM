-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
59,60
60,61
62,63
63,64
63,65
64,65
65,66
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
85,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,57,58,61,66,68,73,75,79,84,86,90,92,96,98
-----computeFrom-----
35,36
35,37
51,52
51,53
63,64
63,65
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_32_bad()
CWE190_Integer_Overflow__int64_t_rand_square_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(19,11,0)
(43,8,0)
(9,7,0)
(1,25,0)
(38,11,0)
(10,11,0)
(17,39,0)
(28,36,0)
(35,3,0)
(41,6,0)
(39,43,0)
(18,29,0)
(15,1,0)
(31,25,0)
(27,33,0)
(29,31,0)
(13,38,0)
(33,38,0)
(35,6,0)
(20,6,0)
(36,11,0)
(41,28,0)
(42,38,0)
(29,18,0)
(32,3,0)
(25,11,0)
(39,1,0)
(30,29,0)
(7,31,0)
(16,11,0)
(42,3,0)
(2,25,0)
(31,29,0)
(14,43,0)
(24,42,0)
(1,39,0)
(7,25,0)
(22,28,0)
(37,7,0)
(23,35,0)
(0,35,0)
(6,35,0)
(34,8,0)
(4,31,0)
(5,37,0)
(12,36,0)
(8,43,0)
(43,11,0)
(29,30,0)
(21,41,0)
(40,11,0)
(37,43,0)
(38,33,0)
(6,28,0)
(3,42,0)
(3,36,0)
(13,43,1)
(0,23,1)
(35,3,1)
(6,35,1)
(17,15,1)
(29,30,1)
(42,38,1)
(34,14,1)
(15,10,1)
(43,8,1)
(31,29,1)
(42,24,1)
(30,4,1)
(35,0,1)
(37,5,1)
(29,18,1)
(38,33,1)
(9,37,1)
(7,31,1)
(32,7,1)
(5,31,1)
(7,9,1)
(21,6,1)
(10,38,1)
(4,1,1)
(3,42,1)
(20,3,1)
(1,39,1)
(41,6,1)
(27,13,1)
(39,43,1)
(8,34,1)
(39,17,1)
(23,20,1)
(24,32,1)
(33,27,1)
(26,41,1)
(41,21,1)
(37,43,1)
(39,43,2)
(31,29,2)
(29,18,2)
(42,38,2)
(37,43,2)
(43,8,2)
(35,3,2)
(38,33,2)
(3,42,2)
(41,6,2)
(29,30,2)
(1,39,2)
(7,31,2)
(6,35,2)
-----------------------------------
(0,data)
(1,data = *dataPtr1)
(2,data)
(3,data = *dataPtr2)
(4,data)
(5,dataPtr1)
(6,result = data * data)
(7,*dataPtr1 = data)
(8,&data)
(9,data)
(10,L)
(11,)
(12,data)
(13,dataPtr2)
(14,dataPtr1)
(15,data)
(16,dataPtr2)
(17,dataPtr1)
(18,int64_t)
(19,data)
(20,result)
(21,result)
(22,result)
(23,data)
(24,dataPtr2)
(25,)
(26,RET)
(27,data)
(28,)
(29,(int64_t)
(30,RAND64()
(31,data = (int64_t)
(32,data)
(33,&data)
(34,data)
(35,data * data)
(36,)
(37,*dataPtr1)
(38,*dataPtr2 = &data)
(39,*dataPtr1)
(40,dataPtr1)
(41,printLongLongLine(result)
(42,*dataPtr2)
(43,*dataPtr1 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^