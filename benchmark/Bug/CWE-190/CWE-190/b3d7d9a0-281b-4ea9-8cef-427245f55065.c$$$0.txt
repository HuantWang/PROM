-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
        {
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
64,66
65,66
67,68
67,69
68,69
68,70
71,72
73,74
73,75
74,75
74,76
77,78
77,79
78,79
80,81
80,82
81,82
81,83
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,54,58,60,66,69,70,72,75,76,79,82,83,85,89,91,95,97,101,103,108,109
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
63,64
63,65
93,94
93,95
-----guardedBy-----
72,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) < (long)sqrt((double)UINT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)UINT_MAX)
long
long

sqrt((double)UINT_MAX)
sqrt
sqrt
(double)UINT_MAX
double
double

UINT_MAX
UINT_MAX
{            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(5,14,0)
(1,48,0)
(10,45,0)
(1,31,0)
(25,23,0)
(53,25,0)
(44,14,0)
(6,23,0)
(15,16,0)
(25,3,0)
(18,33,0)
(45,11,0)
(29,15,0)
(54,23,0)
(41,16,0)
(46,31,0)
(48,1,0)
(50,33,0)
(2,15,0)
(33,39,0)
(2,31,0)
(32,11,0)
(31,9,0)
(30,11,0)
(26,6,0)
(52,27,0)
(36,45,0)
(1,43,0)
(6,31,0)
(4,1,0)
(7,16,0)
(24,38,0)
(43,19,0)
(50,18,0)
(3,25,0)
(43,1,0)
(23,37,0)
(19,43,0)
(17,12,0)
(42,2,0)
(14,5,0)
(5,27,0)
(23,25,0)
(8,6,0)
(27,52,0)
(49,33,0)
(20,17,0)
(47,31,0)
(41,15,0)
(27,19,0)
(19,27,0)
(1,23,0)
(13,50,0)
(0,2,0)
(27,5,0)
(14,44,0)
(25,53,0)
(15,2,0)
(21,41,0)
(6,18,0)
(18,6,0)
(2,23,0)
(28,18,0)
(51,14,0)
(35,11,0)
(46,40,1)
(2,23,1)
(41,21,1)
(19,43,1)
(21,15,1)
(1,31,1)
(27,5,1)
(1,23,1)
(14,51,1)
(4,22,1)
(6,23,1)
(41,15,1)
(36,10,1)
(20,19,1)
(28,22,1)
(1,4,1)
(6,31,1)
(13,18,1)
(27,52,1)
(2,31,1)
(47,46,1)
(25,3,1)
(42,0,1)
(19,27,1)
(5,14,1)
(22,31,1)
(50,13,1)
(34,50,1)
(6,8,1)
(53,54,1)
(14,44,1)
(17,20,1)
(50,18,1)
(54,40,1)
(1,48,1)
(51,43,1)
(0,29,1)
(22,23,1)
(8,26,1)
(26,28,1)
(29,19,1)
(18,6,1)
(15,2,1)
(40,45,1)
(25,53,1)
(43,1,1)
(31,47,1)
(34,41,1)
(45,36,1)
(23,25,1)
(2,42,1)
(34,17,1)
(53,40,2)
(5,14,2)
(6,31,2)
(50,18,2)
(2,23,2)
(18,22,2)
(31,40,2)
(46,40,2)
(13,22,2)
(43,22,2)
(41,19,2)
(18,6,2)
(20,19,2)
(15,19,2)
(27,5,2)
(54,40,2)
(1,22,2)
(25,53,2)
(19,27,2)
(21,19,2)
(5,22,2)
(1,48,2)
(25,3,2)
(29,19,2)
(2,31,2)
(14,22,2)
(25,40,2)
(41,15,2)
(2,19,2)
(50,22,2)
(23,25,2)
(17,19,2)
(51,22,2)
(0,19,2)
(19,22,2)
(47,40,2)
(6,22,2)
(27,52,2)
(42,19,2)
(43,1,2)
(26,22,2)
(15,2,2)
(1,23,2)
(28,22,2)
(14,44,2)
(23,40,2)
(6,23,2)
(4,22,2)
(19,43,2)
(1,31,2)
(8,22,2)
(27,22,2)
-----------------------------------
(0,data)
(1,(long)
(2,data * data)
(3,unsigned int)
(4,data)
(5,sqrt((double)
(6,data * data)
(7,result)
(8,data)
(9,)
(10,data)
(11,)
(12,)
(13,result)
(14,(double)
(15,result = data * data)
(16,)
(17,printLine("data value is too large to perform arithmetic safely.")
(18,result = data * data)
(19,abs((long)
(20,"data value is too large to perform arithmetic safely.")
(21,result)
(22,globalReturnsTrueOrFalse()
(23,data = (unsigned int)
(24,if (abs((long)
(25,(unsigned int)
(26,data)
(27,(long)
(28,result)
(29,result)
(30,if(globalReturnsTrueOrFalse()
(31,data = 2)
(32,data)
(33,)
(34,RET)
(35,if(globalReturnsTrueOrFalse()
(36,0)
(37,)
(38,)
(39,)
(40,globalReturnsTrueOrFalse()
(41,printUnsignedLine(result)
(42,data)
(43,abs((long)
(44,double)
(45,data = 0)
(46,data)
(47,2)
(48,long)
(49,result)
(50,printUnsignedLine(result)
(51,UINT_MAX)
(52,long)
(53,RAND32()
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^