-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_rand_square_15_bad()
CWE190_Integer_Overflow__char_rand_square_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,6,0)
(15,28,0)
(12,20,0)
(36,28,0)
(29,13,0)
(25,13,0)
(27,28,0)
(2,4,0)
(34,32,0)
(23,16,0)
(31,16,0)
(33,25,0)
(7,10,0)
(16,31,0)
(8,12,0)
(31,32,0)
(19,31,0)
(26,3,0)
(22,32,0)
(20,12,0)
(24,28,0)
(10,20,0)
(12,31,0)
(6,16,0)
(30,13,0)
(0,13,0)
(14,13,0)
(16,23,0)
(4,32,0)
(5,27,0)
(10,25,0)
(37,20,0)
(12,27,0)
(20,25,0)
(3,13,0)
(18,32,0)
(17,12,0)
(1,27,0)
(9,32,0)
(11,18,1)
(8,37,1)
(18,4,1)
(30,10,1)
(16,23,1)
(27,1,1)
(1,5,1)
(26,11,1)
(20,12,1)
(10,20,1)
(12,27,1)
(37,11,1)
(4,2,1)
(10,7,1)
(35,27,1)
(21,30,1)
(17,8,1)
(16,6,1)
(7,20,1)
(3,26,1)
(11,34,1)
(12,17,1)
(12,31,1)
(19,35,1)
(6,19,1)
(21,29,1)
(31,16,1)
(34,31,1)
(2,35,1)
(29,3,1)
(10,20,2)
(10,11,2)
(6,35,2)
(2,35,2)
(17,11,2)
(16,35,2)
(4,35,2)
(31,16,2)
(12,31,2)
(34,35,2)
(12,11,2)
(18,35,2)
(12,27,2)
(16,6,2)
(31,35,2)
(19,35,2)
(3,11,2)
(30,11,2)
(37,11,2)
(20,11,2)
(20,12,2)
(29,11,2)
(8,11,2)
(7,11,2)
(26,11,2)
(16,23,2)
-----------------------------------
(0,default:)
(1,\\\' \\\')
(2,"Benign, fixed string")
(3,printLine("Benign, fixed string")
(4,printLine("Benign, fixed string")
(5,data)
(6,RAND32()
(7,result)
(8,data)
(9,default:)
(10,printHexCharLine(result)
(11,7)
(12,data * data)
(13,)
(14,case 7:)
(15,data)
(16,(char)
(17,data)
(18,break;)
(19,data)
(20,result = data * data)
(21,RET)
(22,case 6:)
(23,char)
(24,switch(7)
(25,)
(26,"Benign, fixed string")
(27,data = \\\' \\\')
(28,)
(29,break;)
(30,break;)
(31,data = (char)
(32,)
(33,result)
(34,break;)
(35,6)
(36,switch(6)
(37,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^