-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad()
{
    int64_t data;
    data = 0LL;
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
22,23
22,24
24,25
24,26
25,26
25,27
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,9,11,15,16,18,21,23,28,29,34,36,40,41,45,47,48
-----computeFrom-----
13,14
13,15
26,27
26,28
38,39
38,40
-----guardedBy-----
28,40
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ProblemStatement;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad(){    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad
{    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    }
fscanf (stdin, "%" SCNd64, &data);
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
-----joern-----
(15,24,0)
(24,9,0)
(4,11,0)
(8,13,0)
(1,9,0)
(0,24,0)
(20,13,0)
(7,6,0)
(21,13,0)
(1,6,0)
(12,3,0)
(23,17,0)
(9,24,0)
(22,3,0)
(19,13,0)
(9,6,0)
(10,1,0)
(2,11,0)
(14,9,0)
(24,0,1)
(18,22,1)
(14,11,1)
(22,1,1)
(22,11,1)
(16,20,1)
(15,14,1)
(18,5,1)
(1,10,1)
(4,2,1)
(5,23,1)
(1,9,1)
(11,4,1)
(0,15,1)
(5,16,1)
(10,9,1)
(2,5,1)
(23,16,1)
(9,24,1)
(1,11,2)
(0,11,2)
(14,11,2)
(9,24,2)
(23,16,2)
(22,5,2)
(11,5,2)
(2,5,2)
(24,11,2)
(4,5,2)
(9,11,2)
(10,11,2)
(15,11,2)
(1,9,2)
-----------------------------------
(0,2)
(1,printLongLongLine(result)
(2,data)
(3,)
(4,0)
(5,1)
(6,)
(7,result)
(8,data)
(9,result = data * 2)
(10,result)
(11,data > 0)
(12,if(data > 0)
(13,)
(14,result)
(15,data)
(16,1)
(17,)
(18,RET)
(19,while(1)
(20,L)
(21,while(1)
(22,break;)
(23,break;)
(24,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^