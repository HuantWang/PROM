-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
        {
            char result = data * data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
64,66
65,66
67,68
67,69
68,69
68,70
71,72
73,74
73,75
74,75
74,76
77,78
77,79
78,79
80,81
80,82
81,82
81,83
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,54,58,60,66,69,70,72,75,76,79,82,83,85,89,91,95,97,101,103,108,109
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
63,64
63,65
93,94
93,95
-----guardedBy-----
72,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_rand_square_12_bad()
CWE190_Integer_Overflow__char_rand_square_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)CHAR_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)CHAR_MAX)
long
long

sqrt((double)CHAR_MAX)
sqrt
sqrt
(double)CHAR_MAX
double
double

CHAR_MAX
CHAR_MAX
{            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,38,0)
(48,41,0)
(40,19,0)
(0,44,0)
(20,23,0)
(51,21,0)
(14,16,0)
(37,53,0)
(11,44,0)
(21,18,0)
(41,48,0)
(18,41,0)
(9,17,0)
(41,11,0)
(45,39,0)
(40,10,0)
(46,17,0)
(9,40,0)
(23,26,0)
(23,37,0)
(0,40,0)
(25,0,0)
(41,18,0)
(0,25,0)
(18,21,0)
(50,9,0)
(30,17,0)
(35,40,0)
(50,34,0)
(43,50,0)
(19,40,0)
(19,52,0)
(3,9,0)
(49,34,0)
(28,16,0)
(33,16,0)
(47,0,0)
(31,19,0)
(54,26,0)
(2,23,0)
(0,17,0)
(26,17,0)
(11,41,0)
(32,34,0)
(2,37,0)
(36,9,0)
(19,31,0)
(22,37,0)
(4,33,0)
(52,19,0)
(24,16,0)
(29,13,0)
(26,23,0)
(49,50,0)
(9,50,0)
(38,21,0)
(12,26,0)
(17,7,0)
(44,0,0)
(44,11,0)
(27,49,0)
(5,33,0)
(26,40,0)
(15,2,0)
(39,1,0)
(20,8,1)
(21,38,1)
(8,17,1)
(27,50,1)
(45,11,1)
(9,40,1)
(2,15,1)
(6,33,1)
(42,39,1)
(49,27,1)
(36,3,1)
(26,17,1)
(46,30,1)
(0,25,1)
(31,35,1)
(17,46,1)
(47,8,1)
(19,52,1)
(19,31,1)
(26,40,1)
(40,19,1)
(8,40,1)
(11,44,1)
(39,45,1)
(12,20,1)
(3,43,1)
(42,2,1)
(50,9,1)
(26,54,1)
(42,49,1)
(23,26,1)
(0,40,1)
(44,0,1)
(51,44,1)
(15,23,1)
(41,18,1)
(11,41,1)
(41,48,1)
(0,17,1)
(21,51,1)
(9,17,1)
(49,50,1)
(0,47,1)
(30,6,1)
(9,36,1)
(35,6,1)
(2,23,1)
(43,11,1)
(18,21,1)
(54,12,1)
(33,4,1)
(4,5,1)
(9,11,2)
(2,23,2)
(11,41,2)
(23,26,2)
(2,8,2)
(3,11,2)
(0,8,2)
(31,6,2)
(15,8,2)
(26,17,2)
(41,48,2)
(51,8,2)
(26,40,2)
(11,8,2)
(36,11,2)
(23,8,2)
(20,8,2)
(41,18,2)
(49,50,2)
(21,8,2)
(44,8,2)
(40,19,2)
(19,31,2)
(9,17,2)
(50,11,2)
(44,0,2)
(11,44,2)
(0,25,2)
(30,6,2)
(19,52,2)
(49,11,2)
(26,8,2)
(18,21,2)
(17,6,2)
(19,6,2)
(27,11,2)
(41,8,2)
(40,6,2)
(47,8,2)
(35,6,2)
(12,8,2)
(18,8,2)
(46,6,2)
(54,8,2)
(45,11,2)
(21,38,2)
(50,9,2)
(9,40,2)
(39,11,2)
(0,17,2)
(0,40,2)
(43,11,2)
-----------------------------------
(0,(long)
(1,)
(2,printHexCharLine(result)
(3,data)
(4,\\\' \\\')
(5,data)
(6,globalReturnsTrueOrFalse()
(7,)
(8,globalReturnsTrueOrFalse()
(9,data * data)
(10,)
(11,abs((long)
(12,data)
(13,)
(14,if(globalReturnsTrueOrFalse()
(15,result)
(16,)
(17,data = 2)
(18,sqrt((double)
(19,(char)
(20,result)
(21,(double)
(22,result)
(23,result = data * data)
(24,if(globalReturnsTrueOrFalse()
(25,long)
(26,data * data)
(27,result)
(28,data)
(29,if (abs((long)
(30,data)
(31,RAND32()
(32,result)
(33,data = \\\' \\\')
(34,)
(35,data)
(36,data)
(37,)
(38,double)
(39,printLine("data value is too large to perform arithmetic safely.")
(40,data = (char)
(41,(long)
(42,RET)
(43,result)
(44,abs((long)
(45,"data value is too large to perform arithmetic safely.")
(46,2)
(47,data)
(48,long)
(49,printHexCharLine(result)
(50,result = data * data)
(51,CHAR_MAX)
(52,char)
(53,)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^