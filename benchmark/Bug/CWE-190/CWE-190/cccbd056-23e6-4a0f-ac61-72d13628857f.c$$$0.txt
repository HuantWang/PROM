-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_add_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,29,33,34,35,37,40,44,46,50,51,55,57,58,59,63,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_add_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_rand_add_15_bad()
CWE190_Integer_Overflow__int_rand_add_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(7,12,0)
(15,24,0)
(30,12,0)
(26,7,0)
(9,22,0)
(33,31,0)
(27,19,0)
(16,15,0)
(8,4,0)
(7,32,0)
(4,18,0)
(5,27,0)
(20,31,0)
(28,32,0)
(1,27,0)
(14,32,0)
(21,7,0)
(22,31,0)
(24,31,0)
(11,18,0)
(32,28,0)
(0,31,0)
(6,19,0)
(7,27,0)
(15,12,0)
(17,18,0)
(23,24,0)
(2,18,0)
(32,18,0)
(34,31,0)
(29,19,0)
(12,7,0)
(10,18,0)
(13,19,0)
(12,24,0)
(35,27,1)
(3,2,1)
(27,5,1)
(26,21,1)
(25,20,1)
(34,22,1)
(25,34,1)
(14,35,1)
(15,12,1)
(7,27,1)
(2,4,1)
(21,30,1)
(3,11,1)
(9,3,1)
(28,14,1)
(8,35,1)
(7,26,1)
(12,7,1)
(4,8,1)
(16,12,1)
(20,15,1)
(7,32,1)
(5,1,1)
(15,16,1)
(30,3,1)
(32,28,1)
(22,9,1)
(11,32,1)
(4,35,2)
(7,32,2)
(20,3,2)
(16,3,2)
(11,35,2)
(15,12,2)
(9,3,2)
(30,3,2)
(2,35,2)
(22,3,2)
(7,3,2)
(21,3,2)
(26,3,2)
(32,35,2)
(14,35,2)
(12,3,2)
(7,27,2)
(8,35,2)
(32,28,2)
(34,3,2)
(28,35,2)
(12,7,2)
(15,3,2)
-----------------------------------
(0,case 7:)
(1,data)
(2,break;)
(3,7)
(4,printLine("Benign, fixed string")
(5,0)
(6,switch(7)
(7,data + 1)
(8,"Benign, fixed string")
(9,"Benign, fixed string")
(10,case 6:)
(11,break;)
(12,result = data + 1)
(13,switch(6)
(14,data)
(15,printIntLine(result)
(16,result)
(17,default:)
(18,)
(19,)
(20,break;)
(21,data)
(22,printLine("Benign, fixed string")
(23,result)
(24,)
(25,RET)
(26,1)
(27,data = 0)
(28,RAND32()
(29,data)
(30,result)
(31,)
(32,data = RAND32()
(33,default:)
(34,break;)
(35,6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^