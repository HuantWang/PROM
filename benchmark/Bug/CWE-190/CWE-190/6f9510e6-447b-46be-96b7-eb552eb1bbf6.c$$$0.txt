-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
74,77
75,76
76,77
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,78,81,83,86,90,92
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_32_bad()
CWE190_Integer_Overflow__char_rand_preinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(31,17,0)
(30,9,0)
(13,3,0)
(33,43,0)
(16,43,0)
(39,26,0)
(4,16,0)
(41,25,0)
(3,40,0)
(22,40,0)
(45,9,0)
(15,43,0)
(34,41,0)
(41,14,0)
(32,28,0)
(25,41,0)
(27,13,0)
(8,30,0)
(20,5,0)
(5,3,0)
(3,5,0)
(6,30,0)
(12,16,0)
(40,43,0)
(28,11,0)
(26,11,0)
(17,43,0)
(26,13,0)
(2,33,0)
(42,9,0)
(21,9,0)
(42,2,0)
(36,33,0)
(11,40,0)
(0,42,0)
(9,45,0)
(2,34,0)
(34,33,0)
(41,34,0)
(5,17,0)
(18,38,0)
(10,3,0)
(29,11,0)
(8,33,0)
(13,11,0)
(17,38,0)
(38,17,0)
(23,43,0)
(28,3,0)
(1,13,0)
(35,8,0)
(44,2,0)
(19,43,0)
(7,45,0)
(37,34,0)
(9,43,0)
(14,41,0)
(30,8,0)
(13,3,1)
(6,35,1)
(30,9,1)
(4,12,1)
(0,34,1)
(28,32,1)
(1,27,1)
(39,13,1)
(30,6,1)
(35,16,1)
(41,25,1)
(14,37,1)
(41,14,1)
(42,9,1)
(8,30,1)
(37,8,1)
(18,31,1)
(5,20,1)
(31,9,1)
(17,38,1)
(42,0,1)
(32,3,1)
(13,1,1)
(16,4,1)
(27,28,1)
(9,45,1)
(28,3,1)
(2,34,1)
(20,10,1)
(26,39,1)
(38,18,1)
(34,41,1)
(7,21,1)
(45,7,1)
(24,26,1)
(10,2,1)
(3,5,1)
(26,13,1)
(5,17,1)
(2,44,1)
(12,17,1)
(44,42,1)
(41,14,2)
(41,25,2)
(2,34,2)
(9,45,2)
(5,17,2)
(17,38,2)
(30,9,2)
(3,5,2)
(42,9,2)
(13,3,2)
(28,3,2)
(34,41,2)
(8,30,2)
(26,13,2)
-----------------------------------
(0,dataPtr1)
(1,data)
(2,*dataPtr1 = data)
(3,data = *dataPtr2)
(4,' ')
(5,*dataPtr2)
(6,dataPtr1)
(7,data)
(8,data = *dataPtr1)
(9,*dataPtr1 = &data)
(10,data)
(11,)
(12,data)
(13,result = data)
(14,RAND32()
(15,data)
(16,data = ' ')
(17,*dataPtr2 = &data)
(18,data)
(19,dataPtr2)
(20,dataPtr2)
(21,dataPtr1)
(22,data)
(23,dataPtr1)
(24,RET)
(25,char)
(26,printHexCharLine(result)
(27,result)
(28,++data)
(29,result)
(30,*dataPtr1)
(31,dataPtr2)
(32,data)
(33,)
(34,data = (char)
(35,data)
(36,data)
(37,data)
(38,&data)
(39,result)
(40,)
(41,(char)
(42,*dataPtr1)
(43,)
(44,data)
(45,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^