-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad()
{
    int64_t data;
    data = 0LL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
25,27
26,27
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,9,11,15,16,20,21,27,28,33,34,39,41,45,46,50,52
-----computeFrom-----
13,14
13,15
18,19
18,20
25,26
25,27
31,32
31,33
43,44
43,45
-----guardedBy-----
33,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad(){    int64_t data;    data = 0LL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad
{    int64_t data;    data = 0LL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(25,14,0)
(14,25,0)
(17,25,0)
(14,18,0)
(1,16,0)
(2,3,0)
(12,21,0)
(15,21,0)
(23,3,0)
(22,3,0)
(5,18,0)
(8,3,0)
(20,13,0)
(7,10,0)
(0,16,0)
(10,14,0)
(9,11,0)
(10,18,0)
(19,11,0)
(24,14,0)
(4,25,0)
(11,9,1)
(6,10,1)
(10,14,1)
(12,16,1)
(24,11,1)
(0,1,1)
(15,12,1)
(7,14,1)
(10,7,1)
(16,0,1)
(14,25,1)
(17,4,1)
(25,17,1)
(4,24,1)
(19,21,1)
(6,11,1)
(6,21,1)
(1,8,1)
(9,19,1)
(21,15,1)
(7,11,2)
(19,21,2)
(17,11,2)
(11,21,2)
(9,21,2)
(14,25,2)
(10,14,2)
(25,11,2)
(4,11,2)
(24,11,2)
(10,11,2)
(14,11,2)
-----------------------------------
(0,5)
(1,staticFive)
(2,data)
(3,)
(4,data)
(5,result)
(6,RET)
(7,result)
(8,L)
(9,0)
(10,printLongLongLine(result)
(11,data > 0)
(12,staticFive)
(13,)
(14,result = data * 2)
(15,5)
(16,staticFive==5)
(17,2)
(18,)
(19,data)
(20,if(data > 0)
(21,staticFive==5)
(22,if(staticFive==5)
(23,if(staticFive==5)
(24,result)
(25,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^