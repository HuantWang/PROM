-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
65,66
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,69,71,75,77,81,83
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
73,74
73,75
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_08_bad()
CWE190_Integer_Overflow__int_fgets_square_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(36,34,0)
(18,29,0)
(32,27,0)
(34,27,0)
(38,12,0)
(31,23,0)
(26,16,0)
(35,28,0)
(23,17,0)
(14,22,0)
(1,28,0)
(9,14,0)
(0,34,0)
(8,18,0)
(5,27,0)
(27,16,0)
(10,34,0)
(22,18,0)
(25,12,0)
(3,20,0)
(14,28,0)
(19,40,0)
(6,20,0)
(28,13,0)
(28,35,0)
(16,7,0)
(11,14,0)
(14,12,0)
(34,10,0)
(33,35,0)
(35,27,0)
(40,18,0)
(40,22,0)
(39,22,0)
(2,16,0)
(30,34,0)
(22,14,0)
(21,10,0)
(15,20,0)
(12,20,0)
(0,36,1)
(19,22,1)
(40,19,1)
(9,39,1)
(10,21,1)
(39,37,1)
(34,0,1)
(4,37,1)
(33,1,1)
(40,22,1)
(5,24,1)
(11,9,1)
(23,31,1)
(24,12,1)
(35,27,1)
(14,28,1)
(32,5,1)
(31,10,1)
(4,40,1)
(22,14,1)
(27,32,1)
(1,10,1)
(37,24,1)
(35,33,1)
(10,34,1)
(37,23,1)
(21,34,1)
(37,28,1)
(30,27,1)
(14,12,1)
(12,38,1)
(38,25,1)
(14,11,1)
(36,30,1)
(28,35,1)
(34,27,1)
(35,27,2)
(14,28,2)
(14,12,2)
(22,14,2)
(22,37,2)
(32,24,2)
(40,22,2)
(36,24,2)
(28,10,2)
(39,37,2)
(35,10,2)
(1,10,2)
(5,24,2)
(28,35,2)
(33,10,2)
(31,10,2)
(40,37,2)
(23,10,2)
(11,37,2)
(34,24,2)
(19,37,2)
(27,24,2)
(14,37,2)
(10,24,2)
(10,34,2)
(34,27,2)
(0,24,2)
(21,24,2)
(30,24,2)
(9,37,2)
-----------------------------------
(0,stdin)
(1,data)
(2,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,if(staticReturnsTrue()
(4,RET)
(5,inputBuffer)
(6,if(staticReturnsTrue()
(7,)
(8,result)
(9,data)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,data)
(12,data = 0)
(13,)
(14,data * data)
(15,data)
(16,)
(17,)
(18,)
(19,result)
(20,)
(21,NULL)
(22,result = data * data)
(23,printLine("fgets()
(24,staticReturnsTrue()
(25,data)
(26,inputBuffer)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,data = atoi(inputBuffer)
(29,)
(30,inputBuffer)
(31,"fgets()
(32,"")
(33,inputBuffer)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,atoi(inputBuffer)
(36,CHAR_ARRAY_SIZE)
(37,staticReturnsTrue()
(38,0)
(39,result)
(40,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^