-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_09_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_09_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_09_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_09_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(6,10,0)
(24,9,0)
(22,6,0)
(29,5,0)
(1,20,0)
(9,10,0)
(8,15,0)
(25,5,0)
(13,12,0)
(2,10,0)
(16,5,0)
(4,12,0)
(14,5,0)
(25,6,0)
(29,15,0)
(26,15,0)
(15,21,0)
(15,29,0)
(5,12,0)
(3,12,0)
(17,25,0)
(19,5,0)
(7,16,0)
(0,16,0)
(23,25,0)
(27,29,0)
(9,6,0)
(6,25,0)
(9,24,1)
(5,14,1)
(22,16,1)
(23,22,1)
(17,23,1)
(11,15,1)
(7,11,1)
(24,6,1)
(25,5,1)
(14,19,1)
(29,5,1)
(29,27,1)
(25,17,1)
(26,8,1)
(16,5,1)
(15,29,1)
(6,25,1)
(18,9,1)
(27,26,1)
(16,0,1)
(18,16,1)
(9,6,1)
(28,5,1)
(11,28,1)
(0,7,1)
(8,28,1)
(18,11,1)
(27,28,2)
(9,16,2)
(25,16,2)
(16,5,2)
(9,6,2)
(17,16,2)
(15,28,2)
(24,16,2)
(7,11,2)
(16,11,2)
(15,29,2)
(22,16,2)
(6,16,2)
(29,28,2)
(23,16,2)
(29,5,2)
(8,28,2)
(25,5,2)
(0,11,2)
(6,25,2)
(26,28,2)
-----------------------------------
(0,0)
(1,if(data > 0)
(2,result)
(3,data)
(4,if(GLOBAL_CONST_TRUE)
(5,data = 0)
(6,result = data * 2)
(7,data)
(8,stdin)
(9,printUnsignedLine(result)
(10,)
(11,GLOBAL_CONST_TRUE)
(12,)
(13,if(GLOBAL_CONST_TRUE)
(14,0)
(15,fscanf (stdin, "%u", &data)
(16,data > 0)
(17,2)
(18,RET)
(19,data)
(20,)
(21,)
(22,result)
(23,data)
(24,result)
(25,data * 2)
(26,"%u")
(27,data)
(28,GLOBAL_CONST_TRUE)
(29,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^