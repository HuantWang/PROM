-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (SHRT_MAX/2))
            {
                short result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,46,50,52,56,57,61,63,68,69,74,78,79,83,85,89,90,94,96,101,102
-----computeFrom-----
12,13
12,14
33,34
33,35
43,44
43,45
54,55
54,56
66,67
66,68
72,73
72,74
76,77
76,78
87,88
87,89
-----guardedBy-----
45,56
68,89
74,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_12_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (SHRT_MAX/2)
data
data
(SHRT_MAX/2)
SHRT_MAX/2
SHRT_MAX
SHRT_MAX
2
{                short result = data * 2;                printIntLine(result);            }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(20,25,0)
(29,47,0)
(13,1,0)
(46,56,0)
(45,35,0)
(39,35,0)
(0,18,0)
(5,21,0)
(53,45,0)
(54,45,0)
(1,54,0)
(45,54,0)
(5,35,0)
(43,36,0)
(38,8,0)
(41,35,0)
(15,12,0)
(7,25,0)
(51,7,0)
(2,21,0)
(48,25,0)
(21,52,0)
(10,2,0)
(4,15,0)
(12,35,0)
(12,15,0)
(7,35,0)
(2,35,0)
(3,56,0)
(16,19,0)
(50,19,0)
(34,15,0)
(1,27,0)
(33,12,0)
(22,5,0)
(36,40,0)
(56,21,0)
(36,2,0)
(49,21,0)
(37,36,0)
(25,24,0)
(44,5,0)
(43,40,0)
(54,27,0)
(42,54,0)
(55,27,0)
(45,21,0)
(35,19,0)
(23,19,0)
(14,0,0)
(6,45,0)
(2,36,0)
(25,7,0)
(30,40,0)
(57,21,0)
(17,43,0)
(9,2,0)
(56,35,0)
(12,21,0)
(28,32,0)
(0,14,1)
(49,11,1)
(2,21,1)
(46,3,1)
(12,21,1)
(56,21,1)
(15,34,1)
(21,57,1)
(25,7,1)
(5,35,1)
(53,6,1)
(54,45,1)
(57,49,1)
(31,56,1)
(45,53,1)
(51,48,1)
(48,20,1)
(33,5,1)
(7,51,1)
(44,26,1)
(2,35,1)
(31,43,1)
(12,15,1)
(6,42,1)
(31,1,1)
(12,35,1)
(56,46,1)
(1,13,1)
(10,37,1)
(22,44,1)
(3,26,1)
(14,12,1)
(35,39,1)
(56,35,1)
(26,21,1)
(4,33,1)
(37,56,1)
(13,54,1)
(36,2,1)
(45,35,1)
(39,41,1)
(9,10,1)
(26,25,1)
(31,5,1)
(43,17,1)
(43,36,1)
(1,54,1)
(2,9,1)
(17,36,1)
(31,0,1)
(7,35,1)
(45,21,1)
(20,11,1)
(34,4,1)
(5,21,1)
(42,12,1)
(5,22,1)
(11,35,1)
(25,7,2)
(45,35,2)
(34,5,2)
(54,45,2)
(46,26,2)
(5,35,2)
(49,11,2)
(56,26,2)
(2,21,2)
(36,2,2)
(54,12,2)
(9,56,2)
(21,11,2)
(7,11,2)
(15,5,2)
(45,21,2)
(37,56,2)
(2,56,2)
(56,21,2)
(25,11,2)
(45,12,2)
(43,56,2)
(12,5,2)
(42,12,2)
(10,56,2)
(51,11,2)
(43,36,2)
(36,56,2)
(17,56,2)
(4,5,2)
(5,26,2)
(1,12,2)
(14,12,2)
(56,35,2)
(22,26,2)
(7,35,2)
(12,21,2)
(53,12,2)
(2,35,2)
(57,11,2)
(44,26,2)
(20,11,2)
(48,11,2)
(6,12,2)
(3,26,2)
(12,35,2)
(13,12,2)
(5,21,2)
(12,15,2)
(0,12,2)
(1,54,2)
(33,5,2)
-----------------------------------
(0,printLine("data value is too large to perform arithmetic safely.")
(1,printIntLine(result)
(2,data * 2)
(3,data)
(4,SHRT_MAX)
(5,data > 0)
(6,data)
(7,&data)
(8,)
(9,2)
(10,data)
(11,globalReturnsTrueOrFalse()
(12,data < (SHRT_MAX/2)
(13,result)
(14,"data value is too large to perform arithmetic safely.")
(15,SHRT_MAX/2)
(16,if(globalReturnsTrueOrFalse()
(17,result)
(18,)
(19,)
(20,stdin)
(21,data = 2)
(22,0)
(23,if(globalReturnsTrueOrFalse()
(24,)
(25,fscanf (stdin, "%hd", &data)
(26,globalReturnsTrueOrFalse()
(27,)
(28,if(data > 0)
(29,if (data < (SHRT_MAX/2)
(30,result)
(31,RET)
(32,)
(33,data)
(34,2)
(35,data = 0)
(36,result = data * 2)
(37,result)
(38,if(data > 0)
(39,0)
(40,)
(41,data)
(42,result)
(43,printIntLine(result)
(44,data)
(45,data * 2)
(46,0)
(47,)
(48,"%hd")
(49,data)
(50,data)
(51,data)
(52,)
(53,2)
(54,result = data * 2)
(55,result)
(56,data > 0)
(57,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^