-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_08_bad()
{
    int64_t data;
    data = 0LL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
34,35
34,36
35,36
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,9,11,15,16,20,25,29,30,33,37,42,43,48,50,54,55,59,61
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
52,53
52,54
-----guardedBy-----
42,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_08_bad(){    int64_t data;    data = 0LL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_08_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_08_bad
{    int64_t data;    data = 0LL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(12,27,0)
(20,8,0)
(19,18,0)
(16,25,0)
(15,2,0)
(5,8,0)
(9,17,0)
(23,18,0)
(17,2,0)
(22,27,0)
(18,5,0)
(4,27,0)
(10,25,0)
(17,4,0)
(21,25,0)
(13,8,0)
(27,5,0)
(8,20,0)
(1,14,0)
(7,5,0)
(8,13,0)
(6,25,0)
(5,26,0)
(0,4,0)
(4,2,0)
(27,4,0)
(8,5,0)
(3,11,1)
(22,0,1)
(0,18,1)
(17,9,1)
(20,7,1)
(8,13,1)
(27,5,1)
(18,19,1)
(4,27,1)
(23,11,1)
(5,8,1)
(9,4,1)
(3,17,1)
(24,6,1)
(11,5,1)
(11,24,1)
(17,4,1)
(27,12,1)
(18,5,1)
(7,24,1)
(3,18,1)
(12,22,1)
(19,23,1)
(8,20,1)
(5,24,2)
(0,18,2)
(12,18,2)
(18,11,2)
(17,4,2)
(4,27,2)
(7,24,2)
(20,24,2)
(27,18,2)
(19,11,2)
(23,11,2)
(9,18,2)
(5,8,2)
(17,18,2)
(22,18,2)
(18,5,2)
(8,24,2)
(4,18,2)
(27,5,2)
(8,20,2)
(8,13,2)
-----------------------------------
(0,result)
(1,if(data > 0)
(2,)
(3,RET)
(4,result = data * 2)
(5,data = (int64_t)
(6,L)
(7,data)
(8,(int64_t)
(9,result)
(10,if(staticReturnsTrue()
(11,staticReturnsTrue()
(12,2)
(13,int64_t)
(14,)
(15,result)
(16,data)
(17,printLongLongLine(result)
(18,data > 0)
(19,0)
(20,RAND64()
(21,if(staticReturnsTrue()
(22,data)
(23,data)
(24,staticReturnsTrue()
(25,)
(26,)
(27,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^