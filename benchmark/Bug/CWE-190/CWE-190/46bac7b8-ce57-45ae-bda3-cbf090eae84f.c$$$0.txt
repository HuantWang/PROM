-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,48,51,53,56,60,62
-----computeFrom-----
12,13
12,14
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_31_bad()
CWE190_Integer_Overflow__short_rand_postinc_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,22,0)
(10,6,0)
(1,24,0)
(28,6,0)
(14,19,0)
(11,26,0)
(15,18,0)
(6,10,0)
(4,3,0)
(13,10,0)
(7,17,0)
(19,25,0)
(25,3,0)
(6,28,0)
(12,22,0)
(17,1,0)
(16,1,0)
(25,1,0)
(26,17,0)
(18,26,0)
(27,6,0)
(6,27,0)
(19,17,0)
(23,24,0)
(9,3,0)
(18,17,0)
(2,26,0)
(20,1,0)
(10,24,0)
(22,24,0)
(0,25,0)
(21,25,0)
(3,10,0)
(26,25,0)
(3,1,0)
(18,15,1)
(13,22,1)
(6,28,1)
(10,6,1)
(27,13,1)
(21,0,1)
(25,21,1)
(11,19,1)
(6,27,1)
(25,3,1)
(19,14,1)
(26,2,1)
(26,25,1)
(18,26,1)
(15,26,1)
(14,25,1)
(3,9,1)
(22,8,1)
(8,12,1)
(9,4,1)
(19,25,1)
(2,11,1)
(3,10,1)
(0,3,1)
(5,18,1)
(4,10,1)
(25,3,2)
(3,10,2)
(18,26,2)
(26,25,2)
(10,6,2)
(6,27,2)
(19,25,2)
(6,28,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,dataCopy = data)
(4,dataCopy)
(5,RET)
(6,(short)
(7,result)
(8,0)
(9,data)
(10,data = (short)
(11,result)
(12,data)
(13,data)
(14,data)
(15,result)
(16,data)
(17,)
(18,printIntLine(result)
(19,data++)
(20,dataCopy)
(21,dataCopy)
(22,data = 0)
(23,data)
(24,)
(25,data = dataCopy)
(26,result = data)
(27,RAND32()
(28,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^