-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_09_bad()
CWE190_Integer_Overflow__char_fscanf_square_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,10,0)
(4,16,0)
(11,0,0)
(18,0,0)
(24,20,0)
(20,6,0)
(3,13,0)
(19,20,0)
(19,13,0)
(15,18,0)
(18,13,0)
(20,19,0)
(12,16,0)
(0,8,0)
(0,18,0)
(17,18,0)
(7,19,0)
(22,11,0)
(11,8,0)
(13,16,0)
(5,13,0)
(1,16,0)
(2,0,0)
(9,8,0)
(14,20,0)
(0,18,1)
(21,11,1)
(21,25,1)
(11,0,1)
(24,14,1)
(14,23,1)
(3,5,1)
(19,7,1)
(18,13,1)
(2,25,1)
(23,13,1)
(19,13,1)
(20,19,1)
(25,20,1)
(17,15,1)
(15,2,1)
(7,24,1)
(11,22,1)
(25,23,1)
(22,0,1)
(18,17,1)
(13,3,1)
(11,0,2)
(24,23,2)
(20,19,2)
(20,23,2)
(15,25,2)
(17,25,2)
(18,25,2)
(2,25,2)
(14,23,2)
(19,23,2)
(0,18,2)
(18,13,2)
(22,25,2)
(7,23,2)
(0,25,2)
(19,13,2)
(11,25,2)
-----------------------------------
(0,result = data * data)
(1,if(GLOBAL_CONST_TRUE)
(2,result)
(3,\\\' \\\')
(4,if(GLOBAL_CONST_TRUE)
(5,data)
(6,)
(7,data)
(8,)
(9,result)
(10,)
(11,printHexCharLine(result)
(12,data)
(13,data = \\\' \\\')
(14,stdin)
(15,data)
(16,)
(17,data)
(18,data * data)
(19,&data)
(20,fscanf (stdin, "%c", &data)
(21,RET)
(22,result)
(23,GLOBAL_CONST_TRUE)
(24,"%c")
(25,GLOBAL_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^