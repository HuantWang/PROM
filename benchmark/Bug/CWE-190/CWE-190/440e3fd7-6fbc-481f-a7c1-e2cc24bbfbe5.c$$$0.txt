-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_postinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            data++;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_postinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_max_postinc_12_bad()
CWE190_Integer_Overflow__int_max_postinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(4,9,0)
(13,5,0)
(30,21,0)
(43,5,0)
(3,38,0)
(40,30,0)
(31,25,0)
(37,38,0)
(18,20,0)
(24,25,0)
(41,2,0)
(28,2,0)
(1,15,0)
(2,30,0)
(23,3,0)
(22,19,0)
(8,12,0)
(31,30,0)
(3,40,0)
(17,20,0)
(19,15,0)
(31,38,0)
(34,31,0)
(40,25,0)
(14,15,0)
(14,30,0)
(15,27,0)
(35,20,0)
(26,7,0)
(14,25,0)
(42,7,0)
(25,44,0)
(6,25,0)
(2,25,0)
(32,30,0)
(40,38,0)
(19,7,0)
(39,30,0)
(7,15,0)
(11,14,0)
(7,25,0)
(0,40,0)
(9,29,0)
(7,30,0)
(5,20,0)
(33,40,0)
(36,25,1)
(16,9,1)
(23,40,1)
(28,41,1)
(31,25,1)
(3,23,1)
(24,10,1)
(0,31,1)
(13,43,1)
(4,2,1)
(31,30,1)
(2,28,1)
(7,25,1)
(2,25,1)
(11,36,1)
(33,0,1)
(16,19,1)
(7,30,1)
(36,30,1)
(40,30,1)
(26,42,1)
(10,5,1)
(16,3,1)
(22,7,1)
(40,33,1)
(19,7,1)
(5,13,1)
(25,6,1)
(31,34,1)
(6,24,1)
(7,26,1)
(32,10,1)
(34,2,1)
(2,30,1)
(42,14,1)
(39,32,1)
(40,25,1)
(41,36,1)
(3,40,1)
(30,39,1)
(9,4,1)
(14,30,1)
(14,25,1)
(14,11,1)
(19,22,1)
(2,25,2)
(7,36,2)
(33,2,2)
(34,2,2)
(26,36,2)
(9,2,2)
(2,36,2)
(7,30,2)
(31,2,2)
(22,36,2)
(31,30,2)
(23,2,2)
(42,36,2)
(3,40,2)
(14,25,2)
(41,36,2)
(19,7,2)
(24,10,2)
(39,10,2)
(3,2,2)
(32,10,2)
(31,25,2)
(40,2,2)
(0,2,2)
(14,30,2)
(25,10,2)
(7,25,2)
(40,25,2)
(40,30,2)
(6,10,2)
(4,2,2)
(11,36,2)
(2,30,2)
(19,36,2)
(14,36,2)
(28,36,2)
(30,10,2)
-----------------------------------
(0,result)
(1,result)
(2,data < INT_MAX)
(3,printIntLine(result)
(4,"data value is too large to perform arithmetic safely.")
(5,data = 0)
(6,2)
(7,result = data)
(8,if (data < INT_MAX)
(9,printLine("data value is too large to perform arithmetic safely.")
(10,globalReturnsTrueOrFalse()
(11,data)
(12,)
(13,0)
(14,data++)
(15,)
(16,RET)
(17,if(globalReturnsTrueOrFalse()
(18,if(globalReturnsTrueOrFalse()
(19,printIntLine(result)
(20,)
(21,)
(22,result)
(23,result)
(24,data)
(25,data = 2)
(26,data)
(27,)
(28,INT_MAX)
(29,)
(30,data = INT_MAX)
(31,data++)
(32,data)
(33,data)
(34,data)
(35,data)
(36,globalReturnsTrueOrFalse()
(37,result)
(38,)
(39,INT_MAX)
(40,result = data)
(41,data)
(42,result)
(43,data)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^