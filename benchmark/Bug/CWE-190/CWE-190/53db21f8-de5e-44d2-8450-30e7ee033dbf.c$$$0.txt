-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
37,39
37,40
37,41
37,42
37,43
37,44
37,45
38,39
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
75,77
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
76,88
76,89
76,90
77,78
78,79
78,80
79,80
81,82
81,83
81,84
81,85
82,83
84,85
86,87
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
141,143
141,144
141,145
142,143
144,145
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
155,156
156,157
157,158
159,160
161,162
163,164
163,165
164,165
164,166
165,166
165,167
165,168
166,167
168,169
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
180,183
180,184
181,182
183,184
185,186
187,188
189,190
189,191
190,191
190,192
191,192
193,194
195,196
197,198
198,199
198,200
199,200
201,202
201,203
201,204
201,205
201,206
202,203
204,205
206,207
208,209
208,210
209,210
213,214
213,215
214,215
214,216
215,216
215,217
216,217
218,219
220,221
220,222
221,222
224,225
226,227
227,228
227,229
228,229
228,230
229,230
231,232
234,235
235,236
235,237
236,237
238,239
238,240
239,240
241,242
244,245
244,246
245,246
245,247
246,247
248,249
250,251
251,252
252,253
252,254
253,254
255,256
257,258
257,259
258,259
258,260
259,260
261,262
263,264
264,265
265,266
265,267
266,267
268,269
270,271
270,272
270,273
270,274
271,272
272,273
272,274
273,274
276,277
276,278
277,278
280,281
281,282
283,284
284,285
284,286
285,286
285,287
286,287
289,290
289,291
290,291
291,292
291,293
293,294
293,295
295,296
296,297
296,298
297,298
300,301
301,302
301,303
302,303
304,305
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,46,48,52,54,57,61,63,66,69,71,74,80,83,85,87,89,93,95,97,101,104,105,109,114,115,117,123,124,125,127,132,133,136,138,143,145,149,151,154,158,160,162,167,169,171,173,175,179,182,184,186,188,192,194,196,200,203,205,207,210,211,212,217,219,222,223,225,230,232,233,237,240,242,243,247,249,254,256,260,262,267,269,274,275,278,279,282,287,288,292,294,298,299,303,305
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
78,79
78,80
91,92
91,93
111,112
111,113
119,120
119,121
129,130
129,131
140,141
140,142
164,165
164,166
177,178
177,179
190,191
190,192
198,199
198,200
208,209
208,210
214,215
214,216
215,216
215,217
220,221
220,222
227,228
227,229
235,236
235,237
245,246
245,247
258,259
258,260
272,273
272,274
276,277
276,278
285,286
285,287
296,297
296,298
-----guardedBy-----
247,256
260,269
287,298
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_multiply_17_bad()
CWE190_Integer_Overflow__int_listen_socket_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(89,115,0)
(95,41,0)
(97,150,0)
(2,102,0)
(100,18,0)
(115,89,0)
(89,162,0)
(11,162,0)
(7,50,0)
(159,7,0)
(62,159,0)
(1,102,0)
(3,112,0)
(23,102,0)
(116,15,0)
(53,35,0)
(61,145,0)
(34,143,0)
(10,110,0)
(7,110,0)
(155,44,0)
(133,102,0)
(139,190,0)
(182,10,0)
(72,140,0)
(158,162,0)
(145,108,0)
(100,58,0)
(127,128,0)
(13,108,0)
(49,158,0)
(99,112,0)
(46,38,0)
(48,7,0)
(80,112,0)
(17,182,0)
(8,20,0)
(135,63,0)
(44,61,0)
(27,157,0)
(110,162,0)
(16,108,0)
(109,82,0)
(57,153,0)
(142,110,0)
(15,133,0)
(43,162,0)
(165,163,0)
(7,48,0)
(69,102,0)
(190,67,0)
(83,82,0)
(60,182,0)
(82,96,0)
(44,155,0)
(190,63,0)
(30,108,0)
(52,60,0)
(100,162,0)
(31,63,0)
(76,157,0)
(48,173,0)
(17,119,0)
(50,7,0)
(167,134,0)
(167,68,0)
(73,49,0)
(114,17,0)
(59,35,0)
(107,102,0)
(14,10,0)
(106,111,0)
(94,115,0)
(6,142,0)
(108,145,0)
(175,177,0)
(130,111,0)
(86,185,0)
(121,134,0)
(187,153,0)
(33,48,0)
(148,182,0)
(164,178,0)
(185,28,0)
(82,165,0)
(134,167,0)
(146,35,0)
(185,110,0)
(12,77,0)
(67,162,0)
(0,108,0)
(48,33,0)
(149,10,0)
(93,112,0)
(29,38,0)
(105,76,0)
(18,100,0)
(7,159,0)
(98,153,0)
(28,185,0)
(180,134,0)
(144,142,0)
(65,35,0)
(120,165,0)
(77,140,0)
(5,0,0)
(179,104,0)
(61,44,0)
(183,58,0)
(108,182,0)
(140,162,0)
(56,98,0)
(109,96,0)
(145,162,0)
(10,182,0)
(75,0,0)
(123,155,0)
(165,82,0)
(55,178,0)
(177,43,0)
(84,102,0)
(71,162,0)
(98,184,0)
(21,162,0)
(132,133,0)
(49,163,0)
(125,28,0)
(24,96,0)
(141,163,0)
(178,89,0)
(147,18,0)
(79,129,0)
(32,49,0)
(4,77,0)
(166,124,0)
(15,182,0)
(22,102,0)
(40,185,0)
(173,48,0)
(152,145,0)
(187,110,0)
(104,110,0)
(87,60,0)
(92,186,0)
(153,102,0)
(103,177,0)
(45,67,0)
(68,167,0)
(113,131,0)
(54,157,0)
(174,1,0)
(163,35,0)
(81,33,0)
(118,7,0)
(19,110,0)
(38,162,0)
(74,102,0)
(37,155,0)
(154,158,0)
(111,157,0)
(156,61,0)
(88,133,0)
(9,162,0)
(78,102,0)
(42,99,0)
(63,190,0)
(181,187,0)
(182,162,0)
(137,109,0)
(17,133,0)
(117,102,0)
(151,153,0)
(136,104,0)
(170,168,0)
(102,169,0)
(126,162,0)
(90,1,0)
(161,61,0)
(25,99,0)
(47,100,0)
(85,165,0)
(66,35,0)
(155,145,0)
(191,10,0)
(158,186,0)
(176,163,0)
(143,167,0)
(188,142,0)
(64,187,0)
(91,43,0)
(186,158,0)
(98,110,0)
(26,102,0)
(165,158,0)
(171,93,0)
(167,143,0)
(51,68,0)
(108,0,0)
(110,142,0)
(58,100,0)
(70,102,0)
(177,145,0)
(39,50,0)
(138,162,0)
(122,15,0)
(8,28,1)
(108,0,1)
(94,178,1)
(49,163,1)
(139,63,1)
(39,48,1)
(185,86,1)
(10,110,1)
(46,29,1)
(176,141,1)
(73,99,1)
(60,52,1)
(33,81,1)
(4,12,1)
(142,188,1)
(187,64,1)
(49,32,1)
(179,136,1)
(175,103,1)
(83,49,1)
(17,182,1)
(68,51,1)
(101,158,1)
(95,172,1)
(3,80,1)
(181,79,1)
(36,99,1)
(98,153,1)
(7,110,1)
(181,170,1)
(100,58,1)
(61,161,1)
(99,112,1)
(28,185,1)
(137,82,1)
(136,110,1)
(145,108,1)
(172,15,1)
(50,39,1)
(60,182,1)
(0,75,1)
(132,88,1)
(108,13,1)
(133,132,1)
(93,112,1)
(135,31,1)
(181,8,1)
(180,101,1)
(17,133,1)
(17,114,1)
(188,6,1)
(121,180,1)
(1,90,1)
(30,16,1)
(181,127,1)
(171,49,1)
(27,163,1)
(123,37,1)
(187,110,1)
(118,89,1)
(104,179,1)
(151,1,1)
(15,133,1)
(167,134,1)
(87,182,1)
(187,153,1)
(155,145,1)
(165,163,1)
(183,104,1)
(178,55,1)
(67,45,1)
(171,109,1)
(185,110,1)
(114,15,1)
(6,144,1)
(147,47,1)
(163,176,1)
(100,18,1)
(64,181,1)
(31,140,1)
(167,68,1)
(92,154,1)
(5,30,1)
(111,157,1)
(52,87,1)
(156,155,1)
(76,157,1)
(58,183,1)
(104,110,1)
(164,67,1)
(158,186,1)
(181,101,1)
(125,185,1)
(57,151,1)
(54,27,1)
(103,44,1)
(177,175,1)
(48,33,1)
(32,73,1)
(152,60,1)
(91,177,1)
(130,157,1)
(127,104,1)
(85,83,1)
(144,19,1)
(122,187,1)
(55,164,1)
(38,46,1)
(165,120,1)
(186,92,1)
(120,85,1)
(109,82,1)
(190,63,1)
(44,155,1)
(112,3,1)
(170,143,1)
(99,25,1)
(76,105,1)
(153,57,1)
(63,135,1)
(44,61,1)
(177,145,1)
(72,77,1)
(90,174,1)
(48,173,1)
(29,143,1)
(88,153,1)
(130,76,1)
(122,98,1)
(143,34,1)
(106,130,1)
(182,10,1)
(86,40,1)
(105,95,1)
(180,133,1)
(77,4,1)
(81,118,1)
(108,182,1)
(165,158,1)
(110,142,1)
(19,38,1)
(181,97,1)
(25,42,1)
(93,171,1)
(43,91,1)
(47,58,1)
(75,5,1)
(40,159,1)
(161,156,1)
(181,113,1)
(7,48,1)
(82,165,1)
(111,106,1)
(149,14,1)
(97,44,1)
(98,56,1)
(190,139,1)
(159,7,1)
(7,50,1)
(42,93,1)
(49,158,1)
(79,60,1)
(143,167,1)
(56,187,1)
(34,167,1)
(157,54,1)
(61,145,1)
(140,72,1)
(159,62,1)
(45,190,1)
(172,17,1)
(116,122,1)
(174,111,1)
(15,182,1)
(37,145,1)
(10,191,1)
(80,111,1)
(191,149,1)
(155,123,1)
(51,134,1)
(14,148,1)
(12,100,1)
(148,28,1)
(134,121,1)
(154,43,1)
(15,116,1)
(98,110,1)
(113,159,1)
(13,0,1)
(62,7,1)
(109,137,1)
(16,152,1)
(42,112,1)
(89,115,1)
(105,172,1)
(115,94,1)
(28,125,1)
(18,147,1)
(115,104,2)
(98,153,2)
(82,49,2)
(182,28,2)
(99,99,2)
(145,108,2)
(151,111,2)
(34,111,2)
(7,104,2)
(92,44,2)
(139,104,2)
(155,60,2)
(61,155,2)
(153,111,2)
(108,182,2)
(137,49,2)
(134,111,2)
(99,112,2)
(44,155,2)
(48,173,2)
(188,143,2)
(175,44,2)
(110,143,2)
(61,145,2)
(51,101,2)
(108,0,2)
(86,159,2)
(100,18,2)
(39,104,2)
(14,28,2)
(8,28,2)
(170,143,2)
(45,104,2)
(4,104,2)
(165,49,2)
(149,28,2)
(136,143,2)
(134,101,2)
(37,60,2)
(15,182,2)
(60,28,2)
(33,104,2)
(49,99,2)
(76,111,2)
(46,143,2)
(140,104,2)
(143,101,2)
(87,28,2)
(174,111,2)
(190,63,2)
(5,60,2)
(49,163,2)
(60,182,2)
(94,104,2)
(180,111,2)
(73,99,2)
(110,142,2)
(187,153,2)
(0,60,2)
(83,49,2)
(95,172,2)
(164,104,2)
(31,104,2)
(16,60,2)
(30,60,2)
(167,101,2)
(114,15,2)
(67,104,2)
(154,44,2)
(7,110,2)
(156,155,2)
(58,104,2)
(109,49,2)
(44,60,2)
(120,49,2)
(34,101,2)
(44,61,2)
(100,58,2)
(143,167,2)
(28,159,2)
(121,111,2)
(165,163,2)
(118,104,2)
(104,110,2)
(158,44,2)
(1,111,2)
(121,101,2)
(108,60,2)
(171,99,2)
(77,104,2)
(180,101,2)
(144,143,2)
(161,155,2)
(148,28,2)
(167,134,2)
(72,104,2)
(10,110,2)
(79,60,2)
(179,143,2)
(167,68,2)
(91,44,2)
(185,110,2)
(147,104,2)
(98,187,2)
(51,111,2)
(40,159,2)
(55,104,2)
(185,159,2)
(7,50,2)
(89,115,2)
(97,44,2)
(172,111,2)
(133,111,2)
(109,82,2)
(75,60,2)
(178,104,2)
(103,44,2)
(98,110,2)
(183,104,2)
(182,10,2)
(106,111,2)
(43,44,2)
(191,28,2)
(18,104,2)
(165,158,2)
(29,143,2)
(52,28,2)
(111,157,2)
(85,49,2)
(167,111,2)
(15,111,2)
(132,111,2)
(116,111,2)
(7,48,2)
(32,99,2)
(6,143,2)
(113,159,2)
(68,101,2)
(48,104,2)
(64,111,2)
(122,111,2)
(50,104,2)
(125,159,2)
(76,157,2)
(49,158,2)
(152,60,2)
(190,104,2)
(25,99,2)
(38,143,2)
(143,111,2)
(111,111,2)
(17,15,2)
(187,110,2)
(48,33,2)
(159,7,2)
(12,104,2)
(57,111,2)
(15,133,2)
(101,44,2)
(28,185,2)
(63,104,2)
(155,145,2)
(42,99,2)
(104,143,2)
(68,111,2)
(158,186,2)
(105,111,2)
(13,60,2)
(17,182,2)
(130,111,2)
(187,111,2)
(177,44,2)
(89,104,2)
(62,104,2)
(88,111,2)
(56,187,2)
(17,133,2)
(177,145,2)
(47,104,2)
(81,104,2)
(93,99,2)
(19,143,2)
(123,60,2)
(145,60,2)
(127,104,2)
(181,111,2)
(186,44,2)
(159,104,2)
(10,28,2)
(82,165,2)
(142,143,2)
(135,104,2)
(90,111,2)
(93,112,2)
(100,104,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE - 1)
(1,wsaDataInit = 0)
(2,service)
(3,0)
(4,sin_family)
(5,CHAR_ARRAY_SIZE)
(6,SOCK_STREAM)
(7,bind(listenSocket, (struct sockaddr*)
(8,break;)
(9,if (WSAStartup(MAKEWORD(2,2)
(10,accept(listenSocket, NULL, NULL)
(11,if (recvResult == SOCKET_ERROR || recvResult == 0)
(12,service)
(13,0)
(14,listenSocket)
(15,acceptSocket != INVALID_SOCKET)
(16,acceptSocket)
(17,CLOSE_SOCKET(acceptSocket)
(18,sizeof(service)
(19,listenSocket)
(20,)
(21,if (listenSocket == INVALID_SOCKET)
(22,wsaDataInit)
(23,acceptSocket)
(24,result)
(25,1)
(26,inputBuffer)
(27,i)
(28,listen(listenSocket, LISTEN_BACKLOG)
(29,wsaDataInit)
(30,inputBuffer)
(31,service)
(32,0)
(33,&service)
(34,NO_ERROR)
(35,)
(36,RET)
(37,recvResult)
(38,wsaDataInit = 1)
(39,service)
(40,listenSocket)
(41,)
(42,j)
(43,inputBuffer[recvResult] = '\\\\0')
(44,recvResult == SOCKET_ERROR || recvResult == 0)
(45,INADDR_ANY)
(46,1)
(47,0)
(48,(struct sockaddr*)
(49,data > 0)
(50,sizeof(service)
(51,wsaData)
(52,SOCKET_ERROR)
(53,i)
(54,0)
(55,sin_port)
(56,listenSocket)
(57,INVALID_SOCKET)
(58,&service)
(59,for(i = 0; i < 1; i++)
(60,acceptSocket == SOCKET_ERROR)
(61,recvResult == 0)
(62,SOCKET_ERROR)
(63,service.sin_addr)
(64,INVALID_SOCKET)
(65,data)
(66,j)
(67,service.sin_addr.s_addr = INADDR_ANY)
(68,&wsaData)
(69,if (acceptSocket != INVALID_SOCKET)
(70,if (listenSocket != INVALID_SOCKET)
(71,if (listen(listenSocket, LISTEN_BACKLOG)
(72,AF_INET)
(73,data)
(74,listenSocket)
(75,1)
(76,i++)
(77,service.sin_family)
(78,recvResult)
(79,break;)
(80,j)
(81,service)
(82,result = data * 2)
(83,result)
(84,wsaData)
(85,data)
(86,LISTEN_BACKLOG)
(87,acceptSocket)
(88,acceptSocket)
(89,service.sin_port = htons(TCP_PORT)
(90,0)
(91,'\\\\0')
(92,inputBuffer)
(93,j++)
(94,TCP_PORT)
(95,WSACleanup()
(96,)
(97,break;)
(98,CLOSE_SOCKET(listenSocket)
(99,j < 1)
(100,memset(&service, 0, sizeof(service)
(101,0)
(102,)
(103,inputBuffer)
(104,listenSocket == INVALID_SOCKET)
(105,i)
(106,1)
(107,if (wsaDataInit)
(108,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(109,printIntLine(result)
(110,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(111,i < 1)
(112,j = 0)
(113,break;)
(114,acceptSocket)
(115,htons(TCP_PORT)
(116,INVALID_SOCKET)
(117,do)
(118,listenSocket)
(119,)
(120,2)
(121,2)
(122,acceptSocket)
(123,SOCKET_ERROR)
(124,)
(125,SOCKET_ERROR)
(126,if (bind(listenSocket, (struct sockaddr*)
(127,break;)
(128,)
(129,)
(130,i)
(131,)
(132,INVALID_SOCKET)
(133,acceptSocket = INVALID_SOCKET)
(134,MAKEWORD(2,2)
(135,sin_addr)
(136,listenSocket)
(137,result)
(138,if (acceptSocket == SOCKET_ERROR)
(139,s_addr)
(140,service.sin_family = AF_INET)
(141,data)
(142,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(143,WSAStartup(MAKEWORD(2,2)
(144,AF_INET)
(145,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(146,for(j = 0; j < 1; j++)
(147,service)
(148,acceptSocket)
(149,NULL)
(150,)
(151,listenSocket)
(152,recvResult)
(153,listenSocket = INVALID_SOCKET)
(154,data)
(155,recvResult == SOCKET_ERROR)
(156,recvResult)
(157,i = 0)
(158,data = atoi(inputBuffer)
(159,bind(listenSocket, (struct sockaddr*)
(160,\'\\\\0\')
(161,0)
(162,)
(163,data = 0)
(164,service)
(165,data * 2)
(166,if(data > 0)
(167,WSAStartup(MAKEWORD(2,2)
(168,)
(169,)
(170,break;)
(171,j)
(172,wsaDataInit)
(173,struct sockaddr*)
(174,wsaDataInit)
(175,recvResult)
(176,0)
(177,inputBuffer[recvResult])
(178,service.sin_port)
(179,INVALID_SOCKET)
(180,2)
(181,listenSocket)
(182,acceptSocket = accept(listenSocket, NULL, NULL)
(183,service)
(184,)
(185,listen(listenSocket, LISTEN_BACKLOG)
(186,atoi(inputBuffer)
(187,listenSocket != INVALID_SOCKET)
(188,IPPROTO_TCP)
(189,inputBuffer[recvResult] = \'\\\\0\')
(190,service.sin_addr.s_addr)
(191,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^