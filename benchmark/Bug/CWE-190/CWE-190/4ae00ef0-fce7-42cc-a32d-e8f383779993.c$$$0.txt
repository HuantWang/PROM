-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,24,27,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
22,23
22,24
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_08_bad()
CWE190_Integer_Overflow__int_rand_square_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,19,0)
(22,11,0)
(23,6,0)
(3,2,0)
(11,6,0)
(5,1,0)
(5,8,0)
(1,6,0)
(6,21,0)
(17,19,0)
(9,5,0)
(2,19,0)
(8,16,0)
(1,5,0)
(20,2,0)
(12,8,0)
(14,19,0)
(11,1,0)
(5,2,0)
(4,5,0)
(7,1,0)
(8,18,0)
(16,8,0)
(1,5,1)
(5,4,1)
(10,2,1)
(5,2,1)
(11,1,1)
(5,8,1)
(11,22,1)
(20,3,1)
(2,20,1)
(16,12,1)
(4,9,1)
(7,15,1)
(13,11,1)
(12,10,1)
(13,15,1)
(22,1,1)
(8,16,1)
(9,7,1)
(15,10,1)
(15,8,1)
(11,1,2)
(7,15,2)
(8,10,2)
(5,8,2)
(22,15,2)
(5,15,2)
(9,15,2)
(4,15,2)
(11,15,2)
(1,15,2)
(12,10,2)
(5,2,2)
(8,16,2)
(16,10,2)
(1,5,2)
-----------------------------------
(0,data)
(1,result = data * data)
(2,data = 0)
(3,data)
(4,data)
(5,data * data)
(6,)
(7,result)
(8,data = RAND32()
(9,data)
(10,staticReturnsTrue()
(11,printIntLine(result)
(12,data)
(13,RET)
(14,if(staticReturnsTrue()
(15,staticReturnsTrue()
(16,RAND32()
(17,if(staticReturnsTrue()
(18,)
(19,)
(20,0)
(21,)
(22,result)
(23,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^