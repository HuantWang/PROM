-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(29,16,0)
(35,3,0)
(33,30,0)
(22,3,0)
(4,41,0)
(35,41,0)
(24,11,0)
(18,11,0)
(39,10,0)
(15,11,0)
(12,0,0)
(14,3,0)
(0,7,0)
(4,3,0)
(21,23,0)
(17,4,0)
(8,41,0)
(1,23,0)
(19,23,0)
(10,35,0)
(41,25,0)
(9,35,0)
(28,23,0)
(0,38,0)
(16,2,0)
(27,23,0)
(40,16,0)
(3,23,0)
(30,11,0)
(5,30,0)
(31,2,0)
(26,7,0)
(32,0,0)
(34,35,0)
(20,18,0)
(36,31,0)
(10,41,0)
(13,2,0)
(7,3,0)
(37,2,0)
(7,0,0)
(29,40,1)
(2,37,1)
(35,3,1)
(40,2,1)
(40,31,1)
(34,4,1)
(0,7,1)
(16,29,1)
(33,11,1)
(18,11,1)
(12,30,1)
(16,2,1)
(7,3,1)
(39,35,1)
(10,35,1)
(14,22,1)
(11,24,1)
(3,14,1)
(26,32,1)
(17,16,1)
(10,39,1)
(30,5,1)
(24,15,1)
(7,26,1)
(4,17,1)
(30,11,1)
(4,3,1)
(31,2,1)
(15,3,1)
(31,36,1)
(9,34,1)
(35,9,1)
(18,20,1)
(6,16,1)
(20,0,1)
(33,18,1)
(13,30,1)
(36,10,1)
(37,13,1)
(5,33,1)
(32,12,1)
(30,11,2)
(39,16,2)
(4,3,2)
(9,16,2)
(36,16,2)
(16,2,2)
(35,16,2)
(0,7,2)
(31,16,2)
(0,30,2)
(31,2,2)
(29,16,2)
(10,35,2)
(5,30,2)
(32,30,2)
(34,16,2)
(18,11,2)
(18,30,2)
(26,30,2)
(4,16,2)
(10,16,2)
(30,30,2)
(7,30,2)
(40,16,2)
(33,30,2)
(20,30,2)
(16,16,2)
(35,3,2)
(12,30,2)
(17,16,2)
(7,3,2)
-----------------------------------
(0,fscanf (stdin, "%u", &data)
(1,j)
(2,j = 0)
(3,data = 0)
(4,++data)
(5,1)
(6,RET)
(7,&data)
(8,result)
(9,data)
(10,printUnsignedLine(result)
(11,i = 0)
(12,stdin)
(13,j)
(14,0)
(15,i)
(16,j < 1)
(17,data)
(18,i++)
(19,for(j = 0; j < 1; j++)
(20,i)
(21,i)
(22,data)
(23,)
(24,0)
(25,)
(26,data)
(27,for(i = 0; i < 1; i++)
(28,data)
(29,1)
(30,i < 1)
(31,j++)
(32,"%u")
(33,i)
(34,result)
(35,result = data)
(36,j)
(37,0)
(38,)
(39,result)
(40,j)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^