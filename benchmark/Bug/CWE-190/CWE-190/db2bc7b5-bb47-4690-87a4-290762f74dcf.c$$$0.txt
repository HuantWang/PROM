-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,35,37,41,43
-----computeFrom-----
12,13
12,14
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_01_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fscanf_square_01_bad()
CWE190_Integer_Overflow__int_fscanf_square_01_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(19,17,0)
(14,4,0)
(5,4,0)
(0,15,0)
(5,17,0)
(9,15,0)
(7,2,0)
(18,2,0)
(2,9,0)
(18,15,0)
(10,5,0)
(4,17,0)
(16,14,0)
(3,18,0)
(12,9,0)
(6,18,0)
(1,9,0)
(4,14,0)
(13,4,0)
(8,14,0)
(17,15,0)
(2,18,0)
(14,9,0)
(18,2,1)
(7,3,1)
(1,12,1)
(16,13,1)
(3,6,1)
(2,9,1)
(9,1,1)
(5,4,1)
(4,14,1)
(6,9,1)
(14,9,1)
(10,4,1)
(14,8,1)
(8,16,1)
(13,18,1)
(11,5,1)
(5,10,1)
(2,7,1)
(5,4,2)
(2,9,2)
(4,14,2)
(14,9,2)
(18,2,2)
-----------------------------------
(0,data)
(1,0)
(2,&data)
(3,"%d")
(4,result = data * data)
(5,printIntLine(result)
(6,stdin)
(7,data)
(8,data)
(9,data = 0)
(10,result)
(11,RET)
(12,data)
(13,result)
(14,data * data)
(15,)
(16,data)
(17,)
(18,fscanf(stdin, "%d", &data)
(19,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^