-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_preinc_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_max_preinc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
48,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,51,54,56,59,63,65
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_preinc_34_bad(){    int data;    CWE190_Integer_Overflow__int_max_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_preinc_34_bad()
CWE190_Integer_Overflow__int_max_preinc_34_bad
{    int data;    CWE190_Integer_Overflow__int_max_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_max_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_preinc_34_unionType
CWE190_Integer_Overflow__int_max_preinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,17,0)
(25,23,0)
(12,7,0)
(26,10,0)
(13,26,0)
(17,16,0)
(18,14,0)
(7,17,0)
(8,4,0)
(4,10,0)
(7,10,0)
(3,22,0)
(1,24,0)
(0,21,0)
(19,2,0)
(27,14,0)
(2,23,0)
(23,22,0)
(28,16,0)
(29,26,0)
(16,22,0)
(10,4,0)
(30,23,0)
(5,24,0)
(24,2,0)
(26,17,0)
(21,26,0)
(10,16,0)
(14,22,0)
(6,10,0)
(2,22,0)
(11,17,0)
(15,22,0)
(20,4,0)
(23,30,1)
(0,26,1)
(19,24,1)
(20,6,1)
(26,13,1)
(10,4,1)
(7,10,1)
(5,1,1)
(24,5,1)
(26,10,1)
(14,18,1)
(13,29,1)
(9,21,1)
(6,2,1)
(21,26,1)
(30,25,1)
(25,14,1)
(1,23,1)
(2,23,1)
(18,27,1)
(4,8,1)
(12,10,1)
(8,20,1)
(7,12,1)
(2,19,1)
(21,0,1)
(29,7,1)
(21,26,2)
(10,4,2)
(26,10,2)
(7,10,2)
(2,23,2)
-----------------------------------
(0,result)
(1,myUnion)
(2,myUnion.unionFirst = data)
(3,data)
(4,myUnion.unionSecond)
(5,unionFirst)
(6,data)
(7,++data)
(8,unionSecond)
(9,RET)
(10,data = myUnion.unionSecond)
(11,result)
(12,data)
(13,data)
(14,data = 0)
(15,myUnion)
(16,)
(17,)
(18,0)
(19,data)
(20,myUnion)
(21,printIntLine(result)
(22,)
(23,data = INT_MAX)
(24,myUnion.unionFirst)
(25,data)
(26,result = data)
(27,data)
(28,data)
(29,result)
(30,INT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^