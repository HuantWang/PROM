-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_18_bad()
{
    short data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,32,34,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_18_bad(){    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_rand_multiply_18_bad()
CWE190_Integer_Overflow__short_rand_multiply_18_bad
{    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();
source
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(17,3,0)
(14,10,0)
(9,4,0)
(22,3,0)
(12,13,0)
(19,10,0)
(1,14,0)
(25,6,0)
(20,12,0)
(16,14,0)
(21,25,0)
(4,9,0)
(3,6,0)
(2,10,0)
(0,10,0)
(12,4,0)
(24,4,0)
(8,10,0)
(27,10,0)
(18,10,0)
(11,9,0)
(5,9,0)
(3,17,0)
(9,6,0)
(15,6,0)
(4,13,0)
(6,3,0)
(6,10,0)
(26,25,0)
(3,22,0)
(23,13,0)
(15,8,1)
(3,17,1)
(27,6,1)
(14,16,1)
(5,11,1)
(16,1,1)
(20,4,1)
(7,25,1)
(25,26,1)
(11,24,1)
(8,14,1)
(12,4,1)
(25,6,1)
(21,27,1)
(4,9,1)
(7,12,1)
(9,6,1)
(9,5,1)
(6,3,1)
(3,22,1)
(24,25,1)
(17,15,1)
(26,21,1)
(12,20,1)
(9,6,2)
(12,4,2)
(6,3,2)
(12,25,2)
(4,25,2)
(3,17,2)
(24,25,2)
(25,6,2)
(11,25,2)
(5,25,2)
(4,9,2)
(9,25,2)
(20,25,2)
(3,22,2)
-----------------------------------
(0,source:)
(1,data)
(2,data)
(3,(short)
(4,result = data * 2)
(5,2)
(6,data = (short)
(7,RET)
(8,goto source;)
(9,data * 2)
(10,)
(11,data)
(12,printIntLine(result)
(13,)
(14,data = 0)
(15,data)
(16,0)
(17,RAND32()
(18,if(data > 0)
(19,sink:)
(20,result)
(21,data)
(22,short)
(23,result)
(24,result)
(25,data > 0)
(26,0)
(27,goto sink;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^