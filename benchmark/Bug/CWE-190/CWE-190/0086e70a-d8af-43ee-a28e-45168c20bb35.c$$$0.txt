-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (CHAR_MAX/2))
            {
                char result = data * 2;
                printHexCharLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,46,50,52,56,57,61,63,68,69,74,78,79,83,85,89,90,94,96,101,102
-----computeFrom-----
12,13
12,14
33,34
33,35
43,44
43,45
54,55
54,56
66,67
66,68
72,73
72,74
76,77
76,78
87,88
87,89
-----guardedBy-----
45,56
68,89
74,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_12_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (CHAR_MAX/2)
data
data
(CHAR_MAX/2)
CHAR_MAX/2
CHAR_MAX
CHAR_MAX
2
{                char result = data * 2;                printHexCharLine(result);            }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,25,0)
(29,3,0)
(49,57,0)
(26,6,0)
(31,13,0)
(20,57,0)
(32,16,0)
(6,33,0)
(12,22,0)
(29,57,0)
(10,3,0)
(38,10,0)
(34,51,0)
(20,44,0)
(23,6,0)
(1,45,0)
(20,3,0)
(39,12,0)
(29,51,0)
(10,4,0)
(28,3,0)
(36,25,0)
(7,48,0)
(34,11,0)
(57,14,0)
(37,51,0)
(0,56,0)
(3,16,0)
(42,34,0)
(50,44,0)
(15,44,0)
(53,11,0)
(19,46,0)
(47,48,0)
(17,21,0)
(45,3,0)
(27,16,0)
(35,7,0)
(6,46,0)
(45,57,0)
(52,29,0)
(46,3,0)
(30,16,0)
(9,45,0)
(2,29,0)
(18,4,0)
(24,10,0)
(4,10,0)
(25,3,0)
(55,20,0)
(51,29,0)
(41,3,0)
(10,57,0)
(7,4,0)
(44,20,0)
(54,57,0)
(51,11,0)
(25,57,0)
(4,48,0)
(46,6,0)
(38,24,1)
(6,46,1)
(3,41,1)
(29,3,1)
(45,3,1)
(10,3,1)
(20,44,1)
(54,43,1)
(37,45,1)
(18,20,1)
(2,52,1)
(49,54,1)
(24,18,1)
(45,1,1)
(50,55,1)
(5,6,1)
(34,51,1)
(8,34,1)
(8,25,1)
(41,28,1)
(19,23,1)
(46,19,1)
(51,29,1)
(1,9,1)
(8,7,1)
(46,3,1)
(23,26,1)
(52,37,1)
(25,3,1)
(9,5,1)
(15,50,1)
(4,10,1)
(40,36,1)
(39,20,1)
(12,39,1)
(8,12,1)
(29,2,1)
(42,51,1)
(7,35,1)
(5,57,1)
(20,57,1)
(55,25,1)
(25,40,1)
(7,4,1)
(29,57,1)
(10,57,1)
(25,57,1)
(8,45,1)
(35,4,1)
(10,38,1)
(26,43,1)
(20,3,1)
(34,42,1)
(36,5,1)
(57,49,1)
(43,3,1)
(44,15,1)
(45,57,1)
(9,5,2)
(6,43,2)
(29,45,2)
(46,3,2)
(6,46,2)
(25,5,2)
(15,25,2)
(45,5,2)
(45,57,2)
(29,57,2)
(20,44,2)
(25,3,2)
(10,20,2)
(24,20,2)
(19,43,2)
(29,3,2)
(20,3,2)
(55,25,2)
(35,20,2)
(42,45,2)
(54,43,2)
(44,25,2)
(4,20,2)
(57,43,2)
(34,45,2)
(10,3,2)
(20,25,2)
(52,45,2)
(34,51,2)
(39,20,2)
(51,29,2)
(4,10,2)
(26,43,2)
(38,20,2)
(23,43,2)
(36,5,2)
(50,25,2)
(1,5,2)
(40,5,2)
(7,4,2)
(10,57,2)
(2,45,2)
(46,43,2)
(51,45,2)
(12,20,2)
(45,3,2)
(37,45,2)
(18,20,2)
(20,57,2)
(49,43,2)
(25,57,2)
(7,20,2)
-----------------------------------
(0,if(data > 0)
(1,0)
(2,2)
(3,data = \\\' \\\')
(4,result = data * 2)
(5,globalReturnsTrueOrFalse()
(6,fscanf (stdin, "%c", &data)
(7,printHexCharLine(result)
(8,RET)
(9,data)
(10,data * 2)
(11,)
(12,printLine("data value is too large to perform arithmetic safely.")
(13,)
(14,)
(15,2)
(16,)
(17,if(data > 0)
(18,result)
(19,data)
(20,data < (CHAR_MAX/2)
(21,)
(22,)
(23,"%c")
(24,data)
(25,data > 0)
(26,stdin)
(27,if(globalReturnsTrueOrFalse()
(28,data)
(29,data * 2)
(30,if(globalReturnsTrueOrFalse()
(31,if (data < (CHAR_MAX/2)
(32,data)
(33,)
(34,printHexCharLine(result)
(35,result)
(36,data)
(37,result)
(38,2)
(39,"data value is too large to perform arithmetic safely.")
(40,0)
(41,\\\' \\\')
(42,result)
(43,globalReturnsTrueOrFalse()
(44,CHAR_MAX/2)
(45,data > 0)
(46,&data)
(47,result)
(48,)
(49,2)
(50,CHAR_MAX)
(51,result = data * 2)
(52,data)
(53,result)
(54,data)
(55,data)
(56,)
(57,data = 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^