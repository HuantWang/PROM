-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
82,83
84,85
84,86
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,55,60,62,67,69,73,77,78,83,85,89,90,94,96
-----computeFrom-----
35,36
35,37
51,52
51,53
57,58
57,59
75,76
75,77
87,88
87,89
-----guardedBy-----
77,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_32_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(41,31,0)
(40,42,0)
(13,0,0)
(45,17,0)
(23,26,0)
(1,22,0)
(36,31,0)
(26,41,0)
(34,42,0)
(38,1,0)
(4,22,0)
(5,31,0)
(3,16,0)
(7,30,0)
(42,13,0)
(27,11,0)
(24,31,0)
(24,30,0)
(33,26,0)
(35,5,0)
(6,31,0)
(1,11,0)
(35,17,0)
(30,24,0)
(17,20,0)
(19,20,0)
(11,27,0)
(10,31,0)
(27,13,0)
(12,33,0)
(15,43,0)
(29,35,0)
(39,24,0)
(5,16,0)
(43,13,0)
(0,31,0)
(2,41,0)
(11,22,0)
(18,31,0)
(32,13,0)
(28,11,0)
(33,5,0)
(8,27,0)
(14,20,0)
(21,5,0)
(13,43,0)
(44,0,0)
(43,24,0)
(16,5,0)
(37,0,0)
(25,27,0)
(20,41,0)
(17,41,0)
(26,33,0)
(8,25,1)
(35,5,1)
(27,8,1)
(3,21,1)
(25,28,1)
(42,13,1)
(45,35,1)
(40,13,1)
(34,40,1)
(20,14,1)
(17,20,1)
(5,16,1)
(26,33,1)
(30,7,1)
(43,15,1)
(11,27,1)
(9,1,1)
(15,32,1)
(6,24,1)
(12,23,1)
(32,17,1)
(7,39,1)
(1,11,1)
(35,29,1)
(33,5,1)
(38,11,1)
(13,43,1)
(23,6,1)
(42,34,1)
(24,30,1)
(39,5,1)
(33,12,1)
(16,3,1)
(28,42,1)
(27,13,1)
(19,26,1)
(1,38,1)
(43,24,1)
(17,45,1)
(29,20,1)
(9,42,1)
(14,19,1)
(11,27,2)
(5,16,2)
(42,13,2)
(26,33,2)
(43,24,2)
(1,42,2)
(25,42,2)
(35,5,2)
(13,43,2)
(28,42,2)
(1,11,2)
(17,20,2)
(27,42,2)
(11,42,2)
(27,13,2)
(24,30,2)
(8,42,2)
(38,42,2)
(33,5,2)
-----------------------------------
(0,)
(1,printLongLongLine(result)
(2,data)
(3,data)
(4,result)
(5,*dataPtr1 = &data)
(6,L)
(7,data)
(8,2)
(9,RET)
(10,dataPtr2)
(11,result = data * 2)
(12,dataPtr1)
(13,data = *dataPtr2)
(14,LLONG_MAX)
(15,dataPtr2)
(16,&data)
(17,*dataPtr1 = data)
(18,dataPtr1)
(19,data)
(20,data = LLONG_MAX)
(21,dataPtr1)
(22,)
(23,data)
(24,*dataPtr2 = &data)
(25,data)
(26,data = *dataPtr1)
(27,data * 2)
(28,result)
(29,dataPtr1)
(30,&data)
(31,)
(32,data)
(33,*dataPtr1)
(34,0)
(35,*dataPtr1)
(36,data)
(37,if(data > 0)
(38,result)
(39,dataPtr2)
(40,data)
(41,)
(42,data > 0)
(43,*dataPtr2)
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^