-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_09_bad()
CWE190_Integer_Overflow__char_rand_preinc_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,11,0)
(5,21,0)
(6,19,0)
(15,12,0)
(7,15,0)
(5,10,0)
(14,11,0)
(4,19,0)
(21,1,0)
(1,15,0)
(17,21,0)
(24,1,0)
(20,21,0)
(1,25,0)
(12,15,0)
(22,19,0)
(0,10,0)
(18,5,0)
(21,10,0)
(23,11,0)
(14,1,0)
(16,11,0)
(15,1,0)
(10,9,0)
(13,14,0)
(15,7,0)
(11,19,0)
(14,10,0)
(1,15,1)
(14,11,1)
(21,20,1)
(3,8,1)
(18,21,1)
(2,3,1)
(8,11,1)
(15,7,1)
(13,3,1)
(14,1,1)
(15,12,1)
(21,1,1)
(3,1,1)
(5,21,1)
(17,14,1)
(20,17,1)
(24,8,1)
(21,11,1)
(11,16,1)
(16,23,1)
(14,13,1)
(5,18,1)
(7,24,1)
(2,5,1)
(5,3,2)
(14,11,2)
(1,8,2)
(14,1,2)
(5,21,2)
(14,3,2)
(21,3,2)
(24,8,2)
(15,7,2)
(13,3,2)
(7,8,2)
(17,3,2)
(1,15,2)
(21,1,2)
(18,3,2)
(15,8,2)
(21,11,2)
(20,3,2)
(15,12,2)
-----------------------------------
(0,result)
(1,data = (char)
(2,RET)
(3,GLOBAL_CONST_TRUE)
(4,if(GLOBAL_CONST_TRUE)
(5,printHexCharLine(result)
(6,if(GLOBAL_CONST_TRUE)
(7,RAND32()
(8,GLOBAL_CONST_TRUE)
(9,)
(10,)
(11,data = ' ')
(12,char)
(13,data)
(14,++data)
(15,(char)
(16,' ')
(17,result)
(18,result)
(19,)
(20,data)
(21,result = data)
(22,data)
(23,data)
(24,data)
(25,)
(26,data = \' \')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^