-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (CHAR_MAX/2))
            {
                char result = data * 2;
                printHexCharLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
72,73
72,74
72,75
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,47,51,53,57,58,62,64,69,70,75,79,80,84,86,90,91,95,97,102,103
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
44,45
44,46
55,56
55,57
67,68
67,69
73,74
73,75
77,78
77,79
88,89
88,90
-----guardedBy-----
46,57
69,90
75,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_12_bad()
CWE190_Integer_Overflow__char_rand_multiply_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (CHAR_MAX/2)
data
data
(CHAR_MAX/2)
CHAR_MAX/2
CHAR_MAX
CHAR_MAX
2
{                char result = data * 2;                printHexCharLine(result);            }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,2,0)
(44,34,0)
(43,11,0)
(1,57,0)
(16,4,0)
(43,26,0)
(46,13,0)
(27,2,0)
(29,23,0)
(7,36,0)
(4,23,0)
(11,43,0)
(48,19,0)
(50,29,0)
(10,23,0)
(39,13,0)
(0,19,0)
(57,26,0)
(29,26,0)
(14,23,0)
(54,23,0)
(31,4,0)
(17,46,0)
(3,12,0)
(54,26,0)
(14,21,0)
(55,42,0)
(11,12,0)
(29,19,0)
(5,43,0)
(8,13,0)
(40,41,0)
(23,22,0)
(35,21,0)
(23,4,0)
(37,51,0)
(28,14,0)
(57,23,0)
(47,26,0)
(45,56,0)
(43,23,0)
(34,12,0)
(19,29,0)
(26,25,0)
(21,14,0)
(15,45,0)
(4,31,0)
(51,2,0)
(49,14,0)
(18,57,0)
(51,21,0)
(30,43,0)
(38,11,0)
(24,54,0)
(14,26,0)
(34,11,0)
(9,46,0)
(33,54,0)
(6,13,0)
(4,16,0)
(53,26,0)
(52,23,1)
(51,21,1)
(20,51,1)
(48,0,1)
(34,11,1)
(14,28,1)
(29,26,1)
(37,21,1)
(52,26,1)
(18,1,1)
(20,45,1)
(35,54,1)
(5,30,1)
(29,23,1)
(54,24,1)
(51,37,1)
(0,50,1)
(54,23,1)
(14,26,1)
(47,32,1)
(34,44,1)
(9,17,1)
(29,19,1)
(57,23,1)
(46,9,1)
(19,48,1)
(57,18,1)
(15,29,1)
(14,23,1)
(44,11,1)
(30,38,1)
(43,26,1)
(38,29,1)
(16,10,1)
(49,35,1)
(10,32,1)
(11,43,1)
(43,23,1)
(1,52,1)
(20,34,1)
(43,5,1)
(26,53,1)
(53,47,1)
(21,14,1)
(45,15,1)
(33,52,1)
(20,57,1)
(4,16,1)
(32,46,1)
(4,31,1)
(54,26,1)
(57,26,1)
(50,57,1)
(24,33,1)
(23,4,1)
(28,49,1)
(20,54,1)
(29,57,2)
(4,31,2)
(0,57,2)
(34,11,2)
(29,23,2)
(43,26,2)
(47,32,2)
(26,32,2)
(50,57,2)
(43,29,2)
(53,32,2)
(30,29,2)
(23,4,2)
(57,26,2)
(43,23,2)
(38,29,2)
(18,52,2)
(44,29,2)
(11,29,2)
(10,32,2)
(54,23,2)
(33,52,2)
(4,32,2)
(24,52,2)
(16,32,2)
(29,26,2)
(15,29,2)
(21,54,2)
(48,57,2)
(4,16,2)
(1,52,2)
(57,23,2)
(14,23,2)
(11,43,2)
(51,21,2)
(19,57,2)
(14,26,2)
(5,29,2)
(23,32,2)
(54,52,2)
(35,54,2)
(37,54,2)
(14,54,2)
(45,29,2)
(57,52,2)
(21,14,2)
(28,54,2)
(34,29,2)
(29,19,2)
(49,54,2)
(54,26,2)
(51,54,2)
-----------------------------------
(0,CHAR_MAX)
(1,data)
(2,)
(3,result)
(4,(char)
(5,2)
(6,data)
(7,if(data > 0)
(8,if(globalReturnsTrueOrFalse()
(9,\\\' \\\')
(10,data)
(11,result = data * 2)
(12,)
(13,)
(14,data * 2)
(15,"data value is too large to perform arithmetic safely.")
(16,RAND32()
(17,data)
(18,0)
(19,CHAR_MAX/2)
(20,RET)
(21,result = data * 2)
(22,)
(23,data = (char)
(24,0)
(25,)
(26,data = 2)
(27,result)
(28,2)
(29,data < (CHAR_MAX/2)
(30,data)
(31,char)
(32,globalReturnsTrueOrFalse()
(33,data)
(34,printHexCharLine(result)
(35,result)
(36,)
(37,result)
(38,result)
(39,if(globalReturnsTrueOrFalse()
(40,if (data < (CHAR_MAX/2)
(41,)
(42,)
(43,data * 2)
(44,result)
(45,printLine("data value is too large to perform arithmetic safely.")
(46,data = \\\' \\\')
(47,data)
(48,2)
(49,data)
(50,data)
(51,printHexCharLine(result)
(52,globalReturnsTrueOrFalse()
(53,2)
(54,data > 0)
(55,if(data > 0)
(56,)
(57,data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^