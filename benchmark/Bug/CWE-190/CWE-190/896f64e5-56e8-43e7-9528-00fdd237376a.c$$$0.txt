-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
32,35
33,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,36,39,41,44,48,50
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_02_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(4,12,0)
(3,23,0)
(14,12,0)
(23,10,0)
(10,12,0)
(10,23,0)
(8,12,0)
(6,23,0)
(13,9,0)
(12,24,0)
(11,24,0)
(21,24,0)
(23,16,0)
(22,15,0)
(18,8,0)
(9,22,0)
(20,10,0)
(9,12,0)
(0,8,0)
(5,0,0)
(17,24,0)
(8,22,0)
(0,22,0)
(19,8,0)
(7,22,0)
(20,6,1)
(23,10,1)
(6,3,1)
(1,2,1)
(10,12,1)
(18,19,1)
(9,12,1)
(10,20,1)
(1,23,1)
(0,5,1)
(3,2,1)
(2,12,1)
(19,9,1)
(14,4,1)
(8,18,1)
(8,12,1)
(9,13,1)
(0,8,1)
(13,1,1)
(12,14,1)
(5,8,1)
(25,0,1)
(25,1,1)
(0,1,2)
(3,2,2)
(10,12,2)
(23,2,2)
(18,1,2)
(23,10,2)
(8,1,2)
(9,12,2)
(9,1,2)
(8,12,2)
(13,1,2)
(5,1,2)
(19,1,2)
(0,8,2)
(20,2,2)
(10,2,2)
(6,2,2)
-----------------------------------
(0,printHexCharLine(result)
(1,1)
(2,1)
(3,stdin)
(4,data)
(5,result)
(6,"%c")
(7,result)
(8,result = data)
(9,data++)
(10,&data)
(11,data)
(12,data = \\\' \\\')
(13,data)
(14,\\\' \\\')
(15,)
(16,)
(17,if(1)
(18,data)
(19,result)
(20,data)
(21,if(1)
(22,)
(23,fscanf (stdin, "%c", &data)
(24,)
(25,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^