-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_preinc_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        unsigned int result = data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_preinc_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_preinc_15_bad()
CWE190_Integer_Overflow__unsigned_int_max_preinc_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(7,30,0)
(8,35,0)
(21,2,0)
(3,30,0)
(2,35,0)
(32,15,0)
(6,29,0)
(13,15,0)
(26,29,0)
(5,35,0)
(18,30,0)
(16,35,0)
(1,24,0)
(23,18,0)
(31,32,0)
(22,30,0)
(14,30,0)
(4,35,0)
(15,35,0)
(32,24,0)
(33,22,0)
(17,32,0)
(17,15,0)
(24,29,0)
(27,13,0)
(0,15,0)
(19,30,0)
(11,17,0)
(13,22,0)
(12,24,0)
(32,22,0)
(28,22,0)
(13,24,0)
(34,32,0)
(9,29,0)
(13,24,1)
(33,25,1)
(32,22,1)
(11,32,1)
(5,17,1)
(13,22,1)
(34,13,1)
(22,28,1)
(16,2,1)
(23,25,1)
(2,21,1)
(31,34,1)
(21,20,1)
(17,11,1)
(18,23,1)
(27,20,1)
(10,5,1)
(13,27,1)
(12,1,1)
(10,16,1)
(20,14,1)
(25,24,1)
(17,32,1)
(20,19,1)
(19,18,1)
(28,33,1)
(14,22,1)
(32,31,1)
(32,24,1)
(24,12,1)
(22,25,2)
(11,20,2)
(34,20,2)
(13,24,2)
(13,20,2)
(27,20,2)
(17,32,2)
(16,20,2)
(13,22,2)
(5,20,2)
(2,20,2)
(32,22,2)
(17,20,2)
(28,25,2)
(33,25,2)
(19,25,2)
(23,25,2)
(32,20,2)
(21,20,2)
(18,25,2)
(14,25,2)
(31,20,2)
(32,24,2)
-----------------------------------
(0,result)
(1,data)
(2,printLine("Benign, fixed string")
(3,case 6:)
(4,case 7:)
(5,break;)
(6,switch(7)
(7,default:)
(8,default:)
(9,data)
(10,RET)
(11,result)
(12,0)
(13,++data)
(14,break;)
(15,)
(16,break;)
(17,printUnsignedLine(result)
(18,printLine("Benign, fixed string")
(19,break;)
(20,7)
(21,"Benign, fixed string")
(22,data = UINT_MAX)
(23,"Benign, fixed string")
(24,data = 0)
(25,6)
(26,switch(6)
(27,data)
(28,UINT_MAX)
(29,)
(30,)
(31,data)
(32,result = data)
(33,data)
(34,result)
(35,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^