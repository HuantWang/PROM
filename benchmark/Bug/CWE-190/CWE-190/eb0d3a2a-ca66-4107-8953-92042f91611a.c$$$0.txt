-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_13_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_13_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_13_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_13_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(3,22,0)
(6,7,0)
(19,7,0)
(24,18,0)
(4,11,0)
(17,8,0)
(18,7,0)
(23,21,0)
(7,18,0)
(14,15,0)
(9,12,0)
(0,12,0)
(1,21,0)
(25,8,0)
(11,5,0)
(6,22,0)
(13,15,0)
(21,12,0)
(2,12,0)
(18,11,0)
(7,22,0)
(18,21,0)
(16,6,0)
(10,18,0)
(22,20,0)
(26,11,0)
(16,7,1)
(23,1,1)
(6,7,1)
(18,24,1)
(7,18,1)
(18,11,1)
(10,19,1)
(27,15,1)
(14,13,1)
(27,6,1)
(13,8,1)
(17,25,1)
(6,16,1)
(15,14,1)
(13,11,1)
(11,26,1)
(4,8,1)
(25,21,1)
(26,4,1)
(8,17,1)
(21,23,1)
(19,15,1)
(24,10,1)
(18,21,1)
(6,7,2)
(18,11,2)
(18,21,2)
(19,15,2)
(26,8,2)
(24,15,2)
(6,15,2)
(7,15,2)
(16,15,2)
(11,8,2)
(4,8,2)
(18,15,2)
(7,18,2)
(10,15,2)
-----------------------------------
(0,data)
(1,data)
(2,if(GLOBAL_CONST_FIVE==5)
(3,result)
(4,data)
(5,)
(6,printUnsignedLine(result)
(7,result = data * data)
(8,GLOBAL_CONST_FIVE==5)
(9,if(GLOBAL_CONST_FIVE==5)
(10,data)
(11,data = UINT_MAX)
(12,)
(13,GLOBAL_CONST_FIVE)
(14,5)
(15,GLOBAL_CONST_FIVE==5)
(16,result)
(17,5)
(18,data * data)
(19,result)
(20,)
(21,data = 0)
(22,)
(23,0)
(24,data)
(25,GLOBAL_CONST_FIVE)
(26,UINT_MAX)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^