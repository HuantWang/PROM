-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_10_bad()
{
    short data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_10_bad(){    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_10_bad()
CWE190_Integer_Overflow__short_rand_square_10_bad
{    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(18,20,0)
(20,18,0)
(15,21,0)
(22,10,0)
(8,9,0)
(25,20,0)
(6,15,0)
(5,13,0)
(11,24,0)
(10,13,0)
(4,15,0)
(15,13,0)
(10,7,0)
(7,17,0)
(3,21,0)
(19,24,0)
(2,24,0)
(20,21,0)
(13,15,0)
(13,7,0)
(1,9,0)
(15,9,0)
(21,20,0)
(20,25,0)
(23,7,0)
(21,12,0)
(9,24,0)
(10,13,1)
(0,21,1)
(15,9,1)
(14,10,1)
(3,16,1)
(21,20,1)
(20,25,1)
(8,1,1)
(20,18,1)
(4,5,1)
(16,9,1)
(14,0,1)
(18,3,1)
(9,8,1)
(6,4,1)
(22,13,1)
(0,16,1)
(5,0,1)
(13,15,1)
(15,6,1)
(15,21,1)
(10,22,1)
(3,16,2)
(5,0,2)
(4,0,2)
(15,0,2)
(22,0,2)
(10,13,2)
(21,20,2)
(13,0,2)
(20,18,2)
(6,0,2)
(20,16,2)
(20,25,2)
(15,9,2)
(13,15,2)
(15,21,2)
(21,16,2)
(18,16,2)
(10,0,2)
-----------------------------------
(0,globalTrue)
(1,data)
(2,data)
(3,data)
(4,data)
(5,result)
(6,data)
(7,)
(8,0)
(9,data = 0)
(10,printIntLine(result)
(11,if(globalTrue)
(12,)
(13,result = data * data)
(14,RET)
(15,data * data)
(16,globalTrue)
(17,)
(18,RAND32()
(19,if(globalTrue)
(20,(short)
(21,data = (short)
(22,result)
(23,result)
(24,)
(25,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^