-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,32,36,38,42,43,47,49
-----computeFrom-----
12,13
12,14
20,21
20,22
29,30
29,31
40,41
40,42
-----guardedBy-----
31,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_02_bad()
CWE190_Integer_Overflow__char_max_multiply_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(22,21,0)
(16,9,0)
(25,4,0)
(2,21,0)
(17,4,0)
(19,16,0)
(20,19,0)
(26,9,0)
(0,9,0)
(21,28,0)
(18,10,0)
(17,2,0)
(3,19,0)
(2,4,0)
(6,9,0)
(19,28,0)
(14,2,0)
(13,16,0)
(21,16,0)
(5,16,0)
(15,28,0)
(12,28,0)
(21,2,0)
(28,27,0)
(23,17,0)
(8,21,0)
(19,28,1)
(5,13,1)
(23,2,1)
(21,28,1)
(1,19,1)
(21,8,1)
(17,23,1)
(11,16,1)
(19,20,1)
(2,21,1)
(8,22,1)
(28,12,1)
(12,15,1)
(1,17,1)
(16,5,1)
(17,2,1)
(14,19,1)
(22,14,1)
(3,7,1)
(21,16,1)
(20,3,1)
(1,7,1)
(7,11,1)
(15,11,1)
(7,28,1)
(19,16,1)
(2,21,2)
(21,28,2)
(2,19,2)
(19,28,2)
(12,11,2)
(21,16,2)
(19,16,2)
(28,11,2)
(17,19,2)
(8,19,2)
(3,7,2)
(21,19,2)
(19,7,2)
(17,2,2)
(23,19,2)
(15,11,2)
(14,19,2)
(20,7,2)
(22,19,2)
-----------------------------------
(0,data)
(1,RET)
(2,result = data * 2)
(3,data)
(4,)
(5,' ')
(6,if(1)
(7,1)
(8,2)
(9,)
(10,)
(11,1)
(12,CHAR_MAX)
(13,data)
(14,result)
(15,data)
(16,data = \' \')
(17,printHexCharLine(result)
(18,if(data > 0)
(19,data > 0)
(20,0)
(21,data * 2)
(22,data)
(23,result)
(24,data = ' ')
(25,result)
(26,if(1)
(27,)
(28,data = CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^