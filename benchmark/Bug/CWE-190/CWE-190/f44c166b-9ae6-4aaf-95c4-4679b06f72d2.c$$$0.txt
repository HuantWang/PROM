-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_rand_add_15_bad()
CWE190_Integer_Overflow__char_rand_add_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(22,10,0)
(37,15,0)
(13,21,0)
(8,20,0)
(19,14,0)
(10,30,0)
(12,18,0)
(10,21,0)
(29,34,0)
(34,15,0)
(9,6,0)
(18,12,0)
(16,2,0)
(21,12,0)
(14,6,0)
(36,15,0)
(12,21,0)
(2,5,0)
(28,20,0)
(2,30,0)
(26,5,0)
(10,14,0)
(35,14,0)
(31,15,0)
(5,15,0)
(23,30,0)
(12,33,0)
(17,20,0)
(30,5,0)
(33,12,0)
(11,20,0)
(1,28,0)
(21,20,0)
(7,6,0)
(30,10,0)
(27,15,0)
(0,6,0)
(25,20,0)
(4,10,0)
(23,24,1)
(13,3,1)
(3,14,1)
(22,23,1)
(21,12,1)
(18,13,1)
(29,24,1)
(10,14,1)
(31,2,1)
(14,35,1)
(2,30,1)
(10,4,1)
(25,21,1)
(8,28,1)
(32,37,1)
(12,33,1)
(4,22,1)
(10,21,1)
(34,29,1)
(1,3,1)
(24,25,1)
(24,8,1)
(37,34,1)
(16,30,1)
(28,1,1)
(12,18,1)
(32,31,1)
(2,16,1)
(30,10,1)
(35,19,1)
(25,3,2)
(13,3,2)
(12,18,2)
(28,3,2)
(34,24,2)
(22,24,2)
(31,24,2)
(4,24,2)
(12,3,2)
(18,3,2)
(21,12,2)
(12,33,2)
(29,24,2)
(30,10,2)
(16,24,2)
(8,3,2)
(23,24,2)
(21,3,2)
(10,14,2)
(2,30,2)
(10,24,2)
(1,3,2)
(10,21,2)
(2,24,2)
(37,24,2)
(30,24,2)
-----------------------------------
(0,switch(7)
(1,"Benign, fixed string")
(2,printHexCharLine(result)
(3,6)
(4,1)
(5,)
(6,)
(7,data)
(8,break;)
(9,switch(6)
(10,data + 1)
(11,default:)
(12,(char)
(13,data)
(14,data = \\\' \\\')
(15,)
(16,result)
(17,case 6:)
(18,RAND32()
(19,data)
(20,)
(21,data = (char)
(22,data)
(23,result)
(24,7)
(25,break;)
(26,result)
(27,case 7:)
(28,printLine("Benign, fixed string")
(29,"Benign, fixed string")
(30,result = data + 1)
(31,break;)
(32,RET)
(33,char)
(34,printLine("Benign, fixed string")
(35,\\\' \\\')
(36,default:)
(37,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^