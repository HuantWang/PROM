-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_63b_badSink(char * dataPtr)
{
    char data = *dataPtr;
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
21,22
22,23
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,6,8,9,13,15,19,24,27,29,32,36,38
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_63b_badSink(char * dataPtr){    char data = *dataPtr;    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_postinc_63b_badSink(char * dataPtr)
CWE190_Integer_Overflow__char_rand_postinc_63b_badSink
char * dataPtr
char
* dataPtr
*
dataPtr
{    char data = *dataPtr;    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
char data = *dataPtr;
char data = *dataPtr;
char
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,12,0)
(7,4,0)
(12,7,0)
(3,4,0)
(7,1,0)
(5,4,0)
(10,7,0)
(0,7,0)
(15,8,0)
(10,5,0)
(1,13,0)
(12,5,0)
(8,5,0)
(6,1,0)
(16,12,0)
(11,10,0)
(1,7,0)
(8,12,0)
(14,5,0)
(11,7,1)
(1,13,1)
(12,9,1)
(15,12,1)
(6,0,1)
(16,10,1)
(12,7,1)
(10,7,1)
(7,1,1)
(9,16,1)
(2,8,1)
(8,12,1)
(10,11,1)
(8,15,1)
(1,6,1)
(10,7,2)
(8,12,2)
(12,7,2)
(7,1,2)
(1,13,2)
-----------------------------------
(0,data)
(1,*dataPtr)
(2,RET)
(3,data)
(4,)
(5,)
(6,dataPtr)
(7,data = *dataPtr)
(8,printHexCharLine(result)
(9,data)
(10,data++)
(11,data)
(12,result = data)
(13,char * dataPtr)
(14,result)
(15,result)
(16,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^