-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_03_bad()
CWE190_Integer_Overflow__char_rand_square_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(26,14,0)
(25,2,0)
(6,11,0)
(2,25,0)
(16,2,0)
(28,27,0)
(19,4,0)
(24,10,0)
(9,23,0)
(9,10,0)
(2,14,0)
(10,24,0)
(25,4,0)
(13,2,0)
(18,29,0)
(8,27,0)
(14,21,0)
(12,9,0)
(11,25,0)
(0,14,0)
(7,21,0)
(1,21,0)
(10,9,0)
(15,10,0)
(17,29,0)
(10,15,0)
(2,9,0)
(22,25,0)
(4,5,0)
(3,21,0)
(11,4,0)
(16,13,1)
(28,8,1)
(2,9,1)
(9,10,1)
(22,27,1)
(30,27,1)
(12,29,1)
(6,25,1)
(11,6,1)
(17,14,1)
(14,26,1)
(29,18,1)
(25,2,1)
(13,22,1)
(27,28,1)
(10,15,1)
(24,12,1)
(2,14,1)
(11,25,1)
(30,11,1)
(18,17,1)
(8,29,1)
(8,9,1)
(10,24,1)
(26,0,1)
(2,16,1)
(10,29,2)
(24,29,2)
(9,10,2)
(2,9,2)
(6,27,2)
(11,25,2)
(9,29,2)
(25,27,2)
(25,2,2)
(12,29,2)
(13,27,2)
(16,27,2)
(10,15,2)
(10,24,2)
(2,27,2)
(22,27,2)
(2,14,2)
(11,27,2)
-----------------------------------
(0,data)
(1,if(5==5)
(2,data * data)
(3,data)
(4,)
(5,)
(6,result)
(7,if(5==5)
(8,5)
(9,data = (char)
(10,(char)
(11,printHexCharLine(result)
(12,data)
(13,data)
(14,data = ' ')
(15,char)
(16,data)
(17,5)
(18,5)
(19,result)
(20,data = \' \')
(21,)
(22,result)
(23,)
(24,RAND32()
(25,result = data * data)
(26,' ')
(27,5==5)
(28,5)
(29,5==5)
(30,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^