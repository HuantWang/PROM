-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        unsigned int result = data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_postinc_15_bad()
CWE190_Integer_Overflow__unsigned_int_max_postinc_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(0,29,0)
(5,13,0)
(17,13,0)
(2,32,0)
(19,35,0)
(24,22,0)
(14,12,0)
(31,13,0)
(4,13,0)
(25,32,0)
(30,29,0)
(21,18,0)
(20,29,0)
(14,34,0)
(22,12,0)
(22,31,0)
(28,32,0)
(35,31,0)
(18,29,0)
(14,31,0)
(8,34,0)
(26,5,0)
(27,31,0)
(1,29,0)
(7,14,0)
(23,13,0)
(6,12,0)
(10,34,0)
(35,22,0)
(12,29,0)
(22,34,0)
(34,32,0)
(15,13,0)
(3,12,0)
(16,22,0)
(11,30,1)
(7,11,1)
(35,19,1)
(14,7,1)
(34,10,1)
(22,34,1)
(16,14,1)
(3,9,1)
(10,8,1)
(5,26,1)
(14,12,1)
(12,6,1)
(22,24,1)
(26,11,1)
(18,21,1)
(33,4,1)
(35,22,1)
(30,18,1)
(33,23,1)
(24,16,1)
(22,12,1)
(4,35,1)
(6,3,1)
(21,9,1)
(11,0,1)
(19,22,1)
(0,12,1)
(9,34,1)
(23,5,1)
(14,34,1)
(12,9,2)
(26,11,2)
(14,12,2)
(6,9,2)
(30,9,2)
(3,9,2)
(5,11,2)
(22,12,2)
(22,34,2)
(24,11,2)
(16,11,2)
(18,9,2)
(22,11,2)
(7,11,2)
(23,11,2)
(21,9,2)
(35,22,2)
(14,11,2)
(14,34,2)
(4,11,2)
(35,11,2)
(19,11,2)
(0,9,2)
-----------------------------------
(0,break;)
(1,case 6:)
(2,switch(7)
(3,data)
(4,break;)
(5,printLine("Benign, fixed string")
(6,UINT_MAX)
(7,data)
(8,data)
(9,6)
(10,0)
(11,7)
(12,data = UINT_MAX)
(13,)
(14,data++)
(15,default:)
(16,result)
(17,case 7:)
(18,printLine("Benign, fixed string")
(19,result)
(20,default:)
(21,"Benign, fixed string")
(22,result = data)
(23,break;)
(24,data)
(25,switch(6)
(26,"Benign, fixed string")
(27,result)
(28,data)
(29,)
(30,break;)
(31,)
(32,)
(33,RET)
(34,data = 0)
(35,printUnsignedLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^