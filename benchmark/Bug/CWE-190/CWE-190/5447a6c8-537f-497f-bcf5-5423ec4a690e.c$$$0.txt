-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (UINT_MAX/2))
            {
                unsigned int result = data * 2;
                printUnsignedLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,42,46,48,52,53,57,59,64,65,70,74,75,79,81,85,86,90,92,97,98
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
39,40
39,41
50,51
50,52
62,63
62,64
68,69
68,70
72,73
72,74
83,84
83,85
-----guardedBy-----
41,52
64,85
70,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_12_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (UINT_MAX/2)
data
data
(UINT_MAX/2)
UINT_MAX/2
UINT_MAX
UINT_MAX
2
{                unsigned int result = data * 2;                printUnsignedLine(result);            }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(20,29,0)
(18,11,0)
(17,35,0)
(44,51,0)
(43,37,0)
(3,42,0)
(37,10,0)
(23,34,0)
(37,35,0)
(8,38,0)
(35,52,0)
(49,18,0)
(22,38,0)
(0,42,0)
(2,41,0)
(32,13,0)
(13,10,0)
(19,42,0)
(25,37,0)
(9,18,0)
(18,39,0)
(7,39,0)
(26,34,0)
(53,10,0)
(29,34,0)
(16,13,0)
(9,11,0)
(19,13,0)
(55,29,0)
(51,35,0)
(24,34,0)
(3,19,0)
(5,35,0)
(54,19,0)
(46,10,0)
(6,47,0)
(38,22,0)
(13,35,0)
(39,35,0)
(48,4,0)
(50,22,0)
(28,11,0)
(39,18,0)
(21,9,0)
(13,19,0)
(15,51,0)
(51,10,0)
(31,39,0)
(39,10,0)
(10,33,0)
(27,36,0)
(12,3,0)
(22,35,0)
(14,38,0)
(22,10,0)
(40,2,0)
(1,37,1)
(35,17,1)
(5,30,1)
(9,18,1)
(15,44,1)
(22,10,1)
(21,18,1)
(39,35,1)
(19,13,1)
(45,35,1)
(37,25,1)
(40,22,1)
(37,10,1)
(12,19,1)
(10,53,1)
(18,39,1)
(44,45,1)
(51,35,1)
(29,20,1)
(1,51,1)
(22,38,1)
(50,51,1)
(3,19,1)
(53,46,1)
(7,31,1)
(51,15,1)
(54,22,1)
(49,37,1)
(14,50,1)
(30,29,1)
(17,5,1)
(39,7,1)
(32,54,1)
(2,40,1)
(25,43,1)
(8,14,1)
(1,2,1)
(16,32,1)
(13,16,1)
(43,45,1)
(1,3,1)
(3,12,1)
(45,10,1)
(37,35,1)
(46,30,1)
(39,10,1)
(9,21,1)
(1,9,1)
(38,8,1)
(51,10,1)
(13,35,1)
(20,55,1)
(13,10,1)
(22,35,1)
(31,49,1)
(8,51,2)
(35,30,2)
(22,51,2)
(16,22,2)
(51,10,2)
(51,35,2)
(39,10,2)
(2,22,2)
(21,37,2)
(37,10,2)
(44,45,2)
(13,10,2)
(49,37,2)
(19,22,2)
(53,30,2)
(10,30,2)
(17,30,2)
(25,45,2)
(43,45,2)
(3,19,2)
(15,45,2)
(9,18,2)
(46,30,2)
(14,51,2)
(37,35,2)
(3,22,2)
(13,35,2)
(37,45,2)
(22,38,2)
(40,22,2)
(50,51,2)
(7,37,2)
(31,37,2)
(54,22,2)
(22,10,2)
(9,37,2)
(22,35,2)
(5,30,2)
(32,22,2)
(18,39,2)
(38,51,2)
(13,22,2)
(39,35,2)
(18,37,2)
(39,37,2)
(19,13,2)
(51,45,2)
(12,22,2)
-----------------------------------
(0,result)
(1,RET)
(2,printLine("data value is too large to perform arithmetic safely.")
(3,printUnsignedLine(result)
(4,)
(5,data)
(6,if (data < (UINT_MAX/2)
(7,2)
(8,2)
(9,printUnsignedLine(result)
(10,data = 2)
(11,)
(12,result)
(13,data * 2)
(14,UINT_MAX)
(15,0)
(16,2)
(17,UINT_MAX)
(18,result = data * 2)
(19,result = data * 2)
(20,0)
(21,result)
(22,data < (UINT_MAX/2)
(23,if(globalReturnsTrueOrFalse()
(24,data)
(25,0)
(26,if(globalReturnsTrueOrFalse()
(27,if(data > 0)
(28,result)
(29,data = 0)
(30,globalReturnsTrueOrFalse()
(31,data)
(32,data)
(33,)
(34,)
(35,data = UINT_MAX)
(36,)
(37,data > 0)
(38,UINT_MAX/2)
(39,data * 2)
(40,"data value is too large to perform arithmetic safely.")
(41,)
(42,)
(43,data)
(44,data)
(45,globalReturnsTrueOrFalse()
(46,data)
(47,)
(48,if(data > 0)
(49,result)
(50,data)
(51,data > 0)
(52,)
(53,2)
(54,result)
(55,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^