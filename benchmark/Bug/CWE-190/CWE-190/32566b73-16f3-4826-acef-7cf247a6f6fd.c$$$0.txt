-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad()
{
    unsigned int data;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%u", &data);
    {
        unsigned int dataCopy = data;
        unsigned int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,47,51,53,57,58,62,64
-----computeFrom-----
12,13
12,14
44,45
44,46
55,56
55,57
-----guardedBy-----
46,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad(){    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad
{    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int dataCopy = data;
unsigned int dataCopy = data;
unsigned int
dataCopy = data
dataCopy
= data
data
data
unsigned int data = dataCopy;
unsigned int data = dataCopy;
unsigned int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(7,4,0)
(31,9,0)
(13,21,0)
(29,21,0)
(21,27,0)
(2,31,0)
(24,6,0)
(0,21,0)
(4,21,0)
(28,21,0)
(5,9,0)
(6,29,0)
(16,11,0)
(9,31,0)
(31,29,0)
(4,14,0)
(26,11,0)
(15,14,0)
(3,29,0)
(17,27,0)
(12,6,0)
(22,4,0)
(25,31,0)
(32,26,0)
(19,9,0)
(1,30,0)
(20,11,0)
(11,26,0)
(8,19,0)
(19,30,0)
(11,27,0)
(29,4,0)
(26,14,0)
(10,29,0)
(9,30,0)
(14,27,0)
(18,14,0)
(2,5,1)
(4,7,1)
(31,25,1)
(8,9,1)
(6,29,1)
(25,2,1)
(19,9,1)
(12,29,1)
(9,31,1)
(6,24,1)
(11,26,1)
(7,22,1)
(24,12,1)
(26,32,1)
(3,10,1)
(20,14,1)
(26,14,1)
(5,6,1)
(29,4,1)
(4,14,1)
(15,18,1)
(14,15,1)
(10,4,1)
(19,8,1)
(32,16,1)
(23,6,1)
(23,19,1)
(29,3,1)
(31,29,1)
(22,11,1)
(16,20,1)
(31,29,2)
(31,6,2)
(26,14,2)
(19,6,2)
(29,4,2)
(2,6,2)
(19,9,2)
(8,6,2)
(5,6,2)
(4,14,2)
(9,31,2)
(6,29,2)
(25,6,2)
(9,6,2)
(11,26,2)
-----------------------------------
(0,data)
(1,result)
(2,data)
(3,dataCopy)
(4,dataCopy = data)
(5,result)
(6,data > 0)
(7,data)
(8,result)
(9,result = data * 2)
(10,data)
(11,fscanf (stdin, "%u", &data)
(12,data)
(13,dataCopy)
(14,data = 0)
(15,0)
(16,"%u")
(17,data)
(18,data)
(19,printUnsignedLine(result)
(20,stdin)
(21,)
(22,dataCopy)
(23,RET)
(24,0)
(25,2)
(26,&data)
(27,)
(28,if(data > 0)
(29,data = dataCopy)
(30,)
(31,data * 2)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^