-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_17_bad()
CWE190_Integer_Overflow__char_fscanf_square_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,17,0)
(32,13,0)
(16,11,0)
(24,13,0)
(39,8,0)
(9,11,0)
(38,17,0)
(30,20,0)
(26,20,0)
(5,0,0)
(41,18,0)
(13,29,0)
(34,27,0)
(25,35,0)
(6,12,0)
(8,37,0)
(7,20,0)
(3,17,0)
(12,35,0)
(37,8,0)
(38,11,0)
(17,20,0)
(37,35,0)
(8,17,0)
(36,20,0)
(10,29,0)
(1,29,0)
(11,38,0)
(35,31,0)
(12,37,0)
(15,27,0)
(0,29,0)
(21,8,0)
(33,18,0)
(11,14,0)
(4,33,0)
(23,38,0)
(40,18,0)
(19,20,0)
(28,37,0)
(27,18,0)
(9,27,1)
(41,40,1)
(2,3,1)
(16,9,1)
(4,11,1)
(33,18,1)
(10,1,1)
(15,18,1)
(39,28,1)
(5,12,1)
(15,33,1)
(27,34,1)
(13,24,1)
(17,2,1)
(21,39,1)
(6,37,1)
(29,10,1)
(18,41,1)
(40,17,1)
(38,23,1)
(1,27,1)
(13,29,1)
(28,13,1)
(0,29,1)
(24,32,1)
(38,17,1)
(32,0,1)
(32,29,1)
(34,15,1)
(8,21,1)
(37,8,1)
(33,4,1)
(12,6,1)
(27,18,1)
(23,16,1)
(12,37,1)
(11,38,1)
(0,5,1)
(8,17,1)
(22,13,1)
(12,13,2)
(13,13,2)
(32,13,2)
(12,37,2)
(34,27,2)
(15,27,2)
(11,38,2)
(0,13,2)
(0,29,2)
(9,27,2)
(6,13,2)
(37,8,2)
(21,13,2)
(28,13,2)
(4,27,2)
(38,17,2)
(27,18,2)
(24,13,2)
(8,13,2)
(8,17,2)
(13,29,2)
(27,27,2)
(16,27,2)
(11,27,2)
(39,13,2)
(23,27,2)
(38,27,2)
(37,13,2)
(33,18,2)
(33,27,2)
(5,13,2)
-----------------------------------
(0,j++)
(1,j)
(2,\\\' \\\')
(3,data)
(4,i)
(5,j)
(6,result)
(7,i)
(8,data * data)
(9,stdin)
(10,0)
(11,fscanf (stdin, "%c", &data)
(12,printHexCharLine(result)
(13,j < 1)
(14,)
(15,i)
(16,"%c")
(17,data = \\\' \\\')
(18,i = 0)
(19,for(j = 0; j < 1; j++)
(20,)
(21,data)
(22,RET)
(23,data)
(24,1)
(25,result)
(26,j)
(27,i < 1)
(28,result)
(29,j = 0)
(30,data)
(31,)
(32,j)
(33,i++)
(34,1)
(35,)
(36,for(i = 0; i < 1; i++)
(37,result = data * data)
(38,&data)
(39,data)
(40,i)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^