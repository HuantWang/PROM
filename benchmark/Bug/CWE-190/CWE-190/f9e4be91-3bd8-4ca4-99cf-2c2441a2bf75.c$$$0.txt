-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_05_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,69,73,75,79,81
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
71,72
71,73
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_05_bad(){    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_05_bad()
CWE190_Integer_Overflow__int_fgets_square_05_bad
{    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticTrue
staticTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,6,0)
(16,28,0)
(34,35,0)
(24,2,0)
(35,29,0)
(40,29,0)
(5,19,0)
(30,8,0)
(17,5,0)
(14,20,0)
(26,24,0)
(27,35,0)
(8,23,0)
(10,8,0)
(34,2,0)
(12,2,0)
(2,21,0)
(13,6,0)
(24,34,0)
(39,15,0)
(4,35,0)
(33,31,0)
(36,6,0)
(3,34,0)
(35,5,0)
(32,8,0)
(31,15,0)
(29,6,0)
(35,34,0)
(38,23,0)
(25,15,0)
(28,9,0)
(31,5,0)
(0,29,0)
(37,20,0)
(5,31,0)
(20,18,0)
(15,20,0)
(23,8,0)
(8,15,0)
(3,7,1)
(35,5,1)
(16,23,1)
(17,23,1)
(23,38,1)
(26,34,1)
(5,31,1)
(29,40,1)
(30,10,1)
(39,11,1)
(8,30,1)
(23,8,1)
(24,34,1)
(15,25,1)
(28,16,1)
(31,15,1)
(32,15,1)
(10,32,1)
(38,8,1)
(7,5,1)
(4,27,1)
(34,35,1)
(33,17,1)
(27,3,1)
(25,39,1)
(24,26,1)
(8,15,1)
(35,4,1)
(35,29,1)
(31,33,1)
(11,29,1)
(1,24,1)
(1,7,1)
(7,11,1)
(7,28,1)
(40,0,1)
(31,15,2)
(25,11,2)
(8,11,2)
(24,7,2)
(10,11,2)
(31,23,2)
(23,11,2)
(35,29,2)
(5,23,2)
(17,23,2)
(24,34,2)
(38,11,2)
(34,35,2)
(28,23,2)
(35,5,2)
(3,7,2)
(8,15,2)
(27,7,2)
(15,11,2)
(30,11,2)
(26,7,2)
(5,31,2)
(32,11,2)
(34,7,2)
(23,8,2)
(33,23,2)
(39,11,2)
(16,23,2)
(4,7,2)
(35,7,2)
-----------------------------------
(0,data)
(1,RET)
(2,)
(3,result)
(4,data)
(5,data = atoi(inputBuffer)
(6,)
(7,staticTrue)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,)
(10,CHAR_ARRAY_SIZE)
(11,staticTrue)
(12,result)
(13,if(staticTrue)
(14,inputBuffer)
(15,inputBuffer[CHAR_ARRAY_SIZE] = "")
(16,"fgets()
(17,data)
(18,)
(19,)
(20,)
(21,)
(22,if(staticTrue)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,printIntLine(result)
(25,"")
(26,result)
(27,data)
(28,printLine("fgets()
(29,data = 0)
(30,stdin)
(31,atoi(inputBuffer)
(32,inputBuffer)
(33,inputBuffer)
(34,result = data * data)
(35,data * data)
(36,data)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,NULL)
(39,inputBuffer)
(40,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^