-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_04_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_04_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_04_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_04_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(23,4,0)
(9,14,0)
(2,4,0)
(20,14,0)
(24,14,0)
(12,1,0)
(8,3,0)
(10,15,0)
(15,20,0)
(19,23,0)
(24,20,0)
(6,8,0)
(20,15,0)
(16,20,0)
(4,1,0)
(13,11,0)
(23,8,0)
(15,8,0)
(18,23,0)
(7,15,0)
(17,8,0)
(22,1,0)
(15,4,0)
(25,1,0)
(26,24,0)
(21,4,0)
(8,17,1)
(27,24,1)
(27,23,1)
(7,10,1)
(17,6,1)
(15,7,1)
(26,20,1)
(23,4,1)
(2,21,1)
(0,4,1)
(15,4,1)
(10,16,1)
(24,20,1)
(23,8,1)
(4,2,1)
(18,5,1)
(5,0,1)
(19,18,1)
(20,15,1)
(6,0,1)
(16,23,1)
(23,19,1)
(15,8,1)
(5,8,1)
(27,5,1)
(24,26,1)
(24,23,2)
(20,23,2)
(23,5,2)
(10,23,2)
(24,20,2)
(6,0,2)
(20,15,2)
(18,5,2)
(8,0,2)
(23,8,2)
(17,0,2)
(23,4,2)
(19,5,2)
(15,23,2)
(16,23,2)
(15,8,2)
(26,23,2)
(15,4,2)
(7,23,2)
-----------------------------------
(0,STATIC_CONST_TRUE)
(1,)
(2,0)
(3,)
(4,data = 0)
(5,STATIC_CONST_TRUE)
(6,data)
(7,2)
(8,data = UINT_MAX)
(9,result)
(10,data)
(11,)
(12,data)
(13,if(data > 0)
(14,)
(15,data * 2)
(16,result)
(17,UINT_MAX)
(18,data)
(19,0)
(20,result = data * 2)
(21,data)
(22,if(STATIC_CONST_TRUE)
(23,data > 0)
(24,printUnsignedLine(result)
(25,if(STATIC_CONST_TRUE)
(26,result)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^