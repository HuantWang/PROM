-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
        unsigned int result = data * data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_15_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,29,0)
(10,16,0)
(0,10,0)
(18,13,0)
(21,34,0)
(13,30,0)
(37,30,0)
(35,28,0)
(23,13,0)
(1,7,0)
(22,35,0)
(14,28,0)
(15,29,0)
(35,12,0)
(23,30,0)
(13,7,0)
(30,16,0)
(25,16,0)
(17,28,0)
(26,34,0)
(2,12,0)
(36,16,0)
(32,29,0)
(4,16,0)
(7,28,0)
(11,6,0)
(7,13,0)
(19,16,0)
(31,29,0)
(28,34,0)
(8,34,0)
(12,29,0)
(33,29,0)
(27,23,0)
(5,7,0)
(12,35,0)
(20,12,0)
(18,3,1)
(6,11,1)
(24,28,1)
(33,6,1)
(10,0,1)
(19,23,1)
(35,28,1)
(32,12,1)
(28,14,1)
(22,20,1)
(13,7,1)
(0,3,1)
(35,22,1)
(20,2,1)
(25,10,1)
(12,35,1)
(7,5,1)
(7,28,1)
(23,13,1)
(14,17,1)
(27,13,1)
(23,27,1)
(3,33,1)
(11,24,1)
(2,24,1)
(9,25,1)
(3,32,1)
(9,19,1)
(5,1,1)
(1,18,1)
(33,24,2)
(12,24,2)
(6,24,2)
(12,35,2)
(27,3,2)
(0,3,2)
(5,3,2)
(13,7,2)
(13,3,2)
(7,3,2)
(11,24,2)
(23,13,2)
(18,3,2)
(22,24,2)
(20,24,2)
(35,28,2)
(35,24,2)
(32,24,2)
(25,3,2)
(10,3,2)
(7,28,2)
(1,3,2)
(2,24,2)
(19,3,2)
(23,3,2)
-----------------------------------
(0,"Benign, fixed string")
(1,data)
(2,stdin)
(3,7)
(4,default:)
(5,data)
(6,printLine("Benign, fixed string")
(7,data * data)
(8,switch(7)
(9,RET)
(10,printLine("Benign, fixed string")
(11,"Benign, fixed string")
(12,fscanf (stdin, "%u", &data)
(13,result = data * data)
(14,0)
(15,case 6:)
(16,)
(17,data)
(18,result)
(19,break;)
(20,"%u")
(21,data)
(22,data)
(23,printUnsignedLine(result)
(24,6)
(25,break;)
(26,switch(6)
(27,result)
(28,data = 0)
(29,)
(30,)
(31,default:)
(32,break;)
(33,break;)
(34,)
(35,&data)
(36,case 7:)
(37,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^