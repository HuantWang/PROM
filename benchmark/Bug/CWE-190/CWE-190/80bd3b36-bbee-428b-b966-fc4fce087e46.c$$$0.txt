-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,32,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
30,31
30,32
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_14_bad()
CWE190_Integer_Overflow__int_rand_multiply_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,26,0)
(25,16,0)
(8,5,0)
(21,31,0)
(26,12,0)
(26,22,0)
(29,27,0)
(31,16,0)
(24,4,0)
(22,26,0)
(15,31,0)
(11,10,0)
(2,4,0)
(6,26,0)
(17,10,0)
(27,10,0)
(15,30,0)
(0,10,0)
(16,31,0)
(16,27,0)
(28,30,0)
(19,13,0)
(14,15,0)
(13,26,0)
(31,30,0)
(3,20,0)
(9,27,0)
(18,16,0)
(1,13,0)
(13,27,0)
(23,20,0)
(16,27,1)
(7,4,1)
(15,14,1)
(13,26,1)
(1,19,1)
(22,6,1)
(14,31,1)
(15,31,1)
(19,4,1)
(23,27,1)
(2,20,1)
(13,27,1)
(7,15,1)
(21,13,1)
(13,1,1)
(3,23,1)
(24,2,1)
(2,26,1)
(18,21,1)
(7,13,1)
(4,24,1)
(20,3,1)
(27,29,1)
(16,26,1)
(29,9,1)
(16,25,1)
(31,16,1)
(6,20,1)
(26,22,1)
(25,18,1)
(16,13,2)
(18,13,2)
(21,13,2)
(31,16,2)
(16,27,2)
(26,22,2)
(13,4,2)
(15,13,2)
(13,26,2)
(13,27,2)
(31,13,2)
(25,13,2)
(14,13,2)
(1,4,2)
(19,4,2)
(6,20,2)
(15,31,2)
(22,20,2)
(16,26,2)
(26,20,2)
-----------------------------------
(0,data)
(1,0)
(2,globalFive)
(3,5)
(4,globalFive==5)
(5,)
(6,data)
(7,RET)
(8,if(data > 0)
(9,data)
(10,)
(11,if(globalFive==5)
(12,)
(13,data > 0)
(14,result)
(15,printIntLine(result)
(16,data * 2)
(17,if(globalFive==5)
(18,data)
(19,data)
(20,globalFive==5)
(21,result)
(22,RAND32()
(23,globalFive)
(24,5)
(25,2)
(26,data = RAND32()
(27,data = 0)
(28,result)
(29,0)
(30,)
(31,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^