-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(char data)
{
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
-----nextToken-----
2,4,6,8,13,15,19,21,25,27
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(char data){    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(char data)
CWE190_Integer_Overflow__char_fscanf_square_53d_badSink
char data
char
data
data
{    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,11,0)
(11,3,0)
(9,6,0)
(2,11,0)
(10,1,0)
(4,1,0)
(1,10,0)
(8,10,0)
(10,5,0)
(0,10,0)
(6,11,0)
(6,1,0)
(7,6,1)
(9,1,1)
(10,5,1)
(6,9,1)
(6,1,1)
(10,8,1)
(8,0,1)
(1,10,1)
(0,4,1)
(10,5,2)
(1,10,2)
(6,1,2)
-----------------------------------
(0,data)
(1,result = data * data)
(2,result)
(3,)
(4,result)
(5,char data)
(6,printHexCharLine(result)
(7,RET)
(8,data)
(9,result)
(10,data * data)
(11,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^