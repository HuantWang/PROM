-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_07_bad()
CWE190_Integer_Overflow__char_max_postinc_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,21,0)
(24,10,0)
(4,12,0)
(23,27,0)
(26,10,0)
(15,21,0)
(17,19,0)
(27,10,0)
(6,27,0)
(22,6,0)
(25,2,0)
(4,10,0)
(27,19,0)
(19,13,0)
(1,19,0)
(3,27,0)
(6,12,0)
(12,20,0)
(4,19,0)
(14,12,0)
(10,21,0)
(0,21,0)
(27,12,0)
(9,4,0)
(8,18,0)
(5,2,0)
(28,18,0)
(18,28,1)
(28,8,1)
(6,22,1)
(5,18,1)
(4,9,1)
(17,18,1)
(23,4,1)
(2,25,1)
(24,26,1)
(4,10,1)
(16,2,1)
(16,6,1)
(1,17,1)
(9,2,1)
(10,24,1)
(27,3,1)
(27,10,1)
(5,19,1)
(19,1,1)
(25,5,1)
(27,19,1)
(4,19,1)
(6,27,1)
(8,10,1)
(22,27,1)
(3,23,1)
(4,19,2)
(23,2,2)
(3,2,2)
(27,2,2)
(19,18,2)
(6,27,2)
(27,19,2)
(4,2,2)
(22,2,2)
(9,2,2)
(17,18,2)
(1,18,2)
(6,2,2)
(27,10,2)
(4,10,2)
-----------------------------------
(0,data)
(1,CHAR_MAX)
(2,staticFive==5)
(3,data)
(4,data++)
(5,staticFive)
(6,printHexCharLine(result)
(7,if(staticFive==5)
(8,staticFive)
(9,data)
(10,data = \' \')
(11,data = ' ')
(12,)
(13,)
(14,result)
(15,if(staticFive==5)
(16,RET)
(17,data)
(18,staticFive==5)
(19,data = CHAR_MAX)
(20,)
(21,)
(22,result)
(23,result)
(24,' ')
(25,5)
(26,data)
(27,result = data)
(28,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^