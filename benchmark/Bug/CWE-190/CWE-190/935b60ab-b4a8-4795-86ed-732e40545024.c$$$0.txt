-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (LLONG_MAX/2))
            {
                int64_t result = data * 2;
                printLongLongLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
64,65
64,66
64,67
65,66
65,67
66,67
68,69
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
76,77
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,9,11,15,16,20,27,28,32,37,38,43,45,49,50,54,56,61,62,67,71,72,77,79,83,84,88,90,95,96
-----computeFrom-----
13,14
13,15
25,26
25,27
35,36
35,37
47,48
47,49
59,60
59,61
65,66
65,67
69,70
69,71
81,82
81,83
-----guardedBy-----
37,49
61,83
67,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (LLONG_MAX/2)
data
data
(LLONG_MAX/2)
LLONG_MAX/2
LLONG_MAX
LLONG_MAX
2
{                int64_t result = data * 2;                printLongLongLine(result);            }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(39,33,0)
(19,43,0)
(1,33,0)
(7,35,0)
(17,43,0)
(43,3,0)
(23,43,0)
(26,46,0)
(15,16,0)
(49,17,0)
(25,38,0)
(41,10,0)
(2,33,0)
(27,36,0)
(35,36,0)
(3,8,0)
(17,0,0)
(31,3,0)
(27,11,0)
(13,17,0)
(34,28,0)
(16,14,0)
(20,0,0)
(13,0,0)
(14,16,0)
(6,3,0)
(45,48,0)
(42,14,0)
(37,33,0)
(32,48,0)
(18,27,0)
(11,3,0)
(30,25,0)
(24,3,0)
(5,13,0)
(35,27,0)
(21,31,0)
(40,31,0)
(4,11,0)
(16,3,0)
(43,17,0)
(9,36,0)
(11,27,0)
(47,14,0)
(22,11,0)
(48,3,0)
(5,17,1)
(19,49,1)
(44,13,1)
(16,3,1)
(23,19,1)
(32,29,1)
(13,5,1)
(4,18,1)
(24,12,1)
(44,25,1)
(22,4,1)
(7,27,1)
(17,43,1)
(44,31,1)
(13,17,1)
(45,32,1)
(43,3,1)
(16,14,1)
(42,47,1)
(47,15,1)
(43,23,1)
(21,29,1)
(40,21,1)
(11,3,1)
(49,31,1)
(35,7,1)
(3,6,1)
(29,3,1)
(31,40,1)
(48,45,1)
(11,22,1)
(30,16,1)
(6,24,1)
(31,3,1)
(15,48,1)
(18,16,1)
(25,30,1)
(14,42,1)
(35,27,1)
(27,11,1)
(29,12,1)
(48,3,1)
(44,48,1)
(12,39,1)
(44,35,1)
(23,31,2)
(30,16,2)
(4,16,2)
(43,31,2)
(22,16,2)
(42,48,2)
(16,14,2)
(48,3,2)
(49,31,2)
(31,3,2)
(43,3,2)
(45,29,2)
(31,29,2)
(6,12,2)
(35,16,2)
(21,29,2)
(48,29,2)
(15,48,2)
(27,16,2)
(11,16,2)
(47,48,2)
(13,31,2)
(24,12,2)
(17,31,2)
(16,3,2)
(32,29,2)
(35,27,2)
(13,17,2)
(27,11,2)
(19,31,2)
(3,12,2)
(5,31,2)
(40,29,2)
(14,48,2)
(25,16,2)
(7,16,2)
(17,43,2)
(16,48,2)
(11,3,2)
(18,16,2)
-----------------------------------
(0,)
(1,data)
(2,if(globalReturnsTrueOrFalse()
(3,data = 2)
(4,data)
(5,result)
(6,2)
(7,result)
(8,)
(9,result)
(10,)
(11,data * 2)
(12,globalReturnsTrueOrFalse()
(13,printLongLongLine(result)
(14,LLONG_MAX/2)
(15,data)
(16,data < (LLONG_MAX/2)
(17,result = data * 2)
(18,result)
(19,data)
(20,result)
(21,data)
(22,2)
(23,2)
(24,data)
(25,printLine("data value is too large to perform arithmetic safely.")
(26,if(data > 0)
(27,result = data * 2)
(28,)
(29,globalReturnsTrueOrFalse()
(30,"data value is too large to perform arithmetic safely.")
(31,data > 0)
(32,data)
(33,)
(34,if(data > 0)
(35,printLongLongLine(result)
(36,)
(37,if(globalReturnsTrueOrFalse()
(38,)
(39,L)
(40,0)
(41,if (data < (LLONG_MAX/2)
(42,2)
(43,data * 2)
(44,RET)
(45,0)
(46,)
(47,LLONG_MAX)
(48,data > 0)
(49,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^