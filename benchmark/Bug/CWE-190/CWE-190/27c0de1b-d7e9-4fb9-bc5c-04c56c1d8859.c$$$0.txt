-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_13_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_13_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_13_bad()
CWE190_Integer_Overflow__int_max_multiply_13_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,16,0)
(23,3,0)
(20,22,0)
(10,21,0)
(2,22,0)
(15,22,0)
(29,8,0)
(22,24,0)
(21,3,0)
(18,21,0)
(7,2,0)
(26,15,0)
(1,16,0)
(0,5,0)
(21,2,0)
(17,31,0)
(27,14,0)
(16,14,0)
(13,14,0)
(11,5,0)
(19,31,0)
(30,2,0)
(18,3,0)
(28,15,0)
(15,16,0)
(6,14,0)
(2,16,0)
(2,21,0)
(12,18,0)
(9,22,0)
(4,18,1)
(20,5,1)
(11,0,1)
(10,15,1)
(30,7,1)
(7,10,1)
(18,12,1)
(9,20,1)
(15,26,1)
(31,19,1)
(17,5,1)
(2,22,1)
(5,11,1)
(26,28,1)
(28,31,1)
(18,21,1)
(4,31,1)
(4,15,1)
(19,17,1)
(15,22,1)
(22,9,1)
(0,16,1)
(17,22,1)
(15,16,1)
(21,2,1)
(16,25,1)
(2,30,1)
(12,21,1)
(25,1,1)
(2,16,1)
(26,31,2)
(22,5,2)
(15,16,2)
(15,31,2)
(21,2,2)
(18,21,2)
(12,15,2)
(18,15,2)
(7,15,2)
(15,22,2)
(2,15,2)
(20,5,2)
(2,22,2)
(30,15,2)
(2,16,2)
(21,15,2)
(28,31,2)
(10,15,2)
(9,5,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE)
(1,data)
(2,data * 2)
(3,)
(4,RET)
(5,GLOBAL_CONST_FIVE==5)
(6,if(GLOBAL_CONST_FIVE==5)
(7,data)
(8,)
(9,INT_MAX)
(10,result)
(11,5)
(12,result)
(13,data)
(14,)
(15,data > 0)
(16,data = 0)
(17,GLOBAL_CONST_FIVE)
(18,printIntLine(result)
(19,5)
(20,data)
(21,result = data * 2)
(22,data = INT_MAX)
(23,result)
(24,)
(25,0)
(26,0)
(27,if(GLOBAL_CONST_FIVE==5)
(28,data)
(29,if(data > 0)
(30,2)
(31,GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^