-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,37,41,42,46,48
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_03_bad()
CWE190_Integer_Overflow__char_max_add_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(19,14,0)
(10,6,0)
(7,23,0)
(14,2,0)
(1,19,0)
(2,18,0)
(19,3,0)
(0,19,0)
(11,3,0)
(12,5,0)
(26,27,0)
(28,14,0)
(25,23,0)
(4,27,0)
(9,7,0)
(21,6,0)
(20,2,0)
(22,23,0)
(14,19,0)
(5,2,0)
(5,14,0)
(16,7,0)
(3,8,0)
(17,3,0)
(19,7,0)
(13,23,0)
(26,4,1)
(19,3,1)
(5,14,1)
(24,6,1)
(3,11,1)
(27,26,1)
(9,16,1)
(14,19,1)
(19,7,1)
(28,6,1)
(19,1,1)
(1,0,1)
(10,21,1)
(7,9,1)
(0,28,1)
(17,27,1)
(12,14,1)
(4,7,1)
(6,10,1)
(24,5,1)
(21,27,1)
(11,17,1)
(5,12,1)
(21,3,1)
(0,6,2)
(17,27,2)
(1,6,2)
(5,6,2)
(3,27,2)
(12,6,2)
(14,6,2)
(14,19,2)
(11,27,2)
(19,3,2)
(28,6,2)
(5,14,2)
(19,6,2)
(19,7,2)
-----------------------------------
(0,data)
(1,1)
(2,)
(3,data = CHAR_MAX)
(4,5)
(5,printHexCharLine(result)
(6,5==5)
(7,data = ' ')
(8,)
(9,' ')
(10,5)
(11,CHAR_MAX)
(12,result)
(13,if(5==5)
(14,result = data + 1)
(15,data = \' \')
(16,data)
(17,data)
(18,)
(19,data + 1)
(20,result)
(21,5)
(22,data)
(23,)
(24,RET)
(25,if(5==5)
(26,5)
(27,5==5)
(28,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^