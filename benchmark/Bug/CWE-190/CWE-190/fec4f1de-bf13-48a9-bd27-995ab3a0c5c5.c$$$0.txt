-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(char data)
{
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
23,24
26,27
27,28
27,29
28,29
30,31
-----nextToken-----
2,4,6,8,13,14,18,20,24,25,29,31
-----computeFrom-----
11,12
11,13
22,23
22,24
-----guardedBy-----
13,24
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(char data){    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(char data)
CWE190_Integer_Overflow__char_rand_multiply_53d_badSink
char data
char
data
data
{    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,11,0)
(5,13,0)
(6,12,0)
(4,10,0)
(15,12,0)
(0,6,0)
(7,10,0)
(2,15,0)
(11,3,0)
(10,3,0)
(15,10,0)
(6,15,0)
(1,11,0)
(14,12,0)
(10,15,0)
(10,4,1)
(15,10,1)
(11,3,1)
(6,15,1)
(6,0,1)
(2,11,1)
(7,2,1)
(4,7,1)
(0,15,1)
(10,3,1)
(11,1,1)
(8,6,1)
(1,9,1)
(8,11,1)
(10,11,2)
(10,3,2)
(6,11,2)
(4,11,2)
(15,10,2)
(6,15,2)
(2,11,2)
(0,11,2)
(15,11,2)
(7,11,2)
(11,3,2)
-----------------------------------
(0,result)
(1,0)
(2,result)
(3,char data)
(4,2)
(5,if(data > 0)
(6,printHexCharLine(result)
(7,data)
(8,RET)
(9,data)
(10,data * 2)
(11,data > 0)
(12,)
(13,)
(14,result)
(15,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^