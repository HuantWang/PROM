-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_04_bad()
CWE190_Integer_Overflow__short_rand_multiply_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,26,0)
(13,3,0)
(17,16,0)
(22,19,0)
(8,14,0)
(28,2,0)
(15,11,0)
(16,2,0)
(9,19,0)
(20,28,0)
(27,25,0)
(2,8,0)
(26,8,0)
(4,28,0)
(24,3,0)
(6,18,0)
(8,2,0)
(16,11,0)
(1,9,0)
(28,11,0)
(28,19,0)
(10,2,0)
(2,12,0)
(9,18,0)
(19,18,0)
(11,3,0)
(5,11,0)
(23,3,0)
(14,8,0)
(19,28,0)
(29,16,0)
(20,4,1)
(22,16,1)
(1,19,1)
(29,17,1)
(2,8,1)
(17,0,1)
(8,26,1)
(9,19,1)
(0,21,1)
(7,9,1)
(9,1,1)
(8,14,1)
(7,0,1)
(4,22,1)
(19,28,1)
(28,2,1)
(21,11,1)
(16,2,1)
(0,2,1)
(11,5,1)
(5,15,1)
(28,11,1)
(16,29,1)
(28,20,1)
(26,10,1)
(16,11,1)
(10,21,1)
(7,16,1)
(28,16,2)
(16,0,2)
(8,26,2)
(9,16,2)
(20,16,2)
(2,21,2)
(8,21,2)
(26,21,2)
(16,11,2)
(22,16,2)
(16,2,2)
(10,21,2)
(19,16,2)
(9,19,2)
(2,8,2)
(19,28,2)
(1,16,2)
(8,14,2)
(28,2,2)
(4,16,2)
(17,0,2)
(28,11,2)
(29,0,2)
-----------------------------------
(0,STATIC_CONST_TRUE)
(1,result)
(2,data = (short)
(3,)
(4,data)
(5,0)
(6,result)
(7,RET)
(8,(short)
(9,printIntLine(result)
(10,data)
(11,data = 0)
(12,)
(13,if(STATIC_CONST_TRUE)
(14,short)
(15,data)
(16,data > 0)
(17,data)
(18,)
(19,result = data * 2)
(20,2)
(21,STATIC_CONST_TRUE)
(22,result)
(23,if(STATIC_CONST_TRUE)
(24,data)
(25,)
(26,RAND32()
(27,if(data > 0)
(28,data * 2)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^