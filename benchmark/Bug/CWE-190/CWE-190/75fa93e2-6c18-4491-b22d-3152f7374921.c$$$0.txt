-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_postinc_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,73,76,78,81,85,87
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_postinc_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_postinc_32_bad()
CWE190_Integer_Overflow__short_max_postinc_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,5,0)
(28,25,0)
(9,1,0)
(7,22,0)
(43,18,0)
(36,21,0)
(34,4,0)
(38,7,0)
(7,4,0)
(29,11,0)
(25,1,0)
(22,7,0)
(5,1,0)
(0,5,0)
(9,32,0)
(18,14,0)
(6,10,0)
(22,21,0)
(2,26,0)
(21,31,0)
(14,26,0)
(15,4,0)
(31,21,0)
(6,14,0)
(32,9,0)
(16,1,0)
(11,34,0)
(33,25,0)
(39,1,0)
(36,11,0)
(26,9,0)
(12,18,0)
(27,1,0)
(41,36,0)
(37,34,0)
(3,32,0)
(14,5,0)
(20,6,0)
(8,22,0)
(26,14,0)
(13,10,0)
(30,10,0)
(18,10,0)
(11,4,0)
(35,21,0)
(17,30,0)
(42,31,0)
(40,14,0)
(30,18,0)
(23,34,0)
(19,9,0)
(21,1,0)
(4,1,0)
(40,11,1)
(37,7,1)
(23,37,1)
(20,14,1)
(36,21,1)
(34,23,1)
(18,14,1)
(41,34,1)
(32,3,1)
(30,18,1)
(22,21,1)
(26,2,1)
(30,17,1)
(28,9,1)
(38,25,1)
(33,28,1)
(26,9,1)
(24,30,1)
(18,12,1)
(2,40,1)
(31,42,1)
(14,26,1)
(36,41,1)
(17,18,1)
(6,14,1)
(12,43,1)
(19,21,1)
(11,29,1)
(29,36,1)
(21,31,1)
(11,34,1)
(3,19,1)
(7,22,1)
(22,8,1)
(43,6,1)
(6,20,1)
(42,35,1)
(9,32,1)
(8,38,1)
(25,33,1)
(36,21,2)
(26,9,2)
(30,18,2)
(9,32,2)
(22,21,2)
(6,14,2)
(21,31,2)
(11,34,2)
(14,26,2)
(7,22,2)
(18,14,2)
-----------------------------------
(0,data)
(1,)
(2,dataPtr2)
(3,data)
(4,)
(5,)
(6,data++)
(7,data = *dataPtr1)
(8,dataPtr1)
(9,*dataPtr2 = &data)
(10,)
(11,*dataPtr1 = data)
(12,data)
(13,result)
(14,data = *dataPtr2)
(15,data)
(16,data)
(17,result)
(18,result = data)
(19,dataPtr2)
(20,data)
(21,*dataPtr1 = &data)
(22,*dataPtr1)
(23,SHRT_MAX)
(24,RET)
(25,data = 0)
(26,*dataPtr2)
(27,dataPtr1)
(28,data)
(29,data)
(30,printIntLine(result)
(31,&data)
(32,&data)
(33,0)
(34,data = SHRT_MAX)
(35,dataPtr1)
(36,*dataPtr1)
(37,data)
(38,data)
(39,dataPtr2)
(40,data)
(41,dataPtr1)
(42,data)
(43,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^