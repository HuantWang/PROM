-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            ++data;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_12_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(39,31,0)
(42,1,0)
(36,3,0)
(6,31,0)
(31,39,0)
(19,24,0)
(21,44,0)
(16,34,0)
(15,34,0)
(25,3,0)
(17,33,0)
(11,3,0)
(21,34,0)
(32,34,0)
(10,39,0)
(23,21,0)
(16,44,0)
(8,34,0)
(32,24,0)
(21,33,0)
(44,3,0)
(31,44,0)
(28,15,0)
(4,42,0)
(32,44,0)
(41,8,0)
(0,34,0)
(29,14,0)
(5,8,0)
(37,16,0)
(13,39,0)
(35,34,0)
(20,23,0)
(15,33,0)
(8,24,0)
(30,16,0)
(15,44,0)
(12,44,0)
(45,21,0)
(34,40,0)
(22,44,0)
(24,18,0)
(8,44,0)
(39,9,0)
(38,21,0)
(23,33,0)
(27,46,0)
(14,24,0)
(7,32,0)
(14,8,0)
(8,44,1)
(32,34,1)
(5,32,1)
(16,44,1)
(20,21,1)
(35,0,1)
(8,34,1)
(4,16,1)
(30,37,1)
(7,43,1)
(12,22,1)
(2,44,1)
(43,39,1)
(15,34,1)
(26,14,1)
(14,29,1)
(45,15,1)
(28,16,1)
(43,34,1)
(29,8,1)
(21,44,1)
(10,13,1)
(44,12,1)
(37,43,1)
(26,42,1)
(42,4,1)
(16,34,1)
(13,2,1)
(21,38,1)
(15,28,1)
(26,23,1)
(31,6,1)
(6,10,1)
(0,2,1)
(21,34,1)
(23,20,1)
(41,5,1)
(31,44,1)
(23,21,1)
(34,35,1)
(32,7,1)
(16,30,1)
(39,31,1)
(14,8,1)
(38,45,1)
(32,44,1)
(15,44,1)
(8,41,1)
(13,2,2)
(31,44,2)
(39,2,2)
(29,43,2)
(37,43,2)
(28,16,2)
(4,16,2)
(38,16,2)
(34,2,2)
(39,31,2)
(7,43,2)
(16,44,2)
(8,44,2)
(8,34,2)
(20,16,2)
(45,16,2)
(0,2,2)
(42,16,2)
(16,43,2)
(10,2,2)
(5,43,2)
(21,34,2)
(23,16,2)
(23,21,2)
(21,16,2)
(31,2,2)
(14,43,2)
(6,2,2)
(30,43,2)
(15,16,2)
(16,34,2)
(35,2,2)
(15,44,2)
(8,43,2)
(14,8,2)
(41,43,2)
(32,43,2)
(32,44,2)
(21,44,2)
(15,34,2)
(32,34,2)
-----------------------------------
(0,data)
(1,)
(2,globalReturnsTrueOrFalse()
(3,)
(4,"data value is too large to perform arithmetic safely.")
(5,result)
(6,data)
(7,data)
(8,result = data)
(9,)
(10,"%c")
(11,if(globalReturnsTrueOrFalse()
(12,\\\' \\\')
(13,stdin)
(14,printHexCharLine(result)
(15,++data)
(16,data < CHAR_MAX)
(17,result)
(18,)
(19,result)
(20,result)
(21,result = data)
(22,data)
(23,printHexCharLine(result)
(24,)
(25,if(globalReturnsTrueOrFalse()
(26,RET)
(27,if (data < CHAR_MAX)
(28,data)
(29,result)
(30,CHAR_MAX)
(31,&data)
(32,++data)
(33,)
(34,data = 2)
(35,2)
(36,data)
(37,data)
(38,data)
(39,fscanf (stdin, "%c", &data)
(40,)
(41,data)
(42,printLine("data value is too large to perform arithmetic safely.")
(43,globalReturnsTrueOrFalse()
(44,data = \\\' \\\')
(45,result)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^