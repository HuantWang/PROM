-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_22_badSink(char data)
{
    if(CWE190_Integer_Overflow__char_rand_square_22_badGlobal)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
-----nextToken-----
2,4,6,8,12,17,19,23,25,29,31
-----computeFrom-----
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_22_badSink(char data){    if(CWE190_Integer_Overflow__char_rand_square_22_badGlobal)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_22_badSink(char data)
CWE190_Integer_Overflow__char_rand_square_22_badSink
char data
char
data
data
{    if(CWE190_Integer_Overflow__char_rand_square_22_badGlobal)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
if(CWE190_Integer_Overflow__char_rand_square_22_badGlobal)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
CWE190_Integer_Overflow__char_rand_square_22_badGlobal
CWE190_Integer_Overflow__char_rand_square_22_badGlobal
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,6,0)
(8,10,0)
(11,6,0)
(14,10,0)
(6,12,0)
(0,9,0)
(14,6,0)
(10,3,0)
(9,14,0)
(7,10,0)
(1,4,0)
(13,14,0)
(10,14,0)
(9,0,1)
(9,14,1)
(8,7,1)
(10,3,1)
(13,2,1)
(5,9,1)
(5,2,1)
(10,8,1)
(0,14,1)
(7,13,1)
(14,10,1)
(14,2,2)
(9,2,2)
(14,10,2)
(7,2,2)
(13,2,2)
(10,2,2)
(0,2,2)
(10,3,2)
(8,2,2)
(9,14,2)
-----------------------------------
(0,result)
(1,if(CWE190_Integer_Overflow__char_rand_square_22_badGlobal)
(2,CWE190_Integer_Overflow__char_rand_square_22_badGlobal)
(3,char data)
(4,)
(5,RET)
(6,)
(7,data)
(8,data)
(9,printHexCharLine(result)
(10,data * data)
(11,result)
(12,)
(13,result)
(14,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^