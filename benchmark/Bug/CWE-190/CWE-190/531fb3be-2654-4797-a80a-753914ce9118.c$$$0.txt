-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_18_bad()
{
    unsigned int data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = UINT_MAX;
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
        unsigned int result = data * 2;
        printUnsignedLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,27,29,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_18_bad(){    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_18_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_18_bad
{    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;
source
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(11,9,0)
(23,22,0)
(3,4,0)
(10,0,0)
(9,11,0)
(1,4,0)
(14,2,0)
(16,25,0)
(6,24,0)
(5,4,0)
(12,11,0)
(11,25,0)
(19,4,0)
(0,9,0)
(7,2,0)
(9,24,0)
(25,4,0)
(22,4,0)
(2,25,0)
(17,11,0)
(18,9,0)
(8,4,0)
(21,4,0)
(13,25,0)
(0,24,0)
(15,22,0)
(23,15,1)
(0,10,1)
(2,25,1)
(20,0,1)
(10,9,1)
(14,19,1)
(9,11,1)
(7,14,1)
(11,17,1)
(17,12,1)
(19,25,1)
(22,23,1)
(0,9,1)
(3,22,1)
(20,2,1)
(18,2,1)
(11,25,1)
(2,7,1)
(16,13,1)
(25,16,1)
(12,18,1)
(13,3,1)
(2,25,2)
(9,2,2)
(11,2,2)
(10,2,2)
(0,9,2)
(0,2,2)
(9,11,2)
(11,25,2)
(12,2,2)
(18,2,2)
(17,2,2)
-----------------------------------
(0,printUnsignedLine(result)
(1,source:)
(2,data > 0)
(3,goto source;)
(4,)
(5,data)
(6,result)
(7,0)
(8,sink:)
(9,result = data * 2)
(10,result)
(11,data * 2)
(12,data)
(13,data)
(14,data)
(15,data)
(16,UINT_MAX)
(17,2)
(18,result)
(19,goto sink;)
(20,RET)
(21,if(data > 0)
(22,data = 0)
(23,0)
(24,)
(25,data = UINT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^