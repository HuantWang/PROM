-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_04_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,17,0)
(6,14,0)
(13,14,0)
(20,22,0)
(14,10,0)
(13,20,0)
(2,10,0)
(15,13,0)
(6,20,0)
(12,14,0)
(23,13,0)
(4,14,0)
(1,23,0)
(11,12,0)
(7,13,0)
(18,17,0)
(23,20,0)
(19,10,0)
(17,12,0)
(21,6,0)
(24,20,0)
(5,17,0)
(16,10,0)
(17,0,0)
(25,14,0)
(18,3,1)
(23,13,1)
(9,8,1)
(17,12,1)
(12,11,1)
(23,1,1)
(3,14,1)
(8,3,1)
(6,14,1)
(8,17,1)
(13,7,1)
(21,8,1)
(6,21,1)
(7,15,1)
(13,14,1)
(15,6,1)
(14,25,1)
(5,18,1)
(9,23,1)
(25,4,1)
(11,5,1)
(1,13,1)
(12,14,1)
(21,8,2)
(12,3,2)
(1,8,2)
(13,14,2)
(7,8,2)
(6,14,2)
(23,8,2)
(5,3,2)
(17,12,2)
(15,8,2)
(18,3,2)
(13,8,2)
(17,3,2)
(6,8,2)
(12,14,2)
(23,13,2)
(11,3,2)
-----------------------------------
(0,)
(1,result)
(2,if(STATIC_CONST_TRUE)
(3,STATIC_CONST_TRUE)
(4,data)
(5,"%c")
(6,data++)
(7,data)
(8,STATIC_CONST_TRUE)
(9,RET)
(10,)
(11,data)
(12,&data)
(13,result = data)
(14,data = \\\' \\\')
(15,result)
(16,if(STATIC_CONST_TRUE)
(17,fscanf (stdin, "%c", &data)
(18,stdin)
(19,data)
(20,)
(21,data)
(22,)
(23,printHexCharLine(result)
(24,result)
(25,\\\' \\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^