-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        short result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(31,15,0)
(18,20,0)
(21,20,0)
(28,15,0)
(4,28,0)
(5,15,0)
(26,12,0)
(30,25,0)
(30,28,0)
(26,18,0)
(36,4,0)
(34,26,0)
(1,10,0)
(13,17,0)
(4,18,0)
(27,10,0)
(7,18,0)
(19,10,0)
(25,28,0)
(3,30,0)
(0,18,0)
(17,10,0)
(33,20,0)
(35,11,0)
(29,25,0)
(12,26,0)
(11,15,0)
(8,28,0)
(12,10,0)
(22,12,0)
(32,10,0)
(6,12,0)
(14,15,0)
(23,25,0)
(9,15,0)
(25,18,0)
(37,20,0)
(4,36,1)
(35,2,1)
(19,17,1)
(30,25,1)
(36,2,1)
(24,14,1)
(12,26,1)
(14,11,1)
(6,22,1)
(24,31,1)
(3,25,1)
(31,30,1)
(2,19,1)
(11,35,1)
(26,18,1)
(34,6,1)
(2,32,1)
(29,4,1)
(30,3,1)
(22,16,1)
(26,34,1)
(7,0,1)
(18,7,1)
(17,13,1)
(25,23,1)
(23,29,1)
(32,12,1)
(4,18,1)
(25,18,1)
(16,18,1)
(13,16,1)
(29,2,2)
(25,2,2)
(12,26,2)
(14,2,2)
(22,16,2)
(34,16,2)
(6,16,2)
(30,25,2)
(30,2,2)
(26,16,2)
(11,2,2)
(25,18,2)
(17,16,2)
(4,2,2)
(35,2,2)
(36,2,2)
(13,16,2)
(3,2,2)
(12,16,2)
(31,2,2)
(4,18,2)
(26,18,2)
(19,16,2)
(23,2,2)
(32,16,2)
-----------------------------------
(0,data)
(1,case 6:)
(2,7)
(3,result)
(4,++data)
(5,case 7:)
(6,"%hd")
(7,0)
(8,result)
(9,default:)
(10,)
(11,printLine("Benign, fixed string")
(12,fscanf (stdin, "%hd", &data)
(13,"Benign, fixed string")
(14,break;)
(15,)
(16,6)
(17,printLine("Benign, fixed string")
(18,data = 0)
(19,break;)
(20,)
(21,data)
(22,stdin)
(23,data)
(24,RET)
(25,result = data)
(26,&data)
(27,default:)
(28,)
(29,result)
(30,printIntLine(result)
(31,break;)
(32,break;)
(33,switch(7)
(34,data)
(35,"Benign, fixed string")
(36,data)
(37,switch(6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^