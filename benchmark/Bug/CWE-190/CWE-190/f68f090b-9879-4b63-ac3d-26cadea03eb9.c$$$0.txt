-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * dataPtr = (char *)dataVoidPtr;
    /* dereference dataPtr into data */
    char data = (*dataPtr);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,49,50,54,56
-----computeFrom-----
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_multiply_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__char_max_multiply_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char * dataPtr = (char *)dataVoidPtr;
char * dataPtr = (char *)dataVoidPtr;
char
* dataPtr = (char *)dataVoidPtr
*
dataPtr
= (char *)dataVoidPtr
(char *)dataVoidPtr
char *
char
*
*
dataVoidPtr
dataVoidPtr
char data = (*dataPtr);
char data = (*dataPtr);
char
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,19,0)
(18,10,0)
(5,16,0)
(20,7,0)
(7,22,0)
(11,7,0)
(21,13,0)
(26,3,0)
(1,3,0)
(12,10,0)
(15,22,0)
(23,9,0)
(20,23,0)
(0,16,0)
(22,7,0)
(0,17,0)
(17,0,0)
(4,23,0)
(25,10,0)
(16,0,0)
(22,16,0)
(2,0,0)
(7,10,0)
(23,20,0)
(6,9,0)
(13,9,0)
(3,7,0)
(13,23,0)
(16,10,0)
(8,20,0)
(24,20,0)
(3,7,1)
(0,2,1)
(20,24,1)
(8,4,1)
(16,0,1)
(14,13,1)
(13,21,1)
(23,20,1)
(20,7,1)
(21,23,1)
(0,19,1)
(7,22,1)
(1,7,1)
(2,5,1)
(26,1,1)
(11,16,1)
(22,16,1)
(15,11,1)
(22,15,1)
(3,26,1)
(0,17,1)
(4,3,1)
(13,23,1)
(14,3,1)
(24,8,1)
(21,3,2)
(23,3,2)
(3,7,2)
(0,17,2)
(13,23,2)
(13,3,2)
(8,3,2)
(20,7,2)
(7,22,2)
(24,3,2)
(22,16,2)
(4,3,2)
(20,3,2)
(16,0,2)
(23,20,2)
(0,19,2)
-----------------------------------
(0,(char *)
(1,data)
(2,dataVoidPtr)
(3,data > 0)
(4,result)
(5,dataPtr)
(6,result)
(7,data = (*dataPtr)
(8,data)
(9,)
(10,)
(11,data)
(12,data)
(13,printHexCharLine(result)
(14,RET)
(15,dataPtr)
(16,* dataPtr = (char *)
(17,char *)
(18,if(data > 0)
(19,void * dataVoidPtr)
(20,data * 2)
(21,result)
(22,*dataPtr)
(23,result = data * 2)
(24,2)
(25,dataPtr)
(26,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^