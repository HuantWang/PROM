-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_postinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_postinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_postinc_15_bad()
CWE190_Integer_Overflow__int_fscanf_postinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,4,0)
(18,25,0)
(25,4,0)
(6,35,0)
(21,20,0)
(2,16,0)
(10,9,0)
(34,21,0)
(12,34,0)
(3,25,0)
(31,4,0)
(7,21,0)
(1,35,0)
(37,18,0)
(33,20,0)
(9,35,0)
(17,4,0)
(29,35,0)
(27,20,0)
(26,36,0)
(34,9,0)
(36,35,0)
(8,21,0)
(11,16,0)
(33,9,0)
(21,9,0)
(15,17,0)
(20,16,0)
(13,4,0)
(30,25,0)
(5,33,0)
(22,16,0)
(18,20,0)
(25,18,0)
(24,4,0)
(28,20,0)
(23,35,0)
(1,34,1)
(33,20,1)
(26,19,1)
(31,17,1)
(17,15,1)
(8,33,1)
(32,1,1)
(37,3,1)
(18,20,1)
(18,37,1)
(25,18,1)
(21,20,1)
(33,5,1)
(23,36,1)
(5,19,1)
(34,12,1)
(15,0,1)
(36,26,1)
(0,20,1)
(30,0,1)
(32,23,1)
(28,27,1)
(19,13,1)
(21,7,1)
(19,31,1)
(12,21,1)
(7,8,1)
(13,25,1)
(3,30,1)
(20,28,1)
(34,21,1)
(30,0,2)
(8,19,2)
(37,0,2)
(1,19,2)
(15,0,2)
(21,20,2)
(34,21,2)
(13,0,2)
(31,0,2)
(36,19,2)
(5,19,2)
(26,19,2)
(7,19,2)
(18,20,2)
(34,19,2)
(23,19,2)
(33,20,2)
(17,0,2)
(21,19,2)
(25,0,2)
(33,19,2)
(12,19,2)
(3,0,2)
(25,18,2)
(18,0,2)
-----------------------------------
(0,6)
(1,break;)
(2,switch(7)
(3,"%d")
(4,)
(5,data)
(6,case 7:)
(7,data)
(8,result)
(9,)
(10,result)
(11,switch(6)
(12,result)
(13,break;)
(14,case 6:)
(15,"Benign, fixed string")
(16,)
(17,printLine("Benign, fixed string")
(18,&data)
(19,7)
(20,data = 0)
(21,result = data)
(22,data)
(23,break;)
(24,default:)
(25,fscanf(stdin, "%d", &data)
(26,"Benign, fixed string")
(27,data)
(28,0)
(29,default:)
(30,stdin)
(31,break;)
(32,RET)
(33,data++)
(34,printIntLine(result)
(35,)
(36,printLine("Benign, fixed string")
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^