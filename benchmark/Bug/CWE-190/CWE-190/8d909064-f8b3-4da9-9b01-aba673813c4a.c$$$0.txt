-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_08_bad()
CWE190_Integer_Overflow__int_max_multiply_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,15,0)
(24,15,0)
(8,16,0)
(7,27,0)
(19,27,0)
(3,22,0)
(21,16,0)
(16,27,0)
(12,24,0)
(15,22,0)
(24,27,0)
(14,15,0)
(11,22,0)
(26,12,0)
(6,12,0)
(12,25,0)
(27,0,0)
(13,15,0)
(23,26,0)
(4,24,0)
(24,12,0)
(2,24,0)
(18,22,0)
(1,20,0)
(10,25,0)
(26,25,0)
(5,9,1)
(6,16,1)
(24,4,1)
(17,16,1)
(24,27,1)
(16,15,1)
(23,12,1)
(21,5,1)
(26,12,1)
(24,15,1)
(19,7,1)
(27,19,1)
(17,26,1)
(8,21,1)
(15,14,1)
(16,27,1)
(16,8,1)
(9,15,1)
(12,24,1)
(26,23,1)
(17,5,1)
(14,13,1)
(4,2,1)
(5,27,1)
(2,6,1)
(7,9,1)
(12,24,2)
(7,9,2)
(19,9,2)
(21,5,2)
(24,27,2)
(6,16,2)
(24,16,2)
(26,16,2)
(4,16,2)
(26,12,2)
(16,27,2)
(27,9,2)
(12,16,2)
(8,5,2)
(2,16,2)
(23,16,2)
(24,15,2)
(16,5,2)
(16,15,2)
-----------------------------------
(0,)
(1,if(data > 0)
(2,data)
(3,data)
(4,2)
(5,staticReturnsTrue()
(6,result)
(7,data)
(8,0)
(9,staticReturnsTrue()
(10,result)
(11,if(staticReturnsTrue()
(12,result = data * 2)
(13,data)
(14,0)
(15,data = 0)
(16,data > 0)
(17,RET)
(18,if(staticReturnsTrue()
(19,INT_MAX)
(20,)
(21,data)
(22,)
(23,result)
(24,data * 2)
(25,)
(26,printIntLine(result)
(27,data = INT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^