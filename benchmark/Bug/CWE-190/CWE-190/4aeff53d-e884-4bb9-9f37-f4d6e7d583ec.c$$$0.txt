-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_02_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(23,18,0)
(9,11,0)
(13,24,0)
(20,23,0)
(13,17,0)
(24,7,0)
(23,20,0)
(17,11,0)
(16,17,0)
(6,24,0)
(26,11,0)
(8,27,0)
(27,24,0)
(5,20,0)
(9,17,0)
(20,24,0)
(1,23,0)
(17,13,0)
(4,24,0)
(14,22,0)
(2,9,0)
(3,7,0)
(29,7,0)
(25,27,0)
(12,23,0)
(19,13,0)
(10,13,0)
(0,7,0)
(4,6,1)
(2,17,1)
(17,13,1)
(20,5,1)
(21,15,1)
(5,12,1)
(20,24,1)
(16,27,1)
(21,9,1)
(23,20,1)
(15,23,1)
(25,15,1)
(27,8,1)
(21,27,1)
(15,28,1)
(28,24,1)
(9,2,1)
(12,1,1)
(8,25,1)
(1,28,1)
(10,16,1)
(19,10,1)
(13,19,1)
(27,24,1)
(24,4,1)
(13,24,1)
(9,17,1)
(23,20,2)
(12,28,2)
(1,28,2)
(20,24,2)
(17,27,2)
(13,27,2)
(20,28,2)
(27,15,2)
(10,27,2)
(23,28,2)
(17,13,2)
(19,27,2)
(13,24,2)
(9,27,2)
(5,28,2)
(2,27,2)
(8,15,2)
(25,15,2)
(16,27,2)
(27,24,2)
(9,17,2)
-----------------------------------
(0,data)
(1,stdin)
(2,result)
(3,if(1)
(4,\\\' \\\')
(5,data)
(6,data)
(7,)
(8,0)
(9,printHexCharLine(result)
(10,data)
(11,)
(12,"%c")
(13,data * 2)
(14,if(data > 0)
(15,1)
(16,result)
(17,result = data * 2)
(18,)
(19,2)
(20,&data)
(21,RET)
(22,)
(23,fscanf (stdin, "%c", &data)
(24,data = \\\' \\\')
(25,data)
(26,result)
(27,data > 0)
(28,1)
(29,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^