-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
        {
            int result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
67,68
67,69
67,70
68,69
69,70
71,72
72,73
72,74
73,74
74,75
74,76
76,77
76,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
91,94
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
108,109
108,110
109,110
111,112
111,113
112,113
112,114
115,116
117,118
117,119
118,119
119,120
119,121
121,122
121,123
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
135,136
136,137
137,138
137,139
138,139
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,65,66,70,75,77,81,83,87,89,95,97,101,103,106,107,110,113,114,116,120,122,126,128,132,134,139,140
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
63,64
63,65
79,80
79,81
92,93
92,94
93,94
93,95
98,99
98,100
124,125
124,126
-----guardedBy-----
38,54
103,128
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_12_bad()
CWE190_Integer_Overflow__int_fgets_square_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX)
data > INT_MIN
data
data
INT_MIN
INT_MIN
abs(data) < (long)sqrt((double)INT_MAX)
abs(data)
abs
abs
data
data
(long)sqrt((double)INT_MAX)
long
long

sqrt((double)INT_MAX)
sqrt
sqrt
(double)INT_MAX
double
double

INT_MAX
INT_MAX
{            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(58,62,0)
(32,56,0)
(63,44,0)
(41,40,0)
(57,44,0)
(15,57,0)
(35,51,0)
(20,10,0)
(37,15,0)
(67,27,0)
(9,0,0)
(55,65,0)
(5,14,0)
(59,34,0)
(44,48,0)
(25,10,0)
(68,10,0)
(56,15,0)
(64,25,0)
(28,61,0)
(34,52,0)
(2,40,0)
(13,65,0)
(38,71,0)
(40,10,0)
(70,45,0)
(14,67,0)
(33,28,0)
(51,56,0)
(14,51,0)
(19,51,0)
(5,67,0)
(25,56,0)
(11,57,0)
(69,20,0)
(40,41,0)
(7,71,0)
(65,57,0)
(45,59,0)
(36,14,0)
(60,20,0)
(8,25,0)
(1,7,0)
(65,39,0)
(20,28,0)
(12,0,0)
(20,69,0)
(54,57,0)
(25,64,0)
(39,65,0)
(69,34,0)
(6,64,0)
(25,28,0)
(15,56,0)
(30,0,0)
(43,25,0)
(47,67,0)
(4,40,0)
(69,41,0)
(42,3,0)
(52,34,0)
(51,28,0)
(31,17,0)
(66,28,0)
(45,22,0)
(51,14,0)
(34,69,0)
(34,59,0)
(24,65,0)
(56,16,0)
(21,44,0)
(51,10,0)
(50,5,0)
(41,69,0)
(3,53,0)
(22,45,0)
(59,45,0)
(46,39,0)
(7,64,0)
(23,10,0)
(40,56,0)
(64,71,0)
(10,0,0)
(40,28,0)
(18,58,0)
(20,56,0)
(6,41,1)
(40,56,1)
(54,49,1)
(20,60,1)
(50,14,1)
(40,28,1)
(4,2,1)
(18,39,1)
(51,19,1)
(29,5,1)
(15,57,1)
(51,10,1)
(45,70,1)
(26,28,1)
(10,68,1)
(25,56,1)
(57,11,1)
(39,46,1)
(19,35,1)
(70,20,1)
(25,10,1)
(69,20,1)
(33,66,1)
(60,40,1)
(28,33,1)
(29,3,1)
(69,34,1)
(13,24,1)
(34,59,1)
(51,56,1)
(14,51,1)
(46,65,1)
(41,40,1)
(11,54,1)
(32,39,1)
(59,45,1)
(39,65,1)
(43,8,1)
(15,37,1)
(25,28,1)
(56,15,1)
(3,42,1)
(5,50,1)
(34,52,1)
(58,18,1)
(64,25,1)
(37,32,1)
(20,28,1)
(20,56,1)
(24,55,1)
(25,43,1)
(40,10,1)
(65,57,1)
(40,4,1)
(7,1,1)
(29,7,1)
(35,36,1)
(7,64,1)
(66,49,1)
(1,64,1)
(68,23,1)
(45,22,1)
(5,14,1)
(36,26,1)
(49,10,1)
(42,41,1)
(41,69,1)
(26,56,1)
(2,26,1)
(20,10,1)
(8,6,1)
(55,57,1)
(65,13,1)
(51,28,1)
(26,58,1)
(25,56,2)
(4,26,2)
(65,57,2)
(3,41,2)
(7,41,2)
(15,39,2)
(24,49,2)
(51,56,2)
(57,49,2)
(51,28,2)
(6,41,2)
(25,28,2)
(45,40,2)
(40,28,2)
(1,41,2)
(33,49,2)
(51,10,2)
(25,10,2)
(64,25,2)
(40,56,2)
(2,26,2)
(14,51,2)
(40,10,2)
(60,40,2)
(5,26,2)
(42,41,2)
(59,45,2)
(56,39,2)
(20,28,2)
(20,10,2)
(43,41,2)
(37,39,2)
(59,40,2)
(45,22,2)
(28,49,2)
(56,15,2)
(11,49,2)
(34,52,2)
(39,49,2)
(50,26,2)
(51,26,2)
(15,57,2)
(20,40,2)
(5,14,2)
(32,39,2)
(69,20,2)
(46,49,2)
(69,40,2)
(66,49,2)
(69,34,2)
(55,49,2)
(40,26,2)
(34,40,2)
(13,49,2)
(41,40,2)
(58,39,2)
(25,41,2)
(34,59,2)
(41,26,2)
(41,69,2)
(70,40,2)
(64,41,2)
(8,41,2)
(35,26,2)
(14,26,2)
(39,65,2)
(36,26,2)
(65,49,2)
(7,64,2)
(20,56,2)
(19,26,2)
(54,49,2)
(18,39,2)
-----------------------------------
(0,)
(1,result)
(2,data)
(3,printLine("data value is too large to perform arithmetic safely.")
(4,INT_MIN)
(5,printIntLine(result)
(6,result)
(7,printIntLine(result)
(8,data)
(9,if(globalReturnsTrueOrFalse()
(10,data = 0)
(11,"")
(12,if(globalReturnsTrueOrFalse()
(13,stdin)
(14,result = data * data)
(15,atoi(inputBuffer)
(16,)
(17,)
(18,"fgets()
(19,data)
(20,abs(data)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,double)
(23,data)
(24,CHAR_ARRAY_SIZE)
(25,data * data)
(26,globalReturnsTrueOrFalse()
(27,)
(28,data = 2)
(29,RET)
(30,data)
(31,if (data > INT_MIN && abs(data)
(32,data)
(33,2)
(34,(long)
(35,data)
(36,result)
(37,inputBuffer)
(38,result)
(39,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,data > INT_MIN)
(41,data > INT_MIN && abs(data)
(42,"data value is too large to perform arithmetic safely.")
(43,data)
(44,)
(45,(double)
(46,NULL)
(47,result)
(48,)
(49,globalReturnsTrueOrFalse()
(50,result)
(51,data * data)
(52,long)
(53,)
(54,inputBuffer)
(55,inputBuffer)
(56,data = atoi(inputBuffer)
(57,inputBuffer[CHAR_ARRAY_SIZE] = "")
(58,printLine("fgets()
(59,sqrt((double)
(60,data)
(61,)
(62,)
(63,inputBuffer)
(64,result = data * data)
(65,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(66,data)
(67,)
(68,0)
(69,abs(data)
(70,INT_MAX)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^