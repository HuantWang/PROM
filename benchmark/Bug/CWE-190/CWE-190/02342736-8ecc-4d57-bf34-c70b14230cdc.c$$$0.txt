-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_13_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_13_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_13_bad()
CWE190_Integer_Overflow__int_fscanf_square_13_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,24,0)
(20,2,0)
(3,18,0)
(14,29,0)
(7,18,0)
(5,27,0)
(8,29,0)
(29,19,0)
(4,2,0)
(22,11,0)
(2,28,0)
(13,1,0)
(27,2,0)
(26,25,0)
(4,1,0)
(23,18,0)
(27,4,0)
(9,1,0)
(17,11,0)
(16,3,0)
(21,18,0)
(29,24,0)
(24,3,0)
(24,29,0)
(1,3,0)
(0,3,0)
(6,4,0)
(1,4,0)
(15,25,0)
(24,12,1)
(11,17,1)
(24,3,1)
(17,22,1)
(26,15,1)
(1,3,1)
(10,25,1)
(27,5,1)
(10,27,1)
(12,8,1)
(6,25,1)
(13,6,1)
(27,4,1)
(14,11,1)
(9,13,1)
(16,0,1)
(25,26,1)
(3,16,1)
(8,14,1)
(22,3,1)
(5,4,1)
(29,24,1)
(4,1,1)
(1,9,1)
(15,29,1)
(15,11,1)
(24,3,2)
(27,4,2)
(13,25,2)
(9,25,2)
(14,11,2)
(5,25,2)
(1,25,2)
(4,1,2)
(1,3,2)
(4,25,2)
(6,25,2)
(29,11,2)
(27,25,2)
(24,11,2)
(8,11,2)
(12,11,2)
(29,24,2)
-----------------------------------
(0,data)
(1,data * data)
(2,)
(3,data = 0)
(4,result = data * data)
(5,result)
(6,result)
(7,if(GLOBAL_CONST_FIVE==5)
(8,"%d")
(9,data)
(10,RET)
(11,GLOBAL_CONST_FIVE==5)
(12,data)
(13,data)
(14,stdin)
(15,GLOBAL_CONST_FIVE)
(16,0)
(17,5)
(18,)
(19,)
(20,result)
(21,data)
(22,GLOBAL_CONST_FIVE)
(23,if(GLOBAL_CONST_FIVE==5)
(24,&data)
(25,GLOBAL_CONST_FIVE==5)
(26,5)
(27,printIntLine(result)
(28,)
(29,fscanf(stdin, "%d", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^