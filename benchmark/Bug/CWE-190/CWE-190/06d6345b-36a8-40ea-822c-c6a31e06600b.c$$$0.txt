-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (INT_MAX/2))
            {
                int result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
67,68
67,69
67,70
68,69
69,70
71,72
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
81,82
81,83
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
101,102
101,103
101,104
102,103
102,104
103,104
105,106
106,107
106,108
107,108
110,111
110,112
111,112
112,113
112,114
114,115
114,116
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,65,66,70,75,76,80,82,86,87,91,93,98,99,104,108,109,113,115,119,120,124,126,131,132
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
63,64
63,65
73,74
73,75
84,85
84,86
96,97
96,98
102,103
102,104
106,107
106,108
117,118
117,119
-----guardedBy-----
38,54
75,86
98,119
104,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_12_bad()
CWE190_Integer_Overflow__int_fgets_multiply_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (INT_MAX/2)
data
data
(INT_MAX/2)
INT_MAX/2
INT_MAX
INT_MAX
2
{                int result = data * 2;                printIntLine(result);            }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(10,46,0)
(67,16,0)
(28,8,0)
(3,68,0)
(35,30,0)
(53,3,0)
(37,41,0)
(43,46,0)
(8,11,0)
(7,44,0)
(3,44,0)
(11,18,0)
(34,39,0)
(0,25,0)
(60,61,0)
(71,55,0)
(66,68,0)
(43,68,0)
(8,18,0)
(19,30,0)
(43,44,0)
(36,58,0)
(64,17,0)
(68,33,0)
(3,46,0)
(43,11,0)
(30,55,0)
(44,70,0)
(68,62,0)
(40,42,0)
(15,62,0)
(31,25,0)
(59,34,0)
(69,9,0)
(30,52,0)
(1,46,0)
(13,58,0)
(2,55,0)
(17,46,0)
(62,16,0)
(62,68,0)
(29,68,0)
(38,3,0)
(25,0,0)
(16,58,0)
(56,16,0)
(5,19,0)
(17,44,0)
(6,41,0)
(4,25,0)
(55,68,0)
(25,16,0)
(55,46,0)
(42,57,0)
(19,52,0)
(48,22,0)
(66,41,0)
(41,66,0)
(27,44,0)
(17,68,0)
(26,66,0)
(20,17,0)
(45,11,0)
(50,0,0)
(58,21,0)
(12,25,0)
(24,61,0)
(23,43,0)
(66,46,0)
(55,44,0)
(46,61,0)
(47,61,0)
(49,54,0)
(55,30,0)
(11,43,0)
(66,44,0)
(32,43,0)
(65,52,0)
(72,18,0)
(2,35,1)
(51,17,1)
(8,11,1)
(67,56,1)
(66,44,1)
(17,44,1)
(41,37,1)
(50,25,1)
(68,62,1)
(17,20,1)
(40,0,1)
(51,19,1)
(25,16,1)
(16,67,1)
(4,31,1)
(26,3,1)
(7,27,1)
(35,66,1)
(3,68,1)
(55,71,1)
(55,44,1)
(46,10,1)
(17,46,1)
(66,46,1)
(12,4,1)
(34,59,1)
(6,26,1)
(3,38,1)
(14,44,1)
(66,68,1)
(66,41,1)
(20,64,1)
(43,23,1)
(45,17,1)
(5,30,1)
(19,30,1)
(17,68,1)
(43,68,1)
(25,12,1)
(28,11,1)
(30,55,1)
(3,44,1)
(23,32,1)
(42,40,1)
(43,46,1)
(51,34,1)
(59,66,1)
(56,63,1)
(38,53,1)
(63,46,1)
(51,3,1)
(37,6,1)
(32,45,1)
(8,28,1)
(43,44,1)
(31,16,1)
(62,15,1)
(51,8,1)
(19,5,1)
(11,43,1)
(55,46,1)
(0,50,1)
(53,14,1)
(44,7,1)
(62,16,1)
(15,29,1)
(14,42,1)
(55,68,1)
(3,46,1)
(71,2,1)
(0,25,1)
(64,14,1)
(14,68,1)
(27,63,1)
(10,1,1)
(29,0,1)
(29,0,2)
(55,44,2)
(15,0,2)
(56,63,2)
(53,14,2)
(45,17,2)
(4,63,2)
(66,44,2)
(28,17,2)
(20,14,2)
(40,0,2)
(41,3,2)
(50,63,2)
(19,66,2)
(2,66,2)
(23,17,2)
(0,63,2)
(5,66,2)
(3,68,2)
(3,46,2)
(17,44,2)
(67,63,2)
(68,0,2)
(59,66,2)
(66,3,2)
(34,66,2)
(62,0,2)
(66,46,2)
(31,63,2)
(30,55,2)
(68,62,2)
(71,66,2)
(43,17,2)
(66,41,2)
(66,68,2)
(55,66,2)
(55,46,2)
(26,3,2)
(17,68,2)
(30,66,2)
(17,14,2)
(3,44,2)
(38,14,2)
(25,16,2)
(44,63,2)
(6,3,2)
(19,30,2)
(27,63,2)
(43,46,2)
(12,63,2)
(11,17,2)
(3,14,2)
(8,17,2)
(0,25,2)
(43,44,2)
(16,63,2)
(62,16,2)
(8,11,2)
(32,17,2)
(55,68,2)
(64,14,2)
(7,63,2)
(35,66,2)
(42,0,2)
(43,68,2)
(37,3,2)
(17,46,2)
(11,43,2)
(25,63,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,data)
(2,data)
(3,data > 0)
(4,CHAR_ARRAY_SIZE)
(5,result)
(6,INT_MAX)
(7,2)
(8,printIntLine(result)
(9,)
(10,0)
(11,result = data * 2)
(12,stdin)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,globalReturnsTrueOrFalse()
(15,inputBuffer)
(16,inputBuffer[CHAR_ARRAY_SIZE] = "")
(17,data > 0)
(18,)
(19,printIntLine(result)
(20,0)
(21,)
(22,)
(23,2)
(24,data)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,data)
(27,data)
(28,result)
(29,data)
(30,result = data * 2)
(31,inputBuffer)
(32,data)
(33,)
(34,printLine("data value is too large to perform arithmetic safely.")
(35,result)
(36,inputBuffer)
(37,2)
(38,0)
(39,)
(40,"fgets()
(41,INT_MAX/2)
(42,printLine("fgets()
(43,data * 2)
(44,data = 2)
(45,result)
(46,data = 0)
(47,if(globalReturnsTrueOrFalse()
(48,if (data < (INT_MAX/2)
(49,if(data > 0)
(50,NULL)
(51,RET)
(52,)
(53,data)
(54,)
(55,data * 2)
(56,inputBuffer)
(57,)
(58,)
(59,"data value is too large to perform arithmetic safely.")
(60,if(globalReturnsTrueOrFalse()
(61,)
(62,atoi(inputBuffer)
(63,globalReturnsTrueOrFalse()
(64,data)
(65,result)
(66,data < (INT_MAX/2)
(67,"")
(68,data = atoi(inputBuffer)
(69,if(data > 0)
(70,)
(71,2)
(72,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^