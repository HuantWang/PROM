-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_rand_square_15_bad()
CWE190_Integer_Overflow__short_rand_square_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(37,17,0)
(28,22,0)
(10,17,0)
(2,36,0)
(3,33,0)
(17,10,0)
(10,33,0)
(16,33,0)
(34,36,0)
(26,11,0)
(37,11,0)
(19,10,0)
(15,16,0)
(4,28,0)
(14,6,0)
(21,36,0)
(33,22,0)
(33,16,0)
(25,29,0)
(12,10,0)
(5,6,0)
(9,18,0)
(1,36,0)
(16,30,0)
(18,36,0)
(10,6,0)
(11,36,0)
(8,22,0)
(6,29,0)
(13,29,0)
(30,16,0)
(31,22,0)
(16,15,0)
(0,22,0)
(23,22,0)
(32,17,0)
(20,37,0)
(17,11,0)
(7,29,0)
(9,24,1)
(6,5,1)
(15,3,1)
(27,2,1)
(10,33,1)
(27,21,1)
(37,20,1)
(32,24,1)
(20,17,1)
(10,19,1)
(4,35,1)
(24,23,1)
(21,18,1)
(5,14,1)
(24,8,1)
(17,10,1)
(3,35,1)
(12,32,1)
(10,6,1)
(16,15,1)
(23,33,1)
(16,30,1)
(19,12,1)
(2,37,1)
(18,9,1)
(33,16,1)
(8,28,1)
(35,6,1)
(37,17,1)
(28,4,1)
(37,17,2)
(21,24,2)
(18,24,2)
(19,24,2)
(33,16,2)
(10,33,2)
(12,24,2)
(8,35,2)
(17,24,2)
(37,24,2)
(9,24,2)
(4,35,2)
(20,24,2)
(16,15,2)
(15,35,2)
(28,35,2)
(2,24,2)
(3,35,2)
(16,30,2)
(10,24,2)
(32,24,2)
(33,35,2)
(16,35,2)
(23,35,2)
(17,10,2)
(10,6,2)
-----------------------------------
(0,default:)
(1,case 7:)
(2,break;)
(3,data)
(4,"Benign, fixed string")
(5,0)
(6,data = 0)
(7,data)
(8,break;)
(9,"Benign, fixed string")
(10,data * data)
(11,)
(12,data)
(13,switch(7)
(14,data)
(15,RAND32()
(16,(short)
(17,result = data * data)
(18,printLine("Benign, fixed string")
(19,data)
(20,result)
(21,break;)
(22,)
(23,break;)
(24,7)
(25,switch(6)
(26,result)
(27,RET)
(28,printLine("Benign, fixed string")
(29,)
(30,short)
(31,case 6:)
(32,result)
(33,data = (short)
(34,default:)
(35,6)
(36,)
(37,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^