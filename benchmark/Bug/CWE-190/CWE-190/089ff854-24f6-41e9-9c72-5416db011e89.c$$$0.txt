-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%u", &data);
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
55,56
55,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,60,62,66,68
-----computeFrom-----
18,19
18,20
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType
CWE190_Integer_Overflow__unsigned_int_fscanf_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,10,0)
(5,27,0)
(31,5,0)
(8,22,0)
(29,21,0)
(23,21,0)
(4,23,0)
(9,32,0)
(27,20,0)
(18,32,0)
(11,10,0)
(19,26,0)
(26,19,0)
(16,20,0)
(1,0,0)
(21,20,0)
(25,26,0)
(28,22,0)
(19,10,0)
(3,19,0)
(32,21,0)
(13,18,0)
(22,20,0)
(14,5,0)
(7,18,0)
(6,27,0)
(5,31,0)
(24,31,0)
(26,5,0)
(23,22,0)
(32,20,0)
(22,23,0)
(15,21,0)
(2,31,0)
(0,19,0)
(30,20,0)
(10,27,0)
(17,26,0)
(3,5,1)
(8,21,1)
(4,28,1)
(2,14,1)
(13,7,1)
(22,23,1)
(5,31,1)
(26,5,1)
(23,21,1)
(15,29,1)
(25,17,1)
(24,2,1)
(1,19,1)
(0,1,1)
(21,15,1)
(14,32,1)
(0,19,1)
(18,13,1)
(28,8,1)
(7,22,1)
(31,24,1)
(12,0,1)
(9,18,1)
(23,4,1)
(32,9,1)
(26,25,1)
(32,21,1)
(17,3,1)
(19,26,1)
(19,26,2)
(22,23,2)
(23,21,2)
(32,21,2)
(0,19,2)
(5,31,2)
(26,5,2)
-----------------------------------
(0,printUnsignedLine(result)
(1,result)
(2,myUnion)
(3,result)
(4,data)
(5,data = myUnion.unionSecond)
(6,data)
(7,myUnion)
(8,stdin)
(9,data)
(10,)
(11,result)
(12,RET)
(13,unionFirst)
(14,data)
(15,0)
(16,myUnion)
(17,data)
(18,myUnion.unionFirst)
(19,result = data * data)
(20,)
(21,data = 0)
(22,fscanf (stdin, "%u", &data)
(23,&data)
(24,unionSecond)
(25,data)
(26,data * data)
(27,)
(28,"%u")
(29,data)
(30,data)
(31,myUnion.unionSecond)
(32,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^