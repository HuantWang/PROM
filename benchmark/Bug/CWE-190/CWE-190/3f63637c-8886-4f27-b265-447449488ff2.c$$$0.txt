-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
73,76
74,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
83,84
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,77,80,82,85,89,91
-----computeFrom-----
32,33
32,34
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_32_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(29,33,0)
(24,36,0)
(9,6,0)
(32,29,0)
(31,8,0)
(26,22,0)
(12,9,0)
(25,32,0)
(18,35,0)
(38,20,0)
(2,38,0)
(27,13,0)
(18,7,0)
(4,7,0)
(23,33,0)
(22,13,0)
(43,1,0)
(42,41,0)
(32,8,0)
(2,20,0)
(22,29,0)
(37,18,0)
(3,29,0)
(35,33,0)
(19,8,0)
(5,31,0)
(17,4,0)
(16,20,0)
(38,7,0)
(15,33,0)
(13,8,0)
(20,28,0)
(41,33,0)
(8,29,0)
(36,9,0)
(11,7,0)
(10,6,0)
(35,1,0)
(6,9,0)
(21,33,0)
(39,22,0)
(7,18,0)
(40,38,0)
(45,41,0)
(34,38,0)
(44,35,0)
(1,35,0)
(8,31,0)
(0,2,0)
(13,22,0)
(4,20,0)
(36,32,0)
(7,28,0)
(30,28,0)
(9,33,0)
(31,9,0)
(28,33,0)
(44,9,1)
(27,26,1)
(37,11,1)
(4,17,1)
(24,22,1)
(43,44,1)
(10,12,1)
(22,13,1)
(2,0,1)
(38,7,1)
(26,39,1)
(42,35,1)
(11,32,1)
(36,9,1)
(18,37,1)
(9,6,1)
(32,25,1)
(4,7,1)
(36,24,1)
(32,8,1)
(25,36,1)
(0,38,1)
(17,7,1)
(34,4,1)
(13,8,1)
(45,42,1)
(19,41,1)
(2,38,1)
(1,43,1)
(38,40,1)
(18,35,1)
(6,10,1)
(40,34,1)
(39,8,1)
(7,18,1)
(14,2,1)
(13,27,1)
(31,5,1)
(35,1,1)
(41,45,1)
(5,19,1)
(31,9,1)
(8,31,1)
(35,1,2)
(32,8,2)
(2,38,2)
(13,8,2)
(31,9,2)
(38,7,2)
(7,18,2)
(9,6,2)
(4,7,2)
(18,35,2)
(22,13,2)
(36,9,2)
(8,31,2)
-----------------------------------
(0,result)
(1,&data)
(2,printHexCharLine(result)
(3,data)
(4,++data)
(5,dataPtr1)
(6,&data)
(7,data = *dataPtr2)
(8,data = *dataPtr1)
(9,*dataPtr1 = &data)
(10,data)
(11,data)
(12,dataPtr1)
(13,&data)
(14,RET)
(15,dataPtr2)
(16,result)
(17,data)
(18,*dataPtr2)
(19,data)
(20,)
(21,data)
(22,fscanf (stdin, "%c", &data)
(23,dataPtr1)
(24,dataPtr1)
(25,data)
(26,"%c")
(27,data)
(28,)
(29,)
(30,data)
(31,*dataPtr1)
(32,*dataPtr1 = data)
(33,)
(34,result)
(35,*dataPtr2 = &data)
(36,*dataPtr1)
(37,dataPtr2)
(38,result = data)
(39,stdin)
(40,data)
(41,data = \\\' \\\')
(42,data)
(43,data)
(44,dataPtr2)
(45,\\\' \\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^