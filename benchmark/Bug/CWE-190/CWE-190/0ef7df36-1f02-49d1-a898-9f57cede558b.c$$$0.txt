-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,73,76,78,81,85,87
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_32_bad()
CWE190_Integer_Overflow__char_max_preinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,35,0)
(18,6,0)
(22,43,0)
(24,25,0)
(29,22,0)
(30,0,0)
(33,39,0)
(0,22,0)
(15,6,0)
(18,35,0)
(3,43,0)
(40,33,0)
(1,15,0)
(23,43,0)
(20,27,0)
(4,22,0)
(8,39,0)
(7,11,0)
(2,10,0)
(9,13,0)
(12,6,0)
(41,13,0)
(15,13,0)
(27,43,0)
(11,22,0)
(37,43,0)
(21,6,0)
(42,18,0)
(41,15,0)
(34,12,0)
(39,43,0)
(32,3,0)
(33,29,0)
(29,11,0)
(25,39,0)
(5,8,0)
(14,35,0)
(38,29,0)
(16,27,0)
(28,39,0)
(6,3,0)
(26,41,0)
(35,10,0)
(36,43,0)
(13,3,0)
(8,0,0)
(12,13,0)
(6,18,0)
(0,8,0)
(35,43,0)
(31,11,0)
(19,15,0)
(39,25,0)
(26,15,1)
(1,12,1)
(0,8,1)
(35,10,1)
(17,41,1)
(25,24,1)
(18,35,1)
(30,27,1)
(11,31,1)
(6,18,1)
(41,26,1)
(10,2,1)
(40,11,1)
(19,1,1)
(5,30,1)
(41,15,1)
(12,6,1)
(15,6,1)
(29,38,1)
(2,14,1)
(42,21,1)
(33,39,1)
(18,42,1)
(7,0,1)
(39,25,1)
(12,34,1)
(31,7,1)
(21,29,1)
(8,39,1)
(15,19,1)
(33,40,1)
(16,20,1)
(20,35,1)
(29,11,1)
(24,28,1)
(38,33,1)
(14,39,1)
(27,16,1)
(34,6,1)
(8,5,1)
(33,39,2)
(12,6,2)
(8,39,2)
(15,6,2)
(29,11,2)
(0,8,2)
(41,15,2)
(18,35,2)
(39,25,2)
(6,18,2)
(35,10,2)
-----------------------------------
(0,data = *dataPtr1)
(1,result)
(2,data)
(3,)
(4,data)
(5,dataPtr1)
(6,data = *dataPtr2)
(7,data)
(8,*dataPtr1)
(9,result)
(10,&data)
(11,data = CHAR_MAX)
(12,++data)
(13,)
(14,dataPtr2)
(15,result = data)
(16,' ')
(17,RET)
(18,*dataPtr2)
(19,data)
(20,data)
(21,data)
(22,)
(23,dataPtr1)
(24,data)
(25,&data)
(26,result)
(27,data = ' ')
(28,dataPtr1)
(29,*dataPtr1 = data)
(30,data)
(31,CHAR_MAX)
(32,data)
(33,*dataPtr1)
(34,data)
(35,*dataPtr2 = &data)
(36,dataPtr2)
(37,data)
(38,data)
(39,*dataPtr1 = &data)
(40,dataPtr1)
(41,printHexCharLine(result)
(42,dataPtr2)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^