-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = SHRT_MAX;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
23,25
24,25
27,28
27,29
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,25,26,30,32,36,37,41,43
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
25,36
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_multiply_01_bad()
CWE190_Integer_Overflow__short_max_multiply_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(17,10,0)
(0,20,0)
(19,7,0)
(14,5,0)
(6,10,0)
(8,10,0)
(12,21,0)
(4,0,0)
(6,5,0)
(5,6,0)
(16,5,0)
(15,8,0)
(5,20,0)
(3,21,0)
(20,21,0)
(2,20,0)
(18,6,0)
(8,6,0)
(9,7,0)
(1,0,0)
(13,20,0)
(7,21,0)
(15,6,1)
(8,6,1)
(11,8,1)
(13,7,1)
(0,4,1)
(18,0,1)
(5,14,1)
(14,16,1)
(1,20,1)
(11,0,1)
(16,18,1)
(6,5,1)
(9,19,1)
(20,2,1)
(5,20,1)
(2,13,1)
(4,1,1)
(0,20,1)
(7,9,1)
(8,15,1)
(8,6,2)
(5,0,2)
(6,0,2)
(15,0,2)
(14,0,2)
(8,0,2)
(18,0,2)
(5,20,2)
(0,20,2)
(16,0,2)
(6,5,2)
-----------------------------------
(0,data > 0)
(1,data)
(2,SHRT_MAX)
(3,if(data > 0)
(4,0)
(5,data * 2)
(6,result = data * 2)
(7,data = 0)
(8,printIntLine(result)
(9,0)
(10,)
(11,RET)
(12,data)
(13,data)
(14,2)
(15,result)
(16,data)
(17,result)
(18,result)
(19,data)
(20,data = SHRT_MAX)
(21,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^