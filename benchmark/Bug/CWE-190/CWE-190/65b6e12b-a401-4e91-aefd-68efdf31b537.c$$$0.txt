-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_18_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    goto sink;
sink:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_18_bad(){    int data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fscanf_square_18_bad()
CWE190_Integer_Overflow__int_fscanf_square_18_bad
{    int data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);
source
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
goto sink;
sink
sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
sink
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,6,0)
(9,17,0)
(14,6,0)
(7,16,0)
(23,11,0)
(0,9,0)
(8,6,0)
(3,6,0)
(13,6,0)
(10,3,0)
(12,9,0)
(5,17,0)
(17,9,0)
(17,11,0)
(1,16,0)
(21,12,0)
(18,19,0)
(20,6,0)
(16,19,0)
(15,17,0)
(19,16,0)
(12,3,0)
(2,11,0)
(9,3,0)
(4,6,0)
(11,6,0)
(19,11,0)
(21,9,1)
(20,16,1)
(17,5,1)
(12,21,1)
(18,7,1)
(19,18,1)
(1,14,1)
(5,15,1)
(17,11,1)
(15,0,1)
(7,1,1)
(11,2,1)
(22,12,1)
(19,11,1)
(0,20,1)
(16,19,1)
(12,9,1)
(14,11,1)
(2,23,1)
(9,17,1)
(16,19,2)
(9,17,2)
(12,9,2)
(17,11,2)
(19,11,2)
-----------------------------------
(0,result)
(1,stdin)
(2,0)
(3,)
(4,data)
(5,data)
(6,)
(7,"%d")
(8,source:)
(9,result = data * data)
(10,result)
(11,data = 0)
(12,printIntLine(result)
(13,sink:)
(14,goto source;)
(15,data)
(16,fscanf(stdin, "%d", &data)
(17,data * data)
(18,data)
(19,&data)
(20,goto sink;)
(21,result)
(22,RET)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^