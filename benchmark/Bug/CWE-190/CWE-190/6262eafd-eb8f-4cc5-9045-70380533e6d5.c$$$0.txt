-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        unsigned int result = data + 1;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,54,58,60,61,62,66,67,68
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_add_15_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_add_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,6,0)
(9,27,0)
(24,6,0)
(18,29,0)
(30,26,0)
(21,26,0)
(25,26,0)
(15,30,0)
(14,11,0)
(18,37,0)
(12,26,0)
(10,29,0)
(6,24,0)
(35,24,0)
(36,25,0)
(0,18,0)
(6,37,0)
(23,36,0)
(34,27,0)
(32,27,0)
(28,26,0)
(22,25,0)
(29,18,0)
(5,37,0)
(16,11,0)
(24,25,0)
(29,11,0)
(1,26,0)
(7,3,0)
(3,11,0)
(17,11,0)
(19,11,0)
(36,24,0)
(13,6,0)
(37,27,0)
(31,29,0)
(8,37,0)
(6,2,1)
(12,36,1)
(33,37,1)
(14,3,1)
(35,20,1)
(37,5,1)
(10,31,1)
(36,23,1)
(23,24,1)
(20,14,1)
(29,18,1)
(4,12,1)
(20,19,1)
(4,21,1)
(19,29,1)
(30,15,1)
(24,6,1)
(36,24,1)
(3,7,1)
(5,8,1)
(18,0,1)
(6,37,1)
(15,20,1)
(13,35,1)
(18,37,1)
(7,33,1)
(0,10,1)
(31,33,1)
(2,13,1)
(21,30,1)
(2,20,2)
(18,33,2)
(15,20,2)
(3,33,2)
(29,33,2)
(6,20,2)
(36,20,2)
(14,33,2)
(29,18,2)
(6,37,2)
(36,24,2)
(31,33,2)
(24,20,2)
(0,33,2)
(23,20,2)
(24,6,2)
(19,33,2)
(21,20,2)
(35,20,2)
(18,37,2)
(10,33,2)
(30,20,2)
(7,33,2)
(13,20,2)
(12,20,2)
-----------------------------------
(0,data)
(1,default:)
(2,1)
(3,printLine("Benign, fixed string")
(4,RET)
(5,0)
(6,data + 1)
(7,"Benign, fixed string")
(8,data)
(9,data)
(10,"%u")
(11,)
(12,break;)
(13,data)
(14,break;)
(15,"Benign, fixed string")
(16,case 6:)
(17,default:)
(18,&data)
(19,break;)
(20,7)
(21,break;)
(22,result)
(23,result)
(24,result = data + 1)
(25,)
(26,)
(27,)
(28,case 7:)
(29,fscanf (stdin, "%u", &data)
(30,printLine("Benign, fixed string")
(31,stdin)
(32,switch(7)
(33,6)
(34,switch(6)
(35,result)
(36,printUnsignedLine(result)
(37,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^