-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_18_bad()
{
    char data;
    data = ' ';
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    goto sink;
sink:
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_18_bad(){    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_square_18_bad()
CWE190_Integer_Overflow__char_fscanf_square_18_bad
{    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);
source
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
goto sink;
sink
sink:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
sink
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,17,0)
(4,16,0)
(9,8,0)
(17,20,0)
(5,20,0)
(2,8,0)
(0,17,0)
(1,20,0)
(23,8,0)
(19,10,0)
(3,16,0)
(22,1,0)
(20,8,0)
(18,10,0)
(7,8,0)
(16,9,0)
(17,10,0)
(1,17,0)
(12,4,0)
(15,9,0)
(14,8,0)
(21,9,0)
(6,4,0)
(4,8,0)
(11,8,0)
(10,9,0)
(16,4,0)
(9,21,1)
(4,16,1)
(1,22,1)
(10,9,1)
(16,3,1)
(2,9,1)
(13,1,1)
(10,19,1)
(22,17,1)
(3,6,1)
(0,14,1)
(14,4,1)
(12,2,1)
(17,10,1)
(21,15,1)
(19,18,1)
(18,0,1)
(1,17,1)
(16,9,1)
(6,12,1)
(17,10,2)
(1,17,2)
(16,9,2)
(10,9,2)
(4,16,2)
-----------------------------------
(0,result)
(1,printHexCharLine(result)
(2,goto source;)
(3,data)
(4,fscanf (stdin, "%c", &data)
(5,result)
(6,"%c")
(7,source:)
(8,)
(9,data = \\\' \\\')
(10,data * data)
(11,data)
(12,stdin)
(13,RET)
(14,goto sink;)
(15,data)
(16,&data)
(17,result = data * data)
(18,data)
(19,data)
(20,)
(21,\\\' \\\')
(22,result)
(23,sink:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^