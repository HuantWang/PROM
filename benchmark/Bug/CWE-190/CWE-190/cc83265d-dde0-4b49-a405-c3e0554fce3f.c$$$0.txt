-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_01_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = LLONG_MAX;
    {
        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
        int64_t result = data * data;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,9,11,15,16,20,22,27,29,33,35,39,41
-----computeFrom-----
13,14
13,15
18,19
18,20
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_01_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_max_square_01_bad()
CWE190_Integer_Overflow__int64_t_max_square_01_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(10,4,0)
(14,4,0)
(2,3,0)
(5,4,0)
(3,14,0)
(13,5,0)
(12,14,0)
(0,5,0)
(3,9,0)
(9,5,0)
(13,9,0)
(9,3,0)
(6,9,0)
(8,14,0)
(15,13,0)
(11,3,0)
(1,4,0)
(6,14,1)
(7,13,1)
(12,10,1)
(2,6,1)
(3,11,1)
(3,14,1)
(11,2,1)
(8,12,1)
(15,9,1)
(13,15,1)
(13,9,1)
(14,8,1)
(9,3,1)
(9,3,2)
(3,14,2)
(13,9,2)
-----------------------------------
(0,result)
(1,data)
(2,data)
(3,data * data)
(4,)
(5,)
(6,result)
(7,RET)
(8,LLONG_MAX)
(9,result = data * data)
(10,L)
(11,data)
(12,data)
(13,printLongLongLine(result)
(14,data = LLONG_MAX)
(15,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^