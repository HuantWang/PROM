-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
59,60
59,61
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,52,57,58,60,65,67,71,73,77,79
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
69,70
69,71
-----guardedBy-----
36,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_02_bad()
CWE190_Integer_Overflow__int_fgets_square_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,25,0)
(0,29,0)
(20,18,0)
(28,34,0)
(5,21,0)
(8,35,0)
(33,39,0)
(21,24,0)
(9,13,0)
(17,21,0)
(35,20,0)
(12,13,0)
(15,26,0)
(27,38,0)
(16,25,0)
(35,39,0)
(29,13,0)
(34,14,0)
(31,16,0)
(4,3,0)
(25,7,0)
(21,39,0)
(3,29,0)
(30,3,0)
(38,25,0)
(32,29,0)
(20,35,0)
(24,21,0)
(19,34,0)
(38,16,0)
(6,24,0)
(1,13,0)
(16,3,0)
(37,15,0)
(11,20,0)
(39,34,0)
(3,20,0)
(3,16,0)
(40,39,0)
(22,21,0)
(24,6,1)
(40,2,1)
(38,16,1)
(8,11,1)
(39,33,1)
(36,20,1)
(24,21,1)
(38,27,1)
(22,5,1)
(27,16,1)
(20,35,1)
(0,32,1)
(11,24,1)
(30,4,1)
(21,39,1)
(6,21,1)
(2,29,1)
(36,15,1)
(23,36,1)
(31,36,1)
(3,20,1)
(29,0,1)
(23,38,1)
(3,30,1)
(4,31,1)
(36,2,1)
(15,37,1)
(5,39,1)
(21,17,1)
(3,29,1)
(17,22,1)
(37,24,1)
(35,39,1)
(35,8,1)
(33,40,1)
(16,3,1)
(5,2,2)
(40,2,2)
(3,20,2)
(20,24,2)
(31,36,2)
(27,36,2)
(17,2,2)
(11,24,2)
(4,36,2)
(3,36,2)
(33,2,2)
(6,2,2)
(30,36,2)
(21,39,2)
(37,24,2)
(38,36,2)
(16,3,2)
(22,2,2)
(39,2,2)
(20,35,2)
(21,2,2)
(15,24,2)
(24,21,2)
(3,29,2)
(8,24,2)
(35,24,2)
(38,16,2)
(24,2,2)
(35,39,2)
(16,36,2)
-----------------------------------
(0,0)
(1,if(1)
(2,1)
(3,data * data)
(4,data)
(5,inputBuffer)
(6,NULL)
(7,)
(8,inputBuffer)
(9,data)
(10,result)
(11,data)
(12,if(1)
(13,)
(14,)
(15,printLine("fgets()
(16,result = data * data)
(17,stdin)
(18,)
(19,inputBuffer)
(20,data = atoi(inputBuffer)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,CHAR_ARRAY_SIZE)
(23,RET)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,)
(26,)
(27,result)
(28,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,data = 0)
(30,data)
(31,result)
(32,data)
(33,"")
(34,)
(35,atoi(inputBuffer)
(36,1)
(37,"fgets()
(38,printIntLine(result)
(39,inputBuffer[CHAR_ARRAY_SIZE] = "")
(40,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^