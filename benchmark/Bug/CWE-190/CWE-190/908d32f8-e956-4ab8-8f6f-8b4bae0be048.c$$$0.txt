-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_08_bad()
CWE190_Integer_Overflow__short_rand_postinc_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,1,0)
(23,0,0)
(13,8,0)
(4,11,0)
(14,1,0)
(14,8,0)
(22,6,0)
(25,3,0)
(18,3,0)
(11,17,0)
(12,1,0)
(11,4,0)
(5,8,0)
(16,6,0)
(3,8,0)
(23,11,0)
(1,6,0)
(5,3,0)
(3,23,0)
(8,9,0)
(24,5,0)
(11,23,0)
(14,23,0)
(17,11,0)
(3,1,0)
(19,6,0)
(20,14,0)
(15,23,0)
(14,1,1)
(11,4,1)
(5,24,1)
(1,12,1)
(21,1,1)
(18,14,1)
(4,15,1)
(3,23,1)
(12,10,1)
(24,3,1)
(14,20,1)
(3,1,1)
(23,11,1)
(2,5,1)
(20,7,1)
(7,23,1)
(25,18,1)
(3,25,1)
(11,17,1)
(14,23,1)
(7,21,1)
(15,21,1)
(5,3,1)
(2,7,1)
(14,1,2)
(3,1,2)
(3,7,2)
(3,23,2)
(14,7,2)
(11,17,2)
(24,7,2)
(15,21,2)
(11,21,2)
(4,21,2)
(23,21,2)
(23,11,2)
(5,7,2)
(14,23,2)
(18,7,2)
(20,7,2)
(25,7,2)
(5,3,2)
(11,4,2)
-----------------------------------
(0,)
(1,data = 0)
(2,RET)
(3,result = data)
(4,RAND32()
(5,printIntLine(result)
(6,)
(7,staticReturnsTrue()
(8,)
(9,)
(10,data)
(11,(short)
(12,0)
(13,result)
(14,data++)
(15,data)
(16,data)
(17,short)
(18,result)
(19,if(staticReturnsTrue()
(20,data)
(21,staticReturnsTrue()
(22,if(staticReturnsTrue()
(23,data = (short)
(24,result)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^