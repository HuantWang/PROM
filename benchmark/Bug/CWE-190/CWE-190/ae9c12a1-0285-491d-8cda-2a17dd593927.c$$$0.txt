-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,32,36,38,42,43,47,49
-----computeFrom-----
12,13
12,14
20,21
20,22
29,30
29,31
40,41
40,42
-----guardedBy-----
31,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_02_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(26,24,0)
(23,24,0)
(3,14,0)
(27,15,0)
(24,12,0)
(5,7,0)
(6,1,0)
(19,15,0)
(0,15,0)
(25,0,0)
(16,7,0)
(7,0,0)
(14,25,0)
(1,14,0)
(25,14,0)
(25,24,0)
(20,4,0)
(21,25,0)
(8,10,0)
(7,24,0)
(22,25,0)
(13,0,0)
(1,10,0)
(14,10,0)
(18,15,0)
(9,0,0)
(2,0,1)
(7,0,1)
(22,21,1)
(7,5,1)
(16,17,1)
(17,24,1)
(11,7,1)
(5,16,1)
(11,1,1)
(21,3,1)
(0,9,1)
(25,22,1)
(25,0,1)
(7,24,1)
(3,7,1)
(1,6,1)
(17,2,1)
(14,25,1)
(9,13,1)
(23,26,1)
(6,14,1)
(26,2,1)
(1,14,1)
(24,23,1)
(25,24,1)
(11,17,1)
(7,24,2)
(25,24,2)
(6,7,2)
(23,2,2)
(1,7,2)
(16,17,2)
(25,7,2)
(26,2,2)
(7,17,2)
(5,17,2)
(1,14,2)
(7,0,2)
(3,7,2)
(22,7,2)
(24,2,2)
(14,25,2)
(25,0,2)
(14,7,2)
(21,7,2)
-----------------------------------
(0,data = 0)
(1,printUnsignedLine(result)
(2,1)
(3,result)
(4,)
(5,0)
(6,result)
(7,data > 0)
(8,result)
(9,0)
(10,)
(11,RET)
(12,)
(13,data)
(14,result = data * 2)
(15,)
(16,data)
(17,1)
(18,data)
(19,if(1)
(20,if(data > 0)
(21,data)
(22,2)
(23,UINT_MAX)
(24,data = UINT_MAX)
(25,data * 2)
(26,data)
(27,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^