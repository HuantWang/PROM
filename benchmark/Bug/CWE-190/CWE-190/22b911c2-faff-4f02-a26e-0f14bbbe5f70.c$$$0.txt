-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,48,52,54,58,59,63,65,66,67,71,72,73
-----computeFrom-----
12,13
12,14
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_15_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(10,29,0)
(34,14,0)
(38,32,0)
(36,24,0)
(2,19,0)
(3,19,0)
(12,19,0)
(5,27,0)
(13,29,0)
(37,24,0)
(24,18,0)
(6,24,0)
(19,8,0)
(15,1,0)
(29,27,0)
(28,18,0)
(12,29,0)
(35,27,0)
(22,18,0)
(30,18,0)
(23,12,0)
(20,2,0)
(14,29,0)
(25,1,0)
(33,1,0)
(40,36,0)
(39,25,0)
(41,12,0)
(19,12,0)
(11,8,0)
(26,27,0)
(24,36,0)
(32,18,0)
(4,1,0)
(2,8,0)
(0,14,0)
(36,29,0)
(21,18,0)
(31,1,0)
(17,1,0)
(38,16,1)
(9,31,1)
(7,22,1)
(36,29,1)
(30,32,1)
(2,20,1)
(14,34,1)
(19,12,1)
(39,7,1)
(12,23,1)
(33,14,1)
(23,41,1)
(40,37,1)
(37,6,1)
(34,0,1)
(22,24,1)
(12,29,1)
(0,7,1)
(31,25,1)
(36,40,1)
(29,10,1)
(6,16,1)
(20,19,1)
(14,29,1)
(41,3,1)
(9,33,1)
(25,39,1)
(32,38,1)
(16,29,1)
(10,13,1)
(7,30,1)
(33,2,1)
(2,19,1)
(3,14,1)
(24,36,1)
(2,14,2)
(19,12,2)
(34,7,2)
(40,16,2)
(14,7,2)
(3,14,2)
(32,16,2)
(25,7,2)
(37,16,2)
(23,14,2)
(39,7,2)
(38,16,2)
(24,16,2)
(31,7,2)
(30,16,2)
(19,14,2)
(0,7,2)
(20,14,2)
(24,36,2)
(41,14,2)
(33,7,2)
(36,16,2)
(36,29,2)
(12,14,2)
(22,16,2)
(12,29,2)
(14,29,2)
(2,19,2)
(6,16,2)
-----------------------------------
(0,data)
(1,)
(2,printIntLine(result)
(3,result)
(4,if(data > 0)
(5,switch(7)
(6,stdin)
(7,7)
(8,)
(9,RET)
(10,0)
(11,result)
(12,data * 2)
(13,data)
(14,data > 0)
(15,case 7:)
(16,6)
(17,default:)
(18,)
(19,result = data * 2)
(20,result)
(21,default:)
(22,break;)
(23,2)
(24,fscanf(stdin, "%d", &data)
(25,printLine("Benign, fixed string")
(26,data)
(27,)
(28,case 6:)
(29,data = 0)
(30,break;)
(31,break;)
(32,printLine("Benign, fixed string")
(33,break;)
(34,0)
(35,switch(6)
(36,&data)
(37,"%d")
(38,"Benign, fixed string")
(39,"Benign, fixed string")
(40,data)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^