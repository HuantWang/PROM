-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_multiply_18_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
182,183
184,185
187,188
187,189
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
200,201
202,203
202,204
204,205
204,206
205,206
205,207
206,207
209,210
209,211
210,211
211,212
211,213
213,214
213,215
215,216
216,217
216,218
217,218
220,221
221,222
221,223
222,223
224,225
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,186,190,192,197,199,201,203,207,208,212,214,218,219,223,225
-----computeFrom-----
12,13
12,14
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
188,189
188,190
205,206
205,207
216,217
216,218
-----guardedBy-----
190,199
207,218
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_multiply_18_bad(){    int data;    /* Initialize data */    data = 0;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_connect_socket_multiply_18_bad()
CWE190_Integer_Overflow__int_connect_socket_multiply_18_bad
{    int data;    /* Initialize data */    data = 0;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
source
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(40,141,0)
(97,43,0)
(29,121,0)
(14,51,0)
(130,136,0)
(6,57,0)
(131,87,0)
(24,100,0)
(82,55,0)
(19,48,0)
(88,15,0)
(136,110,0)
(45,9,0)
(100,15,0)
(110,108,0)
(95,129,0)
(114,4,0)
(8,15,0)
(30,42,0)
(35,66,0)
(111,57,0)
(5,48,0)
(143,106,0)
(49,37,0)
(59,51,0)
(37,88,0)
(52,107,0)
(117,17,0)
(1,44,0)
(62,35,0)
(43,15,0)
(71,15,0)
(57,6,0)
(36,69,0)
(104,87,0)
(18,1,0)
(33,83,0)
(36,98,0)
(44,48,0)
(115,43,0)
(36,15,0)
(83,91,0)
(69,36,0)
(13,66,0)
(27,2,0)
(106,115,0)
(94,78,0)
(89,138,0)
(121,48,0)
(66,35,0)
(110,136,0)
(48,87,0)
(43,4,0)
(111,15,0)
(57,43,0)
(116,44,0)
(141,40,0)
(115,23,0)
(34,57,0)
(129,115,0)
(54,87,0)
(23,115,0)
(26,9,0)
(22,62,0)
(21,86,0)
(122,116,0)
(90,48,0)
(77,121,0)
(140,115,0)
(51,14,0)
(134,48,0)
(116,43,0)
(139,6,0)
(107,62,0)
(93,87,0)
(126,23,0)
(96,100,0)
(135,17,0)
(1,39,0)
(67,111,0)
(62,107,0)
(124,14,0)
(125,78,0)
(51,59,0)
(61,87,0)
(78,15,0)
(86,87,0)
(78,125,0)
(46,48,0)
(141,91,0)
(72,15,0)
(109,15,0)
(53,141,0)
(91,15,0)
(60,125,0)
(63,69,0)
(118,62,0)
(31,57,0)
(56,37,0)
(80,59,0)
(103,2,0)
(108,111,0)
(85,94,0)
(142,48,0)
(99,15,0)
(17,35,0)
(74,103,0)
(127,136,0)
(16,87,0)
(91,83,0)
(79,4,0)
(9,43,0)
(84,44,0)
(137,88,0)
(0,94,0)
(108,110,0)
(1,43,0)
(35,15,0)
(62,86,0)
(76,48,0)
(57,111,0)
(123,40,0)
(101,98,0)
(136,111,0)
(51,7,0)
(106,81,0)
(115,129,0)
(92,35,0)
(132,7,0)
(68,67,0)
(105,57,0)
(70,108,0)
(103,107,0)
(32,48,0)
(113,36,0)
(107,2,0)
(7,51,0)
(28,6,0)
(12,7,0)
(67,99,0)
(115,106,0)
(50,40,0)
(106,143,0)
(75,67,0)
(81,106,0)
(11,108,0)
(17,86,0)
(25,41,0)
(73,4,0)
(58,116,0)
(128,48,0)
(3,111,0)
(10,143,0)
(133,44,0)
(120,86,0)
(4,43,0)
(20,99,0)
(98,36,0)
(64,112,0)
(108,111,1)
(59,80,1)
(136,127,1)
(88,137,1)
(49,36,1)
(118,22,1)
(37,56,1)
(13,92,1)
(47,17,1)
(17,117,1)
(24,96,1)
(115,129,1)
(20,67,1)
(83,33,1)
(58,122,1)
(86,21,1)
(95,106,1)
(35,66,1)
(17,86,1)
(143,10,1)
(12,132,1)
(33,141,1)
(1,43,1)
(116,58,1)
(91,83,1)
(122,30,1)
(101,9,1)
(36,69,1)
(22,52,1)
(108,70,1)
(111,57,1)
(63,113,1)
(139,28,1)
(99,20,1)
(75,68,1)
(54,25,1)
(136,111,1)
(43,4,1)
(115,106,1)
(60,94,1)
(18,116,1)
(7,12,1)
(44,133,1)
(92,99,1)
(141,40,1)
(9,43,1)
(80,7,1)
(116,44,1)
(23,115,1)
(132,65,1)
(0,91,1)
(105,31,1)
(125,60,1)
(31,3,1)
(114,73,1)
(45,43,1)
(62,35,1)
(68,110,1)
(79,114,1)
(84,121,1)
(135,54,1)
(116,43,1)
(54,119,1)
(113,98,1)
(129,95,1)
(69,63,1)
(9,26,1)
(21,120,1)
(115,43,1)
(103,74,1)
(14,51,1)
(28,105,1)
(78,125,1)
(62,118,1)
(40,123,1)
(11,136,1)
(67,111,1)
(133,84,1)
(65,35,1)
(62,86,1)
(77,29,1)
(103,107,1)
(47,103,1)
(122,64,1)
(64,110,1)
(98,101,1)
(122,82,1)
(127,130,1)
(130,111,1)
(124,51,1)
(140,78,1)
(119,1,1)
(73,97,1)
(110,108,1)
(89,23,1)
(29,131,1)
(94,85,1)
(67,75,1)
(100,24,1)
(6,139,1)
(85,0,1)
(36,98,1)
(10,140,1)
(110,136,1)
(122,65,1)
(123,50,1)
(137,37,1)
(122,89,1)
(106,81,1)
(117,135,1)
(25,119,1)
(121,77,1)
(52,17,1)
(34,6,1)
(119,116,1)
(30,14,1)
(126,115,1)
(97,100,1)
(51,7,1)
(107,62,1)
(57,6,1)
(106,143,1)
(17,35,1)
(70,11,1)
(14,124,1)
(26,45,1)
(57,43,1)
(66,13,1)
(50,88,1)
(74,107,1)
(4,79,1)
(1,18,1)
(56,49,1)
(132,44,1)
(53,40,1)
(3,23,1)
(23,126,1)
(57,34,1)
(1,44,1)
(96,14,1)
(51,59,1)
(82,9,1)
(141,53,1)
(131,86,1)
(65,110,2)
(35,110,2)
(103,17,2)
(1,43,2)
(57,43,2)
(34,23,2)
(140,9,2)
(3,23,2)
(115,106,2)
(115,129,2)
(31,23,2)
(80,65,2)
(45,14,2)
(110,23,2)
(141,9,2)
(115,43,2)
(43,4,2)
(141,40,2)
(78,125,2)
(107,62,2)
(123,9,2)
(101,9,2)
(89,23,2)
(79,14,2)
(74,17,2)
(51,7,2)
(108,111,2)
(108,136,2)
(0,9,2)
(35,66,2)
(70,136,2)
(14,51,2)
(30,14,2)
(110,136,2)
(10,9,2)
(129,9,2)
(75,110,2)
(51,59,2)
(18,116,2)
(78,9,2)
(73,14,2)
(136,111,2)
(111,57,2)
(63,9,2)
(22,17,2)
(106,143,2)
(53,9,2)
(66,110,2)
(13,110,2)
(40,9,2)
(25,119,2)
(136,23,2)
(24,14,2)
(26,14,2)
(111,23,2)
(113,9,2)
(88,9,2)
(115,9,2)
(83,9,2)
(23,115,2)
(62,17,2)
(85,9,2)
(116,43,2)
(23,9,2)
(1,116,2)
(33,9,2)
(62,86,2)
(92,110,2)
(95,9,2)
(51,65,2)
(4,14,2)
(125,9,2)
(12,65,2)
(36,9,2)
(91,83,2)
(127,23,2)
(99,110,2)
(143,9,2)
(49,9,2)
(91,9,2)
(57,23,2)
(36,98,2)
(130,23,2)
(43,14,2)
(9,14,2)
(1,44,2)
(100,14,2)
(106,9,2)
(57,6,2)
(59,65,2)
(103,107,2)
(62,35,2)
(98,9,2)
(9,43,2)
(17,35,2)
(52,17,2)
(37,9,2)
(106,81,2)
(17,86,2)
(11,136,2)
(107,17,2)
(67,111,2)
(126,9,2)
(64,110,2)
(105,23,2)
(36,69,2)
(96,14,2)
(118,17,2)
(14,65,2)
(139,23,2)
(137,9,2)
(116,44,2)
(97,14,2)
(69,9,2)
(124,65,2)
(110,108,2)
(67,110,2)
(68,110,2)
(50,9,2)
(82,9,2)
(114,14,2)
(60,9,2)
(20,110,2)
(94,9,2)
(56,9,2)
(7,65,2)
(6,23,2)
(132,65,2)
(28,23,2)
-----------------------------------
(0,service)
(1,CLOSE_SOCKET(connectSocket)
(2,)
(3,recvResult)
(4,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(5,wsaData)
(6,CHAR_ARRAY_SIZE - 1)
(7,MAKEWORD(2,2)
(8,if (connectSocket == INVALID_SOCKET)
(9,connectSocket == INVALID_SOCKET)
(10,service)
(11,recvResult)
(12,2)
(13,inputBuffer)
(14,WSAStartup(MAKEWORD(2,2)
(15,)
(16,data)
(17,data > 0)
(18,connectSocket)
(19,if (connectSocket != INVALID_SOCKET)
(20,'\\\\0')
(21,0)
(22,data)
(23,connect(connectSocket, (struct sockaddr*)
(24,1)
(25,WSACleanup()
(26,INVALID_SOCKET)
(27,result)
(28,CHAR_ARRAY_SIZE)
(29,wsaDataInit)
(30,break;)
(31,connectSocket)
(32,if (wsaDataInit)
(33,IP_ADDRESS)
(34,0)
(35,data = atoi(inputBuffer)
(36,memset(&service, 0, sizeof(service)
(37,service.sin_family)
(38,\'\\\\0\')
(39,)
(40,service.sin_addr)
(41,)
(42,)
(43,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(44,connectSocket = INVALID_SOCKET)
(45,connectSocket)
(46,do)
(47,RET)
(48,)
(49,service)
(50,service)
(51,WSAStartup(MAKEWORD(2,2)
(52,result)
(53,s_addr)
(54,goto sink;)
(55,)
(56,sin_family)
(57,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(58,INVALID_SOCKET)
(59,&wsaData)
(60,TCP_PORT)
(61,sink:)
(62,data * 2)
(63,service)
(64,break;)
(65,0)
(66,atoi(inputBuffer)
(67,inputBuffer[recvResult])
(68,inputBuffer)
(69,sizeof(service)
(70,0)
(71,if (WSAStartup(MAKEWORD(2,2)
(72,if (recvResult == SOCKET_ERROR || recvResult == 0)
(73,AF_INET)
(74,result)
(75,recvResult)
(76,inputBuffer)
(77,0)
(78,service.sin_port = htons(TCP_PORT)
(79,IPPROTO_TCP)
(80,wsaData)
(81,struct sockaddr*)
(82,break;)
(83,inet_addr(IP_ADDRESS)
(84,connectSocket)
(85,sin_port)
(86,data = 0)
(87,)
(88,service.sin_family = AF_INET)
(89,break;)
(90,service)
(91,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(92,data)
(93,source:)
(94,service.sin_port)
(95,service)
(96,wsaDataInit)
(97,connectSocket)
(98,&service)
(99,inputBuffer[recvResult] = \'\\\\0\')
(100,wsaDataInit = 1)
(101,service)
(102,inputBuffer[recvResult] = '\\\\0')
(103,printIntLine(result)
(104,if(data > 0)
(105,inputBuffer)
(106,(struct sockaddr*)
(107,result = data * 2)
(108,recvResult == 0)
(109,if (connect(connectSocket, (struct sockaddr*)
(110,recvResult == SOCKET_ERROR || recvResult == 0)
(111,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(112,)
(113,0)
(114,SOCK_STREAM)
(115,connect(connectSocket, (struct sockaddr*)
(116,connectSocket != INVALID_SOCKET)
(117,0)
(118,2)
(119,wsaDataInit)
(120,data)
(121,wsaDataInit = 0)
(122,connectSocket)
(123,sin_addr)
(124,NO_ERROR)
(125,htons(TCP_PORT)
(126,SOCKET_ERROR)
(127,SOCKET_ERROR)
(128,connectSocket)
(129,sizeof(service)
(130,recvResult)
(131,goto source;)
(132,2)
(133,INVALID_SOCKET)
(134,wsaDataInit)
(135,data)
(136,recvResult == SOCKET_ERROR)
(137,AF_INET)
(138,)
(139,1)
(140,connectSocket)
(141,service.sin_addr.s_addr)
(142,recvResult)
(143,&service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^