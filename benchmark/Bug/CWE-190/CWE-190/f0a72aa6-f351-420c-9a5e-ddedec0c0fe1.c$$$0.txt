-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_04_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_04_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_04_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_04_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(12,21,0)
(12,11,0)
(7,10,0)
(13,23,0)
(11,21,0)
(17,9,0)
(6,9,0)
(20,10,0)
(9,19,0)
(4,23,0)
(14,12,0)
(15,23,0)
(21,16,0)
(0,15,0)
(15,11,0)
(15,9,0)
(1,15,0)
(8,10,0)
(23,10,0)
(2,21,0)
(11,15,0)
(18,11,0)
(0,18,1)
(3,5,1)
(11,15,1)
(5,23,1)
(3,9,1)
(15,1,1)
(9,6,1)
(13,4,1)
(23,13,1)
(12,14,1)
(22,12,1)
(17,5,1)
(6,17,1)
(15,23,1)
(15,9,1)
(14,11,1)
(18,3,1)
(1,0,1)
(22,3,1)
(12,11,1)
(17,5,2)
(0,3,2)
(15,23,2)
(12,3,2)
(11,3,2)
(14,3,2)
(9,5,2)
(15,3,2)
(18,3,2)
(11,15,2)
(12,11,2)
(15,9,2)
(6,5,2)
(1,3,2)
-----------------------------------
(0,data)
(1,data)
(2,result)
(3,STATIC_CONST_TRUE)
(4,data)
(5,STATIC_CONST_TRUE)
(6,UINT_MAX)
(7,if(STATIC_CONST_TRUE)
(8,data)
(9,data = UINT_MAX)
(10,)
(11,result = data * data)
(12,printUnsignedLine(result)
(13,0)
(14,result)
(15,data * data)
(16,)
(17,data)
(18,result)
(19,)
(20,if(STATIC_CONST_TRUE)
(21,)
(22,RET)
(23,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^