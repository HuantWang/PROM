-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_10_bad()
{
    short data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_10_bad(){    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_10_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_10_bad
{    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,4,0)
(29,22,0)
(9,6,0)
(20,26,0)
(16,18,0)
(7,4,0)
(28,12,0)
(26,5,0)
(8,19,0)
(10,22,0)
(15,19,0)
(4,18,0)
(2,3,0)
(17,18,0)
(23,18,0)
(19,4,0)
(19,8,0)
(12,6,0)
(11,4,0)
(13,19,0)
(25,6,0)
(14,8,0)
(27,5,0)
(6,1,0)
(8,5,0)
(6,12,0)
(22,4,0)
(26,8,0)
(28,25,1)
(22,29,1)
(8,19,1)
(29,10,1)
(13,14,1)
(19,4,1)
(10,24,1)
(0,4,1)
(19,15,1)
(9,0,1)
(12,28,1)
(22,4,1)
(7,11,1)
(24,0,1)
(21,22,1)
(26,8,1)
(25,9,1)
(26,20,1)
(12,4,1)
(21,26,1)
(15,13,1)
(14,22,1)
(6,12,1)
(24,6,1)
(20,8,1)
(21,24,1)
(4,7,1)
(9,0,2)
(6,0,2)
(6,12,2)
(13,22,2)
(22,24,2)
(14,22,2)
(28,0,2)
(20,22,2)
(8,19,2)
(26,22,2)
(8,22,2)
(19,4,2)
(15,22,2)
(26,8,2)
(22,4,2)
(29,24,2)
(19,22,2)
(12,4,2)
(25,0,2)
(10,24,2)
(12,0,2)
-----------------------------------
(0,globalTrue)
(1,)
(2,if(data > 0)
(3,)
(4,data = 0)
(5,)
(6,fscanf (stdin, "%hd", &data)
(7,0)
(8,result = data * 2)
(9,stdin)
(10,data)
(11,data)
(12,&data)
(13,data)
(14,result)
(15,2)
(16,if(globalTrue)
(17,data)
(18,)
(19,data * 2)
(20,result)
(21,RET)
(22,data > 0)
(23,if(globalTrue)
(24,globalTrue)
(25,"%hd")
(26,printIntLine(result)
(27,result)
(28,data)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^