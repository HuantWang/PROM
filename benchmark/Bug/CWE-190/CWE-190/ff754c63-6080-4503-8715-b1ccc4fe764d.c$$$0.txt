-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_04_bad()
CWE190_Integer_Overflow__short_fscanf_square_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,16,0)
(23,0,0)
(6,8,0)
(2,13,0)
(18,2,0)
(11,2,0)
(5,12,0)
(3,16,0)
(1,8,0)
(13,12,0)
(7,13,0)
(2,14,0)
(1,23,0)
(5,8,0)
(10,1,0)
(24,12,0)
(21,12,0)
(8,23,0)
(12,16,0)
(17,23,0)
(13,2,0)
(25,5,0)
(8,5,0)
(15,16,0)
(9,5,0)
(18,11,1)
(5,12,1)
(6,19,1)
(5,25,1)
(19,2,1)
(1,10,1)
(22,19,1)
(21,24,1)
(13,7,1)
(19,4,1)
(25,9,1)
(2,13,1)
(8,5,1)
(4,12,1)
(1,8,1)
(7,18,1)
(11,4,1)
(13,12,1)
(10,8,1)
(12,21,1)
(22,1,1)
(9,6,1)
(1,8,2)
(6,19,2)
(2,4,2)
(8,19,2)
(13,4,2)
(5,12,2)
(13,12,2)
(9,19,2)
(25,19,2)
(5,19,2)
(18,4,2)
(1,19,2)
(7,4,2)
(2,13,2)
(10,19,2)
(11,4,2)
(8,5,2)
-----------------------------------
(0,)
(1,printIntLine(result)
(2,fscanf (stdin, "%hd", &data)
(3,if(STATIC_CONST_TRUE)
(4,STATIC_CONST_TRUE)
(5,data * data)
(6,result)
(7,data)
(8,result = data * data)
(9,data)
(10,result)
(11,stdin)
(12,data = 0)
(13,&data)
(14,)
(15,data)
(16,)
(17,result)
(18,"%hd")
(19,STATIC_CONST_TRUE)
(20,if(STATIC_CONST_TRUE)
(21,0)
(22,RET)
(23,)
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^