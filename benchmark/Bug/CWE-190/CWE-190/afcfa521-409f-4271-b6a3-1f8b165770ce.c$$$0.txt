-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_07_bad()
CWE190_Integer_Overflow__char_fscanf_square_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,6,0)
(4,20,0)
(20,14,0)
(25,20,0)
(10,16,0)
(28,2,0)
(9,7,0)
(17,14,0)
(15,21,0)
(26,21,0)
(0,14,0)
(15,14,0)
(27,9,0)
(6,20,0)
(1,2,0)
(19,16,0)
(13,3,0)
(21,8,0)
(5,27,0)
(22,3,0)
(11,21,0)
(18,9,0)
(21,15,0)
(6,9,0)
(23,3,0)
(20,6,0)
(29,15,0)
(27,6,0)
(14,3,0)
(1,21,1)
(25,4,1)
(26,16,1)
(6,20,1)
(15,14,1)
(19,10,1)
(10,14,1)
(27,5,1)
(28,1,1)
(15,29,1)
(21,15,1)
(20,14,1)
(1,16,1)
(17,0,1)
(11,26,1)
(12,2,1)
(5,6,1)
(20,25,1)
(29,11,1)
(2,28,1)
(24,2,1)
(14,17,1)
(27,6,1)
(4,24,1)
(12,27,1)
(16,19,1)
(24,2,2)
(21,15,2)
(20,14,2)
(27,6,2)
(29,16,2)
(15,16,2)
(27,2,2)
(21,16,2)
(25,2,2)
(4,2,2)
(5,2,2)
(15,14,2)
(26,16,2)
(6,2,2)
(11,16,2)
(6,20,2)
(20,2,2)
-----------------------------------
(0,data)
(1,staticFive)
(2,staticFive==5)
(3,)
(4,data)
(5,result)
(6,result = data * data)
(7,)
(8,)
(9,)
(10,staticFive)
(11,"%c")
(12,RET)
(13,if(staticFive==5)
(14,data = \\\' \\\')
(15,&data)
(16,staticFive==5)
(17,\\\' \\\')
(18,result)
(19,5)
(20,data * data)
(21,fscanf (stdin, "%c", &data)
(22,data)
(23,if(staticFive==5)
(24,result)
(25,data)
(26,stdin)
(27,printHexCharLine(result)
(28,5)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^