-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_31_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    {
        int64_t dataCopy = data;
        int64_t data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
23,24
26,27
27,28
29,30
29,31
29,32
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
48,50
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
61,63
62,63
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,9,11,15,16,20,24,25,28,33,35,38,42,44,47,51,52,57,59,63,64,68,70
-----computeFrom-----
13,14
13,15
18,19
18,20
49,50
49,51
61,62
61,63
-----guardedBy-----
51,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_31_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_31_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_31_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
{        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t dataCopy = data;
int64_t dataCopy = data;
int64_t
int64_t
dataCopy = data
dataCopy
= data
data
data
int64_t data = dataCopy;
int64_t data = dataCopy;
int64_t
int64_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,18,0)
(22,3,0)
(27,18,0)
(15,11,0)
(12,16,0)
(24,26,0)
(11,5,0)
(18,14,0)
(6,27,0)
(7,27,0)
(16,12,0)
(26,18,0)
(28,3,0)
(16,26,0)
(30,19,0)
(11,29,0)
(26,27,0)
(5,11,0)
(23,14,0)
(5,14,0)
(19,26,0)
(12,3,0)
(17,19,0)
(2,22,0)
(9,18,0)
(1,14,0)
(25,16,0)
(27,5,0)
(21,26,0)
(29,11,0)
(20,12,0)
(22,12,0)
(10,5,0)
(11,15,0)
(13,18,0)
(4,16,0)
(2,12,1)
(25,20,1)
(30,17,1)
(11,29,1)
(5,11,1)
(26,27,1)
(12,16,1)
(11,15,1)
(22,12,1)
(16,4,1)
(24,21,1)
(6,5,1)
(27,7,1)
(19,30,1)
(21,27,1)
(16,26,1)
(4,25,1)
(22,2,1)
(27,5,1)
(19,26,1)
(26,24,1)
(20,19,1)
(8,22,1)
(15,10,1)
(17,26,1)
(10,23,1)
(8,19,1)
(7,6,1)
(25,19,2)
(20,19,2)
(16,26,2)
(26,27,2)
(22,12,2)
(12,19,2)
(4,19,2)
(12,16,2)
(5,11,2)
(22,19,2)
(27,5,2)
(2,19,2)
(11,29,2)
(11,15,2)
(16,19,2)
(19,26,2)
-----------------------------------
(0,dataCopy)
(1,data)
(2,result)
(3,)
(4,2)
(5,data = (int64_t)
(6,dataCopy)
(7,data)
(8,RET)
(9,data)
(10,data)
(11,(int64_t)
(12,result = data * 2)
(13,if(data > 0)
(14,)
(15,RAND64()
(16,data * 2)
(17,data)
(18,)
(19,data > 0)
(20,result)
(21,data)
(22,printLongLongLine(result)
(23,L)
(24,dataCopy)
(25,data)
(26,data = dataCopy)
(27,dataCopy = data)
(28,result)
(29,int64_t)
(30,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^