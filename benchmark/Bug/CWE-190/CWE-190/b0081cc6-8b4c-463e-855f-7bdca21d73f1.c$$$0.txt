-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_06_bad()
CWE190_Integer_Overflow__char_rand_postinc_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(14,28,0)
(25,18,0)
(8,3,0)
(26,5,0)
(14,6,0)
(6,23,0)
(29,6,0)
(28,14,0)
(1,26,0)
(10,8,0)
(5,2,0)
(26,6,0)
(15,18,0)
(6,14,0)
(30,16,0)
(26,3,0)
(11,14,0)
(17,9,0)
(27,5,0)
(27,26,0)
(8,5,0)
(3,18,0)
(4,27,0)
(7,3,0)
(0,26,0)
(19,3,0)
(20,18,0)
(21,5,0)
(13,16,0)
(8,6,0)
(22,9,0)
(14,11,0)
(14,11,1)
(8,10,1)
(9,17,1)
(10,16,1)
(12,16,1)
(14,28,1)
(30,13,1)
(16,30,1)
(27,26,1)
(27,4,1)
(26,6,1)
(6,14,1)
(1,8,1)
(13,6,1)
(17,22,1)
(29,9,1)
(12,27,1)
(3,19,1)
(19,7,1)
(4,26,1)
(13,9,1)
(8,6,1)
(0,1,1)
(26,3,1)
(22,3,1)
(11,29,1)
(26,0,1)
(8,3,1)
(8,3,2)
(26,3,2)
(26,16,2)
(29,9,2)
(6,14,2)
(8,16,2)
(8,6,2)
(27,26,2)
(11,9,2)
(27,16,2)
(14,28,2)
(4,16,2)
(26,6,2)
(6,9,2)
(14,9,2)
(14,11,2)
(0,16,2)
(1,16,2)
(10,16,2)
-----------------------------------
(0,data)
(1,result)
(2,)
(3,data = \' \')
(4,result)
(5,)
(6,data = (char)
(7,data)
(8,data++)
(9,STATIC_CONST_FIVE==5)
(10,data)
(11,RAND32()
(12,RET)
(13,STATIC_CONST_FIVE)
(14,(char)
(15,if(STATIC_CONST_FIVE==5)
(16,STATIC_CONST_FIVE==5)
(17,5)
(18,)
(19,' ')
(20,data)
(21,result)
(22,STATIC_CONST_FIVE)
(23,)
(24,data = ' ')
(25,if(STATIC_CONST_FIVE==5)
(26,result = data)
(27,printHexCharLine(result)
(28,char)
(29,data)
(30,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^