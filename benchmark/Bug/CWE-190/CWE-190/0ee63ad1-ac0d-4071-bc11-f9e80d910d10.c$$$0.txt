-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_postinc_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_max_postinc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
48,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,51,54,56,59,63,65
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_postinc_34_bad(){    int data;    CWE190_Integer_Overflow__int_max_postinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_postinc_34_bad()
CWE190_Integer_Overflow__int_max_postinc_34_bad
{    int data;    CWE190_Integer_Overflow__int_max_postinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_max_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_postinc_34_unionType
CWE190_Integer_Overflow__int_max_postinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,3,0)
(14,30,0)
(2,6,0)
(15,17,0)
(5,9,0)
(8,17,0)
(30,1,0)
(18,20,0)
(27,6,0)
(14,17,0)
(12,8,0)
(27,3,0)
(1,3,0)
(9,3,0)
(13,0,0)
(29,20,0)
(20,27,0)
(17,0,0)
(7,14,0)
(17,1,0)
(19,27,0)
(11,8,0)
(22,8,0)
(8,30,0)
(21,6,0)
(4,1,0)
(28,9,0)
(26,3,0)
(10,11,0)
(6,3,0)
(25,30,0)
(0,17,0)
(11,30,0)
(24,0,0)
(12,14,1)
(23,11,1)
(9,28,1)
(27,6,1)
(0,13,1)
(13,24,1)
(19,20,1)
(29,18,1)
(18,6,1)
(11,10,1)
(14,7,1)
(10,8,1)
(7,17,1)
(20,29,1)
(27,19,1)
(6,21,1)
(2,9,1)
(15,27,1)
(28,5,1)
(21,2,1)
(24,15,1)
(14,17,1)
(17,0,1)
(11,8,1)
(8,22,1)
(22,12,1)
(8,17,1)
(17,0,2)
(27,6,2)
(8,17,2)
(14,17,2)
(11,8,2)
-----------------------------------
(0,myUnion.unionSecond)
(1,)
(2,data)
(3,)
(4,data)
(5,data)
(6,data = INT_MAX)
(7,data)
(8,result = data)
(9,data = 0)
(10,result)
(11,printIntLine(result)
(12,result)
(13,unionSecond)
(14,data++)
(15,data)
(16,myUnion)
(17,data = myUnion.unionSecond)
(18,myUnion)
(19,data)
(20,myUnion.unionFirst)
(21,INT_MAX)
(22,data)
(23,RET)
(24,myUnion)
(25,result)
(26,data)
(27,myUnion.unionFirst = data)
(28,0)
(29,unionFirst)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^