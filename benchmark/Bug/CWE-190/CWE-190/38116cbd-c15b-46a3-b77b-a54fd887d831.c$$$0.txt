-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    {
        char dataCopy = data;
        char data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,49,53,55,59,61
-----computeFrom-----
12,13
12,14
17,18
17,19
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_31_bad()
CWE190_Integer_Overflow__char_rand_square_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,25,0)
(27,3,0)
(16,13,0)
(18,12,0)
(8,0,0)
(21,9,0)
(13,25,0)
(3,12,0)
(12,22,0)
(0,12,0)
(6,12,0)
(7,22,0)
(10,9,0)
(15,10,0)
(10,12,0)
(4,25,0)
(9,22,0)
(1,13,0)
(1,3,0)
(14,22,0)
(19,9,0)
(17,21,0)
(13,3,0)
(25,0,0)
(26,0,0)
(23,1,0)
(28,7,0)
(25,13,0)
(2,21,0)
(21,2,0)
(9,21,0)
(0,10,0)
(11,10,0)
(21,17,0)
(20,7,0)
(8,10,1)
(1,23,1)
(0,26,1)
(24,16,1)
(21,2,1)
(0,10,1)
(13,25,1)
(17,19,1)
(25,0,1)
(4,24,1)
(16,0,1)
(7,28,1)
(10,15,1)
(28,20,1)
(19,7,1)
(1,13,1)
(10,9,1)
(5,1,1)
(26,8,1)
(21,17,1)
(9,21,1)
(25,4,1)
(15,11,1)
(11,9,1)
(23,13,1)
(0,10,2)
(9,21,2)
(21,17,2)
(21,2,2)
(13,25,2)
(10,9,2)
(25,0,2)
(1,13,2)
-----------------------------------
(0,data = dataCopy)
(1,printHexCharLine(result)
(2,char)
(3,)
(4,data)
(5,RET)
(6,dataCopy)
(7,data = ' ')
(8,data)
(9,data = (char)
(10,dataCopy = data)
(11,dataCopy)
(12,)
(13,result = data * data)
(14,data)
(15,data)
(16,result)
(17,RAND32()
(18,data)
(19,data)
(20,data)
(21,(char)
(22,)
(23,result)
(24,data)
(25,data * data)
(26,dataCopy)
(27,result)
(28,' ')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^