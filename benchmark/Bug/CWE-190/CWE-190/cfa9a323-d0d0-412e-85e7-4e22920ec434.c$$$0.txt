-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_10_bad()
CWE190_Integer_Overflow__char_rand_multiply_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,23,0)
(27,1,0)
(24,27,0)
(28,2,0)
(1,2,0)
(23,15,0)
(18,7,0)
(2,15,0)
(14,1,0)
(11,20,0)
(9,1,0)
(1,7,0)
(30,27,0)
(6,3,0)
(26,7,0)
(27,20,0)
(15,13,0)
(2,4,0)
(0,3,0)
(10,2,0)
(15,2,0)
(10,7,0)
(22,30,0)
(30,20,0)
(17,3,0)
(29,10,0)
(5,10,0)
(25,12,0)
(1,27,0)
(7,3,0)
(13,15,0)
(21,10,1)
(24,10,1)
(1,2,1)
(5,8,1)
(29,5,1)
(21,30,1)
(7,18,1)
(2,15,1)
(28,19,1)
(1,14,1)
(8,2,1)
(27,1,1)
(10,29,1)
(19,7,1)
(18,26,1)
(30,27,1)
(30,22,1)
(22,27,1)
(15,23,1)
(23,28,1)
(14,9,1)
(15,13,1)
(8,19,1)
(21,8,1)
(10,7,1)
(10,2,1)
(1,7,1)
(9,24,1)
(2,19,2)
(10,2,2)
(30,10,2)
(28,19,2)
(10,7,2)
(23,19,2)
(1,10,2)
(15,23,2)
(15,19,2)
(27,10,2)
(1,2,2)
(10,8,2)
(30,27,2)
(1,7,2)
(15,13,2)
(27,1,2)
(14,10,2)
(24,10,2)
(2,15,2)
(9,10,2)
(29,8,2)
(22,10,2)
(5,8,2)
-----------------------------------
(0,if(globalTrue)
(1,data * 2)
(2,data = (char)
(3,)
(4,)
(5,data)
(6,if(globalTrue)
(7,data = ' ')
(8,globalTrue)
(9,data)
(10,data > 0)
(11,result)
(12,)
(13,char)
(14,2)
(15,(char)
(16,data = \' \')
(17,data)
(18,' ')
(19,globalTrue)
(20,)
(21,RET)
(22,result)
(23,RAND32()
(24,result)
(25,if(data > 0)
(26,data)
(27,result = data * 2)
(28,data)
(29,0)
(30,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^