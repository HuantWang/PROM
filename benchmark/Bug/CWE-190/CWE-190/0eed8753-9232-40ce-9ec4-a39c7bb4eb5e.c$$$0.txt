-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_10_bad()
{
    unsigned int data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_10_bad(){    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_10_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_10_bad
{    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(16,3,0)
(16,22,0)
(14,7,0)
(16,7,0)
(5,4,0)
(15,10,0)
(2,18,0)
(6,3,0)
(11,16,0)
(12,16,0)
(7,18,0)
(8,4,0)
(0,3,0)
(18,21,0)
(19,22,0)
(23,4,0)
(22,13,0)
(17,22,0)
(7,16,0)
(10,7,0)
(10,18,0)
(3,4,0)
(0,6,1)
(16,3,1)
(1,20,1)
(10,15,1)
(7,16,1)
(3,0,1)
(1,10,1)
(17,19,1)
(20,22,1)
(9,3,1)
(12,14,1)
(14,20,1)
(16,22,1)
(20,9,1)
(16,11,1)
(10,7,1)
(11,12,1)
(19,9,1)
(22,17,1)
(15,7,1)
(19,9,2)
(12,20,2)
(7,16,2)
(16,20,2)
(15,20,2)
(10,7,2)
(17,9,2)
(14,20,2)
(11,20,2)
(16,22,2)
(10,20,2)
(16,3,2)
(22,9,2)
(7,20,2)
-----------------------------------
(0,0)
(1,RET)
(2,result)
(3,data = 0)
(4,)
(5,if(globalTrue)
(6,data)
(7,result = data * data)
(8,if(globalTrue)
(9,globalTrue)
(10,printUnsignedLine(result)
(11,data)
(12,data)
(13,)
(14,result)
(15,result)
(16,data * data)
(17,UINT_MAX)
(18,)
(19,data)
(20,globalTrue)
(21,)
(22,data = UINT_MAX)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^