-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_05_bad()
{
    char data;
    data = ' ';
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_05_bad(){    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_05_bad()
CWE190_Integer_Overflow__char_max_square_05_bad
{    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticTrue
staticTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(19,9,0)
(13,1,0)
(22,24,0)
(11,2,0)
(4,9,0)
(14,22,0)
(10,24,0)
(22,1,0)
(15,20,0)
(22,2,0)
(2,22,0)
(7,23,0)
(20,6,0)
(3,1,0)
(21,22,0)
(23,2,0)
(1,9,0)
(16,24,0)
(23,20,0)
(24,18,0)
(2,20,0)
(8,9,0)
(10,16,1)
(5,17,1)
(22,24,1)
(17,0,1)
(24,10,1)
(17,24,1)
(2,22,1)
(23,2,1)
(22,14,1)
(16,0,1)
(5,23,1)
(23,7,1)
(22,1,1)
(0,1,1)
(7,2,1)
(1,3,1)
(3,13,1)
(11,17,1)
(14,21,1)
(21,11,1)
(22,17,2)
(21,17,2)
(23,17,2)
(23,2,2)
(24,0,2)
(22,24,2)
(16,0,2)
(11,17,2)
(22,1,2)
(14,17,2)
(10,0,2)
(2,17,2)
(7,17,2)
(2,22,2)
-----------------------------------
(0,staticTrue)
(1,data = \' \')
(2,result = data * data)
(3,' ')
(4,data)
(5,RET)
(6,)
(7,result)
(8,if(staticTrue)
(9,)
(10,CHAR_MAX)
(11,result)
(12,data = ' ')
(13,data)
(14,data)
(15,result)
(16,data)
(17,staticTrue)
(18,)
(19,if(staticTrue)
(20,)
(21,data)
(22,data * data)
(23,printHexCharLine(result)
(24,data = CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^