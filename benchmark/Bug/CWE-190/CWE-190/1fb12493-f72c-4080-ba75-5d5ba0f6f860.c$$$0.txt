-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = SHRT_MAX;
    {
        short dataCopy = data;
        short data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_31_bad()
CWE190_Integer_Overflow__short_max_multiply_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,4,0)
(16,24,0)
(26,0,0)
(7,30,0)
(15,3,0)
(21,3,0)
(3,30,0)
(10,3,0)
(23,24,0)
(9,30,0)
(1,18,0)
(4,3,0)
(8,26,0)
(20,4,0)
(13,8,0)
(19,15,0)
(18,26,0)
(17,9,0)
(12,3,0)
(24,30,0)
(14,4,0)
(11,20,0)
(5,9,0)
(15,24,0)
(29,20,0)
(26,18,0)
(8,0,0)
(22,0,0)
(27,15,0)
(18,4,0)
(28,18,0)
(4,15,0)
(25,26,0)
(15,24,1)
(4,6,1)
(2,8,1)
(8,13,1)
(1,25,1)
(19,24,1)
(27,19,1)
(23,9,1)
(20,4,1)
(14,15,1)
(2,20,1)
(16,23,1)
(18,28,1)
(13,26,1)
(20,29,1)
(26,18,1)
(25,20,1)
(6,14,1)
(11,4,1)
(18,4,1)
(8,26,1)
(28,1,1)
(29,11,1)
(4,15,1)
(17,5,1)
(15,27,1)
(9,17,1)
(24,16,1)
(8,26,2)
(4,15,2)
(26,20,2)
(8,20,2)
(18,4,2)
(26,18,2)
(18,20,2)
(13,20,2)
(15,24,2)
(20,4,2)
(25,20,2)
(1,20,2)
(28,20,2)
-----------------------------------
(0,)
(1,data)
(2,RET)
(3,)
(4,data = dataCopy)
(5,data)
(6,dataCopy)
(7,data)
(8,printIntLine(result)
(9,data = 0)
(10,dataCopy)
(11,data)
(12,data)
(13,result)
(14,data)
(15,dataCopy = data)
(16,SHRT_MAX)
(17,0)
(18,data * 2)
(19,dataCopy)
(20,data > 0)
(21,if(data > 0)
(22,result)
(23,data)
(24,data = SHRT_MAX)
(25,result)
(26,result = data * 2)
(27,data)
(28,2)
(29,0)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^