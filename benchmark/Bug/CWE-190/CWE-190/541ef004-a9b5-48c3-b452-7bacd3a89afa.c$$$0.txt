-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_66b_badSink(char dataArray[])
{
    /* copy data out of dataArray */
    char data = dataArray[2];
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,30,32,36,38
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_66b_badSink(char dataArray[]){    /* copy data out of dataArray */    char data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_square_66b_badSink(char dataArray[])
CWE190_Integer_Overflow__char_fscanf_square_66b_badSink
char dataArray[]
char
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    char data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data = dataArray[2];
char data = dataArray[2];
char
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,1,0)
(7,13,0)
(16,6,0)
(4,16,0)
(3,5,0)
(9,13,0)
(6,15,0)
(16,10,0)
(13,5,0)
(5,1,0)
(1,15,0)
(14,16,0)
(6,16,0)
(13,6,0)
(5,13,0)
(12,15,0)
(0,8,0)
(8,1,0)
(8,5,0)
(11,6,0)
(14,4,1)
(7,3,1)
(16,10,1)
(5,13,1)
(8,0,1)
(0,5,1)
(9,7,1)
(13,6,1)
(3,6,1)
(13,9,1)
(2,8,1)
(8,5,1)
(4,11,1)
(16,14,1)
(6,16,1)
(6,16,2)
(8,5,2)
(5,13,2)
(16,10,2)
(13,6,2)
-----------------------------------
(0,result)
(1,)
(2,RET)
(3,result)
(4,dataArray)
(5,result = data * data)
(6,data = dataArray[2])
(7,data)
(8,printHexCharLine(result)
(9,data)
(10,char dataArray[])
(11,data)
(12,data)
(13,data * data)
(14,2)
(15,)
(16,dataArray[2])
(17,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^