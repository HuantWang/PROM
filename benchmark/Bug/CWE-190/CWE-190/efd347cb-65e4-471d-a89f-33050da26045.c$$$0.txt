-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,50,54,56,57,58,62,63,64
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_max_add_15_bad()
CWE190_Integer_Overflow__char_max_add_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(30,23,0)
(14,24,0)
(23,8,0)
(2,26,0)
(20,16,0)
(29,16,0)
(4,29,0)
(35,26,0)
(13,16,0)
(35,29,0)
(19,24,0)
(32,35,0)
(17,15,0)
(5,24,0)
(25,14,0)
(22,8,0)
(31,26,0)
(2,28,0)
(9,8,0)
(27,16,0)
(35,14,0)
(21,14,0)
(15,16,0)
(34,28,0)
(26,28,0)
(6,16,0)
(0,24,0)
(10,2,0)
(26,35,0)
(11,8,0)
(12,35,0)
(1,29,0)
(28,8,0)
(33,8,0)
(2,10,1)
(18,20,1)
(35,29,1)
(7,9,1)
(14,21,1)
(17,3,1)
(3,14,1)
(20,29,1)
(21,25,1)
(22,2,1)
(9,23,1)
(2,26,1)
(35,12,1)
(10,26,1)
(7,22,1)
(26,35,1)
(1,3,1)
(35,14,1)
(23,30,1)
(4,1,1)
(30,18,1)
(13,15,1)
(12,32,1)
(18,13,1)
(31,18,1)
(15,17,1)
(29,4,1)
(32,31,1)
(32,18,2)
(15,3,2)
(35,18,2)
(2,26,2)
(26,35,2)
(2,18,2)
(10,18,2)
(12,18,2)
(35,29,2)
(4,3,2)
(35,14,2)
(26,18,2)
(23,18,2)
(29,3,2)
(22,18,2)
(13,3,2)
(9,18,2)
(17,3,2)
(1,3,2)
(31,18,2)
(30,18,2)
(20,3,2)
-----------------------------------
(0,switch(6)
(1,data)
(2,printHexCharLine(result)
(3,6)
(4,CHAR_MAX)
(5,switch(7)
(6,default:)
(7,RET)
(8,)
(9,break;)
(10,result)
(11,case 7:)
(12,1)
(13,break;)
(14,data = \\\' \\\')
(15,printLine("Benign, fixed string")
(16,)
(17,"Benign, fixed string")
(18,7)
(19,data)
(20,break;)
(21,\\\' \\\')
(22,break;)
(23,printLine("Benign, fixed string")
(24,)
(25,data)
(26,result = data + 1)
(27,case 6:)
(28,)
(29,data = CHAR_MAX)
(30,"Benign, fixed string")
(31,result)
(32,data)
(33,default:)
(34,result)
(35,data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^