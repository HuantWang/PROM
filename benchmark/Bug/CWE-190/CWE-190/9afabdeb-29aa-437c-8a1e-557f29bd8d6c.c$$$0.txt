-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
63,64
64,65
64,66
65,66
69,70
69,71
71,72
71,73
71,74
71,75
71,76
71,77
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
83,84
83,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,61,62,66,67,68,70,73,77,78,82,84,88,89,93,95,96,97,101,102,103
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
75,76
75,77
86,87
86,88
-----guardedBy-----
38,54
77,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_15_bad()
CWE190_Integer_Overflow__int_fgets_multiply_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,42,0)
(11,56,0)
(10,54,0)
(28,18,0)
(9,36,0)
(19,38,0)
(5,33,0)
(16,33,0)
(0,22,0)
(1,22,0)
(14,30,0)
(26,50,0)
(24,33,0)
(53,17,0)
(41,42,0)
(54,22,0)
(44,33,0)
(43,13,0)
(55,13,0)
(42,36,0)
(48,50,0)
(46,10,0)
(50,38,0)
(29,43,0)
(49,54,0)
(30,54,0)
(7,12,0)
(30,39,0)
(55,10,0)
(47,38,0)
(10,55,0)
(52,38,0)
(31,30,0)
(21,4,0)
(18,42,0)
(35,39,0)
(12,39,0)
(36,50,0)
(15,33,0)
(4,33,0)
(3,13,0)
(39,12,0)
(42,18,0)
(37,22,0)
(39,6,0)
(43,55,0)
(32,54,0)
(34,42,0)
(20,38,0)
(12,36,0)
(10,39,0)
(17,38,0)
(25,10,0)
(8,55,0)
(45,11,0)
(23,36,0)
(19,39,1)
(51,44,1)
(21,27,1)
(12,36,1)
(18,28,1)
(36,23,1)
(53,40,1)
(44,43,1)
(23,9,1)
(35,18,1)
(12,7,1)
(42,41,1)
(47,17,1)
(43,29,1)
(16,4,1)
(18,42,1)
(30,39,1)
(7,35,1)
(43,55,1)
(9,40,1)
(30,14,1)
(55,10,1)
(2,34,1)
(34,36,1)
(46,25,1)
(27,19,1)
(41,2,1)
(4,21,1)
(45,18,1)
(30,54,1)
(42,36,1)
(19,11,1)
(10,46,1)
(8,30,1)
(54,49,1)
(40,54,1)
(10,54,1)
(28,42,1)
(17,53,1)
(11,45,1)
(39,12,1)
(31,27,1)
(14,31,1)
(29,55,1)
(51,16,1)
(49,32,1)
(27,47,1)
(10,39,1)
(44,30,1)
(25,8,1)
(29,30,2)
(35,18,2)
(31,27,2)
(55,10,2)
(41,40,2)
(10,39,2)
(43,55,2)
(44,27,2)
(43,30,2)
(47,40,2)
(53,40,2)
(12,36,2)
(2,40,2)
(25,30,2)
(45,18,2)
(4,27,2)
(9,40,2)
(30,39,2)
(18,40,2)
(21,27,2)
(10,54,2)
(39,18,2)
(46,30,2)
(7,18,2)
(30,27,2)
(17,40,2)
(42,36,2)
(28,40,2)
(19,40,2)
(36,40,2)
(30,54,2)
(12,18,2)
(18,42,2)
(42,40,2)
(14,27,2)
(11,18,2)
(16,27,2)
(10,30,2)
(8,30,2)
(23,40,2)
(39,12,2)
(34,40,2)
(55,30,2)
-----------------------------------
(0,data)
(1,switch(7)
(2,CHAR_ARRAY_SIZE)
(3,result)
(4,printLine("Benign, fixed string")
(5,case 7:)
(6,)
(7,inputBuffer)
(8,result)
(9,inputBuffer)
(10,data * 2)
(11,printLine("fgets()
(12,atoi(inputBuffer)
(13,)
(14,0)
(15,if(data > 0)
(16,break;)
(17,printLine("Benign, fixed string")
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,break;)
(20,case 6:)
(21,"Benign, fixed string")
(22,)
(23,"")
(24,default:)
(25,data)
(26,inputBuffer)
(27,7)
(28,NULL)
(29,result)
(30,data > 0)
(31,data)
(32,data)
(33,)
(34,inputBuffer)
(35,data)
(36,inputBuffer[CHAR_ARRAY_SIZE] = "")
(37,switch(6)
(38,)
(39,data = atoi(inputBuffer)
(40,6)
(41,stdin)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,printIntLine(result)
(44,break;)
(45,"fgets()
(46,2)
(47,break;)
(48,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,0)
(50,)
(51,RET)
(52,default:)
(53,"Benign, fixed string")
(54,data = 0)
(55,result = data * 2)
(56,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^