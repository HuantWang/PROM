-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_14_bad()
CWE190_Integer_Overflow__short_fscanf_square_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(5,12,0)
(0,2,0)
(16,24,0)
(18,2,0)
(17,25,0)
(10,0,0)
(23,20,0)
(27,14,0)
(8,14,0)
(14,7,0)
(4,12,0)
(20,29,0)
(3,29,0)
(26,25,0)
(0,4,0)
(28,4,0)
(13,24,0)
(6,12,0)
(21,2,0)
(1,12,0)
(2,0,0)
(14,4,0)
(9,4,0)
(7,14,0)
(20,7,0)
(2,15,0)
(29,19,0)
(22,7,0)
(7,29,0)
(0,10,1)
(20,23,1)
(16,25,1)
(4,9,1)
(20,7,1)
(21,18,1)
(18,25,1)
(9,28,1)
(22,24,1)
(13,16,1)
(14,27,1)
(10,21,1)
(24,13,1)
(23,7,1)
(16,2,1)
(17,4,1)
(7,14,1)
(26,17,1)
(0,4,1)
(11,20,1)
(2,0,1)
(27,8,1)
(8,22,1)
(11,24,1)
(25,26,1)
(14,4,1)
(14,24,2)
(18,25,2)
(14,4,2)
(20,7,2)
(20,24,2)
(7,14,2)
(0,25,2)
(7,24,2)
(2,25,2)
(0,4,2)
(22,24,2)
(8,24,2)
(10,25,2)
(23,24,2)
(2,0,2)
(21,25,2)
(27,24,2)
-----------------------------------
(0,&data)
(1,if(globalFive==5)
(2,fscanf (stdin, "%hd", &data)
(3,result)
(4,data = 0)
(5,if(globalFive==5)
(6,data)
(7,result = data * data)
(8,data)
(9,0)
(10,data)
(11,RET)
(12,)
(13,5)
(14,data * data)
(15,)
(16,globalFive)
(17,globalFive)
(18,stdin)
(19,)
(20,printIntLine(result)
(21,"%hd")
(22,result)
(23,result)
(24,globalFive==5)
(25,globalFive==5)
(26,5)
(27,data)
(28,data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^