-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_14_bad()
CWE190_Integer_Overflow__char_fscanf_add_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,9,0)
(9,2,0)
(13,28,0)
(21,18,0)
(12,14,0)
(10,15,0)
(1,13,0)
(27,17,0)
(7,8,0)
(16,17,0)
(8,3,0)
(6,28,0)
(9,3,0)
(22,15,0)
(23,14,0)
(3,4,0)
(17,14,0)
(19,2,0)
(29,3,0)
(26,18,0)
(28,17,0)
(8,9,0)
(2,9,0)
(2,17,0)
(20,2,0)
(28,13,0)
(13,25,0)
(11,13,0)
(24,14,0)
(5,18,1)
(17,27,1)
(2,20,1)
(18,26,1)
(8,7,1)
(28,6,1)
(20,19,1)
(7,9,1)
(1,11,1)
(13,28,1)
(9,2,1)
(8,9,1)
(27,16,1)
(22,17,1)
(21,15,1)
(6,1,1)
(15,10,1)
(21,13,1)
(28,17,1)
(0,18,1)
(11,15,1)
(26,21,1)
(10,22,1)
(5,8,1)
(19,0,1)
(2,17,1)
(2,18,2)
(20,18,2)
(28,15,2)
(9,2,2)
(7,18,2)
(1,15,2)
(11,15,2)
(13,28,2)
(9,18,2)
(8,9,2)
(8,18,2)
(2,17,2)
(13,15,2)
(28,17,2)
(0,18,2)
(19,18,2)
(6,15,2)
-----------------------------------
(0,result)
(1,"%c")
(2,data + 1)
(3,)
(4,)
(5,RET)
(6,data)
(7,result)
(8,printHexCharLine(result)
(9,result = data + 1)
(10,5)
(11,stdin)
(12,data)
(13,fscanf (stdin, "%c", &data)
(14,)
(15,globalFive==5)
(16,data)
(17,data = \\\' \\\')
(18,globalFive==5)
(19,data)
(20,1)
(21,globalFive)
(22,globalFive)
(23,if(globalFive==5)
(24,if(globalFive==5)
(25,)
(26,5)
(27,\\\' \\\')
(28,&data)
(29,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^