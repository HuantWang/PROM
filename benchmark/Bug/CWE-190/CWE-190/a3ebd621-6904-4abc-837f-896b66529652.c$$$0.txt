-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_square_04_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
58,60
59,60
59,61
59,62
59,63
59,64
59,65
59,66
59,67
59,68
59,69
59,70
59,71
59,72
59,73
60,61
61,62
61,63
62,63
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
86,87
89,90
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
120,121
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
138,139
139,140
140,141
142,143
144,145
146,147
146,148
147,148
147,149
148,149
148,150
148,151
149,150
151,152
153,154
155,156
157,158
159,160
160,161
160,162
161,162
163,164
163,165
163,166
163,167
164,165
166,167
168,169
170,171
172,173
172,174
173,174
173,175
174,175
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
184,187
184,188
184,189
185,186
187,188
189,190
191,192
191,193
192,193
196,197
196,198
197,198
197,199
198,199
198,200
199,200
201,202
203,204
203,205
204,205
207,208
209,210
210,211
210,212
211,212
211,213
212,213
214,215
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
227,228
227,229
228,229
228,230
229,230
231,232
233,234
234,235
235,236
235,237
236,237
238,239
240,241
240,242
241,242
241,243
242,243
244,245
246,247
247,248
248,249
248,250
249,250
251,252
253,254
253,255
254,255
256,257
257,258
257,259
258,259
259,260
259,261
261,262
261,263
263,264
264,265
264,266
265,266
267,268
269,270
270,271
270,272
271,272
273,274
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,31,35,37,40,44,46,49,52,54,57,63,66,68,70,72,76,78,80,84,87,88,92,97,98,100,106,107,108,110,115,116,119,121,126,128,132,134,137,141,143,145,150,152,154,156,158,162,165,167,169,171,175,177,179,183,186,188,190,193,194,195,200,202,205,206,208,213,215,216,220,223,225,226,230,232,237,239,243,245,250,252,255,260,262,266,268,272,274
-----computeFrom-----
12,13
12,14
61,62
61,63
74,75
74,76
94,95
94,96
102,103
102,104
112,113
112,114
123,124
123,125
147,148
147,149
160,161
160,162
173,174
173,175
181,182
181,183
191,192
191,193
197,198
197,199
198,199
198,200
203,204
203,205
210,211
210,212
218,219
218,220
228,229
228,230
241,242
241,243
264,265
264,266
-----guardedBy-----
230,239
243,252
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_square_04_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_square_04_bad()
CWE190_Integer_Overflow__int_listen_socket_square_04_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(75,127,0)
(10,20,0)
(19,143,0)
(48,20,0)
(38,52,0)
(102,153,0)
(28,47,0)
(170,77,0)
(127,45,0)
(163,120,0)
(62,20,0)
(89,10,0)
(23,20,0)
(40,62,0)
(60,86,0)
(72,152,0)
(44,65,0)
(148,68,0)
(14,65,0)
(158,80,0)
(121,77,0)
(67,132,0)
(65,152,0)
(83,128,0)
(38,3,0)
(154,72,0)
(71,123,0)
(97,112,0)
(45,127,0)
(151,153,0)
(168,153,0)
(59,74,0)
(100,121,0)
(164,20,0)
(29,132,0)
(16,62,0)
(117,80,0)
(11,20,0)
(9,107,0)
(118,100,0)
(119,53,0)
(77,121,0)
(152,72,0)
(39,119,0)
(77,79,0)
(169,104,0)
(101,16,0)
(5,134,0)
(129,104,0)
(55,4,0)
(10,124,0)
(114,143,0)
(126,42,0)
(43,144,0)
(92,72,0)
(132,20,0)
(37,130,0)
(147,75,0)
(75,95,0)
(107,113,0)
(143,114,0)
(64,75,0)
(77,62,0)
(156,113,0)
(109,35,0)
(143,4,0)
(85,153,0)
(125,53,0)
(4,143,0)
(120,167,0)
(7,59,0)
(81,153,0)
(30,29,0)
(107,62,0)
(105,68,0)
(40,116,0)
(162,77,0)
(159,153,0)
(75,152,0)
(73,65,0)
(34,153,0)
(76,62,0)
(117,100,0)
(80,117,0)
(130,62,0)
(1,119,0)
(40,113,0)
(84,79,0)
(120,123,0)
(136,149,0)
(82,132,0)
(90,153,0)
(50,59,0)
(65,44,0)
(15,152,0)
(18,149,0)
(63,77,0)
(104,105,0)
(127,75,0)
(127,47,0)
(145,137,0)
(124,10,0)
(21,16,0)
(59,137,0)
(119,121,0)
(49,20,0)
(131,0,0)
(87,142,0)
(58,11,0)
(105,20,0)
(167,20,0)
(79,77,0)
(47,127,0)
(140,95,0)
(160,113,0)
(36,20,0)
(54,44,0)
(137,149,0)
(32,142,0)
(91,164,0)
(157,40,0)
(66,81,0)
(53,20,0)
(110,3,0)
(70,124,0)
(121,20,0)
(146,11,0)
(74,59,0)
(96,149,0)
(94,79,0)
(171,20,0)
(111,130,0)
(123,120,0)
(135,35,0)
(13,19,0)
(103,81,0)
(142,164,0)
(133,20,0)
(132,67,0)
(161,74,0)
(138,24,0)
(155,166,0)
(12,130,0)
(62,130,0)
(61,4,0)
(31,147,0)
(80,121,0)
(75,147,0)
(112,74,0)
(68,105,0)
(113,153,0)
(132,29,0)
(88,107,0)
(3,153,0)
(2,153,0)
(25,153,0)
(95,75,0)
(35,3,0)
(38,152,0)
(115,121,0)
(166,152,0)
(130,152,0)
(46,137,0)
(35,152,0)
(106,100,0)
(153,6,0)
(152,20,0)
(26,33,0)
(108,166,0)
(74,128,0)
(17,153,0)
(78,80,0)
(59,10,0)
(100,117,0)
(141,3,0)
(56,167,0)
(98,38,0)
(122,67,0)
(143,19,0)
(139,114,0)
(51,153,0)
(41,123,0)
(165,72,0)
(112,128,0)
(128,69,0)
(122,82,1)
(137,46,1)
(97,74,1)
(53,125,1)
(70,89,1)
(135,26,1)
(57,40,1)
(135,99,1)
(30,166,1)
(26,117,1)
(124,70,1)
(132,29,1)
(104,129,1)
(77,162,1)
(147,31,1)
(113,156,1)
(81,66,1)
(141,81,1)
(67,122,1)
(143,4,1)
(55,113,1)
(161,22,1)
(59,10,1)
(77,62,1)
(135,138,1)
(163,123,1)
(127,45,1)
(44,54,1)
(166,155,1)
(156,160,1)
(12,111,1)
(7,161,1)
(75,127,1)
(60,114,1)
(119,121,1)
(115,16,1)
(39,117,1)
(99,10,1)
(16,62,1)
(68,148,1)
(40,62,1)
(158,78,1)
(131,147,1)
(40,157,1)
(28,64,1)
(135,5,1)
(160,3,1)
(11,146,1)
(22,27,1)
(127,47,1)
(61,55,1)
(50,7,1)
(63,115,1)
(82,29,1)
(101,21,1)
(58,114,1)
(84,94,1)
(65,152,1)
(75,152,1)
(130,37,1)
(27,137,1)
(88,9,1)
(166,152,1)
(148,104,1)
(46,145,1)
(139,143,1)
(117,100,1)
(119,1,1)
(142,32,1)
(100,121,1)
(35,109,1)
(40,113,1)
(129,169,1)
(16,101,1)
(140,127,1)
(4,61,1)
(167,56,1)
(44,65,1)
(108,152,1)
(57,107,1)
(13,4,1)
(138,16,1)
(98,35,1)
(103,27,1)
(9,38,1)
(152,72,1)
(9,35,1)
(38,98,1)
(135,126,1)
(117,80,1)
(100,118,1)
(91,142,1)
(132,67,1)
(8,22,1)
(38,152,1)
(155,108,1)
(112,97,1)
(125,119,1)
(107,88,1)
(8,112,1)
(89,53,1)
(54,65,1)
(14,147,1)
(107,113,1)
(65,73,1)
(87,132,1)
(66,103,1)
(22,43,1)
(35,3,1)
(169,167,1)
(74,59,1)
(3,110,1)
(164,91,1)
(107,62,1)
(123,41,1)
(72,165,1)
(43,57,1)
(157,107,1)
(19,13,1)
(41,71,1)
(121,77,1)
(59,137,1)
(170,63,1)
(59,50,1)
(120,123,1)
(143,19,1)
(114,143,1)
(73,14,1)
(106,121,1)
(135,131,1)
(110,141,1)
(111,76,1)
(31,75,1)
(56,120,1)
(112,74,1)
(10,124,1)
(118,106,1)
(126,44,1)
(92,15,1)
(94,170,1)
(114,139,1)
(76,44,1)
(109,135,1)
(135,60,1)
(146,58,1)
(1,39,1)
(147,75,1)
(80,121,1)
(29,30,1)
(32,87,1)
(35,152,1)
(95,140,1)
(55,99,1)
(105,68,1)
(21,62,1)
(37,12,1)
(162,79,1)
(80,158,1)
(78,100,1)
(62,130,1)
(120,163,1)
(77,79,1)
(130,152,1)
(47,28,1)
(22,57,1)
(75,95,1)
(165,154,1)
(71,164,1)
(15,11,1)
(5,166,1)
(79,84,1)
(38,3,1)
(64,105,1)
(154,92,1)
(117,16,2)
(160,27,2)
(131,147,2)
(166,114,2)
(28,166,2)
(110,27,2)
(146,114,2)
(44,65,2)
(7,22,2)
(148,166,2)
(26,117,2)
(77,79,2)
(118,16,2)
(98,35,2)
(37,44,2)
(143,19,2)
(122,166,2)
(115,16,2)
(158,100,2)
(30,166,2)
(67,166,2)
(126,44,2)
(75,166,2)
(39,117,2)
(107,113,2)
(61,27,2)
(143,4,2)
(74,22,2)
(61,99,2)
(105,166,2)
(4,27,2)
(92,114,2)
(161,22,2)
(121,16,2)
(63,16,2)
(114,27,2)
(80,121,2)
(117,100,2)
(58,114,2)
(56,166,2)
(15,114,2)
(75,127,2)
(156,27,2)
(41,166,2)
(75,95,2)
(66,27,2)
(123,166,2)
(152,72,2)
(73,147,2)
(170,16,2)
(167,166,2)
(35,27,2)
(13,27,2)
(119,117,2)
(5,166,2)
(65,152,2)
(59,22,2)
(164,166,2)
(40,113,2)
(99,117,2)
(127,47,2)
(127,45,2)
(14,147,2)
(114,99,2)
(101,44,2)
(77,62,2)
(9,27,2)
(60,114,2)
(125,117,2)
(139,99,2)
(44,147,2)
(82,166,2)
(95,166,2)
(53,117,2)
(100,121,2)
(111,44,2)
(12,44,2)
(105,68,2)
(100,16,2)
(19,99,2)
(68,166,2)
(112,22,2)
(70,117,2)
(138,16,2)
(19,27,2)
(59,10,2)
(117,80,2)
(29,166,2)
(57,27,2)
(112,74,2)
(74,59,2)
(43,57,2)
(21,44,2)
(50,22,2)
(162,16,2)
(75,152,2)
(108,114,2)
(13,99,2)
(130,44,2)
(62,130,2)
(114,143,2)
(140,166,2)
(91,166,2)
(1,117,2)
(166,152,2)
(76,44,2)
(4,99,2)
(35,152,2)
(169,166,2)
(143,99,2)
(121,77,2)
(103,27,2)
(78,100,2)
(157,107,2)
(109,27,2)
(89,117,2)
(54,147,2)
(124,117,2)
(152,114,2)
(87,166,2)
(97,22,2)
(135,27,2)
(32,166,2)
(120,123,2)
(3,27,2)
(47,166,2)
(154,114,2)
(40,62,2)
(38,152,2)
(132,29,2)
(62,44,2)
(132,67,2)
(65,147,2)
(81,27,2)
(38,35,2)
(120,166,2)
(130,152,2)
(64,166,2)
(77,16,2)
(10,124,2)
(106,16,2)
(80,100,2)
(143,27,2)
(104,166,2)
(11,114,2)
(147,75,2)
(40,107,2)
(139,27,2)
(107,27,2)
(142,166,2)
(38,3,2)
(84,16,2)
(165,114,2)
(132,166,2)
(127,166,2)
(107,62,2)
(79,16,2)
(147,166,2)
(113,27,2)
(119,121,2)
(72,114,2)
(163,166,2)
(71,166,2)
(10,117,2)
(31,166,2)
(16,62,2)
(35,3,2)
(16,44,2)
(94,16,2)
(129,166,2)
(55,99,2)
(55,27,2)
(59,137,2)
(88,27,2)
(141,27,2)
(155,114,2)
-----------------------------------
(0,)
(1,recvResult)
(2,wsaData)
(3,listenSocket = INVALID_SOCKET)
(4,MAKEWORD(2,2)
(5,break;)
(6,)
(7,data)
(8,RET)
(9,acceptSocket)
(10,data = atoi(inputBuffer)
(11,wsaDataInit = 1)
(12,NULL)
(13,wsaData)
(14,listenSocket)
(15,listenSocket)
(16,acceptSocket == SOCKET_ERROR)
(17,do)
(18,if(STATIC_CONST_TRUE)
(19,&wsaData)
(20,)
(21,acceptSocket)
(22,STATIC_CONST_TRUE)
(23,if (listenSocket == INVALID_SOCKET)
(24,)
(25,wsaDataInit)
(26,break;)
(27,STATIC_CONST_TRUE)
(28,service)
(29,&service)
(30,service)
(31,SOCKET_ERROR)
(32,sin_family)
(33,)
(34,listenSocket)
(35,listenSocket != INVALID_SOCKET)
(36,if (bind(listenSocket, (struct sockaddr*)
(37,NULL)
(38,CLOSE_SOCKET(listenSocket)
(39,inputBuffer)
(40,CLOSE_SOCKET(acceptSocket)
(41,sin_addr)
(42,)
(43,WSACleanup()
(44,listen(listenSocket, LISTEN_BACKLOG)
(45,struct sockaddr*)
(46,0)
(47,&service)
(48,if (acceptSocket == SOCKET_ERROR)
(49,if (recvResult == SOCKET_ERROR || recvResult == 0)
(50,data)
(51,acceptSocket)
(52,)
(53,inputBuffer[recvResult] = \'\\\\0\')
(54,SOCKET_ERROR)
(55,2)
(56,INADDR_ANY)
(57,wsaDataInit)
(58,wsaDataInit)
(59,data * data)
(60,break;)
(61,2)
(62,acceptSocket = accept(listenSocket, NULL, NULL)
(63,acceptSocket)
(64,listenSocket)
(65,listen(listenSocket, LISTEN_BACKLOG)
(66,0)
(67,sizeof(service)
(68,htons(TCP_PORT)
(69,)
(70,inputBuffer)
(71,service)
(72,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(73,LISTEN_BACKLOG)
(74,result = data * data)
(75,bind(listenSocket, (struct sockaddr*)
(76,acceptSocket)
(77,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(78,recvResult)
(79,CHAR_ARRAY_SIZE - 1)
(80,recvResult == 0)
(81,wsaDataInit = 0)
(82,0)
(83,result)
(84,1)
(85,if (listenSocket != INVALID_SOCKET)
(86,)
(87,service)
(88,INVALID_SOCKET)
(89,data)
(90,recvResult)
(91,AF_INET)
(92,AF_INET)
(93,inputBuffer[recvResult] = '\\\\0')
(94,CHAR_ARRAY_SIZE)
(95,sizeof(service)
(96,if(STATIC_CONST_TRUE)
(97,result)
(98,listenSocket)
(99,0)
(100,recvResult == SOCKET_ERROR)
(101,SOCKET_ERROR)
(102,inputBuffer)
(103,wsaDataInit)
(104,service.sin_port)
(105,service.sin_port = htons(TCP_PORT)
(106,recvResult)
(107,acceptSocket != INVALID_SOCKET)
(108,listenSocket)
(109,INVALID_SOCKET)
(110,INVALID_SOCKET)
(111,listenSocket)
(112,printIntLine(result)
(113,acceptSocket = INVALID_SOCKET)
(114,WSAStartup(MAKEWORD(2,2)
(115,recvResult)
(116,)
(117,recvResult == SOCKET_ERROR || recvResult == 0)
(118,SOCKET_ERROR)
(119,inputBuffer[recvResult])
(120,service.sin_addr.s_addr)
(121,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(122,service)
(123,service.sin_addr)
(124,atoi(inputBuffer)
(125,\'\\\\0\')
(126,break;)
(127,(struct sockaddr*)
(128,)
(129,sin_port)
(130,accept(listenSocket, NULL, NULL)
(131,break;)
(132,memset(&service, 0, sizeof(service)
(133,if (listen(listenSocket, LISTEN_BACKLOG)
(134,)
(135,listenSocket)
(136,data)
(137,data = 0)
(138,break;)
(139,NO_ERROR)
(140,service)
(141,listenSocket)
(142,service.sin_family)
(143,WSAStartup(MAKEWORD(2,2)
(144,)
(145,data)
(146,1)
(147,bind(listenSocket, (struct sockaddr*)
(148,TCP_PORT)
(149,)
(150,'\\\\0')
(151,service)
(152,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(153,)
(154,SOCK_STREAM)
(155,INVALID_SOCKET)
(156,INVALID_SOCKET)
(157,acceptSocket)
(158,0)
(159,if (acceptSocket != INVALID_SOCKET)
(160,acceptSocket)
(161,result)
(162,0)
(163,s_addr)
(164,service.sin_family = AF_INET)
(165,IPPROTO_TCP)
(166,listenSocket == INVALID_SOCKET)
(167,service.sin_addr.s_addr = INADDR_ANY)
(168,if (wsaDataInit)
(169,service)
(170,inputBuffer)
(171,if (WSAStartup(MAKEWORD(2,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^