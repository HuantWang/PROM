-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_04_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,23,0)
(1,4,0)
(2,1,0)
(10,1,0)
(25,3,0)
(10,4,0)
(13,10,0)
(7,4,0)
(22,3,0)
(12,4,0)
(22,19,0)
(9,3,0)
(5,19,0)
(16,22,0)
(24,23,0)
(1,19,0)
(4,14,0)
(3,22,0)
(8,23,0)
(3,6,0)
(17,1,0)
(19,23,0)
(7,19,0)
(21,7,0)
(0,19,0)
(13,1,1)
(7,21,1)
(21,18,1)
(10,1,1)
(10,13,1)
(20,18,1)
(22,19,1)
(15,19,1)
(18,15,1)
(1,19,1)
(7,19,1)
(19,5,1)
(22,16,1)
(1,2,1)
(17,7,1)
(16,25,1)
(9,15,1)
(5,0,1)
(25,9,1)
(2,17,1)
(3,22,1)
(20,10,1)
(18,3,1)
(10,18,2)
(21,18,2)
(16,15,2)
(9,15,2)
(2,18,2)
(22,19,2)
(17,18,2)
(10,1,2)
(3,22,2)
(1,18,2)
(22,15,2)
(3,15,2)
(1,19,2)
(7,19,2)
(25,15,2)
(7,18,2)
(13,18,2)
-----------------------------------
(0,data)
(1,result = data)
(2,data)
(3,fscanf (stdin, "%c", &data)
(4,)
(5,\\\' \\\')
(6,)
(7,++data)
(8,if(STATIC_CONST_TRUE)
(9,stdin)
(10,printHexCharLine(result)
(11,if(STATIC_CONST_TRUE)
(12,result)
(13,result)
(14,)
(15,STATIC_CONST_TRUE)
(16,data)
(17,result)
(18,STATIC_CONST_TRUE)
(19,data = \\\' \\\')
(20,RET)
(21,data)
(22,&data)
(23,)
(24,data)
(25,"%c")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^