-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    {
        int64_t dataCopy = data;
        int64_t data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
19,20
20,21
20,22
21,22
23,24
23,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,9,11,15,16,22,24,27,31,33,36,40,41,46,48,52,53,57,59
-----computeFrom-----
13,14
13,15
38,39
38,40
50,51
50,52
-----guardedBy-----
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
{        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t dataCopy = data;
int64_t dataCopy = data;
int64_t
int64_t
dataCopy = data
dataCopy
= data
data
data
int64_t data = dataCopy;
int64_t data = dataCopy;
int64_t
int64_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(23,6,0)
(2,3,0)
(13,20,0)
(7,6,0)
(17,2,0)
(0,24,0)
(1,24,0)
(3,13,0)
(5,13,0)
(11,2,0)
(21,3,0)
(8,13,0)
(3,5,0)
(11,24,0)
(12,1,0)
(1,11,0)
(2,11,0)
(19,5,0)
(15,11,0)
(25,13,0)
(16,3,0)
(4,20,0)
(18,5,0)
(22,2,0)
(6,3,0)
(10,20,0)
(14,13,0)
(11,2,1)
(17,22,1)
(6,3,1)
(3,16,1)
(19,4,1)
(21,5,1)
(5,18,1)
(1,11,1)
(12,11,1)
(2,17,1)
(16,21,1)
(9,1,1)
(18,19,1)
(7,23,1)
(9,6,1)
(23,3,1)
(2,3,1)
(3,5,1)
(6,7,1)
(22,15,1)
(1,12,1)
(15,6,1)
(15,6,2)
(12,6,2)
(22,6,2)
(11,2,2)
(1,11,2)
(11,6,2)
(6,3,2)
(2,6,2)
(3,5,2)
(2,3,2)
(1,6,2)
(17,6,2)
-----------------------------------
(0,result)
(1,printLongLongLine(result)
(2,data * 2)
(3,data = dataCopy)
(4,L)
(5,dataCopy = data)
(6,data > 0)
(7,0)
(8,dataCopy)
(9,RET)
(10,data)
(11,result = data * 2)
(12,result)
(13,)
(14,if(data > 0)
(15,result)
(16,dataCopy)
(17,2)
(18,data)
(19,dataCopy)
(20,)
(21,data)
(22,data)
(23,data)
(24,)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^