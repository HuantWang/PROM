-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_add_03_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_add_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(3,5,0)
(7,10,0)
(22,26,0)
(24,17,0)
(29,26,0)
(20,2,0)
(25,7,0)
(0,27,0)
(17,27,0)
(5,23,0)
(21,14,0)
(13,14,0)
(10,23,0)
(17,29,0)
(6,26,0)
(7,29,0)
(27,17,0)
(5,10,0)
(19,23,0)
(4,7,0)
(23,1,0)
(8,29,0)
(28,27,0)
(9,2,0)
(12,29,0)
(10,7,0)
(27,11,0)
(15,10,0)
(18,26,0)
(8,12,1)
(5,10,1)
(29,8,1)
(9,20,1)
(13,29,1)
(16,5,1)
(4,25,1)
(14,21,1)
(3,10,1)
(27,17,1)
(10,7,1)
(20,14,1)
(28,0,1)
(16,2,1)
(7,4,1)
(24,28,1)
(17,24,1)
(5,3,1)
(15,2,1)
(21,13,1)
(0,14,1)
(20,27,1)
(7,29,1)
(17,29,1)
(25,15,1)
(2,9,1)
(27,17,2)
(10,2,2)
(7,2,2)
(24,14,2)
(7,29,2)
(17,14,2)
(3,2,2)
(15,2,2)
(28,14,2)
(5,2,2)
(10,7,2)
(17,29,2)
(25,2,2)
(0,14,2)
(4,2,2)
(5,10,2)
(27,14,2)
-----------------------------------
(0,stdin)
(1,)
(2,5==5)
(3,result)
(4,1)
(5,printUnsignedLine(result)
(6,data)
(7,data + 1)
(8,0)
(9,5)
(10,result = data + 1)
(11,)
(12,data)
(13,5)
(14,5==5)
(15,result)
(16,RET)
(17,&data)
(18,if(5==5)
(19,result)
(20,5)
(21,5)
(22,if(5==5)
(23,)
(24,data)
(25,data)
(26,)
(27,fscanf (stdin, "%u", &data)
(28,"%u")
(29,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^