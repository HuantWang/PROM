-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_06_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_06_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_06_bad()
CWE190_Integer_Overflow__int_max_multiply_06_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,27,0)
(5,28,0)
(28,11,0)
(22,1,0)
(9,28,0)
(16,22,0)
(14,16,0)
(18,15,0)
(19,28,0)
(17,0,0)
(15,22,0)
(3,0,0)
(7,22,0)
(2,16,0)
(21,27,0)
(13,29,0)
(20,1,0)
(19,25,0)
(30,25,0)
(6,31,0)
(25,31,0)
(24,19,0)
(22,16,0)
(15,1,0)
(12,31,0)
(23,25,0)
(4,19,0)
(10,31,0)
(16,28,0)
(16,25,0)
(21,25,1)
(7,19,1)
(2,14,1)
(23,30,1)
(18,22,1)
(16,25,1)
(3,27,1)
(4,24,1)
(25,23,1)
(16,28,1)
(5,27,1)
(14,7,1)
(3,28,1)
(9,5,1)
(19,4,1)
(28,9,1)
(24,0,1)
(27,8,1)
(0,17,1)
(15,18,1)
(19,25,1)
(19,28,1)
(15,22,1)
(22,16,1)
(26,15,1)
(26,19,1)
(16,2,1)
(17,3,1)
(26,0,1)
(8,21,1)
(15,22,2)
(5,27,2)
(22,16,2)
(19,25,2)
(7,19,2)
(18,19,2)
(16,28,2)
(16,19,2)
(16,25,2)
(24,0,2)
(4,0,2)
(15,19,2)
(14,19,2)
(19,28,2)
(19,0,2)
(9,27,2)
(28,27,2)
(22,19,2)
(2,19,2)
-----------------------------------
(0,STATIC_CONST_FIVE==5)
(1,)
(2,2)
(3,STATIC_CONST_FIVE)
(4,0)
(5,data)
(6,if(STATIC_CONST_FIVE==5)
(7,result)
(8,5)
(9,INT_MAX)
(10,data)
(11,)
(12,if(STATIC_CONST_FIVE==5)
(13,if(data > 0)
(14,data)
(15,printIntLine(result)
(16,data * 2)
(17,5)
(18,result)
(19,data > 0)
(20,result)
(21,STATIC_CONST_FIVE)
(22,result = data * 2)
(23,0)
(24,data)
(25,data = 0)
(26,RET)
(27,STATIC_CONST_FIVE==5)
(28,data = INT_MAX)
(29,)
(30,data)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^