-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,38,42,44,48,50,51
-----computeFrom-----
12,13
12,14
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_square_16_bad()
CWE190_Integer_Overflow__int_fscanf_square_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(0,4,0)
(3,4,0)
(10,21,0)
(23,22,0)
(19,4,0)
(1,9,0)
(26,23,0)
(12,23,0)
(6,21,0)
(21,27,0)
(22,23,0)
(17,13,0)
(18,7,0)
(22,19,0)
(7,27,0)
(20,4,0)
(11,19,0)
(2,13,0)
(23,9,0)
(24,22,0)
(27,2,0)
(5,27,0)
(27,21,0)
(7,2,0)
(14,2,0)
(25,19,0)
(21,19,0)
(15,19,1)
(18,27,1)
(6,10,1)
(7,27,1)
(19,25,1)
(5,16,1)
(17,7,1)
(8,17,1)
(21,19,1)
(24,26,1)
(25,11,1)
(7,18,1)
(1,23,1)
(22,19,1)
(16,1,1)
(8,16,1)
(22,24,1)
(10,5,1)
(12,15,1)
(23,22,1)
(21,6,1)
(16,15,1)
(27,21,1)
(26,12,1)
(22,15,2)
(12,15,2)
(21,19,2)
(6,16,2)
(17,16,2)
(10,16,2)
(7,27,2)
(27,21,2)
(21,16,2)
(24,15,2)
(23,22,2)
(26,15,2)
(22,19,2)
(1,15,2)
(27,16,2)
(23,15,2)
(5,16,2)
(7,16,2)
(18,16,2)
-----------------------------------
(0,data)
(1,break;)
(2,)
(3,while(1)
(4,)
(5,result)
(6,data)
(7,printIntLine(result)
(8,RET)
(9,)
(10,data)
(11,data)
(12,stdin)
(13,)
(14,result)
(15,1)
(16,1)
(17,break;)
(18,result)
(19,data = 0)
(20,while(1)
(21,data * data)
(22,&data)
(23,fscanf(stdin, "%d", &data)
(24,data)
(25,0)
(26,"%d")
(27,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^