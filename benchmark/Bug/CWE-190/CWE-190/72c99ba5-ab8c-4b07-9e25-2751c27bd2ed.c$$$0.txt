-----label-----
1
-----code-----
static void badSink(char data)
{
    if(badStatic)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
15,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
-----nextToken-----
2,4,6,8,12,18,21,23,26,30,32
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
badStatic
badStatic
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,10,0)
(5,6,0)
(1,8,0)
(4,8,0)
(2,10,0)
(12,2,0)
(0,1,0)
(6,8,0)
(2,8,0)
(13,3,0)
(14,2,0)
(1,2,0)
(8,11,0)
(0,2,1)
(1,2,1)
(5,7,1)
(14,6,1)
(9,7,1)
(6,10,1)
(2,10,1)
(12,14,1)
(1,0,1)
(6,5,1)
(2,12,1)
(9,1,1)
(1,2,2)
(5,7,2)
(2,7,2)
(1,7,2)
(0,7,2)
(2,10,2)
(14,7,2)
(6,7,2)
(12,7,2)
(6,10,2)
-----------------------------------
(0,result)
(1,printHexCharLine(result)
(2,result = data)
(3,)
(4,result)
(5,data)
(6,data++)
(7,badStatic)
(8,)
(9,RET)
(10,char data)
(11,)
(12,data)
(13,if(badStatic)
(14,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^