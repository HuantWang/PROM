-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad()
{
    int64_t data;
    data = 0LL;
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
23,24
24,25
24,26
25,26
25,27
26,27
29,30
29,31
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,9,11,15,16,18,22,27,28,33,35,39,40,44,46
-----computeFrom-----
13,14
13,15
25,26
25,27
37,38
37,39
-----guardedBy-----
27,39
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ProblemStatement;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad(){    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad
{    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(7,13,0)
(16,0,0)
(5,0,0)
(15,0,0)
(1,16,0)
(10,12,0)
(6,16,0)
(11,3,0)
(20,15,0)
(19,12,0)
(16,1,0)
(4,1,0)
(2,3,0)
(9,12,0)
(17,12,0)
(15,16,0)
(18,1,0)
(1,18,1)
(3,2,1)
(16,1,1)
(15,16,1)
(4,6,1)
(14,3,1)
(20,16,1)
(14,15,1)
(21,8,1)
(8,10,1)
(11,21,1)
(15,20,1)
(18,4,1)
(2,11,1)
(6,3,1)
(14,21,1)
(6,3,2)
(15,16,2)
(16,3,2)
(18,3,2)
(4,3,2)
(11,21,2)
(2,21,2)
(3,21,2)
(16,1,2)
(15,3,2)
(20,3,2)
(1,3,2)
-----------------------------------
(0,)
(1,data * 2)
(2,0)
(3,data > 0)
(4,data)
(5,result)
(6,result)
(7,if(data > 0)
(8,1)
(9,if(1)
(10,L)
(11,data)
(12,)
(13,)
(14,RET)
(15,printLongLongLine(result)
(16,result = data * 2)
(17,data)
(18,2)
(19,if(1)
(20,result)
(21,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^