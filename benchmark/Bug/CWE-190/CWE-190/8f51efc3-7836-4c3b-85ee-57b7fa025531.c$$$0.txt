-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_08_bad()
CWE190_Integer_Overflow__short_rand_square_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,6,0)
(20,11,0)
(6,18,0)
(11,2,0)
(5,11,0)
(23,1,0)
(20,23,0)
(16,7,0)
(7,16,0)
(6,7,0)
(0,20,0)
(7,24,0)
(10,23,0)
(19,1,0)
(3,20,0)
(7,6,0)
(22,2,0)
(5,2,0)
(25,23,0)
(13,6,0)
(11,20,0)
(15,11,0)
(12,1,0)
(2,9,0)
(24,7,0)
(4,1,0)
(8,5,0)
(20,23,1)
(16,13,1)
(21,5,1)
(13,17,1)
(8,11,1)
(7,24,1)
(23,10,1)
(0,15,1)
(14,17,1)
(15,14,1)
(7,16,1)
(20,3,1)
(14,6,1)
(5,8,1)
(17,23,1)
(6,7,1)
(11,20,1)
(10,25,1)
(20,6,1)
(3,0,1)
(21,14,1)
(5,11,1)
(20,23,2)
(0,14,2)
(20,14,2)
(7,17,2)
(11,14,2)
(15,14,2)
(3,14,2)
(7,16,2)
(6,17,2)
(20,6,2)
(11,20,2)
(6,7,2)
(16,17,2)
(7,24,2)
(5,11,2)
(8,14,2)
(5,14,2)
(13,17,2)
-----------------------------------
(0,data)
(1,)
(2,)
(3,data)
(4,if(staticReturnsTrue()
(5,printIntLine(result)
(6,data = (short)
(7,(short)
(8,result)
(9,)
(10,0)
(11,result = data * data)
(12,if(staticReturnsTrue()
(13,data)
(14,staticReturnsTrue()
(15,result)
(16,RAND32()
(17,staticReturnsTrue()
(18,)
(19,data)
(20,data * data)
(21,RET)
(22,result)
(23,data = 0)
(24,short)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^