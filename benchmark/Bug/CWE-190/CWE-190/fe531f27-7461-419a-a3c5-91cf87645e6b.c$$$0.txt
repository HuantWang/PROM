-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
        {
            short result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
64,66
65,66
67,68
67,69
68,69
68,70
71,72
73,74
73,75
74,75
74,76
77,78
77,79
78,79
80,81
80,82
81,82
81,83
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,54,58,60,66,69,70,72,75,76,79,82,83,85,89,91,95,97,101,103,108,109
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
63,64
63,65
93,94
93,95
-----guardedBy-----
72,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_rand_square_12_bad()
CWE190_Integer_Overflow__short_rand_square_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)SHRT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)SHRT_MAX)
long
long

sqrt((double)SHRT_MAX)
sqrt
sqrt
(double)SHRT_MAX
double
double

SHRT_MAX
SHRT_MAX
{            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(7,19,0)
(4,0,0)
(0,4,0)
(36,45,0)
(22,27,0)
(26,30,0)
(27,29,0)
(33,40,0)
(35,26,0)
(49,39,0)
(31,21,0)
(40,8,0)
(12,49,0)
(19,20,0)
(34,15,0)
(46,17,0)
(24,17,0)
(12,41,0)
(4,8,0)
(3,17,0)
(24,21,0)
(54,40,0)
(40,15,0)
(45,8,0)
(17,8,0)
(10,28,0)
(47,9,0)
(11,16,0)
(16,28,0)
(13,40,0)
(15,32,0)
(13,26,0)
(29,49,0)
(17,15,0)
(4,15,0)
(1,4,0)
(27,22,0)
(39,49,0)
(18,26,0)
(52,13,0)
(41,4,0)
(38,27,0)
(4,41,0)
(44,24,0)
(42,45,0)
(29,27,0)
(17,24,0)
(35,13,0)
(49,12,0)
(40,13,0)
(5,15,0)
(45,42,0)
(50,8,0)
(14,28,0)
(6,21,0)
(25,35,0)
(31,24,0)
(48,31,0)
(53,28,0)
(41,12,0)
(49,29,0)
(8,45,0)
(8,37,0)
(23,16,0)
(45,36,0)
(44,12,1)
(5,34,1)
(48,24,1)
(27,22,1)
(15,5,1)
(7,12,1)
(51,19,1)
(35,13,1)
(35,25,1)
(12,49,1)
(46,3,1)
(43,15,1)
(50,2,1)
(27,38,1)
(33,54,1)
(40,33,1)
(16,23,1)
(40,8,1)
(4,0,1)
(42,50,1)
(52,43,1)
(51,35,1)
(4,15,1)
(17,46,1)
(29,27,1)
(24,17,1)
(51,31,1)
(8,45,1)
(25,13,1)
(43,8,1)
(40,15,1)
(31,48,1)
(38,41,1)
(4,8,1)
(19,7,1)
(3,44,1)
(41,4,1)
(34,2,1)
(49,29,1)
(23,11,1)
(1,43,1)
(4,1,1)
(49,39,1)
(12,41,1)
(31,24,1)
(2,16,1)
(13,40,1)
(45,42,1)
(45,36,1)
(54,52,1)
(17,15,1)
(17,8,1)
(41,4,2)
(1,43,2)
(29,43,2)
(49,29,2)
(17,8,2)
(4,8,2)
(40,15,2)
(40,43,2)
(44,12,2)
(17,12,2)
(12,49,2)
(13,40,2)
(45,42,2)
(27,43,2)
(7,12,2)
(24,12,2)
(49,43,2)
(12,41,2)
(35,13,2)
(15,2,2)
(8,2,2)
(19,12,2)
(4,15,2)
(17,15,2)
(4,43,2)
(50,2,2)
(29,27,2)
(3,12,2)
(31,24,2)
(52,43,2)
(42,2,2)
(4,0,2)
(13,43,2)
(34,2,2)
(25,43,2)
(54,43,2)
(49,39,2)
(38,43,2)
(31,12,2)
(45,36,2)
(46,12,2)
(8,45,2)
(24,17,2)
(40,8,2)
(35,43,2)
(27,22,2)
(12,43,2)
(41,43,2)
(33,43,2)
(48,12,2)
(45,2,2)
(5,2,2)
-----------------------------------
(0,long)
(1,data)
(2,globalReturnsTrueOrFalse()
(3,data)
(4,(long)
(5,2)
(6,result)
(7,"data value is too large to perform arithmetic safely.")
(8,data = (short)
(9,)
(10,data)
(11,data)
(12,abs((long)
(13,result = data * data)
(14,if(globalReturnsTrueOrFalse()
(15,data = 2)
(16,data = 0)
(17,data * data)
(18,result)
(19,printLine("data value is too large to perform arithmetic safely.")
(20,)
(21,)
(22,double)
(23,0)
(24,result = data * data)
(25,result)
(26,)
(27,(double)
(28,)
(29,sqrt((double)
(30,)
(31,printIntLine(result)
(32,)
(33,data)
(34,data)
(35,printIntLine(result)
(36,short)
(37,)
(38,SHRT_MAX)
(39,long)
(40,data * data)
(41,abs((long)
(42,RAND32()
(43,globalReturnsTrueOrFalse()
(44,result)
(45,(short)
(46,data)
(47,if (abs((long)
(48,result)
(49,(long)
(50,data)
(51,RET)
(52,result)
(53,if(globalReturnsTrueOrFalse()
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^