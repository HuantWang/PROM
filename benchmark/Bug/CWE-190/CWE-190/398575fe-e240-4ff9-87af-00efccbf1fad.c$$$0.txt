-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_05_bad()
{
    char data;
    data = ' ';
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticTrue)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_05_bad(){    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_05_bad()
CWE190_Integer_Overflow__char_rand_preinc_05_bad
{    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
staticTrue
staticTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,10,0)
(20,6,0)
(3,20,0)
(21,9,0)
(22,23,0)
(13,6,0)
(4,22,0)
(11,24,0)
(2,8,0)
(26,9,0)
(7,24,0)
(15,6,0)
(2,10,0)
(9,6,0)
(20,2,0)
(1,2,0)
(9,2,0)
(5,14,0)
(14,9,0)
(12,24,0)
(20,22,0)
(9,22,0)
(10,0,0)
(19,10,0)
(14,22,0)
(10,19,0)
(10,2,0)
(6,24,0)
(21,20,1)
(10,19,1)
(20,6,1)
(26,21,1)
(17,6,1)
(9,2,1)
(9,6,1)
(16,17,1)
(9,26,1)
(14,9,1)
(13,15,1)
(20,2,1)
(19,1,1)
(3,16,1)
(14,5,1)
(6,13,1)
(5,9,1)
(2,10,1)
(18,16,1)
(16,2,1)
(20,3,1)
(10,0,1)
(1,17,1)
(18,14,1)
(1,17,2)
(10,19,2)
(20,16,2)
(26,16,2)
(20,2,2)
(20,6,2)
(14,16,2)
(2,10,2)
(10,17,2)
(9,6,2)
(9,2,2)
(5,16,2)
(3,16,2)
(14,9,2)
(19,17,2)
(2,17,2)
(21,16,2)
(10,0,2)
(9,16,2)
-----------------------------------
(0,char)
(1,data)
(2,data = (char)
(3,data)
(4,result)
(5,result)
(6,data = ' ')
(7,if(staticTrue)
(8,)
(9,result = data)
(10,(char)
(11,if(staticTrue)
(12,data)
(13,' ')
(14,printHexCharLine(result)
(15,data)
(16,staticTrue)
(17,staticTrue)
(18,RET)
(19,RAND32()
(20,++data)
(21,result)
(22,)
(23,)
(24,)
(25,data = \' \')
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^