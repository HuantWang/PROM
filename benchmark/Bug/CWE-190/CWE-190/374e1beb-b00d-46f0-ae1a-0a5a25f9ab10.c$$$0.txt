-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,68,72,74,78,79,83,85
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
76,77
76,78
-----guardedBy-----
37,53
67,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_10_bad()
CWE190_Integer_Overflow__int_fgets_multiply_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(39,4,0)
(1,16,0)
(30,29,0)
(1,29,0)
(35,23,0)
(44,31,0)
(11,31,0)
(5,1,0)
(0,38,0)
(28,33,0)
(1,3,0)
(6,37,0)
(42,22,0)
(18,23,0)
(3,4,0)
(29,24,0)
(21,18,0)
(8,18,0)
(41,39,0)
(29,30,0)
(15,4,0)
(36,2,0)
(18,38,0)
(13,31,0)
(32,1,0)
(20,3,0)
(25,37,0)
(19,29,0)
(37,29,0)
(16,31,0)
(9,30,0)
(12,16,0)
(40,23,0)
(39,3,0)
(10,18,0)
(37,16,0)
(17,22,0)
(22,7,0)
(2,34,0)
(3,1,0)
(38,18,0)
(14,16,0)
(23,22,0)
(30,23,0)
(30,9,1)
(38,0,1)
(30,23,1)
(41,3,1)
(9,19,1)
(38,18,1)
(43,39,1)
(35,40,1)
(25,6,1)
(1,16,1)
(5,20,1)
(32,5,1)
(6,27,1)
(37,16,1)
(0,18,1)
(39,41,1)
(18,8,1)
(10,21,1)
(18,23,1)
(16,14,1)
(37,25,1)
(1,32,1)
(19,38,1)
(1,29,1)
(43,37,1)
(39,3,1)
(3,1,1)
(20,37,1)
(27,2,1)
(27,29,1)
(26,16,1)
(29,30,1)
(2,36,1)
(37,29,1)
(14,12,1)
(8,10,1)
(21,23,1)
(27,26,1)
(40,26,1)
(43,27,1)
(23,35,1)
(36,38,1)
(29,38,2)
(1,37,2)
(38,26,2)
(25,27,2)
(41,37,2)
(20,37,2)
(18,23,2)
(3,1,2)
(36,38,2)
(38,18,2)
(1,16,2)
(9,38,2)
(6,27,2)
(39,3,2)
(1,29,2)
(37,16,2)
(21,26,2)
(40,26,2)
(37,29,2)
(2,38,2)
(37,27,2)
(39,37,2)
(30,23,2)
(10,26,2)
(5,37,2)
(32,37,2)
(23,26,2)
(0,26,2)
(29,30,2)
(30,38,2)
(19,38,2)
(35,26,2)
(18,26,2)
(8,26,2)
(3,37,2)
-----------------------------------
(0,NULL)
(1,data * 2)
(2,printLine("fgets()
(3,result = data * 2)
(4,)
(5,data)
(6,data)
(7,)
(8,stdin)
(9,inputBuffer)
(10,CHAR_ARRAY_SIZE)
(11,data)
(12,data)
(13,if(globalTrue)
(14,0)
(15,result)
(16,data = 0)
(17,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,data)
(20,result)
(21,inputBuffer)
(22,)
(23,inputBuffer[CHAR_ARRAY_SIZE] = "")
(24,)
(25,0)
(26,globalTrue)
(27,globalTrue)
(28,if(data > 0)
(29,data = atoi(inputBuffer)
(30,atoi(inputBuffer)
(31,)
(32,2)
(33,)
(34,)
(35,"")
(36,"fgets()
(37,data > 0)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,printIntLine(result)
(40,inputBuffer)
(41,result)
(42,inputBuffer)
(43,RET)
(44,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^