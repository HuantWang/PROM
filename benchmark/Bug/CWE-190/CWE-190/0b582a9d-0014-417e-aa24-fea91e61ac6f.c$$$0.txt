-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_fscanf_add_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
55,56
55,57
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,60,61,65,67
-----computeFrom-----
18,19
18,20
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_34_bad(){    char data;    CWE190_Integer_Overflow__char_fscanf_add_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_34_bad()
CWE190_Integer_Overflow__char_fscanf_add_34_bad
{    char data;    CWE190_Integer_Overflow__char_fscanf_add_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_fscanf_add_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_add_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_add_34_unionType
CWE190_Integer_Overflow__char_fscanf_add_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,30,0)
(0,6,0)
(7,0,0)
(25,1,0)
(1,32,0)
(11,20,0)
(14,25,0)
(15,30,0)
(6,5,0)
(16,9,0)
(3,1,0)
(31,9,0)
(17,5,0)
(2,0,0)
(4,26,0)
(5,6,0)
(22,5,0)
(8,26,0)
(30,0,0)
(16,32,0)
(20,24,0)
(30,20,0)
(13,11,0)
(12,24,0)
(6,24,0)
(19,16,0)
(9,1,0)
(18,20,0)
(26,25,0)
(9,16,0)
(25,32,0)
(27,32,0)
(10,6,0)
(11,30,0)
(29,16,0)
(24,32,0)
(23,32,0)
(21,1,0)
(17,22,1)
(0,2,1)
(0,6,1)
(16,9,1)
(25,14,1)
(11,30,1)
(10,25,1)
(15,6,1)
(19,29,1)
(13,30,1)
(25,1,1)
(31,19,1)
(30,0,1)
(14,26,1)
(29,1,1)
(6,5,1)
(4,16,1)
(22,10,1)
(26,8,1)
(9,1,1)
(11,13,1)
(2,7,1)
(7,15,1)
(28,11,1)
(9,31,1)
(5,17,1)
(1,3,1)
(8,4,1)
(3,21,1)
(30,0,2)
(16,9,2)
(0,6,2)
(11,30,2)
(25,1,2)
(9,1,2)
(6,5,2)
-----------------------------------
(0,data + 1)
(1,data = \\\' \\\')
(2,1)
(3,\\\' \\\')
(4,myUnion)
(5,myUnion.unionSecond)
(6,data = myUnion.unionSecond)
(7,data)
(8,unionFirst)
(9,&data)
(10,data)
(11,printHexCharLine(result)
(12,data)
(13,result)
(14,data)
(15,result)
(16,fscanf (stdin, "%c", &data)
(17,unionSecond)
(18,result)
(19,"%c")
(20,)
(21,data)
(22,myUnion)
(23,data)
(24,)
(25,myUnion.unionFirst = data)
(26,myUnion.unionFirst)
(27,myUnion)
(28,RET)
(29,stdin)
(30,result = data + 1)
(31,data)
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^