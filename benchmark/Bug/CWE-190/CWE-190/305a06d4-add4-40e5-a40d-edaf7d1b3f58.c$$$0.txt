-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_max_square_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,56,58,62,64
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_34_bad(){    char data;    CWE190_Integer_Overflow__char_max_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_34_bad()
CWE190_Integer_Overflow__char_max_square_34_bad
{    char data;    CWE190_Integer_Overflow__char_max_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_square_34_unionType
CWE190_Integer_Overflow__char_max_square_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,7,0)
(18,25,0)
(15,28,0)
(5,23,0)
(23,24,0)
(7,23,0)
(10,2,0)
(0,12,0)
(3,0,0)
(2,12,0)
(29,28,0)
(11,12,0)
(20,26,0)
(26,30,0)
(24,4,0)
(30,12,0)
(30,0,0)
(17,14,0)
(14,25,0)
(25,28,0)
(25,4,0)
(19,0,0)
(6,14,0)
(14,23,0)
(16,30,0)
(23,14,0)
(28,25,0)
(1,24,0)
(7,24,0)
(13,12,0)
(9,2,0)
(22,4,0)
(27,26,0)
(4,12,0)
(30,16,1)
(23,14,1)
(29,18,1)
(19,3,1)
(14,25,1)
(0,19,1)
(5,25,1)
(20,27,1)
(25,28,1)
(17,6,1)
(2,9,1)
(21,7,1)
(6,5,1)
(16,26,1)
(9,10,1)
(30,0,1)
(18,30,1)
(15,29,1)
(3,2,1)
(28,15,1)
(8,23,1)
(7,8,1)
(14,17,1)
(26,20,1)
(27,0,1)
(7,23,1)
(14,25,2)
(23,14,2)
(25,28,2)
(30,0,2)
(7,23,2)
-----------------------------------
(0,data = CHAR_MAX)
(1,result)
(2,data = ' ')
(3,data)
(4,)
(5,result)
(6,data)
(7,printHexCharLine(result)
(8,result)
(9,' ')
(10,data)
(11,myUnion)
(12,)
(13,data)
(14,data * data)
(15,unionSecond)
(16,data)
(17,data)
(18,data)
(19,CHAR_MAX)
(20,unionFirst)
(21,RET)
(22,data)
(23,result = data * data)
(24,)
(25,data = myUnion.unionSecond)
(26,myUnion.unionFirst)
(27,myUnion)
(28,myUnion.unionSecond)
(29,myUnion)
(30,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^