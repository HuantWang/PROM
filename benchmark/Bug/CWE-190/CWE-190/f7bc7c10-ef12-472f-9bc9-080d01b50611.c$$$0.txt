-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
        {
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
76,77
76,78
77,78
79,80
79,81
80,81
80,82
83,84
85,86
85,87
86,87
87,88
87,89
89,90
89,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,68,69,71,74,75,78,81,82,84,88,90,94,96,100,102,107,108
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
92,93
92,94
-----guardedBy-----
71,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) < (long)sqrt((double)UINT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)UINT_MAX)
long
long

sqrt((double)UINT_MAX)
sqrt
sqrt
(double)UINT_MAX
double
double

UINT_MAX
UINT_MAX
{            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(45,41,0)
(44,50,0)
(44,49,0)
(24,26,0)
(17,30,0)
(53,38,0)
(45,39,0)
(38,49,0)
(11,13,0)
(48,30,0)
(20,38,0)
(5,44,0)
(40,44,0)
(19,14,0)
(2,8,0)
(38,36,0)
(38,20,0)
(27,17,0)
(3,0,0)
(31,12,0)
(14,18,0)
(33,16,0)
(43,8,0)
(30,4,0)
(41,31,0)
(39,45,0)
(34,49,0)
(38,4,0)
(9,50,0)
(22,42,0)
(31,37,0)
(1,4,0)
(49,6,0)
(18,0,0)
(17,35,0)
(25,17,0)
(36,38,0)
(12,20,0)
(18,15,0)
(30,17,0)
(28,4,0)
(31,41,0)
(4,8,0)
(15,49,0)
(15,18,0)
(10,49,0)
(51,45,0)
(37,31,0)
(23,18,0)
(12,31,0)
(50,13,0)
(32,15,0)
(50,44,0)
(42,50,0)
(14,0,0)
(21,15,0)
(42,13,0)
(41,45,0)
(20,12,0)
(15,4,0)
(54,8,0)
(44,4,0)
(7,24,0)
(0,52,0)
(7,12,1)
(38,53,1)
(20,38,1)
(24,7,1)
(5,9,1)
(18,15,1)
(51,20,1)
(53,29,1)
(46,24,1)
(44,49,1)
(46,14,1)
(44,4,1)
(25,27,1)
(42,50,1)
(27,47,1)
(49,10,1)
(48,25,1)
(31,41,1)
(21,23,1)
(17,30,1)
(12,20,1)
(22,50,1)
(38,4,1)
(40,5,1)
(14,19,1)
(32,21,1)
(15,4,1)
(10,34,1)
(45,39,1)
(38,36,1)
(23,29,1)
(31,37,1)
(9,12,1)
(19,18,1)
(4,28,1)
(15,32,1)
(28,1,1)
(30,48,1)
(42,22,1)
(30,4,1)
(29,17,1)
(46,42,1)
(12,31,1)
(50,44,1)
(45,51,1)
(41,45,1)
(29,49,1)
(34,47,1)
(38,49,1)
(44,40,1)
(47,4,1)
(14,18,1)
(15,49,1)
(31,29,2)
(18,29,2)
(15,49,2)
(44,4,2)
(31,41,2)
(27,47,2)
(9,12,2)
(32,29,2)
(42,50,2)
(50,12,2)
(14,18,2)
(44,12,2)
(12,31,2)
(31,37,2)
(12,20,2)
(14,29,2)
(38,36,2)
(30,4,2)
(15,4,2)
(42,12,2)
(17,30,2)
(44,49,2)
(15,29,2)
(5,12,2)
(22,12,2)
(38,49,2)
(45,29,2)
(30,47,2)
(21,29,2)
(41,29,2)
(51,29,2)
(53,29,2)
(20,38,2)
(45,39,2)
(38,29,2)
(34,47,2)
(19,29,2)
(49,47,2)
(24,12,2)
(23,29,2)
(41,45,2)
(18,15,2)
(10,47,2)
(20,29,2)
(12,29,2)
(38,4,2)
(40,12,2)
(50,44,2)
(17,47,2)
(25,47,2)
(7,12,2)
(48,47,2)
-----------------------------------
(0,)
(1,data)
(2,if(globalReturnsTrueOrFalse()
(3,result)
(4,data = 0)
(5,data)
(6,)
(7,"data value is too large to perform arithmetic safely.")
(8,)
(9,result)
(10,2)
(11,result)
(12,abs((long)
(13,)
(14,printUnsignedLine(result)
(15,data * data)
(16,)
(17,fscanf (stdin, "%u", &data)
(18,result = data * data)
(19,result)
(20,abs((long)
(21,data)
(22,result)
(23,result)
(24,printLine("data value is too large to perform arithmetic safely.")
(25,"%u")
(26,)
(27,stdin)
(28,0)
(29,globalReturnsTrueOrFalse()
(30,&data)
(31,(long)
(32,data)
(33,if (abs((long)
(34,data)
(35,)
(36,long)
(37,long)
(38,(long)
(39,double)
(40,data)
(41,sqrt((double)
(42,printUnsignedLine(result)
(43,if(globalReturnsTrueOrFalse()
(44,data * data)
(45,(double)
(46,RET)
(47,globalReturnsTrueOrFalse()
(48,data)
(49,data = 2)
(50,result = data * data)
(51,UINT_MAX)
(52,)
(53,data)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^