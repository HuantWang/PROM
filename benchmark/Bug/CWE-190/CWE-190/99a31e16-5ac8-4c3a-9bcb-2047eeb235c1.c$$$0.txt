-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_postinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_postinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_max_postinc_15_bad()
CWE190_Integer_Overflow__int_max_postinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(12,7,0)
(1,18,0)
(19,7,0)
(28,26,0)
(22,16,0)
(12,16,0)
(0,26,0)
(15,17,0)
(8,16,0)
(31,26,0)
(27,1,0)
(14,7,0)
(19,8,0)
(24,18,0)
(8,7,0)
(30,2,0)
(29,8,0)
(23,18,0)
(20,8,0)
(12,2,0)
(33,16,0)
(4,26,0)
(6,17,0)
(7,18,0)
(3,18,0)
(13,0,0)
(34,2,0)
(10,12,0)
(8,2,0)
(16,26,0)
(25,18,0)
(32,19,0)
(2,17,0)
(11,17,0)
(9,26,0)
(12,10,1)
(5,31,1)
(35,2,1)
(2,34,1)
(8,2,1)
(22,33,1)
(27,5,1)
(21,24,1)
(34,30,1)
(24,1,1)
(8,16,1)
(12,2,1)
(12,16,1)
(21,23,1)
(16,22,1)
(32,8,1)
(10,5,1)
(33,35,1)
(23,19,1)
(28,16,1)
(31,0,1)
(1,27,1)
(20,12,1)
(8,29,1)
(5,28,1)
(0,13,1)
(29,20,1)
(19,8,1)
(19,32,1)
(13,35,1)
(31,35,2)
(16,35,2)
(8,5,2)
(12,5,2)
(10,5,2)
(28,35,2)
(32,5,2)
(13,35,2)
(0,35,2)
(1,5,2)
(27,5,2)
(8,2,2)
(33,35,2)
(20,5,2)
(12,2,2)
(19,5,2)
(24,5,2)
(8,16,2)
(23,5,2)
(29,5,2)
(12,16,2)
(19,8,2)
(22,35,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,printLine("Benign, fixed string")
(2,data = 0)
(3,case 7:)
(4,case 6:)
(5,7)
(6,switch(6)
(7,)
(8,result = data)
(9,default:)
(10,data)
(11,switch(7)
(12,data++)
(13,"Benign, fixed string")
(14,result)
(15,data)
(16,data = INT_MAX)
(17,)
(18,)
(19,printIntLine(result)
(20,result)
(21,RET)
(22,INT_MAX)
(23,break;)
(24,break;)
(25,default:)
(26,)
(27,"Benign, fixed string")
(28,break;)
(29,data)
(30,data)
(31,break;)
(32,result)
(33,data)
(34,0)
(35,6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^