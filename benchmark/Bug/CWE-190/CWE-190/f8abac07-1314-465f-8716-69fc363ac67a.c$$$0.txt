-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            ++data;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_12_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,46,0)
(34,25,0)
(1,13,0)
(23,4,0)
(46,23,0)
(27,23,0)
(43,45,0)
(33,34,0)
(28,1,0)
(46,43,0)
(37,43,0)
(6,23,0)
(9,43,0)
(39,45,0)
(41,45,0)
(46,34,0)
(8,37,0)
(32,7,0)
(33,43,0)
(1,43,0)
(24,1,0)
(3,6,0)
(12,43,0)
(35,22,0)
(15,42,0)
(22,29,0)
(28,13,0)
(37,13,0)
(42,38,0)
(11,42,0)
(5,46,0)
(0,28,0)
(33,23,0)
(17,9,0)
(18,43,0)
(14,1,0)
(36,34,0)
(1,34,0)
(6,46,0)
(7,34,0)
(40,33,0)
(26,13,0)
(37,34,0)
(10,19,0)
(16,45,0)
(44,34,0)
(42,9,0)
(9,42,0)
(20,7,0)
(7,43,0)
(37,8,1)
(8,7,1)
(1,43,1)
(43,18,1)
(28,0,1)
(9,17,1)
(37,34,1)
(15,11,1)
(30,28,1)
(44,36,1)
(42,9,1)
(28,1,1)
(22,35,1)
(18,12,1)
(11,31,1)
(35,7,1)
(6,46,1)
(34,44,1)
(3,46,1)
(31,43,1)
(9,43,1)
(1,14,1)
(5,33,1)
(6,3,1)
(7,20,1)
(46,21,1)
(32,2,1)
(30,22,1)
(40,2,1)
(46,43,1)
(2,34,1)
(21,5,1)
(7,34,1)
(14,24,1)
(46,34,1)
(20,32,1)
(33,40,1)
(0,1,1)
(37,43,1)
(17,15,1)
(24,37,1)
(36,31,1)
(7,43,1)
(1,34,1)
(2,42,1)
(33,34,1)
(33,43,1)
(30,6,1)
(34,31,2)
(33,43,2)
(15,31,2)
(9,43,2)
(37,43,2)
(17,31,2)
(46,34,2)
(37,7,2)
(42,31,2)
(5,2,2)
(7,34,2)
(28,7,2)
(32,2,2)
(9,31,2)
(40,2,2)
(6,46,2)
(42,9,2)
(28,1,2)
(37,34,2)
(33,34,2)
(8,7,2)
(3,2,2)
(0,7,2)
(20,2,2)
(1,7,2)
(36,31,2)
(14,7,2)
(6,2,2)
(44,31,2)
(1,43,2)
(1,34,2)
(33,2,2)
(7,43,2)
(11,31,2)
(46,43,2)
(35,7,2)
(22,7,2)
(46,2,2)
(21,2,2)
(24,7,2)
(7,2,2)
-----------------------------------
(0,result)
(1,result = data)
(2,globalReturnsTrueOrFalse()
(3,result)
(4,)
(5,result)
(6,printIntLine(result)
(7,data < SHRT_MAX)
(8,data)
(9,&data)
(10,if (data < SHRT_MAX)
(11,stdin)
(12,data)
(13,)
(14,data)
(15,"%hd")
(16,data)
(17,data)
(18,0)
(19,)
(20,SHRT_MAX)
(21,data)
(22,printLine("data value is too large to perform arithmetic safely.")
(23,)
(24,result)
(25,)
(26,result)
(27,result)
(28,printIntLine(result)
(29,)
(30,RET)
(31,globalReturnsTrueOrFalse()
(32,data)
(33,++data)
(34,data = 2)
(35,"data value is too large to perform arithmetic safely.")
(36,data)
(37,++data)
(38,)
(39,if(globalReturnsTrueOrFalse()
(40,data)
(41,if(globalReturnsTrueOrFalse()
(42,fscanf (stdin, "%hd", &data)
(43,data = 0)
(44,2)
(45,)
(46,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^