-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_rand_multiply_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,56,60,62,66,67,71,73
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
53,54
53,55
64,65
64,66
-----guardedBy-----
55,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_34_bad(){    short data;    CWE190_Integer_Overflow__short_rand_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_34_bad()
CWE190_Integer_Overflow__short_rand_multiply_34_bad
{    short data;    CWE190_Integer_Overflow__short_rand_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_multiply_34_unionType
CWE190_Integer_Overflow__short_rand_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,6,0)
(30,1,0)
(3,8,0)
(22,20,0)
(31,19,0)
(17,12,0)
(1,12,0)
(13,34,0)
(24,10,0)
(7,8,0)
(10,12,0)
(16,25,0)
(2,10,0)
(5,35,0)
(15,12,0)
(32,17,0)
(12,1,0)
(25,0,0)
(6,22,0)
(14,35,0)
(23,8,0)
(21,8,0)
(12,19,0)
(35,23,0)
(6,8,0)
(10,0,0)
(29,23,0)
(28,19,0)
(22,9,0)
(0,34,0)
(4,17,0)
(9,22,0)
(27,6,0)
(19,8,0)
(22,6,0)
(20,22,0)
(0,10,0)
(36,1,0)
(26,7,0)
(18,7,0)
(25,34,0)
(33,0,0)
(27,7,1)
(23,29,1)
(2,24,1)
(22,20,1)
(1,30,1)
(24,33,1)
(20,27,1)
(16,0,1)
(11,25,1)
(26,18,1)
(4,12,1)
(7,26,1)
(22,9,1)
(10,2,1)
(12,1,1)
(17,32,1)
(11,17,1)
(6,22,1)
(0,10,1)
(35,5,1)
(15,23,1)
(36,15,1)
(10,12,1)
(23,6,1)
(25,16,1)
(17,12,1)
(29,35,1)
(14,6,1)
(5,14,1)
(32,4,1)
(33,17,1)
(30,36,1)
(25,0,1)
(25,17,2)
(2,17,2)
(23,6,2)
(6,22,2)
(25,0,2)
(10,12,2)
(16,17,2)
(12,1,2)
(24,17,2)
(33,17,2)
(22,9,2)
(0,10,2)
(22,20,2)
(17,12,2)
(10,17,2)
(0,17,2)
-----------------------------------
(0,result = data * 2)
(1,myUnion.unionSecond)
(2,2)
(3,myUnion)
(4,data)
(5,unionFirst)
(6,data = (short)
(7,data = 0)
(8,)
(9,short)
(10,data * 2)
(11,RET)
(12,data = myUnion.unionSecond)
(13,result)
(14,myUnion)
(15,data)
(16,result)
(17,data > 0)
(18,data)
(19,)
(20,RAND32()
(21,data)
(22,(short)
(23,myUnion.unionFirst = data)
(24,data)
(25,printIntLine(result)
(26,0)
(27,data)
(28,if(data > 0)
(29,data)
(30,unionSecond)
(31,data)
(32,0)
(33,result)
(34,)
(35,myUnion.unionFirst)
(36,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^