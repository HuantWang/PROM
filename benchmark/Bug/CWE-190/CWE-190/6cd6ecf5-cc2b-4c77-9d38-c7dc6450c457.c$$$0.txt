-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(37,41,0)
(33,31,0)
(27,32,0)
(4,23,0)
(21,31,0)
(36,15,0)
(23,4,0)
(25,32,0)
(14,31,0)
(10,38,0)
(23,38,0)
(28,38,0)
(29,32,0)
(28,41,0)
(3,35,0)
(26,34,0)
(1,32,0)
(12,33,0)
(10,41,0)
(9,28,0)
(34,6,0)
(39,23,0)
(11,38,0)
(5,21,0)
(17,28,0)
(16,6,0)
(22,33,0)
(4,40,0)
(35,41,0)
(18,10,0)
(8,34,0)
(30,32,0)
(41,0,0)
(13,31,0)
(15,6,0)
(24,6,0)
(19,4,0)
(20,38,0)
(7,4,0)
(35,28,0)
(38,32,0)
(7,34,1)
(26,6,1)
(19,7,1)
(28,9,1)
(24,38,1)
(21,31,1)
(13,14,1)
(39,19,1)
(22,12,1)
(6,16,1)
(2,33,1)
(10,38,1)
(10,18,1)
(35,3,1)
(26,15,1)
(33,31,1)
(15,36,1)
(4,23,1)
(15,6,1)
(23,39,1)
(23,38,1)
(28,38,1)
(18,33,1)
(36,4,1)
(12,31,1)
(9,17,1)
(16,24,1)
(38,20,1)
(33,22,1)
(5,35,1)
(31,13,1)
(21,5,1)
(12,21,1)
(20,11,1)
(14,34,1)
(3,28,1)
(35,28,1)
(17,10,1)
(34,6,1)
(8,26,1)
(34,8,1)
(4,34,2)
(18,33,2)
(33,33,2)
(39,34,2)
(10,33,2)
(33,31,2)
(22,33,2)
(35,33,2)
(9,33,2)
(10,38,2)
(23,34,2)
(17,33,2)
(8,34,2)
(7,34,2)
(19,34,2)
(3,33,2)
(34,6,2)
(28,38,2)
(36,34,2)
(5,33,2)
(21,33,2)
(12,33,2)
(28,33,2)
(35,28,2)
(15,6,2)
(21,31,2)
(23,38,2)
(34,34,2)
(4,23,2)
(15,34,2)
(26,34,2)
-----------------------------------
(0,)
(1,for(j = 0; j < 1; j++)
(2,RET)
(3,result)
(4,fscanf (stdin, "%hd", &data)
(5,j)
(6,i = 0)
(7,stdin)
(8,1)
(9,data)
(10,++data)
(11,data)
(12,j)
(13,0)
(14,j)
(15,i++)
(16,0)
(17,result)
(18,data)
(19,"%hd")
(20,0)
(21,j++)
(22,1)
(23,&data)
(24,i)
(25,j)
(26,i)
(27,i)
(28,result = data)
(29,data)
(30,for(i = 0; i < 1; i++)
(31,j = 0)
(32,)
(33,j < 1)
(34,i < 1)
(35,printIntLine(result)
(36,i)
(37,result)
(38,data = 0)
(39,data)
(40,)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^