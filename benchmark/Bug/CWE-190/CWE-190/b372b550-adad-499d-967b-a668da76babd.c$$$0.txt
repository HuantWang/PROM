-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_14_bad()
{
    unsigned int data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_14_bad(){    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_14_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_14_bad
{    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(27,0,0)
(20,29,0)
(26,21,0)
(0,11,0)
(8,22,0)
(4,2,0)
(31,2,0)
(6,0,0)
(16,11,0)
(1,12,0)
(2,14,0)
(3,14,0)
(19,12,0)
(27,2,0)
(5,14,0)
(10,29,0)
(13,22,0)
(22,9,0)
(21,0,0)
(24,27,0)
(21,11,0)
(0,27,0)
(23,17,0)
(9,7,0)
(25,27,0)
(15,9,0)
(27,9,0)
(22,2,0)
(18,9,0)
(30,14,0)
(0,27,1)
(24,6,1)
(8,12,1)
(6,22,1)
(25,24,1)
(22,9,1)
(21,26,1)
(15,18,1)
(20,10,1)
(27,2,1)
(12,19,1)
(27,9,1)
(22,2,1)
(13,8,1)
(2,4,1)
(26,0,1)
(28,22,1)
(29,20,1)
(9,15,1)
(18,29,1)
(21,0,1)
(28,21,1)
(4,31,1)
(27,25,1)
(28,12,1)
(1,29,1)
(1,9,1)
(22,13,1)
(10,2,1)
(19,1,1)
(25,22,2)
(15,29,2)
(13,12,2)
(9,29,2)
(22,12,2)
(27,2,2)
(22,9,2)
(8,12,2)
(21,22,2)
(27,9,2)
(21,0,2)
(26,22,2)
(22,2,2)
(24,22,2)
(0,27,2)
(18,29,2)
(6,22,2)
(0,22,2)
(27,22,2)
-----------------------------------
(0,result = data * 2)
(1,globalFive)
(2,data = 0)
(3,if(globalFive==5)
(4,0)
(5,data)
(6,result)
(7,)
(8,data)
(9,data = UINT_MAX)
(10,globalFive)
(11,)
(12,globalFive==5)
(13,0)
(14,)
(15,UINT_MAX)
(16,result)
(17,)
(18,data)
(19,5)
(20,5)
(21,printUnsignedLine(result)
(22,data > 0)
(23,if(data > 0)
(24,data)
(25,2)
(26,result)
(27,data * 2)
(28,RET)
(29,globalFive==5)
(30,if(globalFive==5)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^