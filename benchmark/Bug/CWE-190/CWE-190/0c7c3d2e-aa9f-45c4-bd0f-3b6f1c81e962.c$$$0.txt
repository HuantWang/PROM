-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_10_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,27,0)
(24,25,0)
(12,28,0)
(0,24,0)
(23,20,0)
(7,0,0)
(29,3,0)
(6,14,0)
(2,15,0)
(28,5,0)
(1,15,0)
(4,14,0)
(9,5,0)
(5,27,0)
(26,25,0)
(8,28,0)
(22,24,0)
(10,27,0)
(27,15,0)
(14,27,0)
(21,15,0)
(19,3,0)
(24,3,0)
(3,27,0)
(3,24,0)
(5,28,0)
(0,25,0)
(28,17,0)
(13,0,1)
(14,6,1)
(0,24,1)
(5,27,1)
(4,11,1)
(11,28,1)
(14,27,1)
(6,4,1)
(29,19,1)
(5,9,1)
(13,14,1)
(13,11,1)
(27,10,1)
(0,7,1)
(3,27,1)
(12,8,1)
(28,5,1)
(7,24,1)
(11,18,1)
(22,14,1)
(9,12,1)
(18,27,1)
(10,16,1)
(8,18,1)
(24,3,1)
(3,29,1)
(19,22,1)
(7,14,2)
(19,14,2)
(14,27,2)
(29,14,2)
(12,18,2)
(14,11,2)
(5,18,2)
(3,27,2)
(6,11,2)
(28,18,2)
(22,14,2)
(9,18,2)
(24,14,2)
(28,5,2)
(3,14,2)
(4,11,2)
(0,24,2)
(24,3,2)
(0,14,2)
(5,27,2)
(8,18,2)
-----------------------------------
(0,printIntLine(result)
(1,if(globalTrue)
(2,data)
(3,data * 2)
(4,data)
(5,&data)
(6,0)
(7,result)
(8,stdin)
(9,data)
(10,0)
(11,globalTrue)
(12,"%d")
(13,RET)
(14,data > 0)
(15,)
(16,data)
(17,)
(18,globalTrue)
(19,data)
(20,)
(21,if(globalTrue)
(22,result)
(23,if(data > 0)
(24,result = data * 2)
(25,)
(26,result)
(27,data = 0)
(28,fscanf(stdin, "%d", &data)
(29,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^