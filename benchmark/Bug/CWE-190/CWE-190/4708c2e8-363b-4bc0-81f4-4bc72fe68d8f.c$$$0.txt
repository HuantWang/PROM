-----label-----
1
-----code-----
static void badSink(char data)
{
    if(badStatic)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
15,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
-----nextToken-----
2,4,6,8,12,18,21,23,26,30,32
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
badStatic
badStatic
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,14,0)
(11,13,0)
(10,1,0)
(1,13,0)
(13,0,0)
(5,13,0)
(9,1,0)
(4,13,0)
(7,5,0)
(3,11,0)
(5,14,0)
(11,1,0)
(12,8,0)
(5,7,1)
(7,6,1)
(1,14,1)
(3,1,1)
(2,11,1)
(9,5,1)
(1,10,1)
(5,14,1)
(2,6,1)
(11,3,1)
(10,9,1)
(11,1,1)
(9,6,2)
(5,14,2)
(7,6,2)
(11,6,2)
(1,14,2)
(11,1,2)
(1,6,2)
(5,6,2)
(10,6,2)
(3,6,2)
-----------------------------------
(0,)
(1,result = data)
(2,RET)
(3,result)
(4,result)
(5,data++)
(6,badStatic)
(7,data)
(8,)
(9,result)
(10,data)
(11,printHexCharLine(result)
(12,if(badStatic)
(13,)
(14,char data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^