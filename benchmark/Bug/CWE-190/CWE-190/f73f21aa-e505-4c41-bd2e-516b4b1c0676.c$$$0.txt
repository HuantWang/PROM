-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_06_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,32,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
30,31
30,32
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_06_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_06_bad()
CWE190_Integer_Overflow__int_rand_square_06_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,22,0)
(22,4,0)
(8,4,0)
(23,7,0)
(26,10,0)
(21,9,0)
(13,22,0)
(0,22,0)
(16,14,0)
(24,7,0)
(10,9,0)
(23,15,0)
(5,3,0)
(11,23,0)
(19,9,0)
(2,10,0)
(7,10,0)
(7,15,0)
(12,14,0)
(27,4,0)
(9,6,0)
(18,3,0)
(15,20,0)
(9,21,0)
(10,7,0)
(1,4,0)
(17,15,0)
(9,21,1)
(23,11,1)
(19,3,1)
(21,19,1)
(5,22,1)
(12,9,1)
(10,9,1)
(16,12,1)
(25,23,1)
(24,14,1)
(0,13,1)
(25,14,1)
(3,18,1)
(2,24,1)
(18,5,1)
(11,7,1)
(26,2,1)
(14,16,1)
(12,3,1)
(10,26,1)
(23,7,1)
(22,0,1)
(10,22,1)
(7,10,1)
(10,22,2)
(7,14,2)
(7,10,2)
(11,14,2)
(23,14,2)
(19,3,2)
(10,9,2)
(9,21,2)
(2,14,2)
(23,7,2)
(24,14,2)
(9,3,2)
(10,14,2)
(21,3,2)
(26,14,2)
-----------------------------------
(0,0)
(1,data)
(2,data)
(3,STATIC_CONST_FIVE==5)
(4,)
(5,STATIC_CONST_FIVE)
(6,)
(7,result = data * data)
(8,if(STATIC_CONST_FIVE==5)
(9,data = RAND32()
(10,data * data)
(11,result)
(12,STATIC_CONST_FIVE)
(13,data)
(14,STATIC_CONST_FIVE==5)
(15,)
(16,5)
(17,result)
(18,5)
(19,data)
(20,)
(21,RAND32()
(22,data = 0)
(23,printIntLine(result)
(24,result)
(25,RET)
(26,data)
(27,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^