-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,48,52,54,58,60
-----computeFrom-----
12,13
12,14
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_31_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_31_bad()
CWE190_Integer_Overflow__int_fscanf_square_31_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,24,0)
(24,0,0)
(13,14,0)
(8,19,0)
(3,17,0)
(15,14,0)
(22,13,0)
(14,27,0)
(12,2,0)
(11,2,0)
(26,13,0)
(6,19,0)
(21,0,0)
(7,21,0)
(2,27,0)
(10,24,0)
(13,2,0)
(10,22,0)
(9,0,0)
(28,27,0)
(24,10,0)
(5,14,0)
(1,22,0)
(19,27,0)
(17,19,0)
(17,14,0)
(4,13,0)
(0,2,0)
(25,10,0)
(23,22,0)
(19,17,0)
(16,10,0)
(22,2,0)
(20,24,0)
(23,1,1)
(14,15,1)
(19,17,1)
(16,20,1)
(1,13,1)
(20,22,1)
(15,5,1)
(22,23,1)
(25,16,1)
(3,6,1)
(21,24,1)
(26,4,1)
(13,26,1)
(10,25,1)
(13,14,1)
(4,19,1)
(17,14,1)
(10,22,1)
(18,21,1)
(22,13,1)
(7,24,1)
(6,8,1)
(24,10,1)
(21,7,1)
(17,3,1)
(8,14,1)
(22,13,2)
(19,17,2)
(21,24,2)
(10,22,2)
(17,14,2)
(24,10,2)
(13,14,2)
-----------------------------------
(0,)
(1,data)
(2,)
(3,data)
(4,dataCopy)
(5,data)
(6,"%d")
(7,result)
(8,stdin)
(9,result)
(10,data * data)
(11,data)
(12,dataCopy)
(13,dataCopy = data)
(14,data = 0)
(15,0)
(16,data)
(17,&data)
(18,RET)
(19,fscanf(stdin, "%d", &data)
(20,result)
(21,printIntLine(result)
(22,data = dataCopy)
(23,dataCopy)
(24,result = data * data)
(25,data)
(26,data)
(27,)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^