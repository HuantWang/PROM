-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            char result = data + 1;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,52,56,58,63,65,69,71,75,76,80,82,87,88
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
61,62
61,63
73,74
73,75
-----guardedBy-----
63,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_12_bad()
CWE190_Integer_Overflow__char_fscanf_add_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(0,36,0)
(22,8,0)
(12,11,0)
(8,27,0)
(25,38,0)
(36,38,0)
(38,36,0)
(18,8,0)
(36,21,0)
(30,19,0)
(27,41,0)
(39,17,0)
(44,3,0)
(43,28,0)
(9,4,0)
(46,27,0)
(3,36,0)
(11,19,0)
(26,42,0)
(23,7,0)
(14,23,0)
(37,20,0)
(20,2,0)
(4,17,0)
(38,27,0)
(21,24,0)
(33,11,0)
(4,23,0)
(19,28,0)
(19,11,0)
(45,29,0)
(5,23,0)
(16,42,0)
(8,17,0)
(40,43,0)
(23,4,0)
(3,21,0)
(13,42,0)
(43,19,0)
(6,17,0)
(11,27,0)
(32,38,0)
(11,17,0)
(10,21,0)
(17,42,0)
(38,17,0)
(15,28,0)
(31,27,0)
(39,6,1)
(30,8,1)
(35,23,1)
(1,3,1)
(31,46,1)
(43,40,1)
(18,22,1)
(14,34,1)
(38,27,1)
(22,35,1)
(33,30,1)
(1,20,1)
(17,39,1)
(27,31,1)
(19,11,1)
(11,12,1)
(9,5,1)
(4,9,1)
(37,8,1)
(32,25,1)
(34,17,1)
(25,0,1)
(5,14,1)
(8,17,1)
(1,43,1)
(8,18,1)
(44,36,1)
(4,17,1)
(12,33,1)
(38,17,1)
(8,27,1)
(23,4,1)
(11,27,1)
(38,32,1)
(3,36,1)
(46,34,1)
(3,44,1)
(40,19,1)
(0,35,1)
(11,17,1)
(35,27,1)
(36,38,1)
(43,19,1)
(20,37,1)
(11,27,2)
(9,34,2)
(19,8,2)
(46,34,2)
(36,38,2)
(4,17,2)
(8,35,2)
(38,27,2)
(3,35,2)
(33,8,2)
(40,8,2)
(31,34,2)
(22,35,2)
(20,8,2)
(18,35,2)
(11,8,2)
(8,17,2)
(43,19,2)
(19,11,2)
(23,4,2)
(23,34,2)
(43,8,2)
(5,34,2)
(37,8,2)
(27,34,2)
(11,17,2)
(36,35,2)
(12,8,2)
(44,35,2)
(4,34,2)
(32,35,2)
(25,35,2)
(3,36,2)
(38,35,2)
(30,8,2)
(8,27,2)
(0,35,2)
(14,34,2)
(38,17,2)
-----------------------------------
(0,result)
(1,RET)
(2,)
(3,printHexCharLine(result)
(4,&data)
(5,"%c")
(6,data)
(7,)
(8,data < CHAR_MAX)
(9,data)
(10,result)
(11,data + 1)
(12,1)
(13,if(globalReturnsTrueOrFalse()
(14,stdin)
(15,result)
(16,data)
(17,data = \\\' \\\')
(18,CHAR_MAX)
(19,result = data + 1)
(20,printLine("data value is too large to perform arithmetic safely.")
(21,)
(22,data)
(23,fscanf (stdin, "%c", &data)
(24,)
(25,data)
(26,if(globalReturnsTrueOrFalse()
(27,data = 2)
(28,)
(29,)
(30,result)
(31,2)
(32,1)
(33,data)
(34,globalReturnsTrueOrFalse()
(35,globalReturnsTrueOrFalse()
(36,result = data + 1)
(37,"data value is too large to perform arithmetic safely.")
(38,data + 1)
(39,\\\' \\\')
(40,result)
(41,)
(42,)
(43,printHexCharLine(result)
(44,result)
(45,if (data < CHAR_MAX)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^