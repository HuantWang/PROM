-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            data++;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_12_bad()
CWE190_Integer_Overflow__char_max_postinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(37,2,0)
(27,1,0)
(20,37,0)
(1,35,0)
(27,2,0)
(24,11,0)
(21,2,0)
(2,34,0)
(36,2,0)
(10,25,0)
(13,33,0)
(19,2,0)
(31,9,0)
(25,2,0)
(23,0,0)
(11,9,0)
(27,4,0)
(37,1,0)
(5,43,0)
(17,27,0)
(16,37,0)
(32,4,0)
(0,25,0)
(33,37,0)
(6,26,0)
(38,25,0)
(30,1,0)
(44,4,0)
(29,7,0)
(43,2,0)
(37,4,0)
(4,3,0)
(42,9,0)
(8,11,0)
(7,40,0)
(25,4,0)
(33,1,0)
(39,9,0)
(43,4,0)
(21,26,0)
(28,43,0)
(25,26,0)
(15,21,0)
(41,14,0)
(21,4,0)
(0,26,0)
(12,33,1)
(32,18,1)
(4,44,1)
(28,22,1)
(15,43,1)
(21,2,1)
(22,2,1)
(11,8,1)
(21,4,1)
(33,13,1)
(25,4,1)
(10,21,1)
(25,38,1)
(37,2,1)
(16,27,1)
(2,36,1)
(29,43,1)
(43,4,1)
(43,2,1)
(5,28,1)
(25,2,1)
(23,25,1)
(18,11,1)
(12,0,1)
(27,4,1)
(0,23,1)
(43,5,1)
(27,17,1)
(8,24,1)
(7,29,1)
(36,19,1)
(27,2,1)
(17,22,1)
(13,37,1)
(37,20,1)
(33,37,1)
(20,16,1)
(44,32,1)
(19,18,1)
(38,10,1)
(21,15,1)
(0,25,1)
(22,4,1)
(37,4,1)
(12,7,1)
(17,22,2)
(36,18,2)
(28,22,2)
(5,22,2)
(27,2,2)
(44,18,2)
(37,22,2)
(19,18,2)
(32,18,2)
(16,22,2)
(25,43,2)
(43,4,2)
(21,2,2)
(33,37,2)
(4,18,2)
(27,22,2)
(27,4,2)
(37,4,2)
(38,43,2)
(21,43,2)
(37,2,2)
(2,18,2)
(15,43,2)
(21,4,2)
(0,25,2)
(43,22,2)
(43,2,2)
(29,43,2)
(13,22,2)
(25,2,2)
(7,43,2)
(33,22,2)
(20,22,2)
(0,43,2)
(23,43,2)
(25,4,2)
(10,43,2)
-----------------------------------
(0,printHexCharLine(result)
(1,)
(2,data = 2)
(3,)
(4,data = CHAR_MAX)
(5,CHAR_MAX)
(6,result)
(7,printLine("data value is too large to perform arithmetic safely.")
(8,\\\' \\\')
(9,)
(10,result)
(11,data = \\\' \\\')
(12,RET)
(13,result)
(14,)
(15,data)
(16,result)
(17,data)
(18,globalReturnsTrueOrFalse()
(19,data)
(20,data)
(21,data++)
(22,globalReturnsTrueOrFalse()
(23,result)
(24,data)
(25,result = data)
(26,)
(27,data++)
(28,data)
(29,"data value is too large to perform arithmetic safely.")
(30,result)
(31,data)
(32,data)
(33,printHexCharLine(result)
(34,)
(35,)
(36,2)
(37,result = data)
(38,data)
(39,if(globalReturnsTrueOrFalse()
(40,)
(41,if (data < CHAR_MAX)
(42,if(globalReturnsTrueOrFalse()
(43,data < CHAR_MAX)
(44,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^