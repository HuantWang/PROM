-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_03_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(17,8,0)
(13,11,0)
(9,13,0)
(4,28,0)
(13,1,0)
(12,0,0)
(29,1,0)
(1,6,0)
(3,30,0)
(7,30,0)
(27,0,0)
(30,14,0)
(10,22,0)
(15,14,0)
(11,13,0)
(2,7,0)
(11,28,0)
(7,1,0)
(20,28,0)
(23,14,0)
(25,7,0)
(19,14,0)
(24,8,0)
(31,13,0)
(21,30,0)
(5,1,0)
(13,30,0)
(26,11,0)
(18,4,0)
(4,11,0)
(16,7,1)
(24,17,1)
(18,11,1)
(29,8,1)
(26,7,1)
(4,11,1)
(11,13,1)
(16,4,1)
(16,0,1)
(17,30,1)
(5,29,1)
(0,12,1)
(13,9,1)
(31,26,1)
(21,3,1)
(30,21,1)
(27,1,1)
(27,8,1)
(8,24,1)
(13,1,1)
(2,0,1)
(7,1,1)
(9,31,1)
(1,5,1)
(7,30,1)
(12,27,1)
(7,25,1)
(13,30,1)
(25,2,1)
(4,18,1)
(11,7,2)
(7,1,2)
(1,8,2)
(7,0,2)
(31,7,2)
(26,7,2)
(25,0,2)
(4,7,2)
(11,13,2)
(29,8,2)
(13,1,2)
(2,0,2)
(5,8,2)
(13,30,2)
(7,30,2)
(4,11,2)
(9,7,2)
(18,7,2)
(13,7,2)
-----------------------------------
(0,5==5)
(1,data = UINT_MAX)
(2,data)
(3,data)
(4,printUnsignedLine(result)
(5,UINT_MAX)
(6,)
(7,data > 0)
(8,5==5)
(9,2)
(10,if(data > 0)
(11,result = data * 2)
(12,5)
(13,data * 2)
(14,)
(15,if(5==5)
(16,RET)
(17,5)
(18,result)
(19,data)
(20,result)
(21,0)
(22,)
(23,if(5==5)
(24,5)
(25,0)
(26,result)
(27,5)
(28,)
(29,data)
(30,data = 0)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^