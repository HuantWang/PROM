-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    {
        char dataCopy = data;
        char data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_31_bad()
CWE190_Integer_Overflow__char_max_square_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,22,0)
(13,11,0)
(20,24,0)
(8,7,0)
(3,10,0)
(1,4,0)
(22,26,0)
(2,6,0)
(6,10,0)
(24,11,0)
(0,12,0)
(19,6,0)
(25,7,0)
(14,10,0)
(11,4,0)
(10,12,0)
(12,26,0)
(4,22,0)
(11,2,0)
(10,22,0)
(2,11,0)
(18,26,0)
(7,26,0)
(16,2,0)
(6,22,0)
(17,2,0)
(24,4,0)
(15,22,0)
(5,12,0)
(21,6,0)
(5,0,1)
(3,12,1)
(2,16,1)
(6,21,1)
(11,2,1)
(13,6,1)
(20,11,1)
(14,3,1)
(23,24,1)
(21,19,1)
(7,8,1)
(10,12,1)
(24,20,1)
(2,6,1)
(12,5,1)
(19,10,1)
(0,7,1)
(17,13,1)
(6,10,1)
(16,17,1)
(8,25,1)
(10,14,1)
(24,11,1)
(11,2,2)
(2,6,2)
(24,11,2)
(10,12,2)
(6,10,2)
-----------------------------------
(0,data)
(1,result)
(2,data * data)
(3,dataCopy)
(4,)
(5,CHAR_MAX)
(6,data = dataCopy)
(7,data = ' ')
(8,' ')
(9,dataCopy)
(10,dataCopy = data)
(11,result = data * data)
(12,data = CHAR_MAX)
(13,result)
(14,data)
(15,data)
(16,data)
(17,data)
(18,data)
(19,data)
(20,result)
(21,dataCopy)
(22,)
(23,RET)
(24,printHexCharLine(result)
(25,data)
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^