-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_07_bad()
{
    short data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_07_bad(){    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_07_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_07_bad
{    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,3,0)
(3,12,0)
(2,12,0)
(18,30,0)
(8,6,0)
(14,22,0)
(18,13,0)
(15,27,0)
(22,32,0)
(9,12,0)
(17,28,0)
(31,6,0)
(24,28,0)
(21,9,0)
(1,5,0)
(0,13,0)
(33,16,0)
(5,30,0)
(9,22,0)
(5,18,0)
(13,12,0)
(29,30,0)
(22,9,0)
(12,28,0)
(20,28,0)
(26,18,0)
(25,22,0)
(19,12,0)
(13,18,0)
(11,16,0)
(4,3,0)
(23,13,0)
(25,14,1)
(3,4,1)
(21,25,1)
(10,5,1)
(9,21,1)
(4,7,1)
(11,33,1)
(1,18,1)
(33,12,1)
(10,3,1)
(5,18,1)
(14,16,1)
(9,12,1)
(13,12,1)
(16,11,1)
(22,9,1)
(13,0,1)
(26,3,1)
(0,23,1)
(5,1,1)
(8,22,1)
(10,6,1)
(3,12,1)
(6,31,1)
(31,8,1)
(23,26,1)
(19,2,1)
(18,13,1)
(7,6,1)
(12,19,1)
(8,16,1)
(25,16,2)
(3,12,2)
(22,16,2)
(0,3,2)
(18,13,2)
(5,3,2)
(5,18,2)
(9,12,2)
(22,9,2)
(13,12,2)
(4,6,2)
(3,6,2)
(1,3,2)
(14,16,2)
(26,3,2)
(9,16,2)
(13,3,2)
(21,16,2)
(7,6,2)
(23,3,2)
(18,3,2)
-----------------------------------
(0,2)
(1,result)
(2,data)
(3,data > 0)
(4,0)
(5,printIntLine(result)
(6,staticFive==5)
(7,data)
(8,staticFive)
(9,&data)
(10,RET)
(11,5)
(12,data = 0)
(13,data * 2)
(14,stdin)
(15,if(data > 0)
(16,staticFive==5)
(17,if(staticFive==5)
(18,result = data * 2)
(19,0)
(20,if(staticFive==5)
(21,data)
(22,fscanf (stdin, "%hd", &data)
(23,data)
(24,data)
(25,"%hd")
(26,result)
(27,)
(28,)
(29,result)
(30,)
(31,5)
(32,)
(33,staticFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^