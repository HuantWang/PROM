-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_16_bad()
{
    int64_t data;
    data = 0LL;
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
26,27
29,30
30,31
33,34
33,35
35,36
35,37
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,9,11,15,16,18,23,27,28,31,32,34,39,40,45,47,51,52,56,58,59
-----computeFrom-----
13,14
13,15
21,22
21,23
37,38
37,39
49,50
49,51
-----guardedBy-----
39,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_16_bad(){    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_16_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_16_bad
{    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
-----joern-----
(28,5,0)
(0,15,0)
(26,5,0)
(29,26,0)
(18,14,0)
(19,7,0)
(5,7,0)
(5,13,0)
(11,2,0)
(26,11,0)
(11,26,0)
(6,14,0)
(13,5,0)
(27,2,0)
(25,13,0)
(17,10,0)
(3,14,0)
(16,14,0)
(13,20,0)
(13,25,0)
(21,26,0)
(9,11,0)
(15,11,0)
(22,1,0)
(20,13,0)
(10,5,0)
(8,1,0)
(15,2,0)
(12,10,0)
(10,17,1)
(11,26,1)
(13,20,1)
(26,29,1)
(10,5,1)
(17,12,1)
(24,8,1)
(21,9,1)
(28,4,1)
(5,13,1)
(15,11,1)
(26,5,1)
(4,3,1)
(9,10,1)
(15,0,1)
(12,23,1)
(8,15,1)
(13,25,1)
(8,10,1)
(20,28,1)
(29,21,1)
(24,23,1)
(23,4,1)
(19,5,1)
(0,11,1)
(23,19,1)
(29,10,2)
(13,4,2)
(0,10,2)
(15,10,2)
(11,10,2)
(10,5,2)
(10,23,2)
(21,10,2)
(5,4,2)
(12,23,2)
(11,26,2)
(19,4,2)
(28,4,2)
(26,5,2)
(15,11,2)
(17,23,2)
(20,4,2)
(9,10,2)
(5,13,2)
(13,20,2)
(13,25,2)
(8,23,2)
(26,10,2)
-----------------------------------
(0,result)
(1,)
(2,)
(3,L)
(4,1)
(5,data = (int64_t)
(6,while(1)
(7,)
(8,break;)
(9,result)
(10,data > 0)
(11,result = data * 2)
(12,data)
(13,(int64_t)
(14,)
(15,printLongLongLine(result)
(16,while(1)
(17,0)
(18,data)
(19,break;)
(20,RAND64()
(21,data)
(22,if(data > 0)
(23,1)
(24,RET)
(25,int64_t)
(26,data * 2)
(27,result)
(28,data)
(29,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^