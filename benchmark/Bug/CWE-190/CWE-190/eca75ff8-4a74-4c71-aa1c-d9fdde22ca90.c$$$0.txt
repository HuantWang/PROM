-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_14_bad()
CWE190_Integer_Overflow__char_rand_postinc_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(29,3,0)
(25,3,0)
(17,26,0)
(11,5,0)
(0,26,0)
(30,24,0)
(7,24,0)
(29,6,0)
(2,3,0)
(27,21,0)
(21,18,0)
(24,7,0)
(1,6,0)
(19,6,0)
(24,21,0)
(8,5,0)
(6,5,0)
(2,29,0)
(1,3,0)
(29,21,0)
(24,30,0)
(15,1,0)
(21,24,0)
(1,21,0)
(4,22,0)
(14,29,0)
(12,29,0)
(3,10,0)
(9,5,0)
(20,6,0)
(13,2,0)
(28,22,0)
(7,27,1)
(24,7,1)
(0,17,1)
(22,28,1)
(20,19,1)
(21,24,1)
(14,12,1)
(6,20,1)
(16,2,1)
(13,29,1)
(15,22,1)
(27,26,1)
(24,30,1)
(29,21,1)
(26,0,1)
(12,1,1)
(2,29,1)
(4,26,1)
(16,22,1)
(4,21,1)
(1,6,1)
(28,4,1)
(1,21,1)
(29,14,1)
(1,15,1)
(17,6,1)
(29,6,1)
(2,13,1)
(2,22,2)
(1,6,2)
(1,22,2)
(7,26,2)
(29,6,2)
(21,26,2)
(15,22,2)
(12,22,2)
(1,21,2)
(27,26,2)
(24,7,2)
(24,26,2)
(29,21,2)
(21,24,2)
(29,22,2)
(2,29,2)
(14,22,2)
(13,22,2)
(24,30,2)
-----------------------------------
(0,5)
(1,data++)
(2,printHexCharLine(result)
(3,)
(4,globalFive)
(5,)
(6,data = \' \')
(7,RAND32()
(8,data)
(9,if(globalFive==5)
(10,)
(11,if(globalFive==5)
(12,result)
(13,result)
(14,data)
(15,data)
(16,RET)
(17,globalFive)
(18,)
(19,data)
(20,' ')
(21,data = (char)
(22,globalFive==5)
(23,data = ' ')
(24,(char)
(25,result)
(26,globalFive==5)
(27,data)
(28,5)
(29,result = data)
(30,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^