-----label-----
1
-----code-----
static void badSink(char data)
{
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
-----nextToken-----
2,4,6,8,13,15,19,21,25,27
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,3,0)
(7,1,0)
(10,2,0)
(9,2,0)
(7,5,0)
(2,5,0)
(6,7,0)
(0,5,0)
(2,4,0)
(5,2,0)
(11,1,0)
(5,1,0)
(2,10,1)
(9,0,1)
(7,6,1)
(2,4,1)
(6,5,1)
(5,2,1)
(7,5,1)
(8,7,1)
(10,9,1)
(7,5,2)
(5,2,2)
(2,4,2)
-----------------------------------
(0,result)
(1,)
(2,data * data)
(3,)
(4,char data)
(5,result = data * data)
(6,result)
(7,printHexCharLine(result)
(8,RET)
(9,data)
(10,data)
(11,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^