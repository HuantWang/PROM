-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,68,72,74
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_17_bad()
CWE190_Integer_Overflow__short_max_square_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,0,0)
(4,8,0)
(25,36,0)
(7,22,0)
(9,0,0)
(15,36,0)
(11,1,0)
(32,20,0)
(30,22,0)
(1,38,0)
(26,36,0)
(38,33,0)
(17,33,0)
(14,0,0)
(12,28,0)
(29,12,0)
(10,30,0)
(3,36,0)
(8,0,0)
(23,2,0)
(33,12,0)
(38,6,0)
(33,2,0)
(33,38,0)
(34,6,0)
(16,30,0)
(2,36,0)
(6,18,0)
(27,22,0)
(35,2,0)
(13,36,0)
(20,22,0)
(39,12,0)
(5,9,0)
(24,38,0)
(21,9,0)
(1,6,0)
(19,33,0)
(9,0,1)
(1,38,1)
(9,21,1)
(32,12,1)
(12,39,1)
(2,23,1)
(17,24,1)
(5,0,1)
(22,27,1)
(27,7,1)
(33,2,1)
(7,2,1)
(37,9,1)
(19,17,1)
(30,22,1)
(33,19,1)
(20,32,1)
(21,5,1)
(0,14,1)
(4,1,1)
(10,16,1)
(14,31,1)
(11,38,1)
(29,30,1)
(24,9,1)
(16,20,1)
(33,12,1)
(8,0,1)
(31,30,1)
(16,22,1)
(38,33,1)
(39,29,1)
(8,4,1)
(23,35,1)
(1,11,1)
(20,22,1)
(5,8,1)
(30,10,1)
(17,9,2)
(30,22,2)
(30,30,2)
(38,9,2)
(20,30,2)
(5,9,2)
(38,33,2)
(1,38,2)
(20,22,2)
(9,9,2)
(29,30,2)
(33,12,2)
(32,30,2)
(4,9,2)
(21,9,2)
(1,9,2)
(8,9,2)
(8,0,2)
(12,30,2)
(19,9,2)
(39,30,2)
(33,9,2)
(24,9,2)
(33,2,2)
(16,30,2)
(11,9,2)
(10,30,2)
(9,0,2)
-----------------------------------
(0,j = 0)
(1,printIntLine(result)
(2,data = 0)
(3,for(i = 0; i < 1; i++)
(4,j)
(5,j)
(6,)
(7,i)
(8,j++)
(9,j < 1)
(10,1)
(11,result)
(12,data = SHRT_MAX)
(13,data)
(14,0)
(15,i)
(16,i)
(17,data)
(18,)
(19,data)
(20,i++)
(21,1)
(22,i = 0)
(23,0)
(24,result)
(25,j)
(26,for(j = 0; j < 1; j++)
(27,0)
(28,)
(29,data)
(30,i < 1)
(31,j)
(32,i)
(33,data * data)
(34,result)
(35,data)
(36,)
(37,RET)
(38,result = data * data)
(39,SHRT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^