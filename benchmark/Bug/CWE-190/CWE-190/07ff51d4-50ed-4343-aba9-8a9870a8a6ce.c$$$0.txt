-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_03_bad()
CWE190_Integer_Overflow__short_rand_square_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,0,0)
(2,21,0)
(17,9,0)
(11,0,0)
(22,26,0)
(17,2,0)
(25,27,0)
(18,28,0)
(4,0,0)
(2,8,0)
(13,4,0)
(6,13,0)
(4,13,0)
(10,28,0)
(4,17,0)
(1,27,0)
(24,17,0)
(23,13,0)
(2,17,0)
(13,3,0)
(7,4,0)
(0,28,0)
(15,26,0)
(6,3,0)
(8,2,0)
(12,4,0)
(21,2,0)
(16,28,0)
(3,14,0)
(19,6,0)
(5,3,0)
(1,0,1)
(20,6,1)
(26,22,1)
(29,11,1)
(13,4,1)
(15,17,1)
(24,27,1)
(4,17,1)
(23,26,1)
(2,21,1)
(2,8,1)
(4,0,1)
(25,1,1)
(22,15,1)
(27,25,1)
(8,24,1)
(15,27,1)
(6,19,1)
(17,2,1)
(4,12,1)
(7,23,1)
(6,13,1)
(20,26,1)
(0,29,1)
(12,7,1)
(19,13,1)
(12,26,2)
(13,4,2)
(6,26,2)
(17,27,2)
(2,21,2)
(2,27,2)
(23,26,2)
(7,26,2)
(24,27,2)
(4,26,2)
(6,13,2)
(2,8,2)
(8,27,2)
(4,17,2)
(19,26,2)
(4,0,2)
(13,26,2)
(17,2,2)
-----------------------------------
(0,data = 0)
(1,5)
(2,(short)
(3,)
(4,data * data)
(5,result)
(6,printIntLine(result)
(7,data)
(8,RAND32()
(9,)
(10,if(5==5)
(11,data)
(12,data)
(13,result = data * data)
(14,)
(15,5)
(16,if(5==5)
(17,data = (short)
(18,data)
(19,result)
(20,RET)
(21,short)
(22,5)
(23,result)
(24,data)
(25,5)
(26,5==5)
(27,5==5)
(28,)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^