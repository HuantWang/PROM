-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_preinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_preinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_preinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_max_preinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(42,20,0)
(8,31,0)
(33,17,0)
(1,17,0)
(38,36,0)
(5,16,0)
(2,42,0)
(30,31,0)
(15,27,0)
(16,38,0)
(36,10,0)
(25,33,0)
(32,38,0)
(19,3,0)
(3,31,0)
(6,42,0)
(41,24,0)
(27,31,0)
(0,13,0)
(29,12,0)
(21,6,0)
(34,42,0)
(35,17,0)
(3,42,0)
(27,36,0)
(23,42,0)
(37,38,0)
(34,31,0)
(13,34,0)
(4,17,0)
(9,34,0)
(40,29,0)
(28,22,0)
(6,24,0)
(38,42,0)
(34,24,0)
(39,36,0)
(11,34,0)
(31,18,0)
(27,42,0)
(13,24,0)
(38,31,0)
(16,36,0)
(26,33,0)
(6,31,0)
(43,3,0)
(34,42,1)
(27,15,1)
(13,34,1)
(44,31,1)
(2,14,1)
(26,25,1)
(16,38,1)
(6,31,1)
(3,43,1)
(0,34,1)
(6,42,1)
(14,33,1)
(34,9,1)
(11,6,1)
(7,29,1)
(38,37,1)
(29,40,1)
(8,30,1)
(23,2,1)
(19,44,1)
(21,3,1)
(9,11,1)
(44,42,1)
(7,13,1)
(3,31,1)
(33,26,1)
(16,5,1)
(7,16,1)
(27,42,1)
(13,0,1)
(42,23,1)
(5,38,1)
(6,21,1)
(38,31,1)
(37,32,1)
(30,14,1)
(40,3,1)
(38,42,1)
(27,31,1)
(34,31,1)
(15,44,1)
(43,19,1)
(31,8,1)
(32,27,1)
(3,42,1)
(8,14,2)
(15,44,2)
(38,31,2)
(43,44,2)
(16,38,2)
(3,44,2)
(11,3,2)
(27,44,2)
(5,44,2)
(34,31,2)
(30,14,2)
(6,42,2)
(23,14,2)
(19,44,2)
(42,14,2)
(6,3,2)
(31,14,2)
(40,3,2)
(38,42,2)
(29,3,2)
(27,31,2)
(21,3,2)
(16,44,2)
(37,44,2)
(6,31,2)
(38,44,2)
(9,3,2)
(34,42,2)
(32,44,2)
(27,42,2)
(13,34,2)
(0,3,2)
(3,42,2)
(2,14,2)
(13,3,2)
(34,3,2)
(3,31,2)
-----------------------------------
(0,result)
(1,if(globalReturnsTrueOrFalse()
(2,data)
(3,data < UINT_MAX)
(4,data)
(5,result)
(6,++data)
(7,RET)
(8,2)
(9,data)
(10,)
(11,result)
(12,)
(13,printUnsignedLine(result)
(14,globalReturnsTrueOrFalse()
(15,data)
(16,printUnsignedLine(result)
(17,)
(18,)
(19,data)
(20,)
(21,data)
(22,)
(23,UINT_MAX)
(24,)
(25,data)
(26,0)
(27,++data)
(28,if (data < UINT_MAX)
(29,printLine("data value is too large to perform arithmetic safely.")
(30,data)
(31,data = 2)
(32,result)
(33,data = 0)
(34,result = data)
(35,if(globalReturnsTrueOrFalse()
(36,)
(37,data)
(38,result = data)
(39,result)
(40,"data value is too large to perform arithmetic safely.")
(41,result)
(42,data = UINT_MAX)
(43,UINT_MAX)
(44,globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^