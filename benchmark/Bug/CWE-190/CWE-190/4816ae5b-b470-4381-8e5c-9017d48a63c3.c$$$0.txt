-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_postinc_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
52,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,55,58,60,63,67,69
-----computeFrom-----
18,19
18,20
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_postinc_34_bad(){    int data;    CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_postinc_34_bad()
CWE190_Integer_Overflow__int_fscanf_postinc_34_bad
{    int data;    CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType
CWE190_Integer_Overflow__int_fscanf_postinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,7,0)
(16,26,0)
(3,7,0)
(30,27,0)
(19,10,0)
(28,6,0)
(28,26,0)
(31,27,0)
(13,16,0)
(17,16,0)
(25,23,0)
(8,3,0)
(18,23,0)
(15,18,0)
(0,26,0)
(10,28,0)
(11,7,0)
(12,28,0)
(32,18,0)
(23,26,0)
(5,6,0)
(27,18,0)
(22,32,0)
(20,6,0)
(7,23,0)
(3,27,0)
(18,32,0)
(24,26,0)
(1,16,0)
(6,26,0)
(21,10,0)
(2,32,0)
(9,1,0)
(11,18,0)
(16,1,0)
(1,6,0)
(4,11,0)
(27,7,0)
(21,16,1)
(27,30,1)
(2,15,1)
(6,20,1)
(11,18,1)
(14,3,1)
(1,6,1)
(12,10,1)
(4,18,1)
(28,6,1)
(17,13,1)
(13,6,1)
(22,2,1)
(9,17,1)
(8,27,1)
(20,5,1)
(1,9,1)
(19,21,1)
(3,8,1)
(16,1,1)
(31,11,1)
(30,31,1)
(27,18,1)
(11,4,1)
(10,19,1)
(18,32,1)
(15,28,1)
(28,12,1)
(3,27,1)
(32,22,1)
(18,32,2)
(27,18,2)
(16,1,2)
(1,6,2)
(28,6,2)
(11,18,2)
(3,27,2)
-----------------------------------
(0,data)
(1,&data)
(2,myUnion)
(3,printIntLine(result)
(4,data)
(5,data)
(6,data = 0)
(7,)
(8,result)
(9,data)
(10,myUnion.unionFirst)
(11,data++)
(12,data)
(13,stdin)
(14,RET)
(15,data)
(16,fscanf(stdin, "%d", &data)
(17,"%d")
(18,data = myUnion.unionSecond)
(19,unionFirst)
(20,0)
(21,myUnion)
(22,unionSecond)
(23,)
(24,myUnion)
(25,data)
(26,)
(27,result = data)
(28,myUnion.unionFirst = data)
(29,result)
(30,data)
(31,result)
(32,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^