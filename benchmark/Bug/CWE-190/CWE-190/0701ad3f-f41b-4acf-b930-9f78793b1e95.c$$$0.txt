-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            ++data;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(32,34,0)
(1,5,0)
(43,37,0)
(31,44,0)
(37,5,0)
(17,46,0)
(20,11,0)
(46,14,0)
(39,37,0)
(14,40,0)
(46,30,0)
(29,5,0)
(27,41,0)
(13,32,0)
(14,46,0)
(32,40,0)
(6,5,0)
(43,41,0)
(21,5,0)
(45,43,0)
(11,5,0)
(40,16,0)
(24,23,0)
(15,11,0)
(10,16,0)
(4,34,0)
(35,46,0)
(32,5,0)
(3,37,0)
(42,1,0)
(20,34,0)
(41,38,0)
(11,40,0)
(28,20,0)
(1,41,0)
(37,40,0)
(29,40,0)
(0,29,0)
(1,40,0)
(11,34,0)
(7,29,0)
(22,11,0)
(37,41,0)
(36,31,0)
(12,16,0)
(33,16,0)
(9,40,0)
(2,14,0)
(26,40,0)
(5,18,0)
(43,37,1)
(0,7,1)
(22,15,1)
(35,17,1)
(31,36,1)
(20,28,1)
(14,2,1)
(42,8,1)
(19,20,1)
(6,25,1)
(43,45,1)
(19,31,1)
(11,5,1)
(21,6,1)
(37,40,1)
(32,5,1)
(1,5,1)
(7,8,1)
(9,26,1)
(29,40,1)
(46,14,1)
(40,9,1)
(8,46,1)
(32,40,1)
(11,40,1)
(28,11,1)
(37,5,1)
(15,32,1)
(2,35,1)
(45,37,1)
(8,5,1)
(36,29,1)
(5,21,1)
(14,40,1)
(1,40,1)
(20,11,1)
(1,42,1)
(29,0,1)
(3,1,1)
(17,25,1)
(37,39,1)
(11,22,1)
(13,29,1)
(32,13,1)
(39,3,1)
(25,40,1)
(19,43,1)
(29,5,1)
(7,8,2)
(46,25,2)
(29,8,2)
(2,25,2)
(31,29,2)
(29,40,2)
(15,29,2)
(17,25,2)
(37,40,2)
(5,25,2)
(11,40,2)
(1,5,2)
(28,29,2)
(36,29,2)
(39,8,2)
(14,40,2)
(13,29,2)
(42,8,2)
(21,25,2)
(22,29,2)
(32,40,2)
(37,8,2)
(14,25,2)
(29,5,2)
(43,37,2)
(6,25,2)
(0,8,2)
(1,40,2)
(46,14,2)
(32,5,2)
(37,5,2)
(3,8,2)
(35,25,2)
(45,8,2)
(11,29,2)
(32,29,2)
(43,8,2)
(20,11,2)
(20,29,2)
(11,5,2)
(1,8,2)
-----------------------------------
(0,UINT_MAX)
(1,++data)
(2,data)
(3,result)
(4,result)
(5,data = 2)
(6,data)
(7,data)
(8,globalReturnsTrueOrFalse()
(9,0)
(10,if(globalReturnsTrueOrFalse()
(11,result = data)
(12,data)
(13,data)
(14,&data)
(15,result)
(16,)
(17,stdin)
(18,)
(19,RET)
(20,printUnsignedLine(result)
(21,2)
(22,data)
(23,)
(24,if (data < UINT_MAX)
(25,globalReturnsTrueOrFalse()
(26,data)
(27,result)
(28,result)
(29,data < UINT_MAX)
(30,)
(31,printLine("data value is too large to perform arithmetic safely.")
(32,++data)
(33,if(globalReturnsTrueOrFalse()
(34,)
(35,"%u")
(36,"data value is too large to perform arithmetic safely.")
(37,result = data)
(38,)
(39,data)
(40,data = 0)
(41,)
(42,data)
(43,printUnsignedLine(result)
(44,)
(45,result)
(46,fscanf (stdin, "%u", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^