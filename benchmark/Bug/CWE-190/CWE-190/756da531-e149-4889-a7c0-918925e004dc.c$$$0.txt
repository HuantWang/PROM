-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_max_preinc_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
48,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,51,54,56,59,63,65
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_34_bad(){    char data;    CWE190_Integer_Overflow__char_max_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_34_bad()
CWE190_Integer_Overflow__char_max_preinc_34_bad
{    char data;    CWE190_Integer_Overflow__char_max_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_max_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_preinc_34_unionType
CWE190_Integer_Overflow__char_max_preinc_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,4,0)
(27,28,0)
(24,6,0)
(7,4,0)
(29,12,0)
(21,9,0)
(25,12,0)
(17,27,0)
(13,9,0)
(28,27,0)
(21,13,0)
(4,21,0)
(22,13,0)
(6,28,0)
(6,12,0)
(23,9,0)
(30,23,0)
(18,26,0)
(8,9,0)
(14,27,0)
(2,29,0)
(1,26,0)
(28,23,0)
(20,21,0)
(19,28,0)
(26,9,0)
(0,28,0)
(3,9,0)
(5,13,0)
(0,12,0)
(29,6,0)
(11,0,0)
(16,6,0)
(12,23,0)
(2,6,1)
(6,16,1)
(14,17,1)
(13,5,1)
(27,14,1)
(20,4,1)
(5,22,1)
(28,27,1)
(10,7,1)
(26,1,1)
(11,28,1)
(24,0,1)
(21,20,1)
(19,21,1)
(17,19,1)
(22,26,1)
(1,18,1)
(29,2,1)
(0,28,1)
(4,10,1)
(16,24,1)
(0,11,1)
(29,6,1)
(6,28,1)
(15,29,1)
(7,13,1)
(21,13,1)
(29,6,2)
(21,13,2)
(28,27,2)
(0,28,2)
(6,28,2)
-----------------------------------
(0,++data)
(1,' ')
(2,result)
(3,myUnion)
(4,myUnion.unionFirst)
(5,CHAR_MAX)
(6,result = data)
(7,myUnion)
(8,data)
(9,)
(10,unionFirst)
(11,data)
(12,)
(13,data = CHAR_MAX)
(14,unionSecond)
(15,RET)
(16,data)
(17,myUnion)
(18,data)
(19,data)
(20,data)
(21,myUnion.unionFirst = data)
(22,data)
(23,)
(24,result)
(25,result)
(26,data = ' ')
(27,myUnion.unionSecond)
(28,data = myUnion.unionSecond)
(29,printHexCharLine(result)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^