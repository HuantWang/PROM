-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_05_bad()
{
    char data;
    data = ' ';
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_05_bad(){    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_05_bad()
CWE190_Integer_Overflow__char_max_multiply_05_bad
{    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,3,0)
(15,2,0)
(14,22,0)
(21,23,0)
(7,2,0)
(5,22,0)
(17,3,0)
(8,2,0)
(4,27,0)
(14,23,0)
(6,23,0)
(22,3,0)
(24,3,0)
(22,14,0)
(19,13,0)
(13,8,0)
(22,8,0)
(6,14,0)
(28,2,0)
(16,8,0)
(3,0,0)
(11,14,0)
(10,13,0)
(1,8,0)
(9,6,0)
(20,22,0)
(22,5,1)
(13,8,1)
(9,14,1)
(18,6,1)
(11,13,1)
(12,25,1)
(22,8,1)
(20,11,1)
(6,14,1)
(25,8,1)
(14,22,1)
(17,25,1)
(18,13,1)
(5,20,1)
(10,19,1)
(24,17,1)
(13,3,1)
(18,12,1)
(1,16,1)
(12,3,1)
(22,3,1)
(8,1,1)
(3,24,1)
(6,9,1)
(13,10,1)
(19,12,1)
(24,25,2)
(20,13,2)
(13,8,2)
(13,12,2)
(19,12,2)
(9,13,2)
(10,12,2)
(13,3,2)
(22,8,2)
(5,13,2)
(22,13,2)
(6,14,2)
(6,13,2)
(14,22,2)
(14,13,2)
(17,25,2)
(3,25,2)
(22,3,2)
(11,13,2)
-----------------------------------
(0,)
(1,' ')
(2,)
(3,data = CHAR_MAX)
(4,if(data > 0)
(5,2)
(6,printHexCharLine(result)
(7,if(staticTrue)
(8,data = ' ')
(9,result)
(10,0)
(11,result)
(12,staticTrue)
(13,data > 0)
(14,result = data * 2)
(15,data)
(16,data)
(17,data)
(18,RET)
(19,data)
(20,data)
(21,result)
(22,data * 2)
(23,)
(24,CHAR_MAX)
(25,staticTrue)
(26,data = \' \')
(27,)
(28,if(staticTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^