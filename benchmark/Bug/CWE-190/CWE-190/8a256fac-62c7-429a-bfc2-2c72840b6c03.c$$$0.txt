-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_63b_badSink(char * dataPtr)
{
    char data = *dataPtr;
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
24,25
24,26
26,27
27,28
27,29
28,29
31,32
32,33
32,34
33,34
35,36
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,30,34,36
-----computeFrom-----
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_63b_badSink(char * dataPtr){    char data = *dataPtr;    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_add_63b_badSink(char * dataPtr)
CWE190_Integer_Overflow__char_rand_add_63b_badSink
char * dataPtr
char
* dataPtr
*
dataPtr
{    char data = *dataPtr;    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
char data = *dataPtr;
char data = *dataPtr;
char
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,16,0)
(4,7,0)
(3,12,0)
(16,8,0)
(8,12,0)
(7,4,0)
(5,8,0)
(1,5,0)
(10,9,0)
(4,0,0)
(7,12,0)
(15,16,0)
(11,4,0)
(13,7,0)
(6,9,0)
(5,16,0)
(16,9,0)
(9,7,0)
(2,8,0)
(4,0,1)
(11,13,1)
(6,10,1)
(16,9,1)
(5,16,1)
(1,16,1)
(4,11,1)
(9,6,1)
(15,7,1)
(7,4,1)
(9,7,1)
(10,15,1)
(14,5,1)
(5,1,1)
(4,0,2)
(7,4,2)
(5,16,2)
(16,9,2)
(9,7,2)
-----------------------------------
(0,char * dataPtr)
(1,result)
(2,result)
(3,data)
(4,*dataPtr)
(5,printHexCharLine(result)
(6,1)
(7,data = *dataPtr)
(8,)
(9,data + 1)
(10,data)
(11,dataPtr)
(12,)
(13,data)
(14,RET)
(15,result)
(16,result = data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^