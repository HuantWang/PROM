-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,26,29,34,36,40,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_10_bad()
CWE190_Integer_Overflow__int_rand_square_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,8,0)
(6,19,0)
(8,15,0)
(19,1,0)
(6,3,0)
(21,19,0)
(15,16,0)
(12,3,0)
(23,15,0)
(1,13,0)
(19,15,0)
(22,13,0)
(5,1,0)
(4,19,0)
(0,1,0)
(20,6,0)
(19,6,0)
(18,13,0)
(11,12,0)
(7,13,0)
(12,6,0)
(9,3,0)
(3,10,0)
(17,2,1)
(4,20,1)
(12,11,1)
(19,15,1)
(8,23,1)
(15,8,1)
(11,6,1)
(12,6,1)
(14,1,1)
(23,14,1)
(17,12,1)
(2,14,1)
(6,19,1)
(19,21,1)
(1,5,1)
(21,4,1)
(19,1,1)
(2,15,1)
(5,0,1)
(20,2,1)
(15,8,2)
(12,6,2)
(6,19,2)
(23,14,2)
(11,2,2)
(6,2,2)
(8,14,2)
(21,2,2)
(19,1,2)
(19,15,2)
(15,14,2)
(19,2,2)
(12,2,2)
(20,2,2)
(4,2,2)
-----------------------------------
(0,data)
(1,data = 0)
(2,globalTrue)
(3,)
(4,data)
(5,0)
(6,result = data * data)
(7,if(globalTrue)
(8,RAND32()
(9,result)
(10,)
(11,result)
(12,printIntLine(result)
(13,)
(14,globalTrue)
(15,data = RAND32()
(16,)
(17,RET)
(18,if(globalTrue)
(19,data * data)
(20,result)
(21,data)
(22,data)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^