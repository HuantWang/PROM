-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,48,52,54,58,60
-----computeFrom-----
12,13
12,14
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_31_bad()
CWE190_Integer_Overflow__short_fscanf_square_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,23,0)
(17,0,0)
(2,24,0)
(22,12,0)
(27,17,0)
(0,28,0)
(14,4,0)
(7,14,0)
(18,12,0)
(10,23,0)
(5,28,0)
(3,10,0)
(21,4,0)
(24,14,0)
(8,12,0)
(8,28,0)
(26,0,0)
(1,10,0)
(4,8,0)
(15,4,0)
(13,28,0)
(6,23,0)
(1,12,0)
(16,1,0)
(20,10,0)
(14,24,0)
(9,14,0)
(24,0,0)
(17,24,0)
(10,1,0)
(28,23,0)
(19,8,0)
(11,8,0)
(4,28,0)
(14,7,1)
(25,17,1)
(16,20,1)
(24,14,1)
(2,4,1)
(15,21,1)
(17,24,1)
(17,27,1)
(3,12,1)
(12,22,1)
(1,16,1)
(14,4,1)
(10,1,1)
(20,3,1)
(1,12,1)
(27,24,1)
(4,15,1)
(7,9,1)
(4,8,1)
(8,12,1)
(22,18,1)
(9,2,1)
(8,19,1)
(11,10,1)
(19,11,1)
(21,8,1)
(1,12,2)
(10,1,2)
(8,12,2)
(14,4,2)
(24,14,2)
(4,8,2)
(17,24,2)
-----------------------------------
(0,)
(1,&data)
(2,result)
(3,stdin)
(4,data = dataCopy)
(5,dataCopy)
(6,data)
(7,data)
(8,dataCopy = data)
(9,data)
(10,fscanf (stdin, "%hd", &data)
(11,dataCopy)
(12,data = 0)
(13,data)
(14,data * data)
(15,dataCopy)
(16,data)
(17,printIntLine(result)
(18,data)
(19,data)
(20,"%hd")
(21,data)
(22,0)
(23,)
(24,result = data * data)
(25,RET)
(26,result)
(27,result)
(28,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^