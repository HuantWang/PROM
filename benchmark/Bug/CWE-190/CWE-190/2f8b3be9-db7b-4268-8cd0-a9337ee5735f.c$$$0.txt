-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_add_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            short result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
57,59
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,48,52,54,59,61,65,67,71,72,76,78,83,84
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
57,58
57,59
69,70
69,71
-----guardedBy-----
59,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_add_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_max_add_12_bad()
CWE190_Integer_Overflow__short_max_add_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(38,34,0)
(27,15,0)
(31,34,0)
(11,2,0)
(35,19,0)
(12,9,0)
(33,40,0)
(21,6,0)
(20,19,0)
(25,44,0)
(12,15,0)
(17,9,0)
(17,24,0)
(13,24,0)
(9,26,0)
(18,17,0)
(24,17,0)
(32,17,0)
(10,23,0)
(5,29,0)
(15,11,0)
(7,11,0)
(39,19,0)
(15,12,0)
(1,4,0)
(6,34,0)
(6,9,0)
(16,44,0)
(28,12,0)
(40,4,0)
(0,10,0)
(7,15,0)
(40,24,0)
(22,9,0)
(24,4,0)
(44,19,0)
(17,34,0)
(30,12,0)
(8,9,0)
(37,7,0)
(3,6,0)
(36,11,0)
(12,34,0)
(34,42,0)
(41,44,1)
(3,21,1)
(10,0,1)
(14,40,1)
(40,24,1)
(44,25,1)
(27,43,1)
(34,38,1)
(7,15,1)
(38,31,1)
(13,6,1)
(6,9,1)
(30,27,1)
(14,10,1)
(28,30,1)
(7,37,1)
(15,12,1)
(17,9,1)
(21,43,1)
(12,9,1)
(37,15,1)
(6,3,1)
(43,9,1)
(24,17,1)
(12,28,1)
(25,16,1)
(9,8,1)
(6,34,1)
(14,7,1)
(43,34,1)
(33,24,1)
(22,41,1)
(0,6,1)
(17,32,1)
(18,13,1)
(8,22,1)
(32,18,1)
(17,34,1)
(31,41,1)
(12,34,1)
(40,33,1)
(10,6,2)
(6,43,2)
(34,41,2)
(17,9,2)
(22,41,2)
(13,6,2)
(18,6,2)
(15,43,2)
(8,41,2)
(7,15,2)
(17,6,2)
(3,43,2)
(12,9,2)
(40,6,2)
(33,6,2)
(31,41,2)
(17,34,2)
(27,43,2)
(24,6,2)
(12,34,2)
(12,43,2)
(30,43,2)
(37,43,2)
(32,6,2)
(24,17,2)
(15,12,2)
(9,41,2)
(7,43,2)
(40,24,2)
(0,6,2)
(21,43,2)
(6,34,2)
(38,41,2)
(6,9,2)
(28,43,2)
-----------------------------------
(0,"data value is too large to perform arithmetic safely.")
(1,result)
(2,)
(3,SHRT_MAX)
(4,)
(5,if (data < SHRT_MAX)
(6,data < SHRT_MAX)
(7,printIntLine(result)
(8,SHRT_MAX)
(9,data = SHRT_MAX)
(10,printLine("data value is too large to perform arithmetic safely.")
(11,)
(12,data + 1)
(13,result)
(14,RET)
(15,result = data + 1)
(16,data)
(17,data + 1)
(18,data)
(19,)
(20,if(globalReturnsTrueOrFalse()
(21,data)
(22,data)
(23,)
(24,result = data + 1)
(25,0)
(26,)
(27,result)
(28,1)
(29,)
(30,data)
(31,data)
(32,1)
(33,result)
(34,data = 2)
(35,if(globalReturnsTrueOrFalse()
(36,result)
(37,result)
(38,2)
(39,data)
(40,printIntLine(result)
(41,globalReturnsTrueOrFalse()
(42,)
(43,globalReturnsTrueOrFalse()
(44,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^