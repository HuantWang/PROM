-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_14_bad()
{
    int64_t data;
    data = 0LL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,39,41,45,47,51,53
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_14_bad(){    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_14_bad()
CWE190_Integer_Overflow__int64_t_max_square_14_bad
{    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,6,0)
(21,22,0)
(16,23,0)
(12,23,0)
(24,6,0)
(20,7,0)
(1,22,0)
(22,4,0)
(25,6,0)
(7,20,0)
(20,19,0)
(10,19,0)
(15,19,0)
(2,20,0)
(13,7,0)
(17,8,0)
(1,7,0)
(18,20,0)
(19,14,0)
(9,1,0)
(7,22,0)
(11,6,0)
(5,8,0)
(5,17,1)
(3,23,1)
(3,1,1)
(20,18,1)
(12,16,1)
(16,8,1)
(9,7,1)
(20,19,1)
(8,5,1)
(19,10,1)
(15,8,1)
(1,9,1)
(13,23,1)
(23,12,1)
(17,0,1)
(16,19,1)
(7,20,1)
(18,2,1)
(2,13,1)
(1,7,1)
(10,15,1)
(19,8,2)
(2,23,2)
(1,7,2)
(7,23,2)
(15,8,2)
(13,23,2)
(18,23,2)
(9,23,2)
(20,19,2)
(7,20,2)
(1,23,2)
(20,23,2)
(10,8,2)
-----------------------------------
(0,L)
(1,printLongLongLine(result)
(2,data)
(3,RET)
(4,)
(5,5)
(6,)
(7,result = data * data)
(8,globalFive==5)
(9,result)
(10,LLONG_MAX)
(11,if(globalFive==5)
(12,5)
(13,result)
(14,)
(15,data)
(16,globalFive)
(17,globalFive)
(18,data)
(19,data = LLONG_MAX)
(20,data * data)
(21,result)
(22,)
(23,globalFive==5)
(24,if(globalFive==5)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^