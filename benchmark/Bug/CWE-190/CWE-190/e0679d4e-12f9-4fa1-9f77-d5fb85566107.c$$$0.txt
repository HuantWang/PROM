-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_preinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
41,44
42,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
54,55
55,56
55,57
56,57
58,59
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,29,33,34,35,37,40,45,48,50,53,57,59,60,61,65,66,67
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_preinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_rand_preinc_15_bad()
CWE190_Integer_Overflow__int_rand_preinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(10,23,0)
(34,1,0)
(29,28,0)
(15,1,0)
(27,6,0)
(27,14,0)
(14,1,0)
(17,19,0)
(32,1,0)
(20,1,0)
(8,14,0)
(7,21,0)
(22,21,0)
(19,14,0)
(19,6,0)
(12,26,0)
(4,27,0)
(33,6,0)
(3,21,0)
(14,8,0)
(13,21,0)
(16,26,0)
(27,28,0)
(6,26,0)
(23,21,0)
(0,34,0)
(19,28,0)
(5,28,0)
(28,21,0)
(5,27,0)
(2,1,0)
(24,26,0)
(25,14,0)
(9,27,0)
(11,5,0)
(30,6,0)
(27,14,1)
(6,33,1)
(35,3,1)
(3,5,1)
(32,34,1)
(33,30,1)
(11,27,1)
(4,9,1)
(10,31,1)
(19,14,1)
(31,32,1)
(25,18,1)
(8,25,1)
(18,6,1)
(34,0,1)
(31,15,1)
(7,23,1)
(17,31,1)
(27,4,1)
(0,18,1)
(27,6,1)
(19,6,1)
(35,7,1)
(5,27,1)
(15,14,1)
(14,8,1)
(5,11,1)
(9,19,1)
(23,10,1)
(19,17,1)
(11,31,2)
(4,31,2)
(19,14,2)
(19,6,2)
(27,31,2)
(5,31,2)
(8,18,2)
(19,31,2)
(25,18,2)
(10,31,2)
(7,31,2)
(34,18,2)
(14,8,2)
(0,18,2)
(3,31,2)
(27,14,2)
(15,18,2)
(27,6,2)
(23,31,2)
(32,18,2)
(17,31,2)
(9,31,2)
(5,27,2)
(14,18,2)
-----------------------------------
(0,"Benign, fixed string")
(1,)
(2,case 6:)
(3,break;)
(4,data)
(5,printIntLine(result)
(6,data = 0)
(7,break;)
(8,RAND32()
(9,result)
(10,"Benign, fixed string")
(11,result)
(12,data)
(13,case 7:)
(14,data = RAND32()
(15,break;)
(16,switch(7)
(17,data)
(18,6)
(19,++data)
(20,default:)
(21,)
(22,default:)
(23,printLine("Benign, fixed string")
(24,switch(6)
(25,data)
(26,)
(27,result = data)
(28,)
(29,result)
(30,data)
(31,7)
(32,break;)
(33,0)
(34,printLine("Benign, fixed string")
(35,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^