-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
52,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,55,58,60,63,67,69
-----computeFrom-----
18,19
18,20
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_34_bad(){    int data;    CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_34_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_34_bad
{    int data;    CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType
CWE190_Integer_Overflow__int_fscanf_preinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(30,13,0)
(8,2,0)
(6,18,0)
(0,2,0)
(2,25,0)
(12,18,0)
(16,15,0)
(24,23,0)
(30,26,0)
(22,32,0)
(7,30,0)
(15,2,0)
(19,28,0)
(28,32,0)
(4,25,0)
(20,31,0)
(32,25,0)
(5,28,0)
(13,25,0)
(26,30,0)
(9,8,0)
(11,13,0)
(8,23,0)
(3,13,0)
(29,18,0)
(18,8,0)
(21,6,0)
(23,8,0)
(32,13,0)
(18,15,0)
(14,26,0)
(10,23,0)
(31,15,0)
(26,25,0)
(6,15,0)
(27,26,0)
(17,25,0)
(31,8,0)
(23,24,1)
(12,31,1)
(21,18,1)
(11,3,1)
(18,8,1)
(19,26,1)
(7,14,1)
(30,13,1)
(6,21,1)
(13,11,1)
(18,29,1)
(24,10,1)
(32,13,1)
(14,27,1)
(20,8,1)
(5,19,1)
(26,30,1)
(10,9,1)
(9,32,1)
(29,12,1)
(1,6,1)
(8,23,1)
(31,20,1)
(22,28,1)
(30,7,1)
(6,18,1)
(28,5,1)
(27,13,1)
(31,8,1)
(32,22,1)
(18,8,2)
(30,13,2)
(8,23,2)
(32,13,2)
(6,18,2)
(26,30,2)
(31,8,2)
-----------------------------------
(0,data)
(1,RET)
(2,)
(3,data)
(4,myUnion)
(5,unionFirst)
(6,printIntLine(result)
(7,data)
(8,data = myUnion.unionSecond)
(9,data)
(10,myUnion)
(11,0)
(12,result)
(13,data = 0)
(14,"%d")
(15,)
(16,result)
(17,data)
(18,result = data)
(19,myUnion)
(20,data)
(21,result)
(22,data)
(23,myUnion.unionSecond)
(24,unionSecond)
(25,)
(26,fscanf(stdin, "%d", &data)
(27,stdin)
(28,myUnion.unionFirst)
(29,data)
(30,&data)
(31,++data)
(32,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^