-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_add_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            int result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
67,68
67,69
67,70
68,69
69,70
71,72
72,73
72,74
73,74
74,75
74,76
76,77
76,78
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
91,93
92,93
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,65,66,70,75,77,81,82,86,88,93,95,99,101,105,106,110,112,117,118
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
63,64
63,65
79,80
79,81
91,92
91,93
103,104
103,105
-----guardedBy-----
38,54
93,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_add_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fgets_add_12_bad()
CWE190_Integer_Overflow__int_fgets_add_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(11,2,0)
(29,4,0)
(50,57,0)
(0,29,0)
(4,57,0)
(60,22,0)
(61,4,0)
(4,28,0)
(42,28,0)
(57,2,0)
(56,54,0)
(49,60,0)
(50,28,0)
(20,5,0)
(19,48,0)
(44,42,0)
(47,57,0)
(52,36,0)
(36,5,0)
(42,57,0)
(51,5,0)
(15,16,0)
(9,15,0)
(5,60,0)
(38,40,0)
(41,4,0)
(42,15,0)
(21,50,0)
(3,29,0)
(50,15,0)
(58,30,0)
(8,57,0)
(5,36,0)
(4,15,0)
(22,33,0)
(12,30,0)
(24,22,0)
(35,60,0)
(39,12,0)
(14,0,0)
(40,26,0)
(55,19,0)
(28,23,0)
(53,2,0)
(29,19,0)
(4,29,0)
(12,42,0)
(7,15,0)
(37,2,0)
(1,5,0)
(35,28,0)
(59,42,0)
(25,39,0)
(10,28,0)
(43,22,0)
(27,31,0)
(0,19,0)
(42,12,0)
(18,50,0)
(46,60,0)
(28,35,0)
(39,30,0)
(45,35,0)
(54,17,0)
(13,12,0)
(42,15,1)
(21,18,1)
(7,34,1)
(32,40,1)
(3,6,1)
(5,20,1)
(39,25,1)
(5,60,1)
(6,15,1)
(42,28,1)
(14,29,1)
(1,51,1)
(12,42,1)
(10,36,1)
(0,14,1)
(15,9,1)
(4,28,1)
(60,46,1)
(54,56,1)
(8,47,1)
(4,15,1)
(4,61,1)
(61,41,1)
(38,50,1)
(40,38,1)
(36,52,1)
(42,57,1)
(9,7,1)
(36,5,1)
(29,4,1)
(50,57,1)
(42,59,1)
(44,13,1)
(49,34,1)
(35,45,1)
(25,12,1)
(45,10,1)
(39,12,1)
(56,36,1)
(20,1,1)
(52,5,1)
(28,35,1)
(35,60,1)
(6,54,1)
(51,60,1)
(50,28,1)
(59,44,1)
(13,50,1)
(6,28,1)
(32,39,1)
(57,8,1)
(50,15,1)
(0,29,1)
(34,57,1)
(4,57,1)
(18,6,1)
(32,0,1)
(50,21,1)
(41,3,1)
(46,49,1)
(41,6,2)
(42,28,2)
(56,36,2)
(0,29,2)
(35,60,2)
(36,5,2)
(12,50,2)
(28,36,2)
(4,15,2)
(18,6,2)
(20,34,2)
(4,28,2)
(0,6,2)
(35,36,2)
(3,6,2)
(51,34,2)
(60,34,2)
(59,50,2)
(4,57,2)
(9,34,2)
(42,57,2)
(50,28,2)
(39,12,2)
(40,50,2)
(45,36,2)
(12,42,2)
(46,34,2)
(39,50,2)
(42,15,2)
(50,57,2)
(49,34,2)
(25,50,2)
(7,34,2)
(29,4,2)
(44,50,2)
(5,34,2)
(14,6,2)
(29,6,2)
(4,6,2)
(1,34,2)
(21,6,2)
(54,36,2)
(61,6,2)
(13,50,2)
(28,35,2)
(38,50,2)
(50,6,2)
(5,60,2)
(15,34,2)
(10,36,2)
(36,34,2)
(42,50,2)
(52,34,2)
(50,15,2)
-----------------------------------
(0,printIntLine(result)
(1,CHAR_ARRAY_SIZE)
(2,)
(3,result)
(4,data + 1)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,globalReturnsTrueOrFalse()
(7,data)
(8,0)
(9,2)
(10,data)
(11,data)
(12,result = data + 1)
(13,result)
(14,result)
(15,data = 2)
(16,)
(17,)
(18,data)
(19,)
(20,stdin)
(21,INT_MAX)
(22,)
(23,)
(24,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,result)
(26,)
(27,if (data < INT_MAX)
(28,data = atoi(inputBuffer)
(29,result = data + 1)
(30,)
(31,)
(32,RET)
(33,)
(34,globalReturnsTrueOrFalse()
(35,atoi(inputBuffer)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,if(globalReturnsTrueOrFalse()
(38,"data value is too large to perform arithmetic safely.")
(39,printIntLine(result)
(40,printLine("data value is too large to perform arithmetic safely.")
(41,data)
(42,data + 1)
(43,inputBuffer)
(44,data)
(45,inputBuffer)
(46,"")
(47,data)
(48,)
(49,inputBuffer)
(50,data < INT_MAX)
(51,inputBuffer)
(52,NULL)
(53,if(globalReturnsTrueOrFalse()
(54,printLine("fgets()
(55,result)
(56,"fgets()
(57,data = 0)
(58,result)
(59,1)
(60,inputBuffer[CHAR_ARRAY_SIZE] = "")
(61,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^