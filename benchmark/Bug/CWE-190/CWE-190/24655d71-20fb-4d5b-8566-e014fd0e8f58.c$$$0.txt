-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,30,34,36,40,41,45,47
-----computeFrom-----
12,13
12,14
27,28
27,29
38,39
38,40
-----guardedBy-----
29,40
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_01_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_01_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_01_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,1,0)
(19,6,0)
(5,15,0)
(22,13,0)
(4,20,0)
(9,1,0)
(18,13,0)
(13,22,0)
(16,15,0)
(1,0,0)
(10,22,0)
(8,5,0)
(18,6,0)
(13,6,0)
(15,0,0)
(20,1,0)
(23,15,0)
(21,18,0)
(2,1,0)
(11,0,0)
(5,1,0)
(12,22,0)
(15,5,0)
(7,20,0)
(14,0,0)
(17,13,0)
(18,21,1)
(18,13,1)
(10,17,1)
(21,13,1)
(22,1,1)
(20,4,1)
(12,10,1)
(22,12,1)
(13,22,1)
(7,15,1)
(8,23,1)
(16,1,1)
(3,18,1)
(15,5,1)
(23,16,1)
(3,20,1)
(17,20,1)
(4,7,1)
(5,1,1)
(1,9,1)
(9,2,1)
(20,1,1)
(5,8,1)
(17,20,2)
(22,1,2)
(21,20,2)
(18,13,2)
(13,20,2)
(13,22,2)
(22,20,2)
(10,20,2)
(20,1,2)
(15,5,2)
(12,20,2)
(5,1,2)
(18,20,2)
-----------------------------------
(0,)
(1,data = 0)
(2,data)
(3,RET)
(4,0)
(5,&data)
(6,)
(7,data)
(8,data)
(9,0)
(10,data)
(11,if(data > 0)
(12,2)
(13,result = data * 2)
(14,data)
(15,fscanf(stdin, "%d", &data)
(16,stdin)
(17,result)
(18,printIntLine(result)
(19,result)
(20,data > 0)
(21,result)
(22,data * 2)
(23,"%d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^