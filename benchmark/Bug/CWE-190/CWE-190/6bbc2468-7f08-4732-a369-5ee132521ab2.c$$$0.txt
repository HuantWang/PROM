-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    {
        char dataCopy = data;
        char data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,47,51,53,57,58,62,64
-----computeFrom-----
12,13
12,14
44,45
44,46
55,56
55,57
-----guardedBy-----
46,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_31_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,27,0)
(4,15,0)
(28,8,0)
(8,9,0)
(2,3,0)
(26,4,0)
(12,3,0)
(6,4,0)
(22,9,0)
(14,25,0)
(18,23,0)
(17,25,0)
(19,12,0)
(30,19,0)
(31,23,0)
(12,7,0)
(24,21,0)
(23,4,0)
(20,12,0)
(21,23,0)
(16,9,0)
(1,15,0)
(7,12,0)
(7,21,0)
(0,27,0)
(29,27,0)
(13,7,0)
(19,3,0)
(25,21,0)
(9,15,0)
(23,9,0)
(27,15,0)
(5,7,0)
(10,21,0)
(27,8,0)
(11,4,0)
(21,4,0)
(17,21,1)
(20,25,1)
(24,23,1)
(31,27,1)
(21,23,1)
(30,12,1)
(8,28,1)
(19,30,1)
(13,20,1)
(28,29,1)
(9,22,1)
(7,21,1)
(23,9,1)
(19,12,1)
(0,9,1)
(27,8,1)
(25,21,1)
(10,24,1)
(25,14,1)
(12,7,1)
(22,16,1)
(5,13,1)
(29,0,1)
(32,25,1)
(18,31,1)
(21,10,1)
(23,18,1)
(14,17,1)
(8,9,1)
(7,5,1)
(32,19,1)
(30,25,2)
(12,7,2)
(20,25,2)
(12,25,2)
(8,9,2)
(23,9,2)
(19,12,2)
(27,8,2)
(13,25,2)
(5,25,2)
(19,25,2)
(21,23,2)
(7,21,2)
(25,21,2)
(7,25,2)
-----------------------------------
(0,stdin)
(1,data)
(2,result)
(3,)
(4,)
(5,2)
(6,data)
(7,data * 2)
(8,&data)
(9,data = \\\' \\\')
(10,dataCopy)
(11,dataCopy)
(12,result = data * 2)
(13,data)
(14,0)
(15,)
(16,data)
(17,data)
(18,data)
(19,printHexCharLine(result)
(20,result)
(21,data = dataCopy)
(22,\\\' \\\')
(23,dataCopy = data)
(24,data)
(25,data > 0)
(26,if(data > 0)
(27,fscanf (stdin, "%c", &data)
(28,data)
(29,"%c")
(30,result)
(31,dataCopy)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^