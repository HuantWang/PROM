-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink(char dataArray[])
{
    /* copy data out of dataArray */
    char data = dataArray[2];
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,35,36,40,42
-----computeFrom-----
22,23
22,24
33,34
33,35
-----guardedBy-----
24,35
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink(char dataArray[]){    /* copy data out of dataArray */    char data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink(char dataArray[])
CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink
char dataArray[]
char
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    char data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data = dataArray[2];
char data = dataArray[2];
char
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,1,0)
(2,19,0)
(20,21,0)
(16,14,0)
(11,4,0)
(21,19,0)
(7,1,0)
(10,13,0)
(1,7,0)
(8,1,0)
(3,7,0)
(0,4,0)
(6,14,0)
(4,1,0)
(15,13,0)
(5,19,0)
(7,12,0)
(17,7,0)
(21,4,0)
(9,2,0)
(1,14,0)
(4,21,0)
(2,21,0)
(18,13,1)
(21,4,1)
(4,0,1)
(2,21,1)
(17,3,1)
(0,11,1)
(13,10,1)
(9,21,1)
(4,1,1)
(10,15,1)
(20,13,1)
(18,2,1)
(13,1,1)
(1,7,1)
(7,12,1)
(2,9,1)
(3,8,1)
(7,17,1)
(11,20,1)
(15,1,1)
(1,7,2)
(7,12,2)
(21,13,2)
(4,1,2)
(2,13,2)
(9,13,2)
(2,21,2)
(4,13,2)
(21,4,2)
(0,13,2)
(13,1,2)
(20,13,2)
(11,13,2)
-----------------------------------
(0,2)
(1,data = dataArray[2])
(2,printHexCharLine(result)
(3,dataArray)
(4,data * 2)
(5,result)
(6,data)
(7,dataArray[2])
(8,data)
(9,result)
(10,0)
(11,data)
(12,char dataArray[])
(13,data > 0)
(14,)
(15,data)
(16,if(data > 0)
(17,2)
(18,RET)
(19,)
(20,result)
(21,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^