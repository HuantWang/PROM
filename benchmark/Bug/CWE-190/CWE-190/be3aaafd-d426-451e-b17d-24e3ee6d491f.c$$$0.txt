-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,40,44,46
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_10_bad()
CWE190_Integer_Overflow__char_max_add_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(16,10,0)
(24,6,0)
(9,5,0)
(17,2,0)
(15,7,0)
(6,9,0)
(11,9,0)
(2,16,0)
(14,6,0)
(3,8,0)
(2,19,0)
(4,19,0)
(21,8,0)
(20,9,0)
(6,19,0)
(6,8,0)
(18,7,0)
(12,16,0)
(0,7,0)
(19,6,0)
(8,7,0)
(19,16,0)
(11,20,1)
(24,4,1)
(2,19,1)
(20,1,1)
(14,24,1)
(23,9,1)
(6,8,1)
(2,17,1)
(9,11,1)
(8,21,1)
(22,23,1)
(6,14,1)
(4,23,1)
(19,6,1)
(21,3,1)
(23,1,1)
(17,19,1)
(1,8,1)
(22,2,1)
(6,9,1)
(24,23,2)
(19,6,2)
(4,23,2)
(11,1,2)
(19,23,2)
(20,1,2)
(2,23,2)
(6,9,2)
(6,8,2)
(9,1,2)
(2,19,2)
(14,23,2)
(6,23,2)
(17,23,2)
-----------------------------------
(0,data)
(1,globalTrue)
(2,printHexCharLine(result)
(3,data)
(4,result)
(5,)
(6,data + 1)
(7,)
(8,data = ' ')
(9,data = CHAR_MAX)
(10,)
(11,CHAR_MAX)
(12,result)
(13,data = \' \')
(14,1)
(15,if(globalTrue)
(16,)
(17,result)
(18,if(globalTrue)
(19,result = data + 1)
(20,data)
(21,' ')
(22,RET)
(23,globalTrue)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^