-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_42_bad()
{
    char data;
    data = ' ';
    data = badSource(data);
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
27,28
27,29
29,30
29,31
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,30,34,36,40,42
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_42_bad(){    char data;    data = ' ';    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_square_42_bad()
CWE190_Integer_Overflow__char_rand_square_42_bad
{    char data;    data = ' ';    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,2,0)
(15,3,0)
(16,19,0)
(1,3,0)
(7,8,0)
(18,15,0)
(8,15,0)
(15,8,0)
(8,16,0)
(3,19,0)
(5,14,0)
(9,1,0)
(4,2,0)
(3,1,0)
(0,15,0)
(14,16,0)
(10,16,0)
(6,3,0)
(14,8,0)
(2,19,0)
(11,2,0)
(17,19,0)
(12,14,1)
(15,18,1)
(7,3,1)
(5,8,1)
(0,7,1)
(1,9,1)
(8,15,1)
(18,0,1)
(14,8,1)
(1,2,1)
(15,3,1)
(14,5,1)
(6,2,1)
(3,1,1)
(11,4,1)
(9,6,1)
(2,11,1)
(8,15,2)
(3,1,2)
(1,2,2)
(14,8,2)
(15,3,2)
-----------------------------------
(0,data)
(1,badSource(data)
(2,data = ' ')
(3,data = badSource(data)
(4,data)
(5,result)
(6,data)
(7,result)
(8,result = data * data)
(9,data)
(10,result)
(11,' ')
(12,RET)
(13,data = \' \')
(14,printHexCharLine(result)
(15,data * data)
(16,)
(17,data)
(18,data)
(19,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^