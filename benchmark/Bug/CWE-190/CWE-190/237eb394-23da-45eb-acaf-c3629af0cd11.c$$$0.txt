-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_08_bad()
CWE190_Integer_Overflow__int_rand_multiply_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,13,0)
(2,9,0)
(18,23,0)
(6,22,0)
(22,1,0)
(14,23,0)
(13,12,0)
(18,5,0)
(16,23,0)
(11,14,0)
(24,12,0)
(19,18,0)
(13,22,0)
(23,14,0)
(12,15,0)
(21,15,0)
(7,12,0)
(14,22,0)
(25,22,0)
(0,14,0)
(26,5,0)
(22,6,0)
(14,12,0)
(20,15,0)
(23,5,0)
(4,13,0)
(8,15,0)
(16,13,1)
(27,13,1)
(18,23,1)
(14,12,1)
(18,19,1)
(23,14,1)
(17,22,1)
(13,4,1)
(19,23,1)
(12,24,1)
(11,16,1)
(3,17,1)
(4,3,1)
(22,6,1)
(25,10,1)
(13,12,1)
(17,10,1)
(10,12,1)
(27,18,1)
(14,22,1)
(27,17,1)
(0,11,1)
(13,22,1)
(6,25,1)
(14,0,1)
(24,7,1)
(6,10,2)
(22,10,2)
(0,13,2)
(4,17,2)
(22,6,2)
(25,10,2)
(13,12,2)
(14,13,2)
(23,14,2)
(23,13,2)
(13,22,2)
(19,13,2)
(18,23,2)
(13,17,2)
(14,12,2)
(16,13,2)
(18,13,2)
(3,17,2)
(11,13,2)
(14,22,2)
-----------------------------------
(0,2)
(1,)
(2,if(data > 0)
(3,data)
(4,0)
(5,)
(6,RAND32()
(7,data)
(8,data)
(9,)
(10,staticReturnsTrue()
(11,data)
(12,data = 0)
(13,data > 0)
(14,data * 2)
(15,)
(16,result)
(17,staticReturnsTrue()
(18,printIntLine(result)
(19,result)
(20,if(staticReturnsTrue()
(21,if(staticReturnsTrue()
(22,data = RAND32()
(23,result = data * 2)
(24,0)
(25,data)
(26,result)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^