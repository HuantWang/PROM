-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_32_bad()
CWE190_Integer_Overflow__char_rand_add_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,40,0)
(15,45,0)
(25,10,0)
(19,15,0)
(17,41,0)
(16,7,0)
(13,37,0)
(39,11,0)
(22,41,0)
(6,16,0)
(42,33,0)
(44,12,0)
(4,14,0)
(19,40,0)
(26,22,0)
(16,11,0)
(8,12,0)
(36,33,0)
(38,3,0)
(41,17,0)
(40,20,0)
(12,3,0)
(41,33,0)
(37,2,0)
(10,39,0)
(18,33,0)
(5,19,0)
(14,20,0)
(35,42,0)
(20,33,0)
(31,41,0)
(21,11,0)
(34,8,0)
(2,37,0)
(24,45,0)
(37,13,0)
(22,10,0)
(37,39,0)
(7,41,0)
(45,14,0)
(28,15,0)
(23,17,0)
(45,15,0)
(29,45,0)
(32,20,0)
(30,39,0)
(27,7,0)
(39,37,0)
(15,40,0)
(10,11,0)
(9,33,0)
(0,42,0)
(3,12,0)
(8,14,0)
(11,33,0)
(14,8,0)
(12,33,0)
(7,16,0)
(16,7,1)
(8,12,1)
(7,41,1)
(23,31,1)
(22,26,1)
(17,23,1)
(45,14,1)
(41,17,1)
(30,16,1)
(42,35,1)
(37,13,1)
(13,30,1)
(15,45,1)
(38,44,1)
(8,34,1)
(35,0,1)
(12,3,1)
(27,6,1)
(4,10,1)
(24,29,1)
(19,15,1)
(44,41,1)
(26,39,1)
(28,14,1)
(29,28,1)
(0,12,1)
(10,25,1)
(10,39,1)
(34,4,1)
(14,8,1)
(5,15,1)
(6,42,1)
(7,27,1)
(39,37,1)
(43,19,1)
(3,38,1)
(22,41,1)
(37,2,1)
(45,24,1)
(25,22,1)
(19,5,1)
(10,39,2)
(45,14,2)
(22,41,2)
(19,15,2)
(37,13,2)
(8,12,2)
(15,45,2)
(16,7,2)
(14,8,2)
(7,41,2)
(12,3,2)
(41,17,2)
(39,37,2)
(37,2,2)
-----------------------------------
(0,data)
(1,result)
(2,char)
(3,&data)
(4,data)
(5,result)
(6,data)
(7,*dataPtr1)
(8,*dataPtr2)
(9,dataPtr1)
(10,*dataPtr1 = data)
(11,)
(12,*dataPtr2 = &data)
(13,RAND32()
(14,data = *dataPtr2)
(15,result = data + 1)
(16,data = *dataPtr1)
(17,&data)
(18,data)
(19,printHexCharLine(result)
(20,)
(21,data)
(22,*dataPtr1)
(23,data)
(24,1)
(25,data)
(26,dataPtr1)
(27,dataPtr1)
(28,result)
(29,data)
(30,data)
(31,dataPtr1)
(32,data)
(33,)
(34,dataPtr2)
(35,' ')
(36,dataPtr2)
(37,(char)
(38,data)
(39,data = (char)
(40,)
(41,*dataPtr1 = &data)
(42,data = ' ')
(43,RET)
(44,dataPtr2)
(45,data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^