-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,59,60,64,66,70,71,75,77
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
57,58
57,59
68,69
68,70
-----guardedBy-----
33,49
59,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_01_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_01_bad()
CWE190_Integer_Overflow__int_fgets_multiply_01_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,14,0)
(33,3,0)
(21,31,0)
(34,9,0)
(21,13,0)
(35,7,0)
(3,32,0)
(27,21,0)
(9,20,0)
(0,7,0)
(17,4,0)
(36,4,0)
(15,20,0)
(6,31,0)
(10,32,0)
(8,25,0)
(12,36,0)
(38,32,0)
(23,20,0)
(5,21,0)
(16,5,0)
(26,5,0)
(4,36,0)
(27,0,0)
(5,3,0)
(25,0,0)
(27,3,0)
(0,27,0)
(4,9,0)
(30,0,0)
(18,27,0)
(31,9,0)
(1,3,0)
(20,32,0)
(14,24,0)
(37,4,0)
(11,27,0)
(25,7,0)
(28,21,0)
(29,4,0)
(31,21,0)
(2,9,0)
(37,9,1)
(3,1,1)
(16,26,1)
(36,4,1)
(18,11,1)
(12,4,1)
(11,30,1)
(31,9,1)
(22,36,1)
(5,16,1)
(0,27,1)
(17,37,1)
(19,25,1)
(25,8,1)
(27,21,1)
(5,21,1)
(29,17,1)
(4,29,1)
(27,18,1)
(26,21,1)
(21,31,1)
(19,5,1)
(9,2,1)
(30,5,1)
(5,3,1)
(8,0,1)
(31,6,1)
(14,22,1)
(1,33,1)
(4,9,1)
(34,3,1)
(26,14,1)
(25,0,1)
(2,34,1)
(28,36,1)
(36,12,1)
(6,28,1)
(27,3,1)
(21,36,2)
(5,3,2)
(6,36,2)
(27,5,2)
(21,31,2)
(11,5,2)
(30,5,2)
(18,5,2)
(5,21,2)
(0,27,2)
(28,36,2)
(4,9,2)
(14,36,2)
(22,36,2)
(25,0,2)
(0,5,2)
(25,5,2)
(31,36,2)
(27,21,2)
(27,3,2)
(8,5,2)
(31,9,2)
(36,4,2)
-----------------------------------
(0,result = data * 2)
(1,0)
(2,"")
(3,data = 0)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,data > 0)
(6,inputBuffer)
(7,)
(8,result)
(9,inputBuffer[CHAR_ARRAY_SIZE] = "")
(10,data)
(11,data)
(12,NULL)
(13,)
(14,printLine("fgets()
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,0)
(17,CHAR_ARRAY_SIZE)
(18,2)
(19,RET)
(20,)
(21,data = atoi(inputBuffer)
(22,"fgets()
(23,inputBuffer)
(24,)
(25,printIntLine(result)
(26,data)
(27,data * 2)
(28,data)
(29,stdin)
(30,result)
(31,atoi(inputBuffer)
(32,)
(33,data)
(34,inputBuffer)
(35,result)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,inputBuffer)
(38,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^