-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
41,44
43,44
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
98,99
98,100
100,101
100,102
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,45,47,52,54,56,58,60,65,68,70,75,76,81,82,85,86,89,94,95,99,101,105,106,110,112
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
63,64
63,65
79,80
79,81
83,84
83,85
92,93
92,94
103,104
103,105
-----guardedBy-----
54,70
94,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_17_bad()
CWE190_Integer_Overflow__int_fgets_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,3,0)
(24,10,0)
(18,51,0)
(7,33,0)
(37,6,0)
(45,13,0)
(57,8,0)
(50,26,0)
(51,4,0)
(42,25,0)
(29,38,0)
(10,57,0)
(52,57,0)
(9,12,0)
(30,10,0)
(39,33,0)
(48,12,0)
(0,6,0)
(13,56,0)
(41,3,0)
(31,12,0)
(53,51,0)
(60,25,0)
(14,35,0)
(33,7,0)
(47,19,0)
(55,31,0)
(49,12,0)
(12,31,0)
(5,7,0)
(46,57,0)
(22,40,0)
(33,3,0)
(59,35,0)
(19,38,0)
(6,25,0)
(34,5,0)
(16,25,0)
(57,10,0)
(20,7,0)
(21,52,0)
(10,7,0)
(35,44,0)
(17,26,0)
(58,44,0)
(3,51,0)
(11,38,0)
(26,38,0)
(54,44,0)
(10,6,0)
(36,3,0)
(7,32,0)
(15,25,0)
(5,6,0)
(43,8,0)
(28,5,0)
(27,44,0)
(52,8,0)
(23,27,0)
(2,25,0)
(47,7,1)
(46,5,1)
(10,7,1)
(38,29,1)
(36,41,1)
(27,23,1)
(17,50,1)
(23,52,1)
(26,17,1)
(31,12,1)
(58,26,1)
(11,6,1)
(13,45,1)
(57,10,1)
(52,21,1)
(5,6,1)
(23,5,1)
(5,7,1)
(12,3,1)
(24,46,1)
(27,44,1)
(41,26,1)
(54,58,1)
(30,24,1)
(7,33,1)
(35,14,1)
(12,48,1)
(37,0,1)
(28,35,1)
(47,13,1)
(44,54,1)
(19,38,1)
(29,11,1)
(33,3,1)
(59,27,1)
(50,19,1)
(45,31,1)
(35,44,1)
(14,59,1)
(49,9,1)
(9,3,1)
(52,57,1)
(10,30,1)
(59,44,1)
(48,49,1)
(50,38,1)
(3,36,1)
(39,20,1)
(1,35,1)
(20,31,1)
(33,39,1)
(31,55,1)
(26,38,1)
(34,28,1)
(10,6,1)
(55,12,1)
(5,34,1)
(19,47,1)
(6,37,1)
(21,57,1)
(55,26,2)
(46,5,2)
(52,57,2)
(33,3,2)
(12,26,2)
(26,26,2)
(10,5,2)
(19,26,2)
(5,6,2)
(35,35,2)
(48,26,2)
(21,5,2)
(26,38,2)
(27,35,2)
(12,3,2)
(5,7,2)
(5,35,2)
(7,31,2)
(45,31,2)
(9,26,2)
(14,35,2)
(28,35,2)
(10,6,2)
(39,31,2)
(34,35,2)
(3,26,2)
(36,26,2)
(19,38,2)
(41,26,2)
(30,5,2)
(10,7,2)
(31,26,2)
(57,5,2)
(59,35,2)
(23,35,2)
(50,26,2)
(13,31,2)
(17,26,2)
(31,12,2)
(57,10,2)
(33,31,2)
(52,5,2)
(7,33,2)
(35,44,2)
(24,5,2)
(20,31,2)
(49,26,2)
(27,44,2)
(47,26,2)
-----------------------------------
(0,data)
(1,RET)
(2,i)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,)
(5,data > 0)
(6,data = 0)
(7,data = atoi(inputBuffer)
(8,)
(9,inputBuffer)
(10,data * 2)
(11,i)
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,printLine("fgets()
(14,1)
(15,data)
(16,for(i = 0; i < 1; i++)
(17,1)
(18,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,i++)
(20,data)
(21,result)
(22,if(data > 0)
(23,j)
(24,data)
(25,)
(26,i < 1)
(27,j++)
(28,data)
(29,0)
(30,2)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,)
(33,atoi(inputBuffer)
(34,0)
(35,j < 1)
(36,"")
(37,0)
(38,i = 0)
(39,inputBuffer)
(40,)
(41,inputBuffer)
(42,for(j = 0; j < 1; j++)
(43,result)
(44,j = 0)
(45,"fgets()
(46,result)
(47,i)
(48,stdin)
(49,CHAR_ARRAY_SIZE)
(50,i)
(51,)
(52,printIntLine(result)
(53,inputBuffer)
(54,0)
(55,NULL)
(56,)
(57,result = data * 2)
(58,j)
(59,j)
(60,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^