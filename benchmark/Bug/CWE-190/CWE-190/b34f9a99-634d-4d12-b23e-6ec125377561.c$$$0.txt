-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,71,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
63,64
63,65
75,76
75,77
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_14_bad()
CWE190_Integer_Overflow__int_fgets_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(19,10,0)
(38,41,0)
(6,7,0)
(26,34,0)
(39,2,0)
(21,4,0)
(11,13,0)
(1,25,0)
(31,12,0)
(6,24,0)
(7,36,0)
(24,11,0)
(42,11,0)
(43,10,0)
(27,19,0)
(14,10,0)
(37,19,0)
(20,28,0)
(17,19,0)
(33,7,0)
(4,24,0)
(3,2,0)
(23,41,0)
(12,16,0)
(15,4,0)
(44,27,0)
(0,6,0)
(19,27,0)
(19,7,0)
(28,34,0)
(32,24,0)
(7,6,0)
(27,34,0)
(29,4,0)
(5,25,0)
(18,11,0)
(8,4,0)
(10,2,0)
(34,40,0)
(35,15,0)
(28,27,0)
(4,15,0)
(30,24,0)
(9,2,0)
(44,41,1)
(4,24,1)
(41,23,1)
(43,14,1)
(28,27,1)
(24,32,1)
(6,24,1)
(1,10,1)
(33,15,1)
(30,25,1)
(17,37,1)
(22,28,1)
(38,25,1)
(20,27,1)
(15,4,1)
(8,29,1)
(23,38,1)
(27,19,1)
(10,43,1)
(25,5,1)
(19,10,1)
(38,12,1)
(28,20,1)
(21,8,1)
(7,6,1)
(38,7,1)
(19,7,1)
(22,41,1)
(0,33,1)
(35,4,1)
(12,31,1)
(5,1,1)
(4,21,1)
(19,17,1)
(15,35,1)
(6,0,1)
(29,24,1)
(37,44,1)
(32,30,1)
(31,15,1)
(33,15,2)
(20,41,2)
(28,41,2)
(44,41,2)
(4,24,2)
(7,15,2)
(19,41,2)
(31,15,2)
(35,25,2)
(27,41,2)
(17,41,2)
(19,7,2)
(8,25,2)
(0,15,2)
(7,6,2)
(29,25,2)
(32,25,2)
(6,15,2)
(24,25,2)
(30,25,2)
(12,15,2)
(15,25,2)
(28,27,2)
(27,19,2)
(4,25,2)
(37,41,2)
(6,24,2)
(15,4,2)
(21,25,2)
(19,10,2)
-----------------------------------
(0,inputBuffer)
(1,globalFive)
(2,)
(3,data)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,5)
(6,atoi(inputBuffer)
(7,data = atoi(inputBuffer)
(8,CHAR_ARRAY_SIZE)
(9,if(globalFive==5)
(10,data = 0)
(11,)
(12,printLine("fgets()
(13,)
(14,data)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,)
(17,data)
(18,inputBuffer)
(19,data * data)
(20,result)
(21,stdin)
(22,RET)
(23,5)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,globalFive==5)
(26,result)
(27,result = data * data)
(28,printIntLine(result)
(29,inputBuffer)
(30,inputBuffer)
(31,"fgets()
(32,"")
(33,data)
(34,)
(35,NULL)
(36,)
(37,data)
(38,globalFive)
(39,if(globalFive==5)
(40,)
(41,globalFive==5)
(42,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,0)
(44,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^