-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
47,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,45,46,49,54,55,58,59,62,67,68,73,75,79,80,84,86
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
52,53
52,54
56,57
56,58
65,66
65,67
77,78
77,79
-----guardedBy-----
67,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_17_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(28,5,0)
(7,14,0)
(34,21,0)
(2,11,0)
(42,0,0)
(8,28,0)
(41,32,0)
(20,21,0)
(29,14,0)
(21,34,0)
(10,32,0)
(12,22,0)
(9,34,0)
(23,36,0)
(34,8,0)
(0,22,0)
(4,14,0)
(1,36,0)
(17,14,0)
(21,36,0)
(18,33,0)
(35,38,0)
(24,33,0)
(6,3,0)
(5,28,0)
(26,3,0)
(27,23,0)
(43,14,0)
(13,26,0)
(33,8,0)
(15,22,0)
(32,22,0)
(28,16,0)
(16,28,0)
(19,3,0)
(39,8,0)
(23,21,0)
(31,34,0)
(30,14,0)
(28,8,0)
(8,37,0)
(25,26,0)
(11,3,0)
(10,41,1)
(25,3,1)
(5,39,1)
(3,6,1)
(21,34,1)
(42,23,1)
(22,15,1)
(20,33,1)
(33,24,1)
(32,22,1)
(23,27,1)
(18,32,1)
(40,32,1)
(9,31,1)
(6,19,1)
(15,12,1)
(8,28,1)
(31,20,1)
(32,10,1)
(41,22,1)
(28,5,1)
(34,8,1)
(19,7,1)
(26,3,1)
(42,33,1)
(23,21,1)
(26,13,1)
(27,21,1)
(12,26,1)
(0,42,1)
(13,25,1)
(2,8,1)
(39,26,1)
(34,9,1)
(11,2,1)
(25,11,1)
(0,22,1)
(33,8,1)
(11,3,1)
(28,16,1)
(41,0,1)
(24,18,1)
(34,33,2)
(26,26,2)
(24,32,2)
(11,26,2)
(0,32,2)
(20,33,2)
(41,32,2)
(32,32,2)
(28,26,2)
(26,3,2)
(27,33,2)
(23,21,2)
(25,26,2)
(33,8,2)
(21,34,2)
(11,3,2)
(31,33,2)
(13,26,2)
(8,26,2)
(32,22,2)
(10,32,2)
(9,33,2)
(28,16,2)
(2,26,2)
(21,33,2)
(23,33,2)
(39,26,2)
(28,5,2)
(34,8,2)
(18,32,2)
(42,32,2)
(33,32,2)
(8,28,2)
(0,22,2)
(5,26,2)
-----------------------------------
(0,j++)
(1,result)
(2,i)
(3,i = 0)
(4,j)
(5,RAND64()
(6,0)
(7,L)
(8,data = (int64_t)
(9,2)
(10,1)
(11,i++)
(12,j)
(13,1)
(14,)
(15,0)
(16,int64_t)
(17,for(j = 0; j < 1; j++)
(18,data)
(19,i)
(20,result)
(21,result = data * 2)
(22,j = 0)
(23,printLongLongLine(result)
(24,0)
(25,i)
(26,i < 1)
(27,result)
(28,(int64_t)
(29,data)
(30,for(i = 0; i < 1; i++)
(31,data)
(32,j < 1)
(33,data > 0)
(34,data * 2)
(35,if(data > 0)
(36,)
(37,)
(38,)
(39,data)
(40,RET)
(41,j)
(42,j)
(43,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^