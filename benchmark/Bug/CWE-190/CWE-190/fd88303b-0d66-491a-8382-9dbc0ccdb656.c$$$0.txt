-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,41,45,47,51,52,56,58
-----computeFrom-----
12,13
12,14
22,23
22,24
38,39
38,40
49,50
49,51
-----guardedBy-----
40,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_11_bad()
CWE190_Integer_Overflow__short_rand_multiply_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(18,21,0)
(21,25,0)
(1,23,0)
(25,4,0)
(29,18,0)
(12,20,0)
(28,29,0)
(18,23,0)
(13,25,0)
(2,11,0)
(3,21,0)
(24,4,0)
(26,18,0)
(29,23,0)
(19,8,0)
(0,19,0)
(21,18,0)
(15,25,0)
(2,19,0)
(5,17,0)
(6,4,0)
(19,2,0)
(14,21,0)
(2,22,0)
(11,2,0)
(21,19,0)
(17,25,0)
(7,4,0)
(10,17,0)
(22,2,0)
(17,19,0)
(27,17,1)
(27,9,1)
(21,3,1)
(28,18,1)
(29,18,1)
(25,15,1)
(19,2,1)
(5,10,1)
(15,13,1)
(21,25,1)
(11,0,1)
(2,22,1)
(0,16,1)
(16,25,1)
(9,16,1)
(9,19,1)
(27,29,1)
(3,14,1)
(2,11,1)
(17,25,1)
(10,9,1)
(29,28,1)
(17,5,1)
(26,17,1)
(17,19,1)
(21,19,1)
(14,26,1)
(18,21,1)
(18,21,2)
(19,16,2)
(2,22,2)
(26,17,2)
(21,17,2)
(2,16,2)
(3,17,2)
(14,17,2)
(28,17,2)
(11,16,2)
(17,9,2)
(19,2,2)
(2,11,2)
(21,25,2)
(29,17,2)
(5,9,2)
(0,16,2)
(21,19,2)
(29,18,2)
(17,19,2)
(17,25,2)
(18,17,2)
(10,9,2)
-----------------------------------
(0,data)
(1,result)
(2,(short)
(3,2)
(4,)
(5,0)
(6,if(globalReturnsTrue()
(7,if(globalReturnsTrue()
(8,)
(9,globalReturnsTrue()
(10,data)
(11,RAND32()
(12,if(data > 0)
(13,data)
(14,data)
(15,0)
(16,globalReturnsTrue()
(17,data > 0)
(18,result = data * 2)
(19,data = (short)
(20,)
(21,data * 2)
(22,short)
(23,)
(24,data)
(25,data = 0)
(26,result)
(27,RET)
(28,result)
(29,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^