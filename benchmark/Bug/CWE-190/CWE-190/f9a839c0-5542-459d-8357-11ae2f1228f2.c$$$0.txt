-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_03_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(3,10,0)
(27,10,0)
(22,0,0)
(14,28,0)
(8,2,0)
(7,17,0)
(28,3,0)
(2,20,0)
(15,10,0)
(16,11,0)
(26,2,0)
(9,10,0)
(4,3,0)
(2,10,0)
(10,0,0)
(9,20,0)
(6,0,0)
(28,23,0)
(18,29,0)
(24,28,0)
(1,17,0)
(20,19,0)
(25,9,0)
(3,28,0)
(5,0,0)
(21,11,0)
(29,2,0)
(29,20,0)
(12,20,0)
(15,27,1)
(21,28,1)
(4,14,1)
(9,25,1)
(11,16,1)
(18,2,1)
(29,2,1)
(2,8,1)
(25,11,1)
(13,29,1)
(29,18,1)
(3,10,1)
(3,4,1)
(17,1,1)
(10,15,1)
(2,10,1)
(13,11,1)
(8,26,1)
(24,17,1)
(21,17,1)
(7,10,1)
(1,7,1)
(9,10,1)
(16,21,1)
(26,9,1)
(28,3,1)
(14,24,1)
(2,11,2)
(28,17,2)
(29,11,2)
(25,11,2)
(28,3,2)
(18,11,2)
(2,10,2)
(26,11,2)
(8,11,2)
(4,17,2)
(29,2,2)
(14,17,2)
(24,17,2)
(9,10,2)
(3,17,2)
(3,10,2)
(9,11,2)
-----------------------------------
(0,)
(1,5)
(2,result = data)
(3,&data)
(4,data)
(5,if(5==5)
(6,data)
(7,5)
(8,data)
(9,data++)
(10,data = 0)
(11,5==5)
(12,result)
(13,RET)
(14,"%u")
(15,0)
(16,5)
(17,5==5)
(18,result)
(19,)
(20,)
(21,5)
(22,if(5==5)
(23,)
(24,stdin)
(25,data)
(26,result)
(27,data)
(28,fscanf (stdin, "%u", &data)
(29,printUnsignedLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^