-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_53d_badSink(short data)
{
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
-----nextToken-----
2,4,6,8,13,15,19,21,25,27
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_53d_badSink(short data){    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_square_53d_badSink(short data)
CWE190_Integer_Overflow__short_fscanf_square_53d_badSink
short data
short
data
data
{    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,5,0)
(3,9,0)
(10,8,0)
(2,5,0)
(5,0,0)
(6,10,0)
(9,5,0)
(9,10,0)
(11,8,0)
(8,1,0)
(7,8,0)
(8,10,0)
(8,1,1)
(9,10,1)
(9,3,1)
(8,11,1)
(10,8,1)
(7,6,1)
(3,10,1)
(11,7,1)
(4,9,1)
(8,1,2)
(9,10,2)
(10,8,2)
-----------------------------------
(0,)
(1,short data)
(2,result)
(3,result)
(4,RET)
(5,)
(6,result)
(7,data)
(8,data * data)
(9,printIntLine(result)
(10,result = data * data)
(11,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^