-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,77,81,83,87,88,92,94
-----computeFrom-----
32,33
32,34
57,58
57,59
74,75
74,76
85,86
85,87
-----guardedBy-----
76,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_32_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(40,10,0)
(32,48,0)
(7,31,0)
(36,37,0)
(4,35,0)
(23,36,0)
(31,3,0)
(37,36,0)
(38,3,0)
(36,3,0)
(27,29,0)
(16,28,0)
(24,9,0)
(15,24,0)
(22,29,0)
(44,16,0)
(35,9,0)
(29,16,0)
(12,48,0)
(19,13,0)
(33,36,0)
(45,3,0)
(13,3,0)
(16,33,0)
(49,37,0)
(24,32,0)
(21,9,0)
(18,3,0)
(22,36,0)
(0,32,0)
(45,5,0)
(9,30,0)
(17,35,0)
(32,24,0)
(10,28,0)
(8,5,0)
(39,10,0)
(47,11,0)
(46,22,0)
(11,10,0)
(42,24,0)
(30,9,0)
(10,11,0)
(6,48,0)
(29,28,0)
(26,28,0)
(25,30,0)
(9,13,0)
(2,12,0)
(11,16,0)
(34,33,0)
(43,31,0)
(1,45,0)
(20,13,0)
(12,32,0)
(28,3,0)
(14,3,0)
(33,16,0)
(5,45,0)
(30,45,0)
(33,34,1)
(2,32,1)
(22,36,1)
(16,33,1)
(1,36,1)
(11,47,1)
(15,42,1)
(45,5,1)
(32,24,1)
(42,0,1)
(5,8,1)
(33,36,1)
(10,11,1)
(39,16,1)
(31,43,1)
(41,12,1)
(12,32,1)
(30,25,1)
(29,27,1)
(8,1,1)
(9,30,1)
(44,31,1)
(4,9,1)
(40,39,1)
(37,49,1)
(7,45,1)
(36,37,1)
(17,4,1)
(34,44,1)
(47,40,1)
(24,9,1)
(22,46,1)
(29,16,1)
(35,17,1)
(27,22,1)
(11,16,1)
(25,21,1)
(24,15,1)
(43,7,1)
(21,29,1)
(0,35,1)
(12,2,1)
(49,23,1)
(30,45,1)
(35,9,1)
(41,35,1)
(46,10,1)
(36,37,2)
(32,35,2)
(0,35,2)
(24,9,2)
(30,45,2)
(45,5,2)
(32,24,2)
(12,32,2)
(35,9,2)
(24,35,2)
(12,35,2)
(29,16,2)
(16,33,2)
(10,11,2)
(2,35,2)
(42,35,2)
(22,36,2)
(9,30,2)
(15,35,2)
(11,16,2)
(33,36,2)
-----------------------------------
(0,result)
(1,dataPtr2)
(2,result)
(3,)
(4,data)
(5,&data)
(6,result)
(7,data)
(8,data)
(9,data = *dataPtr2)
(10,fscanf (stdin, "%hd", &data)
(11,&data)
(12,printIntLine(result)
(13,)
(14,data)
(15,2)
(16,data = *dataPtr1)
(17,0)
(18,dataPtr1)
(19,if(data > 0)
(20,data)
(21,data)
(22,*dataPtr1)
(23,dataPtr1)
(24,data * 2)
(25,dataPtr2)
(26,data)
(27,data)
(28,)
(29,*dataPtr1 = data)
(30,*dataPtr2)
(31,data = 0)
(32,result = data * 2)
(33,*dataPtr1)
(34,dataPtr1)
(35,data > 0)
(36,*dataPtr1 = &data)
(37,&data)
(38,dataPtr2)
(39,stdin)
(40,"%hd")
(41,RET)
(42,data)
(43,0)
(44,data)
(45,*dataPtr2 = &data)
(46,dataPtr1)
(47,data)
(48,)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^