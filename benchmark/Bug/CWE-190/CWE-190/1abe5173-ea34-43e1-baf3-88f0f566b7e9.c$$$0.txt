-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (unsigned int)RAND32();
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,56,60,62,66,67,71,73
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
53,54
53,55
64,65
64,66
-----guardedBy-----
55,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType
CWE190_Integer_Overflow__unsigned_int_rand_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(7,19,0)
(2,15,0)
(20,30,0)
(6,19,0)
(24,15,0)
(13,16,0)
(25,8,0)
(26,12,0)
(4,16,0)
(5,35,0)
(35,20,0)
(29,4,0)
(36,19,0)
(2,36,0)
(28,23,0)
(18,17,0)
(12,16,0)
(33,2,0)
(0,36,0)
(1,17,0)
(15,2,0)
(27,12,0)
(23,19,0)
(20,35,0)
(9,20,0)
(31,36,0)
(6,35,0)
(4,12,0)
(21,23,0)
(3,26,0)
(20,9,0)
(17,6,0)
(14,26,0)
(35,19,0)
(32,19,0)
(8,2,0)
(34,6,0)
(30,20,0)
(11,15,0)
(22,8,0)
(12,26,0)
(26,2,0)
(29,12,1)
(17,18,1)
(34,17,1)
(8,2,1)
(20,9,1)
(26,2,1)
(22,2,1)
(27,8,1)
(11,33,1)
(6,35,1)
(10,8,1)
(4,29,1)
(23,21,1)
(20,30,1)
(30,5,1)
(18,1,1)
(4,12,1)
(1,35,1)
(21,28,1)
(2,15,1)
(26,14,1)
(3,27,1)
(15,24,1)
(35,20,1)
(5,23,1)
(12,26,1)
(33,6,1)
(8,25,1)
(24,11,1)
(25,22,1)
(6,34,1)
(14,3,1)
(10,4,1)
(6,35,2)
(8,2,2)
(4,8,2)
(12,26,2)
(14,8,2)
(26,2,2)
(20,30,2)
(27,8,2)
(26,8,2)
(12,8,2)
(29,8,2)
(35,20,2)
(4,12,2)
(2,15,2)
(20,9,2)
(3,8,2)
-----------------------------------
(0,if(data > 0)
(1,myUnion)
(2,data = myUnion.unionSecond)
(3,data)
(4,printUnsignedLine(result)
(5,data)
(6,myUnion.unionFirst = data)
(7,myUnion)
(8,data > 0)
(9,unsigned int)
(10,RET)
(11,myUnion)
(12,result = data * 2)
(13,result)
(14,2)
(15,myUnion.unionSecond)
(16,)
(17,myUnion.unionFirst)
(18,unionFirst)
(19,)
(20,(unsigned int)
(21,0)
(22,data)
(23,data = 0)
(24,unionSecond)
(25,0)
(26,data * 2)
(27,result)
(28,data)
(29,result)
(30,RAND32()
(31,data)
(32,data)
(33,data)
(34,data)
(35,data = (unsigned int)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^