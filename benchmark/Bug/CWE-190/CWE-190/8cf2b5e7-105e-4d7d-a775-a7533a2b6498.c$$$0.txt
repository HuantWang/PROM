-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_14_bad()
{
    unsigned int data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_14_bad(){    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_14_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_14_bad
{    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(22,2,0)
(16,20,0)
(19,24,0)
(3,15,0)
(15,21,0)
(20,1,0)
(12,1,0)
(23,4,0)
(13,1,0)
(26,4,0)
(9,20,0)
(6,22,0)
(2,22,0)
(20,2,0)
(2,18,0)
(10,15,0)
(7,4,0)
(14,3,0)
(28,5,0)
(3,21,0)
(21,29,0)
(8,21,0)
(27,2,0)
(22,0,0)
(22,6,0)
(20,15,0)
(15,20,0)
(0,22,0)
(1,4,0)
(11,24,0)
(25,5,0)
(17,24,1)
(20,2,1)
(10,24,1)
(5,28,1)
(24,11,1)
(17,3,1)
(2,22,1)
(14,15,1)
(9,10,1)
(22,6,1)
(1,12,1)
(12,13,1)
(28,25,1)
(6,27,1)
(22,0,1)
(11,19,1)
(3,14,1)
(15,20,1)
(19,5,1)
(19,2,1)
(20,1,1)
(27,5,1)
(3,15,1)
(20,16,1)
(25,1,1)
(16,9,1)
(10,24,2)
(3,15,2)
(3,24,2)
(22,6,2)
(16,24,2)
(15,20,2)
(22,5,2)
(14,24,2)
(2,22,2)
(27,5,2)
(22,0,2)
(20,2,2)
(2,5,2)
(15,24,2)
(20,1,2)
(6,5,2)
(9,24,2)
(20,24,2)
-----------------------------------
(0,unsigned int)
(1,data = 0)
(2,data = (unsigned int)
(3,printUnsignedLine(result)
(4,)
(5,globalFive==5)
(6,RAND32()
(7,data)
(8,result)
(9,data)
(10,result)
(11,5)
(12,0)
(13,data)
(14,result)
(15,result = data * data)
(16,data)
(17,RET)
(18,)
(19,globalFive)
(20,data * data)
(21,)
(22,(unsigned int)
(23,if(globalFive==5)
(24,globalFive==5)
(25,globalFive)
(26,if(globalFive==5)
(27,data)
(28,5)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^