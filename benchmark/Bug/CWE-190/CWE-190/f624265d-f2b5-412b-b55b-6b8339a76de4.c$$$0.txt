-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_add_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        short result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,54,58,60,61,62,66,67,68
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_add_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_add_15_bad()
CWE190_Integer_Overflow__short_fscanf_add_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,8,0)
(24,16,0)
(22,16,0)
(11,15,0)
(8,13,0)
(9,15,0)
(19,32,0)
(20,33,0)
(28,5,0)
(30,6,0)
(12,15,0)
(29,36,0)
(17,36,0)
(23,30,0)
(27,32,0)
(1,6,0)
(34,8,0)
(13,32,0)
(2,32,0)
(4,5,0)
(35,5,0)
(0,14,0)
(18,15,0)
(16,15,0)
(36,13,0)
(33,36,0)
(33,6,0)
(36,33,0)
(30,33,0)
(3,13,0)
(14,15,0)
(31,35,0)
(37,5,0)
(7,5,0)
(6,5,0)
(25,13,0)
(8,16,0)
(29,20,1)
(10,12,1)
(31,10,1)
(35,31,1)
(23,33,1)
(4,30,1)
(8,34,1)
(26,4,1)
(16,8,1)
(8,13,1)
(10,11,1)
(34,22,1)
(17,29,1)
(30,33,1)
(26,7,1)
(14,0,1)
(36,17,1)
(22,24,1)
(30,23,1)
(20,10,1)
(7,35,1)
(24,21,1)
(33,36,1)
(11,14,1)
(21,13,1)
(0,21,1)
(25,3,1)
(13,25,1)
(36,13,1)
(12,16,1)
(16,8,2)
(23,10,2)
(33,10,2)
(12,21,2)
(8,21,2)
(33,36,2)
(30,10,2)
(16,21,2)
(4,10,2)
(22,21,2)
(17,10,2)
(8,13,2)
(31,10,2)
(11,21,2)
(7,10,2)
(0,21,2)
(34,21,2)
(20,10,2)
(14,21,2)
(35,10,2)
(24,21,2)
(36,13,2)
(36,10,2)
(29,10,2)
(30,33,2)
-----------------------------------
(0,"Benign, fixed string")
(1,result)
(2,switch(6)
(3,data)
(4,break;)
(5,)
(6,)
(7,break;)
(8,&data)
(9,default:)
(10,7)
(11,break;)
(12,break;)
(13,data = 0)
(14,printLine("Benign, fixed string")
(15,)
(16,fscanf (stdin, "%hd", &data)
(17,1)
(18,case 6:)
(19,data)
(20,result)
(21,6)
(22,"%hd")
(23,result)
(24,stdin)
(25,0)
(26,RET)
(27,switch(7)
(28,case 7:)
(29,data)
(30,printIntLine(result)
(31,"Benign, fixed string")
(32,)
(33,result = data + 1)
(34,data)
(35,printLine("Benign, fixed string")
(36,data + 1)
(37,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^