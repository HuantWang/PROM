-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad()
{
    int64_t data;
    data = 0LL;
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
20,21
22,23
22,24
24,25
24,26
25,26
25,27
26,27
29,30
29,31
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,9,11,15,16,18,21,23,27,28,33,35,39,40,44,46
-----computeFrom-----
13,14
13,15
25,26
25,27
37,38
37,39
-----guardedBy-----
27,39
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ProblemStatement;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad(){    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad
{    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(17,19,0)
(16,19,0)
(15,19,0)
(5,2,0)
(2,3,0)
(1,19,0)
(10,11,0)
(12,11,0)
(2,11,0)
(18,5,0)
(7,2,0)
(13,6,0)
(9,6,0)
(5,3,0)
(0,19,0)
(14,19,0)
(4,19,0)
(11,2,0)
(8,3,0)
(4,17,1)
(13,9,1)
(5,2,1)
(9,4,1)
(2,11,1)
(20,6,1)
(12,10,1)
(10,7,1)
(20,5,1)
(11,12,1)
(18,2,1)
(17,0,1)
(5,18,1)
(7,6,1)
(6,13,1)
(2,11,2)
(12,6,2)
(5,6,2)
(18,6,2)
(2,6,2)
(5,2,2)
(11,6,2)
(7,6,2)
(10,6,2)
-----------------------------------
(0,L)
(1,source:)
(2,result = data * 2)
(3,)
(4,goto sink;)
(5,printLongLongLine(result)
(6,data > 0)
(7,result)
(8,result)
(9,data)
(10,data)
(11,data * 2)
(12,2)
(13,0)
(14,sink:)
(15,data)
(16,if(data > 0)
(17,goto source;)
(18,result)
(19,)
(20,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^