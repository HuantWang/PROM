-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_32_bad()
{
    unsigned int data;
    unsigned int *dataPtr1 = &data;
    unsigned int *dataPtr2 = &data;
    data = 0;
    {
        unsigned int data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        *dataPtr1 = data;
    }
    {
        unsigned int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,79,83,85,89,91
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_32_bad(){    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_32_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_32_bad
{    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
unsigned int *dataPtr1 = &data;
unsigned int *dataPtr1 = &data;
unsigned int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
unsigned int *dataPtr2 = &data;
unsigned int *dataPtr2 = &data;
unsigned int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        *dataPtr1 = data;    }
unsigned int data = *dataPtr1;
unsigned int data = *dataPtr1;
unsigned int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        unsigned int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
unsigned int data = *dataPtr2;
unsigned int data = *dataPtr2;
unsigned int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(24,10,0)
(22,44,0)
(37,44,0)
(6,41,0)
(2,0,0)
(41,10,0)
(42,13,0)
(17,23,0)
(28,2,0)
(34,30,0)
(29,43,0)
(26,41,0)
(35,7,0)
(40,0,0)
(14,45,0)
(18,7,0)
(26,44,0)
(32,30,0)
(19,2,0)
(33,20,0)
(36,7,0)
(44,43,0)
(28,34,0)
(23,25,0)
(20,17,0)
(13,11,0)
(25,23,0)
(11,12,0)
(13,10,0)
(4,17,0)
(15,12,0)
(43,7,0)
(10,13,0)
(0,2,0)
(23,5,0)
(34,28,0)
(38,21,0)
(11,7,0)
(3,41,0)
(12,11,0)
(20,30,0)
(30,7,0)
(17,30,0)
(45,20,0)
(41,26,0)
(45,2,0)
(23,17,0)
(39,34,0)
(2,7,0)
(5,23,0)
(16,22,0)
(21,7,0)
(27,26,0)
(1,28,0)
(10,43,0)
(31,21,0)
(22,26,0)
(8,11,0)
(39,21,1)
(28,1,1)
(28,2,1)
(3,27,1)
(20,33,1)
(15,8,1)
(12,15,1)
(10,13,1)
(6,3,1)
(8,2,1)
(31,11,1)
(34,28,1)
(0,40,1)
(13,11,1)
(4,34,1)
(27,10,1)
(13,42,1)
(45,14,1)
(22,16,1)
(17,23,1)
(26,41,1)
(2,0,1)
(23,5,1)
(41,10,1)
(16,26,1)
(21,38,1)
(33,45,1)
(41,6,1)
(38,31,1)
(22,26,1)
(25,4,1)
(45,2,1)
(11,12,1)
(1,39,1)
(42,24,1)
(9,22,1)
(20,17,1)
(23,25,1)
(24,20,1)
(40,19,1)
(14,17,1)
(23,5,2)
(17,23,2)
(11,12,2)
(34,28,2)
(20,17,2)
(2,0,2)
(22,26,2)
(26,41,2)
(28,2,2)
(41,10,2)
(45,2,2)
(10,13,2)
(13,11,2)
(23,25,2)
-----------------------------------
(0,&data)
(1,dataPtr1)
(2,*dataPtr1 = &data)
(3,data)
(4,data)
(5,unsigned int)
(6,data)
(7,)
(8,dataPtr2)
(9,RET)
(10,data = *dataPtr2)
(11,*dataPtr2 = &data)
(12,&data)
(13,*dataPtr2)
(14,dataPtr1)
(15,data)
(16,result)
(17,data = (unsigned int)
(18,dataPtr1)
(19,dataPtr1)
(20,*dataPtr1 = data)
(21,data = 0)
(22,printUnsignedLine(result)
(23,(unsigned int)
(24,data)
(25,RAND32()
(26,result = data * data)
(27,result)
(28,*dataPtr1)
(29,data)
(30,)
(31,data)
(32,data)
(33,data)
(34,data = *dataPtr1)
(35,data)
(36,dataPtr2)
(37,result)
(38,0)
(39,data)
(40,data)
(41,data * data)
(42,dataPtr2)
(43,)
(44,)
(45,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^