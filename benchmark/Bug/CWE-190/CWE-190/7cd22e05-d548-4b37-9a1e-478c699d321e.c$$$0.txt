-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_03_bad()
{
    int64_t data;
    data = 0LL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
24,26
27,28
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,9,11,15,16,19,20,25,26,32,34,38,40,44,46
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ProblemStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_03_bad(){    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_03_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_03_bad
{    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(15,7,0)
(10,9,0)
(13,9,0)
(12,4,0)
(7,2,0)
(5,12,0)
(3,14,0)
(0,9,0)
(2,4,0)
(12,2,0)
(2,7,0)
(17,1,0)
(20,1,0)
(4,6,0)
(11,9,0)
(19,14,0)
(18,2,0)
(8,4,0)
(16,7,0)
(2,7,1)
(3,19,1)
(5,2,1)
(21,12,1)
(12,5,1)
(17,20,1)
(19,1,1)
(18,14,1)
(14,3,1)
(20,13,1)
(7,15,1)
(1,17,1)
(12,2,1)
(15,16,1)
(16,18,1)
(21,14,1)
(5,14,2)
(7,14,2)
(2,14,2)
(15,14,2)
(16,14,2)
(2,7,2)
(12,2,2)
(18,14,2)
(12,14,2)
-----------------------------------
(0,if(5==5)
(1,5==5)
(2,result = data * data)
(3,5)
(4,)
(5,result)
(6,)
(7,data * data)
(8,result)
(9,)
(10,if(5==5)
(11,data)
(12,printLongLongLine(result)
(13,L)
(14,5==5)
(15,data)
(16,data)
(17,5)
(18,result)
(19,5)
(20,5)
(21,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^