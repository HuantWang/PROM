-----label-----
1
-----code-----
char CWE190_Integer_Overflow__char_rand_multiply_61b_badSource(char data)
{
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
11,12
11,13
12,13
14,15
14,16
15,16
15,17
18,19
19,20
21,22
22,23
-----nextToken-----
2,4,6,8,13,16,17,20,23
-----computeFrom-----
11,12
11,13
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
char CWE190_Integer_Overflow__char_rand_multiply_61b_badSource(char data){    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    return data;}
char
CWE190_Integer_Overflow__char_rand_multiply_61b_badSource(char data)
CWE190_Integer_Overflow__char_rand_multiply_61b_badSource
char data
char
data
data
{    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    return data;}
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
return data;
data
data
-----joern-----
(3,7,0)
(4,2,0)
(8,5,0)
(2,5,0)
(5,0,0)
(6,3,0)
(5,3,0)
(3,5,0)
(2,0,0)
(3,6,0)
(1,2,0)
(7,3,0)
(2,9,0)
(5,9,0)
(6,8,1)
(3,6,1)
(2,5,1)
(4,2,1)
(2,1,1)
(5,9,1)
(3,7,1)
(1,5,1)
(2,9,1)
(5,3,1)
(4,2,2)
(3,7,2)
(2,9,2)
(5,9,2)
(3,6,2)
(2,5,2)
(5,3,2)
-----------------------------------
(0,)
(1,data)
(2,return data;)
(3,(char)
(4,RET)
(5,data = (char)
(6,RAND32()
(7,char)
(8,data)
(9,char data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^