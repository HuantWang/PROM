-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_add_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            short result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,52,56,58,63,65,69,71,75,76,80,82,87,88
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
61,62
61,63
73,74
73,75
-----guardedBy-----
63,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_add_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_fscanf_add_12_bad()
CWE190_Integer_Overflow__short_fscanf_add_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(24,0,0)
(36,27,0)
(28,34,0)
(28,17,0)
(20,12,0)
(15,39,0)
(12,38,0)
(32,30,0)
(2,43,0)
(45,28,0)
(38,12,0)
(22,29,0)
(18,36,0)
(32,43,0)
(7,15,0)
(39,15,0)
(33,3,0)
(15,27,0)
(43,34,0)
(8,34,0)
(5,22,0)
(39,17,0)
(42,34,0)
(3,30,0)
(17,0,0)
(21,0,0)
(13,27,0)
(43,32,0)
(34,4,0)
(3,32,0)
(46,31,0)
(39,34,0)
(19,38,0)
(14,39,0)
(26,39,0)
(25,17,0)
(36,15,0)
(1,32,0)
(40,28,0)
(9,0,0)
(44,17,0)
(12,17,0)
(38,16,0)
(41,43,0)
(23,38,0)
(30,37,0)
(35,30,0)
(43,17,0)
(15,39,1)
(45,40,1)
(40,11,1)
(22,5,1)
(23,6,1)
(20,19,1)
(10,3,1)
(17,44,1)
(39,14,1)
(41,2,1)
(36,15,1)
(2,1,1)
(39,17,1)
(33,32,1)
(7,28,1)
(11,38,1)
(3,33,1)
(44,25,1)
(12,17,1)
(6,17,1)
(1,11,1)
(10,36,1)
(14,26,1)
(39,34,1)
(43,17,1)
(34,42,1)
(42,8,1)
(38,12,1)
(12,20,1)
(8,6,1)
(19,23,1)
(28,45,1)
(18,15,1)
(11,34,1)
(36,18,1)
(10,22,1)
(28,34,1)
(32,43,1)
(5,28,1)
(43,34,1)
(3,32,1)
(43,41,1)
(26,7,1)
(28,17,1)
(12,17,2)
(32,11,2)
(15,28,2)
(43,11,2)
(28,11,2)
(39,28,2)
(2,11,2)
(42,6,2)
(3,11,2)
(43,34,2)
(39,17,2)
(34,6,2)
(5,28,2)
(38,12,2)
(12,6,2)
(20,6,2)
(15,39,2)
(8,6,2)
(45,11,2)
(26,28,2)
(23,6,2)
(7,28,2)
(43,17,2)
(14,28,2)
(3,32,2)
(28,34,2)
(41,11,2)
(40,11,2)
(39,34,2)
(36,15,2)
(33,11,2)
(19,6,2)
(38,6,2)
(36,28,2)
(1,11,2)
(18,28,2)
(32,43,2)
(22,28,2)
(28,17,2)
-----------------------------------
(0,)
(1,result)
(2,data)
(3,printIntLine(result)
(4,)
(5,"data value is too large to perform arithmetic safely.")
(6,globalReturnsTrueOrFalse()
(7,result)
(8,data)
(9,data)
(10,RET)
(11,globalReturnsTrueOrFalse()
(12,&data)
(13,result)
(14,1)
(15,result = data + 1)
(16,)
(17,data = 0)
(18,result)
(19,"%hd")
(20,data)
(21,if(globalReturnsTrueOrFalse()
(22,printLine("data value is too large to perform arithmetic safely.")
(23,stdin)
(24,if(globalReturnsTrueOrFalse()
(25,data)
(26,data)
(27,)
(28,data < SHRT_MAX)
(29,)
(30,)
(31,)
(32,result = data + 1)
(33,result)
(34,data = 2)
(35,result)
(36,printIntLine(result)
(37,)
(38,fscanf (stdin, "%hd", &data)
(39,data + 1)
(40,data)
(41,1)
(42,2)
(43,data + 1)
(44,0)
(45,SHRT_MAX)
(46,if (data < SHRT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^