-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_08_bad()
CWE190_Integer_Overflow__char_max_multiply_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,23,0)
(4,17,0)
(16,10,0)
(17,26,0)
(15,22,0)
(0,19,0)
(14,22,0)
(27,16,0)
(8,0,0)
(0,10,0)
(24,16,0)
(7,2,0)
(10,19,0)
(18,23,0)
(20,23,0)
(11,17,0)
(22,17,0)
(3,10,0)
(22,2,0)
(16,17,0)
(28,12,0)
(21,2,0)
(6,19,0)
(10,16,0)
(16,2,0)
(5,23,0)
(0,10,1)
(17,11,1)
(22,17,1)
(25,22,1)
(24,3,1)
(2,7,1)
(3,22,1)
(22,2,1)
(8,10,1)
(16,2,1)
(13,17,1)
(10,16,1)
(15,13,1)
(7,21,1)
(22,14,1)
(25,13,1)
(13,1,1)
(16,17,1)
(14,15,1)
(11,4,1)
(16,27,1)
(27,24,1)
(25,0,1)
(0,8,1)
(1,2,1)
(4,1,1)
(17,1,2)
(15,13,2)
(3,22,2)
(16,2,2)
(22,2,2)
(22,17,2)
(11,1,2)
(24,22,2)
(14,13,2)
(4,1,2)
(0,22,2)
(0,10,2)
(8,22,2)
(16,17,2)
(16,22,2)
(10,16,2)
(27,22,2)
(22,13,2)
(10,22,2)
-----------------------------------
(0,printHexCharLine(result)
(1,staticReturnsTrue()
(2,data = \' \')
(3,result)
(4,data)
(5,if(staticReturnsTrue()
(6,result)
(7,' ')
(8,result)
(9,data = ' ')
(10,result = data * 2)
(11,CHAR_MAX)
(12,)
(13,staticReturnsTrue()
(14,0)
(15,data)
(16,data * 2)
(17,data = CHAR_MAX)
(18,if(staticReturnsTrue()
(19,)
(20,data)
(21,data)
(22,data > 0)
(23,)
(24,data)
(25,RET)
(26,)
(27,2)
(28,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^