-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (CHAR_MAX/2))
            {
                char result = data * 2;
                printHexCharLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,42,46,48,52,53,57,59,64,65,70,74,75,79,81,85,86,90,92,97,98
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
39,40
39,41
50,51
50,52
62,63
62,64
68,69
68,70
72,73
72,74
83,84
83,85
-----guardedBy-----
41,52
64,85
70,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_12_bad()
CWE190_Integer_Overflow__char_max_multiply_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (CHAR_MAX/2))            {                char result = data * 2;                printHexCharLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (CHAR_MAX/2)
data
data
(CHAR_MAX/2)
CHAR_MAX/2
CHAR_MAX
CHAR_MAX
2
{                char result = data * 2;                printHexCharLine(result);            }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(19,54,0)
(31,54,0)
(41,54,0)
(35,54,0)
(46,49,0)
(28,41,0)
(36,51,0)
(28,23,0)
(22,15,0)
(3,35,0)
(39,1,0)
(33,25,0)
(31,49,0)
(4,33,0)
(41,28,0)
(5,32,0)
(1,32,0)
(42,46,0)
(6,18,0)
(41,49,0)
(8,49,0)
(12,31,0)
(50,23,0)
(34,25,0)
(54,7,0)
(1,18,0)
(14,42,0)
(10,31,0)
(45,25,0)
(13,19,0)
(48,54,0)
(46,54,0)
(37,46,0)
(49,26,0)
(47,33,0)
(50,28,0)
(2,49,0)
(24,50,0)
(53,35,0)
(38,25,0)
(46,42,0)
(30,54,0)
(51,55,0)
(40,21,0)
(29,28,0)
(35,32,0)
(35,49,0)
(9,52,0)
(11,41,0)
(32,35,0)
(20,23,0)
(17,19,0)
(19,49,0)
(27,41,0)
(32,18,0)
(0,42,0)
(32,35,1)
(31,12,1)
(10,16,1)
(51,36,1)
(39,32,1)
(43,19,1)
(3,5,1)
(44,33,1)
(35,54,1)
(19,13,1)
(33,4,1)
(13,17,1)
(17,16,1)
(41,54,1)
(46,54,1)
(31,49,1)
(48,30,1)
(0,14,1)
(43,50,1)
(41,49,1)
(28,41,1)
(37,31,1)
(31,54,1)
(24,28,1)
(16,49,1)
(19,54,1)
(14,37,1)
(54,48,1)
(50,28,1)
(43,51,1)
(16,54,1)
(29,46,1)
(30,44,1)
(27,29,1)
(43,31,1)
(36,46,1)
(35,53,1)
(49,2,1)
(12,10,1)
(50,24,1)
(53,3,1)
(19,49,1)
(11,27,1)
(1,39,1)
(5,19,1)
(2,8,1)
(43,1,1)
(4,47,1)
(1,32,1)
(8,44,1)
(41,11,1)
(46,42,1)
(42,0,1)
(35,49,1)
(46,49,1)
(37,31,2)
(42,31,2)
(0,31,2)
(30,44,2)
(14,31,2)
(46,49,2)
(46,54,2)
(3,19,2)
(10,16,2)
(36,46,2)
(54,44,2)
(39,19,2)
(32,19,2)
(19,49,2)
(24,46,2)
(49,44,2)
(19,16,2)
(41,49,2)
(35,54,2)
(46,31,2)
(50,46,2)
(32,35,2)
(27,46,2)
(1,32,2)
(17,16,2)
(2,44,2)
(50,28,2)
(31,49,2)
(41,46,2)
(13,16,2)
(31,54,2)
(35,49,2)
(28,46,2)
(28,41,2)
(1,19,2)
(12,16,2)
(31,16,2)
(19,54,2)
(35,19,2)
(48,44,2)
(11,46,2)
(46,42,2)
(41,54,2)
(5,19,2)
(8,44,2)
(51,46,2)
(53,19,2)
(29,46,2)
-----------------------------------
(0,2)
(1,printHexCharLine(result)
(2,2)
(3,data)
(4,\\\' \\\')
(5,result)
(6,result)
(7,)
(8,data)
(9,if (data < (CHAR_MAX/2)
(10,data)
(11,2)
(12,0)
(13,0)
(14,CHAR_MAX)
(15,)
(16,globalReturnsTrueOrFalse()
(17,data)
(18,)
(19,data > 0)
(20,result)
(21,)
(22,if(data > 0)
(23,)
(24,result)
(25,)
(26,)
(27,data)
(28,result = data * 2)
(29,result)
(30,data)
(31,data > 0)
(32,result = data * 2)
(33,data = \\\' \\\')
(34,if(globalReturnsTrueOrFalse()
(35,data * 2)
(36,"data value is too large to perform arithmetic safely.")
(37,data)
(38,if(globalReturnsTrueOrFalse()
(39,result)
(40,if(data > 0)
(41,data * 2)
(42,CHAR_MAX/2)
(43,RET)
(44,globalReturnsTrueOrFalse()
(45,data)
(46,data < (CHAR_MAX/2)
(47,data)
(48,CHAR_MAX)
(49,data = 2)
(50,printHexCharLine(result)
(51,printLine("data value is too large to perform arithmetic safely.")
(52,)
(53,2)
(54,data = CHAR_MAX)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^