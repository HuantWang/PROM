-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_square_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
48,50
49,50
49,51
49,52
49,53
49,54
49,55
49,56
49,57
49,58
49,59
49,60
50,51
51,52
51,53
52,53
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
76,77
79,80
80,81
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
117,120
117,121
118,119
120,121
122,123
122,124
123,124
123,125
124,125
126,127
128,129
129,130
131,132
132,133
133,134
135,136
137,138
139,140
140,141
140,142
141,142
143,144
143,145
143,146
143,147
143,148
144,145
146,147
148,149
150,151
150,152
151,152
155,156
155,157
156,157
156,158
157,158
157,159
158,159
160,161
162,163
162,164
163,164
166,167
168,169
169,170
169,171
170,171
170,172
171,172
173,174
176,177
177,178
177,179
178,179
180,181
180,182
181,182
183,184
186,187
186,188
187,188
187,189
188,189
190,191
192,193
193,194
194,195
194,196
195,196
197,198
199,200
199,201
201,202
202,203
202,204
203,204
204,205
204,206
206,207
206,208
208,209
209,210
209,211
210,211
212,213
214,215
215,216
215,217
216,217
218,219
-----nextToken-----
2,4,8,10,14,15,17,22,24,28,30,34,36,39,42,44,47,53,56,58,60,62,66,68,70,74,77,78,82,87,88,90,96,97,98,101,103,108,109,112,114,119,121,125,127,130,134,136,138,142,145,147,149,152,153,154,159,161,164,165,167,172,174,175,179,182,184,185,189,191,196,198,200,205,207,211,213,217,219
-----computeFrom-----
12,13
12,14
51,52
51,53
64,65
64,66
84,85
84,86
92,93
92,94
105,106
105,107
116,117
116,118
140,141
140,142
150,151
150,152
156,157
156,158
157,158
157,159
162,163
162,164
169,170
169,171
177,178
177,179
187,188
187,189
209,210
209,211
-----guardedBy-----
189,198
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_square_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_connect_socket_square_02_bad()
CWE190_Integer_Overflow__int_connect_socket_square_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(71,35,0)
(57,109,0)
(12,30,0)
(31,57,0)
(11,118,0)
(6,57,0)
(25,140,0)
(59,30,0)
(38,81,0)
(131,40,0)
(0,22,0)
(27,137,0)
(63,64,0)
(7,140,0)
(87,49,0)
(30,107,0)
(68,141,0)
(125,70,0)
(55,130,0)
(117,40,0)
(141,117,0)
(80,84,0)
(121,99,0)
(23,40,0)
(111,30,0)
(101,49,0)
(64,97,0)
(62,2,0)
(49,136,0)
(72,8,0)
(99,128,0)
(74,57,0)
(133,57,0)
(24,29,0)
(83,13,0)
(110,35,0)
(21,49,0)
(13,107,0)
(20,57,0)
(75,94,0)
(71,7,0)
(17,66,0)
(98,40,0)
(9,107,0)
(49,21,0)
(22,40,0)
(18,129,0)
(77,81,0)
(29,30,0)
(49,107,0)
(76,40,0)
(71,76,0)
(49,101,0)
(70,40,0)
(35,108,0)
(26,13,0)
(81,57,0)
(78,86,0)
(8,98,0)
(64,139,0)
(89,101,0)
(124,133,0)
(46,90,0)
(52,133,0)
(4,57,0)
(79,84,0)
(127,101,0)
(58,139,0)
(51,40,0)
(115,97,0)
(101,89,0)
(123,98,0)
(96,2,0)
(14,63,0)
(82,94,0)
(28,108,0)
(91,71,0)
(1,129,0)
(50,117,0)
(113,50,0)
(30,117,0)
(50,22,0)
(56,76,0)
(34,5,0)
(19,57,0)
(94,117,0)
(94,75,0)
(76,118,0)
(102,1,0)
(32,34,0)
(126,141,0)
(25,7,0)
(107,13,0)
(54,57,0)
(33,32,0)
(130,40,0)
(41,108,0)
(42,130,0)
(140,135,0)
(105,13,0)
(61,40,0)
(66,130,0)
(88,114,0)
(93,29,0)
(15,136,0)
(98,123,0)
(48,55,0)
(84,133,0)
(136,49,0)
(119,71,0)
(132,21,0)
(44,86,0)
(84,107,0)
(107,40,0)
(118,76,0)
(30,29,0)
(141,75,0)
(2,32,0)
(10,97,0)
(34,40,0)
(16,57,0)
(60,112,0)
(99,133,0)
(95,50,0)
(134,117,0)
(129,40,0)
(64,63,0)
(75,141,0)
(116,7,0)
(130,66,0)
(86,107,0)
(53,35,0)
(92,108,0)
(99,107,0)
(5,34,0)
(101,127,0)
(130,55,0)
(73,25,0)
(39,1,0)
(67,140,0)
(106,8,0)
(32,2,0)
(97,64,0)
(120,5,0)
(100,123,0)
(7,71,0)
(138,70,0)
(69,45,0)
(122,94,0)
(37,127,0)
(117,30,0)
(139,64,0)
(3,57,0)
(132,101,1)
(30,107,1)
(139,58,1)
(50,117,1)
(71,35,1)
(10,133,1)
(59,29,1)
(100,8,1)
(49,101,1)
(97,115,1)
(14,97,1)
(117,30,1)
(139,64,1)
(60,136,1)
(86,44,1)
(99,107,1)
(102,130,1)
(124,52,1)
(32,33,1)
(98,123,1)
(56,22,1)
(70,125,1)
(79,46,1)
(2,62,1)
(47,65,1)
(94,117,1)
(36,47,1)
(81,38,1)
(13,105,1)
(47,43,1)
(133,124,1)
(75,94,1)
(73,7,1)
(34,5,1)
(104,76,1)
(122,141,1)
(136,15,1)
(25,73,1)
(115,10,1)
(78,107,1)
(71,91,1)
(76,118,1)
(43,99,1)
(113,75,1)
(136,49,1)
(77,65,1)
(141,68,1)
(129,18,1)
(118,11,1)
(37,87,1)
(88,43,1)
(130,55,1)
(134,136,1)
(120,32,1)
(42,55,1)
(21,132,1)
(25,7,1)
(96,129,1)
(64,97,1)
(53,110,1)
(43,84,1)
(101,127,1)
(9,70,1)
(30,59,1)
(17,42,1)
(75,141,1)
(127,37,1)
(30,29,1)
(116,47,1)
(106,34,1)
(86,107,1)
(123,100,1)
(44,78,1)
(5,120,1)
(83,9,1)
(95,113,1)
(29,93,1)
(107,13,1)
(22,0,1)
(99,121,1)
(121,84,1)
(72,106,1)
(38,77,1)
(68,126,1)
(35,53,1)
(82,122,1)
(141,117,1)
(24,12,1)
(125,138,1)
(58,64,1)
(1,39,1)
(94,82,1)
(62,96,1)
(18,1,1)
(69,86,1)
(49,21,1)
(11,56,1)
(64,63,1)
(79,27,1)
(84,80,1)
(111,134,1)
(91,119,1)
(87,98,1)
(47,88,1)
(66,17,1)
(65,35,1)
(84,107,1)
(71,76,1)
(80,79,1)
(0,50,1)
(32,2,1)
(55,48,1)
(36,25,1)
(15,49,1)
(50,95,1)
(138,139,1)
(63,14,1)
(84,133,1)
(93,24,1)
(8,72,1)
(12,111,1)
(33,2,1)
(130,66,1)
(49,107,1)
(10,104,1)
(46,75,1)
(52,81,1)
(79,60,1)
(99,133,1)
(27,139,1)
(26,83,1)
(119,116,1)
(7,71,1)
(79,104,1)
(79,69,1)
(39,102,1)
(105,26,1)
(126,117,1)
(48,86,1)
(101,89,1)
(21,86,2)
(86,139,2)
(84,133,2)
(64,104,2)
(56,75,2)
(49,86,2)
(0,75,2)
(87,86,2)
(141,136,2)
(7,47,2)
(84,65,2)
(115,65,2)
(75,94,2)
(123,86,2)
(107,13,2)
(26,139,2)
(7,71,2)
(106,86,2)
(118,75,2)
(122,141,2)
(71,47,2)
(52,65,2)
(13,139,2)
(12,136,2)
(30,136,2)
(34,86,2)
(136,49,2)
(95,75,2)
(117,30,2)
(34,5,2)
(124,65,2)
(98,123,2)
(22,75,2)
(50,117,2)
(50,75,2)
(130,66,2)
(101,127,2)
(69,86,2)
(115,104,2)
(97,104,2)
(101,89,2)
(32,86,2)
(64,97,2)
(25,7,2)
(94,117,2)
(68,136,2)
(60,136,2)
(94,141,2)
(136,86,2)
(139,65,2)
(2,86,2)
(141,117,2)
(76,118,2)
(48,86,2)
(130,86,2)
(63,104,2)
(55,86,2)
(84,107,2)
(30,29,2)
(101,86,2)
(64,63,2)
(81,65,2)
(49,107,2)
(72,86,2)
(39,86,2)
(139,64,2)
(71,35,2)
(18,86,2)
(49,21,2)
(63,65,2)
(11,75,2)
(120,86,2)
(104,75,2)
(132,86,2)
(93,136,2)
(17,86,2)
(33,86,2)
(42,86,2)
(139,104,2)
(38,65,2)
(117,136,2)
(10,65,2)
(129,86,2)
(64,65,2)
(59,136,2)
(58,104,2)
(14,104,2)
(70,139,2)
(71,76,2)
(116,47,2)
(91,47,2)
(76,75,2)
(75,141,2)
(121,84,2)
(27,139,2)
(15,86,2)
(119,47,2)
(107,139,2)
(66,86,2)
(37,86,2)
(25,47,2)
(126,136,2)
(138,139,2)
(58,65,2)
(24,136,2)
(133,65,2)
(44,139,2)
(8,86,2)
(96,86,2)
(73,47,2)
(79,65,2)
(99,133,2)
(100,86,2)
(134,136,2)
(99,107,2)
(30,107,2)
(78,139,2)
(9,139,2)
(127,86,2)
(102,86,2)
(130,55,2)
(77,65,2)
(98,86,2)
(83,139,2)
(10,104,2)
(46,75,2)
(1,86,2)
(125,139,2)
(111,136,2)
(80,65,2)
(49,101,2)
(86,107,2)
(88,43,2)
(29,136,2)
(43,65,2)
(97,65,2)
(99,84,2)
(32,2,2)
(113,75,2)
(5,86,2)
(82,141,2)
(75,136,2)
(62,86,2)
(14,65,2)
(105,139,2)
-----------------------------------
(0,'\\\\0')
(1,service.sin_family)
(2,service.sin_addr)
(3,service)
(4,recvResult)
(5,inet_addr(IP_ADDRESS)
(6,if (wsaDataInit)
(7,result = data * data)
(8,service.sin_port)
(9,connectSocket)
(10,2)
(11,inputBuffer)
(12,inputBuffer)
(13,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(14,wsaData)
(15,SOCKET_ERROR)
(16,wsaData)
(17,service)
(18,AF_INET)
(19,wsaDataInit)
(20,if (connectSocket != INVALID_SOCKET)
(21,sizeof(service)
(22,inputBuffer[recvResult] = \'\\\\0\')
(23,if (recvResult == SOCKET_ERROR || recvResult == 0)
(24,CHAR_ARRAY_SIZE)
(25,printIntLine(result)
(26,SOCK_STREAM)
(27,break;)
(28,if(1)
(29,CHAR_ARRAY_SIZE - 1)
(30,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(31,inputBuffer)
(32,service.sin_addr.s_addr)
(33,s_addr)
(34,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(35,data = 0)
(36,RET)
(37,service)
(38,0)
(39,sin_family)
(40,)
(41,data)
(42,0)
(43,wsaDataInit)
(44,INVALID_SOCKET)
(45,)
(46,break;)
(47,1)
(48,service)
(49,connect(connectSocket, (struct sockaddr*)
(50,inputBuffer[recvResult])
(51,if (WSAStartup(MAKEWORD(2,2)
(52,connectSocket)
(53,0)
(54,connectSocket)
(55,&service)
(56,data)
(57,)
(58,NO_ERROR)
(59,0)
(60,break;)
(61,if (connectSocket == INVALID_SOCKET)
(62,sin_addr)
(63,&wsaData)
(64,WSAStartup(MAKEWORD(2,2)
(65,1)
(66,sizeof(service)
(67,result)
(68,SOCKET_ERROR)
(69,break;)
(70,wsaDataInit = 1)
(71,data * data)
(72,sin_port)
(73,result)
(74,do)
(75,recvResult == SOCKET_ERROR || recvResult == 0)
(76,data = atoi(inputBuffer)
(77,wsaDataInit)
(78,connectSocket)
(79,connectSocket)
(80,INVALID_SOCKET)
(81,wsaDataInit = 0)
(82,0)
(83,AF_INET)
(84,connectSocket != INVALID_SOCKET)
(85,inputBuffer[recvResult] = '\\\\0')
(86,connectSocket == INVALID_SOCKET)
(87,connectSocket)
(88,WSACleanup()
(89,struct sockaddr*)
(90,)
(91,data)
(92,if(1)
(93,1)
(94,recvResult == 0)
(95,recvResult)
(96,service)
(97,MAKEWORD(2,2)
(98,service.sin_port = htons(TCP_PORT)
(99,CLOSE_SOCKET(connectSocket)
(100,TCP_PORT)
(101,(struct sockaddr*)
(102,service)
(103,\'\\\\0\')
(104,0)
(105,IPPROTO_TCP)
(106,service)
(107,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(108,)
(109,)
(110,data)
(111,connectSocket)
(112,)
(113,inputBuffer)
(114,)
(115,2)
(116,result)
(117,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(118,atoi(inputBuffer)
(119,data)
(120,IP_ADDRESS)
(121,connectSocket)
(122,recvResult)
(123,htons(TCP_PORT)
(124,INVALID_SOCKET)
(125,1)
(126,recvResult)
(127,&service)
(128,)
(129,service.sin_family = AF_INET)
(130,memset(&service, 0, sizeof(service)
(131,if (connect(connectSocket, (struct sockaddr*)
(132,service)
(133,connectSocket = INVALID_SOCKET)
(134,recvResult)
(135,)
(136,connect(connectSocket, (struct sockaddr*)
(137,)
(138,wsaDataInit)
(139,WSAStartup(MAKEWORD(2,2)
(140,)
(141,recvResult == SOCKET_ERROR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^