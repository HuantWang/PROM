-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,32,36,38,42,43,47,49
-----computeFrom-----
12,13
12,14
20,21
20,22
29,30
29,31
40,41
40,42
-----guardedBy-----
31,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_02_bad()
CWE190_Integer_Overflow__int_max_multiply_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(18,25,0)
(20,24,0)
(16,7,0)
(5,27,0)
(11,1,0)
(9,10,0)
(15,19,0)
(7,16,0)
(17,19,0)
(14,16,0)
(23,10,0)
(19,27,0)
(24,21,0)
(12,27,0)
(16,24,0)
(1,7,0)
(27,10,0)
(19,24,0)
(4,10,0)
(7,25,0)
(2,13,0)
(0,7,0)
(22,16,0)
(1,25,0)
(3,24,0)
(16,27,0)
(7,16,1)
(8,27,1)
(16,14,1)
(19,27,1)
(20,8,1)
(5,12,1)
(16,24,1)
(1,7,1)
(26,24,1)
(19,15,1)
(11,7,1)
(22,0,1)
(24,3,1)
(0,19,1)
(27,5,1)
(14,22,1)
(16,27,1)
(19,24,1)
(3,20,1)
(6,26,1)
(6,1,1)
(26,8,1)
(15,17,1)
(17,26,1)
(1,11,1)
(6,19,1)
(15,26,2)
(20,8,2)
(16,24,2)
(16,19,2)
(3,8,2)
(7,16,2)
(11,19,2)
(17,26,2)
(19,24,2)
(7,19,2)
(0,19,2)
(16,27,2)
(19,27,2)
(1,19,2)
(24,8,2)
(19,26,2)
(14,19,2)
(1,7,2)
(22,19,2)
-----------------------------------
(0,result)
(1,printIntLine(result)
(2,if(data > 0)
(3,INT_MAX)
(4,if(1)
(5,0)
(6,RET)
(7,result = data * 2)
(8,1)
(9,data)
(10,)
(11,result)
(12,data)
(13,)
(14,2)
(15,0)
(16,data * 2)
(17,data)
(18,result)
(19,data > 0)
(20,data)
(21,)
(22,data)
(23,if(1)
(24,data = INT_MAX)
(25,)
(26,1)
(27,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^