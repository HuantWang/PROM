-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
66,68
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
67,76
67,77
67,78
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
94,95
97,98
98,99
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
131,132
133,134
133,135
134,135
134,136
135,136
135,137
135,138
135,139
136,137
138,139
140,141
140,142
141,142
141,143
142,143
144,145
146,147
147,148
149,150
150,151
151,152
153,154
155,156
157,158
158,159
158,160
159,160
161,162
161,163
161,164
161,165
161,166
162,163
164,165
166,167
168,169
168,170
169,170
173,174
173,175
174,175
174,176
175,176
175,177
176,177
178,179
180,181
180,182
181,182
184,185
186,187
187,188
187,189
188,189
188,190
189,190
191,192
194,195
195,196
195,197
196,197
198,199
198,200
199,200
201,202
204,205
204,206
205,206
205,207
206,207
208,209
210,211
211,212
212,213
212,214
213,214
215,216
217,218
217,219
217,220
217,221
218,219
219,220
219,221
220,221
223,224
223,225
224,225
227,228
228,229
230,231
231,232
231,233
232,233
232,234
233,234
236,237
236,238
237,238
238,239
238,240
240,241
240,242
242,243
243,244
243,245
244,245
247,248
248,249
248,250
249,250
251,252
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,46,48,52,54,57,60,62,65,71,74,76,78,80,84,86,88,92,95,96,100,105,106,108,114,115,116,119,121,126,127,130,132,137,139,143,145,148,152,154,156,160,163,165,167,170,171,172,177,179,182,183,185,190,192,193,197,200,202,203,207,209,214,216,221,222,225,226,229,234,235,239,241,245,246,250,252
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
69,70
69,71
82,83
82,84
102,103
102,104
110,111
110,112
123,124
123,125
134,135
134,136
158,159
158,160
168,169
168,170
174,175
174,176
175,176
175,177
180,181
180,182
187,188
187,189
195,196
195,197
205,206
205,207
219,220
219,221
223,224
223,225
232,233
232,234
243,244
243,245
-----guardedBy-----
207,216
234,245
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_connect_socket_multiply_17_bad()
CWE190_Integer_Overflow__int_connect_socket_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(53,55,0)
(82,98,0)
(57,73,0)
(112,122,0)
(26,94,0)
(100,5,0)
(1,95,0)
(116,111,0)
(161,36,0)
(70,139,0)
(2,142,0)
(91,7,0)
(25,65,0)
(68,126,0)
(18,74,0)
(57,149,0)
(44,19,0)
(157,111,0)
(65,135,0)
(156,76,0)
(120,111,0)
(148,137,0)
(133,109,0)
(73,57,0)
(28,47,0)
(100,65,0)
(22,6,0)
(65,25,0)
(93,98,0)
(38,79,0)
(146,103,0)
(152,124,0)
(102,69,0)
(51,0,0)
(154,81,0)
(117,0,0)
(77,27,0)
(118,122,0)
(138,149,0)
(71,104,0)
(84,78,0)
(81,32,0)
(100,64,0)
(97,140,0)
(121,51,0)
(56,124,0)
(131,68,0)
(119,140,0)
(158,78,0)
(113,80,0)
(39,0,0)
(54,98,0)
(59,77,0)
(161,122,0)
(21,107,0)
(85,77,0)
(16,25,0)
(20,77,0)
(128,36,0)
(37,1,0)
(61,94,0)
(17,65,0)
(160,77,0)
(111,157,0)
(86,52,0)
(136,98,0)
(49,116,0)
(108,77,0)
(96,130,0)
(30,26,0)
(79,26,0)
(64,100,0)
(111,122,0)
(134,73,0)
(58,126,0)
(5,100,0)
(12,76,0)
(135,65,0)
(150,98,0)
(130,32,0)
(149,142,0)
(109,116,0)
(45,150,0)
(101,116,0)
(110,74,0)
(65,100,0)
(76,95,0)
(15,122,0)
(99,141,0)
(14,6,0)
(75,60,0)
(125,10,0)
(94,26,0)
(151,153,0)
(123,73,0)
(142,140,0)
(80,113,0)
(144,124,0)
(33,67,0)
(55,78,0)
(4,47,0)
(149,57,0)
(159,126,0)
(23,137,0)
(90,92,0)
(109,6,0)
(147,77,0)
(19,67,0)
(72,84,0)
(145,5,0)
(107,153,0)
(116,150,0)
(13,114,0)
(3,75,0)
(115,140,0)
(43,130,0)
(142,122,0)
(104,80,0)
(11,97,0)
(80,137,0)
(19,142,0)
(127,139,0)
(26,79,0)
(32,122,0)
(141,77,0)
(29,149,0)
(83,141,0)
(81,74,0)
(9,22,0)
(24,150,0)
(51,161,0)
(0,51,0)
(65,32,0)
(74,77,0)
(62,113,0)
(75,32,0)
(95,122,0)
(32,124,0)
(67,122,0)
(132,77,0)
(35,157,0)
(139,122,0)
(46,122,0)
(87,135,0)
(124,32,0)
(66,78,0)
(80,104,0)
(106,52,0)
(73,142,0)
(22,109,0)
(47,111,0)
(52,126,0)
(48,55,0)
(63,77,0)
(47,150,0)
(26,122,0)
(140,142,0)
(75,74,0)
(137,80,0)
(140,32,0)
(95,1,0)
(40,98,0)
(129,32,0)
(42,81,0)
(36,161,0)
(153,122,0)
(140,97,0)
(116,109,0)
(8,97,0)
(31,107,0)
(50,77,0)
(34,140,0)
(155,19,0)
(84,72,1)
(150,45,1)
(141,99,1)
(102,104,1)
(8,11,1)
(129,139,1)
(143,81,1)
(154,102,1)
(70,104,1)
(138,29,1)
(65,135,1)
(34,97,1)
(80,113,1)
(140,34,1)
(154,90,1)
(143,75,1)
(124,56,1)
(39,117,1)
(116,49,1)
(86,126,1)
(113,62,1)
(0,39,1)
(75,3,1)
(31,26,1)
(78,158,1)
(53,78,1)
(17,95,1)
(67,33,1)
(81,32,1)
(131,22,1)
(75,32,1)
(68,131,1)
(130,43,1)
(152,144,1)
(43,96,1)
(72,91,1)
(22,9,1)
(151,107,1)
(100,5,1)
(111,157,1)
(65,32,1)
(28,4,1)
(65,100,1)
(51,0,1)
(19,142,1)
(71,80,1)
(84,78,1)
(90,57,1)
(123,134,1)
(2,25,1)
(104,80,1)
(159,55,1)
(3,81,1)
(30,94,1)
(1,37,1)
(12,161,1)
(25,16,1)
(148,74,1)
(36,128,1)
(120,67,1)
(61,130,1)
(86,68,1)
(139,127,1)
(110,18,1)
(66,150,1)
(149,142,1)
(156,12,1)
(107,21,1)
(157,35,1)
(117,153,1)
(44,155,1)
(134,149,1)
(58,159,1)
(51,121,1)
(145,17,1)
(57,73,1)
(19,44,1)
(53,84,1)
(109,116,1)
(126,58,1)
(153,151,1)
(99,83,1)
(32,124,1)
(76,156,1)
(154,125,1)
(81,74,1)
(87,100,1)
(68,126,1)
(142,140,1)
(130,32,1)
(16,65,1)
(47,150,1)
(140,97,1)
(38,30,1)
(81,42,1)
(35,120,1)
(97,8,1)
(88,111,1)
(62,137,1)
(100,64,1)
(116,111,1)
(52,106,1)
(146,130,1)
(4,52,1)
(116,150,1)
(95,1,1)
(49,101,1)
(137,23,1)
(37,76,1)
(158,66,1)
(154,146,1)
(55,48,1)
(42,154,1)
(96,32,1)
(128,51,1)
(74,110,1)
(45,24,1)
(52,126,1)
(29,142,1)
(23,148,1)
(140,32,1)
(154,88,1)
(18,141,1)
(73,142,1)
(94,61,1)
(48,53,1)
(161,36,1)
(33,19,1)
(106,86,1)
(21,31,1)
(73,123,1)
(133,47,1)
(104,71,1)
(80,137,1)
(22,109,1)
(144,129,1)
(11,119,1)
(135,87,1)
(26,79,1)
(55,78,1)
(57,149,1)
(149,138,1)
(91,143,1)
(47,111,1)
(72,143,1)
(131,47,1)
(47,28,1)
(148,88,1)
(127,70,1)
(115,2,1)
(155,57,1)
(83,55,1)
(101,133,1)
(5,145,1)
(105,52,1)
(121,0,1)
(25,65,1)
(119,115,1)
(75,74,1)
(125,25,1)
(9,109,1)
(26,94,1)
(79,38,1)
(56,152,1)
(101,47,2)
(19,57,2)
(104,80,2)
(53,55,2)
(153,130,2)
(83,55,2)
(52,126,2)
(65,130,2)
(131,52,2)
(0,130,2)
(117,130,2)
(120,57,2)
(116,150,2)
(102,104,2)
(65,135,2)
(56,104,2)
(74,55,2)
(67,57,2)
(62,55,2)
(137,55,2)
(61,130,2)
(65,32,2)
(17,130,2)
(148,88,2)
(80,55,2)
(75,74,2)
(76,130,2)
(104,88,2)
(35,57,2)
(142,140,2)
(145,130,2)
(5,130,2)
(84,55,2)
(149,142,2)
(142,25,2)
(12,130,2)
(47,111,2)
(70,104,2)
(84,78,2)
(99,55,2)
(143,55,2)
(81,55,2)
(30,130,2)
(32,104,2)
(113,55,2)
(154,55,2)
(8,25,2)
(44,57,2)
(57,149,2)
(51,130,2)
(88,57,2)
(73,142,2)
(115,25,2)
(31,130,2)
(47,52,2)
(1,130,2)
(3,81,2)
(161,130,2)
(38,130,2)
(155,57,2)
(42,55,2)
(25,130,2)
(96,104,2)
(26,130,2)
(49,47,2)
(124,104,2)
(73,149,2)
(97,25,2)
(36,130,2)
(140,97,2)
(32,124,2)
(47,150,2)
(95,130,2)
(133,47,2)
(123,149,2)
(55,78,2)
(116,111,2)
(43,104,2)
(134,149,2)
(34,25,2)
(128,130,2)
(141,55,2)
(137,88,2)
(111,57,2)
(81,32,2)
(37,130,2)
(146,130,2)
(106,52,2)
(104,55,2)
(22,109,2)
(144,104,2)
(94,130,2)
(18,55,2)
(100,64,2)
(80,88,2)
(80,137,2)
(100,130,2)
(161,36,2)
(156,130,2)
(140,32,2)
(51,0,2)
(57,25,2)
(52,52,2)
(157,57,2)
(125,25,2)
(26,79,2)
(68,52,2)
(90,57,2)
(75,81,2)
(130,32,2)
(39,130,2)
(87,130,2)
(21,130,2)
(110,55,2)
(109,116,2)
(119,25,2)
(2,25,2)
(116,47,2)
(28,52,2)
(100,5,2)
(130,104,2)
(55,55,2)
(4,52,2)
(11,25,2)
(81,74,2)
(29,25,2)
(113,88,2)
(71,88,2)
(149,25,2)
(9,47,2)
(111,157,2)
(109,47,2)
(86,52,2)
(140,25,2)
(138,25,2)
(135,130,2)
(139,104,2)
(95,1,2)
(25,65,2)
(71,55,2)
(80,113,2)
(107,130,2)
(148,55,2)
(72,55,2)
(19,142,2)
(23,88,2)
(151,130,2)
(48,55,2)
(57,73,2)
(121,130,2)
(26,94,2)
(75,32,2)
(152,104,2)
(62,88,2)
(22,47,2)
(16,130,2)
(65,100,2)
(79,130,2)
(91,143,2)
(127,104,2)
(68,126,2)
(129,104,2)
(33,57,2)
(23,55,2)
-----------------------------------
(0,service.sin_addr)
(1,htons(TCP_PORT)
(2,recvResult)
(3,connectSocket)
(4,data)
(5,&service)
(6,)
(7,)
(8,1)
(9,result)
(10,)
(11,CHAR_ARRAY_SIZE)
(12,service)
(13,if(data > 0)
(14,result)
(15,if (WSAStartup(MAKEWORD(2,2)
(16,SOCKET_ERROR)
(17,connectSocket)
(18,connectSocket)
(19,inputBuffer[recvResult])
(20,inputBuffer)
(21,sin_family)
(22,printIntLine(result)
(23,2)
(24,data)
(25,connect(connectSocket, (struct sockaddr*)
(26,memset(&service, 0, sizeof(service)
(27,)
(28,0)
(29,recvResult)
(30,0)
(31,service)
(32,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(33,\'\\\\0\')
(34,0)
(35,inputBuffer)
(36,inet_addr(IP_ADDRESS)
(37,TCP_PORT)
(38,service)
(39,sin_addr)
(40,data)
(41,'\\\\0')
(42,INVALID_SOCKET)
(43,INVALID_SOCKET)
(44,recvResult)
(45,0)
(46,if (connectSocket == INVALID_SOCKET)
(47,data > 0)
(48,1)
(49,2)
(50,service)
(51,service.sin_addr.s_addr)
(52,j < 1)
(53,i)
(54,for(i = 0; i < 1; i++)
(55,i < 1)
(56,IPPROTO_TCP)
(57,recvResult == SOCKET_ERROR || recvResult == 0)
(58,0)
(59,do)
(60,)
(61,service)
(62,wsaData)
(63,recvResult)
(64,struct sockaddr*)
(65,connect(connectSocket, (struct sockaddr*)
(66,i)
(67,inputBuffer[recvResult] = \'\\\\0\')
(68,j++)
(69,)
(70,wsaDataInit)
(71,NO_ERROR)
(72,i)
(73,recvResult == 0)
(74,connectSocket = INVALID_SOCKET)
(75,CLOSE_SOCKET(connectSocket)
(76,service.sin_port)
(77,)
(78,i = 0)
(79,sizeof(service)
(80,WSAStartup(MAKEWORD(2,2)
(81,connectSocket != INVALID_SOCKET)
(82,j)
(83,wsaDataInit)
(84,i++)
(85,connectSocket)
(86,j)
(87,service)
(88,0)
(89,inputBuffer[recvResult] = '\\\\0')
(90,break;)
(91,WSACleanup()
(92,)
(93,for(j = 0; j < 1; j++)
(94,&service)
(95,service.sin_port = htons(TCP_PORT)
(96,connectSocket)
(97,CHAR_ARRAY_SIZE - 1)
(98,)
(99,0)
(100,(struct sockaddr*)
(101,data)
(102,break;)
(103,)
(104,WSAStartup(MAKEWORD(2,2)
(105,RET)
(106,1)
(107,service.sin_family)
(108,if (connectSocket != INVALID_SOCKET)
(109,result = data * 2)
(110,INVALID_SOCKET)
(111,data = atoi(inputBuffer)
(112,if (connect(connectSocket, (struct sockaddr*)
(113,&wsaData)
(114,)
(115,connectSocket)
(116,data * 2)
(117,service)
(118,if (recvResult == SOCKET_ERROR || recvResult == 0)
(119,inputBuffer)
(120,data)
(121,s_addr)
(122,)
(123,0)
(124,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(125,break;)
(126,j = 0)
(127,1)
(128,IP_ADDRESS)
(129,connectSocket)
(130,connectSocket == INVALID_SOCKET)
(131,j)
(132,wsaData)
(133,result)
(134,recvResult)
(135,sizeof(service)
(136,i)
(137,MAKEWORD(2,2)
(138,SOCKET_ERROR)
(139,wsaDataInit = 1)
(140,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(141,wsaDataInit = 0)
(142,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(143,wsaDataInit)
(144,AF_INET)
(145,service)
(146,break;)
(147,if (wsaDataInit)
(148,2)
(149,recvResult == SOCKET_ERROR)
(150,data = 0)
(151,AF_INET)
(152,SOCK_STREAM)
(153,service.sin_family = AF_INET)
(154,connectSocket)
(155,inputBuffer)
(156,sin_port)
(157,atoi(inputBuffer)
(158,0)
(159,j)
(160,wsaDataInit)
(161,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^