-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
52,53
52,54
-----guardedBy-----
43,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_max_multiply_15_bad()
CWE190_Integer_Overflow__char_max_multiply_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,38,0)
(1,15,0)
(4,1,0)
(18,3,0)
(0,15,0)
(13,15,0)
(20,33,0)
(10,29,0)
(28,15,0)
(31,27,0)
(11,34,0)
(27,38,0)
(21,34,0)
(17,27,0)
(31,38,0)
(23,18,0)
(34,33,0)
(21,18,0)
(24,15,0)
(7,31,0)
(14,19,0)
(25,21,0)
(9,3,0)
(12,3,0)
(30,29,0)
(16,33,0)
(39,18,0)
(32,33,0)
(6,21,0)
(27,21,0)
(29,18,0)
(26,34,0)
(2,33,0)
(21,27,0)
(37,15,0)
(8,3,0)
(19,33,0)
(29,34,0)
(29,30,1)
(36,32,1)
(16,34,1)
(29,18,1)
(31,7,1)
(11,22,1)
(21,34,1)
(19,14,1)
(31,27,1)
(35,24,1)
(21,18,1)
(32,19,1)
(21,25,1)
(4,36,1)
(22,18,1)
(7,27,1)
(36,16,1)
(37,31,1)
(17,29,1)
(6,17,1)
(26,11,1)
(10,36,1)
(18,23,1)
(34,26,1)
(29,34,1)
(14,22,1)
(35,37,1)
(1,4,1)
(30,10,1)
(25,6,1)
(24,1,1)
(27,21,1)
(23,39,1)
(37,29,1)
(7,29,2)
(29,34,2)
(29,18,2)
(34,22,2)
(14,22,2)
(26,22,2)
(31,29,2)
(37,36,2)
(17,29,2)
(31,27,2)
(21,34,2)
(24,36,2)
(32,22,2)
(25,29,2)
(19,22,2)
(16,22,2)
(30,36,2)
(27,29,2)
(10,36,2)
(21,18,2)
(11,22,2)
(27,21,2)
(1,36,2)
(6,29,2)
(29,36,2)
(4,36,2)
(21,29,2)
-----------------------------------
(0,case 7:)
(1,printLine("Benign, fixed string")
(2,default:)
(3,)
(4,"Benign, fixed string")
(5,result)
(6,data)
(7,result)
(8,data)
(9,switch(6)
(10,data)
(11,data)
(12,switch(7)
(13,if(data > 0)
(14,"Benign, fixed string")
(15,)
(16,break;)
(17,result)
(18,data = \\\' \\\')
(19,printLine("Benign, fixed string")
(20,case 6:)
(21,data * 2)
(22,6)
(23,\\\' \\\')
(24,break;)
(25,2)
(26,CHAR_MAX)
(27,result = data * 2)
(28,default:)
(29,data > 0)
(30,0)
(31,printHexCharLine(result)
(32,break;)
(33,)
(34,data = CHAR_MAX)
(35,RET)
(36,7)
(37,break;)
(38,)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^