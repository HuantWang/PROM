-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_03_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(23,29,0)
(31,29,0)
(9,3,0)
(33,0,0)
(21,12,0)
(30,1,0)
(4,29,0)
(13,12,0)
(18,8,0)
(11,22,0)
(0,3,0)
(16,23,0)
(12,23,0)
(2,30,0)
(6,22,0)
(27,2,0)
(9,0,0)
(15,20,0)
(2,23,0)
(30,2,0)
(14,3,0)
(17,8,0)
(8,23,0)
(10,20,0)
(5,30,0)
(26,28,0)
(25,29,0)
(0,8,0)
(19,9,0)
(7,23,0)
(24,30,0)
(8,0,0)
(32,9,1)
(8,23,1)
(19,0,1)
(8,17,1)
(6,20,1)
(15,10,1)
(17,18,1)
(30,2,1)
(10,23,1)
(12,21,1)
(20,15,1)
(33,12,1)
(18,33,1)
(32,22,1)
(16,7,1)
(32,12,1)
(24,20,1)
(12,23,1)
(27,5,1)
(23,16,1)
(5,24,1)
(2,27,1)
(9,19,1)
(2,23,1)
(13,22,1)
(6,30,1)
(0,8,1)
(21,13,1)
(9,0,1)
(11,6,1)
(22,11,1)
(13,22,2)
(2,20,2)
(21,22,2)
(27,20,2)
(30,2,2)
(0,8,2)
(19,12,2)
(12,23,2)
(12,22,2)
(18,12,2)
(17,12,2)
(2,23,2)
(5,20,2)
(30,20,2)
(9,0,2)
(0,12,2)
(24,20,2)
(8,23,2)
(8,12,2)
(9,12,2)
(33,12,2)
-----------------------------------
(0,result = data * 2)
(1,)
(2,&data)
(3,)
(4,if(5==5)
(5,"%u")
(6,5)
(7,data)
(8,data * 2)
(9,printUnsignedLine(result)
(10,5)
(11,5)
(12,data > 0)
(13,data)
(14,result)
(15,5)
(16,0)
(17,2)
(18,data)
(19,result)
(20,5==5)
(21,0)
(22,5==5)
(23,data = 0)
(24,stdin)
(25,data)
(26,if(data > 0)
(27,data)
(28,)
(29,)
(30,fscanf (stdin, "%u", &data)
(31,if(5==5)
(32,RET)
(33,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^