-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_06_bad()
CWE190_Integer_Overflow__char_max_multiply_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,3,0)
(31,30,0)
(6,20,0)
(30,14,0)
(17,3,0)
(3,29,0)
(4,12,0)
(14,20,0)
(9,22,0)
(30,21,0)
(31,21,0)
(32,21,0)
(19,14,0)
(7,20,0)
(28,5,0)
(1,5,0)
(27,8,0)
(23,7,0)
(2,22,0)
(16,20,0)
(14,3,0)
(0,8,0)
(20,22,0)
(25,22,0)
(15,3,0)
(14,30,0)
(11,31,0)
(13,7,0)
(18,30,0)
(26,14,0)
(14,26,1)
(15,8,1)
(28,1,1)
(14,3,1)
(10,5,1)
(13,5,1)
(1,3,1)
(10,31,1)
(19,18,1)
(10,7,1)
(31,30,1)
(17,15,1)
(5,28,1)
(31,11,1)
(20,6,1)
(0,20,1)
(26,19,1)
(14,20,1)
(7,23,1)
(8,27,1)
(3,17,1)
(7,3,1)
(30,14,1)
(7,20,1)
(6,16,1)
(27,0,1)
(23,13,1)
(11,30,1)
(1,8,1)
(18,7,1)
(17,8,2)
(30,14,2)
(3,8,2)
(31,7,2)
(13,5,2)
(18,7,2)
(14,3,2)
(31,30,2)
(19,7,2)
(26,7,2)
(14,7,2)
(7,5,2)
(11,7,2)
(30,7,2)
(14,20,2)
(23,5,2)
(15,8,2)
(7,3,2)
(7,20,2)
-----------------------------------
(0,STATIC_CONST_FIVE)
(1,STATIC_CONST_FIVE)
(2,data)
(3,data = CHAR_MAX)
(4,if(data > 0)
(5,STATIC_CONST_FIVE==5)
(6,' ')
(7,data > 0)
(8,STATIC_CONST_FIVE==5)
(9,if(STATIC_CONST_FIVE==5)
(10,RET)
(11,result)
(12,)
(13,data)
(14,data * 2)
(15,data)
(16,data)
(17,CHAR_MAX)
(18,result)
(19,data)
(20,data = ' ')
(21,)
(22,)
(23,0)
(24,data = \' \')
(25,if(STATIC_CONST_FIVE==5)
(26,2)
(27,5)
(28,5)
(29,)
(30,result = data * 2)
(31,printHexCharLine(result)
(32,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^