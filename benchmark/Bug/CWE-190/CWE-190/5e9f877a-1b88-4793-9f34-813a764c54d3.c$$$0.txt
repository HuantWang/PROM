-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
        {
            short result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
63,65
66,67
68,69
68,70
69,70
69,71
72,73
72,74
73,74
75,76
75,77
76,77
76,78
79,80
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,49,53,55,61,64,65,67,70,71,74,77,78,80,84,86,90,92,96,98,103,104
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
58,59
58,60
88,89
88,90
-----guardedBy-----
67,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_max_square_12_bad()
CWE190_Integer_Overflow__short_max_square_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)SHRT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)SHRT_MAX)
long
long

sqrt((double)SHRT_MAX)
sqrt
sqrt
(double)SHRT_MAX
double
double

SHRT_MAX
SHRT_MAX
{            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(48,19,0)
(35,47,0)
(25,1,0)
(47,1,0)
(6,44,0)
(32,26,0)
(30,34,0)
(15,10,0)
(41,50,0)
(21,32,0)
(29,2,0)
(13,42,0)
(44,2,0)
(20,36,0)
(32,25,0)
(42,26,0)
(50,41,0)
(38,19,0)
(31,20,0)
(7,32,0)
(14,30,0)
(8,15,0)
(26,27,0)
(1,25,0)
(51,19,0)
(39,20,0)
(41,47,0)
(32,7,0)
(43,38,0)
(50,17,0)
(2,44,0)
(9,19,0)
(6,16,0)
(42,11,0)
(52,26,0)
(2,26,0)
(44,16,0)
(11,42,0)
(47,35,0)
(11,20,0)
(28,2,0)
(1,47,0)
(37,16,0)
(46,15,0)
(18,33,0)
(24,44,0)
(47,41,0)
(49,31,0)
(4,26,0)
(3,11,0)
(2,15,0)
(32,15,0)
(42,15,0)
(25,32,0)
(12,42,0)
(40,38,0)
(31,11,0)
(17,50,0)
(45,6,0)
(0,50,0)
(49,11,1)
(2,26,1)
(46,22,1)
(50,17,1)
(11,42,1)
(2,29,1)
(2,15,1)
(22,38,1)
(6,45,1)
(23,15,1)
(14,1,1)
(21,23,1)
(42,15,1)
(1,25,1)
(29,28,1)
(32,7,1)
(42,26,1)
(32,21,1)
(24,1,1)
(41,50,1)
(25,32,1)
(38,40,1)
(32,15,1)
(26,4,1)
(4,52,1)
(42,13,1)
(6,44,1)
(23,26,1)
(47,35,1)
(12,3,1)
(47,41,1)
(31,11,1)
(31,49,1)
(40,43,1)
(13,12,1)
(32,26,1)
(30,14,1)
(5,30,1)
(8,46,1)
(0,25,1)
(52,22,1)
(1,47,1)
(5,6,1)
(5,31,1)
(45,44,1)
(50,0,1)
(15,8,1)
(44,2,1)
(28,24,1)
(3,23,1)
(31,11,2)
(3,23,2)
(50,17,2)
(26,22,2)
(49,23,2)
(32,23,2)
(15,22,2)
(47,35,2)
(44,1,2)
(25,23,2)
(42,23,2)
(11,42,2)
(30,1,2)
(42,15,2)
(44,2,2)
(1,47,2)
(32,15,2)
(11,23,2)
(8,22,2)
(32,7,2)
(6,44,2)
(1,25,2)
(42,26,2)
(25,32,2)
(47,23,2)
(13,23,2)
(45,1,2)
(46,22,2)
(2,1,2)
(47,41,2)
(41,50,2)
(21,23,2)
(14,1,2)
(52,22,2)
(6,1,2)
(41,23,2)
(28,1,2)
(32,26,2)
(29,1,2)
(31,23,2)
(2,15,2)
(50,23,2)
(0,23,2)
(12,23,2)
(1,23,2)
(2,26,2)
(24,1,2)
(4,22,2)
-----------------------------------
(0,SHRT_MAX)
(1,abs((long)
(2,data * data)
(3,result)
(4,SHRT_MAX)
(5,RET)
(6,printIntLine(result)
(7,long)
(8,2)
(9,if(globalReturnsTrueOrFalse()
(10,)
(11,result = data * data)
(12,data)
(13,data)
(14,"data value is too large to perform arithmetic safely.")
(15,data = 2)
(16,)
(17,double)
(18,if (abs((long)
(19,)
(20,)
(21,data)
(22,globalReturnsTrueOrFalse()
(23,globalReturnsTrueOrFalse()
(24,result)
(25,abs((long)
(26,data = SHRT_MAX)
(27,)
(28,data)
(29,data)
(30,printLine("data value is too large to perform arithmetic safely.")
(31,printIntLine(result)
(32,(long)
(33,)
(34,)
(35,long)
(36,)
(37,result)
(38,data = 0)
(39,result)
(40,0)
(41,sqrt((double)
(42,data * data)
(43,data)
(44,result = data * data)
(45,result)
(46,data)
(47,(long)
(48,if(globalReturnsTrueOrFalse()
(49,result)
(50,(double)
(51,data)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^