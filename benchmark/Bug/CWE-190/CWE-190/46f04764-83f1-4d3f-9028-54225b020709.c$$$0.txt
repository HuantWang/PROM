-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_08_bad()
CWE190_Integer_Overflow__char_fscanf_square_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,18,0)
(15,22,0)
(24,8,0)
(23,19,0)
(2,4,0)
(19,8,0)
(0,10,0)
(11,0,0)
(10,0,0)
(7,8,0)
(16,18,0)
(1,10,0)
(6,4,0)
(3,18,0)
(25,20,0)
(19,4,0)
(10,8,0)
(4,19,0)
(22,17,0)
(20,0,0)
(4,5,0)
(20,22,0)
(13,18,0)
(0,22,0)
(14,10,0)
(20,25,1)
(7,24,1)
(20,0,1)
(21,9,1)
(2,6,1)
(19,8,1)
(10,14,1)
(10,8,1)
(21,20,1)
(14,1,1)
(25,0,1)
(9,4,1)
(23,2,1)
(19,23,1)
(4,19,1)
(8,7,1)
(0,10,1)
(11,9,1)
(6,12,1)
(1,11,1)
(9,12,1)
(12,8,1)
(10,8,2)
(19,12,2)
(0,10,2)
(14,9,2)
(20,0,2)
(6,12,2)
(19,8,2)
(10,9,2)
(25,9,2)
(0,9,2)
(11,9,2)
(4,19,2)
(2,12,2)
(20,9,2)
(1,9,2)
(23,12,2)
(4,12,2)
-----------------------------------
(0,result = data * data)
(1,data)
(2,"%c")
(3,if(staticReturnsTrue()
(4,fscanf (stdin, "%c", &data)
(5,)
(6,stdin)
(7,\\\' \\\')
(8,data = \\\' \\\')
(9,staticReturnsTrue()
(10,data * data)
(11,result)
(12,staticReturnsTrue()
(13,if(staticReturnsTrue()
(14,data)
(15,result)
(16,data)
(17,)
(18,)
(19,&data)
(20,printHexCharLine(result)
(21,RET)
(22,)
(23,data)
(24,data)
(25,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^