-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_add_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
89,90
91,92
93,94
93,95
94,95
95,96
95,97
97,98
97,99
99,100
100,101
101,102
103,104
103,105
104,105
105,106
105,107
107,108
107,109
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,79,84,85,90,92,96,98,102,106,108,112,113,117,119
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
87,88
87,89
110,111
110,112
-----guardedBy-----
63,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_add_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_add_32_bad()
CWE190_Integer_Overflow__int_fgets_add_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,19,0)
(59,41,0)
(44,60,0)
(2,19,0)
(31,26,0)
(59,6,0)
(55,2,0)
(34,27,0)
(12,15,0)
(20,48,0)
(46,6,0)
(23,44,0)
(46,52,0)
(41,15,0)
(14,19,0)
(60,42,0)
(5,22,0)
(15,54,0)
(42,16,0)
(33,54,0)
(19,27,0)
(37,54,0)
(11,27,0)
(43,32,0)
(38,42,0)
(57,44,0)
(1,54,0)
(39,44,0)
(42,60,0)
(28,46,0)
(30,29,0)
(9,41,0)
(56,4,0)
(41,24,0)
(13,33,0)
(23,31,0)
(16,4,0)
(47,19,0)
(60,26,0)
(7,31,0)
(17,52,0)
(27,48,0)
(40,6,0)
(4,16,0)
(8,24,0)
(0,27,0)
(6,32,0)
(32,6,0)
(22,45,0)
(16,54,0)
(21,16,0)
(35,26,0)
(24,34,0)
(26,54,0)
(19,2,0)
(44,23,0)
(24,49,0)
(58,23,0)
(6,54,0)
(29,23,0)
(53,34,0)
(10,59,0)
(34,24,0)
(50,54,0)
(52,46,0)
(52,15,0)
(29,31,0)
(36,48,0)
(51,60,0)
(48,15,0)
(41,52,0)
(25,33,0)
(42,16,1)
(33,13,1)
(41,52,1)
(0,52,1)
(4,56,1)
(55,19,1)
(10,24,1)
(53,8,1)
(25,16,1)
(51,41,1)
(29,30,1)
(6,32,1)
(41,24,1)
(19,47,1)
(59,10,1)
(16,4,1)
(5,2,1)
(2,55,1)
(29,23,1)
(30,23,1)
(38,51,1)
(39,57,1)
(44,60,1)
(18,29,1)
(23,44,1)
(32,43,1)
(22,5,1)
(34,53,1)
(11,0,1)
(59,6,1)
(24,34,1)
(17,33,1)
(3,27,1)
(46,28,1)
(47,14,1)
(34,27,1)
(58,60,1)
(57,58,1)
(2,19,1)
(46,6,1)
(41,9,1)
(19,27,1)
(52,46,1)
(44,39,1)
(60,42,1)
(9,59,1)
(56,21,1)
(21,6,1)
(27,11,1)
(43,40,1)
(13,25,1)
(28,17,1)
(8,2,1)
(14,3,1)
(10,22,1)
(42,38,1)
(52,46,2)
(8,2,2)
(6,32,2)
(24,2,2)
(23,44,2)
(5,2,2)
(24,34,2)
(19,27,2)
(22,2,2)
(53,2,2)
(60,42,2)
(16,4,2)
(41,52,2)
(44,60,2)
(46,6,2)
(59,6,2)
(34,27,2)
(34,2,2)
(29,23,2)
(2,19,2)
(42,16,2)
(41,24,2)
-----------------------------------
(0,inputBuffer)
(1,dataPtr2)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,inputBuffer)
(4,&data)
(5,"fgets()
(6,*dataPtr1 = &data)
(7,result)
(8,data)
(9,data)
(10,dataPtr1)
(11,"")
(12,data)
(13,0)
(14,CHAR_ARRAY_SIZE)
(15,)
(16,*dataPtr2 = &data)
(17,data)
(18,RET)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,dataPtr2)
(22,printLine("fgets()
(23,result = data + 1)
(24,data = atoi(inputBuffer)
(25,data)
(26,)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,dataPtr1)
(29,printIntLine(result)
(30,result)
(31,)
(32,&data)
(33,data = 0)
(34,atoi(inputBuffer)
(35,data)
(36,inputBuffer)
(37,data)
(38,dataPtr2)
(39,1)
(40,dataPtr1)
(41,*dataPtr1 = data)
(42,*dataPtr2)
(43,data)
(44,data + 1)
(45,)
(46,*dataPtr1)
(47,stdin)
(48,)
(49,)
(50,dataPtr1)
(51,data)
(52,data = *dataPtr1)
(53,inputBuffer)
(54,)
(55,NULL)
(56,data)
(57,data)
(58,result)
(59,*dataPtr1)
(60,data = *dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^