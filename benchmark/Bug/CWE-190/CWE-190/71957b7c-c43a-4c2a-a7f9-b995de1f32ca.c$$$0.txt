-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
        {
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
63,65
66,67
68,69
68,70
69,70
69,71
72,73
72,74
73,74
75,76
75,77
76,77
76,78
79,80
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,49,53,55,61,64,65,67,70,71,74,77,78,80,84,86,90,92,96,98,103,104
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
58,59
58,60
88,89
88,90
-----guardedBy-----
67,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_12_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) < (long)sqrt((double)UINT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)UINT_MAX)
long
long

sqrt((double)UINT_MAX)
sqrt
sqrt
(double)UINT_MAX
double
double

UINT_MAX
UINT_MAX
{            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(16,21,0)
(1,0,0)
(39,50,0)
(0,16,0)
(43,1,0)
(48,4,0)
(49,37,0)
(4,11,0)
(45,33,0)
(48,42,0)
(26,21,0)
(13,51,0)
(2,52,0)
(4,42,0)
(1,3,0)
(20,5,0)
(37,34,0)
(19,11,0)
(40,21,0)
(12,32,0)
(20,40,0)
(36,49,0)
(40,20,0)
(11,37,0)
(18,37,0)
(24,51,0)
(5,20,0)
(8,41,0)
(9,48,0)
(3,1,0)
(52,28,0)
(49,41,0)
(30,32,0)
(22,28,0)
(15,20,0)
(52,49,0)
(14,41,0)
(41,47,0)
(44,4,0)
(17,22,0)
(1,37,0)
(42,35,0)
(7,51,0)
(21,40,0)
(49,52,0)
(38,28,0)
(46,11,0)
(11,41,0)
(16,0,0)
(29,49,0)
(1,41,0)
(22,52,0)
(10,42,0)
(21,26,0)
(11,4,0)
(32,51,0)
(33,6,0)
(31,37,0)
(0,1,0)
(21,16,0)
(19,46,1)
(1,3,1)
(32,30,1)
(23,32,1)
(27,41,1)
(29,2,1)
(18,23,1)
(33,45,1)
(49,41,1)
(8,14,1)
(46,44,1)
(11,19,1)
(15,0,1)
(37,31,1)
(0,1,1)
(20,15,1)
(20,5,1)
(9,4,1)
(41,8,1)
(17,52,1)
(45,16,1)
(48,9,1)
(52,49,1)
(25,22,1)
(43,27,1)
(36,29,1)
(31,18,1)
(30,12,1)
(22,17,1)
(49,36,1)
(16,0,1)
(11,41,1)
(22,52,1)
(14,23,1)
(21,40,1)
(27,37,1)
(25,33,1)
(40,20,1)
(49,37,1)
(4,11,1)
(16,21,1)
(25,48,1)
(1,37,1)
(48,4,1)
(1,43,1)
(2,16,1)
(11,37,1)
(1,41,1)
(44,27,1)
(21,26,1)
(0,27,2)
(49,37,2)
(2,16,2)
(48,4,2)
(49,41,2)
(4,11,2)
(45,16,2)
(16,21,2)
(22,52,2)
(11,37,2)
(11,41,2)
(44,27,2)
(20,5,2)
(37,23,2)
(40,20,2)
(21,26,2)
(36,16,2)
(1,3,2)
(29,16,2)
(52,49,2)
(1,27,2)
(43,27,2)
(9,27,2)
(40,27,2)
(1,37,2)
(20,27,2)
(49,16,2)
(52,16,2)
(14,23,2)
(15,27,2)
(31,23,2)
(1,41,2)
(18,23,2)
(16,27,2)
(21,40,2)
(0,1,2)
(19,27,2)
(33,16,2)
(8,23,2)
(17,16,2)
(11,27,2)
(22,16,2)
(46,27,2)
(41,23,2)
(16,0,2)
(4,27,2)
(48,27,2)
(21,27,2)
-----------------------------------
(0,abs((long)
(1,(long)
(2,result)
(3,long)
(4,result = data * data)
(5,double)
(6,)
(7,data)
(8,2)
(9,result)
(10,result)
(11,data * data)
(12,data)
(13,if(globalReturnsTrueOrFalse()
(14,data)
(15,UINT_MAX)
(16,abs((long)
(17,result)
(18,data)
(19,data)
(20,(double)
(21,(long)
(22,printUnsignedLine(result)
(23,globalReturnsTrueOrFalse()
(24,if(globalReturnsTrueOrFalse()
(25,RET)
(26,long)
(27,globalReturnsTrueOrFalse()
(28,)
(29,data)
(30,0)
(31,UINT_MAX)
(32,data = 0)
(33,printLine("data value is too large to perform arithmetic safely.")
(34,)
(35,)
(36,data)
(37,data = UINT_MAX)
(38,result)
(39,if (abs((long)
(40,sqrt((double)
(41,data = 2)
(42,)
(43,data)
(44,result)
(45,"data value is too large to perform arithmetic safely.")
(46,data)
(47,)
(48,printUnsignedLine(result)
(49,data * data)
(50,)
(51,)
(52,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^