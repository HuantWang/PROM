-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
24,25
24,26
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,31,35,37
-----computeFrom-----
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_square_63b_badSink(short * dataPtr)
CWE190_Integer_Overflow__short_max_square_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,12,0)
(7,13,0)
(4,16,0)
(13,4,0)
(9,12,0)
(9,6,0)
(2,13,0)
(10,4,0)
(3,16,0)
(12,9,0)
(14,12,0)
(8,13,0)
(15,2,0)
(5,8,0)
(0,8,0)
(13,8,0)
(1,9,0)
(2,4,0)
(12,16,0)
(15,13,1)
(0,5,1)
(9,1,1)
(2,15,1)
(8,0,1)
(5,7,1)
(11,2,1)
(7,12,1)
(9,6,1)
(8,12,1)
(12,9,1)
(1,14,1)
(2,13,1)
(13,8,1)
(12,9,2)
(9,6,2)
(8,12,2)
(13,8,2)
(2,13,2)
-----------------------------------
(0,data)
(1,dataPtr)
(2,printIntLine(result)
(3,data)
(4,)
(5,data)
(6,short * dataPtr)
(7,result)
(8,data * data)
(9,*dataPtr)
(10,result)
(11,RET)
(12,data = *dataPtr)
(13,result = data * data)
(14,data)
(15,result)
(16,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^