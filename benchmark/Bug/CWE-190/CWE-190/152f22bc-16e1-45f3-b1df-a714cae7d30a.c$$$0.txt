-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
59,60
59,61
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,52,57,58,60,65,66,70,72,76,77,81,83
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
63,64
63,65
74,75
74,76
-----guardedBy-----
36,52
65,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_02_bad()
CWE190_Integer_Overflow__int_fgets_multiply_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,17,0)
(9,31,0)
(22,36,0)
(2,4,0)
(16,6,0)
(44,3,0)
(34,11,0)
(19,13,0)
(34,30,0)
(11,34,0)
(34,6,0)
(6,27,0)
(37,34,0)
(23,4,0)
(40,43,0)
(1,43,0)
(39,31,0)
(38,11,0)
(33,32,0)
(12,34,0)
(11,17,0)
(4,23,0)
(18,23,0)
(10,4,0)
(27,43,0)
(42,3,0)
(13,11,0)
(28,27,0)
(6,5,0)
(26,7,0)
(24,30,0)
(14,17,0)
(21,4,0)
(4,43,0)
(25,30,0)
(31,41,0)
(15,3,0)
(35,7,0)
(43,31,0)
(30,3,0)
(7,6,0)
(27,6,0)
(36,0,0)
(7,30,0)
(36,22,1)
(18,4,1)
(4,43,1)
(7,6,1)
(20,8,1)
(25,24,1)
(19,11,1)
(26,35,1)
(29,13,1)
(16,23,1)
(29,20,1)
(28,16,1)
(27,28,1)
(34,6,1)
(37,38,1)
(29,7,1)
(23,18,1)
(7,26,1)
(34,12,1)
(34,30,1)
(38,7,1)
(11,34,1)
(27,43,1)
(13,19,1)
(12,37,1)
(43,1,1)
(7,30,1)
(40,8,1)
(10,21,1)
(21,43,1)
(23,4,1)
(20,6,1)
(6,27,1)
(13,11,1)
(4,2,1)
(35,20,1)
(1,40,1)
(30,25,1)
(22,23,1)
(2,10,1)
(20,36,1)
(8,30,1)
(26,20,2)
(36,23,2)
(2,8,2)
(23,8,2)
(40,8,2)
(34,7,2)
(34,30,2)
(6,23,2)
(19,7,2)
(38,7,2)
(6,27,2)
(13,7,2)
(35,20,2)
(28,23,2)
(43,8,2)
(27,43,2)
(37,7,2)
(7,20,2)
(11,34,2)
(10,8,2)
(4,8,2)
(11,7,2)
(23,4,2)
(22,23,2)
(18,8,2)
(1,8,2)
(4,43,2)
(12,7,2)
(21,8,2)
(16,23,2)
(13,11,2)
(7,6,2)
(34,6,2)
(7,30,2)
(27,23,2)
-----------------------------------
(0,)
(1,"")
(2,stdin)
(3,)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,)
(6,data = atoi(inputBuffer)
(7,data > 0)
(8,1)
(9,inputBuffer)
(10,CHAR_ARRAY_SIZE)
(11,result = data * 2)
(12,2)
(13,printIntLine(result)
(14,result)
(15,if(1)
(16,data)
(17,)
(18,NULL)
(19,result)
(20,1)
(21,inputBuffer)
(22,"fgets()
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,data)
(25,0)
(26,0)
(27,atoi(inputBuffer)
(28,inputBuffer)
(29,RET)
(30,data = 0)
(31,)
(32,)
(33,if(data > 0)
(34,data * 2)
(35,data)
(36,printLine("fgets()
(37,data)
(38,result)
(39,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,inputBuffer)
(41,)
(42,data)
(43,inputBuffer[CHAR_ARRAY_SIZE] = "")
(44,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^