-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,66,70,72,76,77,81,83
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
63,64
63,65
74,75
74,76
-----guardedBy-----
65,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_17_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(32,43,0)
(45,24,0)
(43,35,0)
(31,24,0)
(44,14,0)
(17,25,0)
(14,44,0)
(2,27,0)
(29,33,0)
(35,27,0)
(40,39,0)
(33,18,0)
(26,35,0)
(42,6,0)
(9,35,0)
(0,43,0)
(19,6,0)
(4,25,0)
(6,41,0)
(13,7,0)
(11,18,0)
(20,7,0)
(15,21,0)
(8,27,0)
(23,18,0)
(43,21,0)
(22,4,0)
(35,6,0)
(1,10,0)
(12,24,0)
(38,4,0)
(6,44,0)
(34,24,0)
(37,19,0)
(28,44,0)
(44,6,0)
(19,27,0)
(32,21,0)
(16,25,0)
(5,24,0)
(39,25,0)
(36,19,0)
(30,32,0)
(7,18,0)
(35,43,0)
(27,24,0)
(44,28,0)
(32,30,1)
(2,8,1)
(29,32,1)
(17,16,1)
(36,7,1)
(35,9,1)
(43,35,1)
(3,7,1)
(39,25,1)
(39,40,1)
(35,27,1)
(37,36,1)
(38,22,1)
(26,0,1)
(7,20,1)
(9,26,1)
(0,19,1)
(13,33,1)
(7,18,1)
(30,43,1)
(35,6,1)
(44,14,1)
(20,13,1)
(33,29,1)
(44,28,1)
(6,44,1)
(14,42,1)
(13,18,1)
(4,38,1)
(27,2,1)
(42,4,1)
(33,18,1)
(22,25,1)
(19,27,1)
(40,6,1)
(19,37,1)
(19,6,1)
(11,4,1)
(16,27,1)
(22,39,1)
(29,19,1)
(23,11,1)
(32,43,1)
(4,25,1)
(18,23,1)
(25,17,1)
(39,25,2)
(43,19,2)
(6,4,2)
(0,19,2)
(19,27,2)
(13,7,2)
(44,14,2)
(39,4,2)
(19,6,2)
(20,7,2)
(7,18,2)
(42,4,2)
(30,19,2)
(43,35,2)
(4,25,2)
(32,19,2)
(44,4,2)
(6,44,2)
(33,7,2)
(4,4,2)
(44,28,2)
(35,19,2)
(7,7,2)
(9,19,2)
(35,27,2)
(26,19,2)
(29,7,2)
(14,4,2)
(33,18,2)
(22,4,2)
(35,6,2)
(38,4,2)
(40,4,2)
(37,7,2)
(32,43,2)
(19,7,2)
(36,7,2)
-----------------------------------
(0,result)
(1,if(data > 0)
(2,0)
(3,RET)
(4,i < 1)
(5,for(j = 0; j < 1; j++)
(6,data = (unsigned int)
(7,j < 1)
(8,data)
(9,2)
(10,)
(11,j)
(12,for(i = 0; i < 1; i++)
(13,j)
(14,RAND32()
(15,result)
(16,i)
(17,0)
(18,j = 0)
(19,data > 0)
(20,1)
(21,)
(22,i)
(23,0)
(24,)
(25,i = 0)
(26,data)
(27,data = 0)
(28,unsigned int)
(29,j)
(30,result)
(31,i)
(32,printUnsignedLine(result)
(33,j++)
(34,j)
(35,data * 2)
(36,data)
(37,0)
(38,1)
(39,i++)
(40,i)
(41,)
(42,data)
(43,result = data * 2)
(44,(unsigned int)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^