-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_03_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(14,11,0)
(21,25,0)
(19,16,0)
(3,19,0)
(0,16,0)
(8,28,0)
(17,14,0)
(4,7,0)
(15,3,0)
(13,14,0)
(19,3,0)
(17,7,0)
(18,28,0)
(0,19,0)
(3,7,0)
(14,17,0)
(22,25,0)
(1,3,0)
(5,20,0)
(7,25,0)
(16,6,0)
(29,25,0)
(9,7,0)
(24,14,0)
(10,20,0)
(12,0,0)
(27,17,0)
(23,16,0)
(2,19,0)
(17,7,1)
(20,10,1)
(5,14,1)
(24,28,1)
(13,24,1)
(0,12,1)
(14,17,1)
(26,0,1)
(5,28,1)
(17,27,1)
(7,9,1)
(15,1,1)
(10,5,1)
(26,20,1)
(28,18,1)
(8,7,1)
(12,19,1)
(9,4,1)
(3,15,1)
(27,13,1)
(2,20,1)
(3,7,1)
(19,3,1)
(0,19,1)
(1,2,1)
(18,8,1)
(17,7,2)
(3,20,2)
(13,28,2)
(17,28,2)
(15,20,2)
(12,20,2)
(14,17,2)
(1,20,2)
(19,3,2)
(19,20,2)
(2,20,2)
(27,28,2)
(0,19,2)
(3,7,2)
(24,28,2)
(0,20,2)
(14,28,2)
-----------------------------------
(0,printUnsignedLine(result)
(1,data)
(2,result)
(3,data * data)
(4,data)
(5,5)
(6,)
(7,data = 0)
(8,5)
(9,0)
(10,5)
(11,)
(12,result)
(13,"%u")
(14,fscanf (stdin, "%u", &data)
(15,data)
(16,)
(17,&data)
(18,5)
(19,result = data * data)
(20,5==5)
(21,if(5==5)
(22,data)
(23,result)
(24,stdin)
(25,)
(26,RET)
(27,data)
(28,5==5)
(29,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^