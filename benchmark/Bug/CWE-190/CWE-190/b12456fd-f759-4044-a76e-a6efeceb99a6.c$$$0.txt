-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,64,69,70,74,76,80,81,85,87
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
47,48
47,49
62,63
62,64
67,68
67,69
78,79
78,80
-----guardedBy-----
38,54
69,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_03_bad()
CWE190_Integer_Overflow__int_fgets_multiply_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,30,0)
(35,13,0)
(34,30,0)
(32,3,0)
(0,2,0)
(28,22,0)
(21,30,0)
(44,41,0)
(3,25,0)
(37,29,0)
(1,3,0)
(20,28,0)
(9,7,0)
(28,13,0)
(10,25,0)
(18,22,0)
(23,41,0)
(33,32,0)
(42,45,0)
(38,25,0)
(16,28,0)
(29,45,0)
(13,32,0)
(11,13,0)
(13,4,0)
(44,20,0)
(40,22,0)
(12,24,0)
(35,22,0)
(28,20,0)
(46,28,0)
(6,39,0)
(31,30,0)
(5,7,0)
(36,2,0)
(25,17,0)
(48,3,0)
(24,47,0)
(32,13,0)
(20,41,0)
(45,29,0)
(27,44,0)
(45,3,0)
(19,35,0)
(26,20,0)
(14,35,0)
(8,45,0)
(15,45,0)
(9,13,1)
(14,7,1)
(43,44,1)
(44,20,1)
(11,29,1)
(35,22,1)
(5,9,1)
(29,37,1)
(29,45,1)
(19,14,1)
(9,24,1)
(33,11,1)
(1,48,1)
(0,36,1)
(45,3,1)
(40,18,1)
(36,22,1)
(8,42,1)
(43,7,1)
(15,3,1)
(44,27,1)
(35,19,1)
(28,22,1)
(16,26,1)
(3,1,1)
(20,28,1)
(22,40,1)
(37,45,1)
(9,2,1)
(24,12,1)
(45,8,1)
(28,46,1)
(43,35,1)
(13,32,1)
(26,35,1)
(35,13,1)
(46,16,1)
(48,2,1)
(42,15,1)
(7,5,1)
(32,33,1)
(27,20,1)
(32,3,1)
(12,29,1)
(2,0,1)
(28,13,1)
(44,20,2)
(26,35,2)
(48,2,2)
(35,13,2)
(3,2,2)
(27,35,2)
(33,29,2)
(32,29,2)
(46,35,2)
(37,2,2)
(13,32,2)
(20,35,2)
(44,35,2)
(11,29,2)
(35,7,2)
(42,2,2)
(14,7,2)
(1,2,2)
(20,28,2)
(28,35,2)
(16,35,2)
(35,22,2)
(32,3,2)
(29,2,2)
(24,29,2)
(28,22,2)
(45,3,2)
(29,45,2)
(13,29,2)
(45,2,2)
(12,29,2)
(15,2,2)
(8,2,2)
(19,7,2)
(28,13,2)
-----------------------------------
(0,5)
(1,"")
(2,5==5)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,)
(5,5)
(6,if(data > 0)
(7,5==5)
(8,stdin)
(9,5)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,data)
(12,"fgets()
(13,data = atoi(inputBuffer)
(14,data)
(15,inputBuffer)
(16,data)
(17,)
(18,data)
(19,0)
(20,result = data * 2)
(21,if(5==5)
(22,data = 0)
(23,result)
(24,printLine("fgets()
(25,)
(26,result)
(27,result)
(28,data * 2)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,)
(31,data)
(32,atoi(inputBuffer)
(33,inputBuffer)
(34,if(5==5)
(35,data > 0)
(36,5)
(37,NULL)
(38,inputBuffer)
(39,)
(40,0)
(41,)
(42,CHAR_ARRAY_SIZE)
(43,RET)
(44,printIntLine(result)
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,2)
(47,)
(48,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^