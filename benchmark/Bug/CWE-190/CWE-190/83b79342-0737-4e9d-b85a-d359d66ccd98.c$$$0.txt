-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_06_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_06_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_06_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_06_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(4,21,0)
(18,16,0)
(22,13,0)
(21,13,0)
(2,0,0)
(23,0,0)
(9,25,0)
(10,0,0)
(1,21,0)
(11,6,0)
(24,7,0)
(15,0,0)
(7,17,0)
(3,15,0)
(26,21,0)
(25,7,0)
(5,13,0)
(19,15,0)
(13,12,0)
(8,16,0)
(21,15,0)
(25,4,0)
(14,6,0)
(4,7,0)
(20,4,0)
(21,4,0)
(15,19,1)
(14,11,1)
(25,9,1)
(18,6,1)
(9,4,1)
(22,5,1)
(26,20,1)
(27,25,1)
(21,13,1)
(1,26,1)
(25,4,1)
(8,18,1)
(6,14,1)
(21,15,1)
(18,13,1)
(13,22,1)
(20,16,1)
(16,8,1)
(11,15,1)
(5,6,1)
(21,1,1)
(27,16,1)
(4,21,1)
(19,3,1)
(1,16,2)
(5,6,2)
(25,4,2)
(20,16,2)
(25,16,2)
(21,15,2)
(21,13,2)
(13,6,2)
(26,16,2)
(4,21,2)
(9,16,2)
(4,16,2)
(21,16,2)
(22,6,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,data)
(4,result = data * data)
(5,data)
(6,STATIC_CONST_FIVE==5)
(7,)
(8,5)
(9,result)
(10,if(STATIC_CONST_FIVE==5)
(11,STATIC_CONST_FIVE)
(12,)
(13,data = UINT_MAX)
(14,5)
(15,data = 0)
(16,STATIC_CONST_FIVE==5)
(17,)
(18,STATIC_CONST_FIVE)
(19,0)
(20,result)
(21,data * data)
(22,UINT_MAX)
(23,if(STATIC_CONST_FIVE==5)
(24,result)
(25,printUnsignedLine(result)
(26,data)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^