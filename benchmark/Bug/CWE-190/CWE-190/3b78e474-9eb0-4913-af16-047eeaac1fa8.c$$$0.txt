-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_14_bad()
CWE190_Integer_Overflow__int_max_multiply_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,21,0)
(15,26,0)
(3,26,0)
(21,15,0)
(3,16,0)
(22,14,0)
(11,25,0)
(16,0,0)
(7,14,0)
(13,15,0)
(18,3,0)
(24,26,0)
(20,17,0)
(15,16,0)
(6,27,0)
(25,12,0)
(21,12,0)
(25,21,0)
(15,21,0)
(28,3,0)
(19,12,0)
(5,26,0)
(4,16,0)
(8,17,0)
(1,0,0)
(23,15,0)
(30,0,0)
(26,2,0)
(9,16,0)
(31,0,0)
(24,5,1)
(7,22,1)
(3,28,1)
(9,4,1)
(21,15,1)
(29,17,1)
(25,21,1)
(15,13,1)
(8,20,1)
(11,21,1)
(5,14,1)
(13,23,1)
(28,18,1)
(20,26,1)
(18,17,1)
(29,3,1)
(15,16,1)
(25,11,1)
(10,3,1)
(3,26,1)
(16,9,1)
(23,10,1)
(3,16,1)
(22,16,1)
(20,14,1)
(17,8,1)
(15,26,1)
(29,25,1)
(26,24,1)
(14,7,1)
(21,15,2)
(24,14,2)
(21,3,2)
(28,17,2)
(25,3,2)
(3,16,2)
(26,14,2)
(11,3,2)
(23,3,2)
(3,17,2)
(15,16,2)
(3,26,2)
(15,26,2)
(5,14,2)
(10,3,2)
(15,3,2)
(18,17,2)
(13,3,2)
(25,21,2)
-----------------------------------
(0,)
(1,data)
(2,)
(3,data > 0)
(4,data)
(5,data)
(6,if(data > 0)
(7,5)
(8,5)
(9,0)
(10,result)
(11,result)
(12,)
(13,2)
(14,globalFive==5)
(15,data * 2)
(16,data = 0)
(17,globalFive==5)
(18,data)
(19,result)
(20,globalFive)
(21,result = data * 2)
(22,globalFive)
(23,data)
(24,INT_MAX)
(25,printIntLine(result)
(26,data = INT_MAX)
(27,)
(28,0)
(29,RET)
(30,if(globalFive==5)
(31,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^