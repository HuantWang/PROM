-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,54,58,60,61,62,66,67,68
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_add_15_bad()
CWE190_Integer_Overflow__char_fscanf_add_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(35,17,0)
(18,30,0)
(26,18,0)
(23,24,0)
(13,14,0)
(7,0,0)
(12,13,0)
(24,23,0)
(10,14,0)
(4,22,0)
(32,0,0)
(24,17,0)
(11,13,0)
(6,23,0)
(36,14,0)
(9,30,0)
(2,13,0)
(33,20,0)
(20,30,0)
(25,17,0)
(21,30,0)
(37,0,0)
(28,17,0)
(31,2,0)
(1,17,0)
(5,30,0)
(2,20,0)
(22,20,0)
(19,24,0)
(29,17,0)
(8,30,0)
(15,24,0)
(27,29,0)
(14,0,0)
(13,2,0)
(22,2,0)
(23,14,0)
(15,19,1)
(2,13,1)
(26,16,1)
(29,27,1)
(23,14,1)
(12,11,1)
(10,36,1)
(6,15,1)
(22,2,1)
(4,2,1)
(5,22,1)
(3,5,1)
(19,34,1)
(27,34,1)
(8,18,1)
(22,4,1)
(23,6,1)
(14,10,1)
(13,12,1)
(3,8,1)
(13,14,1)
(18,26,1)
(16,35,1)
(31,16,1)
(1,29,1)
(24,23,1)
(11,31,1)
(16,1,1)
(35,24,1)
(34,14,1)
(24,34,2)
(22,2,2)
(18,16,2)
(22,16,2)
(23,14,2)
(2,16,2)
(26,16,2)
(4,16,2)
(1,34,2)
(11,16,2)
(23,34,2)
(27,34,2)
(35,34,2)
(2,13,2)
(6,34,2)
(13,16,2)
(5,16,2)
(8,16,2)
(13,14,2)
(29,34,2)
(24,23,2)
(19,34,2)
(31,16,2)
(15,34,2)
(12,16,2)
-----------------------------------
(0,)
(1,break;)
(2,result = data + 1)
(3,RET)
(4,result)
(5,break;)
(6,data)
(7,switch(6)
(8,break;)
(9,default:)
(10,\\\' \\\')
(11,data)
(12,1)
(13,data + 1)
(14,data = \\\' \\\')
(15,"%c")
(16,7)
(17,)
(18,printLine("Benign, fixed string")
(19,stdin)
(20,)
(21,case 7:)
(22,printHexCharLine(result)
(23,&data)
(24,fscanf (stdin, "%c", &data)
(25,default:)
(26,"Benign, fixed string")
(27,"Benign, fixed string")
(28,case 6:)
(29,printLine("Benign, fixed string")
(30,)
(31,result)
(32,data)
(33,result)
(34,6)
(35,break;)
(36,data)
(37,switch(7)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^