-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_08_bad()
CWE190_Integer_Overflow__short_max_square_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,14,0)
(6,16,0)
(10,5,0)
(13,17,0)
(17,12,0)
(18,15,0)
(3,11,0)
(14,13,0)
(14,17,0)
(15,11,0)
(16,10,0)
(8,16,0)
(19,15,0)
(21,13,0)
(2,11,0)
(9,17,0)
(16,15,0)
(23,11,0)
(16,13,0)
(13,16,0)
(4,10,0)
(20,10,0)
(6,8,1)
(22,10,1)
(10,20,1)
(19,18,1)
(7,14,1)
(1,15,1)
(14,13,1)
(22,1,1)
(16,15,1)
(0,13,1)
(4,1,1)
(14,0,1)
(7,22,1)
(16,10,1)
(15,19,1)
(20,4,1)
(13,16,1)
(16,6,1)
(21,22,1)
(8,21,1)
(21,22,2)
(4,1,2)
(13,22,2)
(14,22,2)
(0,22,2)
(16,22,2)
(14,13,2)
(6,22,2)
(8,22,2)
(20,1,2)
(10,1,2)
(16,15,2)
(16,10,2)
(13,16,2)
-----------------------------------
(0,result)
(1,staticReturnsTrue()
(2,if(staticReturnsTrue()
(3,if(staticReturnsTrue()
(4,data)
(5,)
(6,data)
(7,RET)
(8,data)
(9,result)
(10,data = SHRT_MAX)
(11,)
(12,)
(13,result = data * data)
(14,printIntLine(result)
(15,data = 0)
(16,data * data)
(17,)
(18,data)
(19,0)
(20,SHRT_MAX)
(21,result)
(22,staticReturnsTrue()
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^