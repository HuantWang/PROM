-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,36,38,42,44
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_square_01_bad()
CWE190_Integer_Overflow__char_rand_square_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,15,0)
(19,11,0)
(18,4,0)
(11,19,0)
(10,14,0)
(19,17,0)
(7,0,0)
(13,10,0)
(15,18,0)
(18,15,0)
(3,10,0)
(4,14,0)
(1,16,0)
(5,18,0)
(9,15,0)
(15,16,0)
(8,14,0)
(4,19,0)
(6,18,0)
(2,4,0)
(17,19,0)
(16,14,0)
(0,16,0)
(19,4,0)
(4,19,1)
(2,10,1)
(13,3,1)
(7,15,1)
(10,13,1)
(9,4,1)
(15,18,1)
(12,0,1)
(11,2,1)
(5,9,1)
(0,15,1)
(19,17,1)
(18,6,1)
(0,7,1)
(6,5,1)
(19,11,1)
(18,4,1)
(4,19,2)
(19,17,2)
(19,11,2)
(18,4,2)
(15,18,2)
(0,15,2)
-----------------------------------
(0,printHexCharLine(result)
(1,result)
(2,data)
(3,data)
(4,data = (char)
(5,data)
(6,data)
(7,result)
(8,data)
(9,result)
(10,data = ' ')
(11,RAND32()
(12,RET)
(13,' ')
(14,)
(15,result = data * data)
(16,)
(17,char)
(18,data * data)
(19,(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^